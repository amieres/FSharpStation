{
"version": 3,
"sourceRoot": "Source",
"sources": ["RuleEditor/RuleEditor.fs"],
"sourcesContent": ["#nowarn \"52\"\n////-d:FSS_SERVER -d:FSharpStation1547097944900 -d:WEBSHARPER\n////#cd @\"..\\projects\\RuleEditor\\src\"\n//#I @\"..\\packages\\WebSharper\\lib\\net461\"\n//#I @\"..\\packages\\WebSharper.UI\\lib\\net461\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n//#r @\"..\\packages\\Microsoft.Owin\\lib\\net451\\Microsoft.Owin.dll\"\n//#r @\"..\\packages\\WebSharper.Owin.WebSocket\\lib\\net461\\Owin.WebSocket.dll\"\n//#r @\"..\\packages\\WebSharper.Owin.WebSocket\\lib\\net461\\WebSharper.Owin.WebSocket.dll\"\n//#r @\"..\\..\\LayoutEngine\\bin\\LayoutEngine.dll\"\n//#r @\"..\\packages\\Owin\\lib\\net40\\Owin.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.Hosting\\lib\\net451\\Microsoft.Owin.Hosting.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.Host.HttpListener\\lib\\net451\\Microsoft.Owin.Host.HttpListener.dll\"\n//#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\WebSharper.Owin.dll\"\n//#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\HttpMultipartParser.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.StaticFiles\\lib\\net451\\Microsoft.Owin.StaticFiles.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.FileSystems\\lib\\net451\\Microsoft.Owin.FileSystems.dll\"\n//#nowarn \"52\"\n/// Root namespace for all code\n//#define FSharpStation1547097944900\n#if INTERACTIVE\nmodule FsRoot   =\n#else\nnamespace FsRoot\n#endif\n\n    #if WEBSHARPER\n    //#define NOFRAMEWORK --noframework\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\"\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n    \n    //#I @\"..\\packages\\WebSharper\\lib\\net461\"\n    //#I @\"..\\packages\\WebSharper.UI\\lib\\net461\"\n    \n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n    \n    open WebSharper\n    open WebSharper.JavaScript\n    open WebSharper.UI\n    open WebSharper.UI.Client\n    type on   = WebSharper.UI.Html.on\n    type attr = WebSharper.UI.Html.attr\n    #else\n    /// dummy WebSharper definition in order to avoid having to use #if WEBSHARPER all the time\n    module WebSharper =\n        type RpcAttribute() =\n            let a = 1\n        type JavaScriptAttribute(translate:bool) =\n            let a = 1\n            new() = JavaScriptAttribute true\n        type InlineAttribute(code:string) =\n            let a = 1\n            new() = InlineAttribute \"\"\n        type DirectAttribute(code:string) =\n            let a = 1\n    \n    open WebSharper\n    \n    #endif\n    \n        /// Essentials that can be converted to JavaScript with WebSharper\n        [< JavaScript ; AutoOpen >]\n        module Library =\n            let Error = Result.Error\n            let [<Inline>] inline swap f a b = f b a\n            \n            /// swap: for use with operators: [1..5] |> List.map (__ (/) 2)\n            let [<Inline>] inline __   f a b = f b a\n            \n            /// call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |> tee (printfn \"value = %d\") |> doSomethingElse\n            let [<Inline>] inline tee f v = f v ; v\n            \n            /// tee: call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |!> printfn \"value = %d\" |> doSomethingElse\n            let [<Inline>] inline  (|>!) v f   = f v ; v\n            let [<Inline>] inline  (>>!) g f   = g >> fun v -> f v ; v\n            \n            let inline print v = \n                match box v with\n                | :? string as s -> printfn \"%s\" s\n                | __             -> printfn \"%A\" v\n            \n            [< Inline \"(function (n) { return n.getFullYear() + '-' + ('0'+(n.getMonth()+1)).slice(-2) + '-' +  ('0'+n.getDay()).slice(-2) + ' '+('0'+n.getHours()).slice(-2)+ ':'+('0'+n.getMinutes()).slice(-2)+ ':'+('0'+n.getSeconds()).slice(-2)+ ':'+('00'+n.getMilliseconds()).slice(-3) })(new Date(Date.now()))\" >]\n            let nowStamp() = \n                let t = System.DateTime.UtcNow // in two steps to avoid Warning: The value has been copied to ensure the original is not mutated\n                t.ToString(\"yyyy-MM-dd HH:mm:ss.fff\", System.Globalization.CultureInfo.InvariantCulture)\n            \n            let [<Inline>] inline traceT t v = tee (sprintf \"%A\" >> (fun s -> s.[..min 100 s.Length-1]) >> printfn \"%s %s: %A\" (nowStamp()) t) v\n            let [<Inline>] inline trace   v = traceT \"trace\" v\n            let [<Inline>] inline traceI  v = trace          v |> ignore\n            \n            module Log =\n                let [<Inline>] inline In     n f   =      (traceT (sprintf \"%s in \" n)) >> f\n                let [<Inline>] inline Out    n f   = f >> (traceT (sprintf \"%s out\" n))\n                let [<Inline>] inline InA    n f p = async { return! In  n f p }\n                let [<Inline>] inline OutA   n f p = async { return! Out n f p }\n                let [<Inline>] inline InOut  n     = In  n >> Out  n\n                let [<Inline>] inline InOutA n f p = async {\n                    let!   r = InA n f  p\n                    do         Out n id r |> ignore\n                    return r \n                  }\n            \n                let [<Inline>] inline TimeIt n f p =\n                    printfn \"Starting %s\" n\n                    let start = System.DateTime.UtcNow.Ticks\n                    f p\n                    let elapsedSpan = new System.TimeSpan(System.DateTime.UtcNow.Ticks - start)\n                    print <| elapsedSpan.ToString()\n            \n            \n            /// Extensible type for error messages, warnings and exceptions\n            type ResultMessage<'M> =\n                | NoMsg\n                | ErrorMsg  of string\n                | Warning   of string\n                | Info      of string\n                | Message   of 'M\n                | ExceptMsg of string * string\n                | RMessages of ResultMessage<'M> []\n                with \n                override msg.ToString() =\n                    match msg with\n                    | NoMsg          ->  \"\"\n                    | ErrorMsg  m    ->  m      |> sprintf \"Error    : %s\"\n                    | Warning   m    ->  m      |> sprintf \"Warning  : %s\"\n                    | Info      m    ->  m\n                    | Message   m    ->  m      |> sprintf \"%O\"\n                    | ExceptMsg(m,p) -> (m, p) ||> sprintf \"Exception: %s, %s\"\n                    | RMessages ms   ->  ms     |> Seq.filter (function NoMsg -> false |_-> true) |> Seq.map (fun m -> m.ToString()) |> String.concat \"\\n\"\n            \n            [< AutoOpen >]\n            module ResultMessageHelpers =\n                let errorMsgf fmt = Printf.ksprintf ErrorMsg fmt\n                let warningf  fmt = Printf.ksprintf Warning  fmt\n                let infof     fmt = Printf.ksprintf Info     fmt\n            \n            module ResultMessage =\n            \n                let inline noMsg    msg = msg |> function NoMsg -> true |_-> false\n                let inline exclnoMsg ms = ms |> Seq.filter (noMsg >> not)\n                /// converts Messages to other type of ResultMessage\n                let rec bindMessage f msg = \n                    match msg with\n                    | NoMsg          ->  NoMsg\n                    | Message   m    ->  f         m\n                    | ErrorMsg  m    ->  ErrorMsg  m\n                    | Info      m    ->  Info      m\n                    | Warning   m    ->  Warning   m\n                    | ExceptMsg(m,p) ->  ExceptMsg(m,p)\n                    | RMessages ms   ->  ms     |> Array.map (bindMessage f) |> RMessages\n            \n                /// a Message is converted to ErrorMsg\n                let freeMessageF f msg = msg |> bindMessage f\n                /// a Message is converted to ErrorMsg\n                let freeMessage    msg = msg |> freeMessageF (sprintf \"%O\" >> ErrorMsg)\n                /// a Message is converted to Warning\n                let freeMessageW   msg = msg |> freeMessageF (sprintf \"%O\" >> Warning )\n                /// a Message is converted to Info\n                let freeMessageI   msg = msg |> freeMessageF (sprintf \"%O\" >> Info    )\n            \n                let rec isInfoF f msg =\n                    match msg with\n                    | Info      _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (isInfoF f)\n                    | _              ->  false\n                /// a Message is not considered Info\n                let isInfo  msg = msg |> isInfoF (fun _ -> false)\n                /// a Message is considered Info\n                let isInfoI msg = msg |> isInfoF (fun _ -> true )\n            \n                let rec isWarningOrInfoF f msg =\n                    match msg with\n                    | Warning   _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (fun m -> isWarningOrInfoF f m || isInfoF f m)\n                    | _              ->  false\n                /// a Message is not considered a Warning\n                let isWarningOrInfo  msg = msg |> isWarningOrInfoF (fun _ -> false)\n                /// a Message is considered a Warning\n                let isWarningOrInfoW msg = msg |> isWarningOrInfoF (fun _ -> true )\n            \n                let rec isFatalF f msg =\n                    match msg with\n                    | NoMsg\n                    | Info      _    \n                    | Warning   _    ->  false\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> Seq.exists (isFatalF f)\n                    | _              ->  true\n                    //|>! printfn \"%A = %A\" msg\n                /// a Message is considered fatal\n                let isFatal  msg = msg |> isFatalF (fun _ -> true )\n                /// a Message is not considered fatal\n                let isFatalW msg = msg |> isFatalF (fun _ -> false)\n            \n                let rec countF f msg =\n                    match msg with\n                    | NoMsg          ->  0, 0, 0\n                    | Info      _    ->  0, 0, 1\n                    | Warning   _    ->  0, 1, 0\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.map (countF f) |> Seq.fold (fun (f, w, i) (fm, wm, im) -> f + fm, w + wm, i + im) (0, 0, 0)\n                    | _              ->  1, 0, 0\n            \n                /// a Message is considered an error\n                let count  msg = msg |> countF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let countW msg = msg |> countF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let countI msg = msg |> countF (fun _ -> 0, 0, 1)\n                \n                let addMsg a b =\n                    match a, b with\n                    | NoMsg        , c\n                    | c            , NoMsg         ->  c\n                    | RMessages mas, RMessages mbs ->  Array.append    mas      mbs   |> RMessages\n                    |           ma , RMessages mbs ->  Array.append [| ma |]    mbs   |> RMessages\n                    | RMessages mas,           mb  ->  Array.append    mas   [| mb |] |> RMessages\n                    |           ma ,           mb  ->               [| ma   ;   mb |] |> RMessages\n            \n                let reduceMsgs ms = (NoMsg, ms) ||> Seq.fold addMsg\n            \n                let summaryF f msg =\n                    match countF f msg with\n                    | 0, 0, _\n                    | 1, 0, 0\n                    | 0, 1, 0 -> \"\"\n                    | e, 0, _ -> sprintf \"Errors   : %d\\n\" e\n                    | 0, w, _ -> sprintf \"Warnings : %d\\n\" w\n                    | e, w, _ -> sprintf \"Errors   : %d, Warnings: %d\\n\" e w\n            \n                /// returns a string with a count of errors and warnings, if more than one\n                let summarizedF f msg = [ msg.ToString() ; summaryF f msg ] |> Seq.filter ((<>) \"\") |> String.concat \"\\n\"\n                /// a Message is considered an error\n                let summarized  msg = msg |> summarizedF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let summarizedW msg = msg |> summarizedF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let summarizedI msg = msg |> summarizedF (fun _ -> 0, 0, 1)\n                \n            [< AutoOpen >]\n            module Monads =\n                module Seq =    \n                    let rtn = Seq.singleton\n                    let insertO  vSO              = vSO |> Option.map(Seq.map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vSR:Result<_,_>) = vSR |> function | Error m -> rtn (Error m) | Ok v -> Seq.map Ok v\n                    let absorbO  vOS              = vOS |> Seq.choose id\n                    let absorbR  vOS              = vOS |> Seq.choose (function Ok v -> Some v |_-> None)\n                    \n                module Option =\n                    open Option\n                    \n                    let rtn    = Some\n                    let iter f = map f >> Option.defaultValue ()\n                \n                    let join o = Option.bind id o\n                    \n                    let apply fO  vO =\n                        match fO, vO with\n                        | Some f, Some v -> f v |> Some\n                        | _     , _      -> None\n                \n                    /// Same as defaultWith\n                    let mapNone  f o = Option.defaultWith f o\n                    let bindNone f o = match o with | Some v -> Some v |_-> f()\n                    \n                    let (>>=)                              v f = bind f v\n                    let traverseSeq            f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertR (vOR:Result<_,_>)              = vOR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let absorbR  vRO                           = vRO |> function Some(Ok v) -> Some v |_-> None\n                    \n                /// Extensions to Async\n                module Async =\n                    let [< Inline >] inline rtn   v    = async.Return v\n                    let [< Inline >] inline bind  f vA = async.Bind(  vA, f)\n                    let [< Inline >] inline map   f    = bind (f >> rtn)\n                    /// Executes f Synchronously\n                    [< Inline \"throw 'iterS cannot be used in JavaScript!'\" >] \n                    let inline iterS (f: 'a->unit) = map f >> Async.RunSynchronously\n                    /// Executes f Asynchronously\n                    let [< Inline >] inline iterA f             = map f >> Async.Start\n                    let apply fA vA = async {\n                        let! fChild = Async.StartChild fA\n                        let! vChild = Async.StartChild vA\n                        let! f = fChild\n                        let! v = vChild \n                        return f v \n                    }\n                    let sleepThen f milliseconds = async {\n                        do! Async.Sleep milliseconds\n                        return f()\n                    }\n                    let (>>=)                              v f = bind f v\n                    let traverseSeq             f           sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO  vAO                           = vAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vAR:Result<_,_>)              = vAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                \n                \n                module Result =\n                    open Result\n                \n                    let freeMessage                r = r   |> function Ok v -> Ok v   | Error e -> ResultMessage.freeMessage e |> Error\n                    let rtn                          = Ok\n                    let toOption                   r = r   |> function Ok v -> Some v |       _ -> None\n                    let defaultWith              f r = r   |> function Ok v ->      v | Error e -> f e\n                    let defaultValue             d r = r   |> function Ok v ->      v | Error _ -> d\n                    let failIfTrue               m v = if     v then m |> Error  else Ok () \n                    let failIfFalse              m v = if not v then m |> Error  else Ok () \n                    /// bind version that protects against exceptions\n                    let bindP                 f    r = match r with\n                                                       | Ok    v -> try   f v\n                                                                    with  e -> ExceptMsg (e.Message, e.StackTrace) |> Error\n                                                       | Error e ->       e                                        |> Error\n                    /// map version that protects against exceptions\n                    let inline mapP           f    m = bindP (f >> rtn) m            \n                    let iter                  fE f r = r   |> mapP f |> defaultWith fE                                                 : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map Ok           |> Option.defaultWith (f >> Error)\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> Ok None)\n                    let absorbO               f  vOR = vOR |> bindP (ofOption f)\n                    let (>>=)                    r f = bind f r\n                    let traverseSeq           f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bindP f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let result = Builder()\n                    \n                    module Operators =\n                        let inline (|>>) v f   = mapP  f v\n                        let inline (>>=) v f   = bindP f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                        let result = result\n                \n                \n                type FusionM<'T, 'S, 'M> = FM of ('S * ResultMessage<'M> -> 'T option * 'S * ResultMessage<'M>)\n                \n                module FusionM =\n                    let inline rtn               v   = FM(fun (s ,r ) -> Some v, s, NoMsg)\n                    let        bind              f m = FM(fun (s1,m1) -> \n                                                          try\n                                                              let (FM fm1)  = m\n                                                              let v2O, s2, m2 = fm1 (s1, m1)\n                                                              match v2O with\n                                                              | None    -> None, s2, m2\n                                                              | Some v2 ->\n                                                              let (FM fm2) = f v2\n                                                              let v3O, s3, m3 = fm2 (s2, ResultMessage.addMsg m1 m2)\n                                                              v3O, s3,                       ResultMessage.addMsg m2 m3\n                                                          with e ->\n                                                              let me = ExceptMsg(e.Message, e.StackTrace)\n                                                              None, s1,                      ResultMessage.addMsg m1 me\n                                                       )\n                    let inline map          f     m  = bind (f >> rtn) m\n                \n                    let inline wrap               f  = FM f\n                    let inline getFun         (FM f) =    f\n                    let inline from                m = m : FusionM<_, _, _>\n                \n                    let inline run               s m = getFun m (s, NoMsg)\n                \n                    let inline OkF               v   = FM(fun (s,r) -> Some v , s , NoMsg)\n                    let inline OkFMsg            v m = FM(fun (s,r) -> Some v , s , m    )\n                    let inline ErrorF              m = FM(fun (s,r) -> None   , s , m    )\n                \n                    let inline getS               () = FM(fun (s,r) -> Some s , s , NoMsg)\n                    let inline getR               () = FM(fun (s,r) -> Some r , s , NoMsg)\n                    let inline putS               s1 = FM(fun (s,r) -> Some (), s1, NoMsg)\n                    let inline check              () = FM(fun (s,r) -> (if ResultMessage.isFatal    r then None else Some ())  , s , NoMsg)\n                \n                    let inling getOption          m  = FM(fun (s1,m1) ->\n                                                           try\n                                                               let (FM fm1)  = m\n                                                               let        v2O, s2, m2 = fm1 (s1, m1)\n                                                               Some v2O, s2, m2\n                                                           with e ->\n                                                               let me = ExceptMsg(e.Message, e.StackTrace)\n                                                               None, s1, ResultMessage.addMsg m1 me\n                                                       )\n                \n                \n                    let inline ofResultRM          r = match r with Ok   v -> OkF    v  | Error e -> ErrorF                           e\n                    let inline ofResultM           r = match r with Ok   v -> OkF    v  | Error e -> ErrorF (Message                  e)\n                    let inline ofResultS           r = match r with Ok   v -> OkF    v  | Error e -> ErrorF (ErrorMsg                 e)\n                    let inline ofResult            r = match r with Ok   v -> OkF    v  | Error e -> ErrorF (ErrorMsg <| sprintf \"%A\" e)\n                    let inline ofOption         f  o = match o with Some v -> OkF    v  | None    -> ErrorF (f()                       )\n                    let inline ofMessage           m =                        OkFMsg ()                     (Message                  m)\n                    let inline ofResultMessage     m =                        OkFMsg ()                                               m\n                    let inline ofFusionM           m = from m\n                \n                    let        freeMessageF     f  m = FM(fun (s1,m1) -> \n                                                          try\n                                                              let (FM fm1)  = m\n                                                              let v2O, s2, m2 = fm1 (s1, ResultMessage.freeMessage    m1)\n                                                              v2O, s2,                   ResultMessage.freeMessageF f m2\n                                                          with e ->\n                                                              let me = ExceptMsg(e.Message, e.StackTrace)\n                                                              None, s1,                      ResultMessage.addMsg m1 me |> ResultMessage.freeMessage\n                                                       )\n                    let inline freeMessage         m = m |> freeMessageF (sprintf \"%O\" >> ErrorMsg )\n                    let inline freeMessageW        m = m |> freeMessageF (sprintf \"%O\" >> Warning  )\n                \n                    let mapState           get set m = FM(fun (s1, r) -> \n                                                            let vO, s2, r = getFun m (get s1, r)\n                                                            vO, set s1 s2, r\n                                                        )\n                \n                    let iterReader     fM f  v     m  = m |> map f |> run v |> fun (vO, _, m) -> vO |> Option.iter id ; if m <> NoMsg then fM m\n                \n                    let memoizeRm      getStore fRm p = FM(fun (r:'r, m) ->\n                                                            let (checkO:'p->'v option), (getOrAdd:'p->('p->'v)->'v) = getStore r\n                                                            let store p v = getOrAdd p (fun _ -> v)\n                                                            checkO p \n                                                            |> Option.map rtn \n                                                            |> Option.defaultWith (fun () -> fRm p |> map (store p) )\n                                                            |> run r\n                                                        )\n                \n                    let inline apply           fR    vR = fR |> bind (swap map  vR)\n                    let (>>=)                       v f = bind f v\n                    let traverseSeq            f     sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                          Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq           sq = traverseSeq id sq\n                    \n                    let inline readerFun             f  = getS() |> map f\n                    let mapReader           v      m  = m |> mapState (fun _ -> v) (fun s _ -> s)\n                    let runReader           v      m  = m |> run v |> fun (vO, _, m) -> vO |> Option.map(fun v -> v, m) |> Result.ofOption (fun () -> m)\n                    let runResult                  m  = m |> runReader        ()\n                    let iterResult          fM f   m  = m |> iterReader  fM f ()\n                    let iterResultPrint            m  = m |> iterReader  (ResultMessage.summarized >> print) print ()\n                    \n                    let inline insertO  vvO                           = vvO   |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let inline insertR (vvR:Result<_,_>)              = vvR   |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let inline insertFst (fst, vRm)                   = vRm   |> map (fun v -> fst, v)\n                    let inline insertSnd (vRm, snd)                   = vRm   |> map (fun v -> v, snd)\n                    let inline absorbR (vvRm)                         = vvRm  |> bind ofResultRM\n                    let inline absorbO f vORm                         = vORm  |> map (Result.ofOption  f) |> absorbR\n                    \n                    module Operators =\n                        let inline (<*>) f v   = apply f v\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                    \n                    module Builder =\n                        type Builder() =\n                            member inline __.Return      x                  = rtn     x\n                            member inline __.ReturnFrom  x                  = from    x\n                            member        __.Bind       (w , r )            = bind    r w\n                            member inline __.Zero       ()                  = rtn ()\n                            member inline __.Delay       f                  = f\n                            member inline __.Combine    (a, b)              = bind b a\n                            member inline __.Run         f                  = wrap(fun m -> f() |> getFun <|m )\n                            member __.While(guard, body) =\n                                let rec whileLoop guard body =\n                                    if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                    else rtn   ()\n                                whileLoop guard body\n                            member this.TryWith   (body, handler     ) = wrap(fun r -> try body() |> getFun <| r with e -> handler     e            )\n                            member this.TryFinally(body, compensation) = wrap(fun r -> try body() |> getFun <| r finally   compensation()           )\n                            member this.Using     (disposable, body  ) = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                                        let body' = fun () -> body disposable\n                                        this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                            member this.For(sequence:seq<_>, body) =\n                                this.Using(sequence.GetEnumerator(),fun enum -> \n                                    this.While(enum.MoveNext, \n                                        this.Delay(fun () -> body enum.Current)))\n                    \n                    let fusion = Builder.Builder()\n                        \n                    \n                    \n                /// Taken from Nick Palladino's https://github.com/palladin/Eff\n                [< AutoOpen >]\n                module Eff =\n                    open System\n                \n                    type Effect = abstract UnPack     : Lambda         -> Effect \n                    and  Lambda = abstract Invoke<'X> : ('X -> Effect) -> ('X -> Effect)\n                \n                    type Eff<'U, 'A when 'U :> Effect> = Eff of (('A -> Effect) -> Effect) \n                        with  member this.Cont = match this with Eff cont -> cont\n                \n                    type Done<'A>(v : 'A) =\n                        member self.Value = v\n                        interface Effect with member self.UnPack(_ : Lambda) : Effect = self :> _ //new Done<'A>(v) :> _\n                \n                    let inline rtn  v = Eff (fun k -> k v)\n                    let bind  (f: 'a -> Eff<'U, 'b>) (effA: Eff<'U, 'a>) : Eff<'U, 'b> = \n                                        Eff (fun k -> \n                                                let (Eff effKa) = effA\n                                                effKa (fun v -> \n                                                    let (Eff effKb) = f v\n                                                    effKb k\n                                                )\n                                            )\n                \n                    module Eff =\n                //        [< Inline \"$effect.FsRoot_Library_Monads_Eff_Effect$UnPack({FsRoot_Library_Monads_Eff_Lambda$Invoke:function(k) { return function(p) { return $loop(k(p)) }; }})\" >]\n                //        let unpack loop (effect:Effect) = effect.UnPack { new Lambda with member self.Invoke<'X> (k' : 'X -> Effect) =  k' >> loop }\n                \n                        type LambdaT(loop) =\n                            interface Lambda with\n                                member __.Invoke<'X> (k : 'X -> Effect) : ('X -> Effect) = k >> loop \n                        let unpack loop (effect:Effect) = effect.UnPack (new LambdaT(loop))\n                        let done' (v :  'A) : Effect                           = new Done<'A>(v) :> _ \n                        let return' v  = Eff( fun _ -> done' v )\n                        let run<'U, 'A when 'U :> Effect> (eff: Eff<'U, 'A>) : 'A =\n                            match eff.Cont done' with\n                            | :? Done<'A> as done' -> done'.Value\n                            | v                    -> failwithf \"Unhandled effect %A\" v\n                        let runResult<'U, 'A when 'U :> Effect> (eff: Eff<'U, 'A>) = \n                            try\n                                match eff.Cont done' with\n                                | :? Done<'A> as done' -> Ok done'.Value\n                                //| v                    -> box v |> unbox<NoOp<_>> |> fun noop -> noop.K () |> loop\n                                | v                    -> Error <| errorMsgf \"Unhandled effect %A expecting\" v //typedefof<'A>\n                            with e -> \n                                Error <| ResultMessage.ExceptMsg(e.Message, e.StackTrace)\n                \n                \n                    let inline map   f  m  = bind (f >> rtn) m\n                    let inline apply fR vR = fR |> bind (fun f -> map f vR)\n                    \n                    [< AutoOpen >]\n                    module Operators =\n                        let inline (<*>) f v   = apply f v\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                    \n                    let traverseSeq            f     sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                          Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq           sq = traverseSeq id sq\n                    \n                    let inline insertO    vvO               = vvO   |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let inline insertR   (vvR:Result<_,_>)  = vvR   |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let inline insertFst (fst, vEf)         = vEf   |> map (fun v -> fst, v)\n                    let inline insertSnd (vEf, snd)         = vEf   |> map (fun v -> v, snd)\n                    \n                    type EffBuilder() = \n                        member self.Zero      (                 ) = rtn ()\n                        member self.Return    (v   :         'A ) = rtn v\n                        member self.ReturnFrom(eff : Eff<'U, 'A>) = eff\n                        member self.Bind      (eff, f           ) = bind f eff\n                        member self.Combine (first : Eff<'U, unit>, second : Eff<'U, 'B>) : Eff<'U, 'B> =  self.Bind(first, fun () -> second)\n                        member self.Delay (f : unit -> Eff<'U, 'A>) : Eff<'U, 'A> =  Eff (fun k -> let (Eff cont) = f () in cont k)\n                    //    member inline __.Delay       f                  = f\n                        member __.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.TryWith   (body, handler     ) = Eff(fun k -> try body() |> function Eff(f) -> f k with e -> handler e |> function Eff(f) -> f k)\n                        member this.TryFinally(body, compensation) = Eff(fun k -> try body() |> function Eff(f) -> f k finally   compensation()           )\n                        member this.Using     (disposable, body  ) = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                                    let body' = fun () -> body disposable\n                                    this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    fun () -> this.Delay(fun () -> body enum.Current)))\n                    \n                    \n                    let eff = new EffBuilder()\n                    \n                    module Reader = \n                        type Reader<'E> = inherit Effect\n                        type Ask<'E>(k : 'E -> Effect) =\n                            member self.K = k\n                            interface Reader<'E> with\n                                member self.UnPack(lambda : Lambda) : Effect = new Ask<'E>(lambda.Invoke<'E> k) :> _\n                    \n                        let ask<'U, 'E when 'U :> Reader<'E>>() : Eff<'U, 'E> = Eff (fun k -> new Ask<'E>(k) :> _)\n                    \n                        let rec readerHandler<'U, 'E, 'A when 'U :> Reader<'E>> (env:'E) (eff: Eff<'U, 'A>) : Eff<'U, 'A> = \n                            let rec loop : Effect -> Effect = function\n                                | :? Ask< 'E> as ask   -> ask.K env          |>            loop \n                                | effect               -> effect             |> Eff.unpack loop \n                            Eff (fun doneK             -> eff.Cont Eff.done' |>            loop )\n                    \n                        type EffReader<'a> = inherit Reader<'a>\n                    \n                        let readerFun f = ask() |> map f \n                    \n                        \n                    module Rsl = \n                        type Rsl<'M> = inherit Effect\n                    \n                        type Fail<    'M>(v : 'M, k : unit -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Rsl<'M> with member self.UnPack(lambda : Lambda) : Effect = new Fail<    'M>(v, lambda.Invoke<unit> k) :> _\n                    \n                    \n                        let fail<'U, 'M when 'U :> Rsl<'M>> (s:'M) : Eff<'U, unit> = Eff (fun k -> new Fail<    'M>(s, k) :> _)\n                        let inline ofResult (res:Result<'a,'b>) : Eff<'c,'a> = eff {\n                            match res with\n                            | Ok    v   -> return v\n                            | Error msg -> let! m = fail msg\n                                           return box () |> unbox\n                        }\n                    \n                        \n                        let rec RslHandler<'U, 'M, 'A when 'U :> Rsl<'M>> (eff: Eff<'U, 'A>) : Eff<'U, _> = \n                            let rec loop (doneK:(Result<'A,'M>) -> Effect) : Effect -> Effect = function\n                                | :? Done<    'A> as done' -> doneK (Ok    done'.Value)\n                                | :? Fail<    'M> as fail  -> doneK (Error fail .Value)\n                                | effect                   -> effect             |> Eff.unpack (loop doneK)\n                            Eff (fun doneK                 -> eff.Cont Eff.done' |>             loop doneK)\n                    \n                        let inline absorbR     vvEf             = vvEf  |> bind ofResult\n                        let inline absorbO   f vOEf             = vOEf  |> map (Result.ofOption  f) |> absorbR\n                    \n                type FusionAsyncM<'T, 'S, 'M> = FAM of ('S * ResultMessage<'M> -> Async<'T option * 'S * ResultMessage<'M> >)\n                \n                module FusionAsyncM =\n                    let inline rtn               v   = FAM(fun (s ,r ) -> async.Return (Some v, s, NoMsg) )\n                    let        bind              f m = FAM(fun (s1,m1) -> async {\n                                                           try\n                                                               let (FAM fm1)  = m\n                                                               let! v2O, s2, m2 = fm1 (s1, m1)\n                                                               match v2O with\n                                                               | None    -> return None, s2, m2\n                                                               | Some v2 ->\n                                                               let    (FAM fm2) = f v2\n                                                               let! v3O, s3, m3 = fm2 (s2, ResultMessage.addMsg m1 m2)\n                                                               return v3O, s3,            ResultMessage.addMsg m2 m3\n                                                           with e ->\n                                                               let me = ExceptMsg(e.Message, e.StackTrace)\n                                                               return None, s1,           ResultMessage.addMsg m1 me\n                                                        })\n                    let inline map          f     m  = bind (f >> rtn) m\n                \n                    let inline wrap               f  = FAM f\n                    let inline getFun        (FAM f) =    f\n                    let inline from                m = m : FusionAsyncM<_, _, _>\n                \n                    let inline run               s m = getFun m (s, NoMsg)\n                \n                    let inline OkF               v   = FAM(fun (s,r) -> async.Return (Some v , s , NoMsg) )\n                    let inline OkFMsg            v m = FAM(fun (s,r) -> async.Return (Some v , s , m    ) )\n                    let inline ErrorF              m = FAM(fun (s,r) -> async.Return (None   , s , m    ) )\n                \n                    let inline getS               () = FAM(fun (s,r) -> async.Return (Some s , s , NoMsg) )\n                    let inline getR               () = FAM(fun (s,r) -> async.Return (Some r , s , NoMsg) )\n                    let inline putS               s1 = FAM(fun (s,r) -> async.Return (Some (), s1, NoMsg) )\n                    let inline check              () = FAM(fun (s,r) -> async.Return ((if ResultMessage.isFatal    r then None else Some ())  , s , NoMsg) )\n                \n                    let inline getOption          m  = FAM(fun (s1,m1) -> async {\n                                                           try\n                                                               let (FAM fm1)  = m\n                                                               let!        v2O, s2, m2 = fm1 (s1, m1)\n                                                               return Some v2O, s2, m2\n                                                           with e ->\n                                                               let me = ExceptMsg(e.Message, e.StackTrace)\n                                                               return None, s1, ResultMessage.addMsg m1 me\n                                                        })\n                \n                    let inline ofResultRM         r  = match r with Ok   v -> OkF    v  | Error e -> ErrorF                           e\n                    let inline ofResultM          r  = match r with Ok   v -> OkF    v  | Error e -> ErrorF (Message                  e)\n                    let inline ofResultS          r  = match r with Ok   v -> OkF    v  | Error e -> ErrorF (ErrorMsg                 e)\n                    let inline ofResult           r  = match r with Ok   v -> OkF    v  | Error e -> ErrorF (ErrorMsg <| sprintf \"%A\" e)\n                    let inline ofOption        f  o  = o  |> Option.map OkF |> Option.defaultWith (f >> ErrorF)\n                    let inline ofMessage          m  =                        OkFMsg ()                      (Message                  m)\n                    let inline ofResultMessage    m  =                        OkFMsg ()                                                m\n                    let inline ofAsync            a  = FAM(fun (s, r) -> a |> Async.map (fun v -> Some v, s, NoMsg) )\n                    let inline ofAsyncResultRM    a  = a |> ofAsync |> bind ofResultRM\n                    let inline ofFusionM     (FM fm) = FAM(fun (s, r) -> async.Return (fm (s, r)) )\n                \n                    let        freeMessageF     f  m = FAM(fun (s1,m1) -> async {\n                                                          try\n                                                              let   (FAM fm1)  = m\n                                                              let! v2O, s2, m2 = fm1 (s1, ResultMessage.freeMessage    m1)\n                                                              return v2O, s2,             ResultMessage.freeMessageF f m2\n                                                          with e ->\n                                                              let me = ExceptMsg(e.Message, e.StackTrace)\n                                                              return None, s1,            ResultMessage.addMsg m1 me |> ResultMessage.freeMessage\n                                                       })\n                    let mapState           get set m = FAM(fun (s1, r) -> async {\n                                                            let! vO, s2, r = getFun m (get s1, r)\n                                                            return vO, set s1 s2, r\n                                                        })\n                \n                    let iterReader     fM f  v     m  = m |> map f |> run v |> Async.iterS (fun (vO, _, m) -> vO |> Option.iter id ; if m <> NoMsg then fM m)\n                    let iterReaderA    fM f  v     m  = m |> map f |> run v |> Async.iterA (fun (vO, _, m) -> vO |> Option.iter id ; if m <> NoMsg then fM m)\n                \n                    let memoizeRm      getStore fRm p = FAM(fun (r:'r, m) -> async {\n                                                            let (checkO:'p->'v option), (getOrAdd:'p->('p->'v)->'v) = getStore r\n                                                            let store p v = getOrAdd p (fun _ -> v)\n                                                            return! checkO p \n                                                                    |> Option.map rtn \n                                                                    |> Option.defaultWith (fun () -> fRm p |> map (store p) )\n                                                                    |> run r\n                                                        })\n                \n                    let inline apply           fR    vR = fR |> bind (swap map  vR)\n                    let (>>=)                       v f = bind f v\n                    let traverseSeq            f     sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                          Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq           sq = traverseSeq id sq\n                    \n                    let inline freeMessage         m = m |> freeMessageF (sprintf \"%O\" >> ErrorMsg )\n                    let inline freeMessageW        m = m |> freeMessageF (sprintf \"%O\" >> Warning  )\n                    \n                    let inline readerFun          f  = getS() |> map f\n                    let inline insertO  vvO                           = vvO   |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let inline insertR (vvR:Result<_,_>)              = vvR   |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let inline insertFst (fst, vRm)                   = vRm   |> map (fun v -> fst, v)\n                    let inline insertSnd (vRm, snd)                   = vRm   |> map (fun v -> v, snd)\n                    \n                    let inline absorbR (vvRm)                         = vvRm  |> bind ofResultRM\n                    let inline absorbO f vORm                         = vORm  |> map (Result.ofOption  f) |> absorbR\n                    \n                    \n                    let mapReader           v      m  = m |> mapState (fun _ -> v) (fun s _ -> s)\n                    let runReader           v      m  = m |> run v |> Async.map (fun (vO, _, m) -> vO |> Option.map(fun v -> v, m) |> Result.ofOption (fun () -> m))\n                    let runResult                  m  = m |> runReader        ()\n                    let iterResult          fM f   m  = m |> iterReader  fM f ()\n                    let iterResultA         fM f   m  = m |> iterReaderA fM f ()\n                    let iterResultPrint            m  = m |> iterReader  (ResultMessage.summarized >> print) print ()\n                    let iterResultPrintA           m  = m |> iterReaderA (ResultMessage.summarized >> print) print ()\n                    \n                    module Operators =\n                        let inline (<*>) f v   = apply f v\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                    \n                    module Builder =\n                        type Builder() =\n                            member inline __.Return      x                  = rtn     x\n                            member inline __.ReturnFrom  x                  = from    x\n                            member        __.Bind       (w , r )            = bind    r w\n                            member inline __.Zero       ()                  = rtn ()\n                            member inline __.Delay       f                  = f\n                            member inline __.Combine    (a, b)              = bind b a\n                            member inline __.Run         f                  = wrap(fun m -> f() |> getFun <|m )\n                            member __.While(guard, body) =\n                                let rec whileLoop guard body =\n                                    if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                    else rtn   ()\n                                whileLoop guard body\n                            member __.TryWith   (body, handler     ) = (fun (s,m) -> async.TryWith   (body() |> getFun <| (s, m),   handler                ) ) |> wrap\n                            member __.TryFinally(body, compensation) = (fun (s,m) -> async.TryFinally(body() |> getFun <| (s, m),   compensation           ) ) |> wrap\n                            member __.Using     (disposable, body  ) = (fun (s,m) -> async.Using((disposable:#System.IDisposable), fun u -> body u |> getFun <| (s, m)) ) |> wrap\n                            member this.For(sequence:seq<_>, body) =\n                                this.Using(sequence.GetEnumerator(),fun enum -> \n                                    this.While(enum.MoveNext, \n                                        this.Delay(fun () -> body enum.Current)))\n                    \n                    let fusion = Builder.Builder()\n                        \n                    \n                    \n            module Array =\n            \n                /// Non-mutable element replace\n                /// produces a new array with the new element\n                let replace i item (array: _[]) = \n                    seq {\n                        if i > 0            then yield! array.[.. i - 1]\n                        yield item\n                        if i < array.Length then yield! array.[i + 1 ..]\n                    } |> Seq.toArray\n            module ParseO =\n                let tryParseWith tryParseFunc = tryParseFunc >> function\n                        | true, v    -> Some v\n                        | false, _   -> None\n                \n                let parseDateO   = tryParseWith System.DateTime.TryParse\n                let parseIntO    = tryParseWith System.Int32   .TryParse\n                let parseSingleO = tryParseWith System.Single  .TryParse\n                let parseDoubleO = tryParseWith System.Double  .TryParse\n                let parseGuidO   = tryParseWith System.Guid    .TryParse\n                // etc.\n                \n                // active patterns for try-parsing strings\n                let (|Date  |_|) = parseDateO\n                let (|Int   |_|) = parseIntO\n                let (|Single|_|) = parseSingleO\n                let (|Double|_|) = parseDoubleO\n                let (|Guid  |_|) = parseGuidO\n                \n            [<System.Runtime.CompilerServices.Extension >]\n            type MailboxProcessorExt =\n                [<System.Runtime.CompilerServices.Extension ; Inline \"throw 'PostAndReply not available in JavaScript'\" >]\n                static member PostAndReply     (agent:MailboxProcessor<_>, msg, ?timeout) = agent.PostAndReply     ((fun reply -> reply, msg), ?timeout= timeout)\n                [<System.Runtime.CompilerServices.Extension>]\n                static member PostAndAsyncReply(agent:MailboxProcessor<_>, msg, ?timeout) = agent.PostAndAsyncReply((fun reply -> reply, msg), ?timeout= timeout)\n            //    [<System.Runtime.CompilerServices.Extension>]\n            ///    static member PostF(agent:MailboxProcessor<_>, f, ?timeout) = agent.Post(fun v -> async { return f v })\n            \n            module Mailbox =\n            \n                /// A simple Mailbox processor to serially process Async tasks\n                /// use:\n                ///      let logThisMsgA = Mailbox.iterA (printfn \"%A\") (fun msg -> async { printfn \"Log: %s\" msg } )\n                ///      logThisMsgA.Post \"message Async\"\n                ///      \n                let iterA hndl f =\n                    MailboxProcessor.Start(fun inbox ->\n                        async {\n                            while true do\n                                try       let!   msg = inbox.Receive()\n                                          do!  f msg\n                                with e -> hndl e\n                        }\n                    )\n                    \n                /// A simple Mailbox processor to serially process tasks\n                /// use:\n                ///      let logThisMsg = Mailbox.iter (printfn \"%A\") (printfn \"Log: %s\")\n                ///      logThisMsg.Post \"message\"\n                ///      \n                let iter hndl f = iterA hndl (fun msg -> async { f msg } )\n                \n                /// A simple Mailbox processor to serially and synchronously process tasks\n                /// use:\n                ///      let toUpperCaseA = Mailbox.callA (fun (msg:string) -> \n                ///                                async { return msg.ToUpper() } )\n                ///\n                ///      toUpperCaseA.PostAndReply(fun reply -> reply, \"message\") \n                ///      |> printfn \"%s\"\n                ///\n                ///      toUpperCaseA.PostAndReply \"message\"\n                ///      |> printfn \"%s\"\n                ///\n                ///      async {\n                ///          let! res = toUpperCaseA.PostAndAsyncReply(fun reply -> \n                ///                                                        reply, \"message\")\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///\n                ///      async {\n                ///          let! res = toUpperCaseA.PostAndAsyncReply \"message\"\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously    \n                ///      \n                let callA hndl f = iterA hndl (fun ((replyChannel: AsyncReplyChannel<_>), msg) -> async {\n                    let! r = f msg\n                    replyChannel.Reply r\n                })\n                \n                /// A simple Mailbox processor to serially and synchronously process tasks\n                /// use:\n                ///      let toUpperCase = Mailbox.call (fun (msg:string) -> msg.ToUpper() )\n                ///      \n                ///      toUpperCase.PostAndReply(fun reply -> reply, \"message\") \n                ///      |> printfn \"%s\"\n                ///      \n                ///      toUpperCase.PostAndReply \"message\"\n                ///      |> printfn \"%s\"\n                ///      \n                ///      async {\n                ///          let! res = toUpperCase.PostAndAsyncReply(fun reply -> \n                ///                                                       reply, \"message\")\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///      \n                ///      async {\n                ///          let! res = toUpperCase.PostAndAsyncReply \"message\"\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///      \n                let call hndl f = callA hndl (fun msg -> async { return f msg } )\n                \n                /// A Mailbox processor that maintains a state\n                let foldA hndl f initState =\n                    MailboxProcessor.Start(fun inbox ->\n                        let rec loop state : Async<unit> = async {\n                            try       let! msg      = inbox.Receive()\n                                      let! newState = f state msg\n                                      return! loop newState\n                            with e -> return! loop (hndl e state)\n                        }\n                        loop initState\n                    )\n            \n                /// A Mailbox processor that maintains a state\n                let fold hndl f initState = foldA hndl (fun state msg -> async { return f state msg } ) initState\n                \n                /// A Mailbox processor that maintains a state (pass an error handler not a folder function)\n                /// use: \n                ///      agent |> Mailbox.StateFull.apply (fun state -> state + 1)\n                ///      agent |> Mailbox.StateFull.getState\n                let stateFull hndl initState =\n                    MailboxProcessor.Start(fun inbox ->\n                        let rec loop state : Async<unit> = async {\n                            try       let! f        = inbox.Receive()\n                                      let! newState = f state\n                                      return! loop newState\n                            with e -> return! loop (hndl e state)\n                        }\n                        loop initState\n                    )\n                    \n                let defHandler ex st = print ex ; st\n                    \n                module StateFull =\n                    let getStateA     (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndAsyncReply(fun (reply:AsyncReplyChannel<_>) -> fun v -> async { reply.Reply v ; return v })\n                    let setState    v (agent: MailboxProcessor<'a->Async<'a>>) = agent.Post(fun _ -> async { return    v })\n                    let applyA      f (agent: MailboxProcessor<'a->Async<'a>>) = agent.Post(fun v -> async { return! f v })\n                    let apply       f (agent: MailboxProcessor<'a->Async<'a>>) = agent |> applyA (fun v -> async { return  f v })\n                    let applyReplyA f (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndAsyncReply(fun (reply:AsyncReplyChannel<'r>) -> \n                                                                                                fun v -> async {\n                                                                                                    let! st, r = f v\n                                                                                                    reply.Reply r\n                                                                                                    return st \n                                                                                                })\n                    let applyReply  f (agent: MailboxProcessor<'a->Async<'a>>) = agent |> applyReplyA (fun v -> async { return  f v })\n                    [< Inline \"throw 'getState not available in JavaScript'\" >]\n                    let getState      (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndReply     (fun (reply:AsyncReplyChannel<_>) -> fun v -> async { reply.Reply v ; return v })\n                    /// synchronous version pf applyReply\n                    [< Inline \"throw 'applyReplyS not available in JavaScript'\" >]\n                    let applyReplyS f (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndReply(fun (reply:AsyncReplyChannel<'r>) -> \n                                                                                                fun v -> async {\n                                                                                                    let st, r = f v\n                                                                                                    reply.Reply r\n                                                                                                    return st \n                                                                                                })\n            \n            /// Adapted from here http://fssnip.net/7V5   Usage:\n            /// let abs n = if n >= 0 then n else Hole ? TODO_AbsForNegativeValue    \n            ///         \n            /// abs  1 |> printfn \"%A\" // 1\n            /// abs -1 |> printfn \"%A\" // System.NotImplementedException: Incomplete hole 'TODO_AbsForNegativeValue : System.Int32'\n            type Hole = Hole with\n                [< Inline ; CompilerMessage(\"Incomplete hole\", 130) >]\n                static member inline Incomplete id : 'T = failwithf \"Incomplete hole '%s'\" id        \n                    \n            \n            /// Tree structure to implement a hierarchical user interface but using Eff Reader and Rsl monad\n            module TreeEff =\n            \n                type Node<'I, 'T, 'Eff when 'Eff :> Effect> = {\n                    id                : unit                   -> 'I\n                    getData           : unit                   -> 'T\n                    isExpandedEf      : unit                   -> Eff<'Eff, bool                     >\n                    canHaveChildrenEf : unit                   -> Eff<'Eff, bool                     >\n                    childrenEf        : unit                   -> Eff<'Eff, Node<'I, 'T, 'Eff> seq   >\n                    pathEf            : unit                   -> Eff<'Eff, 'I list                  >  // list of parents excluding itself\n                    parentOEf         : Node<'I, 'T, 'Eff> seq -> Eff<'Eff, Node<'I, 'T, 'Eff> option>\n                    newChildrenEf     : Node<'I, 'T, 'Eff> []  -> Eff<'Eff, Node<'I, 'T, 'Eff>       >  // set new children, make sure to exclude children not listed and maintain the order of the children (if desirable)\n                }\n            \n                //let [<Inline>] inline toNode    (o: obj) = o :?> Node<_,_,_>\n                //let [<Inline>] inline toSeqNode  os      = os |> Seq.map toNode\n            \n                let rec listNodes level (nodes: Node<_,_,_> seq) =\n                    nodes\n                    |> Seq.map(fun node -> \n                        node.isExpandedEf() \n                        >>= (fun exp -> if exp then node.childrenEf() |>> Seq.toArray >>= listNodes (level + 1) else rtn Seq.empty)\n                        |>> (fun nodes -> Seq.append [ node, level ] nodes)\n                    ) \n                    |> sequenceSeq\n                    |>> Seq.collect id\n            \n                let removeNode (node:Node<_,_,_>) nodes = eff { // better use version removeNode2\n                    let! path = node.pathEf()\n                    printfn \"path = %A\" path\n                    let rec chRemove (n:Node<_,_,_>) = eff {\n                        if                  n.id() = node.id() then printfn \"found it\" ; return  None\n                        elif List.contains (n.id())  path      then printfn \"deeper\" ; return! n.childrenEf()\n                                                                            |>> Seq.toArray\n                                                                            |>> Seq.map chRemove \n                                                                            >>= sequenceSeq \n                                                                            |>> Seq.choose id \n                                                                            |>> Seq.toArray\n                                                                            >>= n.newChildrenEf  \n                                                                            |>> Some\n                        else                                        printfn \"not\" ;return  Some n\n                    }\n                    return! nodes |> Seq.map chRemove |> sequenceSeq |>> Seq.choose id\n                }\n            \n                let removeNodes p nodes = eff {\n                    let rec folder pair (n:Node<_,_,_>) = eff {\n                        let! children, noparent = pair\n                        let! children2 = n.childrenEf() |>> Seq.toArray\n                        let! ch, np = children2 |> Seq.fold folder (rtn ([], noparent) )\n                        if p n then return (        children, ch @ np)\n                               else let! xxx = n.newChildrenEf (ch |> Seq.rev |> Seq.toArray)\n                                    return ( xxx :: children,      np)\n                    }\n                    let! res, noparent = nodes |> Seq.fold folder (rtn ([], []) )\n                    return noparent @ res |> List.rev\n                }\n            \n                let addNodeToSeq after p node (nodes:Node<_,_,_> seq)  =\n                    seq [ for n in nodes do\n                            if p n then\n                                if after then yield n    ; yield node\n                                else          yield node ; yield n\n                            else              yield n\n                    ]\n                    \n                let addToParent after p (node:Node<_,_,_>) (parent :Node<_,_,_>) (nodes:Node<_,_,_> seq)  = nodes |> addNodeToSeq after p node |> Seq.toArray |> parent.newChildrenEf\n            \n                let addSibling  after   (node:Node<_,_,_>) (sibling:Node<_,_,_>) (nodes:Node<_,_,_> seq) = \n                    let theSibling (n:Node<_,_,_>) = n.id() = sibling.id()\n                    sibling.pathEf() >>= function\n                    | [   ]          -> rtn <| addNodeToSeq after theSibling node nodes \n                    | parent :: path -> \n                    let rec mapAdd (n:Node<_,_,_>) =\n                        if                  n.id() = parent then     n.childrenEf() |>> Seq.toArray >>= addToParent after theSibling node n\n                        elif List.contains (n.id()) path    then     n.childrenEf() |>> Seq.toArray |>> Seq.map mapAdd >>= sequenceSeq |>> Seq.toArray >>= n.newChildrenEf \n                        else                                     rtn n\n                    nodes |> Seq.map mapAdd |> sequenceSeq\n            \n                let tryFind p (nodes:Node<_,_,_> seq) = \n                    let rec folder resEf (node:Node<_,_,_>) =\n                        resEf >>= function\n                        | Some v -> rtn (Some v)\n                        | None   ->\n                        if p node then rtn <| Some node else \n                        node.childrenEf() >>= Seq.fold folder (rtn None)\n                    nodes                 |>  Seq.fold folder (rtn None)\n                    \n                let tryFindId (id:'I) (nodes:Node<_,_,_> seq) = tryFind (fun n -> n.id() = id) nodes\n            \n                let moveToSibling after (node:Node<_,_,_>) (sibling:Node<_,_,_>) (nodes:Node<_,_,_> seq) = \n                    nodes\n                    |>  removeNode node\n                    >>= addSibling after node sibling\n            \n                let moveToSibling2 after (nodeId:'I) (siblingId:'I) (nodes:Node<_,_,_> seq) = eff {\n                    let!  nodeO = nodes |> tryFindId nodeId\n                    match nodeO with\n                    | None         -> return  nodes\n                    | Some node    ->\n                    let!  siblingO = nodes |> tryFindId siblingId\n                    match siblingO with\n                    | None         -> return  nodes\n                    | Some sibling -> return! moveToSibling after node sibling nodes\n                }\n            \n                let addChild append (node:Node<_,_,_>) (parentN:Node<_,_,_>) (nodes:Node<_,_,_> seq) = eff {\n                    let! path = parentN.pathEf()\n                    let rec mapAppend (n:Node<_,_,_>) =\n                        if   n.id() = parentN.id()       then \n                            if append                    then n.childrenEf() |>> Seq.toArray |>> swap Seq.append [ node ]                         |>> Seq.toArray >>= n.newChildrenEf\n                            else                              n.childrenEf() |>> Seq.toArray |>>      Seq.append [ node ]                         |>> Seq.toArray >>= n.newChildrenEf\n                        elif List.contains (n.id()) path then n.childrenEf() |>> Seq.toArray |>>      Seq.map mapAppend   >>= sequenceSeq |>> Seq.toArray >>= n.newChildrenEf\n                        else                                  rtn n\n                    return! nodes |> Seq.map mapAppend |> sequenceSeq\n                }\n            \n                let indentNode (node:Node<_,_,_>) (nodes:Node<_,_,_> seq) = \n                    node.parentOEf nodes >>= function\n                    | None        -> rtn nodes\n                    | Some parent -> parent.childrenEf() |>> (Seq.toArray >> Seq.ofArray)\n                    |>> Seq.takeWhile (fun              n -> node.id() <> n.id())\n                    >>= Seq.fold      (fun newParentOEf n -> n.canHaveChildrenEf() >>= (fun can -> if can then rtn(Some n) else newParentOEf)) (rtn None)\n                    >>= function\n                    | None           -> rtn nodes\n                    | Some newParent ->\n                    nodes\n                    |>  removeNode node \n                    >>= addChild true node newParent\n            \n                let outdentNode (node:Node<_,_,_>) (nodes:Node<_,_,_> seq) =\n                    node.parentOEf nodes\n                    |>> Option.map          (fun parent -> moveToSibling true node parent nodes )\n                    >>= Option.defaultValue (rtn nodes)\n                    \n                let removeNodeOutdentChildren (node:Node<_,_,_>) (nodes:Node<_,_,_> seq) =\n                    node.childrenEf()\n                    >>= Seq.fold (fun nodes node -> nodes >>= (outdentNode node) ) (rtn nodes)\n                    >>= removeNode node\n                    \n                \n        /// Essentials that run in Javascript (WebSharper)\n        //#define WEBSHARPER\n        [< JavaScript ; AutoOpen >]\n        module LibraryJS =\n            module View =\n                let insertWO = \n                    function\n                    | Some v -> View.Map Some v\n                    | None   -> View.Const None\n                let [<Inline>] inline consistent   (vl:View<_>)  = \n                    let prior      = ref <| Var.Create Unchecked.defaultof<_>\n                    let setPrior v = if (!prior).Value <> v then (!prior).Value <- v \n                    View.Sink setPrior vl\n                    !prior |> View.FromVar\n            \n                let bind = View.Bind\n                let map  = View.Map\n                let rtn  = View.Const\n            \n                let (>>=)                              v f = bind f v\n                let rec    traverseSeq     f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                             Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                let inline sequenceSeq                  sq = traverseSeq id sq\n            \n            module Var =\n                let mutable private counter = 1\n                let freshId () =\n                    counter <- counter + 1\n                    \"varuid\" + string counter\n                        \n                let lensView get update view0 (var: Var<_>) =\n                    let id   = freshId()\n                    let view = View.Map2 (fun v _ -> get v) var.View view0\n                    { new Var<'V>() with\n                        member this.Get        () = get (var.Get())\n                        member this.Set         v = var.Update(fun t -> update t v)\n                        member this.SetFinal    v = this.Set(v)\n                        member this.Update      f = var.Update(fun t -> update t (f (get t)))\n                        member this.UpdateMaybe f = var.UpdateMaybe(fun t -> Option.map (fun x -> update t x) (f (get t)))\n                        member this.View          = view\n                        member this.Id            = id\n                    }\n            \n            module ListModel =\n                let lensInto' (m:ListModel<_,_>) (get: 'T       -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) (view: View<'V>) : Var<'V> =\n                    let id = Var.freshId()\n                    { new Var<'V>() with\n                        member r.Get         () = m.FindByKey key |> get\n                        member r.Set         v  = m.UpdateBy (fun i -> v          |>             update i |> Some) key\n                        member r.Update      f  = m.UpdateBy (fun i -> get i |> f |>             update i |> Some) key\n                        member r.UpdateMaybe f  = m.UpdateBy (fun i -> get i |> f |> Option.map (update i)       ) key\n                        member r.SetFinal    v  = r.Set v\n                        member r.View           = view\n                        member r.Id             = id\n                    }\n                let lensIntoO'(m: ListModel<_,_>) (get: 'T option -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) (view: View<'V>) : Var<'V> =\n                    let id = Var.freshId()\n                    { new Var<'V>() with\n                        member r.Get         () = m.TryFindByKey key |> get\n                        member r.Set         v  = m.UpdateBy (fun i -> v                  |>             update i |> Some) key\n                        member r.Update      f  = m.UpdateBy (fun i -> Some i |> get |> f |>             update i |> Some) key\n                        member r.UpdateMaybe f  = m.UpdateBy (fun i -> Some i |> get |> f |> Option.map (update i)       ) key\n                        member r.SetFinal    v  = r.Set v\n                        member r.View           = view\n                        member r.Id             = id\n                    }\n                let docLensMapView      mapView (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (lensInto' m   id                        (fun _ -> id) k v)\n                    Doc.BindSeqCachedViewBy m.Key get (View.Map mapView m.View)\n                let docLensMapViewO def mapView (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (lensIntoO' m (Option.defaultValue def)  (fun _ -> id) k v)\n                    Doc.BindSeqCachedViewBy m.Key get (View.Map mapView m.View)\n                let lensDef def k (m:ListModel<_,_>) =\n                    let get = Option.defaultValue def\n                    lensIntoO' m get (fun _ -> id) k (m.TryFindByKeyAsView k |> View.Map get)\n            \n                let currentLensUpd def curr upd (model:ListModel<_,_>) = \n                    curr \n                    |> Var.lensView (Option.bind (model.TryFindByKey) >> Option.defaultValue def) \n                                    (fun kO v -> kO |> Option.iter (upd v) ; kO)\n                                    model.View\n                let currentLensUpd' def curr upd (model:ListModel<_,_>) = \n                    let view = curr |> View.Map2 (fun _mdl kO -> kO |> Option.bind model.TryFindByKey |> Option.defaultValue def) model.View\n                    Var.Make view upd\n                let currentLens def curr (model:ListModel<_,_>) = \n                    model \n                    |> currentLensUpd' def curr (fun v -> model.UpdateBy (fun _ -> model.TryFindByKey (model.Key v) |> Option.map (fun _ -> v) ) <| model.Key v)\n                \n            \n            /// binds an Editor with a Var<string> to avoid annoying jumps to the end when fast typing\n            /// onChange gets called when the editor changes but not when the var changes\n            let bindVarEditor setEvent getVal setVal onChange (var:Var<string>) =\n                let editorChanged = ref 0L\n                let varChanged    = ref 0L\n                setEvent(fun _ ->\n                    let v = getVal() \n                    if var.Value <> v then editorChanged := !editorChanged + 1L; var.Value <- v; onChange() \n                )\n                var.View |> View.Sink (fun _ ->\n                    if  !editorChanged > !varChanged then varChanged := !editorChanged\n                    elif getVal() <> var.Value then setVal var.Value\n                )\n            \n            [< Inline \"\"\"(!$v)\"\"\">]\n            let isUndefined v = v.GetType() = v.GetType()\n                \n            \n            module LoadFiles =\n            \n                let createScript fn =\n                    let fileRef = JS.Document.CreateElement(\"script\")\n                    fileRef.SetAttribute(\"type\", \"text/javascript\"  )\n                    fileRef.SetAttribute(\"src\" , fn                 )\n                    fileRef\n                \n                let createCss fn =\n                    let fileRef = JS.Document.CreateElement(\"link\")\n                    fileRef.SetAttribute(\"rel\" , \"stylesheet\"     )\n                    fileRef.SetAttribute(\"type\", \"text/css\"       )\n                    fileRef.SetAttribute(\"href\", fn               )\n                    fileRef\n                \n                let createHtml fn =\n                    let fileRef = JS.Document.CreateElement(\"link\")\n                    fileRef.SetAttribute(\"rel\" , \"import\"         )\n                    fileRef.SetAttribute(\"type\", \"text/html\"      )\n                    fileRef.SetAttribute(\"href\", fn               )\n                    fileRef\n                \n                let LoadFile(file: string) =\n                    let (|EndsWith|_|) s (fn:string) = if fn.EndsWith s then Some() else None\n                    match file with\n                    | EndsWith \".js\"   ()\n                    | EndsWith \".fsx\"  ()\n                    | EndsWith \".fs\"   () when isUndefined <| JS.Document.QuerySelector(\"script[src='\" + file + \"']\") ->\n                                            createScript file |> Some\n                    | EndsWith \".css\"  ()-> createCss    file |> Some\n                    | EndsWith \".html\" ()-> createHtml   file |> Some\n                    | _                  -> None\n                    |> Option.map         (fun ref -> \n                        Async.FromContinuations <| \n                            fun (cont, econt, _ccont) -> \n                                try \n                                    ref?onload <- cont\n                                    JS.Document.Head.AppendChild ref |> ignore\n                                with e -> econt e\n                    )\n                    |> Option.defaultWith (fun ()  -> async { return () })\n                \n                let LoadFilesAsync(files: string []) =\n                    async {\n                        if IsClient then\n                            for file in files do\n                                do! LoadFile file\n                    }\n                \n            let (|REGEX|_|) (expr: string) (opt: string) (value: string) =\n                if value = null then None else\n                match JavaScript.String(value).Match(RegExp(expr, opt)) with\n                | null         -> None\n                | [| |]        -> None\n                | m            -> Some m\n            \n            let rexGuid = \"\"\"([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})\"\"\"\n            \n            module REGEX =\n                let getStartWord (line:string) ch =\n                    match line.Substring(0, ch) with\n                    | REGEX @\"([a-zA-Z_]\\w*)$\" \"g\" [| txt |] -> txt\n                    | _                                      -> \"\"          \n                \n                let getEndWord (line:string) ch =\n                    match line.Substring(ch) with\n                    | REGEX @\"^([a-zA-Z_]\\w*)\" \"g\" [| txt |] -> txt\n                    | _                                      -> \"\"          \n            \n                let (|Identifier|_|) =\n                    function\n                    | REGEX \"^[$a-zA-Z_][0-9a-zA-Z_\\.\\-$]*$\" \"\" [| id |] -> Some id\n                    | _                                                  -> None\n            \n            [< JavaScript >]\n            module ResizeObserver =\n            \n                [< Inline \"try { return !!(ResizeObserver) } catch(e) { return false }\" >] \n                let implementedResizeObserver() = false\n                \n                [< Inline \"new ResizeObserver($_f)\" >]\n                let newResizeObserver (_f: unit->unit) = X<_> \n                \n                [< Inline \"$_ro.observe($_el)\" >]\n                let RObserve _ro (_el:Dom.Element) = X<_> \n                \n                let mutable observers : obj list = []\n                \n                let domRect2Tuple (r:Dom.DomRect) = (r.Top, r.Left, r.Width, r.Height)\n                \n                let [< Inline \"$_el.isConnected\" >] isValidElement (_el:Dom.Element) = true\n                \n                let dimsChanged (el:Dom.Element) = \n                    let dims = ref <| el.GetBoundingClientRect()\n                    fun () ->\n                        let ndims = el.GetBoundingClientRect()\n                        if domRect2Tuple !dims = domRect2Tuple ndims then false\n                        else dims := ndims    ; true\n                \n                let addResizeObserver f el =\n                    if implementedResizeObserver() then\n                        let ro =  newResizeObserver f\n                        observers <- ro::observers\n                        RObserve ro el\n                    else\n                        let changed = dimsChanged el\n                        async {\n                            while isValidElement el do\n                                do! Async.Sleep 110\n                                if changed() then f()\n                        } |> Async.Start\n                        \n            [< JavaScriptExport >]\n            module Monaco =\n                open WebSharper.UI.Html\n            \n                type Position = {\n                    column     : int\n                    lineNumber : int\n                }\n                type Range = {\n                    startColumn     : int\n                    endColumn       : int\n                    startLineNumber : int\n                    endLineNumber   : int\n                }\n                type Uri = {\n                    authority : string\n                    fragment  : string\n                    fsPath    : unit->string\n                    path      : string\n                    query     : string\n                    scheme    : string\n                }  with\n                    [< Inline \"$global.monaco.Uri.parse($_s)\" >] static member Parse(_s)      : Uri   = X<_>\n                    [< Inline \"$global.monaco.Uri.file($_f)\"  >] static member File(_f)       : Uri   = X<_>\n                type Location = {\n                    range : Range\n                    uri   : Uri\n                }\n                type FindMatch = {\n                    matches : string []\n                    range   : Range\n                }\n                type WordAtPosition = {\n                    endColumn   : int\n                    startColumn : int\n                    word        : string\n                }\n                type Model = {\n                    uri         : Uri\n                }\n                  with\n                    [< Inline \"$mo.findMatches($_s, $_o, $_r, $_c, $_w, $_p, $_l)\" >] member mo.FindMatches(_s: string, _o: bool, _r: bool, _c: bool, _w: string, _p: bool, _l: int): FindMatch[] = X<_>\n                    [< Inline \"$mo.getWordAtPosition($_p)                        \" >] member mo.GetWordAtPosition(_p: Position) : WordAtPosition = X<_>\n                    [< Inline \"$mo.getLineContent($_l)                           \" >] member mo.GetLineContent(   _l: int     ) : string         = X<_>\n                    [< Inline \"$mo.getValue()                                    \" >] member mo.GetValue()                      : string         = X<_>\n                    [< Inline \"$mo.setValue($_v)                                 \" >] member mo.SetValue(_v:string)             : unit           = X<_>\n                    [< Inline \"$mo.dispose()                                     \" >] member mo.Dispose()                       : unit           = X<_>\n                    \n                type MarkDownString = {\n                    value      : string\n                    isTrusted  : bool\n                }\n                type MarkerSeverity =\n                | Error   = 8\n                | Hint    = 1\n                | Info    = 2\n                | Warning = 4\n                type MarkerData = {\n                    startColumn        : int\n                    endColumn          : int\n                    startLineNumber    : int\n                    endLineNumber      : int\n                    severity           : MarkerSeverity\n                    message            : string\n                    //code : string\n                    //relatedInformation : string\n                    //source             : string\n                    //tags               : MarkerTag[]\n                }\n                type CompletionItemKind =\n                | Class       = 6\n                | Color       = 15\n                | Constructor = 3\n                | Enum        = 12\n                | Field       = 4\n                | File        = 16\n                | Folder      = 18\n                | Function    = 2\n                | Interface   = 7\n                | Keyword     = 13\n                | Method      = 1\n                | Module      = 8\n                | Property    = 9\n                | Reference   = 17\n                | Snippet     = 14\n                | Text        = 0\n                | Unit        = 10\n                | Value       = 11\n                | Variable    = 5\n                type CompletionItem = {\n                    kind                : CompletionItemKind\n                    label               : string\n                    //additionalTextEdits : string\n                    //command             : string\n                    //commitCharacters    : string\n                    detail              : string\n                    //documentation       : string\n                    //filterText          : string\n                    //insertText          : string\n                    //range               : string\n                    //sortText            : string\n                    //textEdit            : string\n                }\n                type Hover = {\n                    contents   : MarkDownString []\n                    range      : Range\n                }\n                \n                open WebSharper.Core.Resources\n            \n                type MonacoResources() =\n                    inherit BaseResource(@\"/EPFileX/monaco/package/min/vs/loader.js\")\n            \n                [< Require(typeof<MonacoResources>) >]\n                type Editor() =\n                    do ()\n                  with\n                    [< Inline \"$global.require.config({ paths: { 'vs': '/EPFileX/monaco/package/min/vs' }});\" >] static member RequireConfig ()     : unit    = X<_>\n                    [< Inline \"$global.require(['vs/editor/editor.main'], $_s, $_f)\"                          >] static member Require(_s, _f)      : unit    = X<_>\n                    [< Inline \"$global.monaco.editor.create($_elt, $_op, $_ov)\"                               >] static member Create _elt _op _ov  : Editor  = X<_>\n                    [< Inline \"$global.monaco.editor.createModel($_t, $_l, $_u)\">] static member CreateModel(_t:string, _l:string, _u:Uri)          : Model   = X<_>\n                    [< Inline \"$global.monaco.editor.getModel($_u)\"             >] static member GetModel(_u:Uri)                                   : Model   = X<_>\n                    [< Inline \"$global.monaco.editor.getModels()\"               >] static member GetModels()                                        : Model[] = X<_>\n                    [< Inline \"$global.monaco.editor.setModelLanguage($_m, $_l)\">] static member SetModelLanguage(_m:Model, _l:string)              : unit    = X<_>\n                    [< Inline \"$global.monaco.editor.setTheme($_t)\"                                           >] static member SetTheme(_t:string)  : unit    = X<_>\n                    [< Inline \"$global.monaco.languages.registerHoverProvider($_l, $_p)\"          >] static member RegisterHoverProvider         (_l: string, _p: obj): System.IDisposable   = X<_>\n                    [< Inline \"$global.monaco.languages.registerDefinitionProvider($_l, $_p)\"     >] static member RegisterDefinitionProvider    (_l: string, _p: obj): System.IDisposable   = X<_>\n                    [< Inline \"$global.monaco.languages.registerCompletionItemProvider($_l, $_p)\" >] static member RegisterCompletionItemProvider(_l: string, _p: obj): System.IDisposable   = X<_>\n                    [< Inline \"$global.monaco.editor.setModelMarkers($_m,$_o,$_k)\"       >] static member SetModelMarkers(_m:Model, _o:string, _k:MarkerData[]):unit = X<_>\n                    \n                    [< Inline \"$monc.getValue()                  \" >] member monc.GetValue()                                  : string          = X<_>\n                    [< Inline \"$monc.setValue($_v)               \" >] member monc.SetValue(_v:string)                         : unit            = X<_>\n                    [< Inline \"$monc.onDidChangeModelContent($_f)\" >] member monc.OnDidChangeModelContent(_f:obj->unit)       : unit            = X<_>\n                    [< Inline \"$monc.getModel()                  \" >] member monc.GetModel()                                  : Model           = X<_>  \n                    [< Inline \"$monc.setModel($_m)               \" >] member monc.SetModel(_m:Model)                          : unit            = X<_>  \n                    [< Inline \"$monc.layout()                    \" >] member monc.Layout()                                    : unit            = X<_>\n                    [< Inline \"$monc.updateOptions($_o)\"           >] member monc.UpdateOptions(_o:obj)                       : unit            = X<_>\n                    [< Inline \"$monc.setPosition($_p)            \" >] member monc.SetPosition(_p:Position)                    : unit            = X<_>\n                    [< Inline \"$monc.focus()                     \" >] member monc.Focus()                                     : unit            = X<_>\n                    \n            //        [< Inline \"$monc.refresh()\"                 >] member monc.Refresh()                                   : unit            = X<_>\n            //        [< Inline \"$monc.setOption($_o, $_v)\"       >] member monc.SetOption(_o:string, _v:obj)                : unit            = X<_>\n            //        [< Inline \"$monc.getOption($_o)\"            >] member monc.GetOption(_o:string)                        : obj             = X<_>\n            //        //[< Inline \"$monc.getCursor()\"               >] member monc.GetCursor()                                 : Pos             = X<_>\n            //        [< Inline \"$monc.performLint()\"             >] member monc.PerformLint()                               : unit            = X<_>\n            //        [< Inline \"$monc.focus()\"                   >] member monc.Focus()                                     : unit            = X<_>\n            //        [< Inline \"$monc.getLine($_l)\"              >] member monc.GetLine(_l:int)                             : string          = X<_>\n            //        [< Inline \"$monc.getDoc().clearHistory()\"   >] member monc.ClearHistory()                              : unit            = X<_>\n            //        [< Inline \"$monc.on($_event, $_f)\"          >] member monc.On(_event: string, _f:(Editor * obj)->unit) : unit            = X<_>\n            //        [< Inline \"$monc.on($_event, $_f)\"          >] member monc.On(_event: string, _f: Editor       ->unit) : unit            = X<_>\n            //        [< Inline \"$monc.addKeyMap($_keyMap)\"       >] member monc.AddKeyMap(_keyMap: obj)                     : unit            = X<_>\n            //        [< Inline \"$monc.getWrapperElement()\"       >] member monc.GetWrapperElement()                         : Dom.Element     = X<_>\n            //        [< Inline \"$monc.replaceSelection($_v, $_s)\">] member monc.ReplaceSelection(_v:string, _s:string)                        = ()\n            //        [< Inline \"while($monc.getAllMarks().length > 0) { $monc.getAllMarks()[0].clear() }\" >] member monc.RemoveMarks() : unit = X<_>\n            //        [< Inline \"$monc.getDoc().markText({line:$_fl, ch:$_fc}, {line:$_tl, ch:$_tc}, {className: $_className, title: $_title})\" >]\n            //        member monc.MarkText (_fl:int,_fc:int) (_tl:int,_tc:int) (_className: string) (_title: string): unit       = X<_>\n                \n                [<NoComparison ; NoEquality>]\n                type MonacoConfig = {\n                    var             : Var<string>\n                    onChange        : (unit   -> unit)\n                    onRender        : (Editor -> unit) option\n                    mutable editorO :  Editor option\n                    disabled        : View<bool>\n                    options         : obj\n                    overrides       : obj\n                }\n                \n                [< Inline \"var m = $global.require('vs/base/common/lifecycle'); return new m.ImmortalReference($_v);\" >]\n                let newImmortalReference _v = X<_>\n                \n                let newVar var    = \n                    { var         = var \n                      onChange    = ignore\n                      onRender    = None\n                      editorO     = None\n                      disabled    = V false\n                      options     = null\n                      overrides   = null\n                    }\n                //let includes = [| @\"/EPFileX/monaco/package/min/vs/loader.js\" |]\n                let loader = async {\n                    if IsClient then\n                        //do! LoadFiles.LoadFilesAsync includes\n                        Editor.RequireConfig()\n                        do! Async.FromContinuations(fun (success, failed, cancelled) -> Editor.Require(success, failed))\n                }\n                let render monc             = \n                    async {\n                      do! loader\n                      return\n                          div [ on.afterRender (fun elchild ->\n                                 let editor        = Editor.Create elchild.ParentElement monc.options monc.overrides\n                                 ResizeObserver.addResizeObserver editor.Layout elchild.ParentElement\n                                 elchild.ParentNode.RemoveChild elchild |> ignore\n                                 monc.editorO     <- Some editor\n                                 monc.onRender |> Option.iter (fun onrender -> onrender editor)\n                                 monc.var |> bindVarEditor editor.OnDidChangeModelContent editor.GetValue editor.SetValue monc.onChange\n                                 //monc.disabled |> View.Sink (fun dis -> editor.SetOption(\"readOnly\", if dis then \"nocursor\" :> obj else false :> obj) )\n                          )    \n                        ] []\n                    } |> Doc.Async\n                let inline setVar   v   monc = { monc with var       = v      }\n                let inline onChange f   monc = { monc with onChange  = f      }\n                let inline onRender f   monc = { monc with onRender  = Some f }\n                let inline disabled dis monc = { monc with disabled  = dis    }\n                let inline var          monc = monc.var\n                let newText(v:string)             = newVar (Var.Create v)\n                let newVarO(v:Var<string option>) = Var.Lens v (Option.defaultValue \"\") (fun sO s -> sO |> Option.map (fun _ -> s) )\n                                                    |> newVar\n                                                    |> disabled(V (Option.isNone v.V))\n            \n        /// Essentials that part runs in Javascript and part runs in the server\n        [< AutoOpen >]\n        module Library2 =\n            [<WebSharper.JavaScript>]\n            module WebSockets =\n                //#r @\"..\\packages\\Microsoft.Owin\\lib\\net451\\Microsoft.Owin.dll\"\n                //#r @\"..\\packages\\WebSharper.Owin.WebSocket\\lib\\net461\\Owin.WebSocket.dll\"\n                //#r @\"..\\packages\\WebSharper.Owin.WebSocket\\lib\\net461\\WebSharper.Owin.WebSocket.dll\"\n                \n                open WebSharper\n                \n                let MessageBrokerId  = \"<MessageBroker>\"\n                \n                type Address = Address of address:string\n                with member this.txt = match this with Address txt -> txt\n                \n                let MessageBrokerAddress = Address MessageBrokerId\n                \n                /// Requests made to Message Broker\n                [< NamedUnionCases \"type\" >]\n                type BrokerRequest = \n                    | BRGetConnections  /// request for list of connections\n                    | BRGetProcessId    /// request PID of broker process\n                \n                /// Replies from Message Broker\n                [< NamedUnionCases \"type\" >]\n                type BrokerReply = \n                    | BRConnections  of string[]\n                    | BRPid          of int\n                    | BRString       of string\n                  //  | BRPleaseClose  \n                \n                [< NamedUnionCases \"type\" >]\n                type MessageType = \n                    | MsgInformation             // does not expect a reply, payload may or may not be structured\n                    | MsgRequest                 // expects a reply, structured payload\n                    | MsgReply                   // structured payload.\n                    | MsgFromBroker              // Payload is BrokerMessage. Only Broker should use this\n                    | MsgRequestForId            // expects reply as Information with id\n                    | MsgRequestForEcho          // expects reply as Information with same payload\n                \n                /// Replies from Message Broker\n                [< NamedUnionCases \"type\" >]\n                type BrokerMessage = \n                    | BMOk\n                    | BMOnlyBrokerShouldUse\n                    | BMDestinationNotFound of Address  \n                    | BMWebSocketError      of string\n                    | BMReceiverCantReply\n                    | BMUnexpectedMsgType   of MessageType\n                    | BMUnexpectedResponse  of string\n                \n                [< NamedUnionCases \"type\" >]\n                type Replier = \n                    | NoReply\n                    | Broker\n                    | Receiver\n                \n                [< NamedUnionCases \"type\" >]\n                type MessageGeneric = {\n                    from          : Address\n                    destination   : Address\n                    msgType       : MessageType\n                    subtype       : string      // free short string that provides information to deserialize payload\n                    id            : System.Guid\n                    payload       : string\n                    replier       : Replier\n                }\n                \n                [< Inline >]\n                let inline processPayload f (payload:string) : string =\n                    if payload = \"\" then Unchecked.defaultof<_> else Json.Deserialize payload\n                    |> f\n                    |> Json.Serialize\n                            \n                [<  Inline >]\n                let newMsgSerialized dst payload = {\n                    from          = Address \"\"\n                    destination   = dst\n                    msgType       = MsgRequest\n                    subtype       = \"\"\n                    id            = System.Guid.NewGuid()\n                    payload       = payload\n                    replier       = NoReply\n                }\n                \n                [< Inline >]\n                let inline payload        pl  msg = { msg with payload       = Json.Serialize pl }\n                let inline from           frm msg = { msg with from          = frm               }\n                let inline destination    dst msg = { msg with destination   = dst               }\n                let inline msgType        typ msg = { msg with msgType       = typ               }\n                let inline subtype        sub msg = { msg with subtype       = sub               }\n                let inline replier        rpl msg = { msg with replier       = rpl               }\n                let inline msgId          id  msg = { msg with id            = id                }\n                \n                [<  Inline >]\n                let inline newMsg dst payload = Json.Serialize payload |> newMsgSerialized dst\n                \n                [<  Inline >]\n                let inline msgPayload msg = Json.Deserialize msg.payload\n                \n                let mapPayload f msg = { msg with payload = f msg.payload }\n                \n                let inline makeReply msg =\n                    msg\n                    |> msgType MsgReply\n                    |> replier NoReply\n                \n                [<  Inline >]\n                let inline respond pyld msg =\n                    msg\n                    |> makeReply\n                    |> payload  pyld\n                \n                type IServer =\n                    abstract member Post  : MessageGeneric -> unit\n                    abstract member Close : unit           -> unit\n                \n                type CMessage<'C2S> = WebSharper.Owin.WebSocket.Client.Message<'C2S>\n                \n                \n                type SMessage<'S2C> = WebSharper.Owin.WebSocket.Server.Message<'S2C>\n                \n                [< JavaScript false >]\n                module Broker =\n                    open WebSharper\n                    open WebSharper.Owin.WebSocket.Server\n                    open System.Collections.Generic\n                    \n                    type SomeState = {\n                        info       : string\n                    }\n                    \n                    type IClient =\n                        abstract member Post : MessageGeneric -> unit\n                        abstract member Ip   : unit           -> string\n                        abstract member Id   : unit           -> string\n                        abstract member Close: unit           -> unit\n                \n                    type BrokerAgent(_epWebSocket: WebSharper.Owin.WebSocket.Endpoint<MessageGeneric,MessageGeneric>) =\n                #if FSS_SERVER                          \n                        static let mutable fssWebSocketO : BrokerAgent option = None\n                #endif\n                        do printfn \"WebSocket server start\"\n                        let addConnection, removeConnection, getConnections =\n                            let connectionsAgent = Mailbox.stateFull (fun ex st -> print ex ; st) Map.empty\n                            (fun   clientAddress uniqueId client -> connectionsAgent |> Mailbox.StateFull.apply (Map.add clientAddress (uniqueId, client))       )\n                           ,(fun                 uniqueId        -> connectionsAgent |> Mailbox.StateFull.apply (Map.filter (fun _ (uid, _) -> uid <> uniqueId)) )\n                           ,(fun ()                              -> connectionsAgent |> Mailbox.StateFull.getState                                               )\n                        let processBrokerRequest req = \n                            match req with\n                            | BRGetConnections -> getConnections() |> Map.toSeq |> Seq.map (fun (Address cl, _) -> cl) |> Seq.toArray |> BRConnections \n                            | BRGetProcessId   -> System.Diagnostics.Process.GetCurrentProcess().Id |> BRPid\n                            \n                        let respondFromBroker pyld msg =\n                            msg\n                            |> respond     pyld\n                            |> msgType     MsgFromBroker\n                            |> subtype     \"FromBroker\"\n                \n                        let post reply msg =\n                            match getConnections() |> Map.tryFind msg.destination with\n                            | None                      -> msg |> respondFromBroker (BMDestinationNotFound msg.destination) |> reply\n                            | Some(_, clientTo:IClient) -> msg |> clientTo.Post\n                            \n                        let clientConnect (client: IClient) = async {\n                            let clientId = client.Id()\n                            printfn \"clientConnect: %A\" clientId\n                            let uniqueId = System.Guid.NewGuid()\n                            printfn \"New Connection from %s\" clientId                           \n                            let clientAddress = Address clientId\n                            getConnections()\n                            |> Seq.filter(fun kp -> kp.Key = clientAddress)\n                            |> Seq.iter  (fun (kp:KeyValuePair<_, _ * IClient>) -> \n                                printfn \"Closing old connection from %s\" clientId\n                                kp.Value \n                                |> fun (_, conn) -> conn.Close()\n                            )\n                            addConnection clientAddress uniqueId client\n                            \n                            let reply msg = msg |> from MessageBrokerAddress |> destination clientAddress |> client.Post\n                            let checkReply msg = if msg.replier = Broker then\n                                                        msg |> respondFromBroker BMOk |> reply\n                            let forward msg = msg |> from clientAddress |> post reply\n                                              checkReply msg\n                            let respondMsg (msg:MessageGeneric) =\n                                checkReply msg\n                                printfn \"%A\" msg\n                                match msg.msgType with\n                                | MsgInformation    -> printfn \"Information from '%s': %s\" msg.from.txt (msgPayload msg)\n                                | MsgReply          -> printfn              \"Reply %s: %s\" msg.from.txt  msg.payload\n                                | MsgRequest        -> msg |> respond (msgPayload msg  |> processBrokerRequest)  |> reply\n                                | MsgRequestForId   -> msg |> respond  MessageBrokerId |> msgType MsgInformation |> reply\n                                | MsgRequestForEcho -> msg |> mapPayload id            |> msgType MsgInformation |> reply\n                                | MsgFromBroker     -> ()\n                            let clientIp = client.Ip()\n                            return Unchecked.defaultof<_>, fun state wsmsg -> async {\n                                printfn \"Received message %A from %s - %s\" state clientIp clientId\n                                match wsmsg with\n                                | Message msg ->\n                                    if   msg.msgType     = MsgFromBroker        then msg |> respondFromBroker BMOnlyBrokerShouldUse |> reply\n                                    elif msg.destination = MessageBrokerAddress then respondMsg msg\n                                    else                                             forward    msg     \n                                    return state\n                                | Error exn -> \n                                    printfn \"Error in WebSocket server connected to %s - %s: %s\" clientIp clientId (exn.ToString())\n                                    newMsg clientAddress (BMWebSocketError exn.Message) |> msgId System.Guid.Empty |> msgType MsgFromBroker |> msgType MsgFromBroker |> reply\n                                    return state\n                                | Close ->\n                                    printfn \"Closed connection to %s - %s\" clientIp clientId\n                                    removeConnection uniqueId\n                                    return state\n                            }\n                        }\n                        member this.Post msg = post (fun m -> printfn \"%s\" m.payload) msg\n                        member this.Start (client : WebSocketClient<MessageGeneric,MessageGeneric>) =\n                            let inline tryGetValue key (dict) =\n                                dict \n                                :> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<_, _>> \n                                |> Seq.tryPick (fun kp -> if kp.Key = key then Some kp.Value else None)\n                            clientConnect { new IClient with\n                                                member this.Post v  = client.Post v\n                                                member this.Ip()    = client.Connection.Context.Request.RemoteIpAddress\n                                                member this.Id()    = client.Connection.Context.Request.Query \n                                                                      |> tryGetValue  \"ClientId\" \n                                                                      |> Option.bind         Array.tryHead \n                                                                      |> Option.defaultValue \"\"\n                                                member this.Close() = client.Connection.Close(System.Net.WebSockets.WebSocketCloseStatus.NormalClosure, null) |> Async.AwaitTask |> Async.Start\n                                          }\n                #if FSS_SERVER\n                        static member FssWebSocketO                = fssWebSocketO\n                        static member FssWebSocketO with set value = fssWebSocketO <- value\n                        member this.ConnectLocal clientId receiver = \n                            clientConnect { new IClient with\n                                                member this.Post v  = receiver v \n                                                member this.Ip()    = \"(server)\"\n                                                member this.Id()    = clientId\n                                                member this.Close() = () // probably shouldn't be called at all\n                                          }\n                \n                    let ConnectStatefulFSS uri clientId (f:IServer -> Async<int * (int -> CMessage<MessageGeneric> -> Async<int>)>) =\n                        async {\n                            match BrokerAgent.FssWebSocketO with \n                            | None -> raise (exn \"FssWebSocketO is not set\")\n                            | Some serverP ->\n                            let  mutable clientBoxO : MailboxProcessor<CMessage<MessageGeneric>> option = None\n                            let  receiver msg                = clientBoxO |> Option.iter (fun cbox -> cbox.Post (CMessage.Message msg))\n                            let! brokerInitState, brokerFunc = serverP.ConnectLocal clientId receiver\n                            let  brokerBox                   = Mailbox.foldA Mailbox.defHandler brokerFunc brokerInitState\n                            let! clientInitState, clientFunc = f { new IServer with\n                                                                       member this.Post msg = brokerBox.Post (Owin.WebSocket.Server.Message msg)\n                                                                       member this.Close()  = ()\n                                                                 }\n                            let  clientBox    = Mailbox.foldA Mailbox.defHandler clientFunc clientInitState\n                            clientBoxO <- Some clientBox\n                            clientBox.Post CMessage.Open\n                        }\n                #endif        \n                        \n                        \n    \n    module CalculationModel =\n        [< JavaScript >]\n        module CalculationModel =\n            open System\n            \n            type DimType =\n                | DtDataType\n                | DtTime\n                | DtVersion\n                | DtTCalc\n                | DtCalc\n                | DtMeasure\n                | DtOther\n            \n            type CubeType =\n                | CtOther\n                | CtCalc\n                | CtFreeze\n            \n            type AttType =\n                | AtString\n                | AtNumber\n            \n            type ElmType =\n                | EtString\n                | EtNumber\n            \n            type ModId = ModId of Guid with member x.Id = match x with ModId id -> id\n            type AttId = AttId of Guid with member x.Id = match x with AttId id -> id\n            type ElmId = ElmId of Guid with member x.Id = match x with ElmId id -> id\n            type CubId = CubId of Guid with member x.Id = match x with CubId id -> id\n            type DimId = DimId of Guid with member x.Id = match x with DimId id -> id\n            type CalId = CalId of Guid with member x.Id = match x with CalId id -> id\n            type TotId = TotId of Guid with member x.Id = match x with TotId id -> id\n            type ForId = ForId of Guid with member x.Id = match x with ForId id -> id\n            type RulId = RulId of Guid with member x.Id = match x with RulId id -> id\n            \n            type Attribute = {\n                attId          : AttId\n                attName        : string\n                attType        : AttType\n                attTableNum    : int\n            }\n            \n            type Element = {\n                elmId          : ElmId\n                elmDim         : DimId\n                elmType        : ElmType\n                elmName        : string\n                elmDescription : string\n                elmAttributes  : Map<AttId, string> \n                elmParents     : ElmId     []\n            } \n            \n            type Dimension = {\n                dimId               : DimId\n                dimName             : string\n                dimPrefix           : string\n                dimOrder            : string\n                dimExclude          : bool\n                dimFreeze           : bool\n                dimType             : DimType\n                defaultElm          : ElmId     option\n                mutable dimElements : Element   []\n                dimAttributes       : Attribute []\n                isCalcDim           : bool\n            }\n            \n            type UnaryOp = \n                | UoMinus\n                | UoPlus\n                \n            type Operator = \n                | OpAdd      \n                | OpSubtract \n                | OpMultiply \n                | OpDivide   \n                | OpEQ    \n                | OpNE\n                | OpGT       \n                | OpGE       \n                | OpLT       \n                | OpLE       \n                | OpAnd      \n                | OpOr           \n            \n            type Function = Function of string\n            \n            type ElmReference =\n                | ElemFixed   of DimId * ElmId\n                | ElemDynamic of DimId * ExpressionText\n                    \n            and  ExpressionText =\n                | ExtNA\n                | ExtStet\n                | ExtSlice      of Slice\n                | ExtString     of string\n                | ExtDimElement of DimId\n                | ExtDimName    of DimId\n                | ExtFunction   of Function         * ExpressionAny []\n                | ExtIf         of ExpressionNumber * ExpressionText   * ExpressionText\n            \n            and  ExpressionNumber =\n                | ExnNA\n                | ExnStet\n                | ExnSlice      of Slice\n                | ExnNumber     of float\n                | ExnOperationN of Operator         * ExpressionNumber * ExpressionNumber\n                | ExnUnaryN     of UnaryOp          * ExpressionNumber\n                | ExnOperationT of Operator         * ExpressionText   * ExpressionText\n                | ExnOperationI of Operator         * ExpressionAny    * ExpressionAny\n                | ExnFunction   of Function         * ExpressionAny []\n                | ExnIf         of ExpressionNumber * ExpressionNumber * ExpressionNumber\n                | ExnIsNA       of ExpressionNumber\n                | ExnIsNAt      of ExpressionText\n                | ExnIsNAa      of ExpressionAny\n                \n            and ExpressionAny =    \n                | ExiNA\n                | ExiStet\n                | ExiSlice      of Slice\n                | ExNumeric     of ExpressionNumber\n                | ExText        of ExpressionText\n                | ExiIf         of ExpressionNumber * ExpressionAny * ExpressionAny\n                \n            and  Slice = {\n                sliDims     : Map<DimId, ElmReference>   \n                calculation : CalId option\n                cube        : CubId option\n            } \n            \n            type ForType = \n                | ForBase\n                | ForConsolidated\n                | ForAll\n            \n            type Formula = {\n                forId          : ForId\n                forDestDecl    : Map<DimId, string>\n                forDestination : ElmReference list\n                forDescription : string\n                forText        : string\n                forExpression  : ExpressionAny\n                forType        : ForType\n                forOrder       : string\n            }\n            \n            type Calculation = {\n                calId          : CalId\n                calName        : string\n                calDescription : string\n                calOrder       : string\n                format         : string\n                isText         : bool\n                isInput        : bool\n                isBalance      : bool\n                calDims        : Set<DimId>\n                calFormulas    : Formula []\n                cubIdO         : CubId   option\n                properties     : Map<string, string>\n            }\n            \n            type NodeId =\n                | Calc of CalId\n                | Tot  of TotId\n            \n            type Total = {\n                totId          : TotId\n                totName        : string\n                totOrder       : string\n                totFormat      : string\n                children       : (float * NodeId) []\n            }\n            \n            type RuleKey = \n                | RuleKey     of RulId\n                | CalcRuleKey of CalId\n                | FormulaKey  of ForId\n                | ForTextKey  of ForId\n                | ActualRuleKey \n                | InputRuleKey\n                | ConsolidatedRuleKey\n            \n            type Cube = {\n                cubId          : CubId\n                cubName        : string\n                cubRules       : Map<RuleKey, Rule option>\n                cubRuleXmls    : Map<RuleKey, string>\n                cubDims        : DimId []\n                measureDim     : DimId option\n                cubType        : CubeType\n            }\n            \n            and  Rule = {\n                rulId          : RulId\n                rulSourceId    : IComparable\n                rulDescription : string\n                rulDestination : ElmReference list\n                rulExpression  : ExpressionAny\n                rulType        : ForType\n                rulOrder       : string\n                rulXml         : string\n            }\n            \n            type RuleMsg =\n            | GetInitModelStats\n            | GetRulesForCube of CubId\n            \n            type ReplyMsg =\n            | ReplyInformation of string\n            | ReplyRules       of (RuleKey * string) []\n            \n            [<NoComparison ; NoEquality>]\n            type Model = {\n                modId           : ModId\n                server          : string\n                actualElem      : string\n                modDims         : Dimension   []\n                modCubes        : Cube        []\n                modCalculations : Calculation []\n            } \n            \n            let Xmodel = \n              {\n                modId           = ModId <| Guid.NewGuid()\n                server          = @\"local\\Budget\"\n                actualElem      = \"Actual\"\n                modDims         = [||]\n                modCubes        = [||]\n                modCalculations = [||]\n              }\n                \n            let Map_adds kvs map = Seq.append (map |> Map.toSeq) kvs |> Map\n            let calcSlice calc : Slice = \n                     {\n                         sliDims       = Map.empty\n                         calculation   = Some calc.calId\n                         cube          = None\n                     }\n                \n            type HelperTypeN = HelperTypeN with\n                static member (&%>)  (HelperTypeN, a :     bool             ) : ExpressionNumber = ExnNumber <| if    a then 1.0 else 0.0\n                static member (&%>)  (HelperTypeN, a :     int              ) : ExpressionNumber = ExnNumber <| float a\n                static member (&%>)  (HelperTypeN, a :     float            ) : ExpressionNumber = ExnNumber          a\n                static member (&%>)  (HelperTypeN, a :     Slice            ) : ExpressionNumber = ExnSlice           a\n                static member (&%>)  (HelperTypeN, a :     Calculation      ) : ExpressionNumber = ExnSlice  <| calcSlice a\n                static member (&%>)  (HelperTypeN, a :     ExpressionNumber ) : ExpressionNumber =                    a\n                \n            let [< Inline >] inline toExpN v : ExpressionNumber = HelperTypeN &%>  v\n            \n            type HelperTypeT = HelperTypeT with\n                static member (&&>)  (HelperTypeT, a :     string           ) : ExpressionText   = ExtString          a \n                static member (&&>)  (HelperTypeT, a :     Dimension        ) : ExpressionText   = ExtDimName         a.dimId \n                static member (&&>)  (HelperTypeT, a :     Slice            ) : ExpressionText   = ExtSlice           a\n                static member (&&>)  (HelperTypeT, a :     Calculation      ) : ExpressionText   = ExtSlice  <| calcSlice a\n                static member (&&>)  (HelperTypeT, a :     ExpressionText   ) : ExpressionText   =                    a\n            \n            let [< Inline >] inline toExpT  v : ExpressionText = HelperTypeT &&>  v\n            \n            type HelperTypeA = HelperTypeA with\n                [< Inline >]\n                static member (&>>)  (HelperTypeA, a :     ExpressionNumber) : ExpressionAny = ExNumeric          a \n                [< Inline >]\n                static member (&>>)  (HelperTypeA, a :     ExpressionText  ) : ExpressionAny = ExText             a\n                [< Inline >]\n                static member (&>>)  (HelperTypeA, a :     Slice           ) : ExpressionAny = ExiSlice           a\n                [< Inline >]\n                static member (&>>)  (HelperTypeA, a :     Calculation     ) : ExpressionAny = ExiSlice <| calcSlice a\n                [< Inline >] \n                static member (&>>)  (HelperTypeA, a :     bool            ) : ExpressionAny = toExpN             a |> ExNumeric\n                [< Inline >] \n                static member (&>>)  (HelperTypeA, a :     int             ) : ExpressionAny = toExpN             a |> ExNumeric\n                [< Inline >] \n                static member (&>>)  (HelperTypeA, a :     float           ) : ExpressionAny = toExpN             a |> ExNumeric\n                [< Inline >] \n                static member (&>>)  (HelperTypeA, a :     string          ) : ExpressionAny = toExpT             a |> ExText\n                [< Inline >]\n                static member (&>>)  (HelperTypeA, a :     ExpressionAny   ) : ExpressionAny =                    a\n            \n            let [< Inline >] inline toExpA  v : ExpressionAny = HelperTypeA &>>  v\n        \n            type Message =\n                | DimensionNotFound      of DimId\n                | DimensionHasNoElements of string\n                | ElementNotFound        of string * ElmId\n                | CubeNotFound           of CubId\n                | CubeHasNoMeasureDim    of string\n                | CalculationNotFound    of CalId\n                | CalculationHasNoCube   of string\n        \n            let ofOptF f = Result.ofOption (fun () -> Message <| f())\n            let ofOptS s = Result.ofOption (fun () -> Message <| s  )\n        \n            module internal Model0 =\n                let getCubeO    cubId mdl = mdl.modCubes        |> Seq.tryFind (fun cub -> cub.cubId   =  cubId)\n                let getDimO       dId mdl = mdl.modDims         |> Seq.tryFind (fun d   ->   d.dimId   =    dId)\n                let getDimR       dId mdl = getDimO  dId mdl |> Result.ofOption (fun () -> DimensionNotFound   dId)\n        \n            module Element  =\n                let newElement name = \n                  {\n                    elmId          = ElmId <| Guid.NewGuid()\n                    elmDim         = DimId <| Guid.NewGuid()\n                    elmType        = EtString\n                    elmName        = name\n                    elmDescription = name\n                    elmAttributes  = Map.empty\n                    elmParents     = [||]\n                  }\n        \n            module ElmReference =\n                let dimId elr =\n                    match elr with\n                    | ElemFixed  (id, _)\n                    | ElemDynamic(id, _) -> id\n        \n            module Slice =\n                let newSlice ds = {\n                         sliDims       = ds |> Seq.map (fun dr -> ElmReference.dimId dr, dr) |> Map \n                         calculation   = None\n                         cube          = None\n                }\n                let forAll = {\n                         sliDims       = Map.empty\n                         calculation   = None\n                         cube          = None\n                }\n                let addRef      elr slc = { slc with sliDims = slc.sliDims |> Map.add (ElmReference.dimId elr) elr }\n                let containsDim did slc = slc.sliDims |> Map.containsKey did\n           \n            module Dimension =\n                let getElementO      eId dim = dim.dimElements |> Seq.tryFind (fun e -> e.elmId = eId)    \n                let getElementR      eId dim = getElementO eId dim |> Result.ofOption (fun () -> ElementNotFound(dim.dimName, eId))\n                let newDimension id name isCalcDim =\n                      {\n                        dimId          = id \n                        dimName        = name\n                        dimPrefix      = \"\"\n                        dimOrder       = \"\"\n                        dimExclude     = false\n                        dimFreeze      = false\n                        dimType        = DtOther\n                        defaultElm     = None\n                        dimElements    = [|  |]\n                        dimAttributes  = [|  |]      \n                        isCalcDim      = isCalcDim\n                      }\n                let newDimensionNonCalc id name  = newDimension id name false\n                let newDimensionCalc    id name  = newDimension id name true \n                let New                    name  = newDimension (DimId <| Guid.NewGuid()) name false\n                let [< Inline >] inline getElmReference it dim =\n                    match toExpT it with \n                    | ExtString s1 -> let s2 = s1.Replace(\"_\", \" \")\n                                      let elm =\n                                         dim.dimElements                                 \n                                         |> Seq.tryFind (fun e -> e.elmName = s2)\n                                         |> Option.defaultWith (fun () -> \n                                             let newE = Element.newElement s2\n                                             dim.dimElements <- Array.append dim.dimElements [| newE |]\n                                             newE\n                                         )\n                                      ElemFixed  (dim.dimId, elm.elmId) \n                    | exp          -> ElemDynamic(dim.dimId, exp      )  \n        //        member inline this.Item (it) = getElmReference it this\n                //member inline this.__     it     = this.Item it\n                //member inline this.M      it     = this.Item it\n                //member inline this.E      it     = this.Item it\n                //member inline this.I      it     = this.Item it\n                let prefix  pr   dim  = { dim with dimPrefix = pr   }\n                let dType   dt   dim  = { dim with dimType   = dt   }\n                let setName name dim  = { dim with dimName   = name }\n                let filter     dtypes : (Dimension seq -> Dimension seq) = Seq.filter (fun d -> dtypes |> Seq.contains d.dimType)\n                let sort             (ds:Dimension seq)                  = ds |> Seq.sortBy (fun d -> d.dimOrder)\n                let filterSort dtypes : (Dimension seq -> Dimension seq) = filter dtypes >> sort\n        \n            type Dimension with\n                [< Inline >] \n                member inline this.Item (it) = Dimension.getElmReference it this\n        \n        \n            module Cube =\n                let slice cub : Slice  = \n                     {\n                         sliDims       = Map.empty\n                         calculation   = None\n                         cube          = Some cub.cubId\n                     }\n                let containsDim dimId         cub = cub.cubDims |> Seq.contains dimId\n                let isCalcCube                cub = cub.cubType = CtCalc    \n                let newCubeId id name dims mDimO cType = \n                        {\n                          cubId       = id\n                          cubName     = name\n                          cubDims     = dims\n                          cubRules    = Map.empty\n                          cubRuleXmls = Map.empty\n                          measureDim  = mDimO\n                          cubType     = cType\n                        }\n                let newCube     name            = newCubeId <| CubId (Guid.NewGuid()) <| name\n                let newCubeCalc name dims mDimO = newCube name  dims mDimO CtCalc \n                let newCubeDims name dims mDimO = newCube name (dims |> Seq.map (fun d -> d.dimId) |> Seq.toArray) mDimO CtOther\n                let New()                       = newCube \"\" [||] None CtOther\n                let addRule     key rule  cub   = { cub with cubRules =                                              Map.add key rule         cub.cubRules }\n                let addRules        rules cub   = { cub with cubRules = rules |> Seq.fold (fun rulesN (key, rule) -> Map.add key rule rulesN) cub.cubRules }\n                //member inline this.Calc ()    = { this with cubType = CtCalc } \n                let forElr (es: ElmReference list) cub = { slice cub with sliDims = Map_adds (List.map (fun (e:ElmReference) -> ElmReference.dimId e, e) es) (slice cub).sliDims } \n                let dims            model cub   = model.modDims |> Array.filter(fun d -> cub.cubDims |> Array.exists ((=) d.dimId) )\n                let measureDimO     model cub   = cub.measureDim    |> Option.bind (swap Model0.getDimO model)\n                let measureDimR     model cub   = cub.measureDim         |> Result.ofOption (fun () -> CubeHasNoMeasureDim cub.cubName) |> Result.bind (swap Model0.getDimR model)\n                let measureDimNameR model cub   = measureDimR model cub  |> Result.map (fun dim -> dim.dimName)\n                \n            module Calculation =\n                let slice calc = calcSlice calc\n                let calcType calc = if calc.isInput then \"INPUT\" else \"CALC\"    \n                let newInput id (name: string) dims  =\n                     {\n                        calId          = id\n                        calName        = name.Replace(\"_\", \" \").Trim()\n                        calDescription = \"\"\n                        calOrder       = \"\"\n                        format         = \"#,##0.00\"\n                        isText         = false\n                        isInput        = true\n                        isBalance      = false\n                        calDims        = dims |> Set \n                        calFormulas    = [||]\n                        cubIdO         = None\n                        properties     = Map.empty\n                     }\n                let newCalc id name dims      = { newInput id name dims     with isInput     = false  }\n                let New        ()             =   newInput (CalId <| Guid.NewGuid()) \"\"   []\n                let setName    name      calc = { calc                   with calName     = name   }\n                let setIsText  istext    calc = { calc                   with isText      = istext }\n                let setOrder   order     calc = { calc                   with calOrder    = order  }\n                let addFormula frml      calc = { calc                   with calFormulas = Array.append calc.calFormulas [| frml |] }\n                let forSlice (es: ElmReference list) calc = { slice calc with sliDims = Map_adds (List.map (fun e -> ElmReference.dimId e, e) es) (slice calc).sliDims } \n                let addFormulas fs calc = if Seq.isEmpty fs then calc else { calc with calFormulas = fs |> Seq.toArray |> Array.append calc.calFormulas } \n                let withCube (model: Model) calc f = calc.cube |> Option.bind (swap Model0.getCubeO model) |> Option.bind f\n                let [< Inline >] getElemRefO(model: Model) calc =\n                    calc.cubIdO \n                    |> Option.bind (swap Model0.getCubeO model)\n                    |> Option.bind (fun cub ->  cub.measureDim) \n                    |> Option.bind (swap Model0.getDimO  model)\n                    |> Option.map  (Dimension.getElmReference calc.calName)\n                let cubeR           c = c.cubIdO        |> ofOptF (fun () -> sprintf \"Calculation '%s' has no cube\" c.calName)\n                let [< Inline >] getElemRefR   m c = getElemRefO m c |> ofOptF (fun () -> sprintf \"Calcuation '%s' has no ElemRef\" c.calName) \n                let sort             (cs:Calculation seq)                  = cs |> Seq.sortBy (fun c -> c.calOrder)\n        \n            module Total =\n                let newTotal name  = {\n                    totId          = TotId  <| System.Guid.NewGuid()\n                    totName        = name\n                    totOrder       = \"\"\n                    totFormat      = \"\"\n                    children       = [||]\n                }\n                let New() = newTotal \"\"\n                \n            module Model =\n                let mergeBy f a b = Array.append (Seq.toArray a) (Array.filter (fun e -> a |> Seq.map f |> Seq.contains (f e) |> not ) b)\n                let addCalcs     cs   mdl = { mdl with modCalculations = mergeBy (fun c -> c.calId) cs mdl.modCalculations }\n                let addDims      ds   mdl = { mdl with modDims         = mergeBy (fun c -> c.dimId) ds mdl.modDims         }\n                let addCubes     cs   mdl = { mdl with modCubes        = mergeBy (fun c -> c.cubId) cs mdl.modCubes        }\n                let addForms     fs   mdl = { mdl with modCalculations = mdl.modCalculations |> Array.map (fun cal -> fs |> Seq.filter (fst >> (=) cal.calId) |> Seq.map snd |> Calculation.addFormulas <| cal) }\n                let addCalc      calc mdl = { mdl with modCalculations = Array.append mdl.modCalculations [| calc |] }\n                let addDim       dim  mdl = { mdl with modDims         = Array.append mdl.modDims         [| dim  |] }\n                let addCube      cube mdl = { mdl with modCubes        = Array.append mdl.modCubes        [| cube |] }\n                let addForm  cid frm  mdl = { mdl with modCalculations = mdl.modCalculations |> Array.map (fun cal -> if cal.calId = cid then Calculation.addFormula frm cal else cal) }\n                let getDimO               = Model0.getDimO\n                let getDimR               = Model0.getDimR\n                let getCalcO      cId mdl = mdl.modCalculations |> Seq.tryFind (fun c   ->   c.calId   =    cId)\n                let getCubeO              = Model0.getCubeO\n                let getCalcR      cId mdl = getCalcO cId mdl |> Result.ofOption (fun () -> CalculationNotFound cId)\n                let getCubeR      cId mdl = getCubeO cId mdl |> Result.ofOption (fun () -> CubeNotFound        cId)\n                let pickCubeO      ct mdl = mdl.modCubes        |> Seq.tryPick (fun c   ->   if c.cubType = ct then Some c else None)\n                let pickDimO       dt mdl = mdl.modDims         |> Seq.tryPick (fun d   ->   if d.dimType = dt then Some d else None)\n                let pickCalcO      cn mdl = mdl.modCalculations |> Seq.tryPick (fun c   ->   if c.calName = cn then Some c else None)\n                let freezeCubeO       mdl = pickCubeO CtFreeze   mdl\n                let tCalcDimO         mdl = pickDimO  DtTCalc    mdl \n                let dataTypeDimO      mdl = pickDimO  DtDataType mdl\n                let timeDimO          mdl = pickDimO  DtTime     mdl\n                let versionDimO       mdl = pickDimO  DtVersion  mdl\n                let isActualCalcO     mdl = pickCalcO \"IsActual\" mdl \n                let getCalcCube dims  mdl = \n                    mdl.modCubes \n                    |> Seq.filter  Cube.isCalcCube\n                    |> Seq.tryFind (fun cub -> \n                        cub.cubDims \n                        |> Seq.filter (fun d -> Some d <> cub.measureDim) \n                        |> Set = dims )\n                let setCube cubeN model = { model with modCubes = model.modCubes |> Array.map (fun cub -> if cub.cubId = cubeN.cubId then cubeN else cub ) }\n                let withDimsO mdl cube f =\n                    let (<*>)   = Option.apply\n                    let dimMeaO = cube.measureDim |> Option.bind (swap getDimO mdl) \n                    Some f <*> dimMeaO <*> dataTypeDimO mdl <*> versionDimO mdl <*> timeDimO mdl |> Option.join\n                let withDims mdl cube f = withDimsO mdl cube (fun a b c d -> f a b c d |> Some)\n                let dimCombinations model =\n                    model.modCalculations\n                    |>  Seq.map (fun c -> c.calDims)\n                    |>  Seq.distinct \n                let cubePrefix    = \"Z\"\n                let measurePrefix = \"M\"\n                let orderedDims dimIds model =\n                        model.modDims \n                        |>  Seq.filter (fun d -> dimIds |> Seq.exists ((=) d.dimId) ) \n                let autoName dimIds model =\n                    let nameBase =\n                        model\n                        |> orderedDims dimIds\n                        |> Seq.map (fun d -> d.dimPrefix)\n                        |>  String.concat \"\"\n                    let similar =\n                        model.modCubes\n                        |> Seq.choose (fun c -> \n                            match cubePrefix + nameBase with\n                            | n when c.cubName          = n -> Some -1\n                            | n when c.cubName.StartsWith n -> c.cubName.[nameBase.Length + 1..] |> ParseO.parseIntO\n                            | _                             -> None\n                        ) \n                    nameBase\n                  + if similar |> Seq.isEmpty then \"\" else similar |> Seq.max |> ((+) 1) |> sprintf \"%d\"\n            \n                let dimIds           model = model.modDims |> Array.map (fun d -> d.dimId)\n                let fixForDimensions model =\n                    //this.modCubes        <- this.modCubes        |>> fun cub -> { cub with cubDims = cub.cubDims |> Array.filter (fun d -> Seq.exists ((=) d) this.DimIds) }\n                    let calcs = model.modCalculations |> Array.map (fun cal -> { cal with calDims = cal.calDims |> Set.filter   (fun d -> Seq.exists ((=) d) (dimIds model)) } )\n                    { model with modCalculations = calcs }\n                let newCalcCube dimIds model =\n                    let name = autoName dimIds model\n                    let mDim = Dimension.newDimensionCalc <| DimId (Guid.NewGuid()) <| measurePrefix + name\n                    let orderedDimIds = \n                        model\n                        |> orderedDims dimIds\n                        |> Seq.append <| [ mDim ]\n                        |> Seq.map (fun d -> d.dimId)\n                        |> Seq.toArray\n                    let dims  = Array.append model.modDims  [| mDim                                                                 |]\n                    let cubes = Array.append model.modCubes [| Cube.newCubeCalc (cubePrefix + name) orderedDimIds (Some mDim.dimId) |]\n                    { model with modDims = dims ; modCubes = cubes }\n                let fixCalcsAndCubes model =\n                    let calNoCube = model.modCalculations |> Array.filter (fun c -> c.cubIdO |> Option.bind (swap getCubeO model) |> Option.isNone)\n                    if Seq.isEmpty calNoCube then model else\n                        let modelN =\n                            calNoCube\n                            |> Seq.map      (fun c -> c.calDims)\n                            |> Seq.distinct\n                            |> Seq.filter   ((swap getCalcCube  model) >> Option.isNone)\n                            |> Seq.fold      (swap newCalcCube) model\n                        let calcs =\n                            modelN.modCalculations\n                            |> Array.map (fun oldC ->\n                                    calNoCube \n                                    |> Seq.tryFind (fun newC -> newC.calId = oldC.calId)\n                                    |> Option.map  (fun newC -> { newC with Calculation.cubIdO = (getCalcCube newC.calDims modelN) |> Option.map (fun cub -> cub.cubId) } )\n                                    |> Option.defaultValue oldC\n                              )\n                        { modelN with modCalculations = calcs }\n                let prepareModel model =\n                    model\n                    |> fixForDimensions \n                    |> fixCalcsAndCubes\n                let addRules rules model =\n                    rules\n                    |> Seq.groupBy (fun (cubId, _, _) -> cubId)\n                    |> Seq.fold (fun mdl (cubId, rules) ->\n                        getCubeO cubId mdl\n                        |> Option.map(fun cube ->\n                            rules \n                            |> Seq.map (fun (_, key, rule) -> key, rule)\n                            |> Cube.addRules <| cube\n                            |> swap setCube mdl\n                        )\n                        |> Option.defaultValue mdl\n                    ) model\n                    \n            \n            module Formula =\n                let [< Inline >] inline newFormula id dest exp  typ =\n                      {\n                          forId          = id\n                          forDestDecl    = Map.empty\n                          forDestination = dest\n                          forDescription = \"\"\n                          forText        = \"\"\n                          forExpression  = toExpA exp\n                          forType        = typ\n                          forOrder       = \"\"\n                      }\n                let [< Inline >] inline newBase    id expr      = newFormula id []   expr ForBase        \n                let [< Inline >] inline newBaseFor id expr dest = newFormula id dest expr ForBase        \n                let [< Inline >] inline newCons    id expr      = newFormula id []   expr ForConsolidated\n                let [< Inline >] inline newConsFor id expr dest = newFormula id dest expr ForConsolidated\n                let [< Inline >] inline newAll     id expr      = newFormula id []   expr ForAll         \n                let [< Inline >] inline newAllFor  id expr dest = newFormula id dest expr ForAll         \n                let [< Inline >] inline New        ()        =\n                      {\n                          forId          = ForId <| Guid.NewGuid()\n                          forDestDecl    = Map.empty\n                          forDestination = []\n                          forDescription = \"\"\n                          forText        = \"\"\n                          forExpression  = ExiStet\n                          forType        = ForBase\n                          forOrder       = \"\"\n                      }\n                let [< Inline >] inline forId      f         = f.forId\n                let                     conso      frm       = { frm with forType  = ForConsolidated }\n                let                     setText    txt  frm  = { frm with forText  = txt             }\n                let                     setOrder   ord  frm  = { frm with forOrder = ord             }\n                let getDimDest dim frm = \n                    frm.forDestination \n                    |> swap Seq.tryPick <| fun er -> if ElmReference.dimId er = dim.dimId then Some er else None\n                \n        \n            module Rule =\n                let [< Inline >] inline newRule0     dest exp typ order =\n                      {\n                          rulId          = RulId <| Guid.NewGuid()\n                          rulDestination = dest\n                          rulDescription = \"\"\n                          rulExpression  = exp\n                          rulType        = typ\n                          rulOrder       = order\n                          rulSourceId    = None\n                          rulXml         = \"\"\n                      }\n                let [< Inline >] inline newRule     dest exp typ order = newRule0     dest (toExpA exp) typ order\n                let [< Inline >] inline newRuleDest dest exp typ = newRule (dest.sliDims |> Map.toList |> List.map snd) exp typ\n                let New() = newRule0 [] ExiStet ForBase \"\"\n                let conso rul = { rul with rulType = ForConsolidated }    \n            \n            module Attribute =\n                let New() = \n                    {\n                        attId            = AttId <| Guid.NewGuid()\n                        attName          = \"\"\n                        attTableNum      = 1\n                        attType          = AtString\n                    }\n            \n    //#cd @\"..\\projects\\RuleEditor\\src\"\n    //#define WEBSHARPER\n    [< JavaScript >]\n    module RuleEditor =\n        //#r \"..\\..\\LayoutEngine\\bin\\LayoutEngine.dll\"\n        //#nowarn \"1178\" \"1182\" \"3180\" \"52\"\n        \n        [< AutoOpen >]\n        module Templating =\n            open WebSharper.UI.Templating\n            let [< Literal >] rootdir = @\"..\\website\"\n        \n            let [< Literal >] TemplatesFileName = rootdir + @\"\\Templates.html\"\n            type TemplateLib  = Template< TemplatesFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n            \n            if IsClient then printfn \"%s\" TemplatesFileName\n         \n        module Tree =\n            open CalculationModel.CalculationModel\n            open TreeEff\n        //    open FusionM\n            open Operators\n        \n            type TreeNodeId = TreeNodeId of System.Guid\n        \n            type Weight =\n            | Zero\n            | Add\n            | Subtract\n        \n            type TreeNode = {\n                nid      : TreeNodeId\n                expanded : bool\n                element  : NodeId\n                children : TreeNode []\n                weight   : Weight\n            } \n        \n            type TreeCollection = {\n                getParentO  :                 TreeNodeId -> TreeNode option\n                getNode     :                 TreeNodeId -> TreeNode\n                getPath     :                 TreeNodeId -> TreeNodeId list\n                setChildren : TreeNode seq -> TreeNodeId -> TreeNode\n            }\n        \n            let getParentOEf  nid    = Reader.ask() |>> fun treeC -> treeC.getParentO     nid\n            let getNodeEf     nid    = Reader.ask() |>> fun treeC -> treeC.getNode        nid\n            let getPathEf     nid    = Reader.ask() |>> fun treeC -> treeC.getPath        nid\n            let setChildrenEf nid ch = Reader.ask() |>> fun treeC -> treeC.setChildren ch nid\n        \n        //        static member FromNode (n:Tree.Node<_>) = n :?> TreeNode\n        //        interface Tree.Node<TreeNodeId> with\n        //            member node.Id                 = node.nid\n        //            member node.isExpanded         = node.expanded\n        //            member node.canHaveChildren    = match node.element with | Calc _ -> false | _ -> true\n        //            member node.path               =   \n        //                let rec getPath nid = parents |> Dict.tryGetValue nid |> Option.map Tree.toNode |> Option.map (fun n -> n.Id :: n.path) |> Option.defaultValue []\n        //                getPath node.nid\n        //            member node.children           =   node     .children   |> Tree.toSeqNode\n        //            member node.newChildren     ch = { node with children = ch \n        //                                                                    |> Seq.map   (fun n -> n :?> TreeNode    ) \n        //                                                                    |> Seq.filter(fun n -> \n        //                                                                        parents \n        //                                                                        |> Dict.tryGetValue n.nid \n        //                                                                        |> Option.map (fun v -> \n        //                                                                            if v :?> TreeNode <> node then \n        //                                                                                parents.Remove n.nid |> ignore\n        //                                                                                parents.Add(n.nid, node)\n        //                                                                        )\n        //                                                                        |> Option.defaultWith(fun () ->\n        //                                                                            parents.Add(n.nid, node)\n        //                                                                        )\n        //                                                                        true)\n        //                                                                    |> Seq.toArray } |> Tree.toNode\n        //            member node.parent          ns = parents |> Dict.tryGetValue node.nid |> Option.map Tree.toNode\n        \n        module TreeNode =\n            open Tree\n            open TreeEff\n            open CalculationModel.CalculationModel\n        \n            let fromNode    n  = n.getData()\n            let rec treenode (node:TreeNode) =\n                {\n                    id                 = fun () -> node.nid\n                    getData            = fun () -> node\n                    isExpandedEf       = fun () -> rtn <| node.expanded\n                    canHaveChildrenEf  = fun () -> rtn <| match node.element with | Calc _ -> false | _ -> true\n                    childrenEf         = fun () -> node.children |> Seq.map treenode |> rtn \n                    newChildrenEf      = fun ch -> node |> treenode |> rtn// ch |> Seq.map fromNode |> setChildrenEf node.nid |>> treenode      \n                    parentOEf          = fun _ns-> getParentOEf                            node.nid |>> Option.map treenode\n                    pathEf             = fun () -> getPathEf                               node.nid\n                }\n        \n            let fromSeqNode ns = ns |> Seq.map fromNode \n        \n            let newTreeNode ch = {\n                nid      = TreeNodeId <| System.Guid.NewGuid()\n                expanded = true\n                children = [||]\n                element  = ch\n                weight   = Add\n            }\n            let newNodeCalc cid = newTreeNode <| Calc cid\n            let newNodeTot  tid = newTreeNode <| Tot  tid\n            let removeNodesEf    p   (nodes: TreeNode seq) = nodes |> Seq.map treenode |> TreeEff.removeNodes (fromNode >> p) |>> fromSeqNode\n            let getElement n = n.element\n            let getTId = function | Tot  tid -> Some tid | _ -> None\n            let getCId = function | Calc cid -> Some cid | _ -> None\n            let forTId p = getElement >> getTId >> (Option.map p ) >> Option.defaultValue false\n            let forCId p = getElement >> getCId >> (Option.map p ) >> Option.defaultValue false\n        \n            let tryFindTreeNodeEf  p   (nodes: TreeNode seq) = nodes |> Seq.map treenode |> TreeEff.tryFind     (fromNode >> p) |>> Option.map fromNode\n            let tryFindNodeEf      nid (nodes: TreeNode seq) = nodes |> tryFindTreeNodeEf (fun n -> n.nid = nid)\n            let tryFindSelNodeEf   sel (nodes: TreeNode seq) = sel   |> Option.map fst     |> Option.map (swap tryFindNodeEf nodes) |> insertO |>> Option.bind id\n            let tryFindSelChildEf  sel (nodes: TreeNode seq) = nodes |> tryFindSelNodeEf sel |>> Option.map getElement\n            let tryFindNodeTIdEf   tid (nodes: TreeNode seq) = nodes |> tryFindTreeNodeEf (forTId ((=) tid) )\n            let tryFindNodeCIdEf   cid (nodes: TreeNode seq) = nodes |> tryFindTreeNodeEf (forCId ((=) cid) )    \n        \n        module Monaco =\n            open Monaco\n            type HoverProvider(ed:Editor) =\n                do()\n               with\n                  member __.provideHover(model:Model, pos:Position, token:obj) =\n                      let word = model.GetWordAtPosition pos\n                      if isUndefined word then box null |> unbox else\n                      {\n                          contents = { value = word?word |> sprintf \"The word is: %s\" ; isTrusted = true } |> Array.singleton\n                          range    = {\n                                        startLineNumber = pos.lineNumber\n                                        endLineNumber   = pos.lineNumber\n                                        startColumn     = word.startColumn\n                                        endColumn       = word.endColumn\n                                     }\n                      }\n        \n            type CompletionItemProvider(ed:Editor) =\n                do()\n               with\n                  member __.provideCompletionItems(model:Model, pos:Position, token:obj, context: obj): CompletionItem[] =\n                      let word = model.GetWordAtPosition pos\n                      if isUndefined word then box null |> unbox else\n                      [|\n                        { kind = CompletionItemKind.Function ; label = \"Hello\"   ; detail = \"\"}\n                        { kind = CompletionItemKind.Function ; label = \"How\"     ; detail = \"\"}\n                        { kind = CompletionItemKind.Function ; label = \"Are\"     ; detail = \"\"}\n                        { kind = CompletionItemKind.Function ; label = \"You\"     ; detail = \"\"}\n                        { kind = CompletionItemKind.Function ; label = word?word ; detail = \"\"}\n        \n                      |]\n                  member __.resolveCompletionItem(item: CompletionItem, token: obj): CompletionItem = { item with detail = \"more details\" }\n            type DefinitionProvider(ed:Editor) =\n                do()\n               with\n                  member __.provideDefinition(model: Model, pos: Position, token: obj): Location =\n                      let word = model.GetWordAtPosition pos\n                      if isUndefined word then box null |> unbox else\n                      let ms = model.FindMatches(word.word, false, false, true, \" <>()+-=.,/#@$%^&*\\\"\", false, 1)\n                      if ms.Length = 0    then box null |> unbox else\n                      { range = ms.[0].range\n                        uri = model.uri\n                      }\n        \n            let annotationsV = Var.Create \"Err (1, 7) - (1, 12): \\\"This shows over there as an error\\\".\\nWarn (2, 7) - (2, 12): \\\"This shows over there as a warning\\\".\\nInfo (3, 7) - (3, 12): \\\"This shows over there as information\\\".\\nHint (4, 7) - (4, 12): \\\"This shows over there as a hint\\\".\"\n            let transformAnnotations msgs =\n                let rex  = \"\"\"(Err|Warn|Info|Hint) \\((\\d+)\\,\\s*(\\d+)\\) - \\((\\d+)\\,\\s*(\\d+)\\)\\: \"([^\"]+?)\"\\.\"\"\" //\"\n                match msgs with\n                | REGEX rex \"g\" m -> m\n                | _               -> [||]\n                |> Array.choose (fun v ->\n                    match v with\n                    | REGEX rex \"\" [| _ ; ty ; fl;     fc;     tl;     tc; msg |] \n                             -> Some (ty, int fl, int fc, int tl, int tc, msg)\n                    | _      -> None\n                )\n                |> Array.map (fun (ty, fl, fc, tl, tc, msg) ->\n                        { message  = msg\n                          severity = match ty with \"Err\" -> MarkerSeverity.Error | \"Warn\" -> MarkerSeverity.Warning  | \"Hint\" -> MarkerSeverity.Hint |_-> MarkerSeverity.Info\n                          startColumn     = fc\n                          endColumn       = tc\n                          startLineNumber = fl\n                          endLineNumber   = tl\n                        }\n                  )        \n                    \n                \n            let monacoNew        (var           : Var<string>                         ) \n                                 (annotationsWO : View<MarkerData []>           option) \n                                 (showToolTipO  :(string -> int -> int -> unit) option) \n                                 (getHintsO     :(((string * string * string) [] -> int * int -> int * int -> unit) \n                                               -> string -> int -> int -> unit) option) =\n            \n                let setDirtyCond() = ()\n                let getHints    _  = ()\n                                    \n                Monaco.newVar var\n                |> onRender(fun ed -> \n                    Editor.SetModelLanguage(ed.GetModel(), \"fsharp\")\n                    Editor.SetTheme(\"vs-dark\")\n                    let hp = new HoverProvider         (ed)\n                    let cp = new CompletionItemProvider(ed)\n                    let dp = new DefinitionProvider    (ed)\n                    hp.provideHover |> print\n                    cp.provideCompletionItems |> print\n                    cp.resolveCompletionItem  |> print\n                    dp.provideDefinition      |> print\n                    Editor.RegisterHoverProvider         (\"fsharp\", hp ) |> ignore\n                    Editor.RegisterCompletionItemProvider(\"fsharp\", cp ) |> ignore\n                    Editor.RegisterDefinitionProvider    (\"fsharp\", dp ) |> ignore\n                    annotationsWO\n                    |> Option.iter( View.Sink (fun ms -> Editor.SetModelMarkers(ed.GetModel(), \"annotations\", ms)) \n                    )\n                )\n        //#r @\"Compiled\\CalculationModelDll\\CalculationModelDll.dll\"\n        open CalculationModel.CalculationModel\n        \n        type Selection  = (Tree.TreeNodeId * (ForId option)) option\n        \n        type Version = {\n            major     : int\n            minor     : int\n            majorDate : string\n            minorDate : string\n        }\n        \n        module Version =\n            let New() = {\n                major     = 0\n                minor     = 0\n                majorDate = \"\"\n                minorDate = \"\"\n            }\n            let incrementMinor v = { v with minor = v.minor + 1; minorDate = nowStamp() }\n            let incrementMajor v = {        major = v.major + 1; majorDate = nowStamp()\n                                            minor = 0          ; minorDate = nowStamp() }\n        \n        type ModelUI = {\n            treeHierarchy : Var<Tree.TreeNode []>\n            calculations  : ListModel<CalId        , Calculation>\n            totals        : ListModel<TotId        , Total      >\n            dimensions    : ListModel<DimId        , Dimension  >\n            cubes         : ListModel<CubId        , Cube       >\n            globalDefs    : Var<string>\n            server        : Var<string>\n            selection     : Var<Selection>\n            selectedDim   : Var<DimId option>\n            selectedCube  : Var<CubId option>\n            collapsed     : ListModel<TotId * TotId list, TotId * TotId list>\n            cubePrefix    : Var<string>\n            measurePrefix : Var<string>\n            outputMsgs    : Var<string>\n            codeFS        : Var<string>\n            parserMsgs    : Var<string>\n            fileName      : Var<string>\n            version       : Var<Version>\n        }\n        \n        type MsgModel =\n        | AddTotal\n        | SelectTotal       of TotId\n        | RemoveTotal       of TotId\n        | AddCalculation\n        | RemoveCube        of CubId\n        | RenameCube        of CubId * string\n        | AddCube           of         string * Set<DimId>\n        | RemoveCalculation of CalId\n        | SelectCalculation of CalId\n        | AddFormula        of CalId\n        | RemoveFormula     of ForId\n        | SelectFormula     of ForId\n        | SelectFormNode    of ForId * Tree.TreeNodeId\n        | SelectNode        of         Tree.TreeNodeId\n        | ExpandNode        of bool  * Tree.TreeNodeId\n        | IndentNode        of bool  * Tree.TreeNodeId\n        | MoveNode          of bool  * Tree.TreeNodeId * Tree.TreeNodeId\n        | AddDimension\n        | RemoveDimension   of DimId\n        | SelectDimension   of DimId\n        | AddFormDim        of ForId * DimId * string\n        | RemoveFormDim     of ForId * DimId\n        | RemoveCalcDim     of CalId * DimId\n        | AddCalcDim        of CalId * DimId\n        | RemoveForDest     of CalId * ForId * DimId \n        | SetForDest        of CalId * ForId * DimId * string\n        | SaveTextFile      of string\n        | LoadTextFile      of string\n        | NoOp\n        \n        module ModelUI =\n            let isNodeSelected    nid (sel:Selection) = sel |> Option.map (fst >> ((=) nid) ) |> Option.defaultValue false\n            let selectedString txt (selectedV:View<bool>) = V(if selectedV.V then txt else \"\") \n            \n            let nonTotal        = { Total      .New()                with totId = TotId System.Guid.Empty }\n            let nonCalculation  = { Calculation.New()                with calId = CalId System.Guid.Empty } \n            let nonFormula      = { Formula    .New()                with forId = ForId System.Guid.Empty }\n            //let nonDestination  = newDestination nonFormula.id (DimId System.Guid.Empty)\n            \n            let nonTotalV       = Var.Create nonFormula     |> Var.Lens <| id <| (fun v _ -> v)\n            let nonCalculationV = Var.Create nonCalculation |> Var.Lens <| id <| (fun v _ -> v)\n            let nonFormulaV     = Var.Create nonFormula     |> Var.Lens <| id <| (fun v _ -> v)\n            \n            let isNodeFormSelected fid nid (sel:Selection) = sel = Some(nid, Some fid)\n        \n            let refreshView, refreshNow =\n                let refresh = Var.Create ()\n                refresh.View, fun () -> refresh.Value <- ()\n            let setHierarchy model (nodes: Tree.TreeNode seq) =\n                //nodes |> Seq.iter (fun n -> parents.Remove n.nid |> ignore)\n                nodes\n                |> Seq.toArray\n                |> model.treeHierarchy.Set\n        \n            let [<Inline>] inline mapIds f vls = vls |> View.Map (Seq.map f >> Seq.toArray) |> View.consistent\n        \n            let getDimsCubeO cubes = cubes\n        \n        \n            \n        [< AutoOpen >]\n        module Global =\n            let model = {\n                treeHierarchy = Var.Create [||]\n                calculations  = ListModel.Create (fun v -> v.calId) [||]\n                totals        = ListModel.Create (fun v -> v.totId) [||]\n                dimensions    = ListModel.Create (fun v -> v.dimId) [||]\n                cubes         = ListModel.Create (fun v -> v.cubId) [||]\n                globalDefs    = Var.Create \"\"\n                server        = Var.Create \"\"\n                selection     = Var.Create None\n                selectedDim   = Var.Create None\n                selectedCube  = Var.Create None\n                collapsed     = ListModel.Create id [||]\n                cubePrefix    = Var.Create \"Z\"\n                measurePrefix = Var.Create \"M\"\n                outputMsgs    = Var.Create \"\"\n                codeFS        = Var.Create \"\"\n                parserMsgs    = Var.Create \"\"\n                fileName      = Var.Create \"NewFile.json\"\n                version       = Var.Create <| Version.New()\n            }\n            \n            let mutable processor = fun (msg:MsgModel) -> ()\n            \n            let appendText (var:Var<string>) msg = \n                match var.Value, msg with\n                | \"\", m \n                | m , \"\" -> m\n                | v , m  -> v + \"\\n\" + m\n                |> var.Set\n                \n            let inline appendMsgs   msg = appendText model.outputMsgs msg\n            let inline appendParser msg = appendText model.parserMsgs msg\n        \n        module Render =\n            let scrollIntoView selW (e:Dom.Element) = selW |> View.Sink (fun s -> if s then e?scrollIntoViewIfNeeded())\n        \n            //let selTotIdOV = model.treeHierarchy.View |> View.Map2 TreeNode.tryFindSelChild model.selection.View |> View.Map (Option.bind TreeNode.getTId)\n            //let selCalIdOV = model.treeHierarchy.View |> View.Map2 TreeNode.tryFindSelChild model.selection.View |> View.Map (Option.bind TreeNode.getCId)\n            //let selForIdOV =                                                                model.selection.View |> View.Map2 (Option.bind snd            )\n          \n            //let lensForm getF view (calcV:Var<Calculation>) = \n            //    calcV |> Var.lensView\n            //               (fun c   -> c.calFormulas |> Seq.tryFind      getF |> Option.defaultValue ModelUI.nonFormula)\n            //               (fun c y -> c.calFormulas |> Seq.tryFindIndex getF |> Option.map (fun i -> { c with calFormulas = Array.replace i y c.calFormulas } )\n            //                                                                  |> Option.defaultValue c)\n            //               view\n          \n            let mapDefW def = View.Map (Option.defaultValue def) \n          \n            let zx = {\n                Tree.nid      = System.Guid.Empty |> Tree.TreeNodeId\n                Tree.expanded = false\n                Tree.element  = System.Guid.Empty |> CalId |> Calc // NodeId\n                Tree.children = [||] // TreeNode []\n                Tree.weight   =  Tree.Add        \n            }\n        \n            let getTreeEffReaderResource() = {\n                Tree.getParentO  = fun _   -> Hole.Incomplete \"Tree.getParentO \" //                    TreeNodeId -> TreeNode option\n                Tree.getNode     = fun _   -> Hole.Incomplete \"Tree.getNode    \" //                    TreeNodeId -> TreeNode\n                Tree.getPath     = fun _   -> Hole.Incomplete \"Tree.getPath    \" //                    TreeNodeId -> TreeNodeId list\n                Tree.setChildren = fun _ i -> Hole.Incomplete \"Tree.setChildren\" //    TreeNode seq -> TreeNodeId -> TreeNode\n            }\n        \n            type EffReader<'read> = inherit Reader.Reader<'read>\n        \n            let runEff     Ef = Ef |> Reader.readerHandler (getTreeEffReaderResource()) |> (Eff.run : (Eff<EffReader<_>,_> -> _) )\n            let iterEff  f m  = m |> map (f: 'a -> unit) |> runEff |> fun vR -> vR \n        \n            let tryFindNode nid = TreeNode.tryFindNodeEf nid\n        \n            let currentCalcOW = View.Do {\n                let! nodes = model.treeHierarchy.View\n                let! selO  = model.selection    .View\n                let! calcs = model.calculations .View\n                return\n                    nodes \n                    |> TreeNode.tryFindSelNodeEf selO\n                    |> runEff \n                    |> Option.bind (fun node -> match node.element with Calc cid -> Some cid |_-> None)\n                    |> Option.bind (fun cid  -> calcs |> Seq.tryFind (fun c -> c.calId = cid))\n            }\n            let setCurrentCalc v = \n                async {\n                    let! currCalcO = currentCalcOW |> View.GetAsync \n                    if   currCalcO.IsNone then () else\n                    model.calculations.Add v\n                } |> Async.Start\n            let currentCalcV  = Var.Make (mapDefW ModelUI.nonCalculation currentCalcOW ) setCurrentCalc\n            \n            //let currentCalcV  = ListModel.currentLens ModelUI.nonCalculation selCalIdOV model.calculations\n            //let currentFormV  = currentCalcV |> lensForm (fun f -> match model.selection.Value with Some(_, Some fid) -> fid = f.forId |_-> false) model.selection.View\n          \n            let lensForm (calcV:Var<Calculation>) getFidO =\n                if not IsClient then ModelUI.nonFormulaV else\n                let calcFormsV = Lens calcV.V.calFormulas\n                let formOW = View.Do {\n                    let! calc = calcV.View\n                    return\n                        getFidO()\n                        |> Option.bind (fun fid -> \n                            if calc.calId = ModelUI.nonCalculation.calId then None else \n                            calc.calFormulas |> Seq.tryFind (fun f -> f.forId = fid) )\n                }\n                let setForm v = \n                    async {\n                        let! formO = formOW |> View.GetAsync \n                        if   formO.IsNone then () else\n                        calcFormsV.Value \n                        |> Seq.tryFindIndex (fun f -> f.forId = v.forId)\n                        |> Option.iter(fun i -> calcFormsV.Value <- calcFormsV.Value |> Array.replace i v)\n                    } |> Async.Start\n                Var.Make (mapDefW ModelUI.nonFormula formOW) setForm\n            let currentFormV = lensForm currentCalcV (fun () -> model.selection.Value |> Option.bind snd)\n            \n            let calcTypeV (calcV:Var<Calculation>) = (Lens calcV.V.isInput).Lens (function true->\"Input\" |_->\"Calc\") (fun _ s -> match s with |\"Calc\" -> false | _ -> true) \n            let formTypeV (formV:Var<Formula    >) = (Lens formV.V.forType).Lens (fun t -> (sprintf \"%A\" t).[3..]  ) (fun _ s -> match s with |\"Base\" -> ForBase |\"Consolidated\" -> ForConsolidated | _ -> ForAll  ) \n            \n            let dtypes =   [ \n              DtDataType\n              DtTime\n              DtVersion\n              DtOther    ] \n          \n        \n            \n        module DragDrop =\n        \n            type DragInfo = \n                | DragNone\n                | DragNode of Tree.TreeNodeId\n                | DragForm of CalId * Formula\n            \n            let mutable drag        = DragNone\n            let setDragNone ()      = drag <- DragNone\n            let setDragNode tnid    = drag <- DragNode tnid\n            let setDragForm cid frm = drag <- DragForm(cid, frm)\n            \n            let getDragFormO cid fid = match drag with DragForm (dcid, dfor) when fid  <> dfor.forId && dcid = cid -> Some dfor | _ -> None\n            let getDragNIdO  tnId    = match drag with DragNode  dnid        when dnid <>       tnId               -> Some dnid | _ -> None\n            let isDragForm   cid fid = getDragFormO cid fid |> function None -> false | _ -> true\n            \n            let [< Inline >] inline moveItem dropId elems getId item =\n                elems\n                |> Seq.filter (getId >> ((<>) (getId item)) )\n                |> Seq.toArray\n                |> (fun s -> let fst, snd =  s |> Array.splitAt (s |> Array.findIndex (getId >> ((=) dropId)) )\n                             [fst ; [| item |] ; snd])\n                |> Seq.collect id\n                |> Seq.toArray\n            \n            let [< Inline >] inline value (x: ^T)   = (^T : (member Value : #seq<'U>        )  x    )\n            let [< Inline >] inline set   (x: ^T) v = (^T : (member Set   : #seq<'U> -> unit) (x, v))\n            \n            let [< Inline >] inline moveItemInListModel dropId lm getId itemO = itemO |> Option.iter( moveItem dropId (value lm) getId >> (set lm) )\n            \n        module TableDimensions =\n            open Templating\n        \n            let dtypes =   [ \n                DtDataType\n                DtTime\n                DtVersion\n                DtOther    ] \n        \n            let tableDimensions () =\n                TemplateLib.DimensionTable()\n                    .TBody(\n                        model.dimensions |> ListModel.docLensMapView (Dimension.filterSort dtypes) (fun did dimV ->\n                            //let selDimW = V (model.selectedDim.V = Some did)\n                            TemplateLib.DimensionRow()\n                                .Name(          Lens dimV.V.dimName       )\n                                .Abbreviation(  Lens dimV.V.dimPrefix     )\n                                .Order(         Lens dimV.V.dimOrder      )\n                                .Type(         (Lens dimV.V.dimType       ).Lens (sprintf \"%A\" >> fun s -> s.[2..]) (fun _ s -> match s with |\"DataType\" -> DtDataType |\"Time\" -> DtTime |\"Version\" -> DtVersion | _ -> DtOther) )\n                                .ExcludeName(   Lens dimV.V.dimExclude    )\n                                .IncludeFreeze( Lens dimV.V.dimFreeze     )\n                                .Remove(        fun _ -> RemoveDimension did |> processor )\n                                .Select(        fun _ -> SelectDimension did |> processor )\n                                .Doc()        \n                        )\n                    )\n                    .Doc()\n        module TableCalculations =\n            let rowFormula (tnId:Tree.TreeNodeId) (calcV : Var<Calculation>) fid =\n                let cid      = calcV.Value.calId\n                let formsV   =        Lens     calcV.V.calFormulas\n                let formV    = Render.lensForm calcV (fun () -> Some fid) \n                let selFormW = V (ModelUI.isNodeFormSelected fid tnId model.selection.V)\n                let formForW = V (formV.V.forDestDecl \n                                  |> Seq.map(fun f -> \n                                      sprintf \"%s:%s\" \n                                          (model.dimensions.View.V \n                                           |> Seq.tryFind(fun d -> d.dimId = f.Key) \n                                           |> function Some dim -> dim.dimName |_-> \"\") \n                                          f.Value) \n                                  |> String.concat \", \")\n                TemplateLib.FormulaRow()\n                    .SelectedMark( ModelUI.selectedString \">\"        selFormW )\n                    .Selected(     ModelUI.selectedString \"selected\" selFormW )\n                    .FormulaFor(   formForW                                   )\n                    .Formula(      Lens formV.V.forText                       )\n                    .FormType(     Render.formTypeV formV                     )\n                    .Remove(       fun _  -> RemoveFormula  fid        |> processor                               )\n                    .Select(       fun _  -> SelectFormNode(fid, tnId) |> processor                               )\n                    .Drag(         fun ev ->    DragDrop.setDragForm cid formV.Value ; ev.Event.StopPropagation() )\n                    .DragOver(     fun ev -> if DragDrop .isDragForm cid fid then      ev.Event.PreventDefault () )\n                    .Drop(         fun ev -> do                                        ev.Event.PreventDefault ()\n                                             DragDrop.getDragFormO cid fid |> DragDrop.moveItemInListModel fid formsV Formula.forId )\n                    .AfterRender(  Render.scrollIntoView selFormW )\n                    .Doc()\n                    \n            let rowTreeNode (tnId:Tree.TreeNodeId, nid:NodeId, level:int) =\n                let depth             = sprintf \"%dem\" level\n                let isSelW            = V (ModelUI.isNodeSelected tnId model.selection.V)\n                let rowCalculation (calcV:Var<Calculation>) cid       =\n                    let formsDoc      = V (calcV.V |> fun c -> c.calFormulas |> Seq.map Formula.forId) |> Doc.BindSeqCached (rowFormula tnId calcV)\n                    TemplateLib.CalculationRow()\n                        .SelectedMark( \"\" )\n                        .Selected(     ModelUI.selectedString \"selected\" isSelW )\n                        .Indent(       depth                            )\n                        .CalcName(     Lens calcV.V.calName   )\n                        .Format(       Lens calcV.V.format    )\n                        .IsText(       Lens calcV.V.isText    )\n                        .IsBalance(    Lens calcV.V.isBalance )\n                        .OrderCalc(    Lens calcV.V.calOrder  )\n                        .CalcType(     Render.calcTypeV calcV )\n                        .Remove(       fun _ -> RemoveCalculation cid |> processor        )\n                        .Select(       fun _ -> isSelW |> View.Get (fun s -> if not s then SelectNode tnId |> processor)  )\n                        .Formulas(     formsDoc )\n                        .Drag(         fun ev ->     DragDrop.setDragNode tnId            ; ev.Event.StopPropagation() )\n                        .DragOver(     fun ev -> if (DragDrop.getDragNIdO tnId).IsSome then ev.Event.PreventDefault () )\n                        .Drop(         fun ev -> do                                         ev.Event.PreventDefault () \n                                                 DragDrop.getDragNIdO tnId |> Option.iter(fun fr -> MoveNode(true, fr, tnId) |> processor ) )\n                        .AfterRender(  Render.scrollIntoView isSelW )\n                        .Doc()\n                 \n                let rowTotal (totV:Var<Total>) tid =\n                    let totV         = model.totals |> ListModel.lensDef ModelUI.nonTotal tid\n                    let nodeW        = V (TreeNode.tryFindNodeEf tnId model.treeHierarchy.V |> Render.runEff )\n                    let markW        = V (nodeW.V |> Option.map (fun node -> if node.expanded then \"-\" else \"+\") |> Option.defaultValue \"*\")\n                    TemplateLib.TotalRow()\n                        .SelectedMark( markW                                           )\n                        .Selected(     ModelUI.selectedString \"selected\" isSelW        )\n                        .Indent(       depth                                           )\n                        .TotName(      Lens totV.V.totName                             )\n                        .Format(       Lens totV.V.totFormat                           )\n                        .OrderTot(     Lens totV.V.totOrder                            )\n                        .Remove(       fun _ -> RemoveTotal tid           |> processor )\n                        .Select(       fun _ -> SelectNode  tnId          |> processor )\n                        .Collapse(     fun _ -> nodeW |> View.Get (Option.iter (fun node -> (not node.expanded, node.nid) |> ExpandNode |> processor)) )\n                        .Drag(         fun ev ->     DragDrop.setDragNode tnId            ; ev.Event.StopPropagation() )\n                        .DragOver(     fun ev -> if (DragDrop.getDragNIdO tnId).IsSome then ev.Event.PreventDefault () )\n                        .Drop(         fun ev -> do                                         ev.Event.PreventDefault () \n                                                 DragDrop.getDragNIdO tnId |> Option.iter(fun fr -> MoveNode(true, fr, tnId) |> processor ) )\n                        .AfterRender(  Render.scrollIntoView isSelW )\n                        .Doc()\n            \n                match  nid with\n                | Calc cid -> rowCalculation (model.calculations |> ListModel.lensDef ModelUI.nonCalculation cid) cid\n                | Tot  tid -> rowTotal       (model.totals       |> ListModel.lensDef ModelUI.nonTotal       tid) tid\n                \n            let tableCalculations() =\n                TemplateLib.CalculationTable()\n                    .TBody( \n                        V (model.treeHierarchy.V\n                           |> Seq.map TreeNode.treenode\n                           |> TreeEff.listNodes 0 \n                           |> Render.runEff\n                           |> (Seq.map (fun (tn,l) -> tn.id(), (TreeNode.fromNode tn).element, l) ) \n                        )\n                        |> Doc.BindSeqCached rowTreeNode\n                     )\n                    .Doc()\n            \n        let globalDefs () =\n            //let getAnnot = V (Monaco.filterGlobal model.parserMsgs.V) |> View.consistent\n            \n            Monaco.monacoNew\n                <| model.globalDefs \n                <| None //Some getAnnot\n                <| None //Some (ParseFS.showToolTips FSCode.InGlobalDefs)\n                <| None //Some (ParseFS.getHints     FSCode.InGlobalDefs)\n        \n            |> Monaco.render\n        \n        module MainProgram =\n            open FusionAsyncM\n            open Operators\n            open Templating\n        \n            open FsRoot\n            module AF = AppFramework \n        \n            let RuleEditorLyt = \"RuleEditorLyt\"\n        \n            let scrollToBottom (e:Dom.Element) (_:obj) = \n                async { \n                    do! Async.Sleep 100\n                    do  e.ScrollTop <- e.ScrollHeight\n                } |> Async.Start\n        \n        //    let mainLayout() =\n        //        TemplateLib.Layout()\n        //            .CalculationTable( tableCalculations()                  )\n        //            .FormulaDetail(    details          ()                  )\n        //            .DimsSelected(     dimsSelected     ()                  )\n        //            .DimensionTable(   tableDimensions  ()                  )\n        //            .GlobalText(       globalDefs       ()                  )\n        //            .Server(           model.server                         )\n        //            .Output(           model.outputMsgs                     )\n        //            .FSCode(           model.codeFS                         )\n        //            .Parser(           model.parserMsgs                     )\n        //            .Filename(         model.fileName                       )\n        //            .AddCalculation(   fun _ -> AddCalculation |> processor )\n        //            .AddTotal(         fun _ -> AddTotal       |> processor )\n        //            .NewDimension(     fun _ -> AddDimension   |> processor )\n        //            .SaveAs(           fun _ -> SaveLoad.saveAsFile()       )\n        //            .LoadFileChanged(  fun e -> SaveLoad.loadFile e.Target  )\n        //            .LoadFileClear(    fun e -> e.Target?value <- \"\"        )\n        //            .UpdateRules(      fun _ -> UpdateAlea.updateModel()    )        \n        //            .IndentIn(         fun _ -> model.selection.Value |> Option.map fst |> Option.iter (fun nid -> IndentNode(true , nid) |> processor) )\n        //            .IndentOut(        fun _ -> model.selection.Value |> Option.map fst |> Option.iter (fun nid -> IndentNode(false, nid) |> processor) )\n        //        //    .Reorder(          fun _ -> reorder()                                    )\n        //            .JumpRef(ParseFS.jumpToRef)\n        //            .OutputAfterRender(fun e -> model.outputMsgs.View |> View.Sink (scrollToBottom e))\n        //            .Doc()\n        \n            [< WebSharper.Sitelets.Website >]    \n            let mainProgram() =\n                AF.addPlugIn {\n                    AF.plgName    = \"RuleEditor\"\n                    AF.plgVars    = [| AF.newVar  \"fileName\"        model.fileName\n                                       //AF.newVar  \"SnippetName\"     (Lens Snippets.currentSnippetV.V.snpName)\n                                       //AF.newVar  \"Content\"         (Lens Snippets.currentSnippetV.V.snpContent)\n                                       //AF.newVar  \"Output\"          outputMsgs\n                                       AF.newVar  \"Server\"          model.server\n                                    |]  \n                    AF.plgViews   = [| //AF.newViw  \"FsCode\"          Snippets.FsCodeW\n                                       //AF.newViw  \"SaveNeeded\"      Snippets.SaveAsClassW\n                                       //AF.newViw  \"CurrentPath\"     Snippets.currentPathW\n                                    |]  \n                    AF.plgDocs    = [| //AF.newDoc  \"mainDoc\"         (lazy mainDoc()                 )\n                                       //AF.newDoc  \"editor\"          (lazy (WebSharper.UI.Html.div [] [ Monaco.getEditorConfigO() |> Option.map Monaco.render |> Option.defaultValue Doc.Empty ]) )\n                                       //AF.newDoc  \"Snippets\"        (lazy RenderSnippets  .render() )\n                                       //AF.newDoc  \"Properties\"      (lazy RenderProperties.render() )\n                                       //AF.newDoc  \"ButtonsRight\"    (lazy buttonsRight           () )\n                                       AF.newDoc  \"globalDefs\"      (lazy globalDefs() )\n                                       AF.newDoc  \"Dimensions\"      (lazy TableDimensions  .tableDimensions  () )\n                                       AF.newDoc  \"Calculations\"    (lazy TableCalculations.tableCalculations() )\n                                    |]  \n                    AF.plgActions = [| //AF.newAct  \"AddSnippet\"      Snippets.newSnippet\n                                       //AF.newAct  \"RemoveSnippet\"   deleteSnippet       \n                                       //AF.newAct  \"IndentIn\"        Snippets.indentIn       \n                                       //AF.newAct  \"IndentOut\"       Snippets.indentOut\n                                       //AF.newAct  \"AddProperty\"     RenderProperties.addProperty\n                                       //AF.newAct  \"RunFS\"           runFsCode\n                                       //AF.newAct  \"AbortFsi\"        FsiAgent.abortFsiExe\n                                       //AF.newAct  \"DisposeFsi\"      FsiAgent.disposeFsiExe\n                                       AF.newActF \"LoadFile\"        <| AF.FunAct1 ((fun o -> unbox o |> LoadTextFile |> processor  ), \"FileElement\")\n                                       AF.newActF  \"SaveAs\"          <| AF.FunAct1 ((fun o -> unbox o |> SaveTextFile |> processor  ), \"FileElement\")\n                                       //AF.newActF \"Import\"          <| AF.FunAct1 ((fun o -> unbox o |> Importer.importFile     ), \"FileElement\")\n                                       //AF.newActF \"JumpTo\"          <| AF.FunAct1 ((fun o -> unbox o |> JumpTo.jumpToRef        ), \"textarea\"   )\n                                       //AF.newActF \"ButtonClick\"     <| AF.FunAct1 ((fun o -> unbox o |> CustomAction.buttonClick), \"button\"     )\n                                       //AF.newActF \"ActionClick\"     <| AF.FunAct1 ((fun o -> unbox o |> CustomAction.actionClick), \"name\"       )\n                                       AF.newAct  \"AddDimension\"    (fun () -> AddDimension   |> processor)\n                                       AF.newAct  \"AddCalculation\"  (fun () -> AddCalculation |> processor)\n                                       AF.newAct  \"AddTotal\"        (fun () -> AddTotal       |> processor)\n                                       AF.newAct  \"AddDimension\"    (fun () -> AddDimension   |> processor)\n                                    |]\n                    AF.plgQueries = [|                                               \n                                    |]\n                }\n                match JS.Document.GetElementById(\"GlobalLayout\") with\n                | null ->\n                   \"\"\"\n                    menuEditor       horizontal  65       menuLogo                  editorMessages\n                    double           horizontal  0-50-100 AppFramework.AppFwkClient menuEditor\n                    menuLogo         vertical    350      logo                      menu\n                    logo             span       \"margin:0; color:gray; font-size: 55px; font-weight:530\" \"F# Station\"\n                    editorMessages   horizontal 10-83-100 editorButtons             messages\n                    messages         vertical   0-50-100  messagesLeft              messagesRight\n                    editorButtons    vertical -200 snippetsSnippet buttons\n                    buttons div      \"overflow: hidden; display: grid; grid-template-columns: 100%; grid-template-rows: repeat(15, calc(100% / 15)); bxackground-color: #eee; box-sizing: border-box; padding : 5px; grid-gap: 5px; margin-right: 21px\" btnSaveAs none x btnAddSnippet btnDeleteSnippet btnIndentIn btnIndentOut none x btnRunFS none x btnAbortFsi\n                    snippetsSnippet  vertical   0-20-100  snippets                  editorProperties\n                    snippets         horizontal 20        \"${FSharpStation.CurrentPath}\" FSharpStation.Snippets\n                    editorProperties vertical   0-100-100 snippet                   properties\n                    properties       div        \"\"        FSharpStation.Properties\n                    snippet          horizontal 35        Name                      FSharpStation.editor\n                    menu             span  \"\" btnLoad btnImport\n        \n                    btnSaveAs        button FSharpStation.SaveAs         \"class=btn ${FSharpStation.SaveNeeded}\" \"Save as...    \"\n                    btnAddDimension  button RuleEditor.AddDimension      \"\"                  \"Add Dimension \"\n                    btnDeleteSnippet button FSharpStation.RemoveSnippet  \"\"                  \"Delete Snippet\"\n                    btnIndentIn      button FSharpStation.IndentIn       \"\"                  \"Indent In  >> \"\n                    btnIndentOut     button FSharpStation.IndentOut      \"\"                  \"Indent Out << \"\n                    btnRunFS         button FSharpStation.RunFS          \"\"                  \"Run F#        \"\n                    btnAbortFsi      button FSharpStation.AbortFsi       \"\"                  \"Abort Fsi     \"\n        \n                    messagesLeft     wcomp-tabstrip                      \"\"                  Output FsCode\n                    messagesRight    wcomp-tabstrip                      \"\"                  Parser\n        \n                    Output           textarea  FSharpStation.Output      \"tabname=Output ; placeholder=Output messages ; spellcheck=false\" \n                    FsCode           textarea  FSharpStation.FsCode      \"tabname=F# Code; placeholder=F# Code         ; spellcheck=false\" \n                    Parser           textarea  FSharpStation.Parser      \"tabname=Parser ; placeholder=Parser messages; dblclick=${FSharpStation.JumpTo} ; spellcheck=false\" \n                    Name             Doc       InputLabel                \"\"     \"Name:\"        FSharpStation.SnippetName\n                    btnLoad          Doc       InputFile                 \"\"     \"Load File...\" FSharpStation.LoadFile  FileName\n                    btnImport        Doc       InputFile                 \"\"     \"Import...\"    FSharpStation.Import    \"\"\n                    FileName         div                                 \"class=form-control\"  FSharpStation.fileName\n                   \"\"\"\n                | e -> e.TextContent\n                |> LayoutEngine.newLyt RuleEditorLyt\n                |> LayoutEngine.addLayout\n        \n                None\n                |> Option.defaultValue RuleEditorLyt\n                |> AF.mainDocV.Set\n        \n                async {\n                  //do! Monaco.loader\n                  //WcSplitter.init horizontal vertical\n                  //WcTabStrip.init()\n                  //let editor = Monaco.getEditorConfigO() |> Option.map Monaco.render |> Option.defaultValue Doc.Empty\n                  return AF.getMainDoc.Value\n                } |> Doc.Async            \n                \n        module UpdateModelUI =\n                                            \n            let rec updateModelR model msg = \n                let doForCalc cid f       = model.calculations.TryFindByKey cid |> Option.iter f\n                let doForForm cid fid f   = doForCalc cid <| fun c -> c.calFormulas |> Seq.tryFind(fun f -> f.forId = fid) |> Option.iter (f c)\n                let doForCube cid f       = model.cubes       .TryFindByKey cid |> Option.iter f\n                let setSelection sel      = if model.selection.Value = sel then false else\n                                            model.selection.Value   <- sel\n                                            true\n                let tryFindCalcForm fid   = model.calculations.Value |> Seq.tryFind(fun calc -> calc.calFormulas |> Seq.exists (fun f -> f.forId = fid))\n                match msg with\n                | AddCalculation         -> let n = Calculation.New()\n                                            model.calculations.Add n\n                                            let nn = TreeNode.newNodeCalc n.calId\n                                            model.treeHierarchy.Value\n                                            |> Array.append [| nn |]\n                                            |> model.treeHierarchy.Set\n                                            SelectNode  nn.nid |> updateModelR model\n                | AddTotal               -> let n = Total.New()\n                                            model.totals.Add n\n                                            let nn = TreeNode.newNodeTot  n.totId\n                                            model.treeHierarchy.Value\n                                            |> Array.append [| nn |]\n                                            |> model.treeHierarchy.Set\n                                            SelectNode  nn.nid |> updateModelR model\n                | AddFormula         cid -> if  cid = ModelUI.nonCalculation.calId then false else\n                                            let n = Formula.New()\n                                            model.calculations.TryFindByKey cid\n                                            |> Option.iter(fun calc -> { calc with calFormulas = Array.append calc.calFormulas [| n |] } |> model.calculations.Add)\n                                            model.treeHierarchy.Value \n                                            |> TreeNode.tryFindSelNodeEf model.selection.Value\n                                            |> Render.runEff\n                                            |> Option.map (fun nn -> SelectFormNode (n.forId, nn.nid ) |> updateModelR model)\n                                            |> Option.defaultValue true\n                | AddDimension           -> let n = Dimension.New \"\"\n                                            model.dimensions.Add n\n                                            SelectDimension n.dimId |> updateModelR model\n            //    | AddFormDim(fid, did, s)-> model.destinations.Add   { idForm = fid ; idDim = did ; destination = s }\n            //                                true\n            ////    | AddChild(tid, ch, we)  -> model.totals.TryFindByKey tid |> Option.map( fun tot ->\n            ////                                    model.childrenRels.Value <- model.childrenRels.Value |> Map.add (tid, ch) we\n            ////                                    true\n            ////                                ) |> Option.defaultValue false\n            ////    | RemoveChild (tid, ch)  -> model.childrenRels.Value <- model.childrenRels.Value |> Map.remove (tid, ch)\n            ////                                true\n            //    | RemoveTotal        tid -> model.totals.RemoveByKey    tid\n            //                                setSelection None |> ignore\n            //                                model.treeHierarchy.Value \n            //                                |> TreeNode.removeNodes (TreeNode.forTId ((=) tid)) \n            //                                |> ModelUI.setHierarchy model\n            //                                true\n                | RemoveCalculation  cid -> setSelection None |> ignore\n                                            model.calculations.RemoveByKey cid\n                                            model.totals.Value\n                                            |> Seq.choose (fun t -> \n                                                let eq, ne = t.children |> Array.partition (fun (_, nid) -> nid = Calc cid )\n                                                if eq.Length = 0 then None else\n                                                Some { t with children = ne }\n                                            )\n                                            |> Seq.iter model.totals.Add\n                                            model.treeHierarchy.Value \n                                            |> TreeNode.removeNodesEf (TreeNode.forCId ((=) cid))\n                                            |> Render.runEff\n                                            |> ModelUI.setHierarchy model\n                                            true\n            //    | RemoveFormula      fid -> tryFindCalcForm fid\n            //                                |> Option.iter(fun calc -> { calc with calFormulas = calc.calFormulas |> Array.filter (fun f -> f.forId <> fid) } \n            //                                                           |> model.calculations.Add )\n            //                                true\n            //    | RemoveDimension    did -> model.dimensions.RemoveByKey did\n            //                                true\n            ////    | RemoveFormDim(fid, did)-> model.destinations.RemoveByKey(fid, did)\n            ////                                true\n            //    | SelectNode         nid -> (nid, None    ) |> Some |> setSelection\n            //    | ExpandNode    (ex, nid)-> let rec mapper finished (node:TreeNode) =\n            //                                    if finished             then node                       , true\n            //                                    elif node.nid = nid     then { node with expanded = ex }, true\n            //                                    else let ch, dn = node.children |> Seq.mapFold mapper false\n            //                                         { node with children = Seq.toArray ch }            , dn\n            //                                model.treeHierarchy.Value \n            //                                |> Seq.mapFold mapper false \n            //                                |> fst\n            //                                |> Seq.toArray\n            //                                |> model.treeHierarchy.Set\n            //                                true\n            //    | IndentNode   (iin, nid)-> let indent = if iin then Tree.indentNode else Tree.outdentNode\n            //                                model.treeHierarchy.Value\n            //                                |> TreeNode.tryFindNode nid\n            //                                |> Option.iter(\n            //                                   Tree.toNode \n            //                                   >> swap indent (Tree.toSeqNode model.treeHierarchy.Value) \n            //                                   >> TreeNode.fromSeqNode \n            //                                   >> ModelUI.setHierarchy model)\n            //                                true\n            //    | MoveNode(aft,fnid,tnid)-> Tree.moveToSibling2 aft fnid tnid (Tree.toSeqNode model.treeHierarchy.Value) \n            //                                |> TreeNode.fromSeqNode \n            //                                |> ModelUI.setHierarchy model\n            //                                true\n            //    | SelectFormNode(fid,nid)-> (nid, Some fid) |> Some |> setSelection\n            //    | SelectTotal        tid -> model.treeHierarchy.Value |> TreeNode.tryFindNodeTId tid  |> Option.map (fun n -> n.nid, None    ) |> setSelection\n            //    | SelectCalculation  cid -> model.treeHierarchy.Value |> TreeNode.tryFindNodeCId cid  |> Option.map (fun n -> n.nid, None    ) |> setSelection\n            //    | SelectFormula      fid -> tryFindCalcForm fid       |> Option.map(fun c -> c.calId) |> Option.bind(fun cid -> \n            //                                model.treeHierarchy.Value |> TreeNode.tryFindNodeCId cid) |> Option.map (fun n -> n.nid, Some fid) |> setSelection\n            //    | SelectDimension    did -> (if did = DimId System.Guid.Empty then None  else Some did)\n            //                                |> (fun s -> if s = model.selectedDim.Value then false else\n            //                                             model.selectedDim.Value    <- s\n            //                                             true)\n            //    | AddCalcDim   (cid, did)-> doForCalc cid <| fun c -> model.calculations.Add { c with calDims = c.calDims |> Set.add    did }\n            //                                false\n            //    | RemoveCalcDim(cid, did)-> doForCalc cid <| fun c -> model.calculations.Add { c with calDims = c.calDims |> Set.remove did }\n            //                                false\n            //    | AddCube      (n, ds)   -> model.cubes.Add <| Cube.newCubeCalc n (ds |> Seq.toArray) None\n            //                                false\n            //    | RemoveCube    cid      -> model.cubes.RemoveByKey cid\n            //                                false\n            //    | RenameCube   (cid, n)  -> doForCube cid <| fun c -> model.cubes.Add { c with cubName = n }\n            //                                false\n                  | _ -> printfn \"Msg not implemented: %A\" msg ; false\n        \n            \n            let updateModel model msg = if updateModelR model msg then ModelUI.refreshNow()\n            processor <- updateModel model\n        //#r @\"..\\packages\\Owin\\lib\\net40\\Owin.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin\\lib\\net451\\Microsoft.Owin.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.Hosting\\lib\\net451\\Microsoft.Owin.Hosting.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.Host.HttpListener\\lib\\net451\\Microsoft.Owin.Host.HttpListener.dll\"\n        //#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\WebSharper.Owin.dll\"\n        //#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\HttpMultipartParser.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.StaticFiles\\lib\\net451\\Microsoft.Owin.StaticFiles.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.FileSystems\\lib\\net451\\Microsoft.Owin.FileSystems.dll\"\n        //#define FSS_SERVER\n        [< JavaScript false >]\n        module Server =\n            open global.Owin\n            open Microsoft.Owin.Hosting\n            open Microsoft.Owin.StaticFiles\n            open Microsoft.Owin.FileSystems\n            open WebSharper.Owin\n            open WebSharper.Sitelets\n            open WebSharper.UI.Server\n            open WebSharper.UI.Templating\n            open WebSharper.UI.Html\n            open WebSharper.Owin.WebSocket\n            open WebSharper.Owin.WebSocket.Client\n            open WebSharper.Owin.WebSocket.Server\n            open WebSockets\n        \n            let varInt  = Var.Create 1\n            printfn \"varInt %A\" varInt.Value\n        \n            type EndPointServer = | [< EndPoint \"/\" >] EP\n        \n            let content (ctx:Context<EndPointServer>) (endpoint:EndPointServer) : Async<Content<EndPointServer>> =\n                Content.Page(Title = \"Main Page\" \n                           , Body  = [\n                                Html.client <@ MainProgram.mainProgram() @>\n                                Doc.Verbatim (System.IO.File.ReadAllText TemplatesFileName)\n                             ])\n        \n            [< EntryPoint >]\n            let Main args =\n                printfn \"Usage: FSharpStation URL ROOT_DIRECTORY MaxMessageSize\"\n                let url           = args |> Seq.tryItem 0 |>                   Option.defaultValue \"http://localhost:9005/\"\n                let rootDirectory = args |> Seq.tryItem 1 |>                   Option.defaultValue @\"..\\website\"\n                let max           = args |> Seq.tryItem 2 |> Option.map int |> Option.defaultValue 1_000_000\n                let epWebSocket = Endpoint.Create(url, \"/ws\", JsonEncoding.Readable)\n                let broker = Broker.BrokerAgent epWebSocket\n                Broker.BrokerAgent.FssWebSocketO <- Some broker\n                use server = WebApp.Start(url, fun appB ->\n                    appB.UseWebSharper(WebSharperOptions(ServerRootDirectory = rootdir\n                                                       , Sitelet             = (Some <| Application.MultiPage content)\n                                                       , BinDirectory        = \".\"\n                                                       , Debug               = true))\n                        .UseStaticFiles(StaticFileOptions(FileSystem = PhysicalFileSystem(rootDirectory)))\n                        .UseWebSocket(  epWebSocket, broker.Start, maxMessageSize = max)\n                    |> ignore)\n                stdout.WriteLine(\"Listening on {0}, hit enter to finish\", url)\n                stdin.ReadLine() |> ignore\n                0\n        \n        "],
"names": [],
"mappings": "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"
}
