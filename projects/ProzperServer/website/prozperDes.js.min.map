{
"version": 3,
"sourceRoot": "Source",
"sources": ["prozperDes.js/prozperDes.js.fs", "WebSharper.Collections/BalancedTree.fs", "WebSharper.Collections/Pair.fs", "WebSharper.Collections/Map.fs", "WebSharper.Collections/MapModule.fs", "WebSharper.Collections/Set.fs", "WebSharper.Collections/SetModule.fs", "WebSharper.Collections/ResizeArray.fs", "WebSharper.Collections/LinkedList.fs", "WebSharper.Collections/Linq.fs", "WebSharper.Collections/Query.fs", "WebSharper.Main/Promise.fs", "WebSharper.Main/JavaScript.Pervasives.fs", "WebSharper.Main/Json.fs", "WebSharper.Main/Remoting.fs", "WebSharper.Main/Html.fs", "WebSharper.Main/Comparers.fs", "WebSharper.Main/Utils.fs", "WebSharper.Main/Concurrency.fs", "WebSharper.Main/Enumerator.fs", "WebSharper.Main/CollectionInternals.fs", "WebSharper.Main/Object.fs", "WebSharper.Main/IntrinsicFunctions.fs", "WebSharper.Main/Array.fs", "WebSharper.Main/ArrayModule.fs", "WebSharper.Main/Array2DModule.fs", "WebSharper.Main/Async.fs", "WebSharper.Main/Char.fs", "WebSharper.Main/CommonExtensions.fs", "WebSharper.Main/DateTime.fs", "WebSharper.Main/Delegate.fs", "WebSharper.Main/Dictionary.fs", "WebSharper.Main/Exception.fs", "WebSharper.Main/ExtraTopLevelOperators.fs", "WebSharper.Main/Guid.fs", "WebSharper.Main/HashSet.fs", "WebSharper.Main/Interfaces.fs", "WebSharper.Main/LazyExtensions.fs", "WebSharper.Main/List.fs", "WebSharper.Main/ListModule.fs", "WebSharper.Main/Nullable.fs", "WebSharper.Main/Operators.fs", "WebSharper.Main/OperatorIntrinsics.fs", "WebSharper.Main/OptionModule.fs", "WebSharper.Main/Queue.fs", "WebSharper.Main/Random.fs", "WebSharper.Main/ResultModule.fs", "WebSharper.Main/RuntimeHelpers.fs", "WebSharper.Main/SeqModule.fs", "WebSharper.Main/Stack.fs", "WebSharper.Main/String.fs", "WebSharper.Main/Task.fs", "WebSharper.Main/Unchecked.fs", "WebSharper.Main/ValueOption.fs", "WebSharper.Main/Primitives.fs", "WebSharper.Web/ClientSideJson.fs", "WebSharper.Web/Control.fs", "WebSharper.Sitelets/Router.fs", "WebSharper.Control/Observer.fs", "WebSharper.Control/HotStream.fs", "WebSharper.Control/Observable.fs", "WebSharper.Control/ObservableModule.fs", "WebSharper.Control/Event.fs", "WebSharper.Control/FSharpEvent.fs", "WebSharper.Control/EventModule.fs", "WebSharper.Control/MailboxProcessor.fs", "WebSharper.UI/Abbrev.fs", "WebSharper.UI/AppendList.fs", "WebSharper.UI/DomUtility.fs", "WebSharper.UI/Trie.fs", "WebSharper.UI/Snap.fs", "WebSharper.UI/Reactive.fs", "WebSharper.UI/Models.fs", "WebSharper.UI/ReactiveExtensions.fs", "WebSharper.UI/Animation.fs", "WebSharper.UI/Attr.fs", "WebSharper.UI/Attr.Client.fs", "WebSharper.UI/Doc.Proxy.fs", "WebSharper.UI/Templates.fs", "WebSharper.UI/Flow.fs", "WebSharper.UI/HTML.fs", "WebSharper.UI/Router.fs", "WebSharper.UI/Routing.fs", "WebSharper.UI/Input.fs", "ProzperServer/ProzperServer.fs"],
"sourcesContent": ["#nowarn \"3242\"\n////-d:FSharpStation1567214137408 -d:NETSTANDARD20 -d:NOFRAMEWORK --noframework -d:TEE -d:WEBSHARPER\n////#cd @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/projects/ProzperServer\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Core\\lib\\netstandard1.6\\FSharp.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\netstandard.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\mscorlib.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Globalization.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Reflection.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Numerics.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.Linq.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Net.Http.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Runtime.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.IO.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.Tasks.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.JavaScript.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Collections.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.InterfaceGenerator.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Main.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JQuery.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JavaScript.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Web.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Sitelets.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Control.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\HtmlAgilityPack.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Runtime.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Common.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\LayoutEngine\\bin\\LayoutEngine.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\ProzperServer\\bin\\ProzperServer.dll\"\n//#nowarn \"3242\"\n/// Root namespace for all code\n//#define FSharpStation1567214137408\n#if INTERACTIVE\nmodule FsRoot   =\n#else\nnamespace FsRoot\n#endif\n\n    #if !NETSTANDARD20\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\"\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Web.dll\"\n    \n    #if WEBSHARPER\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\"\n    \n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n    #endif\n    #endif\n    //#define NOFRAMEWORK --noframework\n    \n    #if NETSTANDARD20\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Core\\lib\\netstandard1.6\\FSharp.Core.dll\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\netstandard.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\mscorlib.dll\"\n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Globalization.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Reflection.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Numerics.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Core.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.Linq.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Net.Http.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Runtime.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.IO.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.Tasks.dll\"  \n    \n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\"\n    \n    #if WEBSHARPER\n    \n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Collections.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Main.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JQuery.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Web.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Sitelets.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Control.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\HtmlAgilityPack.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Common.dll\"\n    #endif\n    #endif\n    #if WEBSHARPER\n    //#nowarn \"3242\" \n    \n    open WebSharper\n    open WebSharper.JavaScript\n    open WebSharper.UI\n    open WebSharper.UI.Client\n    type on   = WebSharper.UI.Html.on\n    type attr = WebSharper.UI.Html.attr\n    #else\n    /// dummy WebSharper definition in order to avoid having to use #if WEBSHARPER all the time\n    module WebSharper =\n        type RpcAttribute() =\n            inherit System.Attribute()\n            let a = 1\n        type JavaScriptAttribute(translate:bool) =\n            inherit System.Attribute()\n            let a = 1\n            new() = JavaScriptAttribute true\n        type InlineAttribute(code:string) =\n            inherit System.Attribute()\n            let a = 1\n            new() = InlineAttribute \"\"\n        type DirectAttribute(code:string) =\n            inherit System.Attribute()\n            let a = 1\n    \n    open WebSharper\n    \n    #endif\n    \n        /// Essentials that can be converted to JavaScript with WebSharper\n        [< JavaScript ; AutoOpen >]\n        module Library = \n            let Error = Result.Error\n        \n            let [<Inline>] inline swap f a b = f b a\n            \n            /// swap: for use with operators: [1..5] |> List.map (__ (/) 2)\n            let [<Inline>] inline __   f a b = f b a\n            \n            /// call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |> tee (printfn \"value = %d\") |> doSomethingElse\n            let [<Inline>] inline tee f v = f v ; v\n            \n            /// tee: call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |!> printfn \"value = %d\" |> doSomethingElse\n            let [<Inline>] inline  (|>!) v f   = f v ; v\n            let [<Inline>] inline  (>>!) g f   = g >> fun v -> f v ; v\n            \n            let inline print v = \n                match box v with\n                | :? string as s -> printfn \"%s\" s\n                | __             -> printfn \"%A\" v\n            \n            //#define TEE\n            [< Inline \"(function (n) { return n.getFullYear() + '-' + ('0'+(n.getMonth()+1)).slice(-2) + '-' +  ('0'+n.getDate()).slice(-2) + ' '+('0'+n.getHours()).slice(-2)+ ':'+('0'+n.getMinutes()).slice(-2)+ ':'+('0'+n.getSeconds()).slice(-2)+ ':'+('00'+n.getMilliseconds()).slice(-3) })(new Date(Date.now()))\" >]\n            let nowStamp() = \n                let t = System.DateTime.UtcNow // in two steps to avoid Warning: The value has been copied to ensure the original is not mutated\n                t.ToString(\"yyyy-MM-dd HH:mm:ss.fff\", System.Globalization.CultureInfo.InvariantCulture)\n            \n            let [<Inline>] inline traceT t v = tee (sprintf \"%A\" >> (fun s -> s.[..min 100 s.Length-1]) >> printfn \"%s %s: %A\" (nowStamp()) t) v\n            let [<Inline>] inline trace   v = traceT \"trace\" v\n            let [<Inline>] inline traceI  v = trace          v |> ignore\n            \n            module Log =\n                let [<Inline>] inline In     n f   =      (traceT (sprintf \"%s in \" n)) >> f\n                let [<Inline>] inline Out    n f   = f >> (traceT (sprintf \"%s out\" n))\n                let [<Inline>] inline InA    n f p = async { return! In  n f p }\n                let [<Inline>] inline OutA   n f p = async { return! Out n f p }\n                let [<Inline>] inline InOut  n     = In  n >> Out  n\n                let [<Inline>] inline InOutA n f p = async {\n                    let!   r = InA n f  p\n                    do         Out n id r |> ignore\n                    return r \n                  }\n            \n                let [<Inline>] inline TimeIt n f p =\n                    printfn \"Starting %s\" n\n                    let start = System.DateTime.UtcNow.Ticks\n                    f p\n                    let elapsedSpan = new System.TimeSpan(System.DateTime.UtcNow.Ticks - start)\n                    print <| elapsedSpan.ToString()\n            \n            \n            (* issues with websharper Type not found in JavaScript compilation: System.Collections.Generic.IDictionary`2\n            module IDict =\n            #if WEBSHARPER\n                [< Inline >]\n            #endif\n                let inline tryGetValue key (dict:System.Collections.Generic.IDictionary<_, _>) =\n                    let mutable res = Unchecked.defaultof<_>\n                    if dict.TryGetValue(key, &res)\n                    then Some res \n                    else None\n                let add          key v (dict:System.Collections.Generic.IDictionary<_, _>) = if dict.ContainsKey key then      dict.[key] <- v else dict.Add(key, v)\n            *)\n            module Dict =\n                let [<Inline>] inline tryGetValue key (dict:System.Collections.Generic. Dictionary<_, _>) =\n                    let mutable res = Unchecked.defaultof<_>\n                    if dict.TryGetValue(key, &res)\n                    then Some res \n                    else None\n                let add          key v (dict:System.Collections.Generic. Dictionary<_, _>) = if dict.ContainsKey key then      dict.[key] <- v else dict.Add(key, v)\n            \n            module LDict =\n                let [<Inline>] inline containsKey  key  dict = (^a : (member ContainsKey : _ -> bool) (dict, key))\n                //let inline item         key  dict = (^a : (member get_Item    : _ -> _   ) (dict, key))\n                let [<Inline>] inline tryGetValue fitem key  dict =\n                    if containsKey key dict then Some (fitem key)\n                    else None\n            \n            \n            /// Extensible type for error messages, warnings and exceptions\n            type ResultMessage<'M> =\n                | NoMsg\n                | ErrorMsg  of string\n                | Warning   of string\n                | Info      of string\n                | Message   of 'M\n                | ExceptMsg of string * string\n                | RMessages of ResultMessage<'M> []\n                with \n                override msg.ToString() =\n                    match msg with\n                    | NoMsg          ->  \"\"\n                    | ErrorMsg  m    ->  m      |> sprintf \"Error    : %s\"\n                    | Warning   m    ->  m      |> sprintf \"Warning  : %s\"\n                    | Info      m    ->  m\n                    | Message   m    ->  m      |> sprintf \"%O\"\n                    | ExceptMsg(m,p) -> (m, p) ||> sprintf \"Exception: %s, %s\"\n                    | RMessages ms   ->  ms     |> Seq.filter (function NoMsg -> false |_-> true) |> Seq.map (fun m -> m.ToString()) |> String.concat \"\\n\"\n            \n            [< AutoOpen >]\n            module ResultMessageHelpers =\n                let inline errorMsgf fmt = Printf.ksprintf ErrorMsg fmt\n                let inline warningf  fmt = Printf.ksprintf Warning  fmt\n                let inline infof     fmt = Printf.ksprintf Info     fmt\n            \n            module ResultMessage =\n            \n                let inline noMsg    msg = msg |> function NoMsg -> true |_-> false\n                let inline exclnoMsg ms = ms |> Seq.filter (noMsg >> not)\n                /// converts Messages to other type of ResultMessage\n                let rec bindMessage f msg = \n                    match msg with\n                    | NoMsg          ->  NoMsg\n                    | Message   m    ->  f         m\n                    | ErrorMsg  m    ->  ErrorMsg  m\n                    | Info      m    ->  Info      m\n                    | Warning   m    ->  Warning   m\n                    | ExceptMsg(m,p) ->  ExceptMsg(m,p)\n                    | RMessages ms   ->  ms     |> Array.map (bindMessage f) |> RMessages\n            \n                /// a Message is converted to ErrorMsg\n                let freeMessageF f msg = msg |> bindMessage f\n                /// a Message is converted to ErrorMsg\n                let freeMessage    msg = msg |> freeMessageF (sprintf \"%O\" >> ErrorMsg)\n                /// a Message is converted to Warning\n                let freeMessageW   msg = msg |> freeMessageF (sprintf \"%O\" >> Warning )\n                /// a Message is converted to Info\n                let freeMessageI   msg = msg |> freeMessageF (sprintf \"%O\" >> Info    )\n            \n                let rec isInfoF f msg =\n                    match msg with\n                    | Info      _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (isInfoF f)\n                    | _              ->  false\n                /// a Message is not considered Info\n                let isInfo  msg = msg |> isInfoF (fun _ -> false)\n                /// a Message is considered Info\n                let isInfoI msg = msg |> isInfoF (fun _ -> true )\n            \n                let rec isWarningOrInfoF f msg =\n                    match msg with\n                    | Warning   _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (fun m -> isWarningOrInfoF f m || isInfoF f m)\n                    | _              ->  false\n                /// a Message is not considered a Warning\n                let isWarningOrInfo  msg = msg |> isWarningOrInfoF (fun _ -> false)\n                /// a Message is considered a Warning\n                let isWarningOrInfoW msg = msg |> isWarningOrInfoF (fun _ -> true )\n            \n                let rec isFatalF f msg =\n                    match msg with\n                    | NoMsg\n                    | Info      _    \n                    | Warning   _    ->  false\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> Seq.exists (isFatalF f)\n                    | _              ->  true\n                    //|>! printfn \"%A = %A\" msg\n                /// a Message is considered fatal\n                let isFatal  msg = msg |> isFatalF (fun _ -> true )\n                /// a Message is not considered fatal\n                let isFatalW msg = msg |> isFatalF (fun _ -> false)\n            \n                let rec countF f msg =\n                    match msg with\n                    | NoMsg          ->  0, 0, 0\n                    | Info      _    ->  0, 0, 1\n                    | Warning   _    ->  0, 1, 0\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.map (countF f) |> Seq.fold (fun (f, w, i) (fm, wm, im) -> f + fm, w + wm, i + im) (0, 0, 0)\n                    | _              ->  1, 0, 0\n            \n                /// a Message is considered an error\n                let count  msg = msg |> countF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let countW msg = msg |> countF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let countI msg = msg |> countF (fun _ -> 0, 0, 1)\n                \n                let addMsg a b =\n                    match a, b with\n                    | NoMsg        , c\n                    | c            , NoMsg         ->  c\n                    | RMessages mas, RMessages mbs ->  Array.append    mas      mbs   |> RMessages\n                    |           ma , RMessages mbs ->  Array.append [| ma |]    mbs   |> RMessages\n                    | RMessages mas,           mb  ->  Array.append    mas   [| mb |] |> RMessages\n                    |           ma ,           mb  ->               [| ma   ;   mb |] |> RMessages\n            \n                let reduceMsgs ms = (NoMsg, ms) ||> Seq.fold addMsg\n            \n                let summaryF f msg =\n                    match countF f msg with\n                    | 0, 0, _\n                    | 1, 0, 0\n                    | 0, 1, 0 -> \"\"\n                    | e, 0, _ -> sprintf \"Errors   : %d\\n\" e\n                    | 0, w, _ -> sprintf \"Warnings : %d\\n\" w\n                    | e, w, _ -> sprintf \"Errors   : %d, Warnings: %d\\n\" e w\n            \n                /// returns a string with a count of errors and warnings, if more than one\n                let summarizedF f msg = [ msg.ToString() ; summaryF f msg ] |> Seq.filter ((<>) \"\") |> String.concat \"\\n\"\n                /// a Message is considered an error\n                let summarized  msg = msg |> summarizedF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let summarizedW msg = msg |> summarizedF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let summarizedI msg = msg |> summarizedF (fun _ -> 0, 0, 1)\n                \n            [< AutoOpen >]\n            module Monads =\n                module Seq =    \n                    let rtn = Seq.singleton\n                    let insertO  vSO              = vSO |> Option.map(Seq.map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vSR:Result<_,_>) = vSR |> function | Error m -> rtn (Error m) | Ok v -> Seq.map Ok v\n                    let absorbO  vOS              = vOS |> Seq.choose id\n                    let absorbR  vOS              = vOS |> Seq.choose (function Ok v -> Some v |_-> None)\n                    let ofOption vO = \n                        match vO with\n                        | Some v -> Seq.singleton v\n                        | None   -> Seq.empty\n                \n                /// Extensions to Async\n                module Async =\n                    let [< Inline >] inline rtn   v    = async.Return v\n                    let [< Inline >] inline bind  f vA = async.Bind(  vA, f)\n                    let [< Inline >] inline map   f    = bind (f >> rtn)\n                    /// Executes f Synchronously\n                    [< Inline \"throw 'iterS cannot be used in JavaScript!'\" >] \n                    let inline iterS (f: 'a->unit) = map f >> Async.RunSynchronously\n                    /// Executes f Asynchronously\n                    let [< Inline >] inline iterA f             = map f >> Async.Start\n                    let apply fA vA = async {\n                        let! fChild = Async.StartChild fA\n                        let! vChild = Async.StartChild vA\n                        let! f = fChild\n                        let! v = vChild \n                        return f v \n                    }\n                    let sleepThen f milliseconds = async {\n                        do! Async.Sleep milliseconds\n                        return f()\n                    }\n                    let (>>=)                              v f = bind f v\n                    let traverseSeq             f           sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO  vAO                           = vAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vAR:Result<_,_>)              = vAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                \n                \n                module Result =\n                    open Result\n                \n                    let errorf fmt = Printf.ksprintf Error fmt\n                \n                    let rtn                          = Ok\n                    let join                       r = Result.bind id r\n                    let flatten                    r = Result.bind id r\n                    let toOption                   r = r   |> function Ok v -> Some v |       _ -> None\n                    let defaultWith              f r = r   |> function Ok v ->      v | Error e -> f e\n                    let defaultValue             d r = r   |> function Ok v ->      v | Error _ -> d\n                    let failIfTrue               m v = if     v then m |> Error  else Ok () \n                    let failIfFalse              m v = if not v then m |> Error  else Ok () \n                    let iter                  fE f r = r   |> map  f |> defaultWith fE                                                 : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map Ok           |> Option.defaultWith (f >> Error)\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> Ok None)\n                    let absorbO               f  vOR = vOR |> bind (ofOption f)\n                    let (>>=)                    r f = bind f r\n                    let traverseSeq           f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bind f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let result = Builder()\n                    \n                    module Operators =\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                        let result = result\n                \n                \n                    \n                    let freeMessage                r = r   |> function Ok v -> Ok v   | Error e -> ResultMessage.freeMessage e |> Error\n                    /// bind version that protects against exceptions\n                    let bindP                 f    r = match r with\n                                                        | Ok   v -> try   f v\n                                                                    with  e -> ExceptMsg (e.Message, e.StackTrace) |> Error\n                                                        | Error e ->      e                                        |> Error\n                    /// map version that protects against exceptions\n                    let inline mapP           f    m = bindP (f >> rtn) m            \n                    let iterP                 fE f r = r   |> mapP f |> defaultWith fE                                                 : unit    \n                    \n                    type BuilderP() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bindP f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let resultP = BuilderP()\n                    \n                    \n                /// Based on Nick Palladino's https://github.com/palladin/Eff\n                \n                [< AutoOpen >]\n                module Eff =\n                    type Effect  = abstract Extend : (Effect -> Effect) -> Effect\n                \n                    type Eff<'H, 'a> = Eff of (('a -> Effect) -> Effect) \n                        with  member this.Create = match this with Eff create -> create\n                \n                    let inline rtn  v : Eff<'H, 'a> = Eff (fun k -> k v)\n                    let bind  (f: 'a -> Eff<'H, 'b>) (effA: Eff<'H, 'a>) : Eff<'H, 'b> = \n                                        Eff (fun kb -> \n                                                let (Eff effKa) = effA\n                                                effKa (fun a -> \n                                                    let (Eff effKb) = f a\n                                                    effKb kb\n                                                )\n                                            )\n                    let inline map   f  m  = bind (f >> rtn) m\n                    let inline apply fR vR = fR |> bind (fun f -> map f vR)\n                \n                    type Done<'a>(v : 'a) =\n                        member self.Value = v\n                        interface Effect with member self.Extend(_) : Effect = self :> _\n                \n                    let done'  (v : 'a) : Effect = new Done<'a>(v) :> _ \n                    //let return'(v : 'a) : Eff<'H, 'c> = Eff( fun _ -> done' v )\n                    let return' v = Eff( fun _ -> done' v )\n                \n                    let run<'H, 'a> (eff: Eff<'H, 'a>) : 'a =\n                        match eff.Create done' with\n                        | :? Done<'a> as done' -> done'.Value\n                        | v                    -> failwithf \"Unhandled effect %A\" v\n                \n                    let inline runResult<'H, 'a> eff = \n                        try run<'H, 'a> eff |> Ok\n                        with e -> Error(e.ToString())\n                \n                \n                    let inline ( <*> ) f v   = apply f v\n                    let inline ( |>> ) v f   = map   f v\n                    let inline ( >>= ) v f   = bind  f v\n                    let inline ( >-> ) f g v = f v |>> g\n                    let inline ( >=> ) f g v = f v >>= g\n                    \n                    #if TEE\n                    let inline ( |>>!) v f   = map   (tee f                       ) v\n                    let inline ( >>=!) v f   = bind  (fun w -> f w |>> fun () -> w) v\n                    #endif\n                    \n                    let inline join m = m |> bind id\n                    \n                    let traverseSeq            f     sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                          Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |>> Seq.ofList\n                    let inline sequenceSeq           sq = traverseSeq id sq\n                    \n                    let inline insertO    vvO               = vvO   |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let inline insertR   (vvR:Result<_,_>)  = vvR   |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let inline insertFst (fst, vEf)         = vEf   |> map (fun v -> fst, v)\n                    let inline insertSnd (vEf, snd)         = vEf   |> map (fun v -> v, snd)\n                    \n                    let inline bindO (f:'a->Eff<'H,'b>) (ef:Eff<'H,'a option>) = bind (Option.map f >> insertO) ef\n                    let rec whileLoop cond fEf =\n                        if   cond () \n                        then fEf  () |> bind (fun () -> whileLoop cond fEf)\n                        else rtn  ()\n                    \n                    \n                    type EffBuilder<'H>() =\n                        member __.ReturnFrom            vEf        : Eff<'H, _   > =           vEf\n                        member __.Return                v          : Eff<'H, _   > = rtn       v  \n                        member __.Zero                  ()         : Eff<'H, unit> = rtn       () \n                        member __.Bind                 (vEf,  fEf) : Eff<'H, _   > = bind fEf  vEf\n                        member __.Combine              (vEf,  fEf) : Eff<'H, _   > = bind fEf  vEf\n                        member __.Delay                       fEf                  = fEf\n                        member __.Run                         fEf  : Eff<'H, _   > = rtn () |> bind fEf\n                        member this.TryWith   (body, handler     ) : Eff<'H,_> = Eff(fun k -> try body() |> function Eff(f) -> f k with e -> handler e |> function Eff(f) -> f k)\n                        member this.TryFinally(body:unit-> Eff<'H,'R>, compensation) : Eff<'H,'R> = (try body() with e -> compensation() ; reraise() ) |>>! (fun _ -> compensation())\n                        member this.Using     (disposable, body  ) : Eff<'H,_> = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                                    let body' = fun () -> body disposable\n                                    this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                        member __.While   (guard , fEf) : Eff<'H, unit> = whileLoop guard fEf \n                        member th.For  (s: 'a seq, fEf) : Eff<'H, unit> = th.Using(s.GetEnumerator (), fun enum ->\n                                                                                        th.While(enum.MoveNext,\n                                                                                            th.Delay(fun () -> fEf enum.Current)))\n                    \n                    let eff<'H> = EffBuilder<'H>()\n                    \n                    //type EffBuilder<'H>() =\n                    //    member self.Zero      (                 ) = rtn ()\n                    //    member self.Return    (v   :         'A ) = rtn v\n                    //    member self.ReturnFrom eff                = eff\n                    //    member self.Bind      (eff, f           ) = bind f eff\n                    //    member self.Combine   (first, second    ) = bind (fun () -> second) first\n                    //    member __.Combine   (vEf,  fEf) : Eff<'H  , 'm> = bind fEf  vEf\n                    //    member self.Delay (f : unit -> Eff<'U, 'A>) : Eff<'U, 'A> =  Eff (fun k -> let (Eff cont) = f () in cont k)\n                    ////    member inline __.Delay       f                  = f\n                    //    member __.While(guard, body) =\n                    //        let rec whileLoop guard body =\n                    //            if guard() then body() |> bind (fun () -> whileLoop guard body)\n                    //            else rtn   ()\n                    //        whileLoop guard body\n                    //    member this.TryWith   (body, handler     ) = Eff(fun k -> try body() |> function Eff(f) -> f k with e -> handler e |> function Eff(f) -> f k)\n                    //    member this.TryFinally(body, compensation) = Eff(fun k -> try body() |> function Eff(f) -> f k finally   compensation()           )\n                    //    member this.Using     (disposable, body  ) = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                    //                let body' = fun () -> body disposable\n                    //                this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                    //    member this.For(sequence:seq<_>, body) =\n                    //        this.Using(sequence.GetEnumerator(),fun enum -> \n                    //            this.While(enum.MoveNext, \n                    //                fun () -> this.Delay(fun () -> body enum.Current)))\n                    //\n                    //\n                    //let eff<'H> = new EffBuilder<'H>()\n                    \n                    //type EA<'H, 'a, 'b> = 'a -> Eff<'H, 'b>\n                    /// Equal to (|>) \n                    //let (>|>) (ea:EA<_,_,_>) f : EA<_,_,_> = ea |> f\n                    /// Equal to (>>)\n                    //let (>>>) = (>>)\n                    \n                    module EA =\n                        let tee (f: 'a -> Eff<'H, unit>) : 'a -> Eff<'H, 'a> = (fun v -> f v |> map (fun () -> v) )\n                    \n                    //    let mapOutput  f (ea: EA<_,_, _>) : EA<_,_,          _   > = ea >> (bind (f >> rtn) )\n                    //    let bindOutput(f: EA<_,_, _>) (ea: EA<_,_, _>) : EA<_,_, _> = ea >> (bind  f  )\n                    //    let mapBoth    f (ea: EA<_,_, _>) : EA<_,_,          _   > = fun i -> i |> mapOutput (f i) ea\n                    //    let bindBoth   f (ea: EA<_,_, _>) : EA<_,_,          _   > = mapBoth f  ea |> bindOutput id\n                    //\n                    //    let mapO         (ea: EA<_,_, _>) : EA<_,_,          _   > = Option.map ea >> insertO\n                    //\n                    //    let mapFst     f (a, b) = (f a,   b)\n                    //    let mapSnd     f (a, b) = (  a, f b)\n                    //\n                    //    let bindFst    (f:EA<_,_,_>) (a, b) = eff {\n                    //        let! fa = f a\n                    //        return (fa, b)\n                    //    }\n                    //\n                    //    let bindSnd    (f:EA<_,_,_>) (a, b) = eff {\n                    //        let! fb = f b\n                    //        return (a, fb)\n                    //    }\n                    //\n                    //    let lift    f : EA<_,_,_> = f >> rtn\n                    //    let pairWith v ea : EA<_,_,_> =\n                    //        ea\n                    //        >-> fun fst -> fst, v\n                    //\n                    //    let getResult ea:EA<_,_,_> = ea >-> Ok\n                    \n                    \n                    module Log = \n                        type Log< 'L> = interface end  // this acts as a reminder to add a handler for the Log Effects\n                        type Log2<'L> = interface end  // this acts as a reminder to add a handler for the Log Effects\n                        type Log3<'L> = interface end  // this acts as a reminder to add a handler for the Log Effects\n                    \n                        type LogEntry<'L>(v : 'L, k : unit -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Effect with\n                                member self.Extend extension  : Effect = new LogEntry<'L>(v, k >> extension) :> _\n                    \n                        let log (s:'L)  : Eff<'H, unit> when 'H :> #Log< 'L> = Eff (fun k -> LogEntry(s, k) :> _ )\n                        let logf fmt = Printf.ksprintf log fmt\n                        let log2 (s:'L) : Eff<'H, unit> when 'H :> #Log2<'L> = Eff (fun k -> LogEntry(s, k) :> _ )\n                        let log3 (s:'L) : Eff<'H, unit> when 'H :> #Log3<'L> = Eff (fun k -> LogEntry(s, k) :> _ )\n                    \n                        let pureLogHandler0<'L, 'H, 'a> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = \n                            let rec loop (exitK:('a * list<'L>) -> Effect) (ls: list<'L>) : Effect -> Effect = function\n                                | :? Done<    'a> as done' -> (done'.Value, ls)  |>       exitK\n                                | :? LogEntry<'L> as log   -> log.K ()           |>  loop exitK (log.Value :: ls)  \n                                | effect                   -> effect.Extend         (loop exitK ls               )\n                            Eff (fun exitK                 -> eff.Create done'   |>  loop exitK []               )\n                    \n                        let consoleLogHandler0<'L, 'H, 'a> (eff: Eff<'H, 'a>) : Eff<'H, 'a> =\n                            let rec loop (exitK: 'a -> Effect) : Effect -> Effect = function\n                                | :? Done<    'a> as done' -> done'.Value        |>      exitK\n                                | :? LogEntry<'L> as log   -> printfn \"Log: %A\" log.Value\n                                                              log.K ()           |> loop exitK\n                                | effect                   -> effect.Extend        (loop exitK)\n                            Eff (fun exitK                 -> eff.Create done'   |> loop exitK)\n                    \n                        let loggerLogHandler0<'L, 'H, 'a> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> =\n                            let rec loop (exitK: 'a -> Effect) : Effect -> Effect = function\n                                | :? Done<    'a> as done' -> done'.Value        |>      exitK\n                                | :? LogEntry<'L> as log   -> logger log.Value\n                                                              log.K ()           |> loop exitK\n                                | effect                   -> effect.Extend        (loop exitK)\n                            Eff (fun exitK                 -> eff.Create done'   |> loop exitK)\n                    \n                        let pureLogHandler< 'L, 'H, 'a when 'H :> Log< 'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = pureLogHandler0<'L, 'H, 'a> eff\n                        let pureLogHandler2<'L, 'H, 'a when 'H :> Log2<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = pureLogHandler0<'L, 'H, 'a> eff\n                        let pureLogHandler3<'L, 'H, 'a when 'H :> Log3<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = pureLogHandler0<'L, 'H, 'a> eff\n                    \n                    \n                        let consoleLogHandler< 'L, 'H, 'a when 'H :> Log< 'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a> = consoleLogHandler0<'L, 'H, 'a> eff\n                        let consoleLogHandler2<'L, 'H, 'a when 'H :> Log2<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a> = consoleLogHandler0<'L, 'H, 'a> eff\n                        let consoleLogHandler3<'L, 'H, 'a when 'H :> Log3<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a> = consoleLogHandler0<'L, 'H, 'a> eff\n                    \n                        let loggerLogHandler< 'L, 'H, 'a when 'H :> Log< 'L>> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> = loggerLogHandler0<'L, 'H, 'a> logger eff\n                        let loggerLogHandler2<'L, 'H, 'a when 'H :> Log2<'L>> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> = loggerLogHandler0<'L, 'H, 'a> logger eff\n                        let loggerLogHandler3<'L, 'H, 'a when 'H :> Log3<'L>> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> = loggerLogHandler0<'L, 'H, 'a> logger eff\n                    \n                    module Rsl = \n                    \n                    \n                        type Rsl<'M> = interface end\n                        \n                        type IRsl<'M> = abstract Value : 'M\n                    \n                        type Fail<'a,'M>(v : 'M, k : 'a -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Effect   with member __.Extend extension : Effect = new Fail<'a,'M>(v, k >> extension) :> _\n                            interface IRsl<'M> with member __.Value = v\n                    \n                        let fail (s:'M) : Eff<'H, _> when 'H :> #Rsl<'M> = Eff (fun k -> new Fail<_,_>(s, k) :> _)\n                        let failf fmt = Printf.ksprintf fail fmt\n                        let inline ofResult (res:Result<'a,'b>) : Eff<'c,'a> = eff {\n                            match res with\n                            | Ok    v   ->  return v\n                            | Error msg ->  let! m = fail msg\n                                            return failwith \"this code should be unreachable\"\n                        }\n                        \n                        let rslHandler<'U, 'M, 'A when 'U :> Rsl<'M>> (eff: Eff<'U, 'A>) : Eff<'U, _> = \n                            let rec loop (exitK:(Result<'A,'M>) -> Effect) : Effect -> Effect = function\n                                | :? Done<    'A> as done' -> Ok    done'.Value |>       exitK\n                                | :? IRsl<    'M> as fail  -> Error fail .Value |>       exitK\n                                | effect                   -> effect.Extend        (loop exitK)\n                            Eff (fun exitK                 -> eff.Create done'  |>  loop exitK)\n                    \n                        let inline getResult   v                = v     |> rslHandler\n                        let inline absorbR     vvEf             = vvEf  |> bind ofResult\n                        let inline absorbO   f vOEf             = vOEf  |> map (Result.ofOption  f) |> absorbR\n                    \n                    module Asy = \n                        type Asy = interface end // this acts as a reminder to add a handler for the Effect\n                    \n                        type AsynG =\n                            abstract RunSync      : unit               -> Effect\n                            abstract RunAsync<'a> : (Effect -> Effect) -> Effect\n                    \n                        [< Inline \"console.log('RunSynch Not implemented in JavaSacript')\" >]\n                        let runSynch v = Async.RunSynchronously v\n                    \n                        type Asyn<'v>(v : Async<'v>, k : ('v -> Effect) ) =\n                            member __.Value = v\n                            member __.K     = k\n                            interface Effect with member __.Extend   extension = new Asyn<_>(v, k >> extension) :> _\n                            interface AsynG  with \n                                member __.RunSync  ()        = runSynch v |> k\n                                member __.RunAsync<'a> exitK = done' (v |> Async.bind (fun v -> k v |> exitK :?> Done<Async<'a>> |> fun don -> don.Value ) )\n                    \n                        let inline ofAsync (v:Async<'a>) : Eff<'H, 'a> when 'H :> Asy= Eff (fun k -> new Asyn<'a>(v, k) :> _)\n                    \n                        /// This handler uses RunSynchronously to resolve Asyncs\n                        let syncHandler<'H, 'a when 'H :> Asy> (eff: Eff<'H, 'a>) : Eff<'H, 'a> =\n                            let rec loop (exitK:'a -> Effect) : Effect -> Effect = function\n                                | :? Done<'a> as done' -> done'.Value        |>      exitK\n                                | :? AsynG    as asy   -> asy.RunSync()      |> loop exitK\n                                | effect               -> effect.Extend        (loop exitK)\n                            Eff (fun exitK             -> eff.Create done'   |> loop exitK)\n                    \n                        /// this should be the last handler before Eff.run\n                        let asyncHandler0<'H, 'a when 'H :> Asy> (eff: Eff<'H, 'a>) : Eff<'H, Async<'a>> = \n                            let rec loop (exitK:(Async<'a>) -> Effect) : Effect -> Effect = function\n                                | :? Done<'a> as done' -> done'.Value |> async.Return |>      exitK\n                                | :? AsynG    as asy   -> asy.RunAsync<'a>              (loop exitK)\n                                | effect               -> effect.Extend                 (loop exitK)\n                            Eff (fun exitK             -> eff.Create done'            |> loop exitK)\n                    \n                        let asyncHandler<'H, 'a when 'H :> Asy> (eff: Eff<'H, 'a>) : Eff<'H, Async<'a>> = \n                            Async.rtn () \n                            |>  ofAsync \n                            >>= fun () -> eff \n                            |>  asyncHandler0\n                    \n                type AsyncResult<'v, 'm> = Async<Result<'v, 'm>>\n                \n                /// A computation expression to build an Async<Result<'ok, 'error>> value\n                module AsyncResult =\n                    let mapError fE v  = v |> Async.map (Result.mapError fE)\n                    let freeMessage v  = v |> Async.map  Result.freeMessage\n                \n                    let rtn        v   = async.Return(Ok v  )\n                    let rtnR       vR  = async.Return    vR\n                    let iterS fE f vRA = Async.iterS (Result.iter fE f) vRA\n                    let iterA fE f vRA = Async.iterA (Result.iter fE f) vRA\n                    let bind  fRA  vRA = async { \n                        let! vR       = vRA\n                        match   vR with\n                        | Ok    v -> return! fRA v\n                        | Error m -> return  Error m \n                    }\n                    let bindP (fRA:'a -> Async<Result<'b,ResultMessage<'c>>>)  (vRA: Async<Result<'a,ResultMessage<'c>>>) : Async<Result<'b,ResultMessage<'c>>>= async {\n                        try \n                            let!  vR = vRA\n                            match vR with\n                            | Ok    v -> return! fRA   v\n                            | Error m -> return  Error m\n                        with  e -> return  ExceptMsg (e.Message, e.StackTrace) |> Error\n                    }\n                    let inline map  f m = bind  (f >> rtn) m            \n                    let inline mapP f m = bindP (f >> rtn) m            \n                    let rec whileLoop cond fRA =\n                        if   cond () \n                        then fRA  () |> bind (fun () -> whileLoop cond fRA)\n                        else rtn  ()\n                    let (>>=)                              v f = bind f v\n                    let rec    traverseSeq     f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO   vRAO                         = vRAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR ( vRAR:Result<_,_>)            = vRAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let absorbR   vRRA                         = vRRA |> Async.map  Result.join\n                    let absorbO f vORA                         = vORA |> Async.map (Result.absorbO  f)\n                \n                type AsyncResultBuilder() =\n                    member __.ReturnFrom vRA        : Async<Result<'v  , 'm>> =                       vRA\n                    member __.ReturnFrom vR         : Async<Result<'v  , 'm>> = AsyncResult.rtnR      vR\n                    member __.Return     v          : Async<Result<'v  , 'm>> = AsyncResult.rtn       v  \n                    member __.Zero       ()         : Async<Result<unit, 'm>> = AsyncResult.rtn       () \n                    member __.Bind      (vRA,  fRA) : Async<Result<'b  , 'm>> = AsyncResult.bind fRA  vRA\n                    member __.Bind      (vR ,  fRA) : Async<Result<'b  , 'm>> = AsyncResult.bind fRA (vR  |> AsyncResult.rtnR)\n                    member __.Combine   (vRA,  fRA) : Async<Result<'b  , 'm>> = AsyncResult.bind fRA  vRA\n                    member __.Combine   (vR ,  fRA) : Async<Result<'b  , 'm>> = AsyncResult.bind fRA (vR  |> AsyncResult.rtnR)\n                    member __.Delay            fRA                            = fRA\n                    member __.Run              fRA                            = AsyncResult.rtn () |> AsyncResult.bind fRA\n                    member __.TryWith   (fRA , hnd) : Async<Result<'a  , 'm>> = async { try return! fRA() with e -> return! hnd e  }\n                    member __.TryFinally(fRA , fn ) : Async<Result<'a  , 'm>> = async { try return! fRA() finally   fn  () }\n                    member __.Using(resource , fRA) : Async<Result<'a  , 'm>> = async.Using(resource,       fRA)\n                    member __.While   (guard , fRA) : Async<Result<unit, 'a>> = AsyncResult.whileLoop guard fRA \n                    member th.For  (s: 'a seq, fRA) : Async<Result<unit, 'b>> = th.Using(s.GetEnumerator (), fun enum ->\n                                                                                    th.While(enum.MoveNext,\n                                                                                      th.Delay(fun () -> fRA enum.Current)))\n                let asyncResult = AsyncResultBuilder()\n                \n                type AsyncResultBuilderP() =\n                    member __.ReturnFrom vRA        : Async<Result<'v  , ResultMessage<_>>> =                       vRA\n                    member __.ReturnFrom vR         : Async<Result<'v  , ResultMessage<_>>> = AsyncResult.rtnR      vR\n                    member __.Return     v          : Async<Result<'v  , ResultMessage<_>>> = AsyncResult.rtn       v  \n                    member __.Zero       ()         : Async<Result<unit, ResultMessage<_>>> = AsyncResult.rtn       () \n                    member __.Bind      (vRA,  fRA) : Async<Result<'b  , ResultMessage<_>>> = AsyncResult.bindP fRA  vRA\n                    member __.Bind      (vR ,  fRA) : Async<Result<'b  , ResultMessage<_>>> = AsyncResult.bindP fRA (vR  |> AsyncResult.rtnR)\n                    member __.Combine   (vRA,  fRA) : Async<Result<'b  , ResultMessage<_>>> = AsyncResult.bindP fRA  vRA\n                    member __.Combine   (vR ,  fRA) : Async<Result<'b  , ResultMessage<_>>> = AsyncResult.bindP fRA (vR  |> AsyncResult.rtnR)\n                    member __.Delay            fRA                                          = fRA\n                    member __.Run              fRA                                          = AsyncResult.rtn () |> AsyncResult.bindP fRA\n                    member __.TryWith   (fRA , hnd) : Async<Result<'a  , ResultMessage<_>>> = async { return! try fRA() with e -> hnd e  }\n                    member __.TryFinally(fRA , fn ) : Async<Result<'a  , ResultMessage<_>>> = async { return! try fRA() finally   fn  () }\n                    member __.Using(resource , fRA) : Async<Result<'a  , ResultMessage<_>>> = async.Using(resource,       fRA)\n                    member __.While   (guard , fRA) : Async<Result<unit, ResultMessage<_>>> = AsyncResult.whileLoop guard fRA \n                    member th.For  (s: 'a seq, fRA) : Async<Result<unit, ResultMessage<_>>> = th.Using(s.GetEnumerator (), fun enum ->\n                                                                                              th.While(enum.MoveNext,\n                                                                                                th.Delay(fun () -> fRA enum.Current)))\n                let asyncResultP = AsyncResultBuilderP()\n                \n                [<AutoOpen>]\n                module Extensions =      \n                    // Having Async<_> members as extensions gives them lower priority in\n                    // overload resolution between Async<_> and Async<Result<_,_>>.\n                    type AsyncResultBuilder with\n                      member __.ReturnFrom (vA: Async<'a>     ) : Async<Result<'a, 'b>> =                       Async.map Ok vA\n                      member __.Bind       (vA: Async<'a>, fRA) : Async<Result<'b, 'c>> = AsyncResult.bind fRA (Async.map Ok vA)\n                      member __.Combine    (vA: Async<'a>, fRA) : Async<Result<'b, 'c>> = AsyncResult.bind fRA (Async.map Ok vA)\n                \n                    type AsyncResultBuilderP with\n                      member __.ReturnFrom (vA: Async<'a>     ) : Async<Result<'a, ResultMessage<_>>> =                        Async.map Ok vA\n                      member __.Bind       (vA: Async<'a>, fRA) : Async<Result<'b, ResultMessage<_>>> = AsyncResult.bindP  fRA (Async.map Ok vA)\n                      member __.Combine    (vA: Async<'a>, fRA) : Async<Result<'b, ResultMessage<_>>> = AsyncResult.bindP fRA (Async.map Ok vA)\n                \n                \n                \n            type System.String with\n                member this.Substring2(from, n) = \n                    if   n    <= 0           then \"\"\n                    elif from <  0           then this.Substring2(0, n + from)\n                    elif from >= this.Length then \"\"\n                    else this.Substring(from, min n (this.Length - from))\n                member this.Left             n  = if n < 0 \n                                                  then this.Substring2(0, this.Length + n)\n                                                  else this.Substring2(0, n              )\n                member this.Right            n  = this.Substring2(max 0 (this.Length - n), this.Length)\n                member this.toUnderscore        = this |> Seq.mapi(fun i c -> if i > 0 && System.Char.IsUpper(c) then [ '_' ; c ] else [ c ])  |> Seq.collect id |> Seq.toArray |> System.String\n            \n            module String =\n                let splitByChar (c: char) (s: string) = s.Split c\n                let splitInTwoO spl txt = \n                    let i = (txt:string).IndexOf (spl:string)\n                    if  i = -1 then None else\n                    (txt.Left(i), txt.Substring (i + spl.Length) )\n                    |> Some\n                let delimitedO  op cl txt =\n                    splitInTwoO op txt\n                    |> Option.bind(fun (bef, sec) ->\n                        splitInTwoO cl sec\n                        |> Option.map(fun (mid, aft) -> bef, mid, aft)\n                    )\n                let contains     sub  (whole: string) = whole.Contains sub\n                let trim                  (s: string) = s.Trim()\n                let append     (a: string)(b: string) =  a + b\n                let skipFirstLine (txt:string) = txt.IndexOf '\\n' |> fun i -> if i < 0 then \"\" else txt.[i + 1..]\n                let unindent (s:string) =\n                    let lines = s.Split '\\n'\n                    let n     = lines \n                                |> Seq.tryFind (fun l -> l.Trim() <> \"\")\n                                |> Option.defaultValue \"\"\n                                |> Seq.tryFindIndex ((<>) ' ') \n                                |> Option.defaultValue 0\n                    lines \n                    |> Seq.map    (fun l -> if l.Length <= n then \"\" else l.Substring n)\n                    |> Seq.filter (fun s -> s.StartsWith \"# 1 \" |> not)\n                let indent n (s:string) =\n                    s.Split '\\n'\n                    |> Seq.map ((+) (String.replicate n \" \"))\n                let unindentStr = unindent >> String.concat \"\\n\"\n                let indentStr i = indent i >> String.concat \"\\n\" \n                let skipLastLine =\n                       splitByChar '\\n' \n                    >> fun s -> s.[0 .. (max 0 (s.Length - 2)) ]\n                    >> String.concat \"\\n\"\n                let (|StartsWith|_|) (start:string) (s:string) = if s.StartsWith start then Some s.[start.Length..                          ] else None\n                let (|EndsWith  |_|) (ends :string) (s:string) = if s.EndsWith   ends  then Some s.[0           ..s.Length - ends.Length - 1] else None\n                \n                let thousands n =\n                    let v = n.ToString()\n                    let r = v.Length % 3 \n                    let s = if r = 0 then 3 else r\n                    [   yield v.[0.. s - 1]\n                        for i in 0..(v.Length - s)/ 3 - 1 do\n                            yield v.[i * 3 + s .. i * 3 + s + 2]\n                    ] |> String.concat \",\"\n            \n            let mapFst     (f: 'a->'c) (a:'a, b:'b) = (f a,   b)\n            let mapSnd     (f: 'b->'c) (a:'a, b:'b) = (  a, f b)\n            \n            module Array =\n            \n                /// Non-mutable element replace\n                /// produces a new array with the new element\n                let replace i item (array: _[]) = \n                    seq {\n                        if i > 0            then yield! array.[.. i - 1]\n                        yield item\n                        if i < array.Length then yield! array.[i + 1 ..]\n                    } |> Seq.toArray\n            \n                let remove i (array: _[]) = \n                    seq {\n                        if i > 0            then yield! array.[.. i - 1]\n                        if i < array.Length then yield! array.[i + 1 ..]\n                    } |> Seq.toArray\n            \n            ///    let ls = [ \"d1d\"; \"a\"; \"b\"; \"c\"; \"a3a\"; \"b2b\"; \"c1c\"]\n            ///    \n            ///    ls |> List.sortWith ( asc Seq.length)            |> print // [\"a\"; \"b\"; \"c\"; \"dd\"; \"aa\"; \"bb\"; \"cc\"]\n            ///    ls |> List.sortWith (desc Seq.length &> asc (Seq.tryItem 1) &> asc  id) |> print // [\"aa\"; \"bb\"; \"cc\"; \"dd\"; \"a\"; \"b\"; \"c\"]\n            ///    ls |> List.sortWith ( asc Seq.length &> desc id) |> print // [\"c\"; \"b\"; \"a\"; \"dd\"; \"cc\"; \"bb\"; \"aa\"]\n            module SortWith =\n                let asc   f    a b = compare (f a) (f b)\n                let desc  f    a b = compare (f b) (f a)\n                let (&>) c1 c2 a b = match c1 a b with 0 -> c2 a b | r -> r\n            \n            [<System.Runtime.CompilerServices.Extension >]\n            type MailboxProcessorExt =\n                [<System.Runtime.CompilerServices.Extension ; Inline \"throw 'PostAndReply not available in JavaScript'\" >]\n                static member PostAndReply     (agent:MailboxProcessor<_>, msg, ?timeout) = agent.PostAndReply     ((fun reply -> reply, msg), ?timeout= timeout)\n                [<System.Runtime.CompilerServices.Extension>]\n                static member PostAndAsyncReply(agent:MailboxProcessor<_>, msg, ?timeout) = agent.PostAndAsyncReply((fun reply -> reply, msg), ?timeout= timeout)\n            //    [<System.Runtime.CompilerServices.Extension>]\n            ///    static member PostF(agent:MailboxProcessor<_>, f, ?timeout) = agent.Post(fun v -> async { return f v })\n            \n            module Mailbox =\n            \n                /// A simple Mailbox processor to serially process Async tasks\n                /// use:\n                ///      let logThisMsgA = Mailbox.iterA (printfn \"%A\") (fun msg -> async { printfn \"Log: %s\" msg } )\n                ///      logThisMsgA.Post \"message Async\"\n                ///      \n                let iterA hndl f =\n                    MailboxProcessor.Start(fun inbox ->\n                        async {\n                            while true do\n                                try       let!   msg = inbox.Receive()\n                                          do!  f msg\n                                with e -> hndl e\n                        }\n                    )\n                    \n                /// A simple Mailbox processor to serially process tasks\n                /// use:\n                ///      let logThisMsg = Mailbox.iter (printfn \"%A\") (printfn \"Log: %s\")\n                ///      logThisMsg.Post \"message\"\n                ///      \n                let iter hndl f = iterA hndl (fun msg -> async { f msg } )\n                \n                /// A simple Mailbox processor to serially and synchronously process tasks\n                /// use:\n                ///      let toUpperCaseA = Mailbox.callA (fun (msg:string) -> \n                ///                                async { return msg.ToUpper() } )\n                ///\n                ///      toUpperCaseA.PostAndReply(fun reply -> reply, \"message\") \n                ///      |> printfn \"%s\"\n                ///\n                ///      toUpperCaseA.PostAndReply \"message\"\n                ///      |> printfn \"%s\"\n                ///\n                ///      async {\n                ///          let! res = toUpperCaseA.PostAndAsyncReply(fun reply -> \n                ///                                                        reply, \"message\")\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///\n                ///      async {\n                ///          let! res = toUpperCaseA.PostAndAsyncReply \"message\"\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously    \n                ///      \n                let callA hndl f = iterA hndl (fun ((replyChannel: AsyncReplyChannel<_>), msg) -> async {\n                    let! r = f msg\n                    replyChannel.Reply r\n                })\n                \n                /// A simple Mailbox processor to serially and synchronously process tasks\n                /// use:\n                ///      let toUpperCase = Mailbox.call (fun (msg:string) -> msg.ToUpper() )\n                ///      \n                ///      toUpperCase.PostAndReply(fun reply -> reply, \"message\") \n                ///      |> printfn \"%s\"\n                ///      \n                ///      toUpperCase.PostAndReply \"message\"\n                ///      |> printfn \"%s\"\n                ///      \n                ///      async {\n                ///          let! res = toUpperCase.PostAndAsyncReply(fun reply -> \n                ///                                                       reply, \"message\")\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///      \n                ///      async {\n                ///          let! res = toUpperCase.PostAndAsyncReply \"message\"\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///      \n                let call hndl f = callA hndl (fun msg -> async { return f msg } )\n                \n                /// A Mailbox processor that maintains a state\n                let foldA hndl f initState =\n                    MailboxProcessor.Start(fun inbox ->\n                        let rec loop state : Async<unit> = async {\n                            try       let! msg      = inbox.Receive()\n                                      let! newState = f state msg\n                                      return! loop newState\n                            with e -> return! loop (hndl e state)\n                        }\n                        loop initState\n                    )\n            \n                /// A Mailbox processor that maintains a state\n                let fold hndl f initState = foldA hndl (fun state msg -> async { return f state msg } ) initState\n                \n                /// A Mailbox processor that maintains a state (pass an error handler not a folder function)\n                /// use: \n                ///      agent |> Mailbox.StateFull.apply (fun state -> state + 1)\n                ///      agent |> Mailbox.StateFull.getState\n                let stateFull hndl initState =\n                    MailboxProcessor.Start(fun inbox ->\n                        let rec loop state : Async<unit> = async {\n                            try       let! f        = inbox.Receive()\n                                      let! newState = f state\n                                      return! loop newState\n                            with e -> return! loop (hndl e state)\n                        }\n                        loop initState\n                    )\n                    \n                let defHandler ex st = print ex ; st\n                    \n                module StateFull =\n                    let getStateA     (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndAsyncReply(fun (reply:AsyncReplyChannel<_>) -> fun v -> async { reply.Reply v ; return v })\n                    let setState    v (agent: MailboxProcessor<'a->Async<'a>>) = agent.Post(fun _ -> async { return    v })\n                    let applyA      f (agent: MailboxProcessor<'a->Async<'a>>) = agent.Post(fun v -> async { return! f v })\n                    let apply       f (agent: MailboxProcessor<'a->Async<'a>>) = agent |> applyA (fun v -> async { return  f v })\n                    let applyReplyA f (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndAsyncReply(fun (reply:AsyncReplyChannel<'r>) -> \n                                                                                                fun v -> async {\n                                                                                                    let! st, r = f v\n                                                                                                    reply.Reply r\n                                                                                                    return st \n                                                                                                })\n                    let applyReply  f (agent: MailboxProcessor<'a->Async<'a>>) = agent |> applyReplyA (fun v -> async { return  f v })\n                    [< Inline \"throw 'getState not available in JavaScript'\" >]\n                    let getState      (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndReply     (fun (reply:AsyncReplyChannel<_>) -> fun v -> async { reply.Reply v ; return v })\n                    /// synchronous version pf applyReply\n                    [< Inline \"throw 'applyReplyS not available in JavaScript'\" >]\n                    let applyReplyS f (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndReply(fun (reply:AsyncReplyChannel<'r>) -> \n                                                                                                fun v -> async {\n                                                                                                    let st, r = f v\n                                                                                                    reply.Reply r\n                                                                                                    return st \n                                                                                                })\n            \n        /// Essentials that run in Javascript (WebSharper)\n        //#define WEBSHARPER \n        [< JavaScript ; AutoOpen >]\n        module LibraryJS =\n            module Var =\n                let mutable private counter = 1\n                let freshId () =\n                    counter <- counter + 1\n                    \"varuid\" + string counter\n                        \n                let lensView get update view0 (var: Var<_>) =\n                    let id   = freshId()\n                    let view = View.Map2 (fun v _ -> get v) var.View view0\n                    { new Var<'V>() with\n                        member this.Get        () = get (var.Get())\n                        member this.Set         v = var.Update(fun t -> update t v)\n                        member this.SetFinal    v = this.Set(v)\n                        member this.Update      f = var.Update(fun t -> update t (f (get t)))\n                        member this.UpdateMaybe f = var.UpdateMaybe(fun t -> Option.map (fun x -> update t x) (f (get t)))\n                        member this.View          = view\n                        member this.Id            = id\n                    }\n            \n            module ListModel =\n                let lensInto' (m:ListModel<_,_>) (get: 'T       -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) (view: View<'V>) : Var<'V> =\n                    let id = Var.freshId()\n                    { new Var<'V>() with\n                        member r.Get         () = m.FindByKey key |> get\n                        member r.Set         v  = m.UpdateBy (fun i -> v          |>             update i |> Some) key\n                        member r.Update      f  = m.UpdateBy (fun i -> get i |> f |>             update i |> Some) key\n                        member r.UpdateMaybe f  = m.UpdateBy (fun i -> get i |> f |> Option.map (update i)       ) key\n                        member r.SetFinal    v  = r.Set v\n                        member r.View           = view\n                        member r.Id             = id\n                    }\n                let lensIntoO'(m: ListModel<_,_>) (get: 'T option -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) (view: View<'V>) : Var<'V> =\n                    let id = Var.freshId()\n                    { new Var<'V>() with\n                        member r.Get         () = m.TryFindByKey key |> get\n                        member r.Set         v  = m.UpdateBy (fun i -> v                  |>             update i |> Some) key\n                        member r.Update      f  = m.UpdateBy (fun i -> Some i |> get |> f |>             update i |> Some) key\n                        member r.UpdateMaybe f  = m.UpdateBy (fun i -> Some i |> get |> f |> Option.map (update i)       ) key\n                        member r.SetFinal    v  = r.Set v\n                        member r.View           = view\n                        member r.Id             = id\n                    }\n                let docLensMapView      mapView (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (lensInto' m   id                        (fun _ -> id) k v)\n                    Doc.BindSeqCachedViewBy m.Key get (View.Map mapView m.View)\n                let docLensMapViewO def mapView (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (lensIntoO' m (Option.defaultValue def)  (fun _ -> id) k v)\n                    Doc.BindSeqCachedViewBy m.Key get (View.Map mapView m.View)\n                let lensDef def k (m:ListModel<_,_>) =\n                    let get = Option.defaultValue def\n                    lensIntoO' m get (fun _ -> id) k (m.TryFindByKeyAsView k |> View.Map get)\n            \n                let currentLensUpd def curr upd (model:ListModel<_,_>) = \n                    curr \n                    |> Var.lensView (Option.bind (model.TryFindByKey) >> Option.defaultValue def) \n                                    (fun kO v -> kO |> Option.iter (upd v) ; kO)\n                                    model.View\n                let currentLensUpd' def curr upd (model:ListModel<_,_>) = \n                    let view = curr |> View.Map2 (fun _mdl kO -> kO |> Option.bind model.TryFindByKey |> Option.defaultValue def) model.View\n                    Var.Make view upd\n                let currentLens def curr (model:ListModel<_,_>) = \n                    model \n                    |> currentLensUpd' def curr (fun v -> model.UpdateBy (fun _ -> model.TryFindByKey (model.Key v) |> Option.map (fun _ -> v) ) <| model.Key v)\n                \n            \n            module Pojo =\n                let addProp prop (pojo:JSObject) = pojo.Add prop ; pojo\n                \n                let newPojo props =\n                    let pojo = JSObject()\n                    if IsClient then\n                        props |> Seq.iter (swap addProp pojo >> ignore)\n                    pojo\n            \n                let newPojoOpt (propOs : seq<string * obj option>) =\n                    propOs\n                    |> Seq.choose(fun (n,vO) -> vO |> Option.map(fun v -> n,v))\n                    |> newPojo\n            \n            module Date =\n                let toYYYYMMDD     sep (date:System.DateTime) = sprintf \"%d%s%02d%s%02d\" date.Year sep  date.Month sep date.Day\n                let toHHMM             (date:System.DateTime) = sprintf \"%02d:%02d\" date.Hour  date.Minute\n                let toYYYYMMDDHHMM sep (date:System.DateTime) = sprintf \"%s %s\" (toYYYYMMDD sep date) (toHHMM date)\n                \n            let (|REGEX|_|) (expr: string) (opt: string) (value: string) =\n                if value = null then None else\n                match JavaScript.String(value).Match(RegExp(expr, opt)) with\n                | null         -> None\n                | [| |]        -> None\n                | m            -> Some m\n            \n            let rexGuid = \"\"\"([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})\"\"\"\n            \n            let rexEmail = \"\"\"(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@[*[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+]*\"\"\"\n            \n            module REGEX =\n                let getStartWord (line:string) ch =\n                    match line.Substring(0, ch) with\n                    | REGEX @\"([a-zA-Z_]\\w*)$\" \"g\" [| txt |] -> txt\n                    | _                                      -> \"\"          \n                \n                let getEndWord (line:string) ch =\n                    match line.Substring(ch) with\n                    | REGEX @\"^([a-zA-Z_]\\w*)\" \"g\" [| txt |] -> txt\n                    | _                                      -> \"\"          \n            \n                let (|Identifier|_|) =\n                    function\n                    | REGEX \"^[$a-zA-Z_][0-9a-zA-Z_\\.\\-$]*$\" \"\" [| id |] -> Some id\n                    | _                                                  -> None\n            \n            module Msal =\n            \n                type Policy =\n                | SignIn\n                | SignUp\n                | EditProfile\n                | ResetPassword\n                with \n                    static member Parse (txt:string) = \n                        match txt.Replace(\" \", \"\") with\n                        | \"SignUp\"        -> SignUp\n                        | \"EditProfile\"   -> EditProfile\n                        | \"ResetPassword\" -> ResetPassword\n                        | _               -> SignIn\n                    override this.ToString() = (sprintf \"%A\" this).toUnderscore.Replace('_', ' ')\n            \n                let policies = [\n                    SignIn\n                    SignUp\n                    EditProfile\n                    ResetPassword\n                ]\n                \n                type TokenReceivedCallback = (string * string * string * string * string) -> unit\n            \n                let (-->) (n:string) (v : _       ) = n, (                           v :> obj) |> Some\n                let (==>) (n:string) (vO: _ option) = n, (vO |> Option.map (fun v -> v :> obj))\n            \n                type AuthOptions = {\n                    clientId                    : string\n                    authority                   : string\n                    validateAuthority           : bool\n                    redirectUri                 : string\n                    postLogoutRedirectUri       : string\n                    navigateToLoginRequestUrl   : bool\n                }\n                   with\n                        static member New(clientId: string, ?authority: string, ?validateAuthority: bool, ?redirectUri: string, ?postLogoutRedirectUri: string, ?navigateToLoginRequestUrl: bool) : AuthOptions=\n                            Pojo.newPojoOpt [\n                                \"clientId\"                  --> clientId                 \n                                \"authority\"                 ==> authority                \n                                \"validateAuthority\"         ==> validateAuthority        \n                                \"redirectUri\"               ==> redirectUri              \n                                \"postLogoutRedirectUri\"     ==> postLogoutRedirectUri    \n                                \"navigateToLoginRequestUrl\" ==> navigateToLoginRequestUrl\n                            ] |> box |> unbox\n            \n                type CacheLocation = string // LocalStorage | SessionStorage\n            \n                type CacheOptions = {\n                    cacheLocation          : string\n                    storeAuthStateInCookie : bool\n                }\n                   with\n                        static member New(?cacheLocation: CacheLocation, ?storeAuthStateInCookie: bool) : CacheOptions =\n                            Pojo.newPojoOpt [\n                                \"cacheLocation\"           ==> cacheLocation\n                                \"storeAuthStateInCookie\"  ==> storeAuthStateInCookie\n                            ] |> box |> unbox\n            \n                type Logger = obj\n            \n                type SystemOptions = {\n                    logger                      : Logger\n                    loadFrameTimeout            : int\n                    navigateFrameWait           : int\n                    tokenRenewalOffsetSeconds   : int\n                }\n                   with\n                        static member New(?logger: Logger, ?loadFrameTimeout: int, ?navigateFrameWait: int, ?tokenRenewalOffsetSeconds: int) : SystemOptions =\n                            Pojo.newPojoOpt [\n                                \"logger\"                    ==> logger\n                                \"loadFrameTimeout\"          ==> loadFrameTimeout\n                                \"navigateFrameWait\"         ==> navigateFrameWait\n                                \"tokenRenewalOffsetSeconds\" ==> tokenRenewalOffsetSeconds\n                            ] |> box |> unbox\n            \n                type FrameworkOptions = {\n                    isAngular           : bool\n                    protectedResourceMap: Map<string, string[]>\n                    unprotectedResources: string[]\n                }\n                   with\n                        static member New(?isAngular: bool, ?protectedResourceMap: Map<string, string[]>, ?unprotectedResources: string[]) : FrameworkOptions =\n                            Pojo.newPojoOpt [\n                                \"isAngular\"            ==> isAngular\n                                \"protectedResourceMap\" ==> protectedResourceMap\n                                \"unprotectedResources\" ==> unprotectedResources\n                            ] |> box |> unbox\n            \n                type Configuration = { auth: AuthOptions ;cache : CacheOptions ; system: SystemOptions ; framework :  FrameworkOptions }\n                    with \n                        static member New(?auth: AuthOptions, ?cache : CacheOptions, ? system: SystemOptions, ? framework :  FrameworkOptions) : Configuration =\n                            Pojo.newPojoOpt [\n                                \"auth\"      ==> auth\n                                \"cache\"     ==> cache\n                                \"system\"    ==> system\n                                \"framework\" ==> framework\n                            ] |> box |> unbox\n            \n            //    [< AllowNullLiteral >]\n            //    type User (displayableId: string, name: string, identityProvider: string, userIdentifier: string, idToken: obj, sid: string) =\n            //        [< Inline \"User.createUser($idToken, $clientInfo)\" >]\n            //        static member createUser(idToken: obj, clientInfo: obj) : User = X<_>\n            \n                [< AllowNullLiteral >]\n                type Account() = \n                    [< DefaultValue >] val mutable accountIdentifier     : string  \n                    [< DefaultValue >] val mutable environment           : string  \n                    [< DefaultValue >] val mutable homeAccountIdentifier : string  \n                    [< DefaultValue >] val mutable idToken               : JSObject\n                    [< DefaultValue >] val mutable name                  : string  \n                    [< DefaultValue >] val mutable sid                   : string  \n                    [< DefaultValue >] val mutable userName              : string  \n            \n                type AuthResponse = {\n                    accessToken  : string\n                    account      : Account\n                    accountState : string\n                    expiresOn    : Date\n                    idToken      : JSObject\n                    scopes       : Array<string>\n                    tenantId     : string\n                    tokenType    : string\n                    uniqueId     : string        \n                }\n            \n                type AuthError = {\n                    errorCode    : string\n                    errorMessage : string\n                    message      : string\n                    name         : string\n                    stack        : string option\n                }\n            \n                type tokenReceivedCallback =             AuthResponse  -> unit\n                type errorReceivedCallback = AuthError                 -> unit \n                type authResponseCallback  = FuncWithArgs<AuthError * AuthResponse, unit>\n            \n                type QPDict = JSObject\n            \n                type AuthenticationParameters = {\n                    account              : Account\n                    authority            : string\n                    claimsRequest        : string\n                    correlationId        : string\n                    extraQueryParameters : QPDict\n                    extraScopesToConsent : string []\n                    loginHint            : string\n                    prompt               : string\n                    scopes               : string []\n                    sid                  : string\n                    state                : string        \n                }\n                   with\n                        static member New(?account: Account, ?authority: string, ?claimsRequest: string, ?correlationId: string, ?extraQueryParameters: QPDict, ?extraScopesToConsent: string[], ?loginHint: string, ?prompt: string, ?scopes: string[], ?sid: string, ?state: string) : AuthenticationParameters =\n                            Pojo.newPojoOpt [\n                                \"account\"              ==> account\n                                \"authority\"            ==> authority\n                                \"claimsRequest\"        ==> claimsRequest\n                                \"correlationId\"        ==> correlationId\n                                \"extraQueryParameters\" ==> extraQueryParameters\n                                \"extraScopesToConsent\" ==> extraScopesToConsent\n                                \"loginHint\"            ==> loginHint\n                                \"prompt\"               ==> prompt\n                                \"scopes\"               ==> scopes\n                                \"sid\"                  ==> sid\n                                \"state\"                ==> state\n                            ] |> box |> unbox\n            \n                type UserAgentApplication\n                    [< Inline \"new $global.Msal.UserAgentApplication($options)\" >] (options: Configuration) =\n                    [< Inline \"$this.handleRedirectCallback($tokenReceivedCallback, $errorReceivedCallback) \" >] member this.handleRedirectCallback(tokenReceivedCallback: tokenReceivedCallback, errorReceivedCallback: errorReceivedCallback) : unit   = X<_>\n                    [< Inline \"$this.handleRedirectCallback($authCallback)                                  \" >] member this.handleRedirectCallback(authCallback: authResponseCallback) : unit                  = X<_>\n                    [< Inline \"$this.loginPopup(   $request)                                                \" >] member this.loginPopup          (?request: AuthenticationParameters  ) : Promise<AuthResponse> = X<_>\n                    [< Inline \"$this.loginRedirect($request)                                                \" >] member this.loginRedirect       (?request: AuthenticationParameters  ) : unit                  = X<_>\n                    [< Inline \"$this.acquireTokenSilent  ($request)                                         \" >] member this.acquireTokenSilent  ( request: AuthenticationParameters  ) : Promise<AuthResponse> = X<_>\n                    [< Inline \"$this.acquireTokenRedirect($request)                                         \" >] member this.acquireTokenRedirect( request: AuthenticationParameters  ) : unit                  = X<_>\n                    [< Inline \"$this.acquireTokenPopup   ($request)                                         \" >] member this.acquireTokenPopup   ( request: AuthenticationParameters  ) : Promise<AuthResponse> = X<_>\n                    [< Inline \"$this.logout()                                                               \" >] member this.logout              ()                                     : unit                  = X<_>\n                    [< Inline \"$this.getAccount()                                                           \" >] member this.getAccount          ()                                     : Account               = X<_>\n                    //[< Inline \"$this.getUserState($state)                                                   \" >] member this.getUserState        (state: string)                        : string                = X<_>\n            \n    \n    //#cd @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/projects/ProzperServer\"\n    module ProzperServer =\n    \n        //#define NETSTANDARD20\n        //#define WEBSHARPER\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\LayoutEngine\\bin\\LayoutEngine.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\ProzperServer\\bin\\ProzperServer.dll\"\n        \n        [< JavaScript >]\n        module ClientSide =\n            open FsRoot\n            open FsRoot.ProzperServer\n            \n            [< AutoOpen >]\n            module Templating =\n                open WebSharper.UI.Templating\n                let [< Literal >] rootdir = @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\ProzperServer\\website\"\n            \n                let [< Literal >] TemplatesFileName = rootdir + @\"\\indexDes.html\"\n                type TemplateLib  = Template< TemplatesFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n            \n                //let [< Literal >] LoginFileName = rootdir + @\"\\Login.html\"\n                //type TemplateLogin  = Template< LoginFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n            \n                if IsClient then printfn \"%s\" TemplatesFileName\n            \n            module Msal =\n                open Msal\n            \n                [< Inline \"console.log($o)\" >]\n                let consoleLog o : unit = X<_>\n            \n                let callback(errorDesc, token, error, tokenType, state) = \n                    consoleLog(errorDesc, error, tokenType, token, state)\n            \n                let storeValue name v =\n                    if IsClient then\n                        JS.Window.LocalStorage.SetItem(name, v)\n                        v\n                    else \"\"\n            \n                let storageGetItem name =\n                    if IsClient then\n                        JS.Window.LocalStorage.GetItem name\n                    else \"\"\n            \n                let storageSetItem(name, v) =\n                    if IsClient then\n                        JS.Window.LocalStorage.SetItem(name, v)\n            \n                let appId = if IsClient && JS.Window.Location.Host.StartsWith \"prozper0\" then \"76703639-1d21-4bc3-bd46-c764f5ea78ee\" else \"70ad4f9b-9a2b-409e-9c1e-d04dbb2e7cf2\"\n            \n                let applicationId       = storeValue \"applicationId\"          appId\n                let tenantName          = storeValue \"tenantName\"             \"prozper\"\n                let ref                 = storeValue \"ref\"                    \"\"\n                let extraQueryParms     = storeValue \"extraQueryParms\"        \"mkt=es-us\"\n                let refreshBefore       = storeValue \"refreshBefore\"          \"0\"\n                let createOnStart       = storeValue \"createOnStart\"          \"1\"\n                let forceLogin          = storeValue \"forceLogin\"             \"1\"\n                let signInPolicy        = storeValue \"signInPolicy\"           \"B2C_1_SignIn\"\n                let signUpPolicy        = storeValue \"signUpPolicy\"           \"B2C_1_Registrarse\"\n                let editProfilePolicy   = storeValue \"editProfilePolicy\"      \"B2C_1_EditarPerfil\"\n                let resetPasswordPolicy = storeValue \"resetPasswordPolicy\"    \"B2C_1_PasswordReset\"\n                let policyType          = storeValue \"policyType\"             \"SignIn\"\n                match storageGetItem \"preambleState\" with\n                | \"InPreamble\"  | \"\" | null ->\n                                          storeValue \"preambleState\"          \"GoToSignIn\" |> ignore\n                |_->()\n            \n                let getAuthority tenantName policyName = sprintf \"https://%s.b2clogin.com/tfp/%s.onmicrosoft.com/%s\" tenantName tenantName policyName\n            \n                let authority           = getAuthority tenantName signInPolicy\n                let userO               = Var.Create None\n            \n                let redirectCallback(error: AuthError, resp: AuthResponse) = \n                    try \n                        if box error <> null then consoleLog (\"redirectCallback ERROR: \", error)\n                        if box resp  <> null then consoleLog (\"redirectCallback: \"      , resp )\n                    with e -> printfn \"%A %s\" e e.StackTrace\n            \n                let agent = \n                    lazy\n                        let agent = \n                          UserAgentApplication(\n                            Configuration.New(auth = AuthOptions.New( \n                                                    clientId          = applicationId\n                                                ,   authority         = authority    \n                                                ,   validateAuthority = false) )\n                          )\n                        agent.handleRedirectCallback( FuncWithArgs<_,_> redirectCallback )\n                        agent\n            //            UserAgentApplication(applicationId\n            //                , authority\n            //                , callback\n            //                , UserAgentApplication.Options(validateAuthority         = false\n            //                                            ,  storeAuthStateInCookie    = false ))\n            \n                let getId userO = userO |> Option.map (fun user -> user?idToken?oid) |> Option.defaultValue \"\"\n            \n                let referidoPor() = storageGetItem \"referidoPor\"\n                let claims user = \n                    let r = [|\n                        \"oid\"                   ,  user?idToken?oid \n                        \"city\"                  ,  user?idToken?city \n                        \"country\"               ,  user?idToken?country \n                        \"extension_DateOfBirth\" ,  user?idToken?extension_DateOfBirth \n                        \"given_name\"            ,  user?idToken?given_name \n                        \"postalCode\"            ,  user?idToken?postalCode \n                        \"state\"                 ,  user?idToken?state \n                        \"streetAddress\"         ,  user?idToken?streetAddress \n                        \"family_name\"           ,  user?idToken?family_name \n                        \"emails\"                , (user?idToken?emails:string[]).[0]\n                        \"referidoPor\"           ,  referidoPor()\n                    |]\n                    storageSetItem(\"referidoPor\", \"\")\n                    r\n            \n                let executePolicy force (policy:Policy) =\n                    (if force then \"1\" else \"0\") |> storeValue \"forceLogin\"   |> ignore\n                    JS.Window.Location.Href      |> storeValue \"goInsideLink\" |> ignore\n                    string policy                |> storeValue \"policyType\"   |> ignore\n                    JS.Window.Location.Replace \"blob/Msal.html\"\n            \n                let checkUser() =\n                    async {\n                        do! Async.Sleep 100\n                        while true do\n                            let newO =\n                                match agent.Value.getAccount() with\n                                | null -> None \n                                | user -> Some user\n                            if getId newO <> getId userO.Value then userO.Set newO\n                            if userO.Value = None then executePolicy false SignIn\n                            do! Async.Sleep 9000\n                    } |> Async.Start\n            \n                let logout          () = executePolicy true SignIn\n            \n            \n                let authParms () =\n                    AuthenticationParameters.New( scopes = [|   sprintf \"https://%s.onmicrosoft.com/%s/user_impersonation\" tenantName appId \n                                                                sprintf \"https://%s.onmicrosoft.com/%s/Prozper.Admin\"      tenantName appId |] )\n            \n                let getTokenO0() = async {\n                    let someToken from tk = \n                        if tk = null then \n                            consoleLog (from + \" token is null!!\")\n                            None \n                        else Some tk\n                    match userO.Value with\n                    | Some user  -> try \n                                        let! auth = agent.Value.acquireTokenSilent(authParms () ) |> Promise.AsAsync \n                                        //consoleLog auth\n                                        return someToken \"getTokenO0 (0): \" auth.accessToken\n                                    with e ->\n                                        consoleLog (\"getTokenO0 (1): \", e.Message)\n                                        try\n                                            let! auth = Async.FromContinuations(fun (ok, ko, ca) -> \n                                                    agent.Value.handleRedirectCallback( FuncWithArgs<_,_> (fun (error: AuthError, resp: AuthResponse) ->\n                                                        try \n                                                            if box error <> null then \n                                                                consoleLog (\"redirectCallback ERROR: \", error)\n                                                                ko (exn error.errorMessage)\n                                                            elif box resp  <> null then \n                                                                consoleLog (\"redirectCallback: \"      , resp )\n                                                                ok resp\n                                                        with e -> printfn \"%A %s\" e e.StackTrace\n                                                    ) )\n                                                    agent.Value.acquireTokenRedirect( authParms () ) \n                                                )\n                                            return someToken \"getTokenO0 (2): \" auth.accessToken\n                                        with e ->\n                                            consoleLog (\"getTokenO0 (3): \", e.Message)\n                                            return None\n                    | None       -> consoleLog \"getTokenO0 (4): No user connected!\"\n                                    return None\n                    //return\n                    //    match JS.Window.SessionStorage.GetItem \"msal.idtoken\" with\n                    //    | \"\" | null -> None\n                    //    | token     -> Some token\n                }\n            \n                let getTokenO = \n                    let agent = Mailbox.callA print getTokenO0\n                    fun () -> agent.PostAndAsyncReply(fun reply -> reply, () )\n            [< JavaScript >]\n            module ModeloUI =\n            \n                let modeloV = Var.Create {\n                    idAliado      = IdAliado \":\"\n                    aliados       = [||]\n                    anoActual     = System.DateTime.Now.Year\n                    periodoActual = System.DateTime.Now.Month\n                    premisas      = premisasCalculo\n                    nevento       = -2L\n                }\n            \n                let formasPagoAliadoV : Var<FormaPago []> = Var.Create [||]\n            \n                let invitacionesV = Var.Create \"\"    \n                let emailsInvitarW = \n                    invitacionesV.View |> View.Map(\n                        function\n                        | REGEX rexEmail \"gi\" r -> r\n                        |_-> [||]\n                        >> Seq.distinct\n                        >> Seq.sort\n                        >> String.concat \"\\n\"\n                    )\n                let invitacionesDisabledW = emailsInvitarW |> View.Map(function | \"\" -> \"disabled\" |_-> \"\")\n            \n                let selAliadoIdOV = Var.Create None\n            \n                let refAliadoIdOV : Var<IdAliado option> = Var.Create None\n            \n                let rec separate s parts =\n                    match s with\n                    | \"\" -> parts |> String.concat \",\"\n                    | _  -> separate (s.Left -3) (s.Right 3 :: parts)\n            \n                let money (m:int) = \"$\" + separate (string m) []\n            \n                type EndPoint =\n                | [< EndPoint \"\" >] DefaultEP\n                |                   NoUser\n                |                   PreRegister\n                |                   Content of string\n                | [<Wildcard>]      Pdf     of string\n                | [<Wildcard>]      Video   of string\n            \n                open Sitelets.InferRouter\n                module AF = FsRoot.LibraryJS.AppFramework \n            \n                let endPointV   = if IsClient then Router.Infer() |> Router.InstallHash DefaultEP else Var.Create DefaultEP\n            \n            \n                [< Inline \"showPDF($f)\" >]\n                let showPdf (f:string) : unit = X<_>\n            \n                [< Inline \"playVideo()\" >]\n                let playVideo () : unit = X<_>\n            \n                endPointV.View |> View.Sink(\n                    function\n                    | NoUser \n                    | PreRegister   -> ()\n                    | Pdf   f       -> showPdf f\n                    | Video _       -> playVideo()\n                    |_-> Msal.checkUser()\n                )\n            \n                let contentVar =\n                    Var.Make \n                        (View.Map2 \n                            (fun _ -> function\n                            | DefaultEP       when Msal.userO.Value <> None -> \"ProzperLyt.mainContent\"\n                            | Content     lyt when Msal.userO.Value <> None -> lyt\n                            | PreRegister                                   -> \"ProzperLyt.cntPreRegister\"\n                            | Pdf         _                                 -> \"ProzperLyt.cntPDF\"\n                            | Video       _                                 -> \"ProzperLyt.cntVideo\"\n                            | _                                             -> \"ProzperLyt.cntFormaNoUser\"\n                            )\n                            Msal.userO.View endPointV.View )\n                        (function\n                        | \"ProzperLyt.mainContent\"  -> DefaultEP\n                        | lyt                       -> Content lyt\n                        >> (fun v -> if endPointV.Value <> v then endPointV.Set v)\n                        )\n            \n                let aliadoIdDoc fDoc =\n                    View.Do {\n                        let! modelo   = modeloV      .View\n                        let  aid      = modelo.idAliado\n                        let  aliadoO  = modelo.aliados |> Seq.tryFind (fun al -> al.id = aid)\n                        return \n                            match aliadoO with\n                            | None    -> Doc.Empty\n                            | Some al -> View.Const al |> fDoc\n                    } |> Doc.BindView id\n            \n                let aliadoW =\n                    View.Do {\n                        let! modelo   = modeloV      .View\n                        let  aid      = modelo.idAliado\n                        let  aliadoO  = modelo.aliados |> Seq.tryFind (fun al -> al.id = aid)\n                        return \n                            match aliadoO with\n                            | None    -> Aliado.empty\n                            | Some al -> al\n                    }\n            \n                let selAliadoIdDoc fDoc =\n                    View.Do {\n                        let! modelo   = modeloV      .View\n                        let! selAlIdO = selAliadoIdOV.View\n                        let  aliadoO  = selAlIdO |> Option.bind (fun aid -> modelo.aliados |> Seq.tryFind (fun al -> al.id = aid) )\n                        return \n                            match aliadoO with\n                            | None    -> Doc.Empty\n                            | Some al -> View.Const al |> fDoc\n                    } |> Doc.BindView id\n            \n                type Aliado with\n                    static member LoggedId = Msal.userO.Value |> Option.map (fun user -> user?idToken?oid) |> Option.defaultValue \"\" |> IdAliado\n            \n                module Rpc =\n                    //Remoting.installBearer Msal.getTokenO\n                    let llamadas, addLlamadas =\n                        let llamadas = Var.Create 0\n                        llamadas.View, fun n -> \n                            async {\n                                do      llamadas.Set <| llamadas.Value + n\n                                do!     Async.Sleep 50\n                            }\n                    let iterA arm = AsyncResult.iterA JS.Alert id arm\n                    let [< Inline >] inline llamar (f : _ -> Async<Result<_,string>>) p  = async {\n                        try do!     addLlamadas  1\n                            return! f p\n                        finally     addLlamadas -1 |> Async.Start\n                    }\n                    let [< Inline >] inline llamarT (f : string -> _ -> Async<Result<_,string>>) p  = \n                        asyncResult {\n                        try do!     addLlamadas  1\n                            let!    tk    = Msal.getTokenO() |> Async.map Result.rtn |> AsyncResult.absorbO (fun () -> JS.Window.Location.Href <- \"/Login\" ; \"User not logged in\")\n                            return! f tk p\n                        finally     addLlamadas -1  |> Async.Start\n                    }\n                    let obtenerUnions            p = llamar              Rpc0.obtenerUnions                                p\n                    let obtenerIdInfluyente      p = llamar              Rpc0.obtenerIdInfluyente                          p\n                    let agregarUsuarioSiEsNuevo  p = llamarT (fun tk  -> Rpc0.agregarUsuarioSiEsNuevo  tk Aliado.LoggedId) p\n                    let ejecutarDataEventoNuevo  p = llamarT (fun tk  -> Rpc0.ejecutarDataEventoNuevo  tk Aliado.LoggedId) p\n                    let enviarCorreosInvitacion  p = llamarT (fun tk  -> Rpc0.enviarCorreosInvitacion  tk Aliado.LoggedId) p\n                    let obtenerFormasDePago      p = llamarT (fun tk ()->Rpc0.obtenerFormasDePagoId    tk Aliado.LoggedId) p\n                    let registrarTarjeta         p = llamarT (fun tk  -> Rpc0.registrarTarjeta         tk Aliado.LoggedId) p\n                    let registrarCuenta          p = llamarT (fun tk  -> Rpc0.registrarCuenta          tk Aliado.LoggedId) p\n                    let validarFormaPago         p = llamarT (fun tk  -> Rpc0.validarFormaPago         tk Aliado.LoggedId) p\n                    let borrarFormaPago          p = llamarT (fun tk  -> Rpc0.borrarFormaPago          tk Aliado.LoggedId) p\n                    let obtenerFormasDePagoPara  p = llamarT (fun tk  -> Rpc0.obtenerFormasDePagoPara  tk                ) p\n                    let obtenerFormasDePagoId    p = llamarT (fun tk  -> Rpc0.obtenerFormasDePagoId    tk                ) p\n                    let obtenerListaDocs         p = llamarT (fun tk  -> Rpc0.obtenerListaDocs         tk                ) p\n                    let obtenerEstadoParaUsuario p = llamarT (fun tk  -> Rpc0.obtenerEstadoParaUsuario tk                ) Aliado.LoggedId\n                    let actualizarSubscripcion   p = llamarT (fun tk  -> Rpc0.actualizarSubscripcion   tk Aliado.LoggedId) p\n                    let obtenerTransaccionesPara p = llamarT (fun tk  -> Rpc0.obtenerTransaccionesPara tk                ) Aliado.LoggedId\n                    let refrescarTransacciones   p = llamarT (fun tk  -> Rpc0.refrescarTransacciones   tk                ) p\n                    \n            \n                    WebSharper.Remoting.EndPoint <- Rpc0.serverEndPoint.Value + \"rpc/rpc\"\n                [< AutoOpen >]\n                module Refresh =\n                    let mutable shouldRefresh = true\n                \n                    let refrescarData force = \n                        if force then shouldRefresh <- true\n                        match Msal.userO.Value with\n                        | Some user ->\n                            asyncResult {\n                                if Msal.referidoPor() <> \"\" then\n                                    do!   Msal.claims user |> Rpc.agregarUsuarioSiEsNuevo\n                                if not JS.Document.Hidden then\n                                    if shouldRefresh then\n                                        let! data = Rpc.obtenerEstadoParaUsuario ()\n                                        shouldRefresh <- false\n                                        //if modeloV.Value <> data then modeloV.Set data\n                                        modeloV.Set data\n                            } |> Rpc.iterA\n                        |_-> modeloV.Set modeloVacio\n                \n                    if IsClient then\n                \n                        Msal.userO.View |> View.Sink (fun _-> refrescarData true)\n                \n                        async {\n                            while true do\n                                do! Async.Sleep (5 * 60 * 1000)\n                                //refrescarData true\n                        } |> Async.Start\n                \n                        try \n                            JS.Document.AddEventListener(\"visibilityChange\", (fun () -> (*refrescarData false*)() ), false)\n                        with _ -> ()\n                \n                    \n                module VariousUI = \n                \n                    let inline fst3 (v,_,_) = v\n                    let inline snd3 (_,v,_) = v\n                    let inline thr3 (_,_,v) = v\n                \n                    let alertIfNone name vO f = \n                        match vO with\n                        | None   -> JS.Alert (\"Error not caught: \" + name)\n                                    None\n                        | Some v -> f v\n                \n                    let paises   = Var.Create [||]\n                    let estados  = Var.Create [||]\n                    let tiposDir = Var.Create [||]\n                    let tiposTel = Var.Create [||]\n                    let generos  = Var.Create [||]\n                    let tiposCta = Var.Create [||]\n                    let tiposTar = Var.Create [||]\n                    let statuses = Var.Create [||]\n                    let aniosV   = Var.Create [||]\n                    let mesesV   = Var.Create [||]\n                    let tiposAr  = Var.Create [||]\n                    let statusAr = Var.Create [||]\n                \n                    if IsClient then\n                        asyncResult {\n                            let! p, e, td, tl, g, tc, tt, ss, mm, yy, ta, sa =  Rpc.obtenerUnions()\n                            paises  .Set p\n                            estados .Set e\n                            tiposDir.Set td\n                            tiposTel.Set tl\n                            generos .Set g\n                            tiposCta.Set tc\n                            tiposTar.Set tt\n                            statuses.Set ss\n                            aniosV  .Set yy\n                            mesesV  .Set mm\n                            tiposAr .Set ta\n                            statusAr.Set sa\n                        } |> Rpc.iterA \n                \n                    let crearOption   n   = Html.Elt.option [             ] [ Html.text n] :> Doc\n                    let crearOption2  n v = Html.Elt.option [ attr.value v] [ Html.text n] :> Doc\n                    let crearOptions  ns  = ns  |> Seq.map               crearOption       |> Doc.Concat\n                    let crearOptions2 nvs = nvs |> Seq.map (fun (n,v) -> crearOption2 n v) |> Doc.Concat\n                \n                    let removeButton f doc = \n                        Html.form [ attr.``class`` \"mui-panel\" ] \n                            [   doc \n                                Doc.Button \"borrar\" [ Html.attr.title \"borrar\" ] f\n                            ]\n                \n                \n                module CorreoElectronico =\n                    open VariousUI\n                \n                    let formaDoc (corV : Var<CorreoElectronico option>) =\n                        let mensaje = Var.Create \"\"\n                \n                        let forma =\n                            TemplateLib.Correo()\n                                .Mensaje( mensaje.V )\n                                .Create()\n                        match corV.Value with | None -> () | Some v -> forma.Vars.ConfirmarCorreo.Set <| v.ToString()\n                        V (\n                            if     forma.Vars.Correo         .V.Trim() = \"\" \n                                || forma.Vars.ConfirmarCorreo.V.Trim() = \"\"\n                                || forma.Vars.Correo         .V.Trim()\n                                 = forma.Vars.ConfirmarCorreo.V.Trim() \n                                then \"\" \n                                else \"Correos no son iguales\"\n                        ) |> View.Sink mensaje.Set\n                        corV.View \n                        |> View.Sink (function\n                            | None     -> ()\n                            | Some cor -> \n                            forma.Vars.Correo.Set <| cor.email\n                            //forma.Vars.ConfirmarCorreo.Set <| cor.ToString()\n                        )\n                        let requeridosW =\n                            V(  [   forma.Vars.Correo         .V.Trim() =  \"\" , \"Correo\"\n                                    forma.Vars.ConfirmarCorreo.V.Trim() =  \"\" , \"ConfirmarCorreo\"\n                                    mensaje                   .V        <> \"\" , mensaje.V\n                                ]\n                                |> Seq.filter fst\n                                |> Seq.map    snd\n                            )\n                        V (\n                            if not (Seq.isEmpty requeridosW.V)  then None else\n                            corV.Value\n                            |> Option.orElse (Some correoVacio)\n                            |> Option.map    (fun v -> { v with email = forma.Vars.Correo.V } )\n                        ) |> View.Sink (fun v -> if corV.Value <> v then corV.Set v)\n                        requeridosW, forma.Doc\n                \n                \n                module Telefono =\n                    open VariousUI\n                \n                    let formaDoc (telOV : Var<Telefono option>) = \n                        let forma =\n                            TemplateLib.Telefono()\n                                .Tipos(    V( crearOptions tiposTel.V ).V )\n                                .Create()\n                \n                        telOV.View \n                        |> View.Sink (function\n                            | None     -> ()\n                            | Some tel -> \n                            forma.Vars.CodigoArea  .Set <|              tel.codigoArea  \n                            forma.Vars.CodigoPais  .Set <|              tel.codigoPais\n                            forma.Vars.Telefono    .Set <|              tel.numero    \n                            forma.Vars.Extension   .Set <|              tel.extension\n                            forma.Vars.TipoTelefono.Set <| sprintf \"%O\" tel.tipoTelefono\n                        )\n                        let requeridosW =\n                            V(  [   forma.Vars.CodigoPais  .V.Trim() = \"\" , \"CodigoPais\"\n                                    forma.Vars.Telefono    .V.Trim() = \"\" , \"Telefono\"\n                                    forma.Vars.TipoTelefono.V.Trim() = \"\" , \"TipoTelefono\"\n                                ]\n                                |> Seq.filter fst\n                                |> Seq.map    snd\n                            )\n                        V (\n                            if not (Seq.isEmpty requeridosW.V)  then None else\n                            forma.Vars.TipoTelefono.V.Trim() |> TipoTelefono.tryParse |> alertIfNone \"TipoTelefono\" <| fun tipo ->                \n                            Some {\n                                codigoArea   = forma.Vars.CodigoArea  .V.Trim()\n                                codigoPais   = forma.Vars.CodigoPais  .V.Trim()\n                                numero       = forma.Vars.Telefono    .V.Trim()\n                                extension    = forma.Vars.Extension   .V.Trim()\n                                tipoTelefono = tipo\n                                mensajes     = false\n                            }\n                        ) |> View.Sink (fun v -> if telOV.Value <> v then telOV.Set v)\n                        requeridosW, forma.Doc\n                 \n                module Direccion =\n                    open VariousUI\n                \n                    let formaDoc (dirV : Var<Direccion option>) =\n                        let forma =\n                            TemplateLib.Direccion()\n                                .Paises(   V( crearOptions paises  .V ).V )\n                                .Estados(  V( crearOptions estados .V ).V )\n                                .Tipos(    V( crearOptions tiposDir.V ).V )\n                                .Create()\n                \n                        dirV.View \n                        |> View.Sink (function\n                            | None     -> ()\n                            | Some dir -> \n                            forma.Vars.Direccion1   .Set <| dir.linea1  \n                            forma.Vars.Direccion2   .Set <| dir.linea2  \n                            forma.Vars.Ciudad       .Set <| dir.ciudad    \n                            forma.Vars.Estado       .Set <| sprintf \"%O\" dir.estado\n                            forma.Vars.Pais         .Set <| sprintf \"%O\" dir.pais\n                            forma.Vars.CodigoPostal .Set <| sprintf \"%O\" dir.zonaPostal\n                            forma.Vars.TipoDireccion.Set <| sprintf \"%O\" dir.tipoDireccion\n                        )\n                        let requeridosW = \n                            V( \n                                [\n                                    forma.Vars.Direccion1   .V.Trim() = \"\" , \"Direccion1\"\n                                    forma.Vars.Ciudad       .V.Trim() = \"\" , \"Ciudad\"\n                                    forma.Vars.Estado       .V.Trim() = \"\" , \"Estado\"\n                                    forma.Vars.Pais         .V.Trim() = \"\" , \"Pais\"\n                                    forma.Vars.CodigoPostal .V.Trim() = \"\" , \"CodigoPostal\"\n                                    forma.Vars.TipoDireccion.V.Trim() = \"\" , \"TipoDireccion\"\n                                ]\n                                |> Seq.filter fst\n                                |> Seq.map    snd\n                            )\n                        V (\n                            if not (Seq.isEmpty requeridosW.V)  then None else\n                            forma.Vars.TipoDireccion.V.Trim() |> TipoDireccion.tryParse |> alertIfNone \"TipoDireccion\" <| fun tipo   ->                \n                            forma.Vars.Estado       .V.Trim() |> Estado       .tryParse |> alertIfNone \"Estado\"        <| fun estado -> \n                            forma.Vars.Pais         .V.Trim() |> Pais         .tryParse |> alertIfNone \"Pais\"          <| fun pais   -> \n                            forma.Vars.CodigoPostal .V.Trim() |> ZonaPostal   .tryParse |> alertIfNone \"CodigoPostal\"  <| fun codigo -> \n                            Some {\n                                tipoDireccion = tipo\n                                linea1        = forma.Vars.Direccion1.V.Trim()\n                                linea2        = forma.Vars.Direccion2.V.Trim()\n                                ciudad        = forma.Vars.Ciudad    .V.Trim()\n                                estado        = estado\n                                pais          = pais\n                                zonaPostal    = codigo\n                                Direccion.authorizeIdR  = dirV.V |> Option.map (fun dir -> dir.authorizeIdR) |> Option.defaultValue (Error \"\")\n                            }            \n                        ) |> View.Sink (fun v -> if dirV.Value <> v then dirV.Set v)\n                        requeridosW, forma.Doc\n                \n                module CuentaBancaria =\n                    open VariousUI\n                \n                    let formaDoc (ctaV  : Var<CuentaBancaria * string * bool>) =\n                        let disabledW = ctaV.View |> View.Map thr3\n                        let forma =\n                            TemplateLib.CuentaBancaria()\n                                .TiposCuenta( V( crearOptions tiposCta.V ).V )\n                                .Mensaje(     V( snd3         ctaV    .V ).V ) \n                                .Disabled1(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled2(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled3(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled4(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled5(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Create()\n                \n                        ctaV .View \n                        |> View.Sink (fun (cta, _, _) -> \n                            forma.Vars.Titular      .Set <| cta.titular\n                            forma.Vars.Banco        .Set <| cta.banco\n                            forma.Vars.TipoCuenta   .Set <| sprintf \"%O\" cta.tipo\n                            forma.Vars.Numero       .Set <| match cta.numero  with NumeroCuenta  s -> s\n                            forma.Vars.Routing      .Set <| match cta.routing with RoutingNumber s -> s\n                        )\n                        let requeridosW = \n                            V( \n                                [\n                                    forma.Vars.Titular      .V.Trim() = \"\" , \"Titular\"\n                                    forma.Vars.Banco        .V.Trim() = \"\" , \"Banco\"\n                                    forma.Vars.Numero       .V.Trim() = \"\" , \"Numero de Cuenta\"\n                                    forma.Vars.Routing      .V.Trim() = \"\" , \"ABA/Routing Number\"\n                                ]\n                                |> Seq.filter fst\n                                |> Seq.map    snd\n                            )\n                        V (\n                            if not (Seq.isEmpty requeridosW.V)  then None else\n                            forma.Vars.TipoCuenta   .V.Trim() |> TipoCuenta   .tryParse |> alertIfNone \"TipoCuenta\"   <| fun tipoCta ->\n                            Some {\n                                banco         = forma.Vars.Banco  .V.Trim()\n                                titular       = forma.Vars.Titular.V.Trim()\n                                numero        = forma.Vars.Numero .V.Trim() |> NumeroCuenta\n                                routing       = forma.Vars.Routing.V.Trim() |> RoutingNumber\n                                tipo          = tipoCta\n                            }            \n                        ) |> View.Sink (function |None -> () | Some v -> if fst3 ctaV .Value <> v then ctaV .Set (v, \"\", false) )\n                        requeridosW, forma.Doc\n                \n                    let formaDocO (ctaOV  : Var<(CuentaBancaria * string * bool) option>) =\n                        formaDoc (Var.Lens ctaOV (Option.defaultValue (ctaVacio, \"\", false) ) (fun _ v -> Some v ))\n                \n                module TarjetaCredito =\n                    open VariousUI\n                \n                    let formaDoc (tarV  : Var<(TarjetaCredito * string * bool)>) =\n                        let disabledW = tarV.View |> View.Map thr3\n                        let forma =\n                            TemplateLib.TarjetaCredito()\n                                .TiposTarjeta( V( tiposTar.V                   |> crearOptions  ).V )\n                                .Mensaje(      V( tarV    .V                   |> snd3          ).V )\n                                .Anios(        V( aniosV  .V |> Seq.map string |> crearOptions  ).V )\n                                .Meses(        V( mesesV  .V |> Seq.map string |> crearOptions  ).V )\n                                .Disabled1(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled2(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled3(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled4(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Disabled5(    attr.disabledDynPred (View.Const \"\") disabledW       )\n                                .Visible(      attr.styleDyn <| V( if disabledW.V then \"display:None\" else \"\" ) )\n                                .Create()\n                \n                        tarV .View \n                        |> View.Sink (fun (tar, mensaje, validated) -> \n                            forma.Vars.Titular      .Set <| tar.titular\n                            forma.Vars.TipoTarjeta  .Set <| sprintf \"%O\"        tar.tipoTarjeta\n                            forma.Vars.Numero       .Set <| match tar.numero with NumeroTarjeta s -> s\n                            forma.Vars.AnioVenc     .Set <| sprintf \"%04d\"      tar.expiracion.anio\n                            forma.Vars.MesVenc      .Set <| match tar.expiracion.mes with \n                                                            | Mes.Enero      -> \"Enero\"\n                                                            | Mes.Febrero    -> \"Febrero\"   \n                                                            | Mes.Marzo      -> \"Marzo\"     \n                                                            | Mes.Abril      -> \"Abril\"     \n                                                            | Mes.Mayo       -> \"Mayo\"      \n                                                            | Mes.Junio      -> \"Junio\"     \n                                                            | Mes.Julio      -> \"Julio\"     \n                                                            | Mes.Agosto     -> \"Agosto\"    \n                                                            | Mes.Septiembre -> \"Septiembre\"\n                                                            | Mes.Octubre    -> \"Octubre\"   \n                                                            | Mes.Noviembre  -> \"Noviembre\" \n                                                            | Mes.Diciembre  -> \"Diciembre\"\n                                                            | _              -> \"XX\"\n                        )\n                        let requeridosW = \n                            V( \n                                [\n                                    forma.Vars.Titular      .V.Trim() = \"\" , \"Titular\"\n                                    forma.Vars.TipoTarjeta  .V.Trim() = \"\" , \"TipoTarjeta\"\n                                    forma.Vars.Numero       .V.Trim() = \"\" , \"Numero\"\n                                    forma.Vars.AnioVenc     .V.Trim() = \"\" , \"Ano de Vencimiento\"\n                                    forma.Vars.MesVenc      .V.Trim() = \"\" , \"Mes de Vencimiento\"\n                                ]\n                                |> Seq.filter fst\n                                |> Seq.map    snd\n                            ) \n                        V (\n                            if not (Seq.isEmpty requeridosW.V)  then None else\n                            forma.Vars.TipoTarjeta.V.Trim() |> TipoTarjeta.tryParse |> alertIfNone \"Tipo Tarjeta\" <| fun tipoTar ->\n                            Some {\n                                tipoTarjeta   = tipoTar\n                                titular       = forma.Vars.Titular   .V.Trim()\n                                numero        = forma.Vars.Numero    .V.Trim() |> NumeroTarjeta\n                                expiracion    = {\n                                    anio = forma.Vars.AnioVenc.V.Trim() |> ParseO.parseIntO |> Option.defaultValue 0\n                                    mes  = forma.Vars.MesVenc .V.Trim() |> (function\n                                                                            | \"Febrero\"    -> Mes.Febrero   \n                                                                            | \"Marzo\"      -> Mes.Marzo     \n                                                                            | \"Abril\"      -> Mes.Abril     \n                                                                            | \"Mayo\"       -> Mes.Mayo      \n                                                                            | \"Junio\"      -> Mes.Junio     \n                                                                            | \"Julio\"      -> Mes.Julio     \n                                                                            | \"Agosto\"     -> Mes.Agosto    \n                                                                            | \"Septiembre\" -> Mes.Septiembre\n                                                                            | \"Octubre\"    -> Mes.Octubre   \n                                                                            | \"Noviembre\"  -> Mes.Noviembre \n                                                                            | \"Diciembre\"  -> Mes.Diciembre \n                                                                            |_             -> Mes.Enero)\n                \n                                }\n                            }            \n                        ) |> View.Sink (function |None -> () | Some v -> if fst3 tarV .Value <> v then tarV .Set (v, \"\", false) ) \n                        requeridosW, forma.Doc\n                \n                    let formaDocO (tarOV  : Var<(TarjetaCredito * string * bool) option>) =\n                        formaDoc (Var.Lens tarOV (Option.defaultValue (tarVacio, \"\", false) ) (fun _ v -> Some v ))\n                \n                module DatosPersonales =\n                    open VariousUI\n                \n                    let formaDoc (datosV : Var<DatosPersonales option>) =\n                        let forma    = \n                            TemplateLib.DatosPersonales()\n                                .Generos(        V( crearOptions generos.V ).V            )\n                                .Create()\n                        datosV.View\n                        |> View.Sink (function\n                            | None     -> ()\n                            | Some dat -> \n                            forma.Vars.Nombres        .Set <| (dat.nombre1   + \" \" + dat.nombre2   ).Trim()\n                            forma.Vars.Apellidos      .Set <| (dat.apellido1 + \" \" + dat.apellido2 ).Trim()\n                            forma.Vars.FechaNacimiento.Set <| Date.toYYYYMMDD \"-\"   dat.fechaNacimiento\n                            forma.Vars.Genero         .Set <| sprintf \"%A\" dat.genero\n                        )                \n                        let requeridosW =\n                            V(  [   forma.Vars.Nombres        .V.Trim() = \"\" , \"Nombres\"\n                                    forma.Vars.Apellidos      .V.Trim() = \"\" , \"Apellidos\"\n                                    forma.Vars.FechaNacimiento.V.Trim() = \"\" , \"Fecha de Nacimiento\"\n                                    forma.Vars.Genero         .V.Trim() = \"\" , \"Genero\"\n                                ]\n                                |> Seq.filter fst\n                                |> Seq.map    snd\n                            ) \n                        V (\n                            if not (Seq.isEmpty requeridosW.V)  then None else\n                            forma.Vars.Genero         .V |> Genero.tryParse    |> alertIfNone \"Genero\"           <| fun genero ->\n                            forma.Vars.FechaNacimiento.V |> ParseO.parseDateO2 |> alertIfNone \"Fecha incorrecta\" <| fun fecha  ->\n                            Some {\n                                titulo          = None\n                                nombre1         = forma.Vars.Nombres  .V.Trim().Split(' ').[0  ]\n                                nombre2         = forma.Vars.Nombres  .V.Trim().Split(' ').[1..] |> String.concat \" \"\n                                apellido1       = forma.Vars.Apellidos.V.Trim().Split(' ').[0  ]\n                                apellido2       = forma.Vars.Apellidos.V.Trim().Split(' ').[1..] |> String.concat \" \"\n                                nacionalidad    = OtroP \"\"\n                                genero          = genero\n                                fechaNacimiento = fecha\n                            }            \n                        ) |> View.Sink (fun v -> if datosV.Value <> v then datosV.Set v)\n                \n                        requeridosW, forma.Doc\n                \n                \n                module FormaRegistro = \n                \n                    let formaDoc() =\n                        let mensajes      = Var.Create \"\"\n                        let mostrar       = Var.Create false\n                        let datosOV       = Var.Create None\n                        let correoOV      = Var.Create None\n                        let telefonoOV    = Var.Create None\n                        let direccionOV   = Var.Create None\n                \n                        let datReqsW, datosDoc     = DatosPersonales  .formaDoc datosOV\n                        let corReqsW, correoDoc    = CorreoElectronico.formaDoc correoOV\n                        let telReqsW, telefonoDoc  = Telefono         .formaDoc telefonoOV\n                        let dirReqsW, direccionDoc = Direccion        .formaDoc direccionOV\n                        let forma    =\n                            TemplateLib.FormaRegistro()\n                                .Mensajes(       if mostrar.V then mensajes     .V else \"\")\n                                .DatosPersonales(datosDoc                                 )\n                                .Correo(         correoDoc                                )\n                                .Telefono(       telefonoDoc                              )\n                                .Direccion(      direccionDoc                             )\n                                .Registrarse(fun ev ->\n                                    mostrar.Set true\n                                    let m =  mensajes.Value\n                                    if m.Trim() <> \"\" then JS.Alert m else \n                                        match datosOV    .Value\n                                            , correoOV   .Value\n                                            , telefonoOV .Value\n                                            , direccionOV.Value\n                                                with\n                                        | Some datos, Some correo, Some telefono, Some direccion ->\n                                            asyncResult {\n                                                let contactos = [|    \n                                                    CorreoElectronico correo\n                                                    Telefono          telefono\n                                                    Direccion         direccion \n                                                |]\n                                                let  nid  = System.Guid.NewGuid().ToString().Replace(\"-\", \"\").Substring(0,20) |> IdAliado\n                                                let! resp = (nid, datos, Some modeloV.Value.idAliado, contactos) |> RegistroNuevo |> Rpc.ejecutarDataEventoNuevo\n                                                refrescarData true\n                                                sprintf \"%A\" resp|> JS.Alert\n                                            } |> Rpc.iterA\n                                        | _ -> JS.Alert \"Error not caught FormaRegistro\"\n                                )\n                                .Create()\n                        V(  seq {\n                                yield! datReqsW.V\n                                yield! corReqsW.V\n                                yield! telReqsW.V\n                                yield! dirReqsW.V\n                            }\n                            |> String.concat \", \"\n                            |> fun es -> if es <> \"\" then \"Campos requeridos: \" + es else \"\"\n                        )   |> View.Sink mensajes.Set\n                        forma.Doc\n                \n                \n                module FormaDatos =\n                \n                    let formaAliado (aliadoW: View<Aliado>) =\n                        let mensajes      = Var.Create \"\"\n                        let mostrar       = Var.Create false\n                        let datosOV       = Var.Create None\n                        \n                        aliadoW\n                        |> View.Map  (fun a -> a.datosPersonales )\n                        |> View.Sink (Some >> datosOV.Set)\n                \n                        let datReqsW, datosDoc     = DatosPersonales.formaDoc datosOV\n                        let forma =\n                            TemplateLib.FormaDatosPersonales()\n                                .Mensajes(       if mostrar.V then mensajes     .V else \"\"                                     )\n                                .Changed(        if Some aliadoW.V.datosPersonales = datosOV.V then \"\" else \"mui-btn--primary\" )\n                                .DatosPersonales(datosDoc                                                                      )\n                                .Salvar(fun ev ->\n                                    mostrar.Set true\n                                    let m =  mensajes.Value\n                                    if m.Trim() <> \"\" then JS.Alert m else \n                                        match datosOV.Value, View.TryGet aliadoW with\n                                        | Some datos, Some al ->\n                                            asyncResult {\n                                                let! resp = ActualizarDatosPersonales (al.id, datos) |> Rpc.ejecutarDataEventoNuevo\n                                                refrescarData true\n                                                sprintf \"%A\" resp|> JS.Alert\n                                            } |> Rpc.iterA\n                                        | _ -> JS.Alert \"Error not caught FormaDatos\"\n                                )\n                                .Create()\n                \n                        V(  seq {\n                                yield! datReqsW.V\n                            }\n                            |> String.concat \", \"\n                            |> fun es -> if es <> \"\" then \"Campos requeridos: \" + es else \"\"\n                        )   |> View.Sink mensajes.Set\n                        forma.Doc\n                \n                    let formaDoc() = aliadoIdDoc formaAliado\n                \n                module FormaContactos =\n                    open VariousUI\n                \n                    let ftel = (function Telefono          tel -> Some tel |_-> None), Telefono\n                    let fcor = (function CorreoElectronico cor -> Some cor |_-> None), CorreoElectronico\n                    let fdir = (function Direccion         dir -> Some dir |_-> None), Direccion        \n                \n                    let formaTelefonos (aliadoW: View<Aliado>) =\n                        let contactosV    = Var.Create [||]\n                        \n                        aliadoW\n                        |> View.Map  (fun a -> a.contactos)\n                        |> View.Sink contactosV.Set\n                \n                        let contactosIV = V( contactosV.V |> Seq.indexed )\n                \n                        let makeVar (f, fr) i = \n                            Var.Make (V(contactosV.V |> Seq.tryItem i |> Option.bind f )) \n                                    (function Some nv -> Array.replace i (fr nv) contactosV.Value |> contactosV.Set |_-> () )\n                        \n                        let tels = V( contactosIV.V |> Seq.choose (fun (i, c) -> fst ftel c |> Option.map (fun _ -> i) ) )\n                        let cors = V( contactosIV.V |> Seq.choose (fun (i, c) -> fst fcor c |> Option.map (fun _ -> i) ) )\n                        let dirs = V( contactosIV.V |> Seq.choose (fun (i, c) -> fst fdir c |> Option.map (fun _ -> i) ) )\n                \n                        let telDocs = tels |> Doc.BindSeqCachedBy id (makeVar ftel >> Telefono         .formaDoc >> snd )\n                        let corDocs = cors |> Doc.BindSeqCachedBy id (makeVar fcor >> CorreoElectronico.formaDoc >> snd )\n                        let dirDocs = dirs |> Doc.BindSeqCachedBy id (makeVar fdir >> Direccion        .formaDoc >> snd )\n                \n                        () //FormaGenerica.forma\n                \n                \n                    let formaContactos (aliadoW: View<Aliado>) =\n                        let mensajes      = Var.Create \"\"\n                        let mostrar       = Var.Create false\n                        let contactosV    = Var.Create [||]\n                        \n                        aliadoW\n                        |> View.Map  (fun a -> a.contactos)\n                        |> View.Sink contactosV.Set\n                \n                        let contactosIV = V( contactosV.V |> Seq.indexed )\n                \n                        let makeVar (f, fr) i = \n                            Var.Make (V(contactosV.V |> Seq.tryItem i |> Option.bind f )) \n                                    (function Some nv -> Array.replace i (fr nv) contactosV.Value |> contactosV.Set |_-> () )\n                        \n                        let ftel = (function Telefono          tel -> Some tel |_-> None), Telefono\n                        let fcor = (function CorreoElectronico cor -> Some cor |_-> None), CorreoElectronico\n                        let fdir = (function Direccion         dir -> Some dir |_-> None), Direccion        \n                \n                        let tels = V( contactosIV.V |> Seq.choose (fun (i, c) -> fst ftel c |> Option.map (fun _ -> i) ) )\n                        let cors = V( contactosIV.V |> Seq.choose (fun (i, c) -> fst fcor c |> Option.map (fun _ -> i) ) )\n                        let dirs = V( contactosIV.V |> Seq.choose (fun (i, c) -> fst fdir c |> Option.map (fun _ -> i) ) )\n                \n                        let telDocs = tels |> Doc.BindSeqCachedBy id (fun i -> makeVar ftel i |> Telefono         .formaDoc |> snd |> removeButton (fun _ -> contactosV.Value |> Array.remove i |> contactosV.Set ) )\n                        let corDocs = cors |> Doc.BindSeqCachedBy id (fun i -> makeVar fcor i |> CorreoElectronico.formaDoc |> snd |> removeButton (fun _ -> contactosV.Value |> Array.remove i |> contactosV.Set ) )\n                        let dirDocs = dirs |> Doc.BindSeqCachedBy id (fun i -> makeVar fdir i |> Direccion        .formaDoc |> snd |> removeButton (fun _ -> contactosV.Value |> Array.remove i |> contactosV.Set ) )\n                \n                        let forma =\n                            TemplateLib.FormaContactos()\n                                .Mensajes(    if mostrar.V then mensajes     .V else \"\"                             )\n                                .Changed(     if aliadoW.V.contactos = contactosV.V then \"\" else \"mui-btn--primary\" )\n                                .Telefonos(   telDocs              ) \n                                .Correos(     corDocs              ) \n                                .Direcciones( dirDocs              ) \n                                .MasTelefono( fun _ -> contactosV.Value |> Array.append <| [| Telefono          telVacio    |] |> contactosV.Set)\n                                .MasCorreo(   fun _ -> contactosV.Value |> Array.append <| [| CorreoElectronico correoVacio |] |> contactosV.Set)\n                                .MasDireccion(fun _ -> contactosV.Value |> Array.append <| [| Direccion         dirVacio    |] |> contactosV.Set)\n                                .Salvar(fun ev ->\n                                    mostrar.Set true\n                                    let m =  mensajes.Value\n                                    if m.Trim() <> \"\" then JS.Alert m else \n                                        match View.TryGet aliadoW with\n                                        | Some al ->\n                                            asyncResult {\n                                                let! resp = ActualizarContactos (al.id, contactosV.Value) |> Rpc.ejecutarDataEventoNuevo\n                                                refrescarData true\n                                                sprintf \"%A\" resp|> JS.Alert\n                                            } |> Rpc.iterA \n                                        | _ -> JS.Alert \"Error not caught FormaDatos\"\n                                )\n                                .Create()\n                \n                        forma.Doc\n                \n                    let formaDoc() = aliadoIdDoc formaContactos\n                \n                module FormaFirma =\n                \n                    let mensajes    = Var.Create \"\"\n                    let firmanteV   = Var.Create \"\"\n                    let fechaHoraV  = Var.Create \"\"\n                    let locationV   = Var.Create (JSObject())\n                    let firmadoV    = Var.Create false\n                \n                    async {\n                        while true do\n                            do! Async.Sleep 1000\n                            fechaHoraV.Set <| nowStamp().Left(19)\n                    } |> Async.Start\n                \n                    let uploaded : System.Action<obj,string,JQuery.JqXHR> =\n                        System.Action<_,_,_>(fun a b c -> \n                            //refrescarListaDocs()\n                            print b \n                        )\n                \n                    [< Inline \"html2canvas($el)\" >]\n                    let html2canvas (el:Dom.Element) : Promise<Dom.Element> = X<_>\n                \n                    let toBlob (canvas:Dom.Element) (f:Blob -> unit) =\n                        if   isUndefined canvas?toBlob   |> not then canvas?toBlob        f\n                        elif isUndefined canvas?msToBlob |> not then canvas?msToBlob() |> f\n                        else JS.Alert \"Browser no es compatible: toBlob\"\n                \n                    [< Inline \"obj2Table($o)\" >]\n                    let obj2Table (o:JSObject) : unit = X<_>\n                \n                    let subirScreenShot tipo filenamePre = async {\n                        try\n                            firmadoV.Set true\n                            let! loc = Async.FromContinuations(fun (cnt, _, _) -> \n                                JQuery.JQuery.GetJSON(\"https://ipapi.co/json/\", (fun (loc, _) -> cnt (As<_> loc) ) ) |> ignore\n                            )\n                            [   \"appVersion\"\n                                \"platform\"  \n                                \"product\"\n                                \"productSub\"\n                                \"vendor\"\n                                \"languages\"\n                            ]\n                            |> Seq.iter (fun k -> (loc : JSObject).Add(k, JS.Window.Navigator?(k)) )\n                            //locationV.Set loc\n                            obj2Table loc\n                            do! Async.Sleep 100\n                            let! canvas = html2canvas(JS.Document.QuerySelector(\"#FormaFirma\")) |> Promise.AsAsync\n                            JS.Document.Body.AppendChild canvas |> ignore\n                            let filename = sprintf \"%s %s.png\" filenamePre <| fechaHoraV.Value.Replace(\":\",\".\")\n                            toBlob canvas (fun (blob:Blob) ->\n                                let fd = FormData()\n                                fd.Append(\"fname\", filename)\n                                fd.Append(\"data\" , blob    )\n                                JQuery.AjaxSettings(  Type          = JQuery.RequestType.POST\n                                                    , Url           = \"/api/subir/\" + modeloV.Value.idAliado.Id + \"/\" + filename\n                                                    , Data          = fd\n                                                    , ContentType   = Union1Of2 false\n                                                    , ProcessData   =           false\n                                                    , Success       = uploaded\n                                                )\n                                |> JQuery.JQuery.Ajax |> ignore\n                            )\n                            JS.Document.Body.RemoveChild canvas |> ignore\n                            return! ActualizarArchivos(Aliado.LoggedId, [| {\n                                            comentario = \"Firma Electronica\"\n                                            idAliado   = modeloV.Value.idAliado\n                                            modificado = System.DateTime.Now\n                                            nombre     = filename\n                                            status     = Subido\n                                            tamano     = 0L\n                                            tipo       = tipo\n                                        } |]) |> Rpc.ejecutarDataEventoNuevo\n                        finally\n                            Refresh.refrescarData true\n                            firmadoV.Set          false\n                    }\n                \n                    let formaFirma (nombre:View<string>) (contenido:Doc) tipo procesar filenamePre =\n                        let firmarDocumento() = \n                            asyncResult {\n                                if mensajes.Value <> \"\" then JS.Alert mensajes.Value else\n                                let! res = subirScreenShot tipo filenamePre\n                                do! procesar() |> AsyncResult.map JS.Alert\n                                endPointV.Set EndPoint.DefaultEP\n                            } |> Rpc.iterA\n                        let acepto   = Var.Create false\n                        //let nombreW  = V( Aliado.nombre2 aliadoW.V.datosPersonales) \n                        let ymd    (f:System.DateTime) = f.Year * 10000 + f.Month * 100 + f.Day\n                        let forma    =\n                            TemplateLib.FormaFirma()\n                                .FirmarClass(       if mensajes.V = \"\" then \"mui-btn--primary\" else \"\"     )\n                                .Mensaje(           mensajes.V                                             )\n                                .Contenido(         contenido                                              )\n                                .Acepto(            acepto.V                                               )\n                                .Firmar(            fun _ -> firmarDocumento()                             )\n                                .DateTime(          fechaHoraV.V                                           )\n                                .IdLoggedIn(        Aliado.LoggedId.Id                                     )\n                                //.Location(          sprintf \"%A\" locationV.V                               )\n                                .TextoBotonFirmar(  if firmadoV.V then \"FIRMADO!\" else \"Firmar y Procesar\" )\n                                .Create()\n                        V( \n                            [\n                                forma.Vars.Firmante.V.Trim() <> nombre.V.ToUpper()   , \"Nombre en MAYUSCULAS debe coincidir\"\n                                forma.Vars.Fecha  .V         <> fechaHoraV.V.Left(10), \"Introduzca fecha de hoy (YYYY-MM-DD)\"\n                                forma.Vars.Acepto .V         <> true                 , \"Acepte los terminos indicados\"\n                                Aliado.LoggedId              <> aliadoW.V.id         , \"El documento solo debe ser firmado por el titular de la cuenta\"\n                            ]\n                            |> Seq.filter fst\n                            |> Seq.map    snd\n                            |> String.concat \", \"\n                        )\n                        |> View.Sink mensajes.Set\n                        forma.Doc\n                     \n                module FormaAutorizacion =\n                \n                    let cuentaPagoO     = Var.Create <| (None : CuentaPago option)\n                    let cuentaAutorizar = Var.Create <| Html.text \"No hay cuenta seleccionada\"\n                    let titular         = Var.Create \"\"\n                    let mutable pid : IdPayment = IdPayment \"\"\n                \n                    let actualizarSubscripcion() = \n                        Rpc.actualizarSubscripcion pid |> AsyncResult.map (sprintf \"Subscripción #%s creada.\")\n                \n                    let formaAutorizacion () =\n                        let formaContenido  =\n                            TemplateLib.AutorizacionPago()\n                                .Titular(           titular.V                                           ) \n                                .MontoAfiliacion(   sprintf \"$%d.00\" modeloV.V.premisas.montoAfiliacion )\n                                .dia(               string <| Aliado.dia aliadoW.V.diaPago              )\n                                .CuentaDebitar(     cuentaAutorizar.V                                   )\n                                .Doc()\n                        \n                        cuentaPagoO.Value\n                        |> Option.map (fun cp -> cp.AutorizacionPre)\n                        |> Option.defaultValue \"Autorizacion -- ------\"\n                        |> FormaFirma.formaFirma titular.View formaContenido Autorizacion actualizarSubscripcion\n                     \n                module FormaContrato =\n                \n                    let firmarContrato() = \n                        AsyncResult.rtn \"Contrato firmado!\"\n                \n                    let formaContrato () =\n                        let nombreW  = V( Aliado.nombre2 aliadoW.V.datosPersonales) \n                        let formaContenido  =\n                            TemplateLib.Contrato()\n                                .Aliado( nombreW.V ) \n                                .Doc()\n                        FormaFirma.formaFirma nombreW formaContenido Contrato firmarContrato \"Contrato\"\n                     \n                module FormaFormasPago =\n                    open VariousUI\n                \n                    let msg ({ FormaPago.authorizeIdR = idR }) = \n                        match idR with \n                        | Error \"\" -> \"La cuenta aun no ha sido verificada\" \n                        | Error m  -> m \n                        | Ok v -> sprintf \"Cuenta verificada: %A\" v \n                \n                    let ftar = (fun cp -> match cp.cuentaPago with TarjetaCredito tar -> Some (tar, msg cp, (match cp with { FormaPago.authorizeIdR = Ok _ } -> true |_-> false)) |_-> None), (fun fp v -> { fp with cuentaPago = TarjetaCredito v ; authorizeIdR = Error \"\" })\n                    let fcta = (fun cp -> match cp.cuentaPago with CuentaBancaria cta -> Some (cta, msg cp, (match cp with { FormaPago.authorizeIdR = Ok _ } -> true |_-> false)) |_-> None), (fun fp v -> { fp with cuentaPago = CuentaBancaria v ; authorizeIdR = Error \"\" })\n                \n                    let refrescarFormasPago() = Rpc.obtenerFormasDePago() |> AsyncResult.map formasPagoAliadoV.Set |> Rpc.iterA\n                \n                    let formaFormasPago (aliadoW: View<Aliado>) =\n                        let mensajes      = Var.Create \"\"\n                        let mostrar       = Var.Create false\n                        let formasPagoV   = Var.Create [||]\n                        \n                        formasPagoAliadoV.View\n                        |> View.Sink formasPagoV.Set\n                \n                        refrescarFormasPago()\n                        \n                        let formasPagoIW  = V(formasPagoV.V |> Seq.indexed)\n                \n                        let makeVar (f: (FormaPago -> ('a * string * bool) option) , fr : (FormaPago -> 'a -> FormaPago)) i = \n                            Var.Make (V(formasPagoV.V |> Seq.tryItem i |> Option.bind f )) \n                                    (function Some nv -> Array.replace i (fr formasPagoV.Value.[i] (fst3 nv) ) formasPagoV.Value |> formasPagoV.Set |_-> () )\n                        \n                        let tars = V( formasPagoIW.V |> Seq.choose (fun (i, c) -> fst ftar c |> Option.map (fun _ -> i) ) )\n                        let ctas = V( formasPagoIW.V |> Seq.choose (fun (i, c) -> fst fcta c |> Option.map (fun _ -> i) ) )\n                \n                        let validar (fp:FormaPago) = \n                            asyncResult {\n                                let! pymtId = fp .authorizeIdR\n                                let! resp   = Rpc.validarFormaPago pymtId\n                                JS.Alert resp\n                            } |> Rpc.iterA\n                \n                        let otherButtons i docF = \n                            [   \n                                yield Doc.Button \"AUTORIZAR DEBITO\" [\n                                        attr.``class``   \"mui-btn mui-btn--raised mui-btn--primary\"\n                                        attr.title       \"Autorizar pago recurrente\" \n                                        attr.styleDyn <| V (match formasPagoV.V.[i].authorizeIdR with | Ok _ -> \"\" |_-> \"display:None\")\n                                        ] \n                                        (fun _ -> \n                                            match formasPagoV.Value.[i].authorizeIdR, formasPagoV.Value.[i].cuentaPago with\n                                            | Error m, _ -> JS.Alert (\"Pago no está verificado en Authorize: \" + m)\n                                            | Ok pid,  CuentaBancaria           { titular = titular }\n                                            | Ok pid,  TarjetaCredito           { titular = titular } ->\n                                                FormaAutorizacion.cuentaPagoO       .Set <| Some formasPagoV.Value.[i].cuentaPago\n                                                FormaAutorizacion.cuentaAutorizar   .Set <| docF()\n                                                FormaAutorizacion.titular           .Set <| titular\n                                                FormaAutorizacion.pid                    <- pid\n                                                Content \"ProzperLyt.cntAutorizacion\"     |> endPointV.Set\n                                            | _ -> JS.Alert \"Autorizacion no esta implementada\"\n                                        )\n                                yield Html.br [] []\n                                yield Html.br [] []\n                                yield docF()\n                                yield V(\n                                    match formasPagoV.V.[i].subscripcion with\n                                    | None     -> Doc.Empty\n                                    | Some sub -> Html.div [] [ Html.text <| sprintf \"Subscripcion: %s\" sub.Short ]) |> Doc.BindView id\n                                yield Doc.Button \"validar\" [    \n                                        Html.attr.title \"validar forma de pago\" \n                                        Html.attr.styleDyn <| V (match formasPagoV.V.[i].authorizeIdR with | Ok _ -> \"\" |_-> \"display:None\")\n                                        ] (fun _ -> validar formasPagoV.Value.[i]  )\n                            ] \n                            |> Doc.Concat\n                            |> removeButton (fun _ -> formasPagoV.Value |> Array.remove i |> formasPagoV.Set )\n                \n                \n                        let tarDocs = tars |> Doc.BindSeqCachedBy id (fun i -> makeVar ftar i |> (fun v () -> TarjetaCredito.formaDocO v |> snd) |> otherButtons i )\n                        let ctaDocs = ctas |> Doc.BindSeqCachedBy id (fun i -> makeVar fcta i |> (fun v () -> CuentaBancaria.formaDocO v |> snd) |> otherButtons i )\n                \n                        let fp cp = {\n                            cuentaPago   = cp\n                            authorizeIdR = Error \"\"\n                            nombre       = \"\"\n                            subscripcion = None\n                        }\n                \n                        let fpIds fps  = fps |> Seq.choose(fun fp -> match fp.authorizeIdR with | Ok fpid -> Some fpid |_-> None) |> Set\n                \n                        let forma =\n                            TemplateLib.FormaCuentas()\n                                .Mensajes(    if mostrar.V then mensajes.V else \"\"                                    )\n                                .Tarjetas(    tarDocs              ) \n                                .Cuentas(     ctaDocs              ) \n                                .MasTarjeta(  fun _ -> formasPagoV.Value |> Array.append <| [| TarjetaCredito tarVacio |> fp |] |> formasPagoV.Set)\n                                .MasCuenta(   fun _ -> formasPagoV.Value |> Array.append <| [| CuentaBancaria ctaVacio |> fp |] |> formasPagoV.Set)\n                                .Changed(     if formasPagoAliadoV.V = formasPagoV.V then \"\" else \"mui-btn--primary\" )\n                                .Salvar(fun ev ->\n                                    mostrar.Set true\n                                    let m =  mensajes.Value\n                                    if  m.Trim() <> \"\" then JS.Alert m else \n                                        match View.TryGet aliadoW with\n                                        | Some al ->\n                                            asyncResult {\n                                                let fpids = fpIds formasPagoAliadoV.Value - fpIds formasPagoV.Value\n                                                for fpid in fpids do\n                                                    let! resp = Rpc.borrarFormaPago fpid\n                                                    () // do! ResultMessage.Info resp\n                                                for formaPago in formasPagoV.Value do\n                                                    let callO = match formaPago.cuentaPago with\n                                                                | TarjetaCredito tar when not (tar.numero.Id.Contains \"X\") -> Some <| Rpc.registrarTarjeta tar\n                                                                | CuentaBancaria cta when not (cta.numero.Id.Contains \"X\") -> Some <| Rpc.registrarCuenta  cta\n                                                                | _-> None\n                                                    match callO with\n                                                    | None -> ()\n                                                    | Some call ->\n                                                    let! resp = call\n                                                    () // do! ResultMessage.Info resp\n                                                refrescarFormasPago()\n                                                Refresh.refrescarData true\n                                            } |> Rpc.iterA\n                                        | _ -> JS.Alert \"Error not caught FormaDatos\"\n                                )\n                                .Create()\n                \n                        forma.Doc\n                \n                    let formaDoc() = aliadoIdDoc formaFormasPago\n                \n                module RenderAliados =\n                    open SortWith\n                \n                    let aliados() =\n                        let expandidos = Var.Create None\n                        let hijosDeO   = Var.Create None\n                \n                        let hijosDe id = hijosDeO.Value |> Option.map (fun f -> f id) |> Option.defaultValue [||]\n                \n                        let referidos al =\n                            if al.nReferidos = 0 then \"-\" else\n                            sprintf \"%d/%d\" al.nRefActivos al.nReferidos\n                        let descendientes al =\n                            if al.nDescendientes = 0 then \"-\" else\n                            sprintf \"%d/%d\" al.nDescActivos al.nDescendientes\n                        let comision v = if v = 0 then \"-\" else money v \n                        let expandido id =\n                            expandidos.View\n                            |> View.Map (fun exp -> \n                                if hijosDe id |> Seq.isEmpty then \"\" else\n                                if exp |> Option.map (Set.contains id) = Some true then \"Expandido\" else \"Colapsado\") \n                        let expandir  id =\n                            if expandidos.Value |> Option.map (Set.contains id) = Some true then Set.remove else Set.add\n                                <| id \n                                <| (expandidos.Value |> Option.defaultValue Set.empty)\n                            |> Some\n                            |> expandidos.Set\n                        let seleccionar id =  Some id |> selAliadoIdOV.Set\n                        let sortAliados als =\n                            let als = als |> Seq.sortWith (desc (fun al -> al.comision                       )\n                                                        &>  asc (fun al -> al.status                         )\n                                                        &> desc (fun al -> al.nRefActivos , al.nReferidos    )\n                                                        &> desc (fun al -> al.nDescActivos, al.nDescendientes)\n                                                        &>  asc (fun al -> Aliado.nombre al.datosPersonales  ) )\n                            let buscar = Aliado.busqueda als\n                            hijosDeO.Set <| Some buscar.hijosDe\n                            let nivel = try als |> Seq.map (fun al -> al.nivel) |> Seq.min with _ -> 1\n                            let raiz = als |> Seq.filter (fun al -> al.nivel = nivel)\n                            if raiz |> Seq.isEmpty then\n                                expandidos.Set None\n                            elif expandidos.Value.IsNone then\n                                raiz |> Seq.map (fun al -> al.id) |> Set |> Some |> expandidos.Set\n                                raiz |> Seq.map (fun al -> al.id) |> Seq.tryHead |> Option.iter seleccionar\n                            let rec buscarExpandidos (al:Aliado) = seq {\n                                yield al\n                                if expandidos.Value |> Option.map (Set.contains al.id) |> Option.defaultValue false then\n                                    for hijo in buscar.hijos al do\n                                        yield! buscarExpandidos hijo\n                            }\n                            seq {\n                                for al in raiz do\n                                    yield! buscarExpandidos al\n                            }\n                        \n                        TemplateLib.TablaAliados()\n                            .TBody(\n                                V modeloV.V.aliados\n                                |> View.Map2 (fun _ -> sortAliados) expandidos.View\n                                |> Doc.BindSeqCachedViewBy (fun al -> al.id) (fun alid alv ->\n                                    TemplateLib.FilaAliado()\n                                        .nombre(              Aliado.nombre alv.V.datosPersonales)\n                                        .status(              sprintf \"%A\"  alv.V.status         )\n                                        .tipo(                sprintf \"%A\"  alv.V.tipo           )\n                                        .nivel(               string        alv.V.nivel          )\n                                        .referidos(           referidos     alv.V                )\n                                        .descendientes(       descendientes alv.V                )\n                                        .comision(            comision      alv.V.comision       )\n                                        .expandido(           expandido     alid                 )\n                                        .expandir(   fun _ -> expandir      alid                 )\n                                        .seleccionado( if Some alid = selAliadoIdOV.V then \"seleccionado\" else \"\" )\n                                        .seleccionar(fun _ -> seleccionar   alid                 )\n                                        .Doc()\n                                )\n                            ).Doc()\n                module RenderAliado =\n                \n                    let calculo() =\n                \n                        let prem = V modeloV.V.premisas\n                \n                        let comision v = if v = 0 then \"-\" else sprintf \"%5d$\" v\n                        \n                        let alvO = \n                            let aliados = V modeloV.V.aliados\n                            let alid    = V modeloV.V.idAliado\n                            V (Seq.tryFind (fun (al:Aliado) -> al.id = alid.V) aliados.V)\n                \n                        let calculoDoc (alv: View<Aliado>) =\n                            let comisionV = V (Aliado.comision prem.V alv.V)\n                            let premisasV = V (Aliado.premisas prem.V alv.V)\n                            TemplateLib.Calculo()\n                                .referidos(        sprintf \"%d\"    alv.V.nReferidos                    )\n                                .refActivos(       sprintf \"%d\"    alv.V.nRefActivos                   )\n                                .comReferido(      sprintf \"%d\"   (alv.V.nRefActivos )                 )\n                                .descendientes(    sprintf \"%d\"    alv.V.nDescendientes                )\n                                .desActivos(       sprintf \"%d\"    alv.V.nDescActivos                  )\n                                .comision(         money (fst comisionV.V + snd comisionV.V ) )\n                                .comReferido(      money (fst comisionV.V                   ) )\n                                .comDescendiente(  money (snd comisionV.V                   ) )\n                                .porReferido(      money (fst premisasV.V                   ) )\n                                .porDescendiente(  money (snd premisasV.V                   ) )\n                                .Doc() \n                \n                        selAliadoIdDoc calculoDoc\n                \n                    let aliado() =\n                \n                        let comision v = if v = 0 then \"-\" else sprintf \"%5d$\" v\n                \n                        let correo al = \n                            al.contactos\n                            |> Seq.tryPick (function CorreoElectronico{ email = c } -> Some c |_-> None)\n                            |> Option.defaultValue \"correo no encontrado!\"\n                        \n                        let aliadoDoc (alv: View<Aliado>) =\n                            TemplateLib.Aliado()\n                                .nombre(           Aliado.nombre2 alv.V.datosPersonales)\n                                .status(           sprintf \"%A\"   alv.V.status         )\n                                .tipo(             sprintf \"%A\"   alv.V.tipo           )\n                                .contacto(         correo         alv.V                )\n                                .Calculo(          calculo()                           )\n                                .Doc() \n                \n                        selAliadoIdDoc aliadoDoc\n                \n                \n                module Transacciones =\n                \n                    let transaccionesW = \n                        modeloV.View \n                        |> View.MapAsync (fun modelo -> \n                            Rpc.obtenerTransaccionesPara Aliado.LoggedId \n                            |> Async.map (Result.defaultValue [||]))\n                \n                    let docTransacciones aliadoW =\n                        TemplateLib.Transacciones()\n                            .TBody(\n                                (transaccionesW, aliadoW)\n                                ||> View.Map2 (fun trs al -> trs |> Seq.filter (fun tr -> tr.idAliado = al.id) |> Seq.sortBy (fun tr -> tr.fechaPago))\n                                |> Doc.BindSeqCachedViewBy (fun tr -> tr.transaccion) (fun trid trv ->\n                                    TemplateLib.Transaccion()\n                                        .Fecha(              trv.V.fechaPago |> Date.toYYYYMMDDHHMM \"-\"  )\n                                        .TransId(            trv.V.transaccion                           )\n                                        .Cuenta(             trv.V.concepto .ToString()                  )\n                                        .Status(             trv.V.statusTran                            )\n                                        .Monto(              sprintf \"%0.2f\" (float trv.V.monto / 100. ) )\n                                        .Doc()\n                                )\n                            ).Doc()\n                \n                    let transacciones() =\n                        selAliadoIdDoc docTransacciones\n                module ListaDocs =\n                    open VariousUI\n                \n                    let expandedOV = Var.Create None\n                    let aliadoIdW  = V(expandedOV.V  |> Option.defaultWith (fun () -> aliadoW.V.id) )\n                    let listaDocs() =\n                \n                        let docsV = ListModel.Create (fun (ar:Archivo) -> ar.nombre) [||]\n                        let origV = ListModel.Create (fun (ar:Archivo) -> ar.nombre) [||]\n                \n                        let refrescarListaDocs() = \n                            asyncResult {\n                                origV.Set [||]\n                                docsV.Set [||]\n                                let! aid  = View.GetAsync aliadoIdW\n                                let! docs = Rpc.obtenerListaDocs aid\n                                origV.Set docs\n                                docsV.Set docs\n                            } |> Rpc.iterA \n                \n                        aliadoIdW |> View.Sink (fun id -> if id <> IdAliado \"\" then refrescarListaDocs())\n                \n                        let uploaded id : System.Action<obj,string,JQuery.JqXHR> =\n                            System.Action<_,_,_>(fun a b c ->\n                                asyncResult {\n                                    refrescarListaDocs()\n                                    let! r = ActualizarArchivos(IdAliado id, Seq.toArray docsV.Value) |> Rpc.ejecutarDataEventoNuevo\n                                    Refresh.refrescarData true\n                                    JS.Alert b \n                                } |> Rpc.iterA \n                            )\n                \n                        let subir (e:Dom.MouseEvent) id =\n                            e.PreventDefault()\n                            let form = JQuery.JQuery(\"#SubirDocumentos\")\n                            let fd = FormData()\n                            for x in form.SerializeArray() do\n                                fd.Append(x?name, (x?value : string) )\n                            let files = FileList.OfElement <| form.Children(\"input[type=file]\").First().Get(0)\n                            let file  = files.[0]\n                            let filename = file.Name \n                            fd.Append(\"file\", file)\n                            JQuery.AjaxSettings(   Type          = JQuery.RequestType.POST\n                                                , Url           = \"/api/subir/\" + id + \"/\" + filename\n                                                , Data          = fd\n                                                , ContentType   = Union1Of2 false\n                                                , ProcessData   =           false\n                                                , Success       = uploaded id\n                                            )\n                            |> JQuery.JQuery.Ajax |> ignore\n                \n                \n                        TemplateLib.SubirDocumentos()\n                            .TBody(\n                                docsV\n                                |> ListModel.docLensMapView id (fun nm arV ->\n                                    let disabledW = V( arV.V.idAliado = Aliado.LoggedId )\n                                    let enlace = \n                                        TemplateLib.EnlaceDocumento()\n                                            .idAliado( V ( aliadoIdW.V.Id )                            )\n                                            .archivo(      arV.V.nombre                                )\n                                            .nombre(       arV.V.nombre                                )\n                                            .Doc()\n                                    TemplateLib.FilaDocs()\n                                        .enlace(        enlace                                      )\n                                        .tipo(  Var.Make(V(arV.V.tipo  .ToString() )) (TipoArchivo  .Parse >> (Lens arV.V.tipo  ).Set) )\n                                        .status(Var.Make(V(arV.V.status.ToString() )) (StatusArchivo.Parse >> (Lens arV.V.status).Set) )\n                                        .tamano(        arV.V.tamano     |> String.thousands        )\n                                        .modificado(    arV.V.modificado |> Date.toYYYYMMDDHHMM \"-\" )\n                                        .statuses(      V(statusAr.V |> crearOptions ).V            )\n                                        .disabled(      attr.disabledDynPred (View.Const \"\") disabledW )\n                                        .Doc()\n                                )\n                            )\n                            .Subir( fun e -> aliadoIdW |> View.Map (fun aid -> aid.Id) |> View.Get (subir e.Event)  )\n                            .TiposArchivo( V(tiposAr.V |> crearOptions ).V )\n                            .Changed(        if origV.View.V = docsV.View.V then \"\" else \"mui-btn--primary\" )\n                            .Salvar(fun ev ->\n                                    asyncResult {\n                                        let ars = \n                                            docsV.Value\n                                            |> Seq.filter(fun ar ->\n                                                let orO =  origV.Value |> Seq.tryFind(fun o -> o.nombre = ar.nombre)\n                                                orO <> Some ar)\n                                            |> Seq.toArray\n                                        if Seq.isEmpty ars |> not then\n                                            let! aid  = View.GetAsync aliadoIdW\n                                            let! resp = ActualizarArchivos(aid, ars) |> Rpc.ejecutarDataEventoNuevo\n                                            refrescarListaDocs()\n                                            refrescarData true\n                                            sprintf \"%A\" resp|> JS.Alert\n                                    } |> Rpc.iterA\n                            )\n                            .Doc()\n                \n                module Pendientes =\n                \n                    let esIdentificacion  (ar:Archivo) = match ar.tipo with | Pasaporte | Cedula | LicenciaConducir -> true |_-> false\n                    let esArchivoTipo tipo (ar:Archivo) = ar.tipo = tipo\n                \n                    let filtroArchivo      p (archivos:Archivo   seq) = archivos |> Seq.filter (fun ar -> ar.status <> Expirado && ar.status <> Cancelado) |> Seq.filter  p |> Seq.toArray\n                    let tryArchivo         p (archivos:Archivo   seq) = archivos |> filtroArchivo (fun _ -> true) |> Seq.tryFind p\n                    let tryArchivoTipo    tipo = tryArchivo    (fun ar -> ar.tipo = tipo)\n                \n                    let filtroCuenta       p (cuentas :FormaPago seq) = cuentas  |> Seq.filter p |> Seq.toArray\n                \n                    let pendiente (docs:Doc seq) = Html.li [] docs\n                \n                    module Enlace =\n                        let FormaW9                         = \"/#/Pdf/blob/Inscripcion/07 Form W-9.pdf\"\n                        let FormaW8BEN                      = \"/#/Pdf/blob/Inscripcion/05 Form W-8BEN.pdf\"\n                        let FormasPago                      = \"/#/Content/ProzperLyt.cntFormaFormasPago\"\n                        let FormaContrato                   = \"/#/Content/ProzperLyt.cntFormaContrato\"\n                        let Subir                           = \"/#/Content/ProzperLyt.cntSubirDocumentos\"\n                \n                    let tarchivo2String =\n                        function\n                        | FormaW9               -> (\"Formulario W-9\"      , \"o\"   ), Enlace.FormaW9\n                        | FormaW8BEN            -> (\"Formulario W-8BEN\"   , \"o\"   ), Enlace.FormaW8BEN\n                        | Autorizacion          -> (\"Autorización de pago\", \"a\"   ), Enlace.FormasPago\n                        | Contrato              -> (\"Contrato\"            , \"o\"   ), Enlace.FormaContrato\n                        | Cedula                -> (\"Cedula\"              , \"a\"   ), Enlace.Subir\n                        | LicenciaConducir      -> (\"Licencia de Conducir\", \"a\"   ), Enlace.Subir\n                        | Pasaporte             -> (\"Pasaporte\"           , \"o\"   ), Enlace.Subir\n                        | TipoArchivo.Otro txt  -> (txt                   , \"o(a)\"), Enlace.Subir\n                \n                    let sufijo (ar:Archivo) = tarchivo2String ar.tipo |> fst |> snd\n                \n                    let enlace          dir texto   = Html.a [ attr.href dir ] [ Html.text texto ]\n                    let enlaceArchivo (ar:Archivo)  = \n                            TemplateLib.EnlaceDocumento()\n                                .idAliado( ar.idAliado.Id                       )\n                                .archivo(  ar.nombre                            )\n                                .title(    ar.nombre                            )\n                                .nombre(   tarchivo2String ar.tipo |> fst |> fst)\n                                .Doc()\n                \n                    let agregarCuenta () =\n                        [ \n                            Html.i    [ attr.``class`` \"far fa-square\" ] []\n                            Html.text \" Agregar Forma de pago: \"\n                            enlace Enlace.FormasPago  \"Tarjeta de Credito o Cuenta Bancaria\" \n                        ] |> Seq.ofList\n                \n                    let firmarContrato () =\n                        [ \n                            Html.i    [ attr.``class`` \"far fa-square\" ] []\n                            Html.text \" Firmar \"\n                            enlace Enlace.FormaContrato \"Contrato\" \n                        ] |> Seq.ofList\n                \n                    let firmarAutorizacion () =\n                        [ \n                            Html.i [ attr.``class`` \"far fa-square\" ] []\n                            Html.text \" Firmar \"\n                            enlace Enlace.FormasPago \"Autorizacion (Haga click en: AUTORIZAR DEBITO)\" \n                        ] |> Seq.ofList\n                \n                    let subirArchivoTipo (tipo:TipoArchivo) =\n                        let (text, suf), link = tarchivo2String tipo\n                        [ \n                            Html.i [ attr.``class`` \"far fa-square\" ] []\n                            enlace Enlace.Subir (\" Subir \" + text + \".\")\n                            enlace link          \"(Descargar aqui)\"    \n                        ] |> Seq.ofList\n                \n                    let subirIdentificacion () =\n                        [ \n                            Html.i [ attr.``class`` \"far fa-square\" ] []\n                            enlace Enlace.Subir \" Subir \" \n                            Html.text \"documento de identidad: \"\n                            enlace Enlace.Subir \"Cedula, Pasaporte, Licencia de Conducir\" \n                        ] |> Seq.ofList\n                \n                    let pendienteArchivo (ar:Archivo) =\n                        [ \n                            Html.i [ attr.``class`` \"far fa-check-square\" ] []\n                            Html.text \" \"\n                            enlaceArchivo ar\n                            Html.text (sprintf \" subid%s. \" <| sufijo ar)\n                            Html.i [ attr.``class`` \"far fa-square\" ] []\n                            Html.text \" Pendiente de Verificacion\"\n                        ] \n                \n                    let verificarArchivo (ar:Archivo) =\n                        match ar.status with\n                        | Verificado   -> [ \n                                            Html.i [ attr.``class`` \"fas fa-check-double\" ] []\n                                            Html.text \" \"\n                                            enlaceArchivo ar\n                                            Html.text (sprintf \" Verificad%s\"  <| sufijo ar)\n                                        ]\n                        | Rechazado    -> [ \n                                            Html.i [ attr.``class`` \"fas fa-times-circle\" ] []\n                                            Html.text \" \"\n                                            enlaceArchivo ar\n                                            Html.text (sprintf \" Rechazad%s\"  <| sufijo ar)\n                                        ]\n                        | _            -> pendienteArchivo ar\n                        |> Seq.ofList\n                \n                    let chequearArchivos es (subirlo:unit-> Doc seq) archivos =\n                        match filtroArchivo es archivos with\n                        | [||]   -> subirlo() |> Seq.singleton\n                        | docs   -> match docs |> Seq.tryFind (fun d -> d.status =  Verificado) with\n                                    | Some ver -> verificarArchivo ver |> Seq.singleton\n                                    | None     -> \n                                    let mensajes = docs |> Seq.map verificarArchivo\n                                    if docs |> Seq.exists (fun d -> d.status <> Rechazado) then mensajes\n                                    else               subirlo() |> Seq.singleton |> Seq.append mensajes\n                \n                    let verificarCuenta (fp:FormaPago) =\n                        let sub = fp.subscripcion |> Option.map (fun sub -> \"Subscripción: \" + sub.Short) |> Option.defaultValue \"\"\n                        match fp.authorizeIdR with \n                        | Ok id   -> [ \n                                        Html.i [ attr.``class`` \"far fa-check-square\" ] []\n                                        Html.text (sprintf \" %s %s Registrada. (%s) %s\"              fp.cuentaPago.TipoLargo fp.cuentaPago.MaskedCuenta id.Id sub) \n                                    ]\n                        | Error m -> [ \n                                        Html.i [ attr.``class`` \"far fa-square\" ] []\n                                        Html.text (sprintf \" %s %s NO REGISTRADA en Authorize (%s)\" fp.cuentaPago.TipoLargo fp.cuentaPago.MaskedCuenta m    ) \n                                    ]\n                        |> Seq.ofList\n                \n                    let chequearCuentas es (agregar:unit-> Doc seq) (cuentas:FormaPago[]) =\n                        match filtroCuenta es cuentas with \n                        | [||] -> agregar() |> Seq.singleton\n                        | docs -> docs      |> Seq.map verificarCuenta\n                \n                    let esAutorizacion (cuentas:FormaPago seq) (archivo:Archivo) =\n                        if archivo.tipo = Autorizacion then\n                            cuentas |> Seq.exists (fun fp -> archivo.nombre.Contains fp.cuentaPago.MaskedCuenta)\n                        else false\n                \n                    let chequearStatusAliado (aliado:Aliado) (archivosAR:AsyncResult<Archivo[], _>) (cuentasAR:AsyncResult<FormaPago[], _>) = asyncResult {\n                        match aliado.status with\n                        | CuentaCreada -> \n                            let! archivos = archivosAR\n                            let! cuentas  = cuentasAR\n                            let  ctasAuth = cuentas |> Seq.filter (fun fp -> match fp.authorizeIdR with Ok _ -> true |_-> false)\n                            return  [\n                                yield!     archivos |> chequearArchivos (esArchivoTipo Contrato    )            firmarContrato\n                                yield!     cuentas  |> chequearCuentas  (fun _ -> true             )            agregarCuenta\n                                if ctasAuth |>  Seq.length > 0 then\n                \n                                    yield! archivos |> chequearArchivos (esAutorizacion ctasAuth   )            firmarAutorizacion\n                                yield!     archivos |> chequearArchivos (esArchivoTipo FormaW9     ) (fun () -> subirArchivoTipo FormaW9     )\n                                yield!     archivos |> chequearArchivos (esArchivoTipo FormaW8BEN  ) (fun () -> subirArchivoTipo FormaW8BEN  )\n                                yield!     archivos |> chequearArchivos  esIdentificacion                       subirIdentificacion   \n                            ] \n                        |_-> return []\n                    }\n                \n                    let pendientes (aliadoW :View<Aliado>) = \n                        aliadoW \n                        |> View.MapAsync (fun al -> async {\n                            let! r = chequearStatusAliado al (Rpc.obtenerListaDocs al.id) (Rpc.obtenerFormasDePagoId al.id)\n                            match r with\n                            | Ok    doc when Seq.isEmpty doc \n                                        -> return Doc.Empty\n                            | Ok    doc -> return TemplateLib.Pendientes()\n                                                    .pasos(doc |> Seq.map pendiente |> Doc.Concat )\n                                                    .Doc()\n                            | Error m   -> return Html.text m\n                        } )\n                        |> Doc.BindView id\n                \n                module ReporteConsolidado =\n                    open VariousUI\n                    open SortWith\n                \n                    let nombreReferidor idO =\n                        idO\n                        |> Option.bind (fun id ->\n                            modeloV.Value.aliados\n                            |> Seq.tryFind (fun al -> al.id = id))\n                        |> Option.map (fun al -> Aliado.nombre al.datosPersonales)\n                        |> Option.defaultValue \"-\"\n                    let referidos al =\n                        if al.nReferidos = 0 then \"-\" else\n                        sprintf \"%d/%d\" al.nRefActivos al.nReferidos\n                    let descendientes al =\n                        if al.nDescendientes = 0 then \"-\" else\n                        sprintf \"%d/%d\" al.nDescActivos al.nDescendientes\n                    let comision    v  = if v = 0 then \"-\" else money v \n                    let flecha (o:int, d:bool, _) = if o = 1 then (if d then \"\\u2191\" else \"\\u2193\") else \"\"\n                    \n                    type Fila<'T> = 'T []\n                \n                    let mutable definicion = [||]\n                    let agregarCampo orden direccion f : int =\n                        definicion <- Array.append definicion [| orden, direccion, f |]\n                        definicion.Length - 1\n                \n                    let i_archivos      = agregarCampo  1 false (fun (al:Aliado) -> if al.docPendientes = 0 then sprintf \"%2d\" al.documentos else sprintf \"(%2d)%2d\" al.docPendientes al.documentos)\n                    let i_nombre        = agregarCampo 14 true  (fun (al:Aliado) -> Aliado.nombre       al.datosPersonales            )\n                    let i_correo        = agregarCampo 13 true  (fun (al:Aliado) -> Aliado.correo       al                            )\n                    let i_status        = agregarCampo 03 true  (fun (al:Aliado) -> sprintf \"%A\"        al.status                     )\n                    let i_influyente    = agregarCampo 04 false (fun (al:Aliado) -> al.influyente |> Option.defaultValue \"\"           )\n                    let i_tipo          = agregarCampo 05 true  (fun (al:Aliado) -> sprintf \"%A\"        al.tipo                       )\n                    let i_referido      = agregarCampo 06 true  (fun (al:Aliado) -> nombreReferidor     al.idPadreO                   )\n                    let i_nivel         = agregarCampo 07 true  (fun (al:Aliado) -> sprintf \"%9d\"       al.nivel                      )\n                    let i_referidos     = agregarCampo 08 true  (fun (al:Aliado) -> sprintf \"%9s\" <| referidos           al           )\n                    let i_descendientes = agregarCampo 02 false (fun (al:Aliado) -> sprintf \"%9s\" <| descendientes       al           )\n                    let i_comision      = agregarCampo 09 true  (fun (al:Aliado) -> sprintf \"%9s\" <| comision            al.comision  )\n                    let i_diaPago       = agregarCampo 10 true  (fun (al:Aliado) -> (sprintf \"%A\"        al.diaPago).Right 2          )\n                    let i_desde         = agregarCampo 11 true  (fun (al:Aliado) -> Date.toYYYYMMDD \"-\" al.fechaRegistro              )\n                    let i_Id            = agregarCampo 12 true  (fun (al:Aliado) -> sprintf \"%s\"        al.id.Id                      )\n                \n                    let consolidado() =\n                \n                        let aliadosV = Var.Create [||]\n                \n                        V(modeloV.V.aliados)\n                        |> View.Sink aliadosV.Set\n                \n                        let seleccionar id =  Some id |> selAliadoIdOV.Set\n                \n                        let aliado2Fila al : Fila<string> = definicion |> Array.map (fun (_,_,f) -> f al)\n                \n                        let ordenV = \n                            definicion\n                            |> Array.mapi (fun i (a, b, _) -> a,b,  (fun (d:Fila<string>) -> d.[i].ToUpper() ) )\n                            |> Var.Create \n                \n                        let campos (orden:Fila<_*_*_>) = orden\n                \n                        let newOrden (n, _, _) (no, vo, fo) =\n                              ( if   no = n then      1\n                                elif no < n then no + 1\n                                else no)\n                            , (if n = no && n = 1 then not vo else vo)\n                            , fo\n                \n                        let toggle (v:int * bool * (Fila<string> -> string) ) = \n                            ordenV.Value\n                            |> Array.map (newOrden v)\n                            |> ordenV.Set\n                \n                        let filtroV = Var.Create \"\"\n                \n                        let sortAliados (als:Aliado seq) (orden:Fila<_*_*(Fila<string> -> string)>) (filtro:string) =\n                            let vt = filtro.Trim().ToUpper()\n                            let filtros = campos orden |> Array.map (fun (_,_,f) -> f)\n                            let filtrar (fila:Fila<string>) =\n                                if vt = \"\" then true\n                                else filtros |> Seq.exists(fun f -> (f fila).Contains vt)\n                            let comparar = \n                                campos orden\n                                |> Array.sortBy (fun (n, _, _) -> n)\n                                |> Array.map    (fun (n, a, f) -> (if a then asc else desc) f)\n                                |> Array.reduce (&>)\n                            als \n                            |> Seq.map aliado2Fila\n                            |> Seq.filter   filtrar\n                            |> Seq.sortWith comparar\n                \n                        let setAliado id f = \n                            aliadosV.Value\n                            |> Array.map (fun al -> if al.id = id then f al else al)\n                            |> aliadosV.Set\n                \n                        let setStatus id (v:string) = \n                            setAliado id (fun al -> { al with status = StatusAliado.tryParse v } ) \n                \n                        let setInfluyente id (v:string) = \n                            setAliado id (fun al -> { al with influyente = if v.Trim() = \"\" then None else Some <| v.Trim() } ) \n                \n                        let setPadre id (v:string) =\n                            let padre = if v = \"\" then None else Some (IdAliado v)\n                            setAliado id (fun al -> { al with idPadreO = padre } )\n                \n                        let referidores =\n                            modeloV.View\n                            |> Doc.BindView (fun m -> \n                                m.aliados \n                                |> Seq.map (fun al -> Aliado.nombre2 al.datosPersonales, al.id.Id ) \n                                |> crearOptions2 ) \n                \n                        let obtenerAliado alid = modeloV.Value.aliados |> Seq.tryFind (fun al -> al.id = alid)\n                \n                        let salvar () = \n                            asyncResult {\n                                for al in aliadosV.Value do\n                                    match obtenerAliado al.id with\n                                    | None -> ()\n                                    | Some al2 ->\n                                    if al.status <> al2.status || al.idPadreO <> al2.idPadreO || al.influyente <> al2.influyente then\n                                        let! res = ActualizarStatusPadre(al.id, al.status, al.idPadreO, al.influyente) |> Rpc.ejecutarDataEventoNuevo\n                                        () // do! ResultMessage.Info (sprintf \"%A\" res)\n                                refrescarData true\n                            } |> Rpc.iterA\n                \n                \n                        let pendientes    = \n                            View.Do {\n                                let! selIdO = ListaDocs.expandedOV.View\n                                match selIdO with\n                                | None    -> return Doc.Empty\n                                | Some id ->\n                                let! als = aliadosV.View\n                                match als |> Seq.tryFind(fun al -> al.id = id) with\n                                | None    -> return Doc.Empty\n                                | Some al ->\n                                return Pendientes.pendientes(View.Const al)\n                            } |> Doc.BindView id\n                \n                        let listaArchivos = lazy Html.tr [ attr.bgcolor \"beige\" ] [ Html.td [ attr.colspan \"12\" ] [ pendientes ; ListaDocs.listaDocs() ] ]\n                \n                        TemplateLib.Consolidado()\n                            .Salvar(              fun _ -> salvar() )\n                            .Cancelar(            fun _ -> aliadosV.Set   modeloV.Value.aliados   )\n                            .Changed(             if modeloV.V.aliados = aliadosV.V then \"\" else \"mui-btn--primary\" )\n                            .Filtro(              filtroV                                        )\n                            .Referidores(         referidores                                    )\n                            .sort_archivos(       fun _ -> toggle ordenV.Value.[i_archivos     ] )\n                            .sort_nombre(         fun _ -> toggle ordenV.Value.[i_nombre       ] )\n                            .sort_correo(         fun _ -> toggle ordenV.Value.[i_correo       ] )\n                            .sort_status(         fun _ -> toggle ordenV.Value.[i_status       ] ) \n                            .sort_influyente(     fun _ -> toggle ordenV.Value.[i_influyente   ] ) \n                            .sort_tipo(           fun _ -> toggle ordenV.Value.[i_tipo         ] )\n                            .sort_referido(       fun _ -> toggle ordenV.Value.[i_referido     ] )\n                            .sort_nivel(          fun _ -> toggle ordenV.Value.[i_nivel        ] )\n                            .sort_referidos(      fun _ -> toggle ordenV.Value.[i_referidos    ] )\n                            .sort_descendientes(  fun _ -> toggle ordenV.Value.[i_descendientes] )\n                            .sort_comision(       fun _ -> toggle ordenV.Value.[i_comision     ] )\n                            .sort_diaPago(        fun _ -> toggle ordenV.Value.[i_diaPago      ] )\n                            .sort_desde(          fun _ -> toggle ordenV.Value.[i_desde        ] )\n                            //.sort_Id(             fun _ -> toggle ordenV.Value.[i_Id           ] )\n                            .flecha_archivos(              flecha ordenV.V    .[i_archivos     ] ) \n                            .flecha_nombre(                flecha ordenV.V    .[i_nombre       ] )\n                            .flecha_correo(                flecha ordenV.V    .[i_correo       ] )\n                            .flecha_status(                flecha ordenV.V    .[i_status       ] ) \n                            .flecha_influyente(            flecha ordenV.V    .[i_influyente   ] ) \n                            .flecha_tipo(                  flecha ordenV.V    .[i_tipo         ] )\n                            .flecha_referido(              flecha ordenV.V    .[i_referido     ] )\n                            .flecha_nivel(                 flecha ordenV.V    .[i_nivel        ] )\n                            .flecha_referidos(             flecha ordenV.V    .[i_referidos    ] )\n                            .flecha_descendientes(         flecha ordenV.V    .[i_descendientes] )\n                            .flecha_comision(              flecha ordenV.V    .[i_comision     ] )\n                            .flecha_diaPago(               flecha ordenV.V    .[i_diaPago      ] )\n                            .flecha_desde(                 flecha ordenV.V    .[i_desde        ] )\n                            //.flecha_Id(                    flecha ordenV.V    .[i_Id           ] )\n                            .TBody(\n                                (V modeloV.V.aliados, ordenV.View, filtroV.View) \n                                |||> View.Map3 sortAliados\n                                |> Doc.BindSeqCachedViewBy (fun al -> al.[i_Id]) (fun alid fW ->\n                                    TemplateLib.FilaConsolidado() \n                                        .nombre(        fW.V.[i_nombre       ])\n                                        .correo(        fW.V.[i_correo       ])\n                                        .tipo(          fW.V.[i_tipo         ])\n                                        .referido(      Var.Make (V fW.V.[i_referido   ]) (setPadre      <| IdAliado alid) )\n                                        .status(        Var.Make (V fW.V.[i_status     ]) (setStatus     <| IdAliado alid) )\n                                        .influyente(    Var.Make (V fW.V.[i_influyente ]) (setInfluyente <| IdAliado alid) )\n                                        .Statuses(      statuses.View |> Doc.BindView crearOptions                    )\n                                        .nivel(         fW.V.[i_nivel        ])\n                                        .referidos(     fW.V.[i_referidos    ])\n                                        .descendientes( fW.V.[i_descendientes])\n                                        .comision(      fW.V.[i_comision     ])\n                                        .diaPago(       fW.V.[i_diaPago      ])\n                                        .desde(         fW.V.[i_desde        ])\n                                        .Id(            fW.V.[i_Id           ])\n                                        .detalles( V(if ListaDocs.expandedOV.V = Some (IdAliado alid) then listaArchivos.Value else Doc.Empty ) |> Doc.BindView id )\n                                        .expandFiles(   fun _ -> \n                                            async {\n                                                do! Rpc.addLlamadas  1\n                                                do  (if ListaDocs.expandedOV.Value = Some (IdAliado alid) then None else Some (IdAliado alid)) |> ListaDocs.expandedOV.Set\n                                                do! Rpc.addLlamadas -1\n                                            } |> Async.Start\n                                            )\n                                        .expanded(      fW.V.[i_archivos])\n                                        .Doc()\n                                )\n                            ).Doc()\n                module TablaPagos =\n                    open SortWith\n                \n                    [< Inline \"saveAs(new Blob([$_txt], {type: 'text/plain;charset=utf-8'}), $_name)\" >]\n                    let saveAsJavaScript (_name:string) (_txt:string) = ()\n                    \n                    let comisiones() =\n                \n                        let referidos al =\n                            if al.nReferidos = 0 then \"-\" else\n                            sprintf \"%d/%d\" al.nRefActivos al.nReferidos\n                        let descendientes al =\n                            if al.nDescendientes = 0 then \"-\" else\n                            sprintf \"%d/%d\" al.nDescActivos al.nDescendientes\n                        let comision v = if v = 0 then \"-\" else money v \n                        let seleccionar id =  Some id |> selAliadoIdOV.Set\n                        let sortAliados als =\n                            als |> Seq.sortWith (desc (fun al -> al.comision                       )\n                                              &>  asc (fun al -> al.status                         )\n                                              &> desc (fun al -> al.nRefActivos , al.nReferidos    )\n                                              &> desc (fun al -> al.nDescActivos, al.nDescendientes)\n                                              &>  asc (fun al -> Aliado.nombre al.datosPersonales  ) )\n                \n                        let pagos (als:Aliado[]) = \n                            asyncResult {\n                                let  alsf   = als  |> Seq.filter (fun al -> al.comision > 0) \n                                let  alIds  = alsf |> Seq.map    (fun al -> al.id          ) |> Seq.toArray\n                                let! fpss   = Rpc.obtenerFormasDePagoPara alIds\n                                let  ctas   = (fpss:(IdAliado * FormaPago []) []) |> Seq.map (fun (id, fps)-> id, fps |> Seq.tryPick (fun fp -> match fp.cuentaPago with | CuentaBancaria cta -> Some cta |_-> None) |> Option.defaultValue ctaVacio )\n                                let  alfps  = Seq.zip alsf ctas |> Seq.choose(fun (al, (aid2, cta) ) -> if al.id = aid2 then Some(al, cta) else None)\n                                return alfps\n                            } |> Async.map (Result.defaultValue Seq.empty)\n                \n                        let pagosW =\n                                V (modeloV.V.aliados )                \n                                |> View.MapAsync pagos\n                \n                        let def d v = if v = \"\" then d else v\n                \n                \n                        let saveAs() = \n                            async {\n                                let name = \"pagos.csv\" \n                                let! data = pagosW |> View.GetAsync\n                                let csv   = data |> Seq.map(fun alfpW ->\n                                                let alW  = fst alfpW\n                                                let ctaW = snd alfpW\n                                                sprintf \"%s,%s,%s,%s,%A,%A\" \n                                                    (\"22\"                               )\n                                                    (def \"----------\" ctaW.numero .Id   )\n                                                    (def \"----------\" ctaW.routing.Id   )\n                                                    (sprintf \"%d.00\" alW.comision       )\n                                                    (\"----------\"                       )\n                                                    (if ctaW.titular = \"\" then Aliado.nombre2 alW.datosPersonales else ctaW.titular)                    \n                                                ) |> String.concat \"\\r\\n\"\n                                csv |> saveAsJavaScript name\n                            } |> Async.Start\n                \n                \n                        TemplateLib.TablaPagos()\n                            .Exportar(   fun _ -> saveAs() )\n                            .TBody(\n                                [\n                                    TemplateLib.FilaPago()\n                                        .codigo(              sprintf \"%d\" ( pagosW.V |> Seq.length ) ) \n                                        .cuenta(              \"\"                                  )\n                                        .ABA(                 \"\"                                  )\n                                        .monto(               sprintf \"%d.00\" ( pagosW.V |> Seq.sumBy(fun (pg, _) -> pg.comision ) ) ) \n                                        .identificacion(      \"\"                                  )\n                                        .nombre(              \"\"                                  )\n                                        .Doc()\n                                    TemplateLib.FilaPago()\n                                        .codigo(              \"\"                                  )\n                                        .cuenta(              \"\"                                  )\n                                        .ABA(                 \"\"                                  )\n                                        .monto(               \"--------------------\"              )\n                                        .identificacion(      \"\"                                  )\n                                        .nombre(              \"\"                                  )\n                                        .Doc()\n                                    pagosW\n                                    |> Doc.BindSeqCachedViewBy (fun (al, _) -> al.id) (fun alid alfpW ->\n                                        let alW  = V( fst alfpW.V)\n                                        let ctaW = V( snd alfpW.V)\n                                        TemplateLib.FilaPago()\n                                            .codigo(              \"22\"                                  )\n                                            .cuenta(              def \"----------\" ctaW.V.numero .Id    )\n                                            .ABA(                 def \"----------\" ctaW.V.routing.Id    )\n                                            .monto(               sprintf \"%d.00\" alW.V.comision        )\n                                            .identificacion(      \"---------\"                           )\n                                            .nombre(              def (Aliado.nombre2 alW.V.datosPersonales) ctaW.V.titular)\n                                            .Doc()\n                                    )\n                                ]\n                            ).Doc()\n                module Calculado =\n                    open Html\n                \n                    let inputLabel attrs txt var =\n                        div attrs [\n                            div [ attr.``class`` \"input-group\"       ] [\n                                span [ attr.``class`` \"input-group-addon\" ] [ text txt ]\n                                Doc.Input [ attr.``class`` \"form-control\" ]   var\n                            ]\n                        ]\n                \n                    let lensVarStr(v:Var<float>) = Var.Make (V (sprintf \"%A\" v.V)) (ParseO.parseDoubleO >> function Some d when d <> v.Value -> v.Set d |_->())\n                    let textLine txtW = div [] [ textView txtW ]\n                \n                    module KeylessList =\n                \n                        let createListModel newF elUI =\n                            let elements : ListModel<_,_> = ListModel.Create fst []\n                            let addNew = \n                                let mutable i = 0\n                                fun () ->        \n                                    (i, newF()) |> elements.Add\n                                    i <- i + 1\n                            let delete k () = elements.RemoveByKey k\n                            let doc = elements.DocLens (fun k v -> elUI (delete k) (v.Lens snd (fun (i, _) nv -> i, nv ) ) )\n                            elements, addNew, doc\n                \n                        let elemsUI doc addNew =\n                            div [] [\n                                doc\n                                Doc.Button \"New\" [] addNew\n                            ]\n                \n                        let lazyDoc elemUI newElem =\n                            let elems, addNew, doc = createListModel newElem elemUI\n                            lazy elemsUI doc addNew \n                \n                \n                    module AF =\n                        open FsRoot\n                        module AF = AppFramework\n                \n                        let addDocs plgName docs =\n                            AF.addPlugIn {\n                                AF.plgName    = plgName\n                                AF.plgVars    = [| |]  \n                                AF.plgViews   = [| |]  \n                                AF.plgDocs    = [| for docName, doc in docs -> AF.newDoc  docName doc |]  \n                                AF.plgActions = [| |]\n                                AF.plgQueries = [| |]\n                            } \n                \n                    type Calculado = {\n                        valorA : float\n                        valorB : float\n                        valorC : float\n                    }\n                \n                    let newCalc() = {\n                        valorA = 0.\n                        valorB = 0.\n                        valorC = 0.\n                    }\n                \n                    let calcUI delete (calc:Var<Calculado>) =\n                        let valorA  = lensVarStr (Lens calc.V.valorA) \n                        let valorB  = lensVarStr (Lens calc.V.valorB) \n                        let valorC  = lensVarStr (Lens calc.V.valorC)\n                        let dup     = V (calc.V.valorA * 2.             )\n                        let mult    = V (calc.V.valorA * calc.V.valorB  )\n                        let multAdd = V (mult.V + calc.V.valorC         )\n                        div [] [\n                            Doc.Button \"x\" [] delete\n                            inputLabel [] \"valor A: \" valorA\n                            inputLabel [] \"valor B: \" valorB\n                            inputLabel [] \"valor C: \" valorC\n                            textLine <| V(sprintf \"%A = %s * 2\"        dup.V       valorA.V                    ) \n                            textLine <| V(sprintf \"%A = %s * %s\"       mult.V      valorA.V valorB.V           ) \n                            textLine <| V(sprintf \"%A = %s * %s + %s\"  multAdd.V   valorA.V valorB.V valorC.V  ) \n                        ]\n                \n                    [ \"Calc\", KeylessList.lazyDoc calcUI newCalc ]\n                    |> AF.addDocs \"Calc\"\n                \n                \n            module MainProgram =\n                open Templating\n                open ModeloUI\n            \n                open FsRoot\n                module AF = AppFramework \n            \n                let layoutName = \"ProzperLyt\"\n                let appName    = \"Prozper\"\n            \n                let scrollToBottom (e:Dom.Element) (_:obj) = \n                    async { \n                        do! Async.Sleep 100\n                        do  e.ScrollTop <- e.ScrollHeight\n                    } |> Async.Start\n            \n                let mesToString =\n                    function\n                    |  1 -> \"Ene\"\n                    |  2 -> \"Feb\"\n                    |  3 -> \"Mar\"\n                    |  4 -> \"Abr\"\n                    |  5 -> \"May\"\n                    |  6 -> \"Jun\"\n                    |  7 -> \"Jul\"\n                    |  8 -> \"Ago\"\n                    |  9 -> \"Sep\"\n                    | 10 -> \"Oct\"\n                    | 11 -> \"Nov\"\n                    | 12 -> \"Dic\"\n                    | _  -> \"---\"\n            \n                let logout () = Msal.logout()\n                let login  () = Msal.logout()\n                let enviarCorreosInvitacion () = \n                    asyncResult {\n                        let! emails0 = ModeloUI.emailsInvitarW      |> View.GetAsync\n                        let! id      = V (ModeloUI.aliadoW.V.id.Id) |> View.GetAsync\n                        let  emails  = emails0.Split '\\n' |> Array.filter (fun s -> s.Trim() <> \"\")\n                        do! Rpc.enviarCorreosInvitacion(\"Invitacion a Prozper\",  emails)\n                        match emails.Length with\n                        | 0 -> JS.Alert \"Ningun correo valido ha sido encontrado\"\n                        | 1 -> JS.Alert \"Invitacion ha sido enviada\"\n                        | _ -> JS.Alert \"Invitaciones han sido enviadas\"\n                    } |> Rpc.iterA\n            \n                let getDoc appName docName =\n                    LayoutEngine.splitName appName docName\n                    ||> AF.tryGetDoc\n                    |>  Option.map (LayoutEngine.getDocFinal [])\n                    |>  Option.defaultWith (fun () -> sprintf \"Doc not found %s\" docName |> LayoutEngine.errDoc)\n            \n                let getDocView appName docName = LayoutEngine.turnToView (fun _ ->  getDoc appName docName)\n            \n                let getContentDoc() =\n                    ModeloUI.contentVar.View\n                    |> View.Map (getDoc appName )\n                    |> Doc.EmbedView\n            \n                let getMenuDoc() =\n                    V(  match (Msal.userO.V, ModeloUI.aliadoW.V.id) with\n                        | None  , _                             -> \"ProzperLyt.mnuNoUsuario\"\n                        | Some _, id when id = Aliado.empty.id  -> \"ProzperLyt.mnuAdministrador\"\n                        | _                                     -> \"ProzperLyt.mnuUsuario\"\n                        |> getDoc appName \n                    )\n                    |> Doc.EmbedView\n            \n                let influencerV       = Var.Create \"\"\n                let influencerClassW  = influencerV.View |> View.MapAsync (fun inf -> async {\n                        let! inf = Rpc.obtenerIdInfluyente inf\n                        match inf with\n                        | Ok _ -> return \"mui-btn--primary\"\n                        | _    -> return \"\"\n                })\n                let gotoInfluencer () = \n                    async {\n                        let! inf = Rpc.obtenerIdInfluyente influencerV.Value\n                        match inf with\n                        | Ok v -> JS.Window.Location.Href <- \"/Register/\" + influencerV.Value\n                        | _    -> JS.Window.Alert <| \"Código inválido:\" + influencerV.Value\n                    } |> Async.Start\n                    \n                //let actualizarTransacciones () =\n                //    async {\n                //        Rpc.\n                //    } |> Async.Start\n            \n                [< SPAEntryPoint >]    \n                let mainProgram() =\n                    let titleV          = Var.Create appName\n                    let mesActualW      = V (mesToString    ModeloUI.modeloV.V.periodoActual  )\n                    let anoActualW      = V (string         ModeloUI.modeloV.V.anoActual      )\n                    let nombreAliadoW   = V (Aliado.nombre2 ModeloUI.aliadoW.V.datosPersonales)\n                    let idAliadoW       = V (               ModeloUI.aliadoW.V.id.Id          )\n                    let statusAliadoW   = V (string         ModeloUI.aliadoW.V.status         )\n                    let comisionAliadoW = V (string         ModeloUI.aliadoW.V.comision       )\n                    let datosAliadoW    = V (string         ModeloUI.aliadoW.V.nReferidos     )\n            \n                    AF.addPlugIn {\n                        AF.plgName    = appName\n                        AF.plgVars    = [| AF.newVar  \"title\"        titleV\n                                           AF.newVar  \"contentVar\"   ModeloUI.contentVar\n                                           AF.newVar  \"invitaciones\" ModeloUI.invitacionesV\n                                           AF.newVar  \"influencer\"   influencerV\n                                        |]  \n                        AF.plgViews   = [| AF.newViw  \"mesActual\"               mesActualW\n                                           AF.newViw  \"anoActual\"               anoActualW\n                                           AF.newViw  \"aliado\"                  nombreAliadoW\n                                           AF.newViw  \"idAliado\"                idAliadoW\n                                           AF.newViw  \"status\"                  statusAliadoW\n                                           AF.newViw  \"comision\"                comisionAliadoW\n                                           AF.newViw  \"datos\"                   datosAliadoW\n                                           AF.newViw  \"emailsInvitar\"           ModeloUI.emailsInvitarW\n                                           AF.newViw  \"invitacionesDisabled\"    ModeloUI.invitacionesDisabledW\n                                           AF.newViw  \"VideoW\"               <| V(endPointV.V |> function Video v -> v |_-> \"\")\n                                           AF.newViw  \"influencerClassW\"        influencerClassW\n                                        |]  \n                        AF.plgDocs    = [| AF.newDoc  \"Aliados\"            (lazy RenderAliados     .aliados          ()               )\n                                           AF.newDoc  \"Aliado\"             (lazy RenderAliado      .aliado           ()               )\n                                           AF.newDoc  \"Calculo\"            (lazy RenderAliado      .calculo          ()               )\n                                           AF.newDoc  \"FormaRegistro\"      (lazy FormaRegistro     .formaDoc         ()               )\n                                           AF.newDoc  \"FormaDatos\"         (lazy FormaDatos        .formaDoc         ()               )\n                                           AF.newDoc  \"FormaContactos\"     (lazy FormaContactos    .formaDoc         ()               )\n                                           AF.newDoc  \"FormaFormasPago\"    (lazy FormaFormasPago   .formaDoc         ()               )\n                                           AF.newDoc  \"contentDoc\"         (lazy getContentDoc                       ()               )\n                                           AF.newDoc  \"ReporteConsolidado\" (lazy ReporteConsolidado.consolidado      ()               )\n                                           AF.newDoc  \"TablaPagos\"         (lazy TablaPagos        .comisiones       ()               )\n                                           AF.newDoc  \"ListaDocs\"          (lazy ListaDocs         .listaDocs        ()               )\n                                           AF.newDoc  \"FormaAutorizacion\"  (lazy FormaAutorizacion .formaAutorizacion()               )\n                                           AF.newDoc  \"FormaContrato\"      (lazy FormaContrato     .formaContrato    ()               )\n                                           AF.newDoc  \"Transacciones\"      (lazy Transacciones     .transacciones    ()               )\n                                           AF.newDoc  \"Pendientes\"         (lazy Pendientes        .pendientes       ModeloUI.aliadoW )\n                                        |]  \n                        AF.plgActions = [| AF.newAct  \"Logout\"              logout\n                                           AF.newAct  \"LogIn\"               login\n                                           AF.newAct  \"enviarInvitaciones\"  enviarCorreosInvitacion\n                                           AF.newAct  \"gotoInfluencer\"      gotoInfluencer\n                                        |]\n                        AF.plgQueries = [|                                               \n                                        |]\n                    }\n                    match JS.Document.GetElementById(\"GlobalLayout\") with\n                    | null ->\n                       \"\"\"\n                            menuEditor layout\n                            |          main\n            \n                            main div \"\"\n                            :                 template  header     \"id=header\"           brand  brandV   logout \"@{Prozper.Logout}\" afiliado \"@{Prozper.aliado}\"\n                            :                 Doc       Prozper.contentDoc\n                            :                 template  sidedrawer \"id=sidedrawer\"       brand  brandV   idaliado \"@{Prozper.idAliado}\" \n                            :                 template  footer     \"id=footer\"           brand  brandV   madeby \"CIPHER Bsc\" madebylink \"www.cipherbsc.com\"\n             \n                            mainContent          template  content    \"id=content-wrapper\"  content aliados                  fecha \"@{Prozper.mesActual} @{Prozper.anoActual}\" idaliado \"@{Prozper.aliado}\"\n                            cntFormaRegistro     template  content    \"id=content-wrapper\"  content Prozper.FormaRegistro    titulo \"Referido por: @{Prozper.aliado}\"  \n                            cntFormaDatos        template  content    \"id=content-wrapper\"  content Prozper.FormaDatos       titulo \" \"\n                            cntFormaContactos    template  content    \"id=content-wrapper\"  content Prozper.FormaContactos   titulo \" \" \n                            cntFormaFormasPago   template  content    \"id=content-wrapper\"  content Prozper.FormaFormasPago  titulo \" \" \n                            cntFormaCuentas      template  content    \"id=content-wrapper\"  content ProzperLyt.FormaCuentas  titulo \" \"  \n                            cntFormaDocumentos   template  content    \"id=content-wrapper\"  content Prozper.FormaDocumentos  titulo \" \"  \n                            cntFormaNoUser       template  content    \"id=content-wrapper\"  content botonLogin               titulo \" \"  \n                            cntFormaInvitaciones template  content    \"id=content-wrapper\"  content invitaciones             titulo \" \"  \n            \n                            aliados          div       \"class=row\"\n                            :                div       \"class=mui-col-md-6\"\n                            ::               div       \"class=mui-panel mui--z5 scrollbar;max-height:550px;overflow:auto\" Prozper.Aliados\n                            :                div       \"class=mui-col-md-6\"\n                            ::               div       \"class=mui-panel mui--z5 scrollbar;max-height:550px;overflow:auto\" Aliado Comisiones\n                            brandV           Var       \"Prozper\"\n            \n                            botonLogin       div       \"class=row\"\n                            :                div       \"class=mui-col-md-6\"\n                            ::               div       \"class=mui-panel mui--z5 scrollbar;max-height:550px;overflow:auto\" \n                            :::              button    Prozper.LogIn \"class=mui-btn mui-btn--primary\" \"Ingresar al Sistema\"\n            \n                            invitaciones     div       \"class=row\"\n                            :                div       \"class=mui-col-md-6 mui-col-md-offset-1\"\n                            ::               div       \"class=mui-panel mui--z5 scrollbar; max-height:550px ; overflow:auto\" \n                            :::              h1        \"\" \"Enviar Invitaciones\"\n                            :::              textarea  Prozper.invitaciones  \"width:100% ; height:30rem; placeholder=Copie aqui las direcciones de correo electronico\" \n                            :                div       \"white-space: pre-wrap\" \"@{Prozper.emailsInvitar}\"\n                            :                button    Prozper.enviarInvitaciones \"class=mui-btn mui-btn--raised mui-btn--primary;@{Prozper.invitacionesDisabled}\" \"Enviar\"\n            \n                            Aliado           div       \"class=mui-col-md-8\"\n                            :                Doc Prozper.Aliado\n            \n                            Comisiones       template    tablacomisiones \"class=mui-col-md-3\"  tbody filasComisiones\n                            filasComisiones  concat      \"\"\n                            :                template    filacomision    \"\"  periodo \"Ene 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Feb 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Mar 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Abr 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"May 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Jun 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Jul 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Ago 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Sep 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Oct 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Nov 2018\" comision \"$1,000\"\n                            :                template    filacomision    \"\"  periodo \"Dec 2018\" comision \"$1,000\"\n                    \n                            menuEditorx      horizontal  65          menuLogo                  editorMessages\n                            double           horizontal  0-50-100    AppFramework.AppFwkClient menuEditor\n                            menuLogo         vertical    350         logo                      menu\n                            logo             span       \"margin:0;   color:gray; font-size: 55px; font-weight:530\" \"StackOverflow\"\n                            editorMessages   horizontal  10-83-100   editorButtons             messages\n                            messages         vertical    0-50-100    messagesLeft              messagesRight\n                            editorButtons    vertical    150 buttons snippetsSnippet \n                            snippetsSnippet  vertical    0-20-100    snippets                  editorProperties\n                            snippets         horizontal  20          \"@{FSharpStation.CurrentPath}\" tblDimensions2\n                            editorProperties vertical    0-100-100   snippet                   properties\n                            properties       div        \"\"           FSharpStation.Properties\n                            snippet          horizontal  35          Name                      FSharpStation.editor\n                            menu             span       \"display: grid; grid-template-columns: 30% 20% 20% 10%; grid-gap: 25px; margin:5px; grid-template-rows:50px\" inpServer btnLoad btnSaveAs\n                             \n                            severalTabs      wcomp-tabstrip  \"\" \n                            :                div \"tabname=Dimensions\" \n                            ::               div \"\" btnAddDimension RuleEditor.Dimensions\n                            :                div \"tabname=Cubes\"\n                            :                div \"tabname=Global Definitions\" RuleEditor.globalDefs\n                    \n                            btnSaveAs        button RuleEditor.SaveAs         \"class=btn @{RuleEditor.SaveNeeded}\" \"Save as...    \"\n                            btnAddDimension  button RuleEditor.AddDimension      \"\"                  \"new dim...\"\n                            btnDeleteSnippet button FSharpStation.RemoveSnippet  \"\"                  \"Delete Snippet\"\n                            btnIndentIn      button FSharpStation.IndentIn       \"\"                  \"Indent In  >> \"\n                            btnIndentOut     button FSharpStation.IndentOut      \"\"                  \"Indent Out << \"\n                            btnRunFS         button FSharpStation.RunFS          \"\"                  \"Run F#        \"\n                            btnAbortFsi      button FSharpStation.AbortFsi       \"\"                  \"Abort Fsi     \"\n                    \n                            messagesLeft     wcomp-tabstrip                      \"\"                  Output FsCode\n                            messagesRight    wcomp-tabstrip                      \"\"                  Parser\n                    \n                            buttons          div \"overflow: hidden; display: grid; grid-template-columns: 100%; grid-template-rows: repeat(15, calc(100% / 15)); bxackground-color: #eee; box-sizing: border-box; padding : 5px; grid-gap: 5px; margin-right: 21px\"\n                            :                button RuleEditor.AddCalculation    \"\"                 \"Add Calculation\"\n                            :                button RuleEditor.AddTotal          \"\"                 \"Add Total\"\n                            :                Doc       none x\n                            :                button RuleEditor.IndentIn          \"\"                  \"Indent In  >> \"\n                            :                button RuleEditor.IndentOut         \"\"                  \"Indent Out << \"\n                    \n                            Output           textarea  RuleEditor.Output         \"tabname=Output ; placeholder=Output messages ; spellcheck=false\" \n                            FsCode           textarea  RuleEditor.CodeFS         \"tabname=F# Code; placeholder=F# Code         ; spellcheck=false\" \n                            Parser           textarea  RuleEditor.Parser         \"tabname=Parser ; placeholder=Parser messages; dblclick=@{FSharpStation.JumpTo} ; spellcheck=false\" \n                            Name             Doc       InputLabel                \"\"     \"Name:\"        FSharpStation.SnippetName\n                            inpServer        Doc       InputLabel                \"\"     \"Server:\"      RuleEditor.Server\n                            btnLoad          Doc       InputFile                 \"\"     \"Load File...\" RuleEditor.LoadFile  FileName\n                            btnImport        Doc       InputFile                 \"\"     \"Import...\"    FSharpStation.Import    \"\"\n                            FileName         div                                 \"class=form-control\"  RuleEditor.fileName\n            \n                       \"\"\"\n                    | e -> e.TextContent\n                    |> LayoutEngine.newLyt layoutName\n                    |> LayoutEngine.addLayout\n            \n                    None\n                    |> Option.defaultValue layoutName\n                    |> AF.mainDocV.Set\n            \n                    let getExtraMenu =\n                        ModeloUI.aliadoW\n                        |> Doc.BindView (fun al ->\n                            if al.id = Aliado.empty.id then\n                                TemplateLib.OpcionesAdministrador().Doc()\n                            else Doc.Empty\n                        ) \n            \n                    TemplateLib()\n                        //.MainContent( AF.getMainDoc.Value )\n                        .MainContent(   getContentDoc()                     )\n                        .Menu(          getMenuDoc()                        )\n                        .headerCenter(  getDocView layoutName \"headerCenter\")\n                        .Logout(        fun _-> logout()                    )\n                        .Cortina(       if Rpc.llamadas.V > 0 then \"mui-overlay\" else \"not-mui-overlay\" )\n                        .Bind()\n                    titleV.View |> View.Sink (fun t -> JS.Document.Title <- t)\n            \n                let mainProgramLoggedOff refId =\n                    ModeloUI.refAliadoIdOV.Set <| Some refId\n                    mainProgram()\n            \n            ", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Provides balanced binary search tree operations.\n[<JavaScript>]\nmodule internal BalancedTree =\n\n    /// Represents a binary balanced search tree, preserving the balance\n    /// invariant: the heights of the branches differ by at most 1.\n    type Tree<'T when 'T : comparison> =\n        private {\n            Node    : 'T\n            Left    : Tree<'T>\n            Right   : Tree<'T>\n            Height  : int\n            Count   : int\n        }\n\n    [<Inline \"null\">]\n    let Empty<'T when 'T : comparison> = X<Tree<'T>>\n\n    [<Inline \"$tree == null\">]\n    let IsEmpty (tree: Tree<'T>) = X<bool>\n\n    [<Inline \"$tree == null ? 0 : $tree.Height\">]\n    let Height (tree: Tree<'T>) = X<int>\n            \n    [<Inline \"$tree == null ? 0 : $tree.Count\">]\n    let Count (tree: Tree<'T>) = X<int>\n\n    [<Inline \"$t.Left\">]\n    let Left (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Right\">]\n    let Right (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Node\">]\n    let Node (t: Tree<'T>) = X<'T>\n\n    let Branch node left right =\n        {\n            Node    = node\n            Left    = left\n            Right   = right\n            Height  = 1 + max (Height left) (Height right)\n            Count   = 1 + Count left + Count right\n        }\n\n    let Enumerate flip (t: Tree<'T>) : seq<'T> =\n        let rec gen (t, spine: list<'T * Tree<'T>>) =\n            if IsEmpty t then\n                match spine with\n                | []                    -> None\n                | (t, other) :: spine   -> Some (t, (other, spine))\n            else\n                if flip\n                then gen (Right t, (Node t, Left t) :: spine)\n                else gen (Left t, (Node t, Right t) :: spine)\n        Seq.unfold gen (t, [])\n\n    /// Traverses the tree in ascending order.\n    [<Inline>]\n    let Ascend t = Enumerate false t\n\n    /// Traverses the tree in descending order.\n    [<Inline>]\n    let Descend t = Enumerate true t\n\n    /// Builds a tree from sorted input and the indices of the\n    /// first and the last elements to include.\n    let rec private Build (data: 'T []) min max : Tree<'T> =\n        let sz = max - min + 1\n        if sz <= 0 then\n            Empty\n        else\n            let center = (min + max) / 2\n            let left   = Build data min (center - 1)\n            let right  = Build data (center + 1) max\n            Branch data.[center] left right\n\n    /// Quickly constructs a tree from a sorted, distinct array.\n    [<Inline>]\n    let OfSorted (data: 'T []) : Tree<'T> =\n        Build data 0 (Array.length data - 1)\n\n    let OfSeq (data: seq<'T>) : Tree<'T> =\n        let a = Seq.toArray (Seq.distinct data)\n        Array.sortInPlace a\n        OfSorted a\n\n    [<Inline \"$x.unshift($y)\">]\n    let private unshift (x: 'T) y = X<unit>\n\n    /// Unzips a tree into a matching node and a spine.\n    let Lookup (k: 'T) (t: Tree<'T>) =\n        let mutable spine = [||]\n        let mutable t = t\n        let mutable loop = true\n        while loop do\n            if IsEmpty t then loop <- false else\n                match compare k t.Node with\n                | 0 -> loop <- false\n                | 1 ->\n                    unshift spine (true, t.Node, t.Left)\n                    t <- t.Right\n                | _ ->\n                    unshift spine (false, t.Node, t.Right)\n                    t <- t.Left\n        (t, spine)\n\n    /// Rebuilds an unzipped tree by going up the spine and performing\n    /// rotations where necessary for balance.\n    let private Rebuild<'T when 'T : comparison>\n            (spine: (bool * 'T * Tree<'T>) []) (t: Tree<'T>) : Tree<'T> =\n        let h (x: Tree<'T>) = Height x\n        let mutable t = t\n        for i = 0 to spine.Length - 1 do\n            t <- (\n                match spine.[i] with\n                | false, x, r ->\n                    if h t > h r + 1 then\n                        if h t.Right = h t.Left + 1 then\n                            // Double rotation:\n                            let m = t.Right\n                            Branch  m.Node\n                                    (Branch t.Node t.Left m.Left)\n                                    (Branch x m.Right r)\n                        else\n                            // Single rotation:\n                            Branch  t.Node\n                                    t.Left\n                                    (Branch x t.Right r)\n                    else\n                        // No rotation:\n                        Branch x t r\n                | true, x, l ->\n                    if h t > h l + 1 then\n                        if h t.Left = h t.Right + 1 then\n                            // Double rotation:\n                            let m = t.Left\n                            Branch m.Node\n                                    (Branch x l m.Left)\n                                    (Branch t.Node m.Right t.Right)\n                        else\n                            // Single rotation:\n                            Branch t.Node\n                                    (Branch x l t.Left)\n                                    t.Right\n                    else\n                        // No rotation:\n                        Branch x l t\n            )\n        t\n\n    /// Inserts or updates a node in the tree. If a matching node is found,\n    /// it is replaced with the value of \"combine old new\".\n    let Put<'T when 'T : comparison> combine k (t: Tree<'T>) : Tree<'T> =\n        let (t, spine) = Lookup k t\n        if IsEmpty t then\n            Rebuild spine (Branch k Empty Empty)\n        else\n            Rebuild spine (Branch (combine t.Node k) t.Left t.Right)\n\n    /// Removes a node from the tree.\n    let Remove k (src: Tree<'T>) =\n        let (t, spine) = Lookup k src\n        if IsEmpty t then\n            src\n        else\n            if IsEmpty t.Right then\n                Rebuild spine t.Left\n            elif IsEmpty t.Left then\n                Rebuild spine t.Right\n            else\n                Seq.append (Ascend t.Left) (Ascend t.Right)\n                |> Seq.toArray\n                |> OfSorted\n                |> Rebuild spine\n\n    /// Adds a node into the tree, replacing an existing one if found.\n    let Add<'T when 'T : comparison> (x: 'T) (t: Tree<'T>) : Tree<'T> =\n        Put (fun _ x -> x) x t\n\n    /// Checks if a tree contains a given key.\n    let rec Contains (v: 'T) (t: Tree<'T>) : bool =\n        not (IsEmpty (fst (Lookup v t)))\n\n    /// Looks up a node by key.\n    let TryFind (v: 'T) (t: Tree<'T>) =\n        let x = fst (Lookup v t)\n        if IsEmpty x then None else Some x.Node\n\n\n\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\n\n/// Represents a key-value pair with comparison and equality\n/// ignoring the value and using only the key.\n[<CustomComparison>]\n[<CustomEquality>]\n[<JavaScript>]\ntype internal Pair<'K,'V when 'K : comparison> =\n    {\n        Key     : 'K\n        Value   : 'V\n    }\n\n    override this.GetHashCode() = hash this.Key\n\n    override this.Equals(other: obj) =\n        this.Key = (other :?> Pair<'K,'V>).Key\n\n    interface System.IComparable with\n        member this.CompareTo(other: obj) =\n            compare this.Key (other :?> Pair<'K,'V>).Key\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Collections\nmodule T = BalancedTree\n\n[<JavaScript>]\n[<AutoOpen>]\nmodule private MapUtil =\n\n    let fromSeq(s: seq<_>) =\n        let a : Pair<_,_> [] =\n            [| for (k, v) in Seq.distinctBy fst s ->\n                { Key = k; Value = v } |]\n        Array.sortInPlace a\n        T.OfSorted a\n\n/// Implements a proxy for the F# Map type.\n[<Name \"FSharpMap\">]\n[<Proxy(typeof<Map<_,_>>)>]\ntype internal FSharpMap<'K,'V when 'K : comparison>\n\n    (tree: T.Tree<Pair<'K,'V>>) =\n\n        new (s: seq<_>) = new FSharpMap<_,_>(fromSeq s)\n\n        member this.Tree = tree\n\n        member this.Add(k: 'K, v: 'V) : Map<'K,'V> =\n            As (FSharpMap<'K,'V>(tree |> T.Add {Key=k; Value=v}))\n\n        member this.ContainsKey k = \n            tree |> T.Contains {Key=k; Value = JS.Undefined}\n\n        member this.TryGetValue (k: 'K, r: byref<'V>) = \n            match this.TryFind k with\n            | Some v ->\n                r <- v\n                true\n            | _ ->\n                false\n\n        member this.Count = T.Count tree\n\n        member this.IsEmpty = T.IsEmpty tree\n\n        member this.Item \n            with get (k: 'K) : 'V =\n                match this.TryFind k with\n                | Some v    ->v\n                | None      ->\n                    failwith \"The given key was not present in the dictionary.\"\n\n        member this.Remove(k: 'K) : Map<'K,'V> =\n            As (FSharpMap(tree |> T.Remove {Key=k; Value=JS.Undefined}))\n\n        member this.TryFind(k: 'K) =\n            tree\n            |> T.TryFind {Key=k; Value=JS.Undefined}\n            |> Option.map (fun kv -> kv.Value)\n\n        member this.GetEnumerator() =\n            let s =\n                T.Ascend tree\n                |> Seq.map (fun kv ->\n                    new KeyValuePair<_,_>(kv.Key, kv.Value))\n            s.GetEnumerator()\n\n        override this.GetHashCode() =\n            hash (Seq.toArray this)\n\n        override this.Equals(other) =\n            let other = As<FSharpMap<'K,'V>> other\n            this.Count = other.Count\n            && Seq.forall2 ( = ) this other\n\n        interface System.IComparable with\n            member this.CompareTo other =\n                Seq.compareWith (fun x y ->\n                    compare (As<Pair<'K,'V>> x) (As<Pair<'K,'V>> y))\n                    this\n                    (As<Map<'K,'V>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n\n        interface IEnumerable<KeyValuePair<'K,'V>> with\n            member this.GetEnumerator() = this.GetEnumerator()\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Map module.\n[<Proxy \"Microsoft.FSharp.Collections.MapModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\n[<Name \"Map\">]\nmodule internal MapModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    let private ToTree (m: Map<'K,'V>) =\n        (As<FSharpMap<'K,'V>> m).Tree\n\n    [<Inline>]\n    let private OfTree (t: T.Tree<_>) : Map<'K,'V> =\n        As (new FSharpMap<'K,'V>(t))\n\n    [<Inline>]\n    let Add k v (m: Map<'K,'V>) : Map<'K,'V> = m.Add(k, v)\n\n    [<Inline>]\n    let ContainsKey k (m: Map<'K,'V>) : bool = m.ContainsKey k\n\n    [<Inline>]\n    let Empty<'K,'V when 'K : comparison> : Map<'K,'V> = new Map<_,_>([||])\n\n    let Exists (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : bool =\n        m |> Seq.exists (fun kv -> f kv.Key kv.Value)\n\n    let Filter (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> =\n        T.Ascend (ToTree m)\n        |> Seq.filter (fun kv -> f kv.Key kv.Value)\n        |> Seq.toArray\n        |> T.OfSorted\n        |> OfTree\n\n    [<Inline>]\n    let Find (k: 'K) (m: Map<'K,'V>) : 'V = m.[k]\n\n    let FindKey (f: 'K -> 'T -> bool) (m: Map<'K,'T>) : 'K =\n        m \n        |> Seq.pick (fun kv -> \n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    let rec Fold<'K,'V,'S when 'K : comparison>\n        (f: 'S -> 'K -> 'V -> 'S) (s: 'S) (m: Map<'K,'V>) : 'S =\n            T.Ascend (ToTree m)\n            |> Seq.fold (fun s kv -> f s kv.Key kv.Value) s\n\n    let rec FoldBack (f: 'K -> 'V -> 'S -> 'S) (m: Map<'K,'V>) (s: 'S) : 'S =\n        T.Descend (ToTree m)\n        |> Seq.fold (fun s kv -> f kv.Key kv.Value s) s\n\n    let rec ForAll (f: 'K -> 'V -> bool) (m: Map<'K, 'V>) : bool =\n        m |> Seq.forall (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    let IsEmpty (m: Map<'K, 'V>) : bool = m.IsEmpty\n\n    let rec Iterate (f: 'K -> 'V -> unit) (m: Map<'K, 'V>) : unit =\n        m |> Seq.iter (fun kv -> f kv.Key kv.Value)\n\n    let OfArray (a: ('K * 'V) []) : Map<'K,'V> =\n        a\n        |> Seq.map (fun (k, v) -> {Key = k; Value = v} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n    [<Inline>]\n    let OfList (kvs: list<'K * 'V>) : Map<'K,'V> = Map.ofSeq kvs\n\n    [<Inline>]\n    let OfSeq (s: seq<'K * 'V>) : Map<'K, 'V> =\n        Map.ofArray (Seq.toArray s)\n\n    let Partition (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> * Map<'K,'V> =\n        let (x, y) =\n            Seq.toArray (T.Ascend (ToTree m))\n            |> Array.partition (fun kv -> f kv.Key kv.Value)\n        (OfTree (T.OfSorted x), OfTree (T.OfSorted y))\n\n    let Pick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : 'T =\n        m |> Seq.pick (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    let Remove (k: 'K) (m: Map<'K, 'V>) : Map<'K, 'V> = m.Remove k\n\n    [<Inline>]\n    let ToArray (m: Map<'K, 'V>) : array<'K * 'V> = Seq.toArray (Map.toSeq m)\n\n    [<Inline>]\n    let ToList (m: Map<'K, 'V>) : list<'K * 'V> = Seq.toList (Map.toSeq m)\n\n    let ToSeq (m: Map<'K, 'V>) : seq<'K * 'V> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> (kv.Key, kv.Value))\n\n    let TryFind (k: 'K) (m: Map<'K, 'V>) : option<'V> = m.TryFind k\n\n    let TryFindKey (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : option<'K> =\n        m |> Seq.tryPick (fun kv ->\n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    let rec TryPick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : option<'T> =\n        m |> Seq.tryPick (fun kv -> f kv.Key kv.Value)\n         \n    let rec Map (f: 'K -> 'V -> 'T) (m: Map<'K,'V>) : Map<'K,'T> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> \n            {Key = kv.Key; Value = f kv.Key kv.Value} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nmodule T = BalancedTree\n\n/// Implements a proxy for the F# Set type.\n[<Name \"FSharpSet\">]\n[<Proxy(typeof<Set<_>>)>]\ntype private FSharpSet<'T when 'T : comparison>\n\n    internal (tree: T.Tree<'T>) =\n\n        new (s: seq<'T>) = new FSharpSet<'T>(T.OfSeq s)\n\n        member this.add(x: Set<'T>) =\n            Set.union (As this) x\n\n        member this.sub(x: Set<'T>) =\n            Set.difference (As this) x\n\n        member this.Add x : Set<'T> =\n            As (FSharpSet<'T>(T.Add x tree))\n\n        member this.Contains v = T.Contains v tree\n\n        member this.Count = T.Count tree\n\n        member this.IsEmpty = T.IsEmpty tree\n\n        member internal this.Tree = tree\n\n        member this.IsProperSubsetOf(s: Set<'T>) =\n            this.IsSubsetOf s && this.Count < s.Count\n\n        member this.IsProperSupersetOf(s: Set<'T>) =\n            this.IsSupersetOf s && this.Count > s.Count\n\n        member this.IsSubsetOf(s: Set<'T>) =\n            Seq.forall s.Contains this\n\n        member this.IsSupersetOf(s: Set<'T>) =\n            Seq.forall this.Contains s\n\n        member this.MaximumElement = Seq.head (T.Descend tree)\n\n        member this.MinimumElement = Seq.head (T.Ascend tree)\n\n        member this.Remove v : Set<'T> =\n            As (FSharpSet<'T>(T.Remove v tree))\n\n        member this.GetEnumerator() =\n            (T.Ascend tree).GetEnumerator()\n\n        static member (+) (x, y) : Set<'T> =\n            Set.union x y        \n\n        static member (-) (x, y) : Set<'T> =\n            Set.difference x y        \n\n        override this.GetHashCode() =\n            -1741749453 + ((Seq.toArray this).GetHashCode())\n\n        override this.Equals(other: obj) =\n            this.Count = (As<FSharpSet<'T>> other).Count\n            && Seq.forall2 ( = ) this (As<FSharpSet<'T>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n\n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = this.GetEnumerator()\n\n        interface System.IComparable with\n            member this.CompareTo other =\n                Seq.compareWith compare this (As<FSharpSet<'T>> other)\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Set module.\n[<Proxy \"Microsoft.FSharp.Collections.SetModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\n[<Name \"Set\">]\nmodule internal SetModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    let private ToTree (s: Set<'T>) =\n        (As<FSharpSet<'T>> s).Tree\n\n    [<Inline>]\n    let private OfTree (t: T.Tree<'T>) =\n        As<Set<'T>> (new FSharpSet<'T>(t))\n\n    [<Inline>]\n    let Add v (s: Set<_>) = s.Add v\n\n    [<Inline>]\n    let Contains v (s: Set<_>) = s.Contains v\n\n    [<Inline>]\n    let Count (s: Set<_>) = s.Count\n\n    [<Inline>]\n    let Difference (s1: Set<_>) (s2: Set<_>) =\n        Set.filter (fun x -> not (s2.Contains x)) s1\n\n    [<Inline>]\n    let Empty<'T when 'T : comparison> : Set<'T> = OfTree T.Empty\n\n    [<Inline>]\n    let Exists f (s: Set<'T>) = Seq.exists f s\n\n    let Filter f (s: Set<'T>) =\n        OfTree (T.OfSorted (Seq.toArray (Seq.filter f s)))\n\n    [<Inline>]\n    let Fold<'T,'S when 'T : comparison>\n        (f: 'S -> 'T -> 'S) (x: 'S) (a: Set<'T>) =\n            Seq.fold f x a\n\n    let FoldBack (f: 'T -> 'S -> 'S) (a: Set<'T>) (s: 'S) : 'S =\n        Seq.fold (fun s x -> f x s) s (T.Descend (ToTree a))\n\n    [<Inline>]\n    let ForAll f (a: Set<_>) = Seq.forall f a\n\n    [<Inline>]\n    let Intersect (s1: Set<'T>) (s2: Set<'T>) = Set.filter s2.Contains s1\n\n    [<Inline>]\n    let IntersectMany (s: seq<Set<_>>) = Seq.reduce Set.intersect s\n\n    [<Inline>]\n    let IsEmpty (a: Set<_>) = a.IsEmpty\n\n    [<Inline>]\n    let IsProperSubset (a: Set<_>) b = a.IsProperSubsetOf b\n\n    [<Inline>]\n    let IsProperSuperset (a: Set<_>) b = a.IsProperSupersetOf b\n\n    [<Inline>]\n    let IsSubset (a: Set<_>) b = a.IsSubsetOf b\n\n    [<Inline>]\n    let IsSuperset (a: Set<_>) b = a.IsSupersetOf b\n\n    [<Inline>]\n    let Iterate f (s: Set<_>) = Seq.iter f s\n\n    [<Inline>]\n    let Map f (s: Set<_>) = Set.ofSeq (Seq.map f s)\n\n    [<Inline>]\n    let MaxElement (s: Set<_>) = s.MaximumElement\n\n    [<Inline>]\n    let MinElement (s: Set<_>) = s.MinimumElement\n\n    [<Inline>]\n    let OfArray (a: 'T []) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    let OfList (a: list<'T>) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    let OfSeq (a: seq<'T>) = OfTree (T.OfSeq a)\n\n    let Partition f (a: Set<_>) =\n        let (x, y) = Array.partition f (Seq.toArray a)\n        (Set.ofArray x, Set.ofArray y)\n\n    [<Inline>]\n    let Remove v (a: Set<_>) = a.Remove v\n\n    [<Inline>]\n    let Singleton x = Set.add x Set.empty\n\n    [<Inline>]\n    let ToArray (a: Set<_>) = Seq.toArray a\n\n    [<Inline>]\n    let ToList (a: Set<_>) = Seq.toList a\n\n    [<Inline>]\n    let ToSeq (a: Set<_>) : seq<_> = a :> _\n\n    [<Inline>]\n    let Union (s1: Set<_>) (s2: Set<_>) =\n        Set.ofSeq (Seq.append s1 s2)\n\n    [<Inline>]\n    let UnionMany (sets: seq<Set<_>>) =\n        Set.ofSeq (Seq.concat sets)\n\n\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.ResizeArray\n\nopen WebSharper\nopen WebSharper.JavaScript\ntype private IComparer<'T> = System.Collections.Generic.IComparer<'T>\n\n[<Name \"WebSharper.Collections.ListEnumerator\">]\n[<Proxy(typeof<System.Collections.Generic.List.Enumerator<_>>)>]\ntype ResizeArrayEnumeratorProxy<'T> [<JavaScript>] (arr: 'T[]) =\n    let mutable i = -1\n\n    [<JavaScript>] \n    member this.MoveNext() =\n        i <- i + 1\n        i < arr.Length\n\n    [<JavaScript>] \n    member this.Current with get() = arr.[i]\n\n    interface System.Collections.IEnumerator with\n        [<JavaScript>] \n        member this.MoveNext() = this.MoveNext()\n        [<JavaScript>]\n        member this.Current with get() = box (arr.[i])\n        member this.Reset() = failwith \"IEnumerator.Reset not supported\"\n\n    interface System.Collections.Generic.IEnumerator<'T> with\n        [<JavaScript>]\n        member this.Current with get() = arr.[i]\n\n    interface System.IDisposable with\n        [<JavaScript>] \n        member this.Dispose() = ()\n\n[<Proxy(typeof<System.Collections.Generic.List<_>>)>]\n[<Name \"WebSharper.Collections.List\">]\n[<Prototype false>]\ntype ResizeArrayProxy<'T> [<Inline \"$_arr\">] (_arr: 'T []) =\n\n    [<Inline \"[]\">]\n    new () =\n        new ResizeArrayProxy<'T>([||])\n\n    [<Inline \"[]\">]\n    new (size: int) =\n        new ResizeArrayProxy<'T>([||])\n\n    [<Inline>]\n    new (el: seq<'T>) =\n        new ResizeArrayProxy<'T>(Seq.toArray el)\n\n    [<Inline>]\n    member this.GetEnumerator() =\n        As<System.Collections.Generic.List.Enumerator<'T>>(new ResizeArrayEnumeratorProxy<'T>(As<'T[]> this))\n\n    interface 'T seq with\n        member this.GetEnumerator() = (As<System.Collections.IEnumerable> this).GetEnumerator()\n        member this.GetEnumerator() = (As<seq<'T>> this).GetEnumerator()\n\n    [<Inline>]\n    member this.Add(x: 'T) : unit =\n        As<'T[]>(this).JS.Push(x) |> ignore\n\n    [<Inline>]\n    member this.AddRange(x: seq<'T>) : unit =\n        Seq.iter this.Add x\n\n    [<Inline>]\n    member this.AsReadOnly() : System.Collections.ObjectModel.ReadOnlyCollection<'T> =\n        System.Array.AsReadOnly(As<'T[]> this)\n\n    [<Inline>]\n    member this.BinarySearch(start: int, length: int, item: 'T, comparer: IComparer<'T>) : int =\n        System.Array.BinarySearch(As<'T[]> this, start, length, item, comparer)\n\n    [<Inline>]\n    member this.BinarySearch(item: 'T) : int =\n        System.Array.BinarySearch(As<'T[]> this, item)\n\n    [<Inline>]\n    member this.BinarySearch(item: 'T, comparer: IComparer<'T>) : int =\n        System.Array.BinarySearch(As<'T[]> this, item, comparer)\n\n    [<Inline>]\n    member this.Clear() : unit =\n        (As<'T[]> this).JS.Splice(0, this.Count) |> ignore\n\n    [<Inline>]\n    member this.Contains(item: 'T) : bool =\n        System.Array.Exists(As<'T[]> this, fun x -> System.Collections.Generic.EqualityComparer.Default.Equals(item, x))\n\n    [<Inline>]\n    member this.ConvertAll<'U>(conv: System.Converter<'T, 'U>) : ResizeArray<'U> =\n        ResizeArray<'U>(System.Array.ConvertAll(As<'T[]> this, conv))\n\n    [<Inline>]\n    member this.CopyTo(arr: 'T[]) : unit =\n        this.CopyTo(arr, 0)\n\n    [<Inline>]\n    member this.CopyTo(arr: 'T[], offset: int) : unit =\n        this.CopyTo(0, arr, offset, this.Count)\n\n    [<Inline>]\n    member this.CopyTo(index: int, target: 'T[], offset: int, count: int) : unit =\n        Array.blit (As<'T[]> this) index target offset count\n\n    [<Inline>]\n    member this.Count : int = (As<'T[]> this).Length\n\n    [<Inline>]\n    member this.Exists(pred: System.Predicate<'T>) : bool =\n        System.Array.Exists(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.Find(pred: System.Predicate<'T>) : 'T =\n        System.Array.Find(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindAll(pred: System.Predicate<'T>) : ResizeArray<'T> =\n        ResizeArray<'T>(System.Array.FindAll(As<'T[]> this, pred))\n\n    [<Inline>]\n    member this.FindIndex(pred: System.Predicate<'T>) : int =\n        System.Array.FindIndex(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindIndex(start: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindIndex(As<'T[]> this, start, pred)\n\n    [<Inline>]\n    member this.FindIndex(start: int, count: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindIndex(As<'T[]> this, start, count, pred)\n\n    [<Inline>]\n    member this.FindLast(pred: System.Predicate<'T>) : 'T =\n        System.Array.FindLast(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindLastIndex(pred: System.Predicate<'T>) : int =\n        System.Array.FindLastIndex(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindLastIndex(start: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindLastIndex(As<'T[]> this, start, pred)\n\n    [<Inline>]\n    member this.FindLastIndex(start: int, count: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindLastIndex(As<'T[]> this, start, count, pred)\n\n    [<Inline>]\n    member this.ForEach(action: System.Action<'T>) : unit =\n        System.Array.ForEach(As<'T[]> this, action)\n\n    [<Inline>]\n    member this.GetRange(index: int, count: int) : ResizeArray<'T> =\n        As (ResizeArrayProxy<'T>(Array.sub (As<'T[]> this) index count))\n\n    [<Inline>]\n    member this.IndexOf(item: 'T) : int =\n        System.Array.IndexOf(As<'T[]> this, item)\n\n    [<Inline>]\n    member this.IndexOf(item: 'T, start: int) : int =\n        System.Array.IndexOf(As<'T[]> this, item, start)\n\n    [<Inline>]\n    member this.IndexOf(item: 'T, start: int, count: int) : int =\n        System.Array.IndexOf(As<'T[]> this, item, start, count)\n\n    [<Inline>]\n    member this.Insert(index: int, item: 'T) : unit =\n        (As<'T[]> this).JS.Splice(index, 0, item) |> ignore\n\n    [<Inline>]\n    member this.InsertRange(index: int, items: seq<'T>) : unit =\n        (As<'T[]> this).JS.Splice(index, 0, Array.ofSeq items) |> ignore\n\n    member this.Item\n        with [<Inline>] get (x: int) : 'T = (As<'T[]> this).[x]\n        and [<Inline>] set (x: int) (v: 'T) = (As<'T[]> this).[x] <- v\n\n    [<Inline>]\n    member this.LastIndexOf(item: 'T) : int =\n        System.Array.LastIndexOf(As<'T[]> this, item)\n\n    [<Inline>]\n    member this.LastIndexOf(item: 'T, start: int) : int =\n        System.Array.LastIndexOf(As<'T[]> this, item, start)\n\n    [<Inline>]\n    member this.LastIndexOf(item: 'T, start: int, count: int) : int =\n        System.Array.LastIndexOf(As<'T[]> this, item, start, count)\n\n    member this.Remove(item: 'T) : bool =\n        match this.IndexOf(item) with\n        | -1 -> false\n        | n -> this.RemoveAt(n); true\n\n    member this.RemoveAll(pred: System.Predicate<'T>) : int =\n        let mutable removed = 0\n        let mutable i = 0\n        while i < this.Count do\n            if pred.Invoke((As<'T[]> this).JS.[i]) then\n                let mutable j = i + 1\n                while j < this.Count && pred.Invoke((As<'T[]> this).JS.[j]) do\n                    j <- j + 1\n                removed <- removed + j - i\n                (As<'T[]> this).JS.Splice(i, j - i) |> ignore\n            else\n                i <- i + 1\n        removed\n\n    [<Inline>]\n    member this.RemoveAt(x: int) : unit =\n        (As<'T[]> this).JS.Splice(x, 1) |> ignore\n\n    [<Inline>]\n    member this.RemoveRange(index: int, count: int) : unit =\n        (As<'T[]> this).JS.Splice(index, count) |> ignore\n\n    [<Inline>]\n    member this.Reverse() : unit =\n        System.Array.Reverse(As<'T[]> this)\n\n    [<Inline>]\n    member this.Reverse(index: int, count: int) : unit =\n        System.Array.Reverse(As<'T[]> this, index, count)\n\n    [<Inline>]\n    member this.Sort() : unit =\n        System.Array.Sort(As<'T[]> this)\n\n    [<Inline>]\n    member this.Sort(comp: IComparer<'T>) : unit =\n        System.Array.Sort(As<'T[]> this, comp)\n\n    [<Inline>]\n    member this.Sort(start: int, length: int, comp: IComparer<'T>) : unit =\n        System.Array.Sort(As<'T[]> this, start, length, comp)\n\n    [<Inline>]\n    member this.Sort(comp: System.Comparison<'T>) : unit =\n        System.Array.Sort(As<'T[]> this, comp)\n\n    [<Inline>]\n    member this.ToArray() : 'T [] =\n        Array.copy (As<'T[]> this)\n\n    [<Inline>]\n    member this.TrimExcess() = ()\n\n    [<Inline>]\n    member this.TrueForAll(pred: System.Predicate<'T>) : bool =\n        System.Array.TrueForAll(As<'T[]> this, pred)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.LinkedList\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype LL<'T> = LinkedList<'T>\ntype LLN<'T> = LinkedListNode<'T>\ntype LLE<'T> = LinkedList<'T>.Enumerator\n\n[<Proxy(typeof<LLN<_>>)>]\n[<Name \"WebSharper.Collections.LinkedListNode\">]\ntype NodeProxy<'T> =\n    member this.Previous with [<Inline \"$this.p\">] get () = X<LLN<'T>>\n    member this.Next     with [<Inline \"$this.n\">] get () = X<LLN<'T>>\n    member this.Value    with [<Inline \"$this.v\">] get () = X<'T>\n\n[<Inline \"{p: $p, n: $n, v: $v}\">]\nlet newNode<'T> (p: LLN<'T>) (n: LLN<'T>) (v: 'T) = X<LLN<'T>>\n\n[<Inline \"$node.p = $p\" >]\nlet setPrev (node: LLN<'T>) (p: LLN<'T>) = ()\n\n[<Inline \"$node.n = $n\" >]\nlet setNext (node: LLN<'T>) (n: LLN<'T>) = ()\n\n[<Proxy(typeof<LLE<_>>)>]\n[<Name \"WebSharper.Collections.LinkedListEnumerator\">]\ntype EnumeratorProxy<'T> [<JavaScript>] (l: LLN<'T>) =\n    let mutable c = l\n\n    interface IEnumerator<'T> with\n        member this.Current = c.Value\n        \n        member this.Current = c.Value |> box\n\n        member this.MoveNext() =\n            c <- c.Next\n            c <> null\n\n        member this.Dispose() = ()\n\n        member this.Reset() = ()\n\n[<Proxy(typeof<LL<_>>)>]\n[<Name \"WebSharper.Collections.LinkedList\">]\ntype ListProxy<'T> [<JavaScript>] (coll: 'T seq) =\n    let mutable c = 0\n    let mutable n = null\n    let mutable p = null\n\n    do  let ie = coll.GetEnumerator()\n        if ie.MoveNext() then\n            n <- newNode null null ie.Current\n            p <- n\n            c <- 1\n        while ie.MoveNext() do\n            let node = newNode p null ie.Current\n            setNext p node\n            p <- node\n            c <- c + 1\n            \n    new () = ListProxy(Seq.empty)          \n\n    [<Inline>]\n    member this.Count = c\n\n    [<Inline>]\n    member this.First = n\n\n    [<Inline>]\n    member this.Last = p\n\n    member this.AddAfter(after: LLN<'T>, value) =\n        let before = after.Next\n        let node = newNode after before value\n        if after.Next = null then p <- node\n        setNext after node\n        if before <> null then setPrev before node\n        c <- c + 1\n        node\n\n    member this.AddBefore(before: LLN<'T>, value) =\n        let after = before.Previous\n        let node = newNode after before value\n        if before.Previous = null then n <- node \n        setPrev before node\n        if after <> null then setNext after node\n        c <- c + 1\n        node\n\n    member this.AddFirst(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddBefore(n, value)\n\n    member this.AddLast(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddAfter(p, value)\n\n    member this.Clear() =\n        c <- 0\n        n <- null\n        p <- null\n\n    member this.Contains(value: 'T) =\n        let mutable found = false\n        let mutable node = n\n        while node <> null && not found do\n            if node.Value ==. value then found <- true \n            else node <- node.Next\n        found\n            \n    member this.Find(value: 'T) =\n        let mutable node = n\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Next\n        if notFound then null else node\n\n    member this.FindLast(value: 'T) = \n        let mutable node = p\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Previous\n        if notFound then null else node\n                \n    member this.GetEnumerator(): LinkedList<'T>.Enumerator =\n        As (new EnumeratorProxy<_>(As this))\n\n    interface IEnumerable with\n        member this.GetEnumerator() = this.GetEnumerator() :> _\n\n    interface IEnumerable<'T> with\n        member this.GetEnumerator() = this.GetEnumerator() :> _\n\n    member this.Remove(node: LLN<'T>) =\n        let before = node.Previous\n        let after = node.Next\n        if before = null then n <- after else setNext before after\n        if after = null then p <- before else setPrev after before\n        c <- c - 1\n        \n    member this.Remove(value) = \n        let node = this.Find(value)\n        if node = null then false\n        else\n            this.Remove(node)\n            true\n\n    member this.RemoveFirst() = this.Remove(n)\n\n    member this.RemoveLast() = this.Remove(p)\n               \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen System.Linq\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper.Core\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<IGrouping<_, _>>)>]\ntype internal IGroupingProxy<'K, 'T> =\n    abstract Key : 'K\n\n[<JavaScript>]\ntype internal Grouping<'K, 'T> (k: 'K, v: seq<'T>) =\n\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            v.GetEnumerator()\n\n    interface System.Collections.IEnumerable with\n        member this.GetEnumerator() =\n            (v :> System.Collections.IEnumerable).GetEnumerator()\n\n    interface System.Linq.IGrouping<'K, 'T> with\n        member this.Key = k\n\n[<Proxy(typeof<IOrderedEnumerable<_>>)>]\ntype internal IOrderedEnumerableProxy<'T> =\n    inherit seq<'T>\n    abstract CreateOrderedEnumerable<'K>\n        : keySelector: Func<'T, 'K>\n        * comparer: IComparer<'K>\n        * descending: bool\n        -> IOrderedEnumerable<'T>\n\n[<JavaScript>]\ntype internal FsComparer<'T when 'T : comparison>() =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            compare x y\n\n[<JavaScript>]\ntype internal ProjectionComparer<'T, 'K>(primary: IComparer<'K>, projection: Func<'T, 'K>) =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            primary.Compare(projection.Invoke x, projection.Invoke y)\n\n[<JavaScript>]\ntype internal CompoundComparer<'T>(primary: IComparer<'T>, secondary: IComparer<'T>) =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            match primary.Compare(x, y) with\n            | 0 -> secondary.Compare(x, y)\n            | n -> n\n\n[<JavaScript>]\ntype internal ReverseComparer<'T, 'K>(primary: IComparer<'K>, projection: Func<'T, 'K>) =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            primary.Compare(projection.Invoke y, projection.Invoke x)\n\n[<JavaScript>]\ntype internal OrderedEnumerable<'T>(source: seq<'T>, primary: IComparer<'T>) =\n    interface IOrderedEnumerable<'T> with\n        member this.CreateOrderedEnumerable(keySelector, secondary, descending) =\n            let secondary =\n                if descending then\n                    ReverseComparer(secondary, keySelector) :> IComparer<'T>\n                else\n                    ProjectionComparer(secondary, keySelector) :> IComparer<'T>\n            OrderedEnumerable<'T>(source, CompoundComparer(primary, secondary)) :> _\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            let a = Array.ofSeq source\n            Array.sortInPlaceWith (fun x y -> primary.Compare(x, y)) a\n            (a :> seq<'T>).GetEnumerator()\n    interface IEnumerable with\n        member this.GetEnumerator() =\n            (this :> IEnumerable<'T>).GetEnumerator() :> _\n\n//[<Proxy(typeof<ILookup<_, _>>)>]\n//type internal ILookupProxy<'K, 'E> =\n//    inherit seq<IGrouping<'K, 'E>>\n//    inherit IEnumerable\n//    abstract Item : 'K -> 'E with get\n//    abstract Count : int with get\n//    abstract Contains : 'K -> bool\n//\n//[<JavaScript>]\n//type internal Lookup<'K, 'T, 'E>(source: seq<'T>, key: Func<'T, 'K>, elt: Func<'T, 'E>, comparer: IEqualityComparer<'K>) =\n//\n//    let dc = lazy (\n//        let d = Dictionary<'K, ResizeArray<'E>>(comparer)\n//        let count = ref 0\n//        source |> Seq.iter (fun e ->\n//            incr count\n//            let k = key.Invoke e\n//            let v = elt.Invoke e\n//            if d.ContainsKey k then\n//                d.[k].Add(v)\n//            else\n//                d.Add(k, ResizeArray([|v|]))\n//        )\n//        d, !count\n//    )\n//\n//    let s = lazy (\n//        fst dc.Value |> Seq.map (fun (KeyValue(k, v)) ->\n//            Grouping(k, v) :> IGrouping<_,_>)\n//    )\n//\n//    interface seq<IGrouping<'K, 'E>> with\n//        member this.GetEnumerator() = s.Value.GetEnumerator()\n//    interface IEnumerable with\n//        member this.GetEnumerator() = (s.Value :> IEnumerable).GetEnumerator()\n//    interface ILookup<'K, 'E> with\n//        member this.Item with get k = (fst dc.Value).[k] :> seq<_>\n//        member this.Count = snd dc.Value\n//        member this.Contains(k) = (fst dc.Value).ContainsKey(k)\n\ntype private LinqMacro() =\n    inherit Macro()\n\n    override this.TranslateCall(c) = //e, t, m, a, _) =\n        let targ = c.Method.Generics.[0]\n        WebSharper.Core.Macros.EqualityComparer.GetDefault(c.Compilation, targ)\n        |> MacroResult.Map (fun ec ->\n            let m' =\n                let t =\n                    AST.Type.ConcreteType {\n                        Generics = [targ]\n                        Entity =\n                            typedefof<IEqualityComparer<int>>\n                            |> AST.Reflection.ReadTypeDefinition\n                    }\n                let m = c.Method.Entity.Value\n                { m with Parameters = m.Parameters @ [t] }\n            let m = { c.Method with Entity = Hashed m' }\n            AST.Call(c.This, c.DefiningType, c.Method, c.Arguments @ [ec]))\n\n[<Name \"WebSharper.Linq\">]\n[<Proxy(typeof<System.Linq.Enumerable>)>]\n[<JavaScript>]\ntype private LinqProxy =\n\n    [<Inline>]\n    static member Aggregate<'T>(this: seq<'T>, func: Func<'T, 'T, 'T>) : 'T =\n        Seq.reduce (fun x y -> func.Invoke(x, y)) this\n\n    [<Inline>]\n    static member Aggregate<'T, 'U>(this: seq<'T>, seed: 'U, func: Func<'U, 'T, 'U>) : 'U =\n        Seq.fold (fun x y -> func.Invoke(x, y)) seed this\n\n    [<Inline>]\n    static member Aggregate<'T, 'U, 'R>(this: seq<'T>, seed: 'U, func: Func<'U, 'T, 'U>, resultSelector: Func<'U, 'R>) : 'R =\n        resultSelector.Invoke(Seq.fold (fun x y -> func.Invoke(x, y)) seed this)\n\n    [<Inline>]\n    static member All<'T>(this: seq<'T>, predicate: Func<'T, bool>) : bool =\n        Seq.forall predicate.Invoke this\n\n    [<Inline>]\n    static member Any<'T>(this: seq<'T>) : bool =\n        not (Seq.isEmpty this)\n\n    [<Inline>]\n    static member Any<'T>(this: seq<'T>, predicate: Func<'T, bool>) : bool =\n        Seq.exists predicate.Invoke this\n\n    [<Inline>]\n    static member AsEnumerable<'T>(this: seq<'T>) : seq<'T> =\n        this\n\n    [<Inline>]\n    static member Average(this: seq<Nullable<int>>) : Nullable<float> =\n        LinqProxy.Average(Seq.cast<Nullable<float>> this)\n\n    [<Inline>]\n    static member Average(this: seq<Nullable<int64>>) : Nullable<float> =\n        LinqProxy.Average(Seq.cast<Nullable<float>> this)\n\n    static member Average(this: seq<Nullable<float>>) : Nullable<float> =\n        let mutable x = [||]\n        use e = this.GetEnumerator()\n        while e.MoveNext() do\n            if e.Current.HasValue then\n                x.JS.Push e.Current.Value |> ignore\n        if x.Length = 0 then\n            Nullable()\n        else\n            Nullable(Seq.sum x / float x.Length)\n\n    [<Inline>]\n    static member Average(this: seq<float>) : float =\n        Seq.average this\n\n    [<Inline>]\n    static member Average(this: seq<int64>) : float =\n        Seq.average (Seq.cast<float> this)\n\n    [<Inline>]\n    static member Average(this: seq<int>) : float =\n        Seq.average (Seq.cast<float> this)\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<float> =\n        LinqProxy.Average (Seq.cast<Nullable<float>> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, int64>) : float =\n        Seq.average (Seq.cast<float> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<float> =\n        LinqProxy.Average (Seq.cast<Nullable<float>> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Average (Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        Seq.average (Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, int>) : float =\n        Seq.average (Seq.cast<float> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Cast<'T>(this: IEnumerable) : seq<'T> =\n        Seq.cast this\n\n    [<Inline>]\n    static member Concat<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        Seq.append this second\n\n    [<Inline>]\n    static member Contains<'T>(this: seq<'T>, value: 'T) : bool =\n        LinqProxy.Contains(this, value, EqualityComparer.Default)\n\n    [<Inline>]\n    static member Contains<'T>(this: seq<'T>, value: 'T, comparer: IEqualityComparer<'T>) : bool =\n        Seq.exists (fun x -> comparer.Equals(value, x)) this\n\n    [<Inline>]\n    static member Count<'T>(this: seq<'T>) : int =\n        Seq.length this\n\n    [<Inline>]\n    static member Count<'T>(this: seq<'T>, predicate: Func<'T, bool>) : int =\n        Seq.length (Seq.filter predicate.Invoke this)\n\n    [<Inline>]\n    static member DefaultIfEmpty<'T>(this: seq<'T>) : seq<'T> =\n        LinqProxy.DefaultIfEmpty(this, Unchecked.defaultof<'T>)\n\n    static member DefaultIfEmpty<'T>(this: seq<'T>, defaultValue: 'T) : seq<'T> =\n        if Seq.isEmpty this then\n            Seq.singleton defaultValue\n        else this\n\n    [<Inline>]\n    static member Distinct<'T>(this: seq<'T>) : seq<'T> =\n        LinqProxy.Distinct(this, EqualityComparer.Default)\n\n    static member Distinct<'T>(this: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let tbl = HashSet(comparer)\n            while e.MoveNext() do\n                if tbl.Add(e.Current) then\n                    yield e.Current\n        }\n\n    [<Inline>]\n    static member ElementAt<'T>(this: seq<'T>, index: int): 'T =\n        Seq.item index this\n\n    [<Inline>]\n    static member ElementAtOrDefault<'T>(this: seq<'T>, index: int) =\n        LinqProxy.JSElementAtOrDefault(this, index, Unchecked.defaultof<'T>)\n\n    [<Name \"ElementAtOrDefault\">]\n    static member JSElementAtOrDefault<'T>(this: seq<'T>, index: int, defaultValue: 'T) : 'T =\n        try Seq.item index this\n        with _ -> defaultValue\n\n    [<Inline>]\n    static member Empty<'T>() : seq<'T> =\n        Seq.empty\n\n    [<Inline>]\n    static member Except<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        LinqProxy.Except(this, second, EqualityComparer.Default)\n\n    static member Except<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        let tbl = HashSet(this, comparer)\n        for x in second do tbl.Remove(x) |> ignore\n        tbl :> _\n\n    [<Inline>]\n    static member First<'T>(this: seq<'T>) : 'T =\n        Seq.head this\n\n    [<Inline>]\n    static member First<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        Seq.find predicate.Invoke this\n\n    [<Inline>]\n    static member FirstOrDefault<'T>(this: seq<'T>) : 'T =\n        LinqProxy.JSFirstOrDefault(this, Unchecked.defaultof<'T>)\n\n    [<Name \"FirstOrDefault\">]\n    static member JSFirstOrDefault<'T>(this: seq<'T>, defaultValue: 'T) : 'T =\n        use e = this.GetEnumerator()\n        if e.MoveNext() then e.Current else defaultValue\n\n    [<Inline>]\n    static member FirstOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        LinqProxy.JSFirstOrDefault(this, predicate, Unchecked.defaultof<'T>)\n\n    [<Name \"FirstOrDefault$1\">]\n    static member JSFirstOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>, defaultValue: 'T) : 'T =\n        match Seq.tryFind predicate.Invoke this with\n        | Some x -> x\n        | None -> defaultValue\n\n    [<Inline>]\n    static member GroupBy<'T, 'K when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>) : seq<IGrouping<'K, 'T>> =\n        LinqProxy.GroupBy(this, keySelector, EqualityComparer.Default)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IEqualityComparer<'K>) : seq<IGrouping<'K, 'T>> =\n        LinqProxy.GroupBy(this, keySelector, (fun x -> x), comparer)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, resultSelector: Func<'K, seq<'T>, 'R>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, resultSelector, EqualityComparer.Default)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'E when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>) : seq<IGrouping<'K, 'E>> =\n        LinqProxy.GroupBy(this, keySelector, elementSelector, EqualityComparer.Default)\n\n    static member GroupBy<'T, 'K, 'E when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, comparer: IEqualityComparer<'K>) : seq<IGrouping<'K, 'E>> =\n        Seq.delay (fun () ->\n            // Using an array instead of a seq is important here: the returned groupings\n            // use a ResizeArray that is filled here, so this enumeration must be finished\n            // before the user can enumerate any of the groupings.\n            [|\n                let t = Dictionary<'K, ResizeArray<'E>>(comparer)\n                for x in this do\n                    let k = keySelector.Invoke x\n                    let e = elementSelector.Invoke x\n                    match t.TryGetValue k with\n                    | true, a -> a.Add(e)\n                    | false, _ ->\n                        let a = ResizeArray<'E>()\n                        a.Add(e)\n                        t.[k] <- a\n                        yield Grouping(k, a) :> IGrouping<_,_>\n            |] :> _\n        )\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, resultSelector: Func<'K, seq<'T>, 'R>, comparer: IEqualityComparer<'K>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, (fun x -> x), resultSelector, comparer)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'E, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, resultSelector: Func<'K, seq<'E>, 'R>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, elementSelector, resultSelector, EqualityComparer.Default)\n\n    static member GroupBy<'T, 'K, 'E, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, resultSelector: Func<'K, seq<'E>, 'R>, comparer: IEqualityComparer<'K>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, elementSelector, comparer)\n        |> Seq.map (fun g -> resultSelector.Invoke(g.Key, g))\n\n    [<Inline>]\n    static member GroupJoin<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, seq<'I>, 'R>) : seq<'R> =\n        LinqProxy.GroupJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer.Default)\n\n    static member GroupJoin<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, seq<'I>, 'R>, comparer: IEqualityComparer<'K>) : seq<'R> =\n        Seq.delay (fun () ->\n            let t = Dictionary<'K, 'O * ResizeArray<'I>>(comparer)\n            let a = [|\n                for o in outer do\n                    let k = outerKeySelector.Invoke o\n                    match t.TryGetValue k with\n                    | true, _ -> ()\n                    | false, _ ->\n                        let pair = (o, ResizeArray())\n                        t.Add(k, pair)\n                        yield pair\n            |]\n            for i in inner do\n                let k = innerKeySelector.Invoke i\n                match t.TryGetValue k with\n                | true, (_, a) -> a.Add(i)\n                | false, _ -> ()\n            a |> Array.iteri (fun i (o, is) ->\n                a.[i] <- As (resultSelector.Invoke(o, is)))\n            As a\n        )\n\n    [<Inline>]\n    static member Intersect<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        LinqProxy.Intersect(this, second, EqualityComparer.Default)\n\n    static member Intersect<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        let t1 = HashSet(this, comparer)\n        seq {\n            let t2 = HashSet(comparer)\n            for x in second do\n                if t1.Contains(x) && t2.Add(x) then\n                    yield x\n        }\n\n    [<Inline>]\n    static member Join<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, 'I, 'R>) : IEnumerable<'R> =\n        LinqProxy.Join(outer, inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer.Default)\n\n    static member Join<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, 'I, 'R>, comparer: IEqualityComparer<'K>) : IEnumerable<'R> =\n        Seq.delay (fun () ->\n            let t = Dictionary<'K, 'O * ResizeArray<'I>>(comparer)\n            let a = [|\n                for o in outer do\n                    let k = outerKeySelector.Invoke o\n                    match t.TryGetValue k with\n                    | true, _ -> ()\n                    | false, _ ->\n                        let pair = (o, ResizeArray())\n                        t.Add(k, pair)\n                        yield pair\n            |]\n            for i in inner do\n                let k = innerKeySelector.Invoke i\n                match t.TryGetValue k with\n                | true, (_, a) -> a.Add(i)\n                | false, _ -> ()\n            [|\n                for (o, is) in a do\n                    for i in is do\n                        yield resultSelector.Invoke(o, i)\n            |] :> _\n        )\n\n    [<Inline>]\n    static member Last<'T>(this: seq<'T>) : 'T =\n        Seq.last this\n\n    static member LastPred(this: seq<'T>, predicate: Func<'T, bool>) : option<'T> =\n        (None, this)\n        ||> Seq.fold (fun acc elt ->\n            if predicate.Invoke elt then Some elt else acc)\n\n    static member Last<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        match LinqProxy.LastPred(this, predicate) with\n        | Some x -> x\n        | None -> invalidOp \"Sequence contains no matching element\"\n\n    [<Inline>]\n    static member LastOrDefault<'T>(this: seq<'T>) : 'T =\n        Enumerable.LastOrDefault(this, fun _ -> true)\n\n    [<Inline>]\n    static member LastOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        LinqProxy.JSLastOrDefault(this, predicate, Unchecked.defaultof<'T>)\n\n    [<Name \"LastOrDefault\">]\n    static member JSLastOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>, defaultValue: 'T) : 'T =\n        match LinqProxy.LastPred(this, predicate) with\n        | Some x -> x\n        | None -> defaultValue\n\n    [<Inline>]\n    static member LongCount<'T>(this: seq<'T>) : int64 =\n        As(Enumerable.Count(this))\n\n    [<Inline>]\n    static member LongCount<'T>(this: seq<'T>, predicate: Func<'T, bool>) : int64 =\n        As(Enumerable.Count(this, predicate))\n\n    [<Inline>]\n    static member Max(this: seq<Nullable<int>>) : Nullable<int> =\n        As(LinqProxy.Max(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Max(this: seq<float>) : float =\n        Seq.max this\n\n    [<Inline>]\n    static member Max(this: seq<Nullable<int64>>) : Nullable<int64> =\n        As(LinqProxy.Max(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Max(this: seq<int64>) : int64 =\n        Seq.max this\n\n    static member Max(this: seq<Nullable<float>>) : Nullable<float> =\n        let s = this |> Seq.choose (fun x -> if x.HasValue then Some x.Value else None)\n        if Seq.isEmpty s then Nullable() else Nullable(Seq.max s)\n\n    [<Inline>]\n    static member Max(this: seq<int>) : int =\n        Seq.max this\n\n    [<Inline>]\n    static member Max<'T when 'T : comparison>(this: seq<'T>) : 'T =\n        Seq.max this\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, int64>) : int64 =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<int64> =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<int> =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, int>) : int =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T, 'R when 'R : comparison>(this: seq<'T>, selector: Func<'T, 'R>) : 'R =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min(this: seq<Nullable<int>>) : Nullable<int> =\n        As(LinqProxy.Min(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Min(this: seq<float>) : float =\n        Seq.min this\n\n    [<Inline>]\n    static member Min(this: seq<Nullable<int64>>) : Nullable<int64> =\n        As(LinqProxy.Min(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Min(this: seq<int64>) : int64 =\n        Seq.min this\n\n    static member Min(this: seq<Nullable<float>>) : Nullable<float> =\n        let s = this |> Seq.choose (fun x -> if x.HasValue then Some x.Value else None)\n        if Seq.isEmpty s then Nullable() else Nullable(Seq.min s)\n\n    [<Inline>]\n    static member Min(this: seq<int>) : int =\n        Seq.min this\n\n    [<Inline>]\n    static member Min<'T when 'T : comparison>(this: seq<'T>) : 'T =\n        Seq.min this\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, int64>) : int64 =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<int64> =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<int> =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, int>) : int =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T, 'R when 'R : comparison>(this: seq<'T>, selector: Func<'T, 'R>) : 'R =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member OfType<'T>(this: IEnumerable) : seq<'T> =\n        Seq.cast<'T> this\n\n    [<Inline>]\n    static member OrderBy<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        LinqProxy.OrderBy(this, keySelector, Comparer<'K>.Default)\n\n    static member OrderBy<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        OrderedEnumerable(this, ProjectionComparer(comparer, keySelector)) :> _\n\n    [<Inline>]\n    static member OrderByDescending<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        LinqProxy.OrderByDescending(this, keySelector, Comparer<'K>.Default)\n\n    static member OrderByDescending<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        OrderedEnumerable(this, ReverseComparer(comparer, keySelector)) :> _\n\n    static member Range(start: int, count: int) : seq<int> =\n        Seq.init count ((+) start)\n\n    static member Repeat<'T>(element: 'T, count: int) : seq<'T> =\n        Seq.init count (fun _ -> element)\n\n    static member Reverse<'T>(this: seq<'T>) : seq<'T> =\n        Array.rev (Array.ofSeq this) :> _\n\n    static member Select<'T, 'R>(this: seq<'T>, selector: Func<'T, int, 'R>) : seq<'R> =\n        Seq.mapi (fun i x -> selector.Invoke(x, i)) this\n\n    [<Inline>]\n    static member Select<'T, 'R>(this: seq<'T>, selector: Func<'T, 'R>) : seq<'R> =\n        Seq.map selector.Invoke this\n\n    static member SelectMany<'T, 'R>(this: seq<'T>, selector: Func<'T, int, seq<'R>>) : seq<'R> =\n        Seq.mapi (fun i x -> selector.Invoke(x, i)) this |> Seq.concat\n\n    [<Inline>]\n    static member SelectMany<'T, 'R>(this: seq<'T>, selector: Func<'T, seq<'R>>) : seq<'R> =\n        Seq.collect selector.Invoke this\n\n    static member SelectMany<'T, 'C, 'R>(this: seq<'T>, selector: Func<'T, seq<'C>>, collectionSelector: Func<'T, 'C, 'R>) : seq<'R> =\n        this\n        |> Seq.map (fun t -> t, selector.Invoke t)\n        |> Seq.collect (fun (t, cs) ->\n            cs |> Seq.map (fun c -> collectionSelector.Invoke(t, c)))\n\n    static member SelectMany<'T, 'C, 'R>(this: seq<'T>, selector: Func<'T, int, seq<'C>>, collectionSelector: Func<'T, 'C, 'R>) : seq<'R> =\n        this\n        |> Seq.mapi (fun i t -> t, selector.Invoke(t, i))\n        |> Seq.collect (fun (t, cs) ->\n            cs |> Seq.map (fun c -> collectionSelector.Invoke(t, c)))\n\n    [<Inline>]\n    static member SequenceEqual<'T>(this: seq<'T>, second: seq<'T>) : bool =\n        LinqProxy.SequenceEqual(this, second, EqualityComparer.Default)\n\n    static member SequenceEqual<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : bool =\n        use e1 = this.GetEnumerator()\n        use e2 = this.GetEnumerator()\n        let rec go() =\n            if e1.MoveNext() then\n                e2.MoveNext() && comparer.Equals(e1.Current, e2.Current) && go()\n            else\n                not (e2.MoveNext())\n        go()\n\n    [<Inline>]\n    static member Single<'T>(this: seq<'T>) : 'T =\n        Seq.exactlyOne this\n\n    static member Single<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        let x =\n            (None, this)\n            ||> Seq.fold (fun state cur ->\n                if predicate.Invoke cur then\n                    if state.IsSome then\n                        invalidOp \"Sequence contains more than one matching element\"\n                    else Some cur\n                else state\n            )\n        match x with\n        | None -> invalidOp \"Sequence contains no elements\"\n        | Some x -> x\n\n    [<Inline>]\n    static member SingleOrDefault<'T>(this: seq<'T>) : 'T =\n        LinqProxy.SingleOrDefault(this, fun _ -> true)\n\n    [<Inline>]\n    static member SingleOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        LinqProxy.JSSingleOrDefault(this, predicate, Unchecked.defaultof<'T>)\n\n    [<Name \"SingleOrDefault\">]\n    static member JSSingleOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>, defaultValue: 'T) : 'T =\n        use e = this.GetEnumerator()\n        let mutable found = None\n        while e.MoveNext() do\n            if predicate.Invoke e.Current then\n                match found with\n                | None -> found <- Some e.Current\n                | Some _ -> invalidOp \"Sequence contains more than one element\"\n        match found with\n        | Some x -> x\n        | None -> defaultValue\n\n    static member Skip<'T>(this: seq<'T>, count: int) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while i < count && e.MoveNext() do i <- i + 1\n            while e.MoveNext() do yield e.Current\n        }\n\n    static member SkipWhile<'T>(this: seq<'T>, predicate: Func<'T, int, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            let mutable predWasTrue = true\n            while predWasTrue && e.MoveNext() do\n                if predicate.Invoke(e.Current, i) then\n                    i <- i + 1\n                else\n                    predWasTrue <- false\n            if not predWasTrue then\n                yield e.Current\n                while e.MoveNext() do yield e.Current\n        }\n\n    static member SkipWhile<'T>(this: seq<'T>, predicate: Func<'T, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable predWasTrue = true\n            while predWasTrue && e.MoveNext() do\n                if not (predicate.Invoke e.Current) then\n                    predWasTrue <- false\n            if not predWasTrue then\n                yield e.Current\n                while e.MoveNext() do yield e.Current\n        }\n\n    [<Inline>]\n    static member Sum(this: seq<int64>) : int64 =\n        Seq.sum this\n\n    [<Inline>]\n    static member Sum(this: seq<Nullable<int64>>) : Nullable<int64> =\n        As(LinqProxy.Sum(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Sum(this: seq<float>) : float =\n        Seq.sum this\n\n    static member Sum(this: seq<Nullable<float>>) : Nullable<float> =\n        let s = this |> Seq.choose (fun x -> if x.HasValue then Some x.Value else None)\n        if Seq.isEmpty s then Nullable() else Nullable(Seq.sum s)\n\n    [<Inline>]\n    static member Sum(this: seq<Nullable<int>>) : Nullable<int> =\n        As(LinqProxy.Sum(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Sum(this: seq<int>) : int =\n        Seq.sum this\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, int64>) : int64 =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<int64> =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<int> =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, int>) : int =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    static member Take<'T>(this: seq<'T>, count: int) =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while i < count && e.MoveNext() do\n                i <- i + 1\n                yield e.Current\n        }\n\n    static member TakeWhile<'T>(this: seq<'T>, predicate: Func<'T, int, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while e.MoveNext() && predicate.Invoke(e.Current, i) do\n                i <- i + 1\n                yield e.Current\n        }\n\n    static member TakeWhile<'T>(this: seq<'T>, predicate: Func<'T, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            while e.MoveNext() && predicate.Invoke(e.Current) do\n                yield e.Current\n        }\n\n    [<Inline>]\n    static member ThenBy<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, Comparer<_>.Default, false)\n\n    [<Inline>]\n    static member ThenBy<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, comparer, false)\n\n    [<Inline>]\n    static member ThenByDescending<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, Comparer<_>.Default, true)\n\n    [<Inline>]\n    static member ThenByDescending<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, comparer, true)\n\n    [<Inline>]\n    static member ToArray<'T>(this: seq<'T>) : 'T[] =\n        Seq.toArray this\n\n    [<Inline>]\n    static member ToDictionary<'T, 'K> (this: seq<'T>, keySelector: Func<'T, 'K>) : Dictionary<'K, 'T> =\n        LinqProxy.ToDictionary(this, keySelector, EqualityComparer.Default)\n\n    static member ToDictionary<'T, 'K> (this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IEqualityComparer<'K>) : Dictionary<'K, 'T> =\n        let d = Dictionary(comparer)\n        Seq.iter (fun x -> d.Add(keySelector.Invoke x, x)) this\n        d\n\n    [<Inline>]\n    static member ToDictionary<'T, 'K, 'E> (this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>) : Dictionary<'K, 'E> =\n        LinqProxy.ToDictionary(this, keySelector, elementSelector, EqualityComparer.Default)\n\n    static member ToDictionary<'T, 'K, 'E> (this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, comparer: IEqualityComparer<'K>) : Dictionary<'K, 'E> =\n        let d = Dictionary(comparer)\n        Seq.iter (fun x -> d.Add(keySelector.Invoke x, elementSelector.Invoke x)) this\n        d\n\n    [<Inline>]\n    static member ToList<'T>(this: seq<'T>) : List<'T> =\n        List<'T>(this)\n\n    //[<Macro(typeof<LinqMacro>)>]\n//    static member ToLookup<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>) : ILookup<'K, 'T> =\n//        Lookup<'K, 'T, 'T>(this, keySelector, Func<'T,'T>(id), EqualityComparer<'K>.Default) :> _\n\n//    [<Inline>]\n//    static member ToLookup<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IEqualityComparer<'K>) : ILookup<'K, 'T> =\n//        Lookup<'K, 'T, 'T>(this, keySelector, Func<'T,'T>(id), comparer) :> _\n\n    //[<Macro(typeof<LinqMacro>)>]\n//    static member ToLookup<'T, 'K, 'E>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>) : ILookup<'K, 'E> =\n//        Lookup<'K, 'T, 'E>(this, keySelector, elementSelector, EqualityComparer<'K>.Default) :> _\n\n//    [<Inline>]\n//    static member ToLookup<'T, 'K, 'E>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, comparer: IEqualityComparer<'K>) : ILookup<'K, 'E> =\n//        Lookup<'K, 'T, 'E>(this, keySelector, elementSelector, comparer) :> _\n\n    [<Inline>]\n    static member Union<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        LinqProxy.Union(this, second, EqualityComparer<'T>.Default)\n\n    static member Union<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        let tbl = HashSet(this, comparer)\n        for e in second do tbl.Add(e) |> ignore\n        tbl :> _\n\n    static member Where<'T>(this: seq<'T>, predicate: Func<'T, int, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while e.MoveNext() do\n                if predicate.Invoke(e.Current, i) then\n                    yield e.Current\n                i <- i + 1\n        }\n\n    [<Inline>]\n    static member Where<'T>(this: seq<'T>, predicate: Func<'T, bool>) : seq<'T> =\n        Seq.filter predicate.Invoke this\n\n    [<Inline>]\n    static member Zip<'T, 'U, 'R>(this: seq<'T>, second: seq<'U>, resultSelector: Func<'T, 'U, 'R>) : seq<'R> =\n        Seq.map2 (fun x y -> resultSelector.Invoke(x, y)) this second\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen System.Linq\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper.Core\nopen WebSharper.JavaScript\nopen FSharp.Quotations\n\nopen FSharp.Linq\n\n[<Proxy(typeof<QuerySource<_,_>>)>]\ntype internal QuerySourceProxy<'T, 'Q> [<Inline \"$source\">] (source: IEnumerable<'T>) =\n\n    [<Inline \"$this\">]\n    member this.Source = source\n                                \n[<Proxy(typeof<QueryBuilder>)>]\n[<Name \"WebSharper.Query\">]\ntype internal QueryBuilderProxy() =\n    [<Inline>]\n    member this.All(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        Seq.forall predicate source.Source\n\n    [<Inline>]\n    member inline this.AverageBy\n            (source: QuerySource<'T, 'Q>, projection: 'T -> ^Value) =\n        Seq.averageBy projection source.Source\n\n    [<Name \"averageByNullable\">]\n    static member inline AverageByNullableImpl \n            (source: QuerySource<'T, 'Q>, projection: 'T -> Nullable< ^TValue>) =\n        let filtered =\n            source.Source |> Seq.choose (fun x ->\n                Option.ofNullable (projection x) \n            ) |> Array.ofSeq\n        if filtered.Length = 0 then Nullable() else Nullable(Array.average filtered) \n\n    [<Inline>]\n    member inline this.AverageByNullable (source, projection) = QueryBuilderProxy.AverageByNullableImpl(source, projection)\n\n    [<Inline>]\n    member this.Contains(source: QuerySource<'T, 'Q>, key: 'T) =\n        Seq.contains key source.Source\n\n    [<Inline>]\n    member this.Count(source: QuerySource<'T, 'Q>) =\n        Seq.length source.Source\n\n    [<Inline>]\n    member this.Distinct(source: QuerySource<'T, 'Q>) =\n        Seq.distinct source.Source |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ExactlyOne(source: QuerySource<'T, 'Q>) =\n        Seq.exactlyOne source.Source\n     \n    [<Inline>]\n    member this.ExactlyOneOrDefault(source: QuerySource<'T, 'Q>) =\n        source.Source.SingleOrDefault()\n\n    [<Inline>]\n    member this.Exists(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        Seq.exists predicate source.Source\n     \n    [<Inline>]\n    member this.Find(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        Seq.find predicate source.Source\n\n    [<Inline>]\n    member this.For(source: QuerySource<'T, 'Q>, body: 'T -> QuerySource<'TResult, 'Q2>) =\n        Seq.collect (fun x -> (body x).Source) source.Source |> QuerySource<'TResult, 'Q>\n     \n    [<Inline>]\n    member this.GroupBy(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        source.Source.GroupBy(fun x -> keySelector x) |> QuerySource<IGrouping<'TKey, 'T>, 'Q>\n\n    [<Inline>]\n    member this.GroupJoin\n      (\n        outerSource: QuerySource<'TOuter, 'Q>, innerSource: QuerySource<'TInner, 'Q>, \n        outerKeySelector: 'TOuter -> 'TKey, innerKeySelector: 'TInner -> 'TKey,\n        resultSelector: 'TOuter -> seq<'TInner> -> 'TResult\n      ) =\n        outerSource.Source.GroupJoin(\n            innerSource.Source, \n            (fun x -> outerKeySelector x), \n            (fun x -> innerKeySelector x), \n            (fun x y -> resultSelector x y)\n        ) |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.GroupValBy<'T, 'TKey, 'TValue, 'Q>(source: QuerySource<'T, 'Q>, resultSelector: 'T -> 'TValue, keySelector: 'T -> 'TKey) =\n        source.Source.GroupBy((fun x -> keySelector x), (fun x -> resultSelector x)) |> QuerySource<IGrouping<'TKey, 'TValue>, 'Q>\n\n    [<Inline>]\n    member this.Head(source: QuerySource<'T, 'Q>) =\n        Seq.head source.Source\n\n    [<Inline>]\n    member this.HeadOrDefault(source: QuerySource<'T, 'Q>) =\n        source.Source.FirstOrDefault()\n    \n    [<Inline>]\n    member this.Join\n      (\n        outerSource: QuerySource<'TOuter, 'Q>, innerSource: QuerySource<'TInner, 'Q>, \n        outerKeySelector: 'TOuter -> 'TKey, innerKeySelector: 'TInner -> 'TKey,\n        resultSelector: 'TOuter -> 'TInner -> 'TResult\n      ) =\n        outerSource.Source.Join(\n            innerSource.Source, \n            (fun x -> outerKeySelector x), \n            (fun x -> innerKeySelector x), \n            (fun x y -> resultSelector x y)\n        ) |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.Last(source: QuerySource<'T, 'Q>) =\n        Seq.last source.Source\n \n    [<Inline>]\n    member this.LastOrDefault(source: QuerySource<'T, 'Q>) =\n        source.Source.LastOrDefault()\n\n    [<Inline>]\n    member this.LeftOuterJoin\n      (\n        outerSource: QuerySource<'TOuter, 'Q>, innerSource: QuerySource<'TInner, 'Q>, \n        outerKeySelector: 'TOuter -> 'TKey, innerKeySelector: 'TInner -> 'TKey,\n        resultSelector: 'TOuter -> seq<'TInner> -> 'TResult\n      ) =\n        outerSource.Source.GroupJoin(\n            innerSource.Source, \n            (fun x -> outerKeySelector x), \n            (fun x -> innerKeySelector x), \n            (fun x y -> resultSelector x (y.DefaultIfEmpty()))\n        ) |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.MaxBy(source: QuerySource<'T, 'Q>, valueSelector: 'T -> 'TValue) =\n        source.Source.Max(fun x -> valueSelector x)\n    \n    [<Inline>]\n    member this.MaxByNullable(source: QuerySource<'T, 'Q>, valueSelector: 'T -> Nullable<'TValue>) =\n        source.Source.Max(fun x -> valueSelector x)\n\n    [<Inline>]\n    member this.MinBy(source: QuerySource<'T, 'Q>, valueSelector: 'T -> 'TValue) =\n        source.Source.Min(fun x -> valueSelector x)\n    \n    [<Inline>]\n    member this.MinByNullable(source: QuerySource<'T, 'Q>, valueSelector: 'T -> Nullable<'TValue>) =\n        source.Source.Min(fun x -> valueSelector x)\n\n    [<Inline>]\n    member this.Nth(source: QuerySource<'T, 'Q>, index: int) =\n        Seq.item index source.Source\n\n    [<Inline>]\n    member this.Quote(q: Expr<'T>) = q\n\n    [<Inline>]\n    member this.Run(q: Expr<QuerySource<'T, IQueryable>>) =\n        (As<QuerySource<'T, obj>> q).Source |> As<IQueryable<'T>>      \n           \n    [<Inline>]\n    member this.Select(source: QuerySource<'T, 'Q>, projection: 'T -> 'TResult) =\n        source.Source |> Seq.map projection |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.Skip(source: QuerySource<'T, 'Q>, count: int) =\n        source.Source.Skip(count) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SkipWhile(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        source.Source.SkipWhile(fun x -> predicate x) |> QuerySource<'T, 'Q>\n    \n    [<Inline>]\n    member this.SortBy(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        source.Source.OrderBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SortByDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        source.Source.OrderByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SortByNullable(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        source.Source.OrderBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SortByNullableDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        source.Source.OrderByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.Source(source: seq<'T>) = \n        QuerySource<'T,  System.Collections.IEnumerable>(source)\n\n    [<Inline>]\n    member this.Source(source: IQueryable<'T>) = \n        QuerySource<'T, 'Q>(source)\n\n    [<Inline>]                                                              \n    member inline this.SumBy(source: QuerySource<'T, 'Q>, projection: 'T -> ^TValue) =\n        Seq.sumBy projection source.Source\n\n    [<Name \"sumByNullable\">]                                                              \n    static member inline SumByNullableImpl(source: QuerySource<'T, 'Q>, projection: 'T -> Nullable<'TValue>) =\n        let filtered =\n            source.Source |> Seq.choose (fun x ->\n                Option.ofNullable (projection x) \n            ) |> Array.ofSeq\n        Nullable(Array.sum filtered) \n\n    [<Inline>]\n    member inline this.SumByNullable(source, projection) = QueryBuilderProxy.SumByNullableImpl(source, projection)\n\n    [<Inline>]\n    member this.Take(source: QuerySource<'T, 'Q>, count: int) =\n        source.Source.Take(count) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.TakeWhile(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        source.Source.TakeWhile(fun x -> predicate x) |> QuerySource<'T, 'Q>\n    \n    static member CheckThenBySource(source: IEnumerable<'T>) =\n        match source with\n        | :? IOrderedEnumerable<'T> as e ->\n            e\n        | _ ->\n            failwith \"'thenBy' and 'thenByDescending' may only be used with an ordered input\"\n\n    [<Inline>]\n    member this.ThenBy(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ThenByDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ThenByNullable(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ThenByNullableDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.Where(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        source.Source.Where(fun x -> predicate x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.Yield(value: 'T) =\n        Seq.singleton value |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.YieldFrom(computation: QuerySource<'T, 'Q>) =\n        computation\n    \n    [<Inline>]\n    member this.Zero() =\n        Seq.empty |> QuerySource<'T, 'Q>\n\n[<WebSharper.Proxy \"Microsoft.FSharp.Core.ExtraTopLevelOperators, FSharp.Core\">]\nmodule internal ExtraTopLevelOperatorsQueryProxy =\n    \n    [<Inline \"null\">]\n    let query = query\n\n[<WebSharper.Proxy \"Microsoft.FSharp.Linq.QueryRunExtensions.HighPriority, FSharp.Core\">]\nmodule internal HighPriorityProxy =                          \n    \n    [<Inline>]\n    let RunQueryAsEnumerable (this: QueryBuilder) (q: Expr<QuerySource<'T, IEnumerable>>) =\n        (As<QuerySource<'T, IEnumerable>> q).Source   \n\n[<WebSharper.Proxy \"Microsoft.FSharp.Linq.QueryRunExtensions.LowPriority, FSharp.Core\">]\nmodule internal LowPriorityProxy =                          \n    \n    [<Inline>]\n    let RunQueryAsValue (this: QueryBuilder) (q: Expr<'T>) =\n        As<'T> q\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2018 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.JavaScript\n\nopen System\nopen System.Runtime.CompilerServices\nopen System.Threading.Tasks\nopen WebSharper\n\n[<JavaScript>]\ntype NonStandardPromiseRejectionException(reason: obj) =\n    inherit Exception(\"Promise rejected\")\n\n    member this.Reason = reason\n\n[<JavaScript>]\nmodule Promise =\n\n    let private unwrapExn (x: obj) : exn =\n        match x with\n        | :? exn as e -> e\n        | x -> NonStandardPromiseRejectionException x :> exn\n\n    let OfAsync (a: Async<'T>) : Promise<'T> =\n        new Promise<'T>(fun (resolve, reject) ->\n            Async.StartWithContinuations(a, resolve, reject, reject)\n        )\n\n    let OfTask (t: Task<'T>) : Promise<'T> =\n        new Promise<'T>(fun (resolve, reject) ->\n            t.ContinueWith(fun (t: Task<'T>) ->\n                if t.IsCanceled then\n                    reject (TaskCanceledException())\n                elif t.IsFaulted then\n                    reject t.Exception\n                else // RanToCompletion\n                    resolve t.Result\n            )\n            |> ignore\n        )\n\n    let AsAsync (p: Promise<'T>) : Async<'T> =\n        Async.FromContinuations(fun (ok, ko, _) ->\n            p.Then(ok, fun (err: obj) ->\n                ko (unwrapExn err)\n            )\n            |> ignore\n        )\n\n    let AsTask (p: Promise<'T>) : Task<'T> =\n        let tcs = System.Threading.Tasks.TaskCompletionSource<'T>()\n        p.Then(tcs.SetResult, fun (err: obj) ->\n            tcs.SetException(unwrapExn err)\n        )\n        |> ignore\n        tcs.Task\n\n    let private For (xs: seq<'T>) (f: 'T -> Promise<unit>) : Promise<unit> =\n        let e = xs.GetEnumerator()\n        let rec run() : Promise<unit> =\n            if e.MoveNext() then\n               (f e.Current).Then<unit>(run)\n            else\n                Promise.Resolve(())\n        // Call run() in a Promise rather than immediately,\n        // or .Finally wouldn't catch an exception when enumerating the first item.\n        Promise<unit>(fun (resolve, reject) -> resolve (unbox<unit>(run())))\n            .Finally(fun () -> e.Dispose())\n\n    type Builder [<Inline \"null\">] internal () =\n\n        [<Inline>]\n        member this.Bind(p: Promise<'T>, f: 'T -> Promise<'U>) : Promise<'U> =\n            p.Then<'U>(f)\n\n        [<Inline>]\n        member this.Bind(a: Async<'T>, f: 'T -> Promise<'U>) : Promise<'U> =\n            (OfAsync a).Then<'U>(f)\n\n        [<Inline>]\n        member this.Bind(a: Task<'T>, f: 'T -> Promise<'U>) : Promise<'U> =\n            (OfTask a).Then<'U>(f)\n\n        [<Inline>]\n        member this.Return(x: 'T) : Promise<'T> =\n            Promise<'T>.Resolve(x)\n\n        [<Inline>]\n        member this.ReturnFrom(x: Promise<'T>) : Promise<'T> =\n            x\n\n        [<Inline>]\n        member this.ReturnFrom(x: Async<'T>) : Promise<'T> =\n            OfAsync x\n\n        [<Inline>]\n        member this.ReturnFrom(x: Task<'T>) : Promise<'T> =\n            OfTask x\n\n        [<Inline>]\n        member this.Using(x: 'T when 'T :> IDisposable, f: 'T -> Promise<'U>) : Promise<'U> =\n            Promise(fun (resolve, reject) -> resolve (unbox<'U> (f x)))\n                .Finally(fun () -> x.Dispose())\n\n        [<Inline>]\n        member this.For(xs: seq<'T>, f: 'T -> Promise<unit>) : Promise<unit> =\n            For xs f\n\n        [<Inline>]\n        member this.Zero() : Promise<unit> =\n            Promise.Resolve(())\n\n        [<Inline>]\n        member this.Combine(p1: Promise<'T>, p2: Promise<'T>) : Promise<'T> =\n            p1.Then<'T>(fun _ -> p2)\n\n        [<Inline>]\n        member this.TryWith(p: Promise<'T>, f: exn -> Promise<'T>) : Promise<'T> =\n            p.Catch<'T>(unwrapExn >> f)\n\n        [<Inline>]\n        member this.TryFinally(p: Promise<'T>, f: unit -> unit) : Promise<'T> =\n            p.Finally(fun () -> f())\n\n        [<Inline>]\n        member this.Delay(f: unit -> Promise<'T>) : Promise<'T> =\n            Promise<'T>(fun (resolve, _) -> resolve (unbox<'T> (f())))\n\n    [<Inline>]\n    let Do = Builder()\n\n[<Extension; JavaScript>]\ntype PromiseExtensions =\n\n    [<Extension; Inline>]\n    static member AsAsync this = Promise.AsAsync this\n\n    [<Extension; Inline>]\n    static member AsTask this = Promise.AsTask this\n\n    [<Extension; Inline>]\n    static member AsPromise this = Promise.OfAsync this\n\n    [<Extension; Inline>]\n    static member AsPromise this = Promise.OfTask this\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Defines operators and functions that are automatically available whenever\n/// `WebSharper` is open.\n[<AutoOpen>]\nmodule WebSharper.JavaScript.Pervasives\n\nopen WebSharper\nmodule M = WebSharper.Core.Macros\n\n/// Casts an object to the desired type.\n[<Inline \"$x\">]\nlet As<'T> (x: obj) = X<'T>\n\n[<Inline \"$x * $y\">]\nlet ( *. ) x y = X<obj>\n\n[<Inline \"$x / $y\">]\nlet ( /. ) x y = X<obj>\n\n[<Inline \"$x % $y\">]\nlet ( %. ) x y = X<obj>\n\n[<Inline \"$x + $y\">]\nlet ( +. ) x y = X<obj>\n\n[<Inline \"$x - $y\">]\nlet ( -. ) x y = X<obj>\n\n[<Inline \"$x << $y\">]\nlet ( <<. ) x y = X<obj>\n\n[<Inline \"$x >> $y\">]\nlet ( >>. ) x y = X<obj>\n\n[<Inline \"$x >>> $y\">]\nlet ( >>>. ) x y = X<obj>\n\n[<Inline \"$x < $y\">]\nlet ( <. ) x y = X<bool>\n\n[<Inline \"$x > $y\">]\nlet ( >. ) x y = X<bool>\n\n[<Inline \"$x >= $y\">]\nlet ( >=. ) x y = X<bool>\n\n[<Inline \"$x <= $y\">]\nlet ( <=. ) x y = X<bool>\n\n[<Inline \"$x == $y\">]\nlet ( ==. ) x y = X<bool>\n\n[<Inline \"$x === $y\">]\nlet ( ===. ) x y = X<bool>\n\n[<Inline \"$x != $y\">]\nlet ( !=. ) x y = X<bool>\n\n[<Inline \"$x !== $y\">]\nlet ( !==. ) x y = X<bool>\n\n[<Inline \"$x | $y\">]\nlet ( |. ) x y = X<obj>\n\n[<Inline \"$x & $y\">]\nlet ( &. ) x y = X<obj>\n\n[<Inline \"$x ^ $y\">]\nlet ( ^. ) x y = X<obj>\n\n[<Inline \"$obj[$field]\">]\nlet ( ? ) (obj: obj) (field: string) = X<'T>\n\n[<Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) = X<unit>\n\n[<Inline \"[$x,$y]\">]\nlet ( => ) (x: string) (y: obj) = (x, y)\n\n[<JavaScript>]\nlet private NewFromSeq<'T> (fields: seq<string * obj>) : 'T =\n    let r = JS.Inline \"{}\"\n    for (k, v) in fields do\n        (?<-) r k v\n    As r\n\n/// Constructs a new object as if an object literal was used.\n[<Macro(typeof<M.New>); Inline>]\nlet New<'T> (fields: seq<string * obj>) = NewFromSeq<'T> fields\n\n/// Constructs an proxy to a remote object instance.\n[<Constant null>]\nlet Remote<'T> = X<'T>\n\n/// Gets JavaScript properties in sequence dynamically from an object.\n[<JavaScript; Macro(typeof<M.GetJS>)>]\nlet GetJS<'T> (x: obj) (items: seq<string>) =\n    let mutable x = x\n    for i in items do\n        x <- x?(i)\n    As<'T> x    \n\n/// Erases generic parameters inside this expression during WebSharper translation.\n/// You can get use this to translate `defaultof` inside a generic function.\n[<Macro(typeof<M.DefaultToUndefined>)>]\nlet DefaultToUndefined<'T> (x: 'T) = x\n\nmodule Optional =\n    /// Converts an F# option value to a JavaScript erased option\n    [<Inline>]\n    let ofOption x =\n        match x with\n        | None -> Undefined\n        | Some v -> Defined v\n\n    /// Converts a JavaScript erased option to an F# option value\n    [<Inline>]\n    let toOption x =\n        match x with\n        | Undefined -> None\n        | Defined v -> Some v\n\n    [<Inline \"$x !== undefined\">]\n    let isDefined x =\n        match x with\n        | Undefined -> false\n        | Defined _ -> true\n\n    [<Inline \"$x === undefined\">]\n    let isUndefined x =\n        match x with\n        | Undefined -> true\n        | Defined _ -> false\n\nmodule Union =\n// {{ generated by genInterop.fsx, do not modify\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice2 (x: Choice<'T1, 'T2>) = X<Union<'T1, 'T2>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice2 x =\n        match x with\n        | Union1Of2 v -> Choice1Of2 v\n        | Union2Of2 v -> Choice2Of2 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice3 (x: Choice<'T1, 'T2, 'T3>) = X<Union<'T1, 'T2, 'T3>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice3 x =\n        match x with\n        | Union1Of3 v -> Choice1Of3 v\n        | Union2Of3 v -> Choice2Of3 v\n        | Union3Of3 v -> Choice3Of3 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice4 (x: Choice<'T1, 'T2, 'T3, 'T4>) = X<Union<'T1, 'T2, 'T3, 'T4>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice4 x =\n        match x with\n        | Union1Of4 v -> Choice1Of4 v\n        | Union2Of4 v -> Choice2Of4 v\n        | Union3Of4 v -> Choice3Of4 v\n        | Union4Of4 v -> Choice4Of4 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice5 (x: Choice<'T1, 'T2, 'T3, 'T4, 'T5>) = X<Union<'T1, 'T2, 'T3, 'T4, 'T5>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice5 x =\n        match x with\n        | Union1Of5 v -> Choice1Of5 v\n        | Union2Of5 v -> Choice2Of5 v\n        | Union3Of5 v -> Choice3Of5 v\n        | Union4Of5 v -> Choice4Of5 v\n        | Union5Of5 v -> Choice5Of5 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice6 (x: Choice<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>) = X<Union<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice6 x =\n        match x with\n        | Union1Of6 v -> Choice1Of6 v\n        | Union2Of6 v -> Choice2Of6 v\n        | Union3Of6 v -> Choice3Of6 v\n        | Union4Of6 v -> Choice4Of6 v\n        | Union5Of6 v -> Choice5Of6 v\n        | Union6Of6 v -> Choice6Of6 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice7 (x: Choice<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>) = X<Union<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice7 x =\n        match x with\n        | Union1Of7 v -> Choice1Of7 v\n        | Union2Of7 v -> Choice2Of7 v\n        | Union3Of7 v -> Choice3Of7 v\n        | Union4Of7 v -> Choice4Of7 v\n        | Union5Of7 v -> Choice5Of7 v\n        | Union6Of7 v -> Choice6Of7 v\n        | Union7Of7 v -> Choice7Of7 v\n// }}\n\n/// The computation expression for JavaScript Promises.\n[<Inline>]\nlet promise = Promise.Builder()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule WebSharper.Json\n\nopen WebSharper.JavaScript\nmodule Js = WebSharper.Core.Json\nmodule Re = WebSharper.Core.Resources\n\ntype Resource() =\n    interface Re.IResource with\n        member this.Render ctx =\n            let name = if ctx.DebuggingEnabled then \"Json.js\" else \"Json.min.js\"\n            let ren = Re.Rendering.GetWebResourceRendering(ctx, typeof<Resource>, name)\n            fun html ->\n                let html = html Re.Scripts\n                html.WriteLine \"<!--[if lte IE 7.0]>\"\n                ren.Emit(html, Re.Js)\n                html.WriteLine \"<![endif]-->\"\n\n[<Inline \"$obj[$field]\">]\nlet ( ? ) (obj: obj) (field: string) = X<'T>\n\n[<Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) = X<unit>\n\n[<Inline \"$x\">]\nlet As<'T> (x: obj) = X<'T>\n\n[<Inline \"JSON.parse($json)\">]\n[<Require(typeof<Resource>)>]\nlet Parse (json: string) = X<obj>\n\n[<Inline \"JSON.stringify($obj)\">]\n[<Require(typeof<Resource>)>]\nlet Stringify (obj: obj) = X<string>\n\n/// Lookups an object by its FQN.\n[<JavaScript>]\nlet lookup<'T> (x: string []) : obj =\n    let k = x.Length\n    let mutable r = JS.Global\n    let mutable i = 0\n    while i < k do\n        let n  = x.[i]\n        let rn = (?) r n\n        if JS.TypeOf rn <> JS.Undefined then\n            r <- rn\n            i <- i + 1\n        else\n            failwith (\"Invalid server reply. Failed to find type: \" + n)\n    r\n\n/// Does a shallow generic mapping over an object.\n[<JavaScript>]\nlet shallowMap (f: obj -> obj) (x: obj) : obj =\n    if x :? System.Array then\n        As (Array.map f (As x))\n    else\n        match JS.TypeOf x with\n        | JS.Object ->\n            let r = New []\n            JS.ForEach x (fun y -> (?<-) r y (f ((?) x y)); false)\n            r\n        | _ ->\n            x\n\ntype SpecialTypes =\n    | List = 1\n    | Decimal = 2\n\n[<JavaScript>]\n[<Require(typeof<Resource>)>]\nlet Activate<'T> (json: obj) : 'T =\n    let types = if As json then json?(\"$TYPES\") : obj[] else JS.Undefined\n    let data =\n        if types ===. JS.Undefined then\n            json\n        else\n            for i = 0 to types.Length - 1 do\n                types.[i] <- \n                    match As<string[]> types.[i] with\n                    | [| \"WebSharper\"; \"List\"; \"T\" |] -> box SpecialTypes.List\n                    | [| \"WebSharper\"; \"Decimal\" |] -> box SpecialTypes.Decimal\n                    | t -> lookup t\n            json?(\"$DATA\")\n    let rec decode (x: obj) : obj =\n        if x = null then x else\n            match JS.TypeOf x with\n            | JS.Object ->\n                if x :? System.Array then\n                    shallowMap decode x\n                else\n                    let o  = shallowMap decode (x?(\"$V\"))\n                    let ti = x?(\"$T\")\n                    if ti ===. JS.Undefined then o else\n                        let t = types.[ti]\n                        if t ===. SpecialTypes.List then\n                            box (List.ofArray (As<obj[]> o))\n                        elif t ===. SpecialTypes.Decimal then\n                            box (JS.Global?WebSharper?Decimal?CreateDecimalBits(o))\n                        else\n                            let r = JS.New types.[ti]\n                            JS.ForEach o (fun k -> (?<-) r k ((?) o k); false)\n                            r\n            | _ ->\n                x\n    As (decode data)\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule WebSharper.Remoting\n\nopen WebSharper.JavaScript\n\nmodule R = WebSharper.Core.Remoting\n\n[<JavaScript>]\nlet mutable EndPoint = \"?\"\n\n[<JavaScript>]\nlet UseHttps() =\n    try\n        if not (JS.Window.Location.Href.StartsWith \"https://\") then\n            EndPoint <- JS.Window.Location.Href.Replace(\"http://\", \"https://\")\n            true\n        else false\n    with _ ->\n        // This function is intended to be callable from the top-level in a module,\n        // which means that it will be (unnecessarily) called on the server too\n        // and throw NotImplementedException. Just silence it.\n        false\n\ntype Data = string\ntype Headers = obj\ntype Url = string\n\n[<JavaScript>]\ntype IAjaxProvider =\n    [<Name \"Async\">]\n    abstract member Async : Url -> Headers -> Data -> (Data -> unit) -> (exn -> unit) -> unit\n\n    [<Name \"Sync\">]\n    abstract member Sync : Url -> Headers -> Data -> Data\n\n[<Direct @\"\n    var xhr = new XMLHttpRequest();\n    var csrf = document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*csrftoken\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1');\n    xhr.open('POST', $url, $async);\n    if ($async == true) {\n        xhr.withCredentials = true;\n    }\n    for (var h in $headers) {\n        xhr.setRequestHeader(h, $headers[h]);\n    }\n    if (csrf) {\n        xhr.setRequestHeader('x-csrftoken', csrf);\n    }\n    function k() {\n        if (xhr.status == 200) {\n            $ok(xhr.responseText)\n        } else if ($csrf && xhr.status == 403 && xhr.responseText == 'CSRF') {\n            $csrf();\n        } else {\n            var msg = 'Response status is not 200: ';\n            $err(new Error(msg + xhr.status));\n        }\n    }\n    if ('onload' in xhr) {\n        xhr.onload = xhr.onerror = xhr.onabort = k;\n    } else {\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n                k();\n            }\n        };\n    }\n    xhr.send($data);\n\">]\nlet private ajax (async: bool) (url: Url) (headers: Headers) (data: Data)\n    (ok: Data -> unit) (err: exn -> unit) (csrf: unit -> unit) = ()\n\ntype XhrProvider [<JavaScript>] () =\n    interface IAjaxProvider with\n\n        [<JavaScript>]\n        member this.Async url headers data ok err =\n            ajax true url headers data ok err\n                (fun () -> ajax true url headers data ok err JS.Undefined)\n\n        [<JavaScript>]\n        member this.Sync url headers data =\n            let res = ref Unchecked.defaultof<_>\n            ajax false url headers data\n                (fun x -> res := x)\n                (fun e -> raise e)\n                (fun () ->\n                    ajax false url headers data\n                        (fun x -> res := x)\n                        (fun e -> raise e)\n                        JS.Undefined)\n            !res\n\n[<JavaScript>]\nlet mutable AjaxProvider = XhrProvider() :> IAjaxProvider\n\n[<JavaScript>]\nlet private makeHeaders (m: string) =\n    New [\n        \"content-type\" => \"application/json\"   \n        \"x-websharper-rpc\" => m\n    ]\n\n[<JavaScript>]\nlet private makePayload (data: obj []) =\n    Json.Stringify data\n\n[<JavaScript>]\ntype IRemotingProvider =\n    [<Name \"Sync\">]\n    abstract member Sync : string -> obj[] -> obj\n    [<Name \"Async\">]\n    abstract member Async : string -> obj[] -> Async<obj>\n    [<Name \"Task\">]\n    abstract member Task : string -> obj[] -> System.Threading.Tasks.Task<obj>\n    [<Name \"Send\">]\n    abstract member Send : string -> obj[] -> unit\n\n[<JavaScript>]\n[<Name \"WebSharper.Remoting.AjaxRemotingProvider\">]\ntype AjaxRemotingProvider() =\n    abstract EndPoint : string\n    override this.EndPoint = EndPoint\n\n    abstract AsyncBase : string * obj[] -> Async<obj> \n    override this.AsyncBase(m, data) = \n        async {\n            let headers = makeHeaders m\n            let payload = makePayload data\n            let! token = Async.CancellationToken\n            return! Async.FromContinuations (fun (ok, err, cc) ->\n                let waiting = ref true\n                let reg =\n                    token.Register(fun () ->\n                        if !waiting then\n                            waiting := false\n                            cc (new System.OperationCanceledException(token))\n                    )\n                let ok (x: Data) = \n                    if !waiting then\n                        waiting := false\n                        reg.Dispose()\n                        ok (Json.Activate (Json.Parse x))\n                let err (e: exn) =\n                    if !waiting then\n                        waiting := false\n                        reg.Dispose()\n                        err e\n                AjaxProvider.Async this.EndPoint headers payload ok err)\n        }\n\n    interface IRemotingProvider with\n        member this.Sync m data : obj =\n            let data = AjaxProvider.Sync this.EndPoint (makeHeaders m) (makePayload data)\n            Json.Activate (Json.Parse data)\n\n        member this.Async m data : Async<obj> =\n            this.AsyncBase(m, data)\n\n        member this.Task m data : System.Threading.Tasks.Task<obj> =\n            this.AsyncBase(m, data) |> Async.StartAsTask   \n\n        member this.Send m data =\n            Async.Start (Async.Ignore (this.AsyncBase(m, data)))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.JQuery\nmodule M = WebSharper.Core.Metadata\nmodule J = WebSharper.Core.Json\n\n/// An interface that has to be implemented by controls\n/// that depend on resources.\ntype IRequiresResources =\n    abstract member Requires : M.Info -> seq<M.Node>\n    abstract member Encode : M.Info * J.Provider -> list<string * J.Encoded>\n\n/// HTML content that can be used as the Body of a web Control.\n/// Can be zero, one or many DOM nodes.\ntype IControlBody =\n    /// Replace the given node with the HTML content.\n    /// The node is guaranteed to be present in the DOM.\n    /// Called exactly once on startup on an IControl's Body.\n    [<JavaScript; Name \"ReplaceInDom\">]\n    abstract ReplaceInDom : Dom.Node -> unit\n\n/// An interface that has to be implemented by controls that\n/// are subject to activation, ie. server-side controls that\n/// contain client-side elements.\ntype IControl =\n    inherit IRequiresResources\n    [<JavaScript; Name \"Body\">]\n    abstract member Body : IControlBody\n    abstract member Id : string\n\n[<AutoOpen>]\nmodule HtmlContentExtensions =\n\n    [<JavaScript>]\n    type private SingleNode(node: Dom.Node) =\n        interface IControlBody with\n            member this.ReplaceInDom(old) =\n                node.ParentNode.ReplaceChild(node, old) |> ignore\n\n    [<JavaScript>]\n    type IControlBody with\n        /// Create HTML content comprised of a single DOM node.\n        static member SingleNode (node: Dom.Node) =\n            new SingleNode(node) :> IControlBody\n\n[<JavaScript>]\nmodule Activator =\n\n    /// The identifier of the meta tag holding the controls.\n    [<Literal>]\n    let META_ID = \"websharper-data\"\n\n    let mutable Instances : obj = null\n\n    let private onReady (f: unit -> unit) =\n        let mutable readyFired = false\n        let rec ready() =\n            if not readyFired then\n                readyFired <- true\n                f()\n                JS.Document.RemoveEventListener(\"DOMContentLoaded\", ready, false)\n                JS.Window.RemoveEventListener(\"load\", ready, false)\n        if JS.Document?readyState = \"complete\" then\n            ready()\n        else\n            JS.Document.AddEventListener(\"DOMContentLoaded\", ready, false)\n            JS.Window.AddEventListener(\"load\", ready, false)\n\n    let private Activate() =\n        if As JS.Document then\n            let meta = JS.Document.GetElementById(META_ID)\n            if (As meta) then\n                onReady <| fun () ->\n                    let text = meta.GetAttribute(\"content\")\n                    let obj = Json.Activate (Json.Parse text)\n                    JS.GetFields obj\n                    |> Array.iter (fun (k, v) ->\n                        match v with\n                        | :? IControl as v ->\n                            let p = v.Body\n                            let old = JS.Document.GetElementById k\n                            p.ReplaceInDom old\n                        | _ -> ()\n                    )\n                    Instances <- obj\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Comparers\n\nopen WebSharper\n\n[<JavaScript>]\ntype private EquatableEqualityComparer<'T when 'T :> System.IEquatable<'T>>() =\n    inherit System.Collections.Generic.EqualityComparer<'T>()\n    override this.Equals(x, y) = (x :> System.IEquatable<_>).Equals(y)\n    override this.GetHashCode(x) = (box x).GetHashCode()\n\n[<JavaScript>]\ntype private BaseEqualityComparer<'T>() =\n    inherit System.Collections.Generic.EqualityComparer<'T>()\n    override this.Equals(x, y) = obj.Equals(box x, box y)\n    override this.GetHashCode(x) = (box x).GetHashCode()\n\n[<JavaScript>]\ntype private ComparableComparer<'T when 'T :> System.IComparable<'T>>() =\n    inherit System.Collections.Generic.Comparer<'T>()\n    override this.Compare(x, y) = (x :> System.IComparable<'T>).CompareTo(y)\n\n[<JavaScript>]\ntype private BaseComparer<'T when 'T : comparison>() =\n    inherit System.Collections.Generic.Comparer<'T>()\n    override this.Compare(x, y) = compare x y\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Defines macros used by proxy definitions.\nmodule private WebSharper.Utils\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nlet toSafe (s: string) =\n    if s ==. null then \"\" else s  \n\n[<JavaScript>]\nlet plusForPos (n: obj, s) =\n    if 0 <=. n then \"+\" + s else s     \n\n[<JavaScript>]\nlet spaceForPos (n: obj, s) =\n    if 0 <=. n then \" \" + s else s      \n\n[<Inline \"$s.substr(1)\">]\nlet skip1 (s: string) = X<string>\n\n[<JavaScript>]\nlet padNumLeft (s: string, l) =\n    let f = (As<string[]> s).[0]\n    if f = \" \" || f = \"+\" || f = \"-\" then\n        f + (skip1 s).PadLeft(l - 1, '0')\n    else s.PadLeft(l, '0')\n\n[<JavaScript>]\nlet printList (p: obj -> string, o: obj list) =\n    \"[\" + (o |> Seq.map p |> String.concat \"; \") + \"]\" \n\n[<JavaScript>]\nlet printArray (p: obj -> string, o: obj[]) =\n    if o ===. null then \"null\" else\n    \"[|\" + (o |> Array.map p |> String.concat \"; \") + \"|]\" \n\n[<JavaScript>]\nlet printArray2D (p: obj -> string, o: obj[,]) =\n    if o ===. null then \"null\" else\n     \"[[\" + (\n        seq {\n            let l2 = Array2D.length2 o\n            for i in 0 .. Array2D.length1 o - 1 ->\n                seq { for j in 0 .. l2 - 1 -> p o.[i, j] } \n                |> String.concat \"; \"\n        }\n        |> String.concat \"][\"\n     ) + \"]]\" \n\n[<JavaScript>]\nlet rec prettyPrint (o: obj) =\n    let printObject (o: obj) =\n        let s = string o\n        if s = \"[object Object]\" then\n            \"{\" + (JS.GetFields o |> Array.map (fun (k, v) -> k + \" = \" + prettyPrint v) |> String.concat \"; \") + \"}\"\n        else s\n    if o ===. null then \"null\" else\n    let t = JS.TypeOf o\n    if t  ==. JS.String then\n        \"\\\"\" + As o + \"\\\"\"\n    elif t  ==. JS.Object then\n        if o :? System.Array then\n            \"[|\" + (As o |> Array.map prettyPrint |> String.concat \"; \") + \"|]\"\n        else printObject o\n    else string o\n\n[<JavaScript>]\n[<Name \"WebSharper.Operators.charRange\">]\nlet charRange (min: char) (max: char) : seq<char> =\n    let minv = int min\n    let count = 1 + int max - minv\n    if count <= 0 then Seq.empty\n    else Seq.init count (fun x -> char (x + minv))\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.op\">]\nlet nullableOp (a: obj) (b: obj) f = if a ==. null || b ==. null then null else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.opL\">]\nlet nullableOpL (a: obj) (b: obj) f = if a ==. null then null else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.opR\">]\nlet nullableOpR (a: obj) (b: obj) f = if b ==. null then null else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmp\">]\nlet nullableCmp (a: obj) (b: obj) f = if a ==. null || b ==. null then false else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmpE\">]\nlet nullableCmpE (a: obj) (b: obj) f =\n    if a ==. null then\n        b ==. null\n    elif b ==. null then \n        false \n    else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmpL\">]\nlet nullableCmpL (a: obj) (b: obj) f = if a ==. null then false else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmpR\">]\nlet nullableCmpR (a: obj) (b: obj) f = if b ==. null then false else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.conv\">]\nlet nullableConv (a: obj) f = if a ==. null then null else f a", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Implements concurrency primitives.\nmodule internal WebSharper.Concurrency\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype private OCE = System.OperationCanceledException\n\n[<JavaScript; Prototype false>]\ntype Result<'T> =\n    | Ok of 'T\n    | No of exn\n    | Cc of OCE\n  \n[<JavaScript; Prototype false>]\ntype CT =\n    { \n        [<Name \"c\">] mutable IsCancellationRequested : bool \n        [<Name \"r\">] Registrations : (unit -> unit)[]\n    }\n\n[<Inline \"$arr.push($item)\">]\nlet private push arr item = X<int>\n\n[<JavaScript>]\nlet internal noneCT =           \n    { \n        IsCancellationRequested = false\n        Registrations = [||]\n    }\n\n[<JavaScript>]\nlet internal Register (ct: CT) (callback: unit -> unit) =\n    if ct ===. noneCT then\n        { new System.IDisposable with\n            member this.Dispose() = ()\n        }\n    else\n        let i = push ct.Registrations callback - 1\n        { new System.IDisposable with\n            member this.Dispose() = ct.Registrations.[i] <- ignore\n        }\n\n[<JavaScript; Prototype false>]\ntype AsyncBody<'T> =\n    {\n        k  : Result<'T> -> unit\n        ct : CT\n    }\n\ntype Concurrent<'T>     = AsyncBody<'T> -> unit\nand private C<'T>       = Concurrent<'T>\n\ntype private Queue<'T>  = System.Collections.Generic.Queue<'T>\ntype Milliseconds       = int\n\ntype private Scheduler [<JavaScript>]() =\n    let mutable idle    = true\n    let robin           = Queue<unit->unit>()\n\n    [<JavaScript>]\n    let rec tick () =\n        let t = System.DateTime.Now\n        let mutable loop = true\n        while loop do\n            match robin.Count with\n            | 0 ->\n                idle <- true\n                loop <- false\n            | _ ->\n                robin.Dequeue()()\n                if System.DateTime.Now - t > System.TimeSpan.FromMilliseconds 40. then\n                    JS.SetTimeout tick 0 |> ignore\n                    loop <- false\n\n    [<JavaScript>]\n    member this.Fork(action: unit -> unit) =\n        robin.Enqueue action\n        if idle then\n            idle <- false\n            JS.SetTimeout tick 0 |> ignore\n\n[<JavaScript>]\nlet private scheduler = Scheduler()\n\n[<JavaScript>]\nlet internal defCTS = ref(new System.Threading.CancellationTokenSource())\n\n[<Inline>]\nlet fork action = scheduler.Fork action\n\n[<JavaScript>]\nlet private cancel c = c.k (Cc (new OCE(As<System.Threading.CancellationToken> c.ct)))\n\n[<JavaScript>]\nlet private checkCancel r =\n    ()\n    fun c -> if c.ct.IsCancellationRequested then cancel c else r c\n\n[<JavaScript; Pure>]\nlet Return (x: 'T) : C<'T> =\n    ()\n    fun c -> c.k (Ok x)\n\n[<JavaScript; Pure>]\nlet Zero =\n    Return ()\n\n[<JavaScript; Pure>]\nlet Bind (r: C<'T>, f: 'T -> C<'R>) =\n    checkCancel <| fun c ->\n        r { \n            k = function \n                | Ok x -> fork (fun () -> try f x c with e -> c.k (No e))\n                | res  -> fork (fun () -> c.k (As res)) // error or cancellation\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet Combine (a: C<unit>, b: C<'T>) : C<'T> = \n    Bind (a, fun _ -> b)\n\n[<Inline>]\nlet Ignore (r: C<'T>): C<unit> = As<C<unit>> r\n\n[<JavaScript; Pure>]\nlet Delay (mk: unit -> C<'T>) : C<'T> =\n    ()\n    fun c ->\n        try mk () c with e -> c.k (No e)\n\n[<JavaScript; Pure>]\nlet TryFinally (run: C<'T>, f: unit -> unit) : C<'T> =\n    ()\n    fun c ->\n        run {\n            k = fun r -> \n                try f ()\n                    c.k r \n                with e -> c.k (No e)\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet TryWith (r: C<'T>, f: exn -> C<'T>) : C<'T> =\n    ()\n    fun c ->\n        r {\n            k = function\n                | Ok x -> c.k (Ok x)\n                | No e as res -> try f e c with e -> c.k (As res)\n                | res -> c.k (As res)\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet Catch (r : C<'T>) : C<Choice<'T, exn>> =\n    ()\n    fun c ->\n        try r {\n                k = function \n                    | Ok x -> c.k (Ok (Choice1Of2 x))\n                    | No e -> c.k (Ok (Choice2Of2 e))\n                    | res  -> c.k (As res)\n                ct = c.ct\n            }\n        with e -> c.k (Ok (Choice2Of2 e))\n\n[<JavaScript; Pure>]\nlet GetCT : C<CT> =\n    ()\n    fun c -> c.k (Ok c.ct)\n\n[<JavaScript; Pure>]\nlet FromContinuations (subscribe: ('T -> unit) * (exn -> unit) * (OCE -> unit) -> unit) : C<'T> =\n    ()\n    fun c ->\n        let continued = ref false\n        let once cont : unit =\n            if !continued then failwith \"A continuation provided by Async.FromContinuations was invoked multiple times\" else\n            continued := true\n            fork cont   \n        subscribe (\n            fun a -> once (fun () -> c.k (Ok a))\n        ,   fun e -> once (fun () -> c.k (No e))\n        ,   fun e -> once (fun () -> c.k (Cc e))\n        )\n\n[<JavaScript>]\nlet StartWithContinuations (c: C<'T>, s: 'T -> unit, f: exn -> unit, cc: OCE -> unit, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    if not ct.IsCancellationRequested then\n        c {\n            k = function\n                | Ok x -> s x\n                | No e -> f e\n                | Cc e -> cc e\n            ct = ct\n        }\n\n[<JavaScript>]\nlet UncaughtAsyncError (e: exn) =\n    Console.Log (\"WebSharper: Uncaught asynchronous exception\", e)\n\n[<JavaScript>]\nlet Start (c: C<unit>, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    fork (fun () -> \n        if not ct.IsCancellationRequested then\n            c {\n                k = function\n                    | No e -> UncaughtAsyncError e\n                    | _ -> ()\n                ct = ct\n            }\n    )\n\n[<JavaScript>]\nlet StartImmediate (c: C<unit>, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    if not ct.IsCancellationRequested then\n        c {\n            k = function\n                | No e -> UncaughtAsyncError e\n                | _ -> ()\n            ct = ct\n        }\n\n#nowarn \"40\"\n\n[<JavaScript; Pure>]\nlet AwaitEvent (e: IEvent<'T>, ca: option<unit -> unit>) : C<'T> =\n    ()\n    fun c ->\n        let mutable sub = JS.Undefined<System.IDisposable>\n        let mutable creg = JS.Undefined<System.IDisposable>\n        sub <-\n            e.Subscribe (fun x -> \n                sub.Dispose()\n                creg.Dispose()\n                fork (fun () -> c.k (Ok x))        \n            )\n        creg <-\n            Register c.ct (fun () -> \n                match ca with\n                | Some ca ->\n                    ca()\n                | _ ->\n                    sub.Dispose()\n                    fork (fun () -> cancel c)    \n            ) \n\n[<JavaScript; Pure>]\nlet AwaitTask (t: System.Threading.Tasks.Task) : C<unit> =\n    FromContinuations (fun (ok, err, cc) ->\n        if t.Status = System.Threading.Tasks.TaskStatus.Created then\n            t.Start()\n        t.ContinueWith(fun t ->\n            if t.IsCanceled then\n                cc (OCE())\n            elif t.IsFaulted then\n                err t.Exception\n            else\n                ok()   \n        ) |> ignore\n    )\n\n[<JavaScript; Pure>]\nlet AwaitTask1 (t: System.Threading.Tasks.Task<'T>) : C<'T> =\n    FromContinuations (fun (ok, err, cc) ->\n        if t.Status = System.Threading.Tasks.TaskStatus.Created then\n            t.Start()\n        t.ContinueWith(fun (t: System.Threading.Tasks.Task<'T>) ->\n            if t.IsCanceled then\n                cc (OCE())\n            elif t.IsFaulted then\n                err t.Exception\n            else\n                ok t.Result  \n        ) |> ignore\n    )\n\n[<JavaScript>]\nlet StartAsTask (c: C<'T>, ctOpt) =\n    let tcs = System.Threading.Tasks.TaskCompletionSource<'T>()\n    fork (fun () ->\n        StartWithContinuations (c, tcs.SetResult, tcs.SetException, (fun _ -> tcs.SetCanceled()), ctOpt)\n    )\n    tcs.Task\n\n[<JavaScript>]\nlet StartImmediateAsTask (c: C<'T>, ctOpt) =\n    let tcs = System.Threading.Tasks.TaskCompletionSource<'T>()\n    StartWithContinuations (c, tcs.SetResult, tcs.SetException, (fun _ -> tcs.SetCanceled()), ctOpt)\n    tcs.Task\n\n[<JavaScript; Pure>]\nlet Sleep (ms: Milliseconds) : C<unit> =\n    ()\n    fun c ->\n        let mutable pending = JS.Undefined<JS.Handle>\n        let mutable creg = JS.Undefined<System.IDisposable>\n        pending <-\n            JS.SetTimeout (fun () -> \n                creg.Dispose()\n                fork (fun () -> c.k (Ok ()))\n            ) ms\n        creg <-\n            Register c.ct (fun () -> \n                JS.ClearTimeout pending\n                fork (fun () -> cancel c)\n            )\n\n[<JavaScript; Pure>]\nlet Parallel (cs: seq<C<'T>>) : C<'T[]> =\n    let cs = Array.ofSeq cs\n    if cs.Length = 0 then Return [||] else\n    fun c ->\n        let n = Array.length cs\n        let o = ref n\n        let a = As<'T[]>(JavaScript.Array(n))\n        let accept i x =\n            match !o, x with\n            | 0, _     -> ()\n            | 1, Ok x  -> a.[i] <- x; o := 0; c.k (Ok a)\n            | n, Ok x  -> a.[i] <- x; o := n - 1\n            | n, res   -> o := 0; c.k (As res)\n        Array.iteri (fun i run ->\n            fork (fun () -> run { k = accept i; ct = c.ct }))\n            cs\n\n[<JavaScript; Pure>]\nlet StartChild (r : C<'T>, t: Milliseconds option) : C<C<'T>> =\n    ()\n    fun c ->\n        let inTime = ref true\n        let cached = ref None\n        let queue  = Queue()\n        let tReg =\n            match t with\n            | Some timeout ->\n                JS.SetTimeout (fun () ->\n                    inTime := false\n                    let err = No (System.TimeoutException())\n                    while queue.Count > 0 do\n                        queue.Dequeue() err\n                ) timeout |> Some     \n            | _ -> None\n        fork (fun _ ->\n            if not c.ct.IsCancellationRequested then\n                r {\n                    k = fun res ->\n                        if !inTime then\n                            cached := Some res\n                            match tReg with\n                            | Some r -> JS.ClearTimeout r\n                            | _ -> ()\n                            while queue.Count > 0 do\n                                queue.Dequeue() res\n                    ct = c.ct\n                }\n        )\n        let r2 c2 =            \n            if !inTime then\n                match cached.Value with\n                | Some x    -> c2.k x\n                | None      -> queue.Enqueue c2.k\n            else c2.k (No (System.TimeoutException()))\n        c.k (Ok r2)\n\n[<JavaScript>]\nlet StartChildAsTask (r : C<'T>) =\n    ()\n    fun c ->\n        let ch = StartChild(r, None)\n        ch {\n            k = function\n                | Ok r2 -> c.k (Ok (StartImmediateAsTask(r2, Some c.ct)))\n                | _ -> ()\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet OnCancel (action: unit -> unit) : C<System.IDisposable> =\n    ()\n    fun c -> c.k (Ok (Register c.ct action))\n\n[<JavaScript; Pure>]\nlet TryCancelled (run: C<'T>, comp: OCE -> unit) : C<'T> =\n    ()\n    fun c ->\n        run {\n            k = function\n                | Cc e as res ->\n                    comp e\n                    c.k res\n                | res -> c.k res\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet Using (x: 'U, f: 'U -> C<'T>) =\n    TryFinally (f x, fun () -> (x :> System.IDisposable).Dispose())\n\n[<JavaScript; Pure>]\nlet rec While (g: unit -> bool, c: C<unit>) : C<unit> = \n    if g() then \n        Bind (c, fun () -> While (g, c)) \n    else\n        Return ()\n\n[<JavaScript; Pure>]\nlet rec For (s: seq<'T>, b: 'T -> C<unit>) =\n    Using (s.GetEnumerator(), fun ie -> \n        While ((fun () -> ie.MoveNext()), \n            Delay (fun () -> b ie.Current)))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides an `IEnumerator` implementation.\nmodule private WebSharper.Enumerator\n\nopen WebSharper.JavaScript\ntype IE<'T> = System.Collections.Generic.IEnumerator<'T>\n\n/// Represents an unfolding enumerator.\n[<Sealed>]\ntype T<'S,'T> [<JavaScript>] (s: 'S, c: 'T, n: T<'S,'T> -> bool, d: T<'S,'T> -> unit) =\n    [<Inline; JavaScript>] \n    member this.MoveNext() = n this\n    member this.State with [<Inline; JavaScript>] get() = s and [<Inline; JavaScript>] set (v: 'S) = this?s <- v\n    member this.Current with [<Inline; JavaScript>] get() = c and [<Inline; JavaScript>] set (v: 'T) = this?c <- v\n\n    interface System.Collections.IEnumerator with\n        [<JavaScript>] \n        member this.MoveNext() = n this\n        [<JavaScript>]\n        member this.Current with get() = box c\n        member this.Reset() = failwith \"IEnumerator.Reset not supported\"\n\n    interface System.Collections.Generic.IEnumerator<'T> with\n        [<JavaScript>]\n        member this.Current with get() = c\n\n    interface System.IDisposable with\n        [<JavaScript>] \n        member this.Dispose() = if As d then d this\n\n/// Constructs a new `IEnumerator` by unfolding a function.\n[<Inline>]\n[<JavaScript>]\nlet New<'S,'T> (state: 'S) (next: T<'S,'T> -> bool) =\n    As<IE<'T>> (new T<'S,'T>(state, As null, next, As JS.Undefined)) \n\n[<Inline>]\n[<JavaScript>]\nlet NewDisposing<'S,'T> (state: 'S) dispose (next: T<'S,'T> -> bool) =\n    As<IE<'T>> (new T<'S,'T>(state, As null, next, dispose))\n\n[<Inline \"$x.GetEnumerator()\">]\nlet getEnumerator (x: obj) : IE<'T> = X\n\n[<JavaScript>]\nlet ArrayEnumerator (s: obj[]) =\n    New 0 (fun e ->\n        let i = e.State\n        if i < s.Length then\n            e.Current <- As s.[i]\n            e.State <- i + 1\n            true\n        else\n            false)\n\n[<JavaScript>]\nlet StringEnumerator (s: string) =\n    New 0 (fun e ->\n        let i = e.State\n        if i < s.Length then\n            e.Current <- As s.[i]\n            e.State <- i + 1\n            true\n        else\n            false)\n\n[<JavaScript>]\nlet Get (x: seq<'T>) : IE<'T> =\n    if x :? System.Array then\n        ArrayEnumerator (As x)\n    elif JS.TypeOf x = JS.String then\n        StringEnumerator (As x)\n    else\n        getEnumerator x\n\n[<Inline \"'GetEnumerator0' in $x ? $x.GetEnumerator0() : $x.GetEnumerator()\">]\nlet getEnumerator0 (x: obj) : System.Collections.IEnumerator = X\n\n[<JavaScript>]\nlet Get0 (x: System.Collections.IEnumerable) : System.Collections.IEnumerator =\n    if x :? System.Array then\n        As (ArrayEnumerator (As x))\n    elif JS.TypeOf x = JS.String then\n        As (StringEnumerator (As x))\n    else\n        getEnumerator0 x\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides seq/list/array proxies\n[<JavaScript>]\nmodule internal WebSharper.CollectionInternals\n\nopen WebSharper.JavaScript\n\n[<Name \"WebSharper.Arrays.splitInto\">]\nlet ArraySplitInto count (arr: 'T[]) =\n    if count <= 0 then failwith \"Count must be positive\"\n    let len = arr.Length\n    if len = 0 then\n        [| |]\n    else\n        let count = min count len\n        let res = Array.zeroCreate count : 'T[][]\n        let minChunkSize = len / count\n        let mutable startIndex = 0\n        for i = 0 to len % count - 1 do\n            res.JS.[i] <- Array.sub arr startIndex (minChunkSize + 1)\n            startIndex <- startIndex + minChunkSize + 1\n        for i = len % count to count - 1 do\n            res.JS.[i] <-  Array.sub arr startIndex minChunkSize\n            startIndex <- startIndex + minChunkSize\n        res\n\n[<Name \"WebSharper.Arrays.contains\">]\nlet ArrayContains (item: 'T) (arr: 'T[])  =\n    let mutable c = true\n    let mutable i = 0\n    let l = arr.Length\n    while c && i < l do\n        if arr.JS.[i] = item then\n            c <- false\n        else\n            i <- i + 1\n    not c\n\n[<Name \"WebSharper.Arrays.tryFindBack\">]\nlet ArrayTryFindBack f (arr: _ []) =\n    let mutable res = None\n    let mutable i = Array.length arr - 1\n    while i >= 0 && Option.isNone res do\n        let r = arr.JS.[i]\n        if f r then res <- Some r\n        i <- i - 1\n    res\n\n[<Name \"WebSharper.Arrays.tryFindIndexBack\">]\nlet ArrayTryFindIndexBack f (arr: _ []) =\n    let mutable res = None\n    let mutable i = Array.length arr - 1\n    while i >= 0 && Option.isNone res do\n        if f arr.[i] then res <- Some i\n        i <- i - 1\n    res\n\n[<Name \"WebSharper.Arrays.mapFold\">]\nlet ArrayMapFold<'T, 'S, 'R> (f: 'S -> 'T -> 'R * 'S) (zero: 'S) (arr: 'T[]) : 'R[] * 'S =\n    let r = JavaScript.Array(Array.length arr)\n    let mutable acc = zero\n    for i = 0 to Array.length arr - 1 do\n        let a, b = f acc arr.JS.[i]\n        r.[i] <- a\n        acc <- b \n    r.Self, acc\n\n[<Name \"WebSharper.Arrays.mapFoldBack\">]\nlet ArrayMapFoldBack<'T,'S,'R> (f: 'T -> 'S -> 'R * 'S) (arr: 'T[]) (zero: 'S) : 'R[] * 'S =\n    let r = JavaScript.Array<'R>(Array.length arr)\n    let mutable acc = zero\n    let len = Array.length arr\n    for j = 1 to len do\n        let i = len - j\n        let a, b = f arr.JS.[i] acc\n        r.[i] <- a\n        acc <- b \n    r.Self, acc\n\n[<Name \"WebSharper.Arrays.mapInPlace\">]\nlet mapInPlace (f: 'T1 -> 'T2) (arr: 'T1 []) =\n    for i = 0 to Array.length arr - 1 do\n        arr.JS.[i] <- As (f arr.JS.[i])\n\n[<Name \"WebSharper.Arrays.mapiInPlace\">]\nlet mapiInPlace (f: int -> 'T1 -> 'T2) (arr: 'T1 []) : 'T2[] =\n    for i = 0 to Array.length arr - 1 do\n        arr.JS.[i] <- As (f i arr.JS.[i])\n    As arr\n\n[<Name \"WebSharper.Arrays.sortInPlaceByDescending\">]\nlet ArraySortInPlaceByDescending<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) =\n    (mapiInPlace (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> - compare (snd x) (snd y)) |> mapInPlace fst \n\n[<Name \"WebSharper.Seq.tryHead\">]\nlet SeqTryHead (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then Some e.Current else None\n\n[<Name \"WebSharper.Seq.tryItem\">]\nlet SeqTryItem i (s: seq<'T>) =\n    if i < 0 then None else\n    let mutable j = 0\n    use e = Enumerator.Get s\n    let mutable go = true\n    while go && j <= i do\n        if e.MoveNext() then\n            j <- j + 1\n        else\n            go <- false\n    if go then Some e.Current else None\n\n[<Name \"WebSharper.Seq.tryLast\">]\nlet SeqTryLast (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then \n        while e.MoveNext() do ()\n        Some e.Current \n    else None\n\n[<Name \"WebSharper.Seq.chunkBySize\">]\nlet SeqChunkBySize (size: int) (s: seq<'T>) =\n    if size <= 0 then failwith \"Chunk size must be positive\"\n    Enumerable.Of <| fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> o.Dispose()) <| fun e ->\n            if e.State && o.MoveNext() then\n                let res = [|o.Current|]\n                while e.State && res.Length < size do\n                    if o.MoveNext() then\n                        res.JS.Push o.Current |> ignore\n                    else \n                        e.State <- false\n                e.Current <- res\n                true\n            else false\n\n[<Name \"WebSharper.Arrays.countBy\">]\nlet ArrayCountBy (f: 'T -> 'K) (a: 'T[]) : ('K * int)[] =\n    let d = System.Collections.Generic.Dictionary<'K, int>()\n    let keys = JavaScript.Array()\n    for i = 0 to a.Length - 1 do\n        let c = a.JS.[i]\n        let k = f c\n        if d.ContainsKey(k) then\n            d.[k] <- d.[k] + 1 \n        else\n            keys.Push(k) |> ignore\n            d.Add(k, 1)\n    As<'K[]> keys |> mapInPlace (fun k -> (k, d.[k]))\n    As keys\n\n[<Name \"WebSharper.Seq.except\">]\nlet SeqExcept (itemsToExclude: seq<'T>) (s: seq<'T>) =\n    Enumerable.Of <| fun () ->\n        let o  = Enumerator.Get s\n        let seen = System.Collections.Generic.HashSet(itemsToExclude)\n        Enumerator.NewDisposing () (fun _ -> o.Dispose()) <| fun e ->\n            if o.MoveNext() then\n                let mutable cur = o.Current\n                let mutable has = seen.Add(cur)\n                while not has && o.MoveNext() do\n                    cur <- o.Current\n                    has <- seen.Add(cur)\n                if has then\n                    e.Current <- cur\n                    true\n                else\n                    false\n            else\n                false\n\n[<Name \"WebSharper.List.skip\">]\nlet ListSkip i (l : list<'T>) =\n    let mutable res = l\n    for j = 1 to i do\n        match res with \n        | _ :: t ->\n            res <- t\n        | [] -> failwith \"Input list too short.\"\n    res\n\n[<Name \"WebSharper.Arrays.groupBy\">]\nlet ArrayGroupBy (f: 'T -> 'K when 'K : equality) (a: 'T[]) : ('K * 'T[])[] =\n    let d = System.Collections.Generic.Dictionary<'K, 'T[]>()\n    let keys = JavaScript.Array()\n    for i = 0 to a.Length - 1 do\n        let c = a.JS.[i]\n        let k = f c\n        if d.ContainsKey(k) then\n            d.[k].JS.Push(c) |> ignore\n        else\n            keys.Push(k) |> ignore\n            d.Add(k, [| c |])\n    As<'K[]> keys |> mapInPlace (fun k -> (k, d.[k]))\n    As keys\n\n[<Name \"WebSharper.Seq.insufficient\">]\nlet InsufficientElements() =\n    failwith \"The input sequence has an insufficient number of elements.\"\n\n[<Name \"WebSharper.Seq.last\">]\nlet SeqLast (s: seq<_>) =\n    use e = Enumerator.Get s\n    if not <| e.MoveNext() then InsufficientElements()\n    else \n        while e.MoveNext() do ()\n        e.Current\n\n[<Name \"WebSharper.Seq.contains\">]\nlet SeqContains (el: 'T) (s: seq<'T>) =\n    use e = Enumerator.Get s\n    let mutable r = false\n    while not r && e.MoveNext() do\n        r <- e.Current = el\n    r\n\n[<Name \"WebSharper.List.skipWhile\">]\nlet rec ListSkipWhile<'T> (predicate : 'T -> bool) (list : list<'T>) : list<'T> =\n    let mutable rest = list\n    while not (List.isEmpty rest) && predicate (List.head rest) do\n        rest <- List.tail rest \n    rest\n\n[<Name \"WebSharper.Seq.nonNegative\">]\nlet InputMustBeNonNegative() =\n    failwith \"The input must be non-negative.\"\n\n[<Name \"WebSharper.Arrays.transposeArray\">]\nlet ArrayTranspose (array:'T[][]) : 'T[][] =\n    let len = array.Length\n    if len = 0 then [||] else\n    let lenInner = array.[0].Length\n\n    for j in 1..len-1 do\n        if lenInner <> array.[j].Length then\n            failwith \"The arrays have different lengths.\"\n\n    let result = Array lenInner\n    for i in 0..lenInner-1 do\n        result.[i] <- Array len\n        for j in 0..len-1 do\n            result.[i].[j] <- array.[j].[i]\n    As result", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\n#nowarn \"864\"\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<System.Object>)>]\n[<Name \"WebSharper.Obj\">]\ntype private ObjectProxy() =\n\n    [<Inline>]\n    override this.GetHashCode() = Unchecked.hash this\n\n    [<Inline>]\n    override this.Equals(obj: obj) = Unchecked.equals (this :> obj) obj\n\n    [<Name \"GetHashCode\">]\n    member this.GetHashCodeImpl() = -1\n\n    [<Name \"Equals\">]\n    member this.EqualsImpl(obj: obj) = this ===. obj\n\n    [<Inline>]\n    static member Equals(a: obj, b: obj) = Unchecked.equals a b\n\n    [<Inline>]\n    static member ReferenceEquals(a: obj, b: obj) = a ===. b\n\n    [<Inline>]\n    static member op_Equality(a: obj, b: obj) = Unchecked.equals a b\n\n    [<Inline>]\n    static member op_Inequality(a: obj, b: obj) = not (Unchecked.equals a b)\n\n    [<Inline>]\n    override this.ToString() = string this\n\n[<Proxy(typeof<System.ValueType>)>]\ntype private ValueTypeProxy =\n\n    [<Inline>]\n    override this.GetHashCode() = Unchecked.hash this\n\n    [<Inline>]\n    override this.Equals(obj: obj) = Unchecked.equals (this :> obj) obj\n\n    [<Inline>]\n    override this.ToString() = string this", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.LanguagePrimitives+IntrinsicFunctions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.IntrinsicFunctionProxy\n\nopen System\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Inline \"$value\">]\nlet UnboxGeneric<'T> (value: obj) = X<'T>\n\n[<Inline \"$value\">]\nlet UnboxFast<'T> (value: obj) = X<'T>\n\n[<Macro(typeof<M.TypeTest>)>]\nlet TypeTestGeneric<'T> (value: obj) = X<bool>\n\n[<Macro(typeof<M.TypeTest>)>]\nlet TypeTestFast<'T> (value: obj) = X<bool>\n\n[<Inline \"$arr.length\">]\nlet GetArray2DLength1 (arr: 'T[,]) = X<int>\n\n[<Inline \"$arr.length ? $arr[0].length : 0\">]\nlet GetArray2DLength2 (arr: 'T[,]) =  X<int>\n\n[<Name \"WebSharper.Arrays.checkBounds\">]\nlet checkBounds (arr: 'T[]) (n: int) =\n    if n < 0 || n >= Array.length arr then\n        failwith \"Index was outside the bounds of the array.\"\n\n[<Name \"WebSharper.Arrays.checkBounds2D\">]\nlet checkBounds2D<'T> (arr: 'T[,]) (n1: int) (n2: int) =\n    if n1 < 0 || n2 < 0 || n1 >= GetArray2DLength1 arr\n        || n2 >= GetArray2DLength2 arr then\n        raise (new IndexOutOfRangeException())\n\n[<Name \"WebSharper.Arrays.checkRange\">]\n\nlet checkRange (arr: 'T []) (start: int) (size: int) : unit =\n    if (size < 0) || (start < 0) || (Array.length arr < start + size) then\n        failwith \"Index was outside the bounds of the array.\"\n\n[<Inline \"$arr[$n]\">]\nlet GetArrayInternal<'T> (arr: 'T[]) (n:int) = X<'T>\n\n[<Inline \"void ($arr[$n] = $x)\">]\nlet SetArrayInternal<'T> (arr: 'T[]) (n:int) (x:'T) = ()\n\n[<Name \"WebSharper.Arrays.set\">]\nlet SetArray<'T> (arr: 'T[]) (n: int) (x: 'T) =\n    checkBounds arr n\n    SetArrayInternal arr n x\n\n[<Inline \"$s[$ix]\">]\n[<Name \"WebSharper.Strings.get\">]\nlet GetString (s: string) (ix: int) = X<char>\n\n[<Name \"WebSharper.Arrays.get\">]\nlet GetArray<'T> (arr: 'T[]) (n: int) =\n    checkBounds arr n\n    GetArrayInternal arr n\n\n[<Inline \"$x.slice($start,$start+$length)\">]\nlet private subArray (x: 'T) start length = X<'T>\n\n[<Name \"WebSharper.Arrays.sub\">]\nlet GetArraySub<'T> (arr: 'T[]) start length =\n    checkRange arr start length\n    subArray arr start length\n\n[<Name \"WebSharper.Arrays.setSub\" >]\nlet SetArraySub<'T> (arr: 'T[]) start len (src: 'T[]) =\n    for i = 0 to len - 1 do\n        arr.[start+i] <- src.[i]\n\n[<Inline \"$arr[$n1][$n2]\">]\nlet GetArray2DInternal (arr: 'T[,]) (n1:int) (n2:int) = X<'T>\n\n[<Name \"WebSharper.Arrays.get2D\" >]\nlet GetArray2D (arr: 'T[,]) (n1: int) (n2: int) =\n    checkBounds2D arr n1 n2\n    GetArray2DInternal arr n1 n2\n\n[<Inline \"void ($arr[$n1][$n2] = $x)\">]\nlet SetArray2DInternal (arr: 'T[,]) (n1:int) (n2:int) (x:'T) = ()\n\n\n[<Name \"WebSharper.Arrays.set2D\" >]\nlet SetArray2D (arr: 'T[,]) (n1: int) (n2: int) (x: 'T) =\n    checkBounds2D arr n1 n2\n    SetArray2DInternal arr n1 n2 x\n\n[<Name \"WebSharper.Arrays.zeroCreate2D\" >]\nlet Array2DZeroCreate<'T> (n:int) (m:int) =\n    let arr = As<'T[,]>(Array.init n (fun _ -> Array.zeroCreate m))\n    arr?dims <- 2\n    arr\n\n[<Name \"WebSharper.Arrays.sub2D\" >]\nlet GetArray2DSub<'T> (src: 'T[,]) src1 src2 len1 len2 =\n    let len1 = (if len1 < 0 then 0 else len1)\n    let len2 = (if len2 < 0 then 0 else len2)\n    let dst = Array2DZeroCreate len1 len2\n    for i = 0 to len1 - 1 do\n        for j = 0 to len2 - 1 do\n            dst.[i,j] <- src.[src1 + i, src2 + j]\n    dst\n\n[<Name \"WebSharper.Arrays.setSub2D\" >]\nlet SetArray2DSub<'T> (dst: 'T[,]) src1 src2 len1 len2 (src: 'T[,]) =\n    for i = 0 to len1 - 1 do\n        for j = 0 to len2 - 1 do\n            dst.[src1+i, src2+j] <- src.[i, j]\n\n[<Name \"WebSharper.Arrays.length\" >]\nlet GetLength<'T> (arr: System.Array) =\n    match arr?dims with\n    | 2 -> GetArray2DLength1 (As arr) * GetArray2DLength1 (As arr)\n    | _ -> Array.length (As arr)\n\n[<Name \"WebSharper.checkThis\">]\nlet CheckThis (this: 'T) =\n    if this = null then\n        invalidOp \"The initialization of an object or value resulted in an object or value being accessed recursively before it was fully initialized.\"\n    else this\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen WebSharper.JavaScript\nmodule F = WebSharper.IntrinsicFunctionProxy\ntype private IComparer = System.Collections.IComparer\ntype private IComparer<'T> = System.Collections.Generic.IComparer<'T>\ntype private JSArray<'T> = WebSharper.JavaScript.Array<'T>\ntype private Comparer<'T> = System.Collections.Generic.Comparer<'T>\n\n[<AutoOpen; JavaScript>]\nmodule ArrayProxy =\n\n    [<Name \"WebSharper.Arrays.binarySearch\">]\n    let binarySearch (haystack: 'T[]) (comparer: 'T -> int) start finish =\n        if start < 0 then raise (ArgumentOutOfRangeException(\"index\", \"Non-negative number required.\"))\n        if finish > haystack.Length then raise (ArgumentException(\"Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\"))\n        if finish < start then raise (ArgumentOutOfRangeException(\"length\", \"Non-negative number required.\"))\n        let rec search left right =\n            if left > right then\n                ~~~left\n            else\n                let pivot = (left + right) / 2\n                let cmp = comparer haystack.[pivot]\n                if left = right then\n                    if cmp = 0 then left\n                    elif cmp > 0 then ~~~(left + 1)\n                    else ~~~left\n                elif cmp <= 0 then\n                    search left pivot\n                else\n                    search (pivot + 1) right\n        search start (finish - 1)\n\n    [<Name \"WebSharper.Arrays.binarySearchComparer\">]\n    let objBinarySearchComparer (needle: obj) =\n       // Check for an implementation of IComparable\n       if needle?CompareTo0 then\n           As<IComparable>(needle).CompareTo\n       else\n           fun x ->\n               if x?CompareTo0 then\n                   -As<IComparable>(x).CompareTo(needle)\n               else\n                   InvalidOperationException(\n                       \"Failed to compare two elements in the array.\",\n                       ArgumentException(\"At least one object must implement IComparable.\"))\n                   |> raise\n\n    [<Name \"WebSharper.Arrays.sortInternal\">]\n    let sortInternal (keys: 'K[]) (index: int) (length: int) (comp: 'K * 'K -> int) (swap: int -> int -> unit) : unit =\n        let partition l r =\n            let pivot = keys.JS.[r]\n            let mutable i = l - 1\n            for j = l to r - 1 do\n                if comp(keys.JS.[j], pivot) < 0 then\n                    i <- i + 1\n                    swap i j\n            if comp(keys.JS.[r], keys.JS.[i + 1]) < 0 then\n                swap (i + 1) r\n            i + 1\n        let rec quicksort l r =\n            if l < r then\n                let p = partition l r\n                quicksort l (p - 1)\n                quicksort (p + 1) r\n        quicksort index (index + length - 1)\n\n    [<Name \"WebSharper.Arrays.sortSub\">]\n    let sortSub (keys: 'K[]) (index: int) (length: int) (comp: 'K * 'K -> int) : unit =\n        let swap i j =\n            let k = keys.JS.[i]\n            keys.JS.[i] <- keys.JS.[j]\n            keys.JS.[j] <- k\n        sortInternal keys index length comp swap\n\n    [<Name \"WebSharper.Arrays.sortByKeys\">]\n    let sortByKeys (keys: 'K[]) (items: 'V[]) (index: int) (length: int) (comp: 'K * 'K -> int) : unit =\n        let swap i j =\n            let k = keys.JS.[i]\n            keys.JS.[i] <- keys.JS.[j]\n            keys.JS.[j] <- k\n            let v = items.JS.[i]\n            items.JS.[i] <- items.JS.[j]\n            items.JS.[j] <- v\n        sortInternal keys index length comp swap\n\n[<Proxy(typeof<System.Array>)>]\ntype private ArrayProxy =\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, needle: obj) : int =\n        binarySearch (As<obj[]> haystack) (objBinarySearchComparer needle) 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, needle: obj, comparer: IComparer) : int =\n        binarySearch (As<obj[]> haystack) (fun o -> comparer.Compare(needle, o)) 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, start: int, length: int, needle: obj) : int =\n        binarySearch (As<obj[]> haystack) (objBinarySearchComparer needle) start (start + length)\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, start: int, length: int, needle: obj, comparer: IComparer) : int =\n        binarySearch (As<obj[]> haystack) (fun o -> comparer.Compare(needle, o)) start (start + length)\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], needle: 'T) : int =\n        let compare y = compare (As<IComparable> needle) (As<IComparable> y)\n        binarySearch haystack compare 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], start: int, length: int, needle: 'T) : int =\n        let compare y = compare (As<IComparable> needle) (As<IComparable> y)\n        binarySearch haystack compare start (start + length)\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], needle: 'T, comparer: IComparer<'T>) : int =\n        binarySearch haystack (fun o -> comparer.Compare(needle, o)) 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], start: int, length: int, needle: 'T, comparer: IComparer<'T>) : int =\n        binarySearch haystack (fun o -> comparer.Compare(needle, o)) start (start + length)\n\n    [<Name \"WebSharper.Arrays.clear\">]\n    static member Clear(array: System.Array, index: int, length: int) : unit =\n        if isNull array then raise (ArgumentNullException(\"array\"))\n        if index < 0 || length < 0 || index + length > array.Length then raise (IndexOutOfRangeException())\n        for i = index to index + length - 1 do\n            (As<JSArray<obj>> array).[i] <-\n                match JS.TypeOf (As<JSArray<obj>> array).[i] with\n                | JS.Number -> box 0\n                | _ -> null\n\n    [<Inline>]\n    member this.Clone() =\n        Array.copy (As<obj[]> this) :> obj\n\n    [<Name \"WebSharper.Arrays.constrainedCopy\">]\n    static member ConstrainedCopy(src: System.Array, srcIndex: int, dst: System.Array, dstIndex: int, length: int) =\n        if src ===. dst && dstIndex <= srcIndex + length then\n            let tmp = Array.init length (fun i -> (As<obj[]> src).[srcIndex + i])\n            Array.blit tmp 0 (As<obj[]> dst) dstIndex length\n        else\n            Array.blit (As<obj[]> src) srcIndex (As<obj[]> dst) dstIndex length\n\n    [<Inline>]\n    static member Copy(src: System.Array, srcIndex: int, dst: System.Array, dstIndex: int, length: int) =\n        Array.blit (As<obj[]> src) srcIndex (As<obj[]> dst) dstIndex length\n\n    [<Inline>]\n    member this.CopyTo(dst: System.Array, index: int) =\n        if this.Length + index < dst.Length then raise (ArgumentException(\"array\"))\n        Array.blit (As<obj[]> this) 0 (As<obj[]> dst) index this.Length\n\n    [<Inline>]\n    static member Copy(src: System.Array, dst: System.Array, length: int) =\n        Array.blit (As<obj[]> src) 0 (As<obj[]> dst) 0 length\n\n    [<Inline>]\n    static member ConvertAll<'T, 'U>(array: 'T[], converter: Converter<'T, 'U>) : 'U[] =\n        Array.map converter.Invoke array\n\n    [<Inline>]\n    static member Empty<'T>() : 'T[] =\n        Array.empty\n\n    [<Inline>]\n    static member Exists<'T>(array: 'T[], predicate: Predicate<'T>) : bool =\n        Array.exists predicate.Invoke array\n\n    [<Inline>]\n    static member Find<'T>(array: 'T[], predicate: Predicate<'T>) : 'T =\n        defaultArg (Array.tryFind predicate.Invoke array) Unchecked.defaultof<'T>\n\n    [<Inline>]\n    static member FindAll<'T>(array: 'T[], predicate: Predicate<'T>) : 'T[] =\n        Array.filter predicate.Invoke array\n\n    [<Name \"WebSharper.Arrays.findIndexBound\">]\n    static member FindIndex<'T>(array: 'T[], startIndex: int, count: int, predicate: Predicate<'T>) : int =\n        if isNull array then raise (ArgumentNullException(\"array\"))\n        if isNull predicate then raise (ArgumentNullException(\"match\"))\n        if startIndex < 0 then raise (ArgumentOutOfRangeException(\"startIndex\", \"Index was out of range. Must be non-negative and less than the size of the collection.\"))\n        if count < 0 || startIndex + count > array.Length then raise (ArgumentOutOfRangeException(\"count\", \"Count must be positive and count must refer to a location within the string/array/collection.\"))\n        let rec f finish i =\n            if i = finish then\n                -1\n            elif predicate.Invoke(array.[i]) then\n                i\n            else\n                f finish (i + 1)\n        f (startIndex + count) startIndex\n\n    [<Inline>]\n    static member FindIndex<'T>(array: 'T[], startIndex: int, predicate: Predicate<'T>) : int =\n        System.Array.FindIndex<'T>(array, startIndex, array.Length - startIndex, predicate)\n\n    [<Inline>]\n    static member FindIndex<'T>(array: 'T[], predicate: Predicate<'T>) : int =\n        System.Array.FindIndex<'T>(array, 0, array.Length, predicate)\n\n    [<Inline>]\n    static member FindLast<'T>(array: 'T[], predicate: Predicate<'T>) : 'T =\n        defaultArg (Array.tryFindBack predicate.Invoke array) Unchecked.defaultof<'T>\n\n    [<Name \"WebSharper.Arrays.findLastIndexBound\">]\n    static member FindLastIndex<'T>(array: 'T[], startIndex: int, count: int, predicate: Predicate<'T>) : int =\n        if isNull array then raise (ArgumentNullException(\"array\"))\n        if isNull predicate then raise (ArgumentNullException(\"match\"))\n        if startIndex < 0 then raise (ArgumentOutOfRangeException(\"startIndex\", \"Index was out of range. Must be non-negative and less than the size of the collection.\"))\n        if count < 0 || startIndex + count > array.Length then raise (ArgumentOutOfRangeException(\"count\", \"Count must be positive and count must refer to a location within the string/array/collection.\"))\n        let rec f i =\n            if i < startIndex then\n                -1\n            elif predicate.Invoke(array.[i]) then\n                i\n            else\n                f (i - 1)\n        f (startIndex + count - 1)\n\n    [<Inline>]\n    static member FindLastIndex<'T>(array: 'T[], startIndex: int, predicate: Predicate<'T>) : int =\n        System.Array.FindLastIndex<'T>(array, startIndex, array.Length - startIndex, predicate)\n\n    [<Inline>]\n    static member FindLastIndex<'T>(array: 'T[], predicate: Predicate<'T>) : int =\n        System.Array.FindLastIndex<'T>(array, 0, array.Length, predicate)\n\n    [<Inline>]\n    static member ForEach<'T>(array: 'T[], action: Action<'T>) : unit =\n        Array.iter action.Invoke array\n\n    [<Inline>]\n    member this.GetValue(i: int) =\n        (As<obj[]> this).[i]\n\n    [<Inline>]\n    static member IndexOf(haystack: System.Array, needle: obj, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(As<obj[]> haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf(haystack: System.Array, needle: obj, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(As<obj[]> haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf(haystack: System.Array, needle: obj) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(As<obj[]> haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf(haystack: System.Array, needle: obj, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(As<obj[]> haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf(haystack: System.Array, needle: obj, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(As<obj[]> haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf(haystack: System.Array, needle: obj) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(As<obj[]> haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member Resize<'T>(array: byref<'T[]>, newSize: int) =\n        let a = Array.zeroCreate newSize\n        if not (isNull array) then\n            Array.blit array 0 a 0 (min newSize array.Length)\n        array <- a\n\n    [<Inline \"$array.reverse()\">]\n    static member Reverse(array: System.Array) = X<unit>\n\n    [<Name \"WebSharper.Arrays.reverse\">]\n    static member Reverse(array: System.Array, offset: int, length: int) =\n        let a = Array.rev (Array.sub (As array) offset length)\n        Array.blit a 0 (As array) offset a.Length\n\n    [<Inline>]\n    member this.SetValue(v: obj, index: int) =\n        (As<obj[]> this).[index] <- v\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[], index: int, length: int, comp: IComparer<'K>) : unit =\n        sortByKeys keys items index length comp.Compare\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[], index: int, length: int) : unit =\n        sortByKeys keys items index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[], comparer: IComparer<'K>) : unit =\n        sortByKeys keys items 0 keys.Length comparer.Compare\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[]) : unit =\n        sortByKeys keys items 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], index: int, length: int, comparer: IComparer<'K>) : unit =\n        sortSub keys index length comparer.Compare\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], index: int, length: int) : unit =\n        sortSub keys index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], comparer: IComparer<'K>) : unit =\n        sortSub keys 0 keys.Length comparer.Compare\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[]) : unit =\n        sortSub keys 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], comparison: Comparison<'K>) =\n        sortSub keys 0 keys.Length comparison.Invoke\n\n    [<Inline>]\n    static member Sort(keys: System.Array, index: int, length: int, comparer: IComparer) : unit =\n        sortSub (As<obj[]> keys) index length comparer.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, index: int, length: int) : unit =\n        sortSub (As<obj[]> keys) index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort(keys: System.Array, comparer: IComparer) : unit =\n        sortSub (As<obj[]> keys) 0 keys.Length comparer.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array, index: int, length: int, comp: IComparer) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) index length comp.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array, index: int, length: int) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array, comp: IComparer) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) 0 keys.Length comp.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort(keys: System.Array) : unit =\n        sortSub (As<obj[]> keys) 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member TrueForAll<'T>(array : 'T[], predicate: Predicate<'T>) : bool =\n        Array.forall predicate.Invoke array\n\n    member this.Length\n        with [<Inline>] get() = F.GetLength (As this)   \n\n    [<Inline>]\n    member this.GetEnumerator() = Enumerator.Get0 (As this)         \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Arrays\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.ArrayModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ArrayModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\nmodule F = WebSharper.IntrinsicFunctionProxy\n\nlet checkLength (arr1: 'T1[]) (arr2: 'T2[]) =\n    if Array.length arr1 <> Array.length arr2 then\n        failwith \"The arrays have different lengths.\"\n\n[<Inline \"$x.push($y)\">]\nlet push (x: obj) (y: obj) = ()\n\n[<Inline \"$arr1.concat($arr2)\">]\nlet Append<'T> (arr1: 'T []) (arr2: 'T []) : 'T [] = arr1\n\n[<Name \"allPairs\">]\nlet AllPairs (array1: 'T1 []) (array2: 'T2 []) =\n    let len1 = Array.length array1\n    let len2 = Array.length array2\n    let res = JavaScript.Array (len1 * len2)\n    for i = 0 to len1-1 do\n        for j = 0 to len2-1 do\n            res.[i * len2 + j] <- (array1.JS.[i],array2.JS.[j])\n    res |> As<('T1 * 'T2) []>\n\n[<Name \"average\">]\nlet inline Average (arr: 'T []): 'T = As (float (Array.sum arr) / float (Array.length arr))\n\n[<Name \"averageBy\">]\nlet inline AverageBy (f: 'T -> 'U) (arr: 'T []) : 'U = As (float (Array.sumBy f arr) / float (Array.length arr))\n\n[<Name \"blit\">]\nlet CopyTo<'T> (arr1: 'T [], start1, arr2: 'T [], start2, length) =\n    F.checkRange arr1 start1 length\n    F.checkRange arr2 start2 length\n    for i = 0 to length - 1 do\n        arr2.JS.[start2 + i] <- arr1.JS.[start1 + i]\n\n[<Name \"choose\">]\nlet Choose<'T,'U> (f: 'T -> option<'U>) (arr: 'T []) : 'U [] =\n    let q : 'U [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        match f arr.JS.[i] with\n        | Some x -> push q x\n        | None   -> ()\n    q\n\n[<Inline \"Array.prototype.concat.apply([], $x)\"; Pure>]\nlet concatArray (x: 'T[][]) = X<'T[]>\n\n[<Name \"collect\">]\nlet Collect<'T,'U> (f: 'T -> 'U[]) (x: 'T []) : 'U[] =\n    concatArray (Array.map f x)\n\n[<Name \"concat\">]\nlet Concat<'T> (xs: seq<'T []>) : 'T [] =\n    concatArray (Array.ofSeq xs)\n\n[<Inline>]\nlet SplitInto count (arr: 'T[]) = ArraySplitInto count arr\n\n[<Inline \"$x.slice()\">]\nlet Copy (x: 'T []) = X<'T []>\n\n[<Name \"create\">]\nlet Create (size: int) value =\n    let r = JavaScript.Array(size)\n    for i = 0 to size - 1 do\n        r.[i] <- value\n    r.Self\n\n[<Inline \"[]\">]\nlet Empty () = X<'T []>\n\n[<Name \"exists\">]\nlet Exists<'T> (f: 'T -> bool) (x: 'T []) =\n    let mutable e = false\n    let mutable i = 0\n    let l = x.Length\n    while not e && i < l do\n        if f x.JS.[i] then\n            e <- true\n        else\n            i <- i + 1\n    e\n\n[<Name \"exists2\">]\nlet Exists2 f (x1: _ []) (x2: _ []) =\n    checkLength x1 x2\n    let mutable e = false\n    let mutable i = 0\n    let l = x1.Length\n    while not e && i < l do\n        if f x1.JS.[i] x2.JS.[i] then\n            e <- true\n        else\n            i <- i + 1\n\n    e\n\n[<Name \"fill\">]\nlet Fill<'T> (arr: 'T []) (start: int) (length: int) (value: 'T) =\n    F.checkRange arr start length\n    for i = start to start + length - 1 do\n        arr.JS.[i] <- value\n\n[<Name \"filter\">]\nlet Filter<'T> f (arr: 'T []) : 'T [] =\n    let r : 'T [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        if f arr.JS.[i] then\n            push r arr.JS.[i]\n    r\n\n[<Name \"find\">]\nlet Find f (arr: _ []) =\n    match Array.tryFind f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"findIndex\">]\nlet FindIndex f (arr: _ []) =\n    match Array.tryFindIndex f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (zero: 'S) (arr: 'T []) : 'S =\n    let mutable acc = zero\n    for i = 0 to Array.length arr - 1 do\n        acc <- f acc arr.JS.[i]\n    acc\n\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> f (zero: 'S) (arr1: 'T1 []) (arr2: 'T2 []) : 'S =\n    checkLength arr1 arr2\n    let mutable accum = zero\n    for i in 0 .. Array.length arr1 - 1 do\n        accum <- f accum arr1.JS.[i] arr2.JS.[i]\n    accum\n\n[<Name \"foldBack\">]\nlet FoldBack f (arr: _ []) zero =\n    let mutable acc = zero\n    let len = Array.length arr\n    for i = 1 to len do\n        acc <- f arr.JS.[len - i] acc\n    acc\n\n[<Name \"foldBack2\">]\nlet FoldBack2 f (arr1: _ []) (arr2: _ []) zero =\n    checkLength arr1 arr2\n    let len = Array.length arr1\n    let mutable accum = zero\n    for i in 1 .. len do\n        accum <- f arr1.JS.[len - i] arr2.JS.[len - i] accum\n    accum\n\n[<Name \"forall\">]\nlet ForAll f (x: _ []) =\n    let mutable a = true\n    let mutable i = 0\n    let l = x.Length\n    while a && i < l do\n        if f x.JS.[i] then\n            i <- i + 1\n        else\n            a <- false\n    a\n\n[<Name \"forall2\">]\nlet ForAll2 f (x1: _ []) (x2: _ []) =\n    checkLength x1 x2\n    let mutable a = true\n    let mutable i = 0\n    let l = x1.Length\n    while a && i < l do\n        if f x1.JS.[i] x2.JS.[i] then\n            i <- i + 1\n        else\n            a <- false\n    a\n\n[<Inline>]\nlet Get (arr: _ []) index =\n    F.GetArray arr index\n\n[<Inline>]\nlet Item index (arr: _ []) =\n    F.GetArray arr index\n\n[<Name \"init\">]\nlet Initialize (size: int) f =\n    if size < 0 then\n        failwith \"Negative size given.\"\n    let r = JavaScript.Array(size)\n    for i = 0 to size - 1 do\n        r.[i] <- f i\n    r.Self\n\n[<Inline \"$arr.length == 0\">]\nlet IsEmpty (arr: _ []) = X<bool>\n\n[<Name \"iter\">]\nlet Iterate f (arr: 'T []) =\n    for i = 0 to Array.length arr - 1 do\n        f arr.JS.[i]\n\n[<Name \"iter2\">]\nlet Iterate2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    for i = 0 to Array.length arr1 - 1 do\n        f arr1.JS.[i] arr2.JS.[i]\n\n[<Name \"iteri\">]\nlet IterateIndexed f (arr: 'T []) =\n    for i = 0 to Array.length arr - 1 do\n        f i arr.JS.[i]\n\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    for i = 0 to Array.length arr1 - 1 do\n        f i arr1.JS.[i] arr2.JS.[i]\n\n[<Inline \"$arr.length\">]\nlet Length<'T> (arr: 'T []) = X<int>\n\n[<Name \"map\">]\nlet Map<'T1,'T2> (f: 'T1 -> 'T2) (arr: 'T1 []) : 'T2 [] =\n    let r = JavaScript.Array<'T2>(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        r.[i] <- f arr.JS.[i]\n    r.Self\n\n[<Name \"map2\">]\nlet Map2 (f: 'T1 -> 'T2 -> 'T3) (arr1: 'T1 []) (arr2: 'T2 []) : 'T3 [] =\n    checkLength arr1 arr2\n    let r = JavaScript.Array<'T3>(Array.length arr2)\n    for i = 0 to Array.length arr2 - 1 do\n        r.[i] <- f arr1.JS.[i] arr2.JS.[i]\n    r.Self\n\n[<Name \"mapi\">]\nlet MapIndexed f (arr: _ []) =\n    let y = JavaScript.Array(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        y.[i] <- f i arr.JS.[i]\n    y.Self\n\n[<Name \"mapi2\">]\nlet MapIndexed2 f (arr1: 'T1 []) (arr2: 'T2 []): 'U[] =\n    checkLength arr1 arr2\n    let res = JavaScript.Array(Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.[i] <- f i arr1.JS.[i] arr2.JS.[i]\n    res.Self\n\n[<Inline>]\nlet MapFold<'T,'S,'R> f zero arr = ArrayMapFold<'T, 'S, 'R> f zero arr\n\n[<Inline>]\nlet MapFoldBack f arr zero = ArrayMapFoldBack f arr zero\n\nlet private nonEmpty (arr: _ []) =\n    if Array.length arr = 0 then\n        failwith \"The input array was empty.\"\n\n[<Name \"max\">]\nlet Max arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        if x > m then\n            m <- x\n    m\n\n[<Name \"maxBy\">]\nlet MaxBy f arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    let mutable fm = f m\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        let fx = f x\n        if fx > fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"min\">]\nlet Min arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        if x < m then\n            m <- x\n    m\n\n\n[<Name \"minBy\">]\nlet MinBy f arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    let mutable fm = f m\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        let fx = f x\n        if fx < fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"ofList\">]\nlet OfList<'T> (xs: list<'T>) =\n    let q : 'T [] = [||]\n    let mutable l = xs\n    while not (List.isEmpty l) do\n        push q l.Head\n        l <- l.Tail\n    q\n\n[<Name \"ofSeq\">]\nlet OfSeq<'T> (xs: seq<'T>) : 'T [] =\n    if xs :? System.Array then\n        Array.copy (As<'T[]> xs)\n    elif xs :? _ list then\n        Array.ofList (As<'T list> xs)\n    else\n        let q : 'T [] = [||]\n        use o = Enumerator.Get xs\n        while o.MoveNext() do\n            push q o.Current\n        q\n\n[<Name \"partition\">]\nlet Partition f (arr: 'T []) : 'T [] * 'T [] =\n    let ret1 : 'T [] = [||]\n    let ret2 : 'T [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        if f arr.JS.[i] then\n            push ret1 arr.JS.[i]\n        else\n            push ret2 arr.JS.[i]\n    (ret1, ret2)\n\n[<Name \"permute\">]\nlet Permute f (arr: 'T []) =\n    let ret = JavaScript.Array(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        ret.[f i] <- arr.JS.[i]\n    ret.Self\n\n[<Name \"pick\">]\nlet Pick f (arr: _ []) =\n    match Array.tryPick f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"reduce\">]\nlet Reduce f (arr: _ []) =\n    nonEmpty arr\n    let mutable acc = arr.JS.[0]\n    for i = 1 to Array.length arr - 1 do\n        acc <- f acc arr.JS.[i]\n    acc\n\n[<Name \"reduceBack\">]\nlet ReduceBack f (arr: _ []) =\n    nonEmpty arr\n    let len = Array.length arr\n    let mutable acc = arr.JS.[len - 1]\n    for i = 2 to len do\n        acc <- f arr.JS.[len - i] acc\n    acc\n\n[<Inline \"$x.slice().reverse()\">]\nlet Reverse (x: 'T []) = X<'T []>\n\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (zero: 'S) (arr: 'T []) : 'S [] =\n    let ret = JavaScript.Array(1 + Array.length arr)\n    ret.[0] <- zero\n    for i = 0 to Array.length arr - 1 do\n        ret.[i + 1] <- f ret.[i] arr.JS.[i]\n    ret.Self\n\n[<Name \"scanBack\">]\nlet ScanBack (f: 'T -> 'S -> 'S) (arr: 'T []) (zero: 'S) : 'S [] =\n    let len = Array.length arr\n    let ret = JavaScript.Array(1 + len)\n    ret.[len] <- zero\n    for i = 0 to len - 1 do\n        ret.[len - i - 1] <- f arr.JS.[len - i - 1] ret.[len - i]\n    ret.Self\n\n[<Inline>]\nlet Set (arr: _ []) i v =\n    F.SetArray arr i v\n\n[<Name \"sort\">]\nlet Sort<'T when 'T: comparison> (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, i) arr).JS.Sort(fun (x, y) -> compare x y) |> Array.map fst\n\n[<Name \"sortBy\">]\nlet SortBy<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> compare (snd x) (snd y)) |> Array.map fst\n\n[<Name \"sortInPlace\">]\nlet SortInPlace<'T when 'T: comparison> (arr: 'T []) =\n    (mapiInPlace (fun i x -> x, i) arr).JS.Sort(fun (x, y) -> compare x y) |> mapInPlace fst\n\n[<Name \"sortInPlaceBy\">]\nlet SortInPlaceBy<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) =\n    (mapiInPlace (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> compare (snd x) (snd y)) |> mapInPlace fst \n\n[<Name \"sortInPlaceWith\">]\nlet SortInPlaceWith<'T> (comparer: 'T -> 'T -> int) (arr: 'T []) =\n    arr.JS.Sort(fun (x, y) -> comparer x y) |> ignore\n\n[<Name \"sortWith\">]\nlet SortWith<'T> (comparer: 'T -> 'T -> int) (arr: 'T []) : 'T [] =\n    (Array.copy arr).JS.Sort(fun (x, y) -> comparer x y)\n\n[<Name \"sortByDescending\">]\nlet SortByDescending<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> - compare (snd x) (snd y)) |> Array.map fst\n\n[<Name \"sortDescending\">]\nlet SortDescending<'T when 'T: comparison> (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, i) arr).JS.Sort(fun (x, y) -> - compare x y) |> Array.map fst\n\n[<Inline \"$x.slice($start,$start+$length)\">]\nlet private subArray (x: 'T) start length = X<'T>\n\n[<Inline>]\nlet GetSubArray (arr: 'T []) (start: int) (length: int) : 'T []=\n    F.GetArraySub arr start length\n\n[<Direct \"var sum = 0; for (var i = 0; i < $arr.length; i++) sum += $arr[i]; return sum\">]\n[<Name \"sum\">]\nlet Sum (arr: 'T []) : 'T = X<'T>\n\n[<Direct \"var sum = 0; for (var i = 0; i < $arr.length; i++) sum += $f($arr[i]); return sum\">]\n[<Name \"sumBy\">]\nlet SumBy (f: 'T -> 'U) (arr: 'T []) : 'U =  X<'U>\n\n[<Name \"transpose\">]\nlet Transpose (x: 'T[] seq) : 'T[][] =\n    match x with\n    | :? System.Array -> ArrayTranspose (As<'T[][]> x)\n    | _ -> ArrayTranspose (Array.ofSeq x)\n\n[<Inline>]\nlet ToList arr = List.ofArray arr\n\n[<Inline \"$arr\">]\nlet ToSeq (arr: _ []) = arr :> seq<_>\n\n[<Name \"tryFind\">]\nlet TryFind f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        if f arr.JS.[i] then res <- Some arr.JS.[i]\n        i <- i + 1\n    res\n\n[<Inline>]\nlet TryFindBack f (arr: _ []) = ArrayTryFindBack f arr\n\n[<Name \"tryFindIndex\">]\nlet TryFindIndex f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        if f arr.JS.[i] then res <- Some i\n        i <- i + 1\n    res\n\n[<Inline>]\nlet TryFindIndexBack f (arr: _ []) = ArrayTryFindIndexBack f arr\n\n[<Name \"tryHead\">]\nlet TryHead (arr: 'T[]) =\n    if Array.length arr = 0 then None else Some arr.JS.[0]\n\n[<Name \"tryItem\">]\nlet TryItem i (arr: 'T[]) =\n    if Array.length arr <= i || i < 0 then None else Some arr.JS.[i]\n\n[<Name \"tryLast\">]\nlet TryLast (arr: 'T[]) =\n    let len = Array.length arr\n    if len = 0 then None else Some arr.JS.[len - 1]\n\n[<Name \"tryPick\">]\nlet TryPick f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        match f arr.JS.[i] with\n        | Some _ as r -> res <- r\n        | _ -> ()\n        i <- i + 1\n    res\n\n[<Name \"unzip\">]\nlet Unzip<'T1,'T2> (arr: ('T1 * 'T2) []) : 'T1 [] * 'T2 [] =\n    let x : 'T1 [] = [||]\n    let y : 'T2 [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        let (a, b) = arr.JS.[i]\n        push x a\n        push y b\n    (x, y)\n\n[<Name \"unzip3\">]\nlet Unzip3<'T1,'T2,'T3> (arr: ('T1 * 'T2 * 'T3) []) =\n    let x : 'T1 [] = [||]\n    let y : 'T2 [] = [||]\n    let z : 'T3 [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        match arr.JS.[i] with\n        | (a, b, c) ->\n            push x a\n            push y b\n            push z c\n    (x, y, z)\n\n[<Inline>]\n[<Name \"zeroCreate\">]\nlet ZeroCreate<'T> (size: int) =\n    Create size Unchecked.defaultof<'T>\n\n[<Name \"zip\">]\nlet Zip (arr1: 'T1 []) (arr2: 'T2 []) =\n    checkLength arr1 arr2\n    let res = Array.zeroCreate (Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.JS.[i] <- (arr1.JS.[i], arr2.JS.[i])\n    res\n\n[<Name \"zip3\">]\nlet Zip3 (arr1: _ [], arr2: _ [], arr3: _ []) =\n    checkLength arr1 arr2\n    checkLength arr2 arr3\n    let res = Array.zeroCreate (Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.JS.[i] <- (arr1.JS.[i], arr2.JS.[i], arr3.JS.[i])\n    res\n\n[<Name \"chunkBySize\">]\nlet ChunkBySize size array =\n    SeqChunkBySize size (Array.toSeq array)\n    |> Seq.toArray\n\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (a1: 'T []) (a2: 'T []) : int =\n    Seq.compareWith f (Array.toSeq a1) (Array.toSeq a2)\n\n[<Inline>]\nlet CountBy (f: 'T -> 'K) (a: 'T []) : ('K * int) [] =\n    ArrayCountBy f a\n\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (l: 'T []) : 'T [] =\n    Seq.distinct (Array.toSeq l)\n    |> Seq.toArray\n\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (a: 'T []) : 'T [] =\n    Seq.distinctBy f (Array.toSeq a)\n    |> Seq.toArray\n\n[<Name \"except\">]\nlet Except (itemsToExclude: seq<'T>) (a: 'T []) =\n    SeqExcept itemsToExclude (Array.toSeq a)\n    |> Seq.toArray\n\n[<Name \"findBack\">]\nlet FindBack p (s: _ []) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: _ []) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Inline>]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (a: 'T []) : ('K * 'T []) [] =\n    ArrayGroupBy f a\n\n[<Name \"head\">]\nlet Head (arr : 'T []) : 'T =\n    nonEmpty arr\n    arr.JS.[0]\n\n[<Name \"last\">]\nlet Last (arr : 'T []) : 'T =\n    nonEmpty arr\n    arr.JS.[Array.length arr - 1]\n\n[<Name \"map3\">]\nlet Map3 (f: 'T1 -> 'T2 -> 'T3 -> 'T4) (arr1: 'T1 []) (arr2: 'T2 []) (arr3: 'T3 []) : 'T4 [] =\n    checkLength arr1 arr2\n    checkLength arr1 arr3\n    let r = JavaScript.Array<'T4>(Array.length arr3)\n    for i = 0 to Array.length arr3 - 1 do\n        r.[i] <- f arr1.JS.[i] arr2.JS.[i] arr3.JS.[i]\n    r.Self\n\n[<Inline>]\nlet Contains (el: 'T) (a: 'T []) =\n    ArrayContains el a\n\n[<Name \"pairwise\">]\nlet Pairwise (a: 'T []) : ('T * 'T) [] =\n    Seq.pairwise (Array.toSeq a)\n    |> Seq.toArray\n\n[<Name \"replicate\">]\nlet Replicate size value =\n    Array.create size value\n\n[<Name \"indexed\">]\nlet Indexed (ar : 'T []) : (int * 'T) [] =\n    Array.mapi (fun a b -> (a, b)) ar\n\n[<Inline>]\nlet Singleton<'T> (x: 'T) =\n    [| x |]\n\n[<Name \"skip\">]\nlet Skip<'T> i (ar : 'T []) =\n    if i < 0 then InputMustBeNonNegative() else\n    if i > Array.length ar then InsufficientElements() else\n    ar.JS.Slice(i)\n\n[<Name \"skipWhile\">]\nlet SkipWhile<'T> (predicate : 'T -> bool) (ar : 'T []) : 'T [] =\n    let len = Array.length ar\n    let mutable i = 0\n    while i < len && predicate ar.JS.[i] do\n        i <- i + 1\n    ar.JS.Slice(i)\n\n[<Name \"tail\">]\nlet Tail<'T> (ar : 'T []) : 'T [] =\n    Skip 1 ar\n\n[<Name \"take\">]\nlet Take<'T> n (ar: 'T []) =\n    if n < 0 then InputMustBeNonNegative() else\n    if n > Array.length ar then InsufficientElements() else\n    ar.JS.Slice(0, n)\n\n[<Name \"takeWhile\">]\nlet TakeWhile<'T> (predicate : 'T -> bool) (ar: 'T []) =\n    let len = Array.length ar\n    let mutable i = 0\n    while i < len && predicate ar.JS.[i] do\n        i <- i + 1\n    ar.JS.Slice(0, i)\n\n[<Inline>]\nlet Truncate<'T> n (ar: 'T []) =\n    ar.JS.Slice(0, n)\n\n[<Name \"exactlyOne\">]\nlet ExactlyOne (ar : 'T []) =\n    if Array.length ar = 1 then\n        ar.JS.[0]\n    else\n        failwith \"The input does not have precisely one element.\"\n\n[<Name \"unfold\">]\nlet Unfold<'T, 'S> (f: 'S -> option<'T * 'S>) (s: 'S) : 'T [] =\n    Seq.unfold f s\n    |> Seq.toArray\n\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : 'T []) : 'T [] =\n    Filter predicate s\n\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: 'T []) : array<'T []> =\n    Seq.windowed windowSize (Array.toSeq s)\n    |> Seq.toArray\n\n[<Name \"splitAt\">]\nlet SplitAt (n: int) (ar: 'T []) =\n    Take n ar, Skip n ar\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Arrays2D\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.Array2DModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.Array2DModuleProxy\n\nopen WebSharper.JavaScript\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<Inline>]\nlet Length1 (arr: 'T[,]) = F.GetArray2DLength1 arr\n\n[<Inline>]\nlet Length2 (arr: 'T[,]) = F.GetArray2DLength2 arr\n\n[<Inline>]\nlet Get (array: 'T[,]) (n:int) (m:int) = F.GetArray2D array n m\n\n[<Inline>]\nlet Set (array: 'T[,]) (n:int) (m:int) (x:'T) = F.SetArray2D array n m x\n\n[<Inline>]\nlet ZeroCreate (n:int) (m:int) = F.Array2DZeroCreate n m\n    \n[<Inline>]\nlet Create n m (x:'T) =\n    let arr = As<'T[,]>(Array.init n (fun _ -> Array.create m x))\n    arr?dims <- 2\n    arr\n     \n[<Name \"init\">]\nlet Initialize n m f = \n    let array = ZeroCreate n m : 'T[,]  \n    for i = 0 to n - 1 do \n        for j = 0 to m - 1 do \n            array.[i, j] <- f i j\n    array\n\n[<Name \"iter\">]\nlet Iterate f array = \n    let count1 = F.GetArray2DLength1 array \n    let count2 = F.GetArray2DLength2 array \n    for i = 0 to count1 - 1 do \n      for j = 0 to count2 - 1 do \n        f array.[i,j]\n\n[<Name \"iteri\">]\nlet IterateIndexed (f : int -> int -> 'T -> unit) (array:'T[,]) =\n    let count1 = F.GetArray2DLength1 array \n    let count2 = F.GetArray2DLength2 array \n    for i = 0 to count1 - 1 do \n      for j = 0 to count2 - 1 do \n        f i j array.[i,j]\n\n[<Name \"map\">]\nlet Map f array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> f array.[i,j])\n\n[<Name \"mapi\">]\nlet MapIndexed f array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> f i j array.[i,j])\n\n[<Name \"copy\">]\nlet Copy array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> array.[i,j])\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\ntype private CT  = System.Threading.CancellationToken\ntype private CTS  = System.Threading.CancellationTokenSource\ntype private CTR  = System.Threading.CancellationTokenRegistration\ntype private OCE = System.OperationCanceledException\nmodule C = WebSharper.Concurrency\n\n[<Proxy(typeof<Async>)>]\ntype private AsyncProxy =\n\n    [<Inline>]\n    static member Catch(a: Async<'T>) : Async<Choice<'T,exn>>  =\n        As (C.Catch (As a))\n\n    [<Inline>]\n    static member Start(computation: Async<unit>, ?t: CT) : unit =\n        C.Start (As computation, As t)\n\n    [<Inline>]\n    static member Ignore (computation: Async<'T>) : Async<unit> =\n        As (C.Ignore (As computation))\n\n    [<Inline>]\n    static member Sleep milliseconds : Async<unit> =\n        As (C.Sleep milliseconds)\n\n    [<Inline>]\n    static member StartWithContinuations(op: Async<'T>,\n                                         c1: 'T -> unit,\n                                         c2: exn -> unit,\n                                         c3: OCE -> unit,\n                                         ?t: CT) : unit =\n        C.StartWithContinuations (As op, c1, c2, c3, As t)\n\n    [<Inline>]\n    static member FromContinuations(callback: (('T -> unit) *\n                                               (exn -> unit) *\n                                               (OCE -> unit)) -> unit)\n                                    : Async<'T> =\n        As (C.FromContinuations callback)\n\n    [<Inline>]\n    static member AwaitEvent(ev: IEvent<'D,'T>, ?t: unit -> unit) : Async<'T> =\n        As (C.AwaitEvent (As ev, t))\n\n    [<Inline>]\n    static member AwaitTask(t : System.Threading.Tasks.Task) : Async<unit> =\n        As (C.AwaitTask t)\n\n    [<Inline>]\n    static member AwaitTask(t : System.Threading.Tasks.Task<'T>) : Async<'T> =\n        As (C.AwaitTask1 t)\n\n    [<Inline>]\n    static member StartChild(a: Async<'T>, ?timeOut: int) : Async<Async<'T>> =\n        As (C.StartChild (As a, timeOut))\n\n    [<Inline>]\n    static member StartChildAsTask(a: Async<'T>, ?opt :System.Threading.Tasks.TaskCreationOptions) \n        : Async<System.Threading.Tasks.Task<'T>> =\n        As (C.StartChildAsTask (As a))\n\n    [<Inline>]\n    static member Parallel(cs: seq<Async<'T>>) : Async<'T []> =\n        As (C.Parallel (As cs))\n\n    [<Inline>]\n    static member StartImmediate(c: Async<unit>, ?t: CT) : unit =\n        C.StartImmediate (As c, As t)\n\n    [<Inline>]\n    static member StartAsTask (a: Async<'T>, ?opt :System.Threading.Tasks.TaskCreationOptions, ?t: CT) \n        : System.Threading.Tasks.Task<'T> =\n        C.StartAsTask(As a, As t)        \n\n    [<Inline>]\n    static member StartImmediateAsTask (a: Async<'T>, ?t: CT) \n        : System.Threading.Tasks.Task<'T> =\n        C.StartImmediateAsTask(As a, As t)        \n\n    [<Inline>]\n    static member DefaultCancellationToken : CT =\n        As !C.defCTS\n\n    [<Inline>]\n    static member CancelDefaultToken() : unit =\n        let cts = !C.defCTS\n        C.defCTS := new CTS()\n        cts.Cancel()    \n\n    [<Inline>]\n    static member CancellationToken : Async<CT> =\n        As C.GetCT\n\n    [<Inline>]\n    static member OnCancel(action: unit -> unit) : Async<System.IDisposable> =\n        As (C.OnCancel action)\n    \n    [<Inline>]\n    static member TryCancelled(p: Async<'T>, f: OCE -> unit) : Async<'T> =\n        As (C.TryCancelled(As p, f))\n\n[<Proxy(typeof<CT>)>]\ntype private CancellationTokenProxy =\n    [<Inline \"$this.c\">]\n    member this.IsCancellationRequested = X<bool>\n\n    [<Inline>]\n    member this.Register(callback: System.Action) =\n        As<CTR> (C.Register (As this) callback.Invoke)\n\n    [<Inline>]\n    member this.ThrowIfCancellationRequested() =\n        if this.IsCancellationRequested then raise (OCE(As<CT> this)) \n\n    [<Inline>]\n    static member None = As<CT> C.noneCT\n        \n[<Proxy(typeof<CTS>)>]\n[<Name \"CancellationTokenSource\">]\ntype private CancellationTokenSourceProxy () =\n    let mutable c = false\n\n    let mutable pending = None\n\n    let r = [||] : (unit -> unit)[]\n\n    [<Inline>]\n    new (delay: int) as this = \n        CancellationTokenSourceProxy() then this.CancelAfter(delay)\n\n    [<Inline>]\n    new (delay: System.TimeSpan) as this = \n        CancellationTokenSourceProxy() then this.CancelAfter(delay)\n\n    [<Inline>]\n    member this.IsCancellationRequested = c\n\n    member this.Token \n        with [<Inline \"$this\">] get() = X<CT>\n\n    member this.Cancel() =\n        if not c then\n            c <- true\n            let errors = \n                r |> Array.choose (fun a -> \n                    try a()\n                        None\n                    with e -> Some e\n                )\n            if errors.Length > 0 then\n                raise (System.AggregateException(errors))    \n            \n    member this.Cancel(throwOnFirstException) =\n        if not throwOnFirstException then\n            this.Cancel()\n        else\n            if not c then\n                c <- true\n                r |> Array.iter (fun a -> a())   \n \n    member this.CancelAfter(delay: int) =\n        if not c then\n            pending |> Option.iter JS.ClearTimeout\n            pending <- Some <| JS.SetTimeout this.Cancel delay\n\n    [<Inline>]\n    member this.CancelAfter(delay: System.TimeSpan) = this.CancelAfter(As<int> delay)\n\n    static member CreateLinkedTokenSource(tokens: CT[]) =\n        let cts = new CTS()\n        tokens |> Array.iter (fun t -> t.Register(fun () -> cts.Cancel()) |> ignore)\n        cts\n\n    static member CreateLinkedTokenSource(t1: CT, t2: CT) =\n        CancellationTokenSourceProxy.CreateLinkedTokenSource [| t1; t2 |]\n\n[<Proxy(typeof<System.Threading.CancellationTokenRegistration>)>]\ntype private CancellationTokenRegistrationProxy =\n    [<Inline>]\n    member this.Dispose() = (this :> System.IDisposable).Dispose() \n    \n    interface System.IDisposable with\n        [<JavaScript false>]\n        member this.Dispose() = ()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Name \"Char\">]\n[<Proxy(typeof<System.Char>)>]\ntype private CharProxy =\n\n    [<Inline \"'\\u0000'\">]\n    new () = {}\n\n    [<Inline>]\n    member this.CompareTo(s: char) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    member this.CompareTo(s: obj) =\n        Unchecked.compare (this :> obj) s\n\n    [<Inline \"$this == $s\">]\n    member this.Equals(s: char) = X<bool>\n\n    [<Inline \"$this === $s\">]\n    override this.Equals(s: obj) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    static member GetNumericValue(c: char) : float =\n        if c >= '0' && c <= '9' then float c - float '0' else -1.\n\n    [<Inline>]\n    static member GetNumericValue(s: string, i: int) = CharProxy.GetNumericValue(s.[i])\n\n    static member IsControl(c: char) : bool =\n        c >= '\\u0000' && c <= '\\u001f'\n        || c >= '\\u0080' && c <= '\\u009f'\n\n    [<Inline>]\n    static member IsControl(s: string, i: int) = CharProxy.IsControl(s.[i])\n\n    static member IsDigit(c: char) : bool =\n        c >= '0' && c <= '9'\n\n    [<Inline>]\n    static member IsDigit(s: string, i: int) = CharProxy.IsDigit(s.[i])\n\n    static member IsLetter(c: char) : bool =\n        c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'\n\n    [<Inline>]\n    static member IsLetter(s: string, i: int) = CharProxy.IsLetter(s.[i])\n\n    static member IsLetterOrDigit(c: char) : bool =\n        System.Char.IsLetter c || System.Char.IsDigit c\n\n    [<Inline>]\n    static member IsLetterOrDigit(s: string, i: int) = CharProxy.IsLetterOrDigit(s.[i])\n\n    static member IsLower(c: char) : bool =\n        c >= 'a' && c <= 'z'\n\n    [<Inline>]\n    static member IsLower(s: string, i: int) = CharProxy.IsLower(s.[i])\n\n    static member IsUpper(c: char) : bool =\n        c >= 'A' && c <= 'Z'\n\n    [<Inline>]\n    static member IsUpper(s: string, i: int) = CharProxy.IsUpper(s.[i])\n\n    [<Direct @\"$c.match(/\\s/) !== null\">]\n    static member IsWhiteSpace(c: char) = X<bool>\n\n    [<Inline>]\n    static member IsWhiteSpace(s: string, i: int) = CharProxy.IsWhiteSpace(s.[i])\n\n    static member Parse(s: string) =\n        if s.Length = 1 then As<char> s else\n            failwith \"String must be exactly one character long.\"\n\n    [<Inline \"String.fromCharCode($x.charCodeAt() + $y.charCodeAt())\">]\n    static member (+) (x: char, y: char) : char = x + y\n\n    [<Inline \"$this\">]\n    override this.ToString() = X<string>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Util\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Control.CommonExtensions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.CommonExtensionsProxy\n\nopen WebSharper.JavaScript\n\nlet observer (h: 'T -> unit) : System.IObserver<'T> =\n    { new System.IObserver<'T> with \n        member this.OnCompleted() = ()\n        member this.OnError _ = ()\n        member this.OnNext args = h args\n    }\n\n[<Inline>]\nlet AddToObservable<'T> (event: System.IObservable<'T>) (h: 'T -> unit) =\n    event.Subscribe(observer h) |> ignore\n\n[<Inline>]\nlet SubscribeToObservable<'T> (event: System.IObservable<'T>) (h: 'T -> unit) =\n    event.Subscribe(observer h)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nopen System.Runtime.InteropServices\nopen System\n\ntype private D = System.DateTime\ntype private K = System.DateTimeKind\ntype internal TS = System.TimeSpan\ntype private DO = System.DateTimeOffset\n\n[<JavaScript>]\n[<Name \"DateUtil\">]\nmodule private DateTimeHelpers =\n    let DatePortion (d: int) =\n        let e = Date(d)\n        Date(       \n            e.GetFullYear(),\n            e.GetMonth(),\n            e.GetDate()\n        ).GetTime()\n        |> As<D>        \n\n    let TimePortion (d: int) =\n        let e = Date(d)\n        TS(\n            0,\n            e.GetHours(), \n            e.GetMinutes(), \n            e.GetSeconds(), \n            e.GetMilliseconds()\n        )        \n        |> As<TS>        \n\n    let AddYears(d: int, years) =\n        let e = Date(d)\n        Date(   \n            e.GetFullYear() + years,\n            e.GetMonth(),\n            e.GetDate(),\n            e.GetHours(),\n            e.GetMinutes(),\n            e.GetSeconds(),\n            e.GetMilliseconds()\n        ).GetTime()\n        |> As<D>        \n\n    let AddMonths(d: int, months: int) =\n        let e = Date(d)\n        Date(   \n            e.GetFullYear(),\n            e.GetMonth() + months,\n            e.GetDate(),\n            e.GetHours(),\n            e.GetMinutes(),\n            e.GetSeconds(),\n            e.GetMilliseconds()\n        ).GetTime()    \n        |> As<D>        \n\n    let TryParse (s: string) =\n        let d = Date.Parse(s)   \n        if JS.IsNaN(d) then\n            None\n        else Some d\n\n    let Parse (s: string) =\n        match TryParse s with\n        | Some d -> d\n        | _ ->\n            failwith \"Failed to parse date string.\"\n\n    [<Direct \"(new Date($d)).toLocaleDateString({}, {year: 'numeric', month: 'long', day: 'numeric', weekday: 'long'})\">]\n    let LongDate (d: obj) = X<string>\n     \n    [<Direct \"(new Date($d)).toLocaleTimeString({}, {hour: '2-digit', minute: '2-digit', hour12: false})\">]\n    let ShortTime (d: obj) = X<string>\n\n    [<Direct \"(new Date($d)).toLocaleTimeString({}, {hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false})\">]\n    let LongTime (d: obj) = X<string>\n                \n// DateTime is represented as an UTC epoch for remoting purposes.\n// Properties for getting sub-dates/times like Day or Hour convert it to local time on the client for easier display purposes.\n// This is inconsistent, but covers most common uses.\n// If you need UTC time details, use .JS and its UTC methods.\n[<Proxy(typeof<System.DateTime>)>]\ntype private DateTimeProxy =\n    [<Inline \"0\">]\n    new () = {}\n\n    [<Inline \"new Date($y,$mo-1,$d).getTime()\">]\n    new (y: int, mo: int, d: int) = {}\n\n    [<Inline \"new Date($y,$mo-1,$d,$h,$m,$s).getTime()\">]\n    new (y: int, mo: int, d: int, h: int, m: int, s: int) = {}\n\n    [<Inline \"new Date($y,$mo-1,$d,$h,$m,$s,$ms).getTime()\">]\n    new (y: int, mo: int, d: int, h: int, m: int, s: int, ms: int) = {}\n    \n    static member Now\n        with [<Inline \"Date.now()\">] get() = X<D>\n\n    static member UtcNow\n        with [<Inline \"Date.now()\">] get() = X<D>\n    \n    [<Inline \"1\">]\n    member this.Kind = X<System.DateTimeKind>\n\n    member this.Date \n        with [<Inline; JavaScript>] get() : D = DateTimeHelpers.DatePortion(As this)\n\n    static member Today\n        with [<Inline; JavaScript>] get() = DateTimeProxy.Now.Date  \n\n    member this.TimeOfDay \n        with [<Inline; JavaScript>] get() = DateTimeHelpers.TimePortion(As this)\n\n    member this.Year\n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetFullYear()\n\n    member this.Month \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetMonth() + 1\n\n    member this.Day \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetDate()\n\n    member this.Hour \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetHours()\n                                                  \n    member this.Minute \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetMinutes()\n    \n    member this.Second \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetSeconds()\n\n    member this.Millisecond \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetMilliseconds()\n    \n    member this.DayOfWeek \n        with [<Inline; JavaScript>] get() = As<System.DayOfWeek>(Date(As<int> this).GetDay())\n\n    member this.Ticks\n        with [<Inline \"$this * 1E4\">] get() = X<int64>\n\n    [<Inline \"$this + $t\">]\n    member this.Add(t: TS) = X<D>\n                            \n    [<Inline \"$this - $t\">]\n    member this.Subtract(t: TS) = X<D>\n\n    [<Inline \"$this - $d\">]\n    member this.Subtract(d: D) = X<TS>\n\n    [<Inline; JavaScript>]\n    member this.AddYears(years: int) : D = DateTimeHelpers.AddYears(As this, years)\n\n    [<Inline; JavaScript>]\n    member this.AddMonths(months: int) : D = DateTimeHelpers.AddMonths(As this, months)\n\n    [<Inline; JavaScript>]\n    member this.AddDays(days: float) : D =\n        this.Add(TS.FromDays days)\n\n    [<Inline; JavaScript>]\n    member this.AddHours(hours: float) : D =\n        this.Add(TS.FromHours hours)\n\n    [<Inline; JavaScript>]\n    member this.AddMinutes(minutes: float) : D =\n        this.Add (TS.FromMinutes minutes)\n\n    [<Inline; JavaScript>]\n    member this.AddSeconds(seconds: float) : D =\n        this.Add (TS.FromSeconds seconds)\n\n    [<Inline; JavaScript>]\n    member this.AddMilliseconds(msec: float) : D =\n        this.Add (TS.FromMilliseconds msec)\n\n    [<Inline; JavaScript>]\n    member this.AddTicks(ticks: int64) : D =\n        this.Add (TS.FromTicks ticks)\n\n    [<Inline \"new Date($this).toLocaleDateString()\">]\n    member this.ToShortDateString() = X<string>\n    \n    [<Inline; JavaScript>]\n    member this.ToLongDateString() = DateTimeHelpers.LongDate(this)\n    \n    [<Inline; JavaScript>]\n    member this.ToShortTimeString() = DateTimeHelpers.ShortTime(this)\n\n    [<Inline; JavaScript>]\n    member this.ToLongTimeString() = DateTimeHelpers.LongTime(this)\n\n    [<Inline; JavaScript>]\n    static member Parse(s) = As<D>(DateTimeHelpers.Parse(s))\n\n    [<Inline; JavaScript>]\n    static member TryParse(s, [<Out>] res: byref<D>) =\n        match DateTimeHelpers.TryParse s with\n        | Some d ->\n            res <- As<D> d   \n            true\n        | _ -> false    \n\n    static member MaxValue\n        with [<Inline \"8640000000000000\">] get () = X<int>\n\n    static member MinValue\n        with [<Inline \"-8640000000000000\">] get () = X<int>\n\n    [<Inline \"$a + $b\">]\n    static member (+) (a: D, b: TS) = X<D>\n\n    [<Inline \"$a - $b\">]\n    static member (-) (a: D, b: TS) = X<D>\n\n    [<Inline \"$a - $b\">]\n    static member (-) (a: D, b: D) = X<TS>\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality (a: D, b: D) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality (a: D, b: D) = X<bool>\n\n    [<Inline \"$a > $b\">]\n    static member op_GreaterThan (a: D, b: D) = X<bool>\n\n    [<Inline \"$a < $b\">]\n    static member op_LessThan (a: D, b: D) = X<bool>\n\n    [<Inline \"$a >= $b\">]\n    static member op_GreaterThanOrEqual (a: D, b: D) = X<bool>\n\n    [<Inline \"$a <= $b\">]\n    static member op_LessThanOrEqual (a: D, b: D) = X<bool>\n\n    [<Inline \"new Date($y, $mo, 0).getDate()\">]\n    static member DaysInMonth (y: int, mo: int) = X<int>\n\n    [<Inline \"new Date($y, 1, 29).getDate() == 29\">]\n    static member IsLeapYear (y: int) = X<bool>\n\n[<Proxy(typeof<System.DateTimeOffset>)>]\n[<Prototype false>]\n[<Name \"DateTimeOffset\">]\n// \"d\" contains UTC epoch time\n// \"o\" contains time zone offset in minutes\ntype private DateTimeOffsetProxy [<Inline \"{d: $d, o: $o}\">] (d: D, o: int) =\n\n    [<Inline>]\n    new (d: D, o: TS) = DateTimeOffsetProxy(d, int o.TotalMinutes) \n\n    [<Inline>]\n    new (d: D) = DateTimeOffsetProxy(d, 0) \n\n    member this.DateTime = d\n\n    [<Inline \"$this.o * 60000\">]\n    member this.Offset = X<TS>\n\n    [<Direct \"var d = new Date(); return { d: d.getTime(), o: -d.getTimezoneOffset() } \">]\n    static member Now = X<DO>\n\n    [<Inline \"{ d: Date.now(), o: 0 }\">]\n    static member UtcNow = X<DO>\n        \n    [<Inline>]\n    member this.ToLocalTime() =\n        DO(d, As<TS>(Date().GetTimezoneOffset()))\n        \n    [<Inline>]\n    member this.ToUniversalTime() =\n        DO(d, TS.Zero)\n\n    [<Inline>]\n    member this.UtcDateTime = d\n\n    [<Inline>]\n    member this.TimeOfDay = d.TimeOfDay\n\n    [<Inline>]\n    member this.Year = d.Year\n\n    [<Inline>]\n    member this.Month = d.Month\n\n    [<Inline>]\n    member this.Day = d.Day\n\n    [<Inline>]\n    member this.Hour = d.Hour\n                                                  \n    [<Inline>]\n    member this.Minute = d.Minute\n    \n    [<Inline>]\n    member this.Second = d.Second\n\n    [<Inline>]\n    member this.Millisecond = d.Millisecond\n    \n    [<Inline>]\n    member this.DayOfWeek = d.DayOfWeek\n\n    [<Inline>]\n    member this.Ticks = d.Ticks\n\n    [<Inline>]\n    member this.Add(t: TS) = DateTimeOffsetProxy(d.Add(t), o)\n                            \n    [<Inline>]\n    member this.Subtract(t: TS) = DateTimeOffsetProxy(d.Subtract(t), o)\n\n    [<Inline>]\n    member this.Subtract(o: DO) = d.Subtract(o?d: D)\n\n    [<Inline>]\n    member this.AddYears(years: int) = DateTimeOffsetProxy(d.AddYears(years), o)\n\n    [<Inline>]\n    member this.AddMonths(months: int) = DateTimeOffsetProxy(d.AddMonths(months), o)\n\n    [<Inline>]\n    member this.AddDays(days: float) = DateTimeOffsetProxy(d.AddDays(days), o)\n\n    [<Inline>]\n    member this.AddHours(hours: float) = DateTimeOffsetProxy(d.AddHours(hours), o)\n\n    [<Inline>]\n    member this.AddMinutes(minutes: float) = DateTimeOffsetProxy(d.AddMinutes(minutes), o)\n\n    [<Inline>]\n    member this.AddSeconds(seconds: float) = DateTimeOffsetProxy(d.AddSeconds(seconds), o)\n\n    [<Inline>]\n    member this.AddMilliseconds(msec: float) = DateTimeOffsetProxy(d.AddMilliseconds(msec), o)\n\n    [<Inline>]\n    member this.AddTicks(ticks: int64) = DateTimeOffsetProxy(d.AddTicks(ticks), o)\n\n    [<Inline>]\n    static member (+) (a: DO, b: TS) = a.Add(b)\n\n    [<Inline>]\n    static member (-) (a: DO, b: TS) = a.Subtract(b)\n\n    [<Inline>]\n    static member (-) (a: DO, b: DO) = a.Subtract(b)\n\n    [<Inline \"$a.d == $b.d\">]\n    static member op_Equality (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d != $b.d\">]\n    static member op_Inequality (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d > $b.d\">]\n    static member op_GreaterThan (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d < $b.d\">]\n    static member op_LessThan (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d >= $b.d\">]\n    static member op_GreaterThanOrEqual (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d <= $b.d\">]\n    static member op_LessThanOrEqual (a: DO, b: DO) = X<bool>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen WebSharper.JavaScript\n\n[<Name \"WebSharper.Delegate\">]\n[<Proxy(typeof<Delegate>)>]\ntype internal DelegateProxy =\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    override this.Equals(x: obj) = X<bool>\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Equality(a: Delegate, b: Delegate) = X<bool>\n\n    [<Inline \"!$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Inequality(a: Delegate, b: Delegate) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Inline \"$this.apply(null, $args)\">]\n    member this.DynamicInvoke(args: obj[]) = X<obj>\n\n    [<Direct \"$0.$Invokes || [$0]\">]\n    static member InvocationList(del: Delegate) = X<Delegate[]> \n    [<Inline>]\n    member this.GetInvocationList() : Delegate[] =\n        DelegateProxy.InvocationList (As this)\n    \n    static member DelegateTarget(del) =\n        if (JS.Not del) then null\n        elif (JS.In \"$Target\" del) then del?``$Target``\n        elif (JS.In \"$Invokes\" del) then \n            let inv = del?``$Invokes`` : (_ * _)[]\n            snd inv.[inv.Length - 1]\n        else null\n\n    [<Inline>]\n    member this.Target =\n        DelegateProxy.DelegateTarget this\n\n    [<Inline \"$wsruntime.CreateDelegate($0)\">]\n    static member JSCreateDelegate(invokes: Delegate[]) = X<Delegate>\n\n    [<Inline \"$wsruntime.CombineDelegates([$0, $1])\">]\n    static member Combine(a: Delegate, b: Delegate) = X<Delegate>\n\n    [<Inline \"$wsruntime.CombineDelegates($0)\">]\n    static member Combine(delegates: Delegate[]) = X<Delegate>\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    static member DelegateEqual(d1: Delegate, d2: Delegate) = X<bool>\n                           \n    static member Remove(source:Delegate, value: Delegate) =\n        let sourceInv = source.GetInvocationList()\n        if value.GetInvocationList().Length > 1 then\n            failwith \"TODO: Remove multicast delegates\"\n        let resInv = [||]\n        let mutable found = false\n        for i = sourceInv.Length - 1 downto 0 do\n            let it = sourceInv.[i]\n            if not found && DelegateProxy.DelegateEqual(it, value) then\n                found <- true\n            else\n                resInv.JS.Unshift(it) |> ignore\n        DelegateProxy.JSCreateDelegate(resInv)         \n\n    static member RemoveAll(source:Delegate, value: Delegate) =\n        let sourceInv = source.GetInvocationList()\n        if value.GetInvocationList().Length > 1 then\n            failwith \"TODO: Remove multicast delegates\"\n        DelegateProxy.JSCreateDelegate(sourceInv |> Array.filter (fun i -> not (i.Equals(value))))         \n\n[<Proxy(typeof<MulticastDelegate>)>]\ntype internal MulticastDelegateProxy =\n    \n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    override this.Equals(x: obj) = X<bool>\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Equality(a: MulticastDelegate, b: MulticastDelegate) = X<bool>\n\n    [<Inline \"!$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Inequality(a: MulticastDelegate, b: MulticastDelegate) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Inline>]\n    member this.GetInvocationList() : Delegate[] =\n        DelegateProxy.InvocationList (As this)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Collections\nopen System.Collections.Generic\n\ntype private KVP<'K,'V> = KeyValuePair<'K,'V>\ntype private D<'K,'V> = Dictionary<'K,'V>\n\n[<JavaScript>]\nmodule internal DictionaryUtil =\n\n    let notPresent () =\n        failwith \"The given key was not present in the dictionary.\"\n\n    let alreadyAdded () =\n        failwith \"An item with the same key has already been added.\"\n\n    let equals (c: IEqualityComparer<'T>) =\n        FuncWithArgs(fun (x, y) -> c.Equals(x, y))\n\n    [<Inline>]\n    let genEquals<'T when 'T : equality> () = \n        FuncWithArgs(fun (x :'T, y) -> x = y)\n\n    let getHashCode (c: IEqualityComparer<'T>) x =\n        c.GetHashCode x\n\nopen DictionaryUtil\nopen System.Runtime.InteropServices\n\n// not really used, a sequence enumerator is cast to this type instead\n// proxy is needed so calls against it compile\n// TODO: lazy iterating\n[<Proxy(typeof<D<_,_>.KeyCollection.Enumerator>)>]\n[<Stub>]\ntype private KeyCollectionEnumeratorProxy<'K,'V> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<'K> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n// not really used, a sequence enumerator is cast to this type instead\n// proxy is needed so calls against it compile\n// TODO: lazy iterating\n[<Proxy(typeof<D<_,_>.ValueCollection.Enumerator>)>]\n[<Stub>]\ntype private ValueCollectionEnumeratorProxy<'K,'V> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<'V> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n[<Name \"WebSharper.Collections.KeyCollection\">]\n[<Proxy(typeof<D<_,_>.KeyCollection>)>]\ntype private KeyCollectionProxy<'K,'V> (d: D<'K,'V>) =\n    member this.Count = d.Count \n\n    member this.GetEnumerator() =\n        As<D<'K,'V>.KeyCollection.Enumerator>(\n            (d |> Seq.map(fun kvp -> kvp.Key)).GetEnumerator())\n            \n    interface IEnumerable<'K> with\n        member this.GetEnumerator() = As<IEnumerator<'K>>(this.GetEnumerator())\n        member this.GetEnumerator() = As<IEnumerator>(this.GetEnumerator())\n\n[<Name \"WebSharper.Collections.ValueCollection\">]\n[<Proxy(typeof<D<_,_>.ValueCollection>)>]\ntype private ValueCollectionProxy<'K,'V> (d: D<'K,'V>) =\n    member this.Count = d.Count \n\n    member this.GetEnumerator() =\n        As<D<'K,'V>.ValueCollection.Enumerator>(\n            (d |> Seq.map(fun kvp -> kvp.Value)).GetEnumerator())\n            \n    interface IEnumerable<'V> with\n        member this.GetEnumerator() = As<IEnumerator<'V>>(this.GetEnumerator())\n        member this.GetEnumerator() = As<IEnumerator>(this.GetEnumerator())\n\n[<Proxy(typeof<D<_,_>.Enumerator>)>]\n[<Stub>]\ntype private DictionaryEnumeratorProxy<'K,'V> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<KVP<'K,'V>> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n/// Implements a proxy for the .NET dictionary.\n[<Name \"WebSharper.Collections.Dictionary\">]\n[<Proxy(typeof<D<_,_>>)>]\ntype internal Dictionary<'K,'V when 'K : equality>\n\n    private (init   : seq<KVP<'K,'V>>,\n             equals : FuncWithArgs<'K * 'K, bool>,\n             hash   : 'K -> int) =\n\n        let mutable count = 0\n        let mutable data  = As<Array<Array<KVP<'K, 'V>>>> [||]\n\n        let get k =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                notPresent()\n            else\n                d.Self |> Array.pick (fun (KeyValue(dk, v)) -> \n                    if equals.Call(dk, k) then Some v else None\n                ) \n\n        let set k v =\n            let h = hash k\n            let d = data.[h]\n            if d ==.null then\n                count <- count + 1\n                data.[h] <- Array(KVP(k, v))\n            else\n                match d.Self |> Array.tryFindIndex (fun (KeyValue(dk, _)) -> equals.Call(dk, k)) with\n                | Some i ->\n                    d.[i] <- KVP(k, v) \n                | None ->\n                    count <- count + 1\n                    d.Push(KVP(k, v)) |> ignore\n                    \n        let add k v =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                count <- count + 1\n                data.[h] <- Array(KVP(k, v))\n            else\n                if d.Self |> Array.exists (fun (KeyValue(dk, _)) -> equals.Call(dk, k)) then\n                    alreadyAdded()                    \n                count <- count + 1\n                d.Push(KVP(k, v)) |> ignore\n                    \n        let remove k =\n            let h = hash k \n            let d = data.[h]\n            if d ==. null then\n                false\n            else\n                let r = d.Self |> Array.filter (fun (KeyValue(dk, _)) -> not (equals.Call(dk, k)))\n                if r.Length < d.Length then                  \n                    count <- count - 1\n                    data.[h] <- r.JS\n                    true\n                else\n                    false\n\n        do for x in init do\n            set x.Key x.Value\n\n        new () = new Dictionary<'K,'V>([||], genEquals<'K>(), hash)\n\n        new (capacity: int) = new Dictionary<'K,'V>()\n\n        new (comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>([||], equals comparer, getHashCode comparer)\n\n        new (capacity: int, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(comparer)\n\n        new (dictionary: IDictionary<'K,'V>) =\n            new Dictionary<'K,'V>(dictionary, genEquals<'K>(), hash)\n\n        new (dictionary: IDictionary<'K,'V>, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(\n                dictionary,\n                equals comparer,\n                getHashCode comparer\n            )\n\n        member this.Add(k: 'K, v: 'V) =\n            add k v\n\n        member this.Clear() =\n            data <- Array()\n            count <- 0\n\n        member this.ContainsKey(k: 'K) =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                false\n            else\n                d.Self |> Array.exists (fun (KeyValue(dk, _)) -> \n                    equals.Call(dk, k)\n                ) \n\n        member this.Count with [<Inline>] get () = count\n\n        member this.Item\n            with get (k: 'K) : 'V = get k\n            and set (k: 'K) (v: 'V) = set k v\n\n        member this.GetEnumerator() = As<D<'K,'V>.Enumerator> ((this :> System.Collections.IEnumerable).GetEnumerator())\n\n        interface System.Collections.IEnumerable with\n            member this.GetEnumerator() = \n                let s = JS.GetFieldValues data\n                (As<KeyValuePair<'K,'V>[][]> s |> Array.concat).GetEnumerator()\n            \n        interface IEnumerable<KeyValuePair<'K,'V>> with\n            member this.GetEnumerator() = As<IEnumerator<KeyValuePair<'K,'V>>> ((this :> System.Collections.IEnumerable).GetEnumerator())\n\n        member this.Remove(k: 'K) =\n            remove k\n\n        member this.TryGetValue(k: 'K, [<Out>] res : byref<'V>) =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                false\n            else\n                let v =\n                    d.Self |> Array.tryPick (fun (KeyValue(dk, v)) -> \n                        if equals.Call(dk, k) then Some v else None\n                    ) \n                match v with \n                | Some v -> \n                    res <- v\n                    true\n                | _ -> false\n\n        member this.Values =\n            As<D<'K,'V>.ValueCollection>(ValueCollectionProxy(As<D<'K,'V>>this))\n\n        member this.Keys =\n            As<D<'K,'V>.KeyCollection>(KeyCollectionProxy(As<D<'K,'V>>this))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nmodule Exception =\n    let withInner (msg, inner) =\n        let e = Error(msg)\n        e?inner <- inner\n        e\n\n[<Name [| \"Error\" |]>]\n[<Proxy(typeof<System.Exception>)>]\ntype private ExceptionProxy =\n    [<Inline \"new Error()\">]\n    new () = { }\n\n    [<Inline \"new Error($message)\">]\n    new (message: string) = { }\n\n    [<Inline>]\n    static member CtorProxy (message: string, inner: exn) = Exception.withInner (message, inner)\n\n    member this.Message with [<Inline \"$this.message\">] get () = X<string>\n    member this.InnerException with [<Inline \"$this.inner\">] get () = X<System.Exception>\n    member this.StackTrace with [<Inline \"$this.stack\">] get () = X<string>\n\n[<Proxy(typeof<MatchFailureException>)>]\n[<Name \"MatchFailureException\">]\ntype private MatchFailureExceptionProxy (message: string, line: int, column: int) =\n    inherit exn(message + \" at \" + string line + \":\" + string column)\n\n[<Proxy(typeof<System.IndexOutOfRangeException>)>]\n[<Name \"IndexOutOfRangeException\">]\ntype private IndexOutOfRangeExceptionProxy(message: string) =\n    inherit exn(message)\n\n    new () = IndexOutOfRangeExceptionProxy \"Index was outside the bounds of the array.\"\n\n[<Proxy(typeof<System.OperationCanceledException>)>]\n[<Name \"OperationCanceledException\">]\ntype private OperationCanceledExceptionProxy(message: string, inner: exn, ct: CT) =\n    inherit exn(message, inner)\n\n    new (ct) = OperationCanceledExceptionProxy (\"The operation was canceled.\", null, ct)\n    \n    [<Inline>]\n    new () = OperationCanceledExceptionProxy (CT.None)\n    [<Inline>]\n    new (message) = OperationCanceledExceptionProxy (message, null, CT.None)\n    [<Inline>]\n    new (message, ct) = OperationCanceledExceptionProxy (message, null, ct)\n    [<Inline>]\n    new (message, inner) = OperationCanceledExceptionProxy (message, inner, CT.None)\n\n    [<Inline>]\n    member this.CancellationToken = ct\n\n[<Proxy(typeof<System.ArgumentException>)>]\n[<Name \"ArgumentException\">]\ntype private ArgumentExceptionProxy(message: string) =\n    inherit exn(message)\n    \n    new () = ArgumentExceptionProxy \"Value does not fall within the expected range.\"\n\n    new (argumentName: string, message: string) =\n        ArgumentExceptionProxy (message + \"\\nParameter name: \" + argumentName)\n\n[<Proxy(typeof<System.ArgumentOutOfRangeException>)>]\n[<Name \"ArgumentOutOfRangeException\">]\ntype private ArgumentOutOfRangeExceptionProxy =\n    inherit exn\n\n    new () =\n        { inherit exn(\"Specified argument was out of the range of valid values.\") }\n\n    new (argumentName: string) =\n        new ArgumentOutOfRangeExceptionProxy(argumentName, \"Specified argument was out of the range of valid values.\")\n\n    new (argumentName: string, message: string) =\n        { inherit exn(message + \"\\nParameter name: \" + argumentName) }\n\n[<Proxy(typeof<System.ArgumentNullException>)>]\n[<Name \"ArgumentNullException\">]\ntype private ArgumentNullExceptionProxy =\n    inherit exn\n\n    new () =\n        { inherit exn(\"Value cannot be null.\") }\n\n    new (argumentName: string) =\n        new ArgumentNullExceptionProxy(argumentName, \"Value cannot be null.\")\n\n    new (argumentName: string, message: string) =\n        { inherit exn(message + \"\\nParameter name: \" + argumentName) }\n\n[<Proxy(typeof<System.InvalidOperationException>)>]\n[<Name \"InvalidOperationException\">]\ntype private InvalidOperationExceptionProxy(message: string, innerExn: exn) =\n    inherit exn(message, innerExn)\n    \n    new () = InvalidOperationExceptionProxy \"Operation is not valid due to the current state of the object.\"\n\n    new (message) =\n        new InvalidOperationExceptionProxy(message, null)\n\n[<Proxy(typeof<System.AggregateException>)>]\n[<Name \"AggregateException\">]\ntype private AggregateExceptionProxy(message: string, innerExceptions: exn[]) =\n    inherit exn(message)\n\n    new (innerExceptions: exn[]) = AggregateExceptionProxy(\"One or more errors occurred.\", innerExceptions)\n\n    new (innerExceptions: seq<exn>) = AggregateExceptionProxy(\"One or more errors occurred.\", Array.ofSeq innerExceptions)\n\n    new (message, innerExceptions: seq<exn>) = AggregateExceptionProxy(message, Array.ofSeq innerExceptions)\n\n    new (message, innerException: exn) = AggregateExceptionProxy(message, [| innerException |])\n\n    [<Inline>]\n    member this.InnerExceptions \n        with get() = As<System.Collections.ObjectModel.ReadOnlyCollection<exn>> innerExceptions\n\n[<Proxy(typeof<System.TimeoutException>)>]\n[<Name \"TimeoutException\">]\ntype private TimeoutExceptionProxy(message: string) =\n    inherit exn(message)\n    \n    new () = TimeoutExceptionProxy \"The operation has timed out.\"\n\n[<Proxy(typeof<System.FormatException>)>]\n[<Name \"FormatException\">]\ntype private FormatException(message: string) =\n    inherit exn(message)\n\n    new () = FormatException \"One of the identified items was in an invalid format.\"\n\n[<Proxy(typeof<System.OverflowException>)>]\n[<Name \"OverflowException\">]\ntype private OverflowException(message: string) =\n    inherit exn(message)\n\n    new () = OverflowException \"Arithmetic operation resulted in an overflow.\"\n\n[<Proxy(typeof<System.Threading.Tasks.TaskCanceledException>)>]\n[<Name \"TaskCanceledException\">]\ntype private TaskCanceledException(message: string) =\n    inherit exn(message)\n\n    new () = TaskCanceledException \"A task was canceled.\"\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.ExtraTopLevelOperators, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ExtraTopLevelOperatorsProxy\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Inline \"null\">]\nlet DefaultAsyncBuilder : Control.AsyncBuilder =\n    As (AsyncBuilderProxy())\n\n[<Name \"WebSharper.Arrays.create2D\" >]\nlet CreateArray2D (rows : seq<#seq<'T>>) =\n    let arr = rows |> Seq.map (Array.ofSeq) |> Array.ofSeq |> As<'T[,]>\n    arr?dims <- 2\n    arr\n\n[<Inline \"+$0\">]\nlet ToDouble<'T> (x: 'T) : double = X\n\n[<Inline \"$f(function(x){return x;})\">]\nlet PrintFormatToString (f: Printf.StringFormat<'T>) = X<'T>\n\n[<Inline; JavaScript>]\nlet PrintFormatToStringThen k f = Printf.ksprintf k f \n\n[<Inline; JavaScript>]\nlet PrintFormatLine f = Printf.printfn f \n\n[<Inline; JavaScript>]\nlet PrintFormatToStringThenFail f = Printf.failwithf f \n\n[<Inline; JavaScript>]\nlet SpliceExpression (e: Microsoft.FSharp.Quotations.Expr<'T>) =\n    As<'T> e\n\n[<Inline; JavaScript>]\nlet SpliceUntypedExpression<'T> (e: Microsoft.FSharp.Quotations.Expr) =\n    As<'T> e\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nopen Concurrency\nopen System.Runtime.InteropServices\n\n[<Proxy(typeof<System.Guid>)>]\n[<Prototype(false)>]\ntype internal GuidProxy =\n    \n    [<Inline \"$g\">]\n    new (g: string) = {}\n    \n    [<Direct \"return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random()*16|0, v = c == 'x' ? r : (r&3|8);\n        return v.toString(16); });\">]\n    static member NewGuid() = X<System.Guid>\n\n    [<Constant \"00000000-0000-0000-0000-000000000000\">]\n    static member Empty = X<System.Guid>\n\n    [<Inline \"$this\">]\n    override this.ToString() = X<string>\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality(a: System.Guid, b: System.Guid) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality(a: System.Guid, b: System.Guid) = X<bool>\n\n    [<Inline>]\n    member this.CompareTo(s: System.Guid) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    member this.CompareTo(s: obj) =\n        Unchecked.compare (this :> obj) s\n\n    static member FormatError() =\n        raise (FormatException \"\"\"Format String can be only \"D\", \"d\", \"N\", \"n\", \"P\", \"p\", \"B\", \"b\", \"X\" or \"x\".\"\"\")\n\n    static member HexaError() =\n        raise (FormatException \"Hexadecimal Guid printing not implemented by WebSharper.\")\n\n    static member ShapeError() =\n        raise (FormatException \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\")\n\n    static member ParseError() =\n        raise (FormatException \"Unrecognized Guid format.\")\n\n    member this.ToString(format: string) =\n        match format.ToUpper() with\n        | \"N\" -> (As<string> this).Replace(\"-\", \"\")\n        | \"D\" -> As<string> this\n        | \"B\" -> \"{\" + As<string> this + \"}\"\n        | \"P\" -> \"(\" + As<string> this + \")\"\n        | \"X\" ->\n            let s = As<string> this\n            \"{0x\" + s.Substring(0, 8) + \",0x\" + s.Substring(9, 4) + \",0x\" + s.Substring(14, 4) + \",{0x\"\n            + s.Substring(19, 2) + \",0x\" + s.Substring(21, 2) + \",0x\" + s.Substring(24, 2) + \",0x\"\n            + s.Substring(26, 2) + \",0x\" + s.Substring(28, 2) + \",0x\" + s.Substring(30, 2) + \",0x\" \n            + s.Substring(32, 2) + \",0x\" + s.Substring(34, 2) + \"}}\"\n        | _ -> GuidProxy.FormatError()\n    \n    static member Parse(input: string) =\n        try GuidProxy.ParseExact(input, \"D\") \n        with _ ->\n        try GuidProxy.ParseExact(input, \"B\") \n        with _ ->\n        try GuidProxy.ParseExact(input, \"P\") \n        with _ ->\n        try GuidProxy.ParseExact(input, \"N\") \n        with _ ->\n            GuidProxy.ParseExact(input, \"X\") \n\n    static member ParseExact(input: string, format: string) =\n        let parseD (s: string) =\n            for i = 0 to 35 do\n                match i with \n                | 8 | 13 | 18 | 23 -> if s.[i] <> '-' then GuidProxy.ShapeError()\n                | _ ->\n                    let c = s.[i]\n                    if not (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) then GuidProxy.ShapeError()   \n            As<System.Guid> s    \n\n        match format.ToUpper() with\n        | \"N\" -> \n            let s = input.Trim().ToLower()\n            if s.Length <> 32 then GuidProxy.ShapeError()\n            for i = 0 to 31 do\n                let c = s.[i]\n                if not (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) then GuidProxy.ShapeError()   \n            s.Substring(0, 8) + \"-\" + s.Substring(8, 4) + \"-\" + s.Substring(12, 4) + \"-\" \n            + s.Substring(16, 4) + \"-\" + s.Substring(20)\n            |> As<System.Guid>\n        | \"D\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 36 then GuidProxy.ShapeError()\n            parseD s\n        | \"B\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 38 || s.[0] <> '{' || s.[17] <> '}' then GuidProxy.ShapeError()\n            parseD (s.Substring(1, 36))\n        | \"P\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 38 || s.[0] <> '(' || s.[17] <> ')' then GuidProxy.ShapeError()\n            parseD (s.Substring(1, 36))\n        | \"X\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 68 then GuidProxy.ShapeError()\n            for i = 0 to 67 do\n                match i with \n                | 0 | 26 -> if s.[i] <> '{' then GuidProxy.ShapeError()\n                | 1 | 12 | 19 | 27 | 32 | 37 | 42 | 47 | 52 | 57 | 62 -> if s.[i] <> '0' then GuidProxy.ShapeError()\n                | 2 | 13 | 20 | 28 | 33 | 38 | 43 | 48 | 53 | 58 | 63 -> if s.[i] <> 'x' then GuidProxy.ShapeError()\n                | 11 | 18 | 25 | 31 | 36 | 41 | 46 | 51 | 56 | 61 -> if s.[i] <> ',' then GuidProxy.ShapeError()\n                | 66 | 67 -> if s.[i] <> '{' then GuidProxy.ShapeError()\n                | _ ->\n                    let c = s.[i]\n                    if not (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) then GuidProxy.ShapeError() \n            s.Substring(3, 8) + \"-\" + s.Substring(14, 4) + \"-\" + s.Substring(21, 4) + \"-\" + s.Substring(29, 2) \n            + s.Substring(34, 2) + \"-\" + s.Substring(39, 2) + s.Substring(44, 2) + s.Substring(49, 2) \n            + s.Substring(54, 2) + s.Substring(59, 2) + s.Substring(64, 2)\n            |> As<System.Guid>\n        | _ -> GuidProxy.FormatError()\n\n    static member TryParse(input: string, [<Out>] output: byref<System.Guid>) =\n        try \n            output <- GuidProxy.Parse(input)\n            true\n        with _ -> false\n\n    static member TryParseExact(input: string, format: string, [<Out>] output: byref<System.Guid>) =\n        try \n            output <- GuidProxy.ParseExact(input, format)\n            true\n        with _ -> false\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule private HashSetUtil =\n    [<Direct \"var r=[]; for(var k in $o) { r.push.apply(r, $o[k]) }; return r\">]\n    let concat (o: Array<Array<'T>>) = X<Array<'T>>\n    \nopen DictionaryUtil\n\n// not really used, an array enumerator is cast to this type instead\n// proxy is needed so calls against it compile\n// TODO: lazy iterating\n[<Proxy(typeof<HashSet<_>.Enumerator>)>]\n[<Stub>]\ntype private HashSetEnumeratorProxy<'T> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<'T> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n[<Proxy(typeof<HashSet<_>>)>]\n[<Name \"HashSet\">]\ntype internal HashSetProxy<'T when 'T : equality>\n\n    private (init   : seq<'T>,\n             equals : FuncWithArgs<'T * 'T, bool>,\n             hash   : 'T -> int) =\n\n        let mutable data  = Array<Array<'T>>()\n        let mutable count = 0\n\n        let arrContains (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals.Call(arr.[i], item) then\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        let arrRemove (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals.Call(arr.[i], item) then\n                    arr.Splice(i, 1) |> ignore\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        let add (item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then\n                data.[h] <- As [| item |]\n                count <- count + 1\n                true\n            else\n                if arrContains item arr then false else    \n                    arr.Push item |> ignore\n                    count <- count + 1\n                    true\n\n        do for x in init do add x |> ignore\n\n        new () = HashSetProxy<'T>(Seq.empty, genEquals<'T>(), hash)\n\n        new (init: seq<'T>) = new HashSetProxy<'T>(init, genEquals<'T>(), hash)\n\n        new (comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(Seq.empty, equals comparer, getHashCode comparer)\n\n        new (init: seq<'T>, comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(init, equals comparer, getHashCode comparer)\n\n        member this.Add(item: 'T) = add item\n\n        member this.Clear() =\n            data <- Array()\n            count <- 0\n\n        member x.Contains(item: 'T) =\n            let arr = data.[hash item]\n            if arr ==. null then false else arrContains item arr\n\n        member x.CopyTo(arr: 'T[]) =\n            let mutable i = 0\n            let all = concat data \n            for i = 0 to all.Length - 1 do \n                arr.[i] <- all.[i]\n\n        member x.Count = count\n\n        member x.ExceptWith(xs: seq<'T>) =\n            for item in xs do\n                x.Remove(item) |> ignore\n\n        [<Inline>]\n        member this.GetEnumerator() =\n           As<HashSet<'T>.Enumerator>((As<seq<'T>>(concat data)).GetEnumerator())\n\n        interface IEnumerable with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n        \n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n\n        // TODO: optimize methods by checking if other collection\n        // is a HashSet with the same IEqualityComparer\n        \n        member x.IntersectWith(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash) \n            let all = concat data\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if other.Contains(item) |> not then\n                    x.Remove(item) |> ignore\n\n        member x.IsProperSubsetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count < other.Length && x.IsSubsetOf(other)\n\n        member x.IsProperSupersetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count > other.Length && x.IsSupersetOf(other)\n\n        member x.IsSubsetOf(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            As<_[]>(concat data) |> Array.forall other.Contains\n\n        member x.IsSupersetOf(xs: seq<'T>) =\n            xs |> Seq.forall x.Contains\n\n        member x.Overlaps(xs: seq<'T>) =\n            xs |> Seq.exists x.Contains\n\n        member x.Remove(item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then false else\n                if arrRemove item arr then\n                    count <- count - 1\n                    true\n                else false\n\n        member x.RemoveWhere(cond: System.Predicate<'T>) =\n            let all = concat data\n            let mutable res = 0\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if cond.Invoke item then\n                    if x.Remove(item) then\n                        res <- res + 1\n            res\n\n        member x.SetEquals(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            x.Count = other.Count && x.IsSupersetOf(other)\n\n        member x.SymmetricExceptWith(xs: seq<'T>) =\n            for item in xs do\n                if x.Contains item then\n                    x.Remove(item) |> ignore\n                else\n                    x.Add(item) |> ignore\n\n        member x.UnionWith(xs: seq<'T>) =\n            for item in xs do\n                x.Add(item) |> ignore\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Proxy(typeof<System.IComparable>)>]\ntype private IComparableProxy =\n    [<Name \"CompareTo0\">]\n    abstract CompareTo : obj -> int\n\n[<Proxy(typeof<System.IComparable<_>>)>]\ntype private IComparableProxy<'T> =\n    [<Name \"CompareTo\">]\n    abstract CompareTo : 'T -> int\n\n[<Proxy(typeof<System.Collections.IEqualityComparer>)>]\ntype private IEqualityComparerProxy =\n    [<Name \"CEquals0\">]\n    abstract Equals : obj * obj -> bool \n    [<Name \"CGetHashCode0\">]\n    abstract GetHashCode : obj -> int\n\n[<Proxy(typeof<System.Collections.Generic.IEqualityComparer<_>>)>]\ntype private IEqualityComparerProxy<'T> =\n    [<Name \"CEquals\">]\n    abstract Equals : 'T * 'T -> bool \n    [<Name \"CGetHashCode\">]\n    abstract GetHashCode : 'T -> int\n\n[<Proxy(typeof<System.Collections.Generic.EqualityComparer<_>>)>]\n[<Name \"WebSharper.Collections.EqualityComparer\">]\n[<AbstractClass>]\ntype private EqualityComparerProxy<'T>() =\n    abstract Equals : 'T * 'T -> bool \n    abstract GetHashCode : 'T -> int\n    interface System.Collections.Generic.IEqualityComparer<'T> with\n        member this.Equals(x, y) = this.Equals(x, y)\n        member this.GetHashCode(x) = this.GetHashCode(x)\n    interface System.Collections.IEqualityComparer with\n        member this.Equals(x, y) = this.Equals(As x, As y)\n        member this.GetHashCode(x) = this.GetHashCode(As x)\n    [<Macro(typeof<M.EqualityComparer>)>]\n    static member Default = X<System.Collections.Generic.EqualityComparer<'T>>\n\n[<Proxy(typeof<System.Collections.IComparer>)>]\ntype private IComparerProxy =\n    [<Name \"Compare0\">]\n    abstract Compare : obj * obj -> int\n\n[<Proxy(typeof<System.Collections.Generic.IComparer<_>>)>]\ntype private IComparerProxy<'T> =\n    [<Name \"Compare\">]\n    abstract Compare : 'T * 'T -> int\n\n[<Proxy(typeof<System.Collections.Generic.Comparer<_>>)>]\n[<Name \"WebSharper.Collections.Comparer\">]\n[<AbstractClass>]\ntype private ComparerProxy<'T>() =\n    abstract Compare : 'T * 'T -> int\n    interface System.Collections.Generic.IComparer<'T> with\n        member this.Compare(x, y) = this.Compare(x, y)\n    interface System.Collections.IComparer with\n        member this.Compare(x, y) = this.Compare(As x, As y)\n    [<Macro(typeof<M.Comparer>)>]\n    static member Default = X<System.Collections.Generic.Comparer<'T>>\n\n[<Proxy(typeof<System.IEquatable<_>>)>]\ntype private IEquatableProxy<'T> =\n    [<Name \"EEquals\">]\n    abstract Equals : 'T -> bool\n\n[<Proxy(typeof<System.Collections.IStructuralEquatable>)>]\ntype private IStructuralEquatableProxy =\n    [<Name \"SEquals\">]\n    abstract Equals : obj * System.Collections.IEqualityComparer -> bool \n    [<Name \"SGetHashCode\">]\n    abstract GetHashCode : System.Collections.IEqualityComparer -> int\n\n[<Proxy(typeof<System.Collections.IStructuralComparable>)>]\ntype private IStructuralComparableProxy =\n    [<Name \"SCompareTo\">]\n    abstract CompareTo : obj * System.Collections.IComparer -> int \n\n[<Proxy(typeof<System.IDisposable>)>]\ntype private IDisposableProxy =\n    [<Name \"Dispose\">]\n    abstract member Dispose : unit -> unit\n\n[<Proxy(typeof<System.Collections.IEnumerable>)>]  \ntype private IEnumerableProxy =\n\n    [<Name \"GetEnumerator0\">]\n    abstract GetEnumerator : unit -> System.Collections.IEnumerator\n\n[<Proxy(typeof<seq<_>>)>]  \ntype private IEnumerableProxy<'T> =\n    inherit System.Collections.IEnumerable \n    \n    [<Name \"GetEnumerator\">]\n    abstract GetEnumerator : unit -> System.Collections.Generic.IEnumerator<'T>\n    \n[<Proxy(typeof<System.Collections.IEnumerator>)>]\n[<Name \"WebSharper.IEnumerator\">]\ntype private IEnumeratorProxy =\n    [<Name \"Current0\">]\n    abstract member Current  : obj\n    [<Name \"MoveNext\">]\n    abstract member MoveNext : unit -> bool\n    [<Name \"Reset\">]\n    abstract member Reset    : unit -> unit\n\n[<Proxy(typeof<System.Collections.Generic.IEnumerator<_>>)>]\n[<Name \"WebSharper.IEnumerator1\">]\ntype private IEnumeratorProxy<'T> =\n    [<Name \"Current\">]\n    abstract member Current : 'T\n\n[<Proxy(typeof<System.IObservable<_>>)>]\ntype private IObservableProxy<'T> =\n    [<Name \"Subscribe\">]\n    abstract member Subscribe : System.IObserver<'T> -> System.IDisposable\n\n[<Proxy(typeof<System.IObserver<_>>)>]\ntype private IObserverProxy<'T> =\n    [<Name \"OnCompleted\">]\n    abstract member OnCompleted : unit -> unit\n    [<Name \"OnError\">]\n    abstract member OnError : exn -> unit\n    [<Name \"OnNext\">]\n    abstract member OnNext : 'T -> unit\n\n[<Proxy(typeof<IDelegateEvent<_>>)>]\ntype private IDelegateEventProxy<'D> =\n    [<Name \"AddHandler\">]\n    abstract AddHandler : 'D -> unit\n    [<Name \"RemoveHandler\">]\n    abstract RemoveHandler : 'D -> unit\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Lazy\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Control.LazyExtensions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.LazyExtensionsProxy\n\nopen WebSharper.JavaScript\n\n[<JavaScript; Prototype false>]\ntype LazyRecord<'T> =\n    {\n        [<Name \"c\">] mutable created : bool\n        [<Name \"v\">] mutable evalOrVal : obj\n        [<Name \"f\">] mutable force : unit -> 'T\n    }\n\nlet cachedLazy<'T> () =\n    JS.This.evalOrVal\n\nlet forceLazy<'T> () =\n    let v = (As JS.This.evalOrVal)()\n    JS.This.created <- true\n    JS.This.evalOrVal <- v\n    JS.This.force <- As cachedLazy\n    v\n\nlet Create (f: unit -> 'T) : Lazy<'T> =\n    As {\n        created = false\n        evalOrVal = f\n        force = As forceLazy\n    }\n\nlet CreateFromValue (v: 'T) : Lazy<'T> =\n    As {\n        created = true\n        evalOrVal = v\n        force = As cachedLazy\n    }\n\nlet Force (x: Lazy<'T>) : 'T =\n    As<LazyRecord<'T>>(x).force()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<list<_>>)>]\n[<Name \"WebSharper.List.T\">]\n[<DefaultAugmentation(false)>]\ntype private ListProxy<'T> =\n    | Empty\n    | Cons of Head: 'T * Tail: List<'T>\n\n    [<Inline; Pure>]\n    static member Cons(head: 'T, tail: list<'T>) = head :: tail\n\n    [<Inline; Pure>]\n    static member Empty : list<'T> = []\n\n    member this.Head with [<Inline>] get () = List.head (As this) : 'T\n    member this.Tail with [<Inline>] get () = List.tail (As this) : list<'T>\n    member this.IsEmpty with [<Inline \"$this.$ == 0\">] get () = X<bool>\n\n    member this.Length with get () = List.length (As this)\n\n    member this.Item with get (x: int) : 'T = List.item x (As this)\n\n    interface System.Collections.IEnumerable with\n        member this.GetEnumerator() = (this :> _ seq).GetEnumerator() :> _\n\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            let data = As<list<'T>> this\n            Enumerator.New data (fun e ->\n                match e.State with\n                | x :: xs ->\n                    e.Current <- x\n                    e.State <- xs\n                    true\n                | [] ->\n                    false)\n\n    member this.GetSlice(start, finish) : list<'T> =\n        match start, finish with\n        | None, None -> As this\n        | Some i, None -> As this |> CollectionInternals.ListSkip i\n        | None, Some j -> As this |> Seq.take (j + 1) |> List.ofSeq  \n        | Some i, Some j -> As this |> CollectionInternals.ListSkip i |> Seq.take (j - i + 1) |> List.ofSeq        \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"List\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.ListModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ListModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\nlet badLengths() =\n    failwith \"The lists have different lengths.\"\n\nlet listEmpty() =\n    failwith \"The input list was empty.\"\n\n[<Inline \"$l.$0\">]\nlet unsafeHead (l: list<'T>) = X<'T> \n\n[<Inline \"$l.$1\">]\nlet unsafeTail (l: list<'T>) = X<list<'T>> \n\n[<Inline>]\nlet setValue (l: list<'T>) (v: 'T) =\n    JS.Set l \"$0\" v\n\n[<Inline>]\nlet setTail (l: list<'T>) (t: list<'T>) =\n    JS.Set l \"$1\" t\n\n[<Inline \"new WebSharper.List.T({$: 1})\"; Pure>]\nlet freshEmptyList() = X<list<'T>>\n\n[<Inline>]\nlet freshTail (l: list<'T>) =\n    let t = freshEmptyList()\n    setTail l t\n    t\n\n[<Inline \"$l.$ == 1\">]\nlet notEmpty (l: list<_>) = X<bool>\n\n[<Name \"allPairs\">]\nlet AllPairs (l1: list<_>) (l2: list<_>) =\n    let arr1 = Array.ofList l1\n    let arr2 = Array.ofList l2\n    let res = Array.allPairs arr1 arr2\n    List.ofArray res\n\n[<Name \"append\">]\nlet Append (x: list<'T>) (y: list<'T>) = \n    if List.isEmpty x then y\n    elif List.isEmpty y then x else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l = x\n    let mutable go = true\n    while go do\n        setValue r (unsafeHead l)\n        l <- unsafeTail l\n        if List.isEmpty l then\n            go <- false\n        else\n            r <- freshTail r\n    setTail r y |> ignore\n    res\n\n[<Inline>]\nlet inline Average (l: list<_>) = Seq.average l\n\n[<Inline>]\nlet inline AverageBy f (l: list<_>) = Seq.averageBy f l\n\n[<Name \"choose\">]\nlet Choose f (l: list<_>) = List.ofSeq (Seq.choose f l)\n\n[<Name \"collect\">]\nlet Collect (f: _ -> list<_>) (l: list<_>) = List.ofSeq (Seq.collect f l)\n\n[<Name \"concat\">]\nlet Concat (s: seq<list<_>>) = List.ofSeq (Seq.concat s)\n\n[<Inline>]\nlet Empty<'T> : list<'T> = []\n\n[<Name \"exists\">]\nlet Exists<'T> (p: 'T -> bool) (x: list<'T>) =\n    let mutable e = false\n    let mutable l = x\n    while not e && notEmpty l do\n        e <- p (unsafeHead l)\n        l <- unsafeTail l\n    e\n\n[<Name \"exists2\">]\nlet Exists2<'T1,'T2> (p : 'T1 -> 'T2 -> bool)\n                        (x1: list<'T1>)\n                        (x2: list<'T2>) =\n    let mutable e = false\n    let mutable l1 = x1\n    let mutable l2 = x2\n    while not e && notEmpty l1 && notEmpty l2 do\n        e <- p (unsafeHead l1) (unsafeHead l2)\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n    if not e && (notEmpty l1 || notEmpty l2) then\n        badLengths()\n    e\n\n[<Name \"filter\">]\nlet Filter<'T> (p: 'T -> bool) (l: list<'T>) =\n    List.ofSeq (Seq.filter p l)\n\n[<Inline>]\nlet Find p (l: list<_>) = Seq.find p l\n\n[<Inline>]\nlet FindIndex p (l: list<_>) = Seq.findIndex p l\n\n[<Inline>]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (l: list<'T>) : 'S =\n    Seq.fold f s l\n\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> (f: 'S -> 'T1 -> 'T2 -> 'S)\n                        (s: 'S)\n                        (l1: list<'T1>)\n                        (l2: list<'T2>) : 'S =\n    Array.fold2 f s (Array.ofList l1) (Array.ofList l2)\n\n[<Name \"foldBack\">]\nlet FoldBack f (l: list<_>) s =\n    Array.foldBack f (Array.ofList l) s\n\n[<Name \"foldBack2\">]\nlet FoldBack2 f (l1: list<_>) (l2: list<_>) s =\n    Array.foldBack2 f (Array.ofList l1) (Array.ofList l2) s\n\n[<Name \"forAll\">]\nlet ForAll p (x: list<_>) =\n    let mutable a = true\n    let mutable l = x\n    while a && notEmpty l do\n        a <- p (unsafeHead l)\n        l <- unsafeTail l\n    a\n\n[<Name \"forall2\">]\nlet ForAll2 p (x1: list<_>) (x2: list<_>) =\n    let mutable a = true\n    let mutable l1 = x1\n    let mutable l2 = x2\n    while a && notEmpty l1 && notEmpty l2 do\n        a <- p (unsafeHead l1) (unsafeHead l2)\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n    if a && (notEmpty l1 || notEmpty l2) then\n        badLengths()\n    a\n\n[<Name \"head\">]\nlet Head (l: list<'T>) =\n    match l with \n    | h :: _ -> h\n    | _ -> listEmpty()\n\n[<Name \"init\">]\nlet Initialize s f = List.ofArray (Array.init s f)\n\n[<Inline \"$l.$ == 0\">]\nlet IsEmpty (l: list<_>) = X<bool>\n\n[<Name \"iter\">]\nlet Iterate f (l: list<_>) =\n    let mutable r = l\n    while notEmpty r do\n        f r.Head\n        r <- r.Tail\n\n[<Name \"iter2\">]\nlet Iterate2 f (l1: list<_>) (l2: list<_>) =\n    let mutable r1 = l1\n    let mutable r2 = l2\n    while notEmpty r1 do\n        if List.isEmpty r2 then\n            badLengths()\n        f r1.Head r2.Head\n        r1 <- r1.Tail\n        r2 <- r2.Tail\n    if notEmpty r2 then\n        badLengths()\n\n[<Name \"iteri\">]\nlet IterateIndexed f (l: list<_>) =\n    let mutable r = l\n    let mutable i = 0\n    while notEmpty r do\n        f i r.Head\n        r <- r.Tail\n        i <- i + 1\n\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (l1: list<_>) (l2: list<_>) =\n    let mutable r1 = l1\n    let mutable r2 = l2\n    let mutable i = 0\n    while notEmpty r1 do\n        if List.isEmpty r2 then\n            badLengths()\n        f i r1.Head r2.Head\n        r1 <- r1.Tail\n        r2 <- r2.Tail\n        i <- i + 1\n    if notEmpty r2 then\n        badLengths()\n\n[<Name \"length\">]\nlet Length (l: list<_>) =\n    let mutable r = l\n    let mutable i = 0\n    while notEmpty r do\n        r <- r.Tail\n        i <- i + 1\n    i\n\n[<Name \"map\">]\nlet Map (f: 'T1 -> 'T2) (x: list<'T1>) = \n    if List.isEmpty x then As x else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l = x\n    let mutable go = true\n    while go do\n        setValue r (f (unsafeHead l))\n        l <- unsafeTail l\n        if List.isEmpty l then\n            go <- false\n        else\n            r <- freshTail r\n    setTail r []\n    res\n\n[<Name \"map2\">]\nlet Map2 (f: 'T1 -> 'T2 -> 'T3) (x1: list<'T1>) (x2: list<'T2>) =\n    let mutable go = notEmpty x1 && notEmpty x2\n    if not go then \n        if notEmpty x1 || notEmpty x2 then\n            badLengths()\n        else As x1\n    else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l1 = x1\n    let mutable l2 = x2\n    while go do\n        setValue r (f (unsafeHead l1) (unsafeHead l2))\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n        if notEmpty l1 && notEmpty l2 then\n            r <- freshTail r\n        else \n            go <- false\n    if notEmpty l1 || notEmpty l2 then\n        badLengths()\n    setTail r []\n    res\n\n[<Name \"map3\">]\nlet Map3 (f: 'T1 -> 'T2 -> 'T3 -> 'T4) (x1: list<'T1>) (x2: list<'T2>) (x3: list<'T3>) =\n    let mutable go = notEmpty x1 && notEmpty x2 && notEmpty x3\n    if not go then \n        if notEmpty x1 || notEmpty x2 || notEmpty x3 then\n            badLengths()\n        else As x1\n    else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l1 = x1\n    let mutable l2 = x2\n    let mutable l3 = x3\n    while go do\n        setValue r (f (unsafeHead l1) (unsafeHead l2) (unsafeHead l3))\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n        l3 <- unsafeTail l3\n        if notEmpty l1 && notEmpty l2 && notEmpty l3 then\n            r <- freshTail r\n        else \n            go <- false\n    if notEmpty l1 || notEmpty l2 || notEmpty l3 then\n        badLengths()\n    setTail r []\n    res\n\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> 'T1 -> 'T2) (x: list<'T1>) =\n    if List.isEmpty x then As x else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l = x\n    let mutable i = 0\n    let mutable go = true\n    while go do\n        setValue r (f i (unsafeHead l))\n        l <- unsafeTail l\n        if List.isEmpty l then \n            go <- false\n        else\n            r <- freshTail r\n            i <- i + 1\n    setTail r []\n    res\n\n[<Name \"mapi2\">]\nlet MapIndexed2 (f: int -> 'T1 -> 'T2 -> 'T3) (x1: list<'T1>) (x2: list<'T2>) =\n    let mutable go = notEmpty x1 && notEmpty x2\n    if not go then \n        if notEmpty x1 || notEmpty x2 then\n            badLengths()\n        else As x1\n    else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l1 = x1\n    let mutable l2 = x2\n    let mutable i = 0\n    while go do\n        setValue r (f i (unsafeHead l1) (unsafeHead l2))\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n        if notEmpty l1 && notEmpty l2 then\n            r <- freshTail r\n            i <- i + 1\n        else \n            go <- false\n    if notEmpty l1 || notEmpty l2 then\n        badLengths()\n    setTail r []\n    res\n\nlet private nonEmpty (l: list<_>) =\n    if List.isEmpty l then\n        listEmpty()\n\n[<Name \"max\">]\nlet Max (list: list<_>) = \n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        if x > m then\n            m <- x\n        l <- unsafeTail l\n    m\n\n[<Name \"maxBy\">]\nlet MaxBy f (list: list<_>) =\n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable fm = f m\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        let fx = f x\n        if fx > fm then\n            m <- x\n            fm <- fx\n        l <- unsafeTail l\n    m\n\n[<Name \"min\">]\nlet Min (list: list<_>) =\n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        if x < m then\n            m <- x\n        l <- unsafeTail l\n    m\n\n[<Name \"minBy\">]\nlet MinBy f (list: list<_>) =\n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable fm = f m\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        let fx = f x\n        if fx < fm then\n            m <- x\n            fm <- fx\n        l <- unsafeTail l\n    m\n\n[<Inline>]\nlet Get (l: list<_>) ix = Seq.item ix l\n\n[<Inline>]\nlet Item ix (l: list<_>) = Seq.item ix l\n\n[<Name \"ofArray\">]\nlet OfArray<'T> (arr: 'T []) =\n    let mutable r = []\n    for i = arr.Length - 1 downto 0 do\n        r <- arr.[i] :: r\n    r\n\n[<Name \"ofSeq\">]\nlet OfSeq (s: seq<'T>) =\n    if s :? _ list then\n        As<'T list> s\n    elif s :? System.Array then\n        List.ofArray (As<'T[]> s)\n    else\n        use e = Enumerator.Get s\n        let mutable go = e.MoveNext()\n        if not go then [] else\n        let res = freshEmptyList()\n        let mutable r = res\n        while go do\n            setValue r e.Current\n            if e.MoveNext() then\n                r <- freshTail r\n            else    \n                go <- false\n        setTail r []\n        res\n\n[<Name \"partition\">]\nlet Partition p (l: list<_>) =\n    let (a, b) = Array.partition p (Array.ofList l)\n    (List.ofArray a, List.ofArray b)\n\n[<Name \"permute\">]\nlet Permute f (l: list<_>) =\n    List.ofArray (Array.permute f (Array.ofList l))\n\n[<Inline>]\nlet Pick f (l: list<_>) = Seq.pick f l\n\n[<Name \"reduce\">]\nlet Reduce (f: 'T -> 'T -> 'T) (list: list<'T>) : 'T =\n    nonEmpty list\n    let mutable r = unsafeHead list\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        r <- f r (unsafeHead l)\n        l <- unsafeTail l\n    r\n\n[<Name \"reduceBack\">]\nlet ReduceBack f (l: list<_>) =\n    Array.reduceBack f (Array.ofList l)\n\n[<Name \"replicate\">]\nlet Replicate size value =\n    List.ofArray (Array.create size value)\n\n[<Name \"rev\">]\nlet Reverse (l: list<'T>) =\n    let mutable res = []\n    let mutable r = l\n    while notEmpty r do\n        res <- unsafeHead r :: res\n        r <- unsafeTail r\n    res\n\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (l: list<'T>) : list<'S> =\n    List.ofSeq (Seq.scan f s l)\n\n[<Name \"scanBack\">]\nlet ScanBack f (l: list<_>) s =\n    List.ofArray (Array.scanBack f (Array.ofList l) s)\n\n[<Name \"sort\">]\nlet Sort (l: list<_>) =\n    let a = Array.ofList l\n    Array.sortInPlace a\n    List.ofArray a\n\n[<Name \"sortBy\">]\nlet SortBy f (l: list<_>) =\n    let a = Array.ofList l\n    Array.sortInPlaceBy f a\n    List.ofArray a\n\n[<Name \"sortByDescending\">]\nlet SortByDescending f (l: list<_>) =\n    let a = Array.ofList l\n    ArraySortInPlaceByDescending f a\n    List.ofArray a\n\n[<Name \"sortDescending\">]\nlet SortDescending (l: list<_>) =\n    let a = Array.ofList l\n    ArraySortInPlaceByDescending id a\n    List.ofArray a\n\n[<Name \"sortWith\">]\nlet SortWith f (l: list<_>) =\n    let a = Array.ofList l\n    Array.sortInPlaceWith f a\n    List.ofArray a\n\n[<Inline>]\nlet inline Sum (l: list<'T>) : 'T = Seq.sum l\n\n[<Inline>]\nlet inline SumBy (f: 'T -> 'U) (l: list<'T>) : 'U = Seq.sumBy f l\n\n[<Name \"tail\">]\nlet Tail (l: list<'T>) = \n    match l with \n    | _ :: t -> t\n    | _ -> listEmpty()\n\n[<Inline>]\nlet ToArray (l: list<_>) = Array.ofList l\n\n[<Inline \"$x\">]\nlet ToSeq<'T> (x: list<'T>) : seq<'T> = x :> _\n\n[<Name \"transpose\">]\nlet Transpose (x: seq<list<'T>>) : list<list<'T>> =\n    ArrayTranspose (Array.ofSeq (x |> Seq.map Array.ofList))\n    |> Seq.map List.ofArray |> List.ofSeq\n\n[<Inline>]\nlet TryFind p (l: list<_>) = Seq.tryFind p l\n\n[<Inline>]\nlet TryFindIndex p (l: list<_>) = Seq.tryFindIndex p l\n\n[<Inline>]\nlet TryPick p (l: list<_>) = Seq.tryPick p l\n\n[<Name \"unzip\">]\nlet Unzip (l: list<_>) =\n    let x = System.Collections.Generic.Queue<_>()\n    let y = System.Collections.Generic.Queue<_>()\n    for (a, b) in l do\n        x.Enqueue a\n        y.Enqueue b\n    (List.ofArray (x.ToArray()), List.ofArray (y.ToArray()))\n\n[<Name \"unzip3\">]\nlet Unzip3 (l: list<_>) =\n    let x = System.Collections.Generic.Queue<_>()\n    let y = System.Collections.Generic.Queue<_>()\n    let z = System.Collections.Generic.Queue<_>()\n    for (a, b, c) in l do\n        x.Enqueue a\n        y.Enqueue b\n        z.Enqueue c\n    (\n        List.ofArray (x.ToArray()),\n        List.ofArray (y.ToArray()),\n        List.ofArray (z.ToArray())\n    )\n\n[<Name \"zip\">]\nlet Zip (l1: list<_>) (l2: list<_>) =\n    List.map2 (fun x y -> x, y) l1 l2\n\n[<Name \"zip3\">]\nlet Zip3 (l1: list<_>) (l2: list<_>) (l3: list<_>) =\n    Map3 (fun x y z -> (x, y, z)) l1 l2 l3\n\n[<Name \"chunkBySize\">]\nlet ChunkBySize size list =\n    SeqChunkBySize size (List.toSeq list)\n    |> Seq.toList\n    |> List.map Array.toList\n\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (l1: list<'T>) (l2: list<'T>) : int =\n    Seq.compareWith f (List.toSeq l1) (List.toSeq l2)\n\n[<Name \"countBy\">]\nlet CountBy (f: 'T -> 'K) (l: list<'T>) : list<'K * int> =\n    ArrayCountBy f (List.toArray l)\n    |> Array.toList\n\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (l: list<'T>) : list<'T> =\n    Seq.distinct (List.toSeq l)\n    |> Seq.toList\n\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (l: list<'T>) : list<'T> =\n    Seq.distinctBy f (List.toSeq l)\n    |> Seq.toList\n\n[<Name \"splitInto\">]\nlet SplitInto count (list: list<'T>) =\n    ArraySplitInto count (List.toArray list)\n    |> Array.toList\n    |> List.map Array.toList\n\n[<Name \"except\">]\nlet Except (itemsToExclude: seq<'T>) (l: list<'T>) =\n    SeqExcept itemsToExclude l\n    |> Seq.toList\n\n[<Name \"tryFindBack\">]\nlet TryFindBack ok (l: list<_>) =\n    ArrayTryFindBack ok (Array.ofList l)\n\n[<Name \"findBack\">]\nlet FindBack p (s: list<_>) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Inline>]\nlet TryFindIndexBack ok (l: list<_>) =\n    ArrayTryFindIndexBack ok (Array.ofList l) \n\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: list<_>) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"groupBy\">]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (l: list<'T>) : list<'K * list<'T>> =\n    let arr = ArrayGroupBy f (List.toArray l)\n    arr |> mapInPlace (fun (k, s) -> (k, Array.toList s))\n    Array.toList (As arr)\n\n[<Name \"last\">]\nlet Last (list : list<'T>) : 'T =\n    nonEmpty list\n    let mutable r = list\n    let mutable t = unsafeTail r\n    while notEmpty t do\n        r <- t\n        t <- unsafeTail r\n    unsafeHead r\n\n[<Name \"contains\">]\nlet Contains (el: 'T) (x: list<'T>) =\n    let mutable c = false\n    let mutable l = x\n    while not c && notEmpty l do\n        c <- el = unsafeHead l\n        l <- unsafeTail l\n    c\n\n[<Name \"mapFold\">]\nlet MapFold<'T, 'S, 'R> (f: 'S -> 'T -> 'R * 'S) zero list =\n    ArrayMapFold f zero (List.toArray list)\n    |> (fun (x, y) ->\n        (Array.toList x, y)\n    )\n\n[<Name \"mapFoldBack\">]\nlet MapFoldBack<'T, 'S, 'R> f list zero =\n    ArrayMapFoldBack<'T, 'S, 'R> f (List.toArray list) zero\n    |> (fun (x, y) ->\n        (Array.toList x, y)\n    )\n\n[<Name \"pairwise\">]\nlet Pairwise (l: list<'T>) : list<'T * 'T> =\n    Seq.pairwise (List.toSeq l)\n    |> Seq.toList\n\n[<Name \"indexed\">]\nlet Indexed (list : list<'T>) : list<int * 'T> =\n    List.mapi (fun a b -> (a, b)) list\n\n[<Inline>]\nlet Singleton<'T> (x: 'T) =\n    [x]\n\n[<Inline>]\nlet Skip<'T> i (l : list<'T>) = ListSkip i l\n\n[<Inline>]\nlet SkipWhile<'T> (predicate : 'T -> bool) (list : list<'T>) : list<'T> =\n    ListSkipWhile predicate list\n\n[<Inline>]\nlet Take<'T> n (list: list<'T>) =\n    Seq.take n list |> List.ofSeq\n\n[<Inline>]\nlet TakeWhile<'T> (predicate : 'T -> bool) (list: list<'T>) =\n    Seq.takeWhile predicate list |> List.ofSeq\n\n[<Inline>]\nlet Truncate<'T> n (list: list<'T>) =\n    Seq.truncate n list |> List.ofSeq\n\n[<Name \"tryHead\">]\nlet TryHead<'T> (list: list<'T>) =\n    match list with\n    | head :: _ ->\n        Some head\n    | [] ->\n        None\n\n[<Inline>]\nlet TryItem<'T> n (list: list<'T>) =\n    SeqTryItem n list \n\n[<Inline>]\nlet TryLast<'T> (list: list<'T>) =\n    SeqTryLast list\n\n[<Name \"exactlyOne\">]\nlet ExactlyOne (list : 'T list) =\n    match list with\n    | head :: [] ->\n        head\n    | _ ->\n        failwith \"The input does not have precisely one element.\"\n\n[<Name \"unfold\">]\nlet Unfold<'T, 'S> (f: 'S -> option<'T * 'S>) (s: 'S) : list<'T> =\n    Seq.unfold f s\n    |> Seq.toList\n\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : 'T list) : 'T list =\n    Filter predicate s\n\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: 'T list) : list<list<'T>> =\n    Seq.windowed windowSize (List.toSeq s)\n    |> Seq.map List.ofArray |> Seq.toList\n\n[<Name \"splitAt\">]\nlet SplitAt (n: int) (list: 'T list) =\n    (Take n list, Skip n list)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nmodule Nullable =\n    let get (x: obj) =\n        if x ===. null then failwith \"Nullable object must have a value.\" else x\n\n////    let getOrDefault<'T> (x: 'T) =\n//        if x ==. null then Unchecked.defaultof<'T> else x     \n\n    let getOrValue<'T> (x: 'T) (v: 'T)  =\n        if x ===. null then v else x     \n\n[<Proxy(typeof<System.Nullable<_>>)>]\ntype private NullableProxy<'T> =\n    \n    [<Inline \"null\">]\n    new () = {}\n\n    [<Inline \"$v\">]\n    new (v: 'T) = {}\n\n    member this.Value \n        with [<JavaScript; Inline>] get(): 'T = As<'T>(Nullable.get this)\n\n    member this.HasValue\n        with [<JavaScript; Inline>] get() = this !=. null\n\n    [<Inline>]\n    member this.GetValueOrDefault() : 'T = Nullable.getOrValue (As<'T> this) Unchecked.defaultof<'T>\n\n    [<Inline>]\n    member this.GetValueOrDefault(v: 'T) : 'T = Nullable.getOrValue (As<'T> this) v\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Operators\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.Operators, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OperatorsProxy\n\n#nowarn \"86\"\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Core.Macros\n\n[<JavaScript>]\n[<Name \"range\">]\n[<Macro(typeof<M.Range>)>]\nlet ( .. ) (min: 'T) (max: 'T) : seq<'T> =\n    let count = 1 + As max - As min\n    if count <= 0 then Seq.empty\n    else Seq.init count (fun x -> As (x + As min))\n\n[<Name \"step\">]\nlet ( .. .. ) (min: 'T1) (step: 'T2) (max: 'T1) : seq<'T1> =\n    let s = sign (As<int> step)\n    Seq.initInfinite (fun k -> As<int> min + k * As<int> step)\n    |> Seq.takeWhile (fun k -> s * (As<int> max - As<int> k) >= 0)\n    |> As\n\n[<Inline \"$r[0]\">]\nlet ( ! ) (r: ref<'T>) = X<'T>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( % ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Inline \"$a & $b\">]\nlet ( &&& ) (a: 'T1) (b: 'T1) = X<'T1>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( * ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Inline \"Math.pow($a, $b)\">]\nlet ( ** ) (a: 'T1) (b: 'T2) = X<'T1>\n\n[<Inline \"Math.pow($a, $p)\">]\nlet PowInteger (a: 'T, p: int) = X<'T>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( + ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( - ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( / ) (x: 'T1) (y: 'T2) = X<'T3>\n\n[<Inline \"void ($a[0] = $b)\">]\nlet ( := ) (a: ref<'T>) (b: 'T) = X<unit>\n\n[<Inline>]\nlet ( << ) (f: 'T1 -> 'T2) (g: 'T3 -> 'T1) : 'T3 -> 'T2 = \n    ()\n    fun x -> f (g x)\n\n[<Inline \"$a << $b\">]\nlet inline ( <<< ) (a: 'T) (b: int) = X<'T>\n\n[<Inline>]\nlet ( <| ) (f: 'T -> 'TR) (x: 'T) : 'TR = f x\n\n[<Inline>]\nlet ( <|| ) (f: 'T1 -> 'T2 -> 'TR) (x: 'T1, y: 'T2) : 'TR = f x y\n\n[<Inline>]\nlet ( <||| ) (f: 'T1 -> 'T2 -> 'T3 -> 'TR)\n             (x: 'T1, y: 'T2, z: 'T3) : 'TR = f x y z\n\n[<Macro(typeof<M.Comp>)>]\nlet ( = ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( <> ) (a: 'T) (b: 'T) =  X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( < ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( > ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( <= ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( >= ) (a: 'T) (b: 'T) = X<bool>\n\n[<Inline>]\nlet ( >> ) (f: 'T1 -> 'T2) (g: 'T2 -> 'T3): 'T1->'T3 = \n    ()\n    fun x -> g (f x)\n\n[<Inline \"$a >> $b\">]\nlet inline ( >>> ) (a: 'T) (b: int) : 'T = a >>> b\n\n[<Inline>]\nlet ( @ ) a b = List.append a b\n\n[<Inline \"$a + $b\">]\nlet ( ^ ) (a: string) (b: string) : string = a + b\n\n[<Inline \"$a ^ $b\">]\nlet ( ^^^ ) (a: 'T) (b: 'T) = X<'T>\n\n[<Inline>]\nlet ( |> ) (x: 'T1) (f: 'T1 -> 'T2) : 'T2 = f x\n\n[<Inline>]\nlet ( ||> ) (x: 'T1, y: 'T2) (f: 'T1 -> 'T2 -> 'TR) : 'TR = f x y\n\n[<Inline \"$a | $b\">]\nlet ( ||| ) (a: 'T) (b: 'T) = X<'T>\n\n[<Inline>]\nlet ( |||> ) (x: 'T1, y: 'T2, z: 'T3)\n             (f: 'T1 -> 'T2 -> 'T3 -> 'TR) : 'TR = f x y z\n\n[<Inline \"+ $x\">]\nlet ( ~+ ) (x: 'T) = X<'T>\n\n[<Inline \"- $x\">]\nlet ( ~- ) (x: 'T) = X<'T>\n\n[<Inline \"~ $x\">]\nlet ( ~~~ ) (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Abs>)>]\n[<Inline \"Math.abs($x)\">]\nlet Abs (x: 'T) = X<'T>\n\n[<Inline \"Math.acos($x)\">]\nlet Acos (x: 'T) = X<'T>\n\n[<Inline \"Math.asin($x)\">]\nlet Asin (x: 'T) = X<'T>\n\n[<Inline \"Math.atan($x)\">]\nlet Atan (x: 'T) = X<'T>\n\n[<Inline \"Math.atan2($x, $y)\">]\nlet Atan2 (x: 'T1) (y: 'T1) = X<'T2>\n\n[<Inline \"$x\">]\nlet Box (x: 'T) = X<obj>\n\n[<Inline \"Math.ceil($x)\">]\nlet Ceiling (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Char>)>]\nlet ToChar (x: 'T) = X<char>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToByte (x: 'T) = X<byte>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToSByte (x: 'T) = X<sbyte>\n\n[<Inline>]\nlet Compare<'T> (a: 'T) (b: 'T) = Unchecked.compare a b\n\n[<Inline \"Math.cos($x)\">]\nlet Cos (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp($x)+Math.exp(-$x))/2\">]\nlet Cosh<'T> (x: 'T) = X<'T>\n\n[<Inline \"void ($x[0]--)\">]\nlet Decrement (x: ref<int>) = ()\n\n[<Inline>]\nlet DefaultArg x d =\n    match x with\n    | Some x -> x\n    | None   -> d\n\n[<Inline>]\nlet DefaultValueArg x d =\n    match x with\n    | ValueSome x -> x\n    | ValueNone   -> d\n\n[<Inline \"$x\">]\nlet Enum<'T when 'T : enum<int>> (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToDecimal (x: 'T) = X<decimal>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToDouble (x: 'T) = X<double>\n\n[<Inline \"Math.exp($x)\">]\nlet inline Exp (x: 'T) = X<'T>\n\nlet FailWith (msg: string) : 'T = raise (exn msg)\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToFloat (x: 'T) = X<float>\n\n[<Inline \"Math.floor($x)\">]\nlet Floor (x: 'T) = X<'T>\n\n[<Inline \"$x[0]\">]\nlet Fst (x: TupleProxy<'T1,'T2>) = X<'T1>\n\n[<Inline>]\nlet Hash<'T when 'T : equality> (x: 'T) = Unchecked.hash x\n\n[<Inline \"$x\">]\nlet Identity (x: 'T) = X<'T>\n\n[<Inline \"void $x\">]\nlet Ignore (x: 'T) = X<unit>\n\n[<Inline \"void ($x[0]++)\">]\nlet Increment (x: ref<int>) = ()\n\n[<Inline \"Infinity\">]\nlet Infinity = Unchecked.defaultof<double>\n\nlet InvalidOp (msg: string) : 'T = raise (System.InvalidOperationException(msg))\n\nlet InvalidArg (arg: string) (msg: string) : 'T = raise (System.ArgumentException(arg, msg))\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt (x: 'T) = X<int>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt16 (x: 'T) = X<int16>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToSingle (x: 'T) = X<single>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt32 (x: 'T) = X<int32>\n\nlet toUInt (x: float) : int =\n    (if x < 0. then Math.Ceil(x) else Math.Floor(x)) >>>. 0 |> As<int>\n\nlet toInt (x: float) : int =\n    let u = toUInt x\n    if u >= As<int> 2147483648L then u - As<int> 4294967296L else u\n\n[<Inline \"$x\">]\nlet ToEnum<'T> (x: int) = X<'T>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt64 (x: 'T) = X<int64>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToUInt16 (x: 'T) = X<uint16>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToUInt32 (x: 'T) = X<uint32>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToUInt64 (x: 'T) = X<uint64>\n\n[<Inline \"Math.log($x)\">]\nlet Log (x: 'T) = X<'T>\n\n[<Inline \"Math.log($x)/Math.log(10)\">]\nlet Log10 (x: 'T) = X<'T>\n\n[<Inline>]\nlet Max<'T when 'T : comparison> (a: 'T) (b: 'T) =\n    if a > b then a else b\n\n[<Inline>]\nlet Min<'T when 'T : comparison> (a: 'T) (b: 'T) =\n    if a < b then a else b\n\n[<Inline \"Infinity\">]\nlet InfinitySingle = single infinity\n\n[<Inline \"NaN\">]\nlet NaNSingle = single nan\n\n[<Inline \"NaN\">]\nlet NaN = nan\n\n[<Inline \"!$x\">]\nlet Not (x: bool) = X<bool>\n\nlet Pown<'T> (a: 'T) (n: int) =\n    let a = box a :?> double\n    let rec p n =\n        match n with\n        | 1 ->\n            a\n        | n when n % 2 = 0 ->\n            let b = p (n / 2)\n            b * b\n        | n ->\n            a * (p (n - 1))\n    p n\n\n[<Inline \"throw $e\">]\nlet Raise (e: exn) = X<'T>\n\n[<Inline \"[$x]\">]\nlet Ref (x: 'T) = X<ref<'T>>\n\n[<Inline \"Math.round($x)\">]\nlet Round (x: 'T) = X<'T>\n\n[<Inline \"$x\">]\nlet CreateSequence (x: seq<'T>) = X<seq<'T>>\n\n[<Macro(typeof<M.Sign>); JavaScript>]\nlet Sign<'T> (x: 'T) =\n    match As<int> x with\n    | 0            -> 0\n    | n when n < 0 -> -1\n    | _            -> 1\n\n[<Inline \"Math.sin($x)\">]\nlet Sin (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp($x)-Math.exp(-$x))/2\">]\nlet Sinh (x: 'T) = x\n\n[<Inline \"$x[1]\">]\nlet Snd (x: TupleProxy<'T1,'T2>) = X<'T2>\n\n[<Inline \"Math.sqrt($x)\">]\nlet Sqrt (x: 'T1) = X<'T2>\n\n[<Macro(typeof<M.String>)>]\nlet ToString (x: 'T) = X<string>\n\n[<Inline \"Math.tan($x)\">]\nlet inline Tan (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp(2*$x)-1)/(Math.exp(2*$x)+1)\">]\nlet Tanh (x: 'T) = X<'T>\n\nlet inline Truncate<'T> (x: 'T) =\n    if x <. 0 then Ceiling x else Floor x\n\n[<Inline \"$x\">]\nlet Unbox (x: obj) = X<'T>\n\n[<Inline \"$x == null\">]\nlet IsNull (x: 'T) = X<bool>\n\n[<Inline>]\nlet Using t f =\n    try f t finally (t :> System.IDisposable).Dispose()\n\n[<Name \"KeyValue\">]\nlet KeyValuePattern (kvp: System.Collections.Generic.KeyValuePair<_,_>) =\n    (kvp.Key, kvp.Value)\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Slice\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.Operators+OperatorIntrinsics, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OperatorIntrinsicsProxy \n\nopen WebSharper.JavaScript\n\n[<Inline \"$s.slice($st,$e)\">]\nlet Slice (s: 'T) (st: int) (e: int) = X<'T>\n\n[<Inline \"$s.slice($st)\">]\nlet SliceStart (s: 'T) (st: int) = X<'T>\n\n[<Name \"string\">]\nlet GetStringSlice (source: string) (start: int option) (finish: int option) =\n    match start, finish with\n    | Some s, Some f -> Slice source s (f + 1)\n    | Some s, None -> SliceStart source s\n    | None, Some f -> Slice source 0 (f + 1)\n    | _ -> \"\"\n\n[<Name \"array\">]\nlet GetArraySlice<'T> (source: 'T[]) (start: int option) (finish: int option) =\n    match start, finish with\n    | Some s, Some f -> Slice source s (f + 1)\n    | Some s, None -> SliceStart source s\n    | None, Some f -> Slice source 0 (f + 1)\n    | _ -> [||]\n\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<Name \"setArray\">]\nlet SetArraySlice (dst: _[]) start finish (src:_[]) = \n    let start  = (match start with None -> 0 | Some n -> n) \n    let finish = (match finish with None -> Array.length dst - 1 | Some n -> n) \n    F.SetArraySub dst start (finish - start + 1) src\n\n[<Name \"array2D\">]\nlet GetArraySlice2D (arr: _[,]) start1 finish1 start2 finish2 = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 arr - 1 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 arr - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    let len2 = (finish2 - start2 + 1)\n    F.GetArray2DSub arr start1 start2 len1 len2\n\n[<Name \"array2Dfix1\">]\nlet GetArraySlice2DFixed1 (arr: _[,]) fixed1 start2 finish2 = \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 arr - 1 | Some n -> n) \n    let len2 = (finish2 - start2 + 1)\n    let dst = JavaScript.Array(len2)\n    for j = 0 to len2 - 1 do \n        F.SetArray dst.Self j (F.GetArray2D arr fixed1 (start2+j))\n    dst.Self\n\n[<Name \"array2Dfix2\">]\nlet GetArraySlice2DFixed2 (arr: _[,]) start1 finish1 fixed2 = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 arr - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    let dst = JavaScript.Array(len1)\n    for i = 0 to len1 - 1 do \n        F.SetArray dst.Self i (F.GetArray2D arr (start1+i) fixed2)\n    dst.Self\n\n[<Name \"setArray2Dfix1\">]\nlet SetArraySlice2DFixed1 (dst: _[,]) fixed1 start2 finish2 (src:_[]) = \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 dst - 1 | Some n -> n) \n    let len2 = (finish2 - start2 + 1)\n    for j = 0 to len2 - 1 do\n        F.SetArray2D dst fixed1 (start2+j) (F.GetArray src j)\n\n[<Name \"setArray2Dfix2\">]\nlet SetArraySlice2DFixed2 (dst: _[,]) start1 finish1 fixed2 (src:_[]) = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 dst - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    for i = 0 to len1 - 1 do\n        F.SetArray2D dst (start1+i) fixed2 (F.GetArray src i)\n\n[<Name \"setArray2D\">]\nlet SetArraySlice2D (dst: _[,]) start1 finish1 start2 finish2 (src:_[,]) = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 dst - 1 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 dst - 1 | Some n -> n) \n    F.SetArray2DSub dst start1 start2 (finish1 - start1 + 1) (finish2 - start2 + 1) src\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.NameAttribute \"Option\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.OptionModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OptionModuleProxy\n\nopen WebSharper.JavaScript\n\n[<Inline>]\nlet Bind f x =\n    match x with\n    | Some x -> f x\n    | None   -> None\n\n[<Inline>]\nlet Contains v o =\n    match o with\n    | Some x -> x = v\n    | None -> false\n\n[<Inline \"$x ? 1 : 0\">]\nlet Count (x: option<_>) = X<int>\n\n[<Inline>]\nlet DefaultValue v o =\n    match o with\n    | Some x -> x \n    | None -> v\n\n[<Inline>]\nlet DefaultWith f o =\n    match o with\n    | Some x -> x \n    | None -> f()\n\n[<Inline>]\nlet Exists p x =\n    match x with\n    | Some x -> p x\n    | None   -> false\n\n[<Name \"filter\">]\nlet Filter f o =\n    match o with\n    | Some x when f x -> o\n    | _ -> None\n\n[<Inline>]\nlet Flatten o =\n    match o with\n    | Some x -> x\n    | None -> None\n\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (x: option<'T>) : 'S =\n    match x with\n    | Some x -> f s x\n    | None   -> s\n\n[<Name \"foldBack\">]\nlet FoldBack f x s =\n    match x with\n    | Some x -> f x s\n    | None   -> s\n\n[<Inline>]\nlet ForAll p x =\n    match x with\n    | Some x -> p x\n    | None   -> true\n\n[<Inline \"$x.$0\"; Pure>]\nlet GetValue (x: option<'T>) = X<'T>\n\n[<Inline \"$x==null\">]\nlet IsNone (x: option<'T>) = false\n\n[<Inline \"$x!=null\">]\nlet IsSome (x: option<'T>) =  false\n\n[<Inline>]\nlet Iterate p x =\n    match x with\n    | Some x -> p x\n    | None   -> ()\n\n[<Inline>]\nlet Map f x =\n    match x with\n    | Some x -> Some (f x)\n    | None -> None\n\n[<Inline>]\nlet Map2 f x y =\n    match x, y with\n    | Some x, Some y -> Some (f x y)\n    | _ -> None\n\n[<Inline>]\nlet Map3 f x y z =\n    match x, y, z with\n    | Some x, Some y, Some z -> Some (f x y z)\n    | _ -> None\n\n[<Name \"ofNullable\">]\nlet OfNullable (o: System.Nullable<'T>) =\n    if o ==. null then None else Some o.Value                   \n\n[<Name \"ofObj\">]\nlet OfObj o = \n    if o ==. null then None else Some o\n\n[<Inline>]\nlet OrElse v o =\n    match o with\n    | Some x -> o \n    | None -> v\n\n[<Inline>]\nlet OrElseWith f o =\n    match o with\n    | Some x -> o \n    | None -> f()\n\n[<Name \"toArray\">]\nlet ToArray x =\n    match x with\n    | Some x -> [|x|]\n    | None   -> [||]\n\n[<Name \"toList\">]\nlet ToList x =\n    match x with\n    | Some x -> [x]\n    | None   -> []\n\n[<Name \"toNullable\">]\nlet ToNullable o =\n    match o with\n    | Some v -> System.Nullable(v)\n    | _ -> System.Nullable()\n\n[<Name \"toObj\">]\nlet ToObj o = \n    match o with\n    | Some v -> v\n    | None -> null\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Queue\">]\nmodule private WebSharper.QueueProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.splice($offset,$len)\">]\nlet splice (arr: obj) (offset: int) (len: int) = X<unit>\n\n[<JavaScript>]\nlet Clear (a: obj) =\n    splice a 0 (a :?> obj []).Length\n\n[<JavaScript>]\nlet Contains (a: obj) (el: 'T) =\n    Seq.exists ((=) el) (a :?> seq<'T>)\n\n[<JavaScript>]\nlet CopyTo (a: obj) (array: 'T[]) (index: int) =\n    Array.blit (a :?> 'T []) 0 array index (a :?> 'T[]).Length\n\n[<Proxy(typeof<System.Collections.Generic.Queue<_>>)>]\n[<WebSharper.Name \"WebSharper.Queue\">]\ntype private QueueProxy<'T when 'T : equality>\n\n    [<Inline \"$data\">] private (data: 'T []) =\n\n    [<Inline \"[]\">]\n    private new () = QueueProxy [||]\n\n    [<Inline>]\n    private new (s: seq<'T>) = QueueProxy (Array.ofSeq s)\n\n    member this.Count with [<Inline \"$this.length\">] get () = X<int>\n\n    [<Inline>]\n    member this.Clear() = Clear this\n\n    [<Inline>]\n    member this.Contains(x: 'T) = Contains this x\n\n    [<Inline>]\n    member this.CopyTo(array: 'T [], index: int) = CopyTo this array index\n\n    [<Inline \"$this[0]\">]\n    member this.Peek() = X<'T>\n\n    [<Inline \"$this.shift()\">]\n    member this.Dequeue() = X<'T>\n\n    [<Inline \"$this.push($x)\">]\n    member this.Enqueue(x: 'T) = X<unit>\n\n    [<Inline \"$this.slice(0)\">]\n    member this.ToArray() = data\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule RandomHelpers =\n    [<Inline \"Math.floor(Math.random() * 2147483648)\">]\n    let Next() = X<int>\n    \n    [<Inline \"Math.floor(Math.random() * $maxValue)\">]\n    let NextMax (maxValue: int) = X<int>\n\n[<Name \"Random\">]\n[<Proxy(typeof<System.Random>)>]\ntype internal RandomProxy() =\n    member this.Next() = Next()\n\n    member this.Next maxValue =\n        if maxValue < 0 then\n            failwith \"'maxValue' must be greater than zero.\"\n        else NextMax maxValue\n\n    member this.Next (minValue: int, maxValue: int) =\n        if minValue > maxValue then\n            failwith \"'minValue' cannot be greater than maxValue.\"\n        else minValue + NextMax (maxValue - minValue)\n\n    member this.NextBytes (buffer: byte[]) =\n        for i = 0 to buffer.Length - 1 do\n            buffer.[i] <- As (NextMax 256)\n\n    [<Inline \"Math.random()\">]\n    member this.NextDouble() = X<float>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.NameAttribute \"Result\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.ResultModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ResultModuleProxy\n    \nlet Bind f r =\n    match r with\n    | Ok x -> f x\n    | Error e -> Error e\n        \nlet Map f r =\n    match r with\n    | Ok x -> Ok (f x)\n    | Error e -> Error e\n        \nlet MapError f r =\n    match r with\n    | Ok x -> Ok x\n    | Error e -> Error (f e)    \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.RuntimeHelpersProxy\n\n#nowarn \"40\"\n\nopen WebSharper.JavaScript\n\ntype IE<'T> = System.Collections.Generic.IEnumerator<'T>\n\n[<Inline>]\nlet safeDispose (x: System.IDisposable) =\n    if x <> null then x.Dispose()\n\n[<Name \"WebSharper.Seq.enumFinally\">]\nlet EnumerateThenFinally (s: seq<'T>) (f: unit -> unit) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        let enum = try Enumerator.Get s with e -> f(); raise e\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose(); f()) <| fun e ->\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false\n\n[<Name \"WebSharper.Seq.enumUsing\">]\nlet EnumerateUsing<'T1,'T2,'T3 when 'T1 :> System.IDisposable\n                                and 'T2 :> seq<'T3>>\n        (x: 'T1) (f: 'T1 -> 'T2) : seq<'T3> =\n\n    Enumerable.Of <| fun () ->\n        let enum = try Enumerator.Get (f x) with e -> x.Dispose(); raise e\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose(); x.Dispose()) <| fun e ->\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false\n\n[<Name \"WebSharper.Seq.enumWhile\">]\nlet EnumerateWhile (f: unit -> bool) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let rec next (en: Enumerator.T<IE<_>,'T>) =\n            match en.State with\n            | null ->\n                if f () then\n                    en.State <- Enumerator.Get s\n                    next en\n                else\n                    false\n            | e ->\n                if e.MoveNext() then\n                    en.Current <- e.Current\n                    true\n                else\n                    e.Dispose()\n                    en.State <- null\n                    next en\n        Enumerator.NewDisposing null (fun en -> safeDispose en.State) next)\n\n[<Name \"WebSharper.Control.createEvent\">]\nlet CreateEvent<'D, 'A when 'D : delegate<'A, unit> and 'D :> System.Delegate> \n        (add: 'D -> unit) \n        (remove: 'D -> unit)\n        (create: (obj -> 'A -> unit) -> 'D) : IEvent<'D, 'A> =\n    { new IEvent<'D, 'A> with\n        member this.AddHandler h = add h\n        member this.RemoveHandler h = remove h\n        member this.Subscribe (r: System.IObserver<'A>) =     \n            let h = create (fun _ args -> r.OnNext(args))\n            add h\n            { new System.IDisposable with member this.Dispose() = remove h }\n    }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Seq\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.SeqModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.SeqModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\n[<Inline>]\nlet safeDispose (x: System.IDisposable) =\n    if x <> null then x.Dispose()\n\nlet seqEmpty() =\n    failwith \"The input sequence was empty.\"\n\n[<Name \"allPairs\">]\nlet AllPairs (source1: seq<_>) (source2: seq<_>) =\n    let cached = Seq.cache source2\n    source1 |> Seq.collect (fun x -> cached |> Seq.map (fun y -> x,y))\n\n[<Name \"append\">]\nlet Append (s1: seq<'T>) (s2: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let e1 = Enumerator.Get s1\n        let first = ref true\n        Enumerator.NewDisposing e1 (fun x -> safeDispose x.State) (fun x ->\n            if x.State.MoveNext() then\n                x.Current <- x.State.Current\n                true\n            else \n                safeDispose x.State\n                x.State <- null\n                if !first then\n                    first := false\n                    x.State <- Enumerator.Get s2\n                    if x.State.MoveNext() then\n                        x.Current <- x.State.Current\n                        true\n                    else\n                        x.State.Dispose()\n                        x.State <- null\n                        false\n                else \n                    false)) \n\n[<Name \"average\">]\nlet Average<'T> (s: seq<'T>) : 'T =\n    let (count, sum) =\n        Seq.fold\n            (fun (n, s) x -> (n + 1, s + As<float> x))\n            (0, 0.)\n            s\n    if count = 0 then\n        seqEmpty()\n    else\n        As<'T> (sum / As<float> count)\n\n[<Name \"averageBy\">]\nlet AverageBy<'T,'U> (f: 'T -> 'U) (s: seq<'T>) : 'U =\n    let (count, sum) =\n        Seq.fold\n            (fun (n, s) x -> (n + 1, s + As<float> (f x)))\n            (0, 0.)\n            s\n    if count = 0 then\n        seqEmpty()\n    else\n        As<'U> (sum / As<float> count)\n\n[<Name \"cache\">]\nlet Cache<'T> (s: seq<'T>) : seq<'T> =\n    let cache = JavaScript.Array<'T>()\n    let o  = ref (Enumerator.Get s)\n    Enumerable.Of <| fun () ->\n        let next (e: Enumerator.T<_,_>) =\n            if e.State < cache.Length then\n                e.Current <- cache.[e.State]\n                e.State   <- e.State + 1\n                true\n            else\n                let en = !o\n                if en = null then false\n                elif en.MoveNext() then\n                    e.State   <- e.State + 1\n                    e.Current <- en.Current\n                    cache.Push(e.Current) |> ignore\n                    true\n                else\n                    en.Dispose()\n                    o := null\n                    false\n        Enumerator.New 0 next\n\n/// IEnumerable is not supported.\n[<Inline \"$i\">]\nlet Cast<'T> (i: System.Collections.IEnumerable) = X<seq<'T>>\n\n[<Inline>]\nlet Contains (el: 'T) (s: seq<'T>) =\n    SeqContains el s\n\n[<Name \"choose\">]\nlet Choose (f: 'T -> option<'U>) (s: seq<'T>) : seq<'U> =\n    s\n    |> Seq.collect (fun x ->\n        match f x with\n        | Some v -> [v]\n        | None   -> [])\n\n[<Inline>]\nlet ChunkBySize (size: int) (s: seq<'T>) = SeqChunkBySize size s\n\n[<Name \"collect\">]\nlet Collect f s = Seq.concat (Seq.map f s)\n\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (s1: seq<'T>) (s2: seq<'T>) : int =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    let mutable r = 0\n    let mutable loop = true\n    while loop && r = 0 do\n        match e1.MoveNext(), e2.MoveNext() with\n        | true, false ->\n            r <- 1\n        | false, true ->\n            r <- -1\n        | false, false ->\n            loop <- false\n        | true, true ->\n            r <- f e1.Current e2.Current\n    r\n\n[<Name \"concat\">]\nlet Concat (ss: seq<#seq<'T>>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let outerE = Enumerator.Get ss\n        let rec next (st: Enumerator.T<Enumerator.IE<'T>,'T>) =\n            match st.State with\n            | null ->\n                if outerE.MoveNext() then\n                    st.State <- Enumerator.Get outerE.Current\n                    next st\n                else\n                    outerE.Dispose()\n                    false\n            | innerE ->\n                if innerE.MoveNext() then\n                    st.Current <- innerE.Current\n                    true\n                else\n                    (st :> System.IDisposable).Dispose()\n                    st.State <- null\n                    next st\n        Enumerator.NewDisposing null (fun st -> \n            safeDispose st.State \n            safeDispose outerE) \n            next)\n\n[<Name \"countBy\">]\nlet CountBy (f: 'T -> 'K) (s: seq<'T>) : seq<'K * int> =\n    Seq.delay <| fun () ->\n        ArrayCountBy f (Array.ofSeq s) |> Seq.ofArray\n\n[<Name \"delay\">]\nlet Delay<'T> (f: unit -> seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () -> Enumerator.Get(f()))\n\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (s: seq<'T>) : seq<'T> =\n    Seq.distinctBy id s\n\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        let o  = Enumerator.Get s\n        let seen = System.Collections.Generic.HashSet<'K>()\n        Enumerator.NewDisposing () (fun _ -> o.Dispose()) <| fun e ->\n            if o.MoveNext() then\n                let mutable cur = o.Current\n                let mutable has = seen.Add(f cur)\n                while not has && o.MoveNext() do\n                    cur <- o.Current\n                    has <- seen.Add(f cur)\n                if has then\n                    e.Current <- cur\n                    true\n                else\n                    false\n            else\n                false\n\n[<Name \"splitInto\">]\nlet SplitInto count (s: seq<'T>) =\n    if count <= 0 then failwith \"Count must be positive\"\n    Seq.delay (fun () -> ArraySplitInto count (Array.ofSeq s) |> Seq.ofArray)   \n\n[<Inline>]\nlet Empty<'T> : seq<'T> = As [||]\n\n[<Name \"exactlyOne\">]\nlet ExactlyOne<'T> (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then\n        let x = e.Current\n        if e.MoveNext() then\n            invalidOp \"Sequence contains more than one element\"\n        else x\n    else invalidOp \"Sequence contains no elements\"\n\n[<Inline>]\nlet Except (itemsToExclude: seq<'T>) (s: seq<'T>) =\n    SeqExcept itemsToExclude s\n\n[<Name \"exists\">]\nlet Exists p (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = false\n    while not r && e.MoveNext() do\n        r <- p e.Current\n    r\n\n[<Name \"exists2\">]\nlet Exists2 p (s1: seq<_>) (s2: seq<_>) =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    let mutable r = false\n    while not r && e1.MoveNext() && e2.MoveNext() do\n        r <- p e1.Current e2.Current\n    r\n\n[<Name \"filter\">]\nlet Filter (f: 'T -> bool) (s: seq<'T>) =\n    Enumerable.Of <| fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> o.Dispose()) <| fun e ->\n            let mutable loop = o.MoveNext()\n            let mutable c    = o.Current\n            let mutable res  = false\n            while loop do\n                if f c then\n                    e.Current <- c\n                    res       <- true\n                    loop      <- false\n                else\n                    if o.MoveNext() then\n                        c <- o.Current\n                    else\n                        loop <- false\n            res\n\n[<Name \"find\">]\nlet Find p (s: seq<_>) =\n    match Seq.tryFind p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"findIndex\">]\nlet FindIndex p (s: seq<_>) =\n    match Seq.tryFindIndex p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (x: 'S) (s: seq<'T>) : 'S =\n    let mutable r = x\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        r <- f r e.Current\n    r\n\n[<Name \"forall\">]\nlet ForAll p s =\n    not (Seq.exists (fun x -> not (p x)) s)\n\n[<Name \"forall2\">]\nlet ForAll2 p s1 s2 =\n    not (Seq.exists2 (fun x y -> not (p x y)) s1 s2)\n\n[<Name \"groupBy\">]\nlet GroupBy (f: 'T -> 'K when 'K : equality) (s: seq<'T>) : seq<'K * seq<'T>> =\n    Seq.delay <| fun () ->\n        ArrayGroupBy f (Array.ofSeq s) |> As\n\n[<Name \"head\">]\nlet Head (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if e.MoveNext() then e.Current else InsufficientElements()\n\n[<Name \"init\">]\nlet Initialize (n: int) (f: int -> 'T) : seq<'T> =\n    Seq.take n (Seq.initInfinite f)\n\n[<Name \"initInfinite\">]\nlet InitializeInfinite (f: int -> 'T) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        Enumerator.New 0 <| fun e ->\n            e.Current <- f e.State\n            e.State   <- e.State + 1\n            true\n\n[<Name \"isEmpty\">]\nlet IsEmpty (s: seq<'T>) : bool =\n    use e = Enumerator.Get s\n    not (e.MoveNext())\n\n[<Name \"iter\">]\nlet Iterate p (s: seq<_>) =\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        p e.Current\n\n[<Name \"iter2\">]\nlet Iterate2 p (s1: seq<_>) (s2: seq<_>) =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    while e1.MoveNext() && e2.MoveNext() do\n        p e1.Current e2.Current\n\n[<Name \"iteri\">]\nlet IterateIndexed p (s: seq<_>) =\n    let mutable i = 0\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        p i e.Current\n        i <- i + 1\n\n[<Inline>]\nlet Last (s: seq<_>) =\n    SeqLast s\n\n[<Name \"length\">]\nlet Length (s: seq<_>) =\n    let mutable i = 0\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        i <- i + 1\n    i\n\n[<Name \"map\">]\nlet Map (f: 'T -> 'U) (s: seq<'T>) : seq<'U> =\n    Enumerable.Of <| fun () ->\n        let en = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> en.Dispose()) <| fun e ->\n            if en.MoveNext() then\n                e.Current <- f en.Current\n                true\n            else\n                false\n\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> 'T -> 'U) (s: seq<'T>) : seq<'U> =\n    Seq.map2 f (Seq.initInfinite id) s\n\n[<Name \"map2\">]\nlet Map2 (f: 'T -> 'U -> 'V) (s1: seq<'T>) (s2: seq<'U>) : seq<'V> =\n    Enumerable.Of <| fun () ->\n        let e1 = Enumerator.Get s1\n        let e2 = Enumerator.Get s2\n        Enumerator.NewDisposing () (fun _ -> e1.Dispose(); e2.Dispose()) <| fun e ->\n            if e1.MoveNext() && e2.MoveNext() then\n                e.Current <- f e1.Current e2.Current\n                true\n            else\n                false\n\n[<Name \"maxBy\">]\nlet MaxBy (f: 'T -> 'U) (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    let mutable fm = f m\n    while e.MoveNext() do\n        let x = e.Current\n        let fx = f x\n        if fx > fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"minBy\">]\nlet MinBy (f: 'T -> 'U) (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    let mutable fm = f m\n    while e.MoveNext() do\n        let x = e.Current\n        let fx = f x\n        if fx < fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"max\">]\nlet Max (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    while e.MoveNext() do\n        let x = e.Current\n        if x > m then\n            m <- x\n    m\n\n[<Name \"min\">]\nlet Min (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    while e.MoveNext() do\n        let x = e.Current\n        if x < m then\n            m <- x\n    m\n\n[<Name \"nth\">]\nlet Get index (s: seq<'T>) =\n    if index < 0 then\n        failwith \"negative index requested\"\n    let mutable pos = -1\n    use e = Enumerator.Get s\n    while pos < index do\n        if not (e.MoveNext()) then\n            InsufficientElements()\n        pos <- pos + 1\n    e.Current\n\n[<Inline>]\nlet Item index (s: seq<'T>) = Get index s\n\n[<Inline \"$a\">]\n[<Name \"ofArray\">]\nlet OfArray (a: 'T[]) = X<seq<'T>>\n\n[<Inline \"$l\">]\n[<Name \"ofList\">]\nlet OfList (l: list<'T>) = X<seq<'T>>\n\n[<Name \"pairwise\">]\nlet Pairwise (s: seq<'T>) : seq<'T * 'T> =\n    Seq.windowed 2 s\n    |> Seq.map (fun x -> (x.[0], x.[1]))\n\n[<Name \"pick\">]\nlet Pick p (s: seq<_>) =\n    match Seq.tryPick p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"readOnly\">]\nlet ReadOnly (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () -> Enumerator.Get s)\n\n[<Name \"reduce\">]\nlet Reduce (f: 'T -> 'T -> 'T) (source: seq<'T>) : 'T =\n    use e = Enumerator.Get source\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable r = e.Current\n    while e.MoveNext() do\n        r <- f r e.Current\n    r\n\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (x: 'S) (s: seq<'T>) : seq<'S> =\n    Enumerable.Of <| fun () ->\n        let en = Enumerator.Get s\n        Enumerator.NewDisposing false (fun _ -> en.Dispose()) <| fun e ->\n            if e.State then\n                if en.MoveNext() then\n                    e.Current <- f e.Current en.Current\n                    true\n                else\n                    false\n            else\n                e.Current <- x\n                e.State <- true\n                true\n\n[<Inline \"[$x]\">]\n[<Name \"singleton\">]\nlet Singleton<'T> (x: 'T) = X<seq<'T>>\n\n[<Name \"skip\">]\nlet Skip (n: int) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> o.Dispose()) (fun e ->\n            if e.State then\n                for i = 1 to n do\n                    if not (o.MoveNext()) then\n                        InsufficientElements()\n                e.State <- false\n            if o.MoveNext() then\n                e.Current <- o.Current\n                true\n            else\n                false))\n\n[<Name \"skipWhile\">]\nlet SkipWhile (f: 'T -> bool) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> o.Dispose()) (fun e ->\n            if e.State then\n                let mutable go = true\n                let mutable empty = false\n                while go do\n                    if o.MoveNext() then\n                        if not (f o.Current) then go <- false \n                    else \n                        go <-false\n                        empty <- true\n                e.State <- false\n                if empty then \n                    false \n                else\n                    e.Current <- o.Current\n                    true\n            else\n                if o.MoveNext() then\n                    e.Current <- o.Current\n                    true\n                else\n                    false))\n\n[<Name \"sort\">]\nlet Sort<'T when 'T : comparison> (s: seq<'T>) =\n    Seq.sortBy id s\n\n[<Name \"sortBy\">]\nlet SortBy<'T, 'U when 'U: comparison>\n        (f: 'T -> 'U) (s: seq<'T>) : seq<'T> =\n    Seq.delay (fun () ->\n        let array = Array.ofSeq s\n        Array.sortInPlaceBy f array\n        array :> _)\n\n[<Name \"sortByDescending\">]\nlet SortByDescending<'T, 'U when 'U: comparison>\n        (f: 'T -> 'U) (s: seq<'T>) : seq<'T> =\n    Seq.delay (fun () ->\n        let array = Array.ofSeq s\n        ArraySortInPlaceByDescending f array\n        array :> _)\n\n[<Name \"sortDescending\">]\nlet SortDescending<'T when 'T : comparison> (s: seq<'T>) =\n    SortByDescending id s\n\n[<Name \"sum\">]\nlet Sum<'T> (s: seq<'T>) : 'T =\n    box (Seq.fold (fun s x -> s + (box x :?> _)) 0. s) :?> _\n\n[<Name \"sumBy\">]\nlet SumBy<'T,'U> (f: 'T -> 'U) (s: seq<'T>) : 'U =\n    box (Seq.fold (fun s x -> s + (box (f x) :?> _)) 0. s) :?> _\n\n[<Name \"take\">]\nlet Take (n: int) (s: seq<'T>) : seq<'T> =\n    if n < 0 then\n        InputMustBeNonNegative()\n    Enumerable.Of (fun () ->\n        let e = ref (Enumerator.Get s)\n        Enumerator.NewDisposing 0 (fun _ -> safeDispose !e) (fun o ->\n            o.State <- o.State + 1\n            if o.State > n then false else\n            let en = !e\n            if en = null then InsufficientElements()\n            elif en.MoveNext() then\n                o.Current <- en.Current\n                if o.State = n then\n                    en.Dispose()\n                    e := null\n                true\n            else\n                en.Dispose()\n                e := null\n                InsufficientElements()\n        )\n    )\n\n[<Name \"takeWhile\">]\nlet TakeWhile (f: 'T -> bool) (s: seq<'T>) : seq<'T> =\n    seq {\n        use e = Enumerator.Get s\n        while e.MoveNext() && f e.Current do\n            yield e.Current\n    }\n\n[<Inline>]\nlet ToArray (s: seq<'T>) =\n    Array.ofSeq s\n\n[<Inline>]\nlet ToList (s: seq<'T>) = List.ofSeq s\n\n[<Name \"transpose\">]\nlet Transpose (x: seq<#seq<'T>>) : seq<seq<'T>> =\n    Seq.delay (fun () ->\n        ArrayTranspose (Array.ofSeq (x |> Seq.map Array.ofSeq)) |> As\n    )\n\n[<Name \"truncate\">]\nlet Truncate (n: int) (s: seq<'T>) : seq<'T> =\n    seq {\n        use e = Enumerator.Get s\n        let i = ref 0\n        while e.MoveNext() && !i < n do\n            incr i\n            yield e.Current\n    }\n\n[<Name \"tryFind\">]\nlet TryFind ok (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = None\n    while r.IsNone && e.MoveNext() do\n        let x = e.Current\n        if ok x then\n            r <- Some x\n    r\n\n[<Inline>]\nlet TryFindBack ok (s: seq<_>) =\n    ArrayTryFindBack ok (Array.ofSeq s) \n\n[<Inline>]\nlet TryHead (s: seq<'T>) = SeqTryHead s\n\n[<Inline>]\nlet TryItem i (s: seq<'T>) = SeqTryItem i s\n\n[<Inline>]\nlet TryLast (s: seq<'T>) =  SeqTryLast s\n\n[<Name \"findBack\">]\nlet FindBack p (s: seq<_>) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"tryFindIndex\">]\nlet TryFindIndex ok (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable loop = true\n    let mutable i = 0\n    while loop && e.MoveNext() do\n        let x = e.Current\n        if ok x then\n            loop <- false\n        else\n            i <- i + 1\n    if loop then None else Some i\n\n[<Inline>]\nlet TryFindIndexBack ok (s: seq<_>) =\n    ArrayTryFindIndexBack ok (Array.ofSeq s) \n\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: seq<_>) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"tryPick\">]\nlet TryPick f (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = None\n    while r = None && e.MoveNext() do\n        r <- f e.Current\n    r\n\n[<Name \"unfold\">]\nlet Unfold<'S, 'T> (f: 'S -> option<'T * 'S>) (s: 'S) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        Enumerator.New s <| fun e ->\n            match f e.State with\n            | Some (t, s) ->\n                e.Current <- t\n                e.State  <- s\n                true\n            | None ->\n                false\n\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: seq<'T>) : seq<'T []> =\n    if windowSize <= 0 then\n        failwith \"The input must be positive.\"\n    seq {\n        use e = Enumerator.Get s\n        let q = new System.Collections.Generic.Queue<'T>()\n        while q.Count < windowSize && e.MoveNext() do\n            q.Enqueue e.Current\n        if q.Count = windowSize then\n            yield q.ToArray()\n            while e.MoveNext() do\n                ignore (q.Dequeue())\n                q.Enqueue e.Current\n                yield q.ToArray()\n    }\n\n[<Name \"zip\">]\nlet Zip (s1: seq<'T>) (s2: seq<'U>) =\n    Seq.map2 (fun x y -> x, y) s1 s2\n\n[<Name \"map3\">]\nlet Map3 f (s1: seq<_>) (s2: seq<_>) (s3: seq<_>) =\n    Enumerable.Of <| fun () ->\n        let e1 = Enumerator.Get s1\n        let e2 = Enumerator.Get s2\n        let e3 = Enumerator.Get s3\n        Enumerator.NewDisposing () (fun _ -> e1.Dispose(); e2.Dispose(); e3.Dispose()) <| fun e ->\n            if e1.MoveNext() && e2.MoveNext() && e3.MoveNext() then\n                e.Current <- f e1.Current e2.Current e3.Current\n                true\n            else\n                false\n\n[<Name \"zip3\">]\nlet Zip3 (s1: seq<'T>) (s2: seq<'U>) (s3: seq<'V>) : seq<'T * 'U * 'V> =\n    Map3 (fun x y z -> x, y, z) s1 s2 s3\n\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> (f: 'S -> 'T1 -> 'T2 -> 'S)\n                        (s: 'S)\n                        (s1: seq<'T1>)\n                        (s2: seq<'T2>) : 'S =\n    Array.fold2 f s (Array.ofSeq s1) (Array.ofSeq s2)\n\n[<Name \"foldBack\">]\nlet FoldBack f (s: seq<_>) state =\n    Array.foldBack f (Array.ofSeq s) state\n\n[<Name \"foldBack2\">]\nlet FoldBack2 f (s1: seq<_>) (s2: seq<_>) s =\n    Array.foldBack2 f (Array.ofSeq s1) (Array.ofSeq s2) s\n\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (s1: seq<_>) (s2: seq<_>) =\n    let mutable i = 0\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    while e1.MoveNext() && e2.MoveNext() do\n        f i e1.Current e2.Current\n        i <- i + 1\n\n[<Name \"mapi2\">]\nlet MapIndexed2 f (s1: seq<_>) (s2: seq<_>) =\n    Map3 f (Seq.initInfinite id) s1 s2\n\n[<Name \"mapFold\">]\nlet MapFold<'T,'S,'R> f zero s =\n    ArrayMapFold<'T,'S,'R> f zero (Seq.toArray s)\n    |> As<seq<'R> * 'S>\n\n[<Name \"mapFoldBack\">]\nlet MapFoldBack<'T,'S,'R> f s zero =\n    ArrayMapFoldBack<'T,'S,'R> f (Seq.toArray s) zero\n    |> As<seq<'R> * 'S>\n\n[<Name \"permute\">]\nlet Permute f (s: seq<_>) =\n    Seq.delay (fun () -> Seq.ofArray (Array.permute f (Array.ofSeq s)))\n\n[<Name \"reduceBack\">]\nlet ReduceBack f (s: seq<_>) =\n    Array.reduceBack f (Array.ofSeq s)\n\n[<Name \"replicate\">]\nlet Replicate size value =\n    if size < 0 then InputMustBeNonNegative()\n    seq { for i in 0 .. size - 1 -> value }\n\n[<Name \"rev\">]\nlet Reverse (s: seq<'T>) =\n    Seq.delay (fun () -> Array.rev (Seq.toArray s) |> Array.toSeq)\n    \n[<Name \"scanBack\">]\nlet ScanBack f (l: seq<_>) s =\n    Seq.delay (fun () -> Seq.ofArray (Array.scanBack f (Array.ofSeq l) s))\n\n[<Name \"indexed\">]\nlet Indexed (s : seq<'T>) : seq<int * 'T> =\n    Seq.mapi (fun a b -> (a, b)) s\n\n[<Name \"sortWith\">]\nlet SortWith f (s: seq<_>) =\n    Seq.delay (fun () -> \n        let a = Array.ofSeq s\n        Array.sortInPlaceWith f a\n        Seq.ofArray a)\n\n[<Name \"tail\">]\nlet Tail<'T> (s : seq<'T>) : seq<'T> =\n    Seq.skip 1 s\n\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : seq<'T>) : seq<'T> =\n    Filter predicate s\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Stack\">]\nmodule private WebSharper.StackProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.splice($offset,$len)\">]\nlet splice (arr: obj) (offset: int) (len: int) = X<unit>\n\n[<JavaScript>]\nlet Clear (stack: obj) =\n    splice stack 0 (stack :?> obj []).Length\n\n[<JavaScript>]\nlet Contains (stack: obj) (el: 'T) =\n    Seq.exists ((=) el) (stack :?> 'T[])\n    \n[<JavaScript>]\nlet CopyTo (stack: obj) (array: 'T[]) (index: int) =\n    Array.blit array 0 array index (stack :?> 'T[]).Length\n\n[<Proxy(typeof<System.Collections.Generic.Stack<_>>)>]\n[<Name \"WebSharper.Stack\">]\ntype private StackProxy<'T when 'T : equality> =\n\n    [<Inline \"[].concat($s).reverse()\">]\n    private new (s: 'T []) = {}\n\n    [<Inline \"[]\">]\n    new () = {}\n\n    [<Inline>]\n    private new (s: seq<'T>) = StackProxy (Array.ofSeq s)\n\n    member this.Count with [<Inline \"$this.length\">] get () = X<int>\n\n    [<Inline>]\n    member this.Clear() = Clear this\n\n    [<Inline>]\n    member this.Contains(x: 'T) : bool = Contains this x\n\n    [<Inline>]\n    member this.CopyTo(array: 'T [], index) = CopyTo this array index\n\n    [<Inline \"$this[0]\">]\n    member this.Peek() = X<'T>\n\n    [<Inline \"$this.shift()\">]\n    member this.Pop() = X<'T>\n\n    [<Inline \"$this.unshift($x)\">]\n    member this.Push(x: 'T) = X<unit>\n\n    [<Inline \"$this.slice(0)\">]\n    member this.ToArray() = X<'T[]>\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Strings\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.StringModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.StringProxy\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Core.Macros\n\nlet Compare (x: string) (y: string) = compare x y\n\nlet CopyTo (s: string) (o: int) (d: char []) (off: int) (ct: int) =\n    Array.blit (s.ToCharArray()) o d off ct\n\n[<Direct \"$x.substring($x.length - $s.length) == $s\">]\nlet EndsWith (x: string) (s: string) = X<bool>\n\n[<Direct \"$s.indexOf($c,$i)\">]\nlet IndexOf (s: string) (c: char) (i: int) = X<int>\n\n[<Direct \"$x.substring(0,$index-1)+$s+$x.substring($index)\">]\nlet Insert (x: string) (index: int) (s: string) = X<string>\n\n[<Direct \"$x == null || $x == ''\">]\nlet IsNullOrEmpty (x: string) = X<bool>\n\n[<Direct \"\"\"$x == null || /^\\s*$/.test($x)\"\"\">]\nlet IsNullOrWhiteSpace (x: string) = X<bool>\n\n[<Direct \"$s.lastIndexOf($c,$i)\">]\nlet LastIndexOf (s: string) (c: char) (i: int) = X<int>\n\n[<Direct \"$n>$s.length?Array($n-$s.length+1).join($c)+$s:$s\">]\nlet PadLeftWith (s: string) (n: int) (c: char) = X<string>\n\nlet PadLeft (s: string) (n: int) =\n    PadLeftWith s n ' '\n\n[<Direct \"$n>$s.length?$s+Array($n-$s.length+1).join($c):$s\">]\nlet PadRightWith (s: string) (n: int) (c: char) = X<string>\n\nlet PadRight (s: string) (n: int) =\n    PadRightWith s n ' '\n\n[<Direct \"$x.substring(0,$ix) + $x.substring($ix+$ct)\">]\nlet Remove (x: string) (ix: int) (ct: int) = X<string>\n\n[<Direct \"$string.replace($search,$replace)\">]\nlet ReplaceOnce string search replace = X<string>\n\nlet Replace (subject: string) (search: string) (replace: string) =\n    let rec replaceLoop (subj: string) =\n        let index = subj.IndexOf(search)\n        if index <> -1 then\n            let replaced = ReplaceOnce subj search replace\n            let nextStartIndex = index + replace.Length\n            (replaced.Substring(0, index + replace.Length)) +\n                (replaceLoop (replaced.Substring(nextStartIndex)))\n        else subj\n    replaceLoop subject\n\nlet ReplaceChar (s: string) (oldC: char) (newC: char) =\n    Replace s (string oldC) (string newC)\n\n[<Direct \"$s.substr($ix,$ct)\">]\nlet Substring (s: string) (ix: int) (ct: int) = X<string>\n\n[<Direct \"$t.substring(0,$s.length) == $s\">]\nlet StartsWith (t: string) (s: string) = X<bool>\n\nlet ToCharArray (s: string) = Array.init s.Length (fun x -> s.[x])\n\nlet ToCharArrayRange (s: string) (startIndex: int) (length: int) =\n    Array.init length (fun i -> s.[startIndex + i])\n\n[<Direct @\"$s.replace(/^\\s+/,'').replace(/\\s+$/,'')\">]\nlet Trim (s: string) = X<string>\n\n[<Direct @\"$s.replace(/^\\s+/,'')\">]\nlet TrimStartWS (s: string) = X<string>\n\nlet TrimStart (s: string) (t: char[]) =\n    if t = null || Array.isEmpty t then\n        TrimStartWS s\n    else\n        let mutable i = 0\n        let mutable go = true\n        while i < s.Length && go do\n            let c = s.[i]\n            if t |> Array.exists ((=) c) then\n                i <- i + 1 \n            else go <- false\n        s.Substring(i)\n\n[<Direct @\"$s.replace(/\\s+$/,'')\">]\nlet TrimEndWS (s: string) = X<string>\n\nlet TrimEnd (s: string) (t: char[]) =\n    if t = null || Array.isEmpty t then\n        TrimEndWS s\n    else \n        let mutable i = s.Length - 1\n        let mutable go = true\n        while i >= 0 && go do\n            let c = s.[i]\n            if t |> Array.exists ((=) c) then\n                i <- i - 1 \n            else go <- false\n        s.Substring(0, i + 1)\n\n[<Direct \"$values.join($sep)\">]\nlet Join (sep: string) (values: string []) = X<string>\n\n[<Direct \"$str.split($pat)\">]\nlet SplitWith (str: string) (pat: obj) = X<string[]>\n\n[<Inline \"new RegExp($pat)\">]\nlet MakeRegexp (pat: string) = X<obj>\n\n[<Direct @\"$s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\">]\nlet RegexEscape (s: string) = X<string>\n\nlet Split (s: string) (pat: obj) (opts: System.StringSplitOptions) =\n    let res = SplitWith s pat\n    if opts ===. System.StringSplitOptions.RemoveEmptyEntries then\n        Array.filter (fun x -> x !==. \"\") res\n    else\n        res\n\nlet SplitChars (s: string) (sep: char[]) (opts: System.StringSplitOptions) =\n    let re = \"[\" + RegexEscape (new System.String(sep)) + \"]\"\n    Split s (MakeRegexp re) opts\n\nlet SplitStrings (s: string) (sep: string[]) (opts: System.StringSplitOptions) =\n    let re = String.concat \"|\" (Array.map RegexEscape sep)\n    Split s (MakeRegexp re) opts\n\nlet Filter f (s: string) =\n    System.String.Concat(s |> Seq.choose (fun c -> if f c then Some (string c) else None) |> Array.ofSeq)\n\n[<Inline \"$text.replace($pattern, $replace)\">]\nlet ReplaceString (pattern: RegExp) (replace: 'obj) (text: string) = X<string>\n\nlet SFormat (format: string) (args: obj[]) =\n    let pattern = RegExp(\"{(0|[1-9]\\d*)(?:,(-?[1-9]\\d*|0))?(?::(.*?))?}\", \"g\")\n    format\n    |> ReplaceString pattern (FuncWithArgs(fun (_, i, w) ->\n        let r = string args.[JS.Plus i]\n\n        if w <> JS.Undefined then\n            let w1 = JS.Plus w\n            let w2 = abs w1\n\n            if w2 > r.Length then\n                if w1 > 0 then r.PadLeft(w2)\n                else r.PadRight(w2)\n            else r\n        else r\n    ))\n\n[<Proxy(typeof<string>)>]\ntype private StringProxy =\n\n    [<Inline \"''\">]\n    new () = {}\n\n    [<Inline \"$chars.join('')\">]\n    new (chars: char []) = {}\n\n    [<Inline>]\n    static member CtorProxy(ch: char, n: int) = String.replicate n (string ch)\n\n    [<Inline \"$chars.slice($i, $i + $j).join('')\">]\n    new (chars: char [], i: int, j: int) = {}\n\n    member this.Chars  with [<Inline \"$this[$pos]\">]\n                            get (pos: int) = X<char>\n\n    [<Inline \"$this\">]\n    member this.Clone() = this :> obj\n\n    [<Inline \"$this\">]\n    member this.Copy() = this\n\n    [<Inline>]\n    static member Compare(x: string, y: string) =\n        Unchecked.compare x y\n\n    [<Inline>]\n    static member Compare(x: string, y: string, b: bool) =\n        if b then\n            Unchecked.compare (x.ToLower()) (y.ToLower())\n        else\n        Unchecked.compare x y\n\n    [<Inline>]\n    member this.CompareTo(s: string) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    member this.CompareTo(s: obj) =\n        Unchecked.compare (this :> obj) s\n\n    [<Inline>]\n    static member Concat(strings: string seq) =\n        Join \"\" (Array.ofSeq strings)\n\n    [<Inline>]\n    static member Concat<'T>(objs: 'T seq) : string =\n        Join \"\" (Array.ofSeq (objs |> Seq.map (fun o -> o.ToString())))\n\n    [<Inline>]\n    static member Concat(s1: string, s2: string) = s1 + s2\n\n    [<Inline>]\n    static member Concat(s1: string, s2: string, s3: string) = s1 + s2 + s3\n\n    [<Inline>]\n    static member Concat(s1: string, s2: string, s3: string, s4: string) = s1 + s2 + s3 + s4\n\n    [<Inline>]\n    static member Concat(o1: obj) = string o1\n\n    [<Inline>]\n    static member Concat(o1: obj, o2: obj) = string o1 + string o2\n\n    [<Inline>]\n    static member Concat(o1: obj, o2: obj, o3: obj) = string o1 + string o2 + string o3\n\n    [<Inline>]\n    static member Concat(o1: obj, o2: obj, o3: obj, o4: obj) = string o1 + string o2 + string o3 + string o4\n\n    [<Inline \"$strings.join('')\">]\n    static member Concat([<System.ParamArray>] strings: string[]) = X<string>\n\n    [<Inline>]\n    static member Concat(objs: obj[]) =\n        Join \"\" (As<string[]> objs)\n\n    [<Inline \"$this.indexOf($s) != -1\">]\n    member this.Contains(s: string) = X<bool>\n\n    [<Inline>]\n    member this.CopyTo(s: int, d: char [], off: int, ct: int) =\n        CopyTo (As this) s d off ct\n\n    static member Empty with [<Inline \"''\">] get () = X<string>\n\n    [<Inline>]\n    member this.EndsWith(other: string) = EndsWith (As this) other\n\n    [<Inline \"$x == $y\">]\n    static member Equals(x: string, y: string) = X<bool>\n\n    [<Inline \"$this == $s\">]\n    member this.Equals(s: string) = X<bool>\n\n    [<Inline \"$this === $s\">]\n    override this.Equals(s: obj) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Inline>]\n    member this.GetEnumerator() = Enumerator.Get (unbox<seq<char>> this) |> As<System.CharEnumerator>\n\n    [<Inline \"$this.indexOf($s)\">]\n    member this.IndexOf(s: string) = X<int>\n\n    [<Inline \"$this.indexOf($c)\">]\n    member this.IndexOf(c: char) = X<int>\n\n    [<Inline \"$this.indexOf($s,$i)\">]\n    member this.IndexOf(s: string, i: int) = X<int>\n\n    [<Inline>]\n    member this.IndexOf(c: char, i: int) = IndexOf (As this) c i\n\n    [<Inline>]\n    static member IsNullOrEmpty(x: string) = IsNullOrEmpty x\n\n    [<Inline>]\n    static member IsNullOrWhiteSpace(x: string) = IsNullOrWhiteSpace x\n\n    member this.Item\n        with    [<Inline \"$this[$pos]\">]\n                get (pos: int) = X<char>\n\n    [<Inline>]\n    static member Join(sep: string, values: string seq) =\n        Join sep (Array.ofSeq values)\n\n    [<Inline>]\n    static member Join(sep: string, [<System.ParamArray>] values: string[]) =\n        Join sep values\n\n    [<Inline \"$this.lastIndexOf($s)\">]\n    member this.LastIndexOf(s: string) = X<int>\n\n    [<Inline \"$this.lastIndexOf($c)\">]\n    member this.LastIndexOf(c: char) = X<int>\n\n    [<Inline \"$this.lastIndexOf($s,$i)\">]\n    member this.LastIndexOf(s: string, i: int) = X<int>\n\n    [<Inline>]\n    member this.LastIndexOf(c: char, i: int) =\n        LastIndexOf (As this) c i\n\n    member this.Length with [<Inline \"$this.length\">]\n                            get () = X<int>\n\n    [<Inline>]\n    member this.PadLeft(i: int) =\n        PadLeft (As this) i\n\n    [<Inline>]\n    member this.PadLeft(i: int, c: char) =\n        PadLeftWith (As this) i c\n\n    [<Inline>]\n    member this.PadRight(i: int) =\n        PadRight (As this) i\n\n    [<Inline>]\n    member this.PadRight(i: int, c: char) =\n        PadRightWith (As this) i c\n\n    [<Inline \"$this.substring(0,$ix)\">]\n    member this.Remove(ix: int) = X<string>\n\n    [<Inline>]\n    member this.Remove(ix: int, count: int) = Remove (As this) ix count\n\n    [<Inline>]\n    member this.ToCharArray() = ToCharArray (As this)\n\n    [<Inline>]\n    member this.Replace(subj: string, repl: string) =\n        Replace (As this) subj repl\n\n    [<Inline>]\n    member this.Replace(subj: char, repl: char) =\n        ReplaceChar (As this) subj repl\n\n    [<Inline>]\n    member this.Split([<System.ParamArray>] sep: char[]) =\n        SplitChars (As this) sep  System.StringSplitOptions.None\n\n    [<Inline>]\n    member this.Split(sep: char[], opts: System.StringSplitOptions) =\n        SplitChars (As this) sep opts\n\n    [<Inline>]\n    member this.Split(sep: string[], opts: System.StringSplitOptions) =\n        SplitStrings (As this) sep opts\n\n    [<Inline>]\n    member this.StartsWith(s: string) =\n        StartsWith (As this) s\n\n    [<Inline \"$this.substring($ix)\">]\n    member this.Substring(ix: int) = X<string>\n\n    [<Inline>]\n    member this.Substring(ix: int, ct: int) =\n        Substring (As this) ix ct\n\n    [<Inline>]\n    member this.ToCharArray(i: int, l: int) =\n        ToCharArrayRange (As this) i l\n\n    [<Inline \"$this\">]\n    override this.ToString() = X<string>\n    \n    [<Inline \"$this.toLowerCase()\">]\n    member this.ToLower() = X<string>\n\n    [<Inline \"$this.toUpperCase()\">]\n    member this.ToUpper() = X<string>\n\n    [<Inline>]\n    member this.Trim() = Trim (As this)\n\n    [<Inline>]\n    member this.TrimStart(t: char[]) = TrimStart (As this) t\n\n    [<Inline>]\n    member this.TrimEnd(t: char[]) = TrimEnd (As this) t\n\n    [<Inline \"$a + $b\">]\n    static member (+) (a: string, b: string) = X<string>\n\n    [<Inline>]\n    static member (+) (a: obj, b: string) = string a + b \n\n    [<Inline>]\n    static member (+) (a: string, b: obj) = a + string b\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality(a: string, b: string) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality(a: string, b: string) = X<bool>\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, [<System.ParamArray>] arguments: obj []) = SFormat format arguments\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, arg0: obj): string = SFormat format [|arg0|]\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, arg0: obj, arg1: obj): string = SFormat format [|arg0; arg1|]\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, arg0: obj, arg1: obj, arg2: obj): string = SFormat format [|arg0; arg1; arg2|]\n\nlet protect (s : string) =\n    if s = null then \"\" else s\n\n[<Inline \"$strings.join($sep)\">]\nlet join (strings: string[]) (sep: string) = X<string>\n\n[<Name \"collect\">]\nlet Collect (f: char -> string) (s: string) : string =\n    System.String.Concat(Array.init s.Length (fun i -> f s.[i]))\n\n[<Name \"concat\">]\nlet Concat (separator: string) (strings: seq<string>) : string =\n    join (Seq.toArray strings) separator\n\n[<Name \"exists\">]\nlet Exists (f: char -> bool) (s: string) : bool =\n    Seq.exists f (protect s)\n\n[<Name \"forall\">]\nlet ForAll (f: char -> bool) (s: string) : bool =\n    Seq.forall f (protect s)\n\n[<Name \"init\">]\nlet Initialize (count: int) (f: int -> string) : string =\n    System.String.Concat(Array.init count f)\n\n[<Name \"iter\">]\nlet Iterate (f: char -> unit) (s: string) : unit =\n    Seq.iter f (protect s)\n\n[<Name \"iteri\">]\nlet IterateIndexed (f: int -> char -> unit) (s: string) : unit =\n    Seq.iteri f (protect s)\n\n[<Name \"length\">]\nlet Length (s: string) : int =\n    (protect s).Length\n\n[<Name \"map\">]\nlet Map (f: char -> char) (s: string) : string =\n    Collect (fun x -> string (f x)) (protect s)\n\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> char -> char) (s: string) : string =\n    System.String.Concat (Seq.toArray (Seq.mapi (fun i x -> string (f i x)) s))\n\n[<Name \"replicate\">]\nlet Replicate (count: int) (s: string) : string =\n    System.String.Concat(Array.create count s)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\nopen System.Threading\nopen System.Threading.Tasks\n\n[<Proxy(typeof<Task>); Name \"Task\">]\ntype private TaskProxy(action: System.Action, token: CT, status, exc) =\n    [<Name \"status\">]\n    let mutable status = status\n    [<Name \"continuations\">]\n    let continuations = [||] : TaskProxy[]\n    [<Name \"exc\">]\n    let mutable exc = exc : System.AggregateException\n\n    abstract Execute : unit -> unit\n    default this.Execute() = action.Invoke()\n\n    member this.Exception = exc\n\n    member this.IsCanceled = \n        status = TaskStatus.Canceled\n\n    member this.IsCompleted = \n        status = TaskStatus.RanToCompletion || status = TaskStatus.Faulted || status = TaskStatus.Canceled\n\n    member this.IsFaulted =\n        status = TaskStatus.Faulted\n\n    member this.Status = status\n\n    new (action) = TaskProxy(action, CT.None, TaskStatus.Created, null)\n\n    new (action, ct) = TaskProxy(action, ct, TaskStatus.Created, null)\n    \n    new (action: System.Action<obj>, obj: obj) = TaskProxy((fun () -> action.Invoke(obj)), CT.None, TaskStatus.Created, null)\n\n    new (action: System.Action<obj>, obj: obj, ct: CT) = TaskProxy((fun () -> action.Invoke(obj)), ct, TaskStatus.Created, null)\n\n    member this.OnCompleted(cont : unit -> unit) =\n        if this.IsCompleted then \n            cont()\n        else \n            if this.Status = TaskStatus.Created then this.Start()\n            this.ContinueWith(fun (_: Task) -> cont()) |> ignore\n\n    member this.RunContinuations() =\n        for c in continuations do\n            c.StartContinuation()    \n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task>) =\n        this.ContinueWith(action, CT.None)\n\n    member this.ContinueWith(action: System.Action<Task>, ct) =\n        let res = TaskProxy((fun () -> action.Invoke (As<Task> this)), ct, TaskStatus.WaitingForActivation, null)\n        if this.IsCompleted then\n            res.StartContinuation()     \n        else\n            continuations.JS.Push res |> ignore\n        As<Task> res\n\n    [<Inline>]\n    member this.ContinueWith(func: System.Func<Task,'T>) =\n        this.ContinueWith(func, CT.None)\n\n    member this.ContinueWith(func: System.Func<Task,'T>, ct) =\n        let res = TaskProxy<'T>((fun () -> func.Invoke (As<Task> this)), ct, TaskStatus.WaitingForActivation, null, JS.Undefined)\n        if this.IsCompleted then\n            res.StartContinuation()     \n        else\n            continuations.JS.Push res |> ignore\n        As<Task<'T>> res\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task, obj>, obj: obj) =\n        this.ContinueWith(System.Action<Task>(fun t -> action.Invoke (t, obj)))\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task, obj>, obj: obj, ct) =\n        this.ContinueWith(System.Action<Task>(fun t -> action.Invoke (t, obj)), ct)\n\n    [<Inline>]\n    member this.ContinueWith(func: System.Func<Task, obj, 'T>, obj: obj) =\n        this.ContinueWith(fun t -> func.Invoke (t, obj))\n\n    [<Inline>]\n    member this.ContinueWith(func: System.Func<Task, obj, 'T>, obj: obj, ct) =\n        this.ContinueWith((fun t -> func.Invoke (t, obj)), ct)\n\n    member this.StartContinuation() =\n        if status = TaskStatus.WaitingForActivation then\n            status <- TaskStatus.WaitingToRun\n            Concurrency.fork (fun () -> \n                if status = TaskStatus.WaitingToRun then\n                    status <- TaskStatus.Running\n                    try\n                        this.Execute()\n                        status <- TaskStatus.RanToCompletion\n                    with e ->\n                        exc <- System.AggregateException(e)\n                        status <- TaskStatus.Faulted\n                    this.RunContinuations()\n            )\n\n    member this.Start() =\n        if status = TaskStatus.Created then\n            status <- TaskStatus.WaitingToRun\n            Concurrency.fork (fun () -> \n                status <- TaskStatus.Running\n                try\n                    this.Execute()\n                    status <- TaskStatus.RanToCompletion\n                with\n                | :? OCE as e when e.CancellationToken = token ->\n                    Console.Log(\"Task cancellation caught:\", e)\n                    exc <- System.AggregateException(e)\n                    status <- TaskStatus.Canceled\n                | e ->\n                    Console.Log(\"Task error caught:\", e)\n                    exc <- System.AggregateException(e)\n                    status <- TaskStatus.Faulted\n                this.RunContinuations()\n            )\n        else\n            invalidOp \"Task not in initial state\"\n        \n    static member FromCanceled ct = \n        As<Task> (TaskProxy(null, ct, TaskStatus.Canceled, System.AggregateException(TaskCanceledException())))\n\n    static member FromCanceled(ct: CT) = \n        As<Task<_>> (TaskProxy<_>(null, ct, TaskStatus.Canceled, System.AggregateException(TaskCanceledException()), As null)) \n\n    static member FromException (exc: exn) =\n        As<Task> (TaskProxy(null, CT.None, TaskStatus.Faulted, System.AggregateException(exc)))\n\n    static member FromException (exc: exn) =\n        As<Task<_>> (TaskProxy<_>(null, CT.None, TaskStatus.Faulted, System.AggregateException(exc), As null))\n\n    static member FromResult (res: 'T) = \n        As<Task<'T>> (TaskProxy<'T>(null, CT.None, TaskStatus.RanToCompletion, null, res)) \n\n    [<Inline>]\n    static member Run(action : System.Action) =\n       TaskProxy.Run(action, CT.None)\n        \n    static member Run(action : System.Action, ct) =\n        let res = TaskProxy(action, ct, TaskStatus.Created, null)\n        res.Start()\n        As<Task> res\n\n    [<Inline>]\n    static member Run(func : System.Func<Task>) =\n        TaskProxy.Run(func, CT.None)\n\n    static member Run(func : System.Func<Task>, ct: CT) =\n        let task = func.Invoke()\n        if ct.IsCancellationRequested then TaskProxy.FromCanceled ct : Task else\n        if task.Status = TaskStatus.Created then\n            task.Start()\n        task\n\n    [<Inline>]\n    static member Run(func : System.Func<'T>) =\n        TaskProxy.Run(func, CT.None)\n\n    static member Run(func : System.Func<'T>, ct) =\n        let res = TaskProxy<'T>(func, ct, TaskStatus.Created, null, JS.Undefined)\n        res.Start()\n        As<Task<'T>> res   \n\n    [<Inline>]\n    static member Run(func : System.Func<Task<'T>>) =\n        TaskProxy.Run(func, CT.None)\n\n    static member Run(func : System.Func<Task<'T>>, ct: CT) =\n        let task = func.Invoke()\n        if ct.IsCancellationRequested then TaskProxy.FromCanceled<'T> ct else\n        if task.Status = TaskStatus.Created then\n            task.Start()\n        task\n\n    static member Delay(time: int) =   \n        Async.StartAsTask (Async.Sleep time) :> Task\n             \n    static member Delay(time: int, ct) =        \n        Async.StartAsTask (Async.Sleep time, cancellationToken = ct) :> Task\n\n    [<Inline>]\n    static member Delay(time: System.TimeSpan) =        \n        TaskProxy.Delay(As<int> time)\n             \n    [<Inline>]\n    static member Delay(time: System.TimeSpan, ct) =        \n        TaskProxy.Delay(As<int> time, ct)\n\n    static member WhenAny(tasks: Task[]) =\n        let tcs = System.Threading.Tasks.TaskCompletionSource<_>()\n        for t in tasks do t.ContinueWith (fun t -> tcs.TrySetResult t |> ignore) |> ignore\n        tcs.Task\n            \n    [<Inline>]                         \n    static member WhenAny(tasks: seq<Task>) = TaskProxy.WhenAny(Array.ofSeq tasks)\n\n    static member WhenAny(tasks: Task<'T>[]) =\n        let tcs = System.Threading.Tasks.TaskCompletionSource<Task<'T>>()\n        for t in tasks do t.ContinueWith (fun t -> tcs.TrySetResult t |> ignore) |> ignore\n        tcs.Task\n            \n    [<Inline>]                         \n    static member WhenAny(tasks: seq<Task<'T>>) = TaskProxy.WhenAny(Array.ofSeq tasks)\n\n    static member WhenAll(tasks: Task[]) =\n        let target = tasks.Length\n        let completed = ref 0\n        let tcs = System.Threading.Tasks.TaskCompletionSource<_>()\n        for i = 0 to target - 1 do\n            tasks.[i].ContinueWith (fun t -> \n                if t.IsFaulted then\n                    tcs.TrySetException t.Exception |> ignore\n                elif t.IsCanceled then\n                    tcs.TrySetCanceled() |> ignore\n                else\n                    incr completed\n                    if !completed = target then tcs.TrySetResult() |> ignore \n            ) |> ignore\n        tcs.Task :> Task\n\n    [<Inline>]                         \n    static member WhenAll(tasks: seq<Task>) = TaskProxy.WhenAll(Array.ofSeq tasks)\n\n    static member WhenAll(tasks: Task<'T>[]) =\n        let target = tasks.Length\n        let completed = ref 0\n        let results = JavaScript.Array(target)\n        let tcs = System.Threading.Tasks.TaskCompletionSource<_>()\n        for i = 0 to target - 1 do\n            tasks.[i].ContinueWith (fun (t: Task<'T>) -> \n                if t.IsFaulted then\n                    tcs.TrySetException t.Exception |> ignore\n                elif t.IsCanceled then\n                    tcs.TrySetCanceled() |> ignore\n                else\n                    incr completed\n                    results.[i] <- t.Result\n                    if !completed = target then tcs.SetResult results.Self\n            ) |> ignore\n        tcs.Task\n\n    [<Inline>]                         \n    static member WhenAll(tasks: seq<Task<'T>>) = TaskProxy.WhenAll(Array.ofSeq tasks)\n\n    static member Yield() =\n        new Task(fun () -> ()) |> As<System.Runtime.CompilerServices.YieldAwaitable>  \n\nand [<Proxy(typeof<Task<_>>); Name \"Task1\">] private TaskProxy<'T>(func: System.Func<'T>, token: CT, status, exc, result) =\n    inherit TaskProxy(null, token, status, exc)\n    \n    [<Name \"result\">]\n    let mutable result = result\n\n    new (func) = TaskProxy<'T>(func, CT.None, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    new (func, ct) = TaskProxy<'T>(func, ct, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    new (func: System.Func<obj, 'T>, obj: obj) = TaskProxy<'T>((fun () -> func.Invoke obj), CT.None, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    new (func: System.Func<obj, 'T>, obj: obj, ct: CT) = TaskProxy<'T>((fun () -> func.Invoke obj), ct, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    member this.Result = \n        match this.Status with\n        | TaskStatus.RanToCompletion -> result\n        | TaskStatus.Faulted\n        | TaskStatus.Canceled -> raise this.Exception \n        | _ -> invalidOp \"Task has not been completed, has no Result\"\n\n    override this.Execute () =\n        result <- func.Invoke()\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>>) =\n        this.ContinueWith(As<System.Action<Task>> action)\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>>, ct) =\n        this.ContinueWith(As<System.Action<Task>> action, ct)\n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, 'R>) =\n        this.ContinueWith(As<System.Func<Task, 'R>> func) \n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, 'R>, ct) =\n        this.ContinueWith(As<System.Func<Task, 'R>> func, ct) \n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>, obj>, obj: obj) =\n        this.ContinueWith(System.Action<Task<'T>>(fun t -> action.Invoke(t, obj)))\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>, obj>, obj: obj, ct) =\n        this.ContinueWith(System.Action<Task<'T>>(fun t -> action.Invoke(t, obj)), ct)\n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, obj, 'R>, obj: obj) =\n        this.ContinueWith(fun t -> func.Invoke(t, obj)) \n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, obj, 'R>, obj: obj, ct) =\n        this.ContinueWith((fun t -> func.Invoke(t, obj)), ct) \n\n[<Proxy(typeof<TaskCompletionSource<_>>)>]\n[<Name \"TaskCompletionSource\">]\ntype private TaskCompletionSourceProxy<'T>() =\n    let task = new TaskProxy<'T>(null, CT.None, TaskStatus.WaitingForActivation, null, JS.Undefined)\n\n    member this.Task = As<Task<'T>> task\n\n    member this.SetCanceled() =\n        if task.IsCompleted then\n            failwith \"Task already completed.\"\n        task?status <- TaskStatus.Canceled\n        task.RunContinuations()\n\n    member this.SetException(exc: exn) =\n        if task.IsCompleted then\n            failwith \"Task already completed.\"\n        task?status <- TaskStatus.Faulted\n        task?exc <- System.AggregateException(exc)\n        task.RunContinuations()\n\n    member this.SetException(exs : seq<exn>) =\n        this.SetException(System.AggregateException(exs))\n\n    member this.SetResult(res: 'T) =\n        if task.IsCompleted then\n            failwith \"Task already completed.\"\n        task?status <- TaskStatus.RanToCompletion\n        task?result <- res \n        task.RunContinuations()\n\n    member this.TrySetCanceled() =\n        if not task.IsCompleted then\n            task?status <- TaskStatus.Canceled\n            task.RunContinuations()\n            true\n        else false\n\n    member this.TrySetCanceled(ct: CT) =\n        if not task.IsCompleted then\n            task?status <- TaskStatus.Canceled\n            task?token <- ct\n            task.RunContinuations()\n            true\n        else false\n\n    member this.TrySetException(exc: exn) =\n        if not task.IsCompleted then\n            task?status <- TaskStatus.Faulted\n            task?exc <- System.AggregateException(exc)\n            task.RunContinuations()\n            true\n        else false\n\n    member this.TrySetException(exs : seq<exn>) =\n        this.TrySetException(System.AggregateException(exs))\n\n    member this.TrySetResult(res: 'T) =        \n        if not task.IsCompleted then\n            task?status <- TaskStatus.RanToCompletion\n            task?result <- res \n            task.RunContinuations()\n            true\n        else false\n    ", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Implements generic comparison, equality and hashing.\n[<WebSharper.Name \"Unchecked\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.Operators+Unchecked, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.UncheckedProxy\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Inline \"$a instanceof Array\">]\nlet isArray (a: obj) = X<bool>\n\n[<Inline \"$a instanceof Date\">]\nlet isDate (a: obj) = X<bool>\n\nlet rec compareArrays (a: obj []) (b: obj []) =\n    if a.Length < b.Length   then -1\n    elif a.Length > b.Length then 1\n    else\n        let mutable cmp = 0\n        let mutable i = 0\n        while cmp = 0 && i < a.Length do\n            cmp <- Unchecked.compare a.[i] b.[i]\n            i <- i + 1\n        cmp\n\n[<Inline \"$d.getTime()\">]\nlet getTime (d: obj) : int = X\n\nlet rec compareDates (a: obj) (b: obj) =\n    compare (getTime a) (getTime b)\n\n/// Compares two values generically.\nlet Compare<'T> (a: 'T) (b: 'T) : int =\n    let objCompare (a: obj) (b: obj) =\n        let cmp = ref 0\n        JS.ForEach a (fun k ->\n            if not (JS.HasOwnProperty a k) then\n                false\n            elif not (JS.HasOwnProperty b k) then\n                cmp := 1; true\n            else\n                cmp := Unchecked.compare a?(k) b?(k); !cmp <> 0)\n        if !cmp = 0 then\n            JS.ForEach b (fun k ->\n                if not (JS.HasOwnProperty b k) then\n                    false\n                elif not (JS.HasOwnProperty a k) then\n                    cmp := -1; true\n                else false)\n        !cmp\n    if a ===. b then 0 else\n        match JS.TypeOf a with\n        | JS.Undefined ->\n            match JS.TypeOf b with\n            | JS.Undefined -> 0\n            | _ -> -1\n        | JS.Function ->\n            failwith \"Cannot compare function values.\"\n        | JS.Boolean | JS.Number | JS.String ->\n            if a <. b then -1 else 1\n        | JS.Object ->\n            if a ===. null then -1\n            elif b ===. null then 1\n            elif JS.In \"CompareTo\" a then (As<System.IComparable<_>> a).CompareTo(b)\n            elif JS.In \"CompareTo0\" a then (As<System.IComparable> a).CompareTo(b)\n            elif isArray a && isArray b then compareArrays (As a) (As b)\n            elif isDate a && isDate b then compareDates a b\n            else objCompare (As a) (As b)\n\n/// Produces an undefined value.\n[<Macro(typeof<M.DefaultOf>)>]\n[<Inline \"undefined\">]\nlet DefaultOf<'T> = X<'T>\n\nlet arrayEquals (a: obj []) (b: obj []) =\n    if a.Length = b.Length then\n        let mutable eq = true\n        let mutable i = 0\n        while eq && i < a.Length do\n            if not (Unchecked.equals a.[i] b.[i]) then\n                eq <- false\n            i <- i + 1\n        eq\n    else\n        false\n\nlet dateEquals a b =\n    getTime a ===. getTime b\n\n[<Inline \"$a.Equals($b)\">]\nlet private equals (a: obj) (b: obj) = X<bool>\n\n/// Tests if two values are equal.\nlet Equals (a: 'T) (b: 'T) : bool =\n    let objEquals (a: obj) (b: obj) =\n        let eqR = ref true\n        JS.ForEach a (fun k ->\n            eqR := not (JS.HasOwnProperty a k) || JS.HasOwnProperty b k && Unchecked.equals a?(k) b?(k)\n            not !eqR)\n        if !eqR then\n            JS.ForEach b (fun k ->\n                eqR := not (JS.HasOwnProperty b k) || JS.HasOwnProperty a k\n                not !eqR)\n        !eqR\n    if a ===. b then true else\n        match JS.TypeOf a with\n        | JS.Object ->\n            if a ===. null || a ===. JS.Undefined || b ===. null || b ===. JS.Undefined then false\n            elif JS.In \"Equals\" a then equals a b\n            elif isArray a && isArray b then arrayEquals (As a) (As b)\n            elif isDate a && isDate b then dateEquals a b\n            else objEquals (As a) (As b)\n        | JS.Function ->\n            if JS.In \"$Func\" a then\n                a?``$Func`` ===. b?``$Func`` && a?``$Target`` ===. b?``$Target``\n            elif JS.In \"$Invokes\" a && JS.In \"$Invokes\" b then\n                arrayEquals a?``$Invokes`` b?``$Invokes``  \n            else false\n        | _ ->\n            false\n\nlet hashMix (x: int) (y: int) : int =\n    (x <<< 5) + x + y\n\nlet hashArray (o: obj []) =\n    let mutable h = -34948909\n    for i in 0 .. o.Length - 1 do\n        h <- hashMix h (Unchecked.hash o.[i])\n    h\n\nlet hashString (s: string) : int =\n    if s ===. null then 0 else\n        let mutable hash = 5381\n        for i = 0 to s.Length - 1 do\n            hash <- hashMix hash (int s.[i])\n        hash\n\n[<Inline \"$o.GetHashCode()\">]\nlet getHashCode(o: obj) = X<int>\n\nlet hashObject (o: obj) =\n    if JS.In \"GetHashCode\" o then getHashCode o else\n        let (++) = hashMix\n        let h = ref 0\n        JS.ForEach o (fun key ->\n            h := !h ++ hashString key ++ Unchecked.hash ((?) o key)\n            false)\n        !h\n\n/// Computes the hash of an object.\nlet Hash<'T> (o: 'T) : int =\n    match JS.TypeOf o with\n    | JS.Undefined -> 0\n    | JS.Function  -> 0\n    | JS.Boolean   -> if As o then 1 else 0\n    | JS.Number    -> As o\n    | JS.String    -> hashString (As o)\n    | JS.Object    -> if o ==. null then 0\n                      elif isArray o then hashArray (As o)\n                      else hashObject o\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<voption<_>>)>]\n[<RequireQualifiedAccess>]\ntype private ValueOptionProxy<'T> =\n    | ValueNone \n    | ValueSome of 'T\n\n    member this.Value =\n        match this with \n        | ValueNone -> invalidOp \"ValueOption.Value\"\n        | ValueSome x -> x \n\n    static member Test =\n        (ValueSome 2).Value\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Core.Macros\n\n[<JavaScript>]\n[<Name \"Numeric\">]\ntype internal N =\n    static member Parse<'T>(s: string, min: 'T, max: 'T, overflowMsg) =\n        let x : float = JS.Plus s\n        if x !==. (x -. (x %. 1)) then\n            raise (System.FormatException \"Input string was not in a correct format.\")\n        elif (x <. min) || (x >. max) then\n            raise (System.OverflowException overflowMsg)\n        else As<'T> x\n\n    static member TryParse<'T>(s: string, min: 'T, max: 'T, r: byref<'T>) =\n        let x : float = JS.Plus s\n        let ok = x ===. (x -. (x %. 1)) && (x >=. min) && (x <=. max)\n        if ok then r <- As<'T> x\n        ok\n\n    static member ParseBool(s: string) =\n        match s.ToLower() with\n        | \"true\" -> true\n        | \"false\" -> false\n        | _ -> raise (System.FormatException \"String was not recognized as a valid Boolean.\")\n\n    static member TryParseBool(s: string, r: byref<bool>) =\n        match s.ToLower() with\n        | \"true\" -> r <- true; true\n        | \"false\" -> r <- false; true\n        | _ -> false\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Byte>)>]\ntype internal NB =\n\n    [<Name \"WebSharper.Numeric.ParseByte\">]\n    static member Parse(s: string) : System.Byte =\n        N.Parse(s, System.Byte.MinValue, System.Byte.MaxValue, \"Value was either too large or too small for an unsigned byte.\")\n\n    [<Name \"WebSharper.Numeric.TryParseByte\">]\n    static member TryParse(s: string, r: byref<System.Byte>) : bool =\n        N.TryParse(s, System.Byte.MinValue, System.Byte.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.SByte>)>]\ntype internal NSB =\n\n    [<Name \"WebSharper.Numeric.ParseSByte\">]\n    static member Parse(s: string) : System.SByte =\n        N.Parse(s, System.SByte.MinValue, System.SByte.MaxValue, \"Value was either too large or too small for a signed byte.\")\n\n    [<Name \"WebSharper.Numeric.TryParseSByte\">]\n    static member TryParse(s: string, r: byref<System.SByte>) : bool =\n        N.TryParse(s, System.SByte.MinValue, System.SByte.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Int16>)>]\n[<Name \"Int16\">]\ntype internal NI16 =\n\n    [<Name \"WebSharper.Numeric.ParseInt16\">]\n    static member Parse(s: string) : System.Int16 =\n        N.Parse(s, System.Int16.MinValue, System.Int16.MaxValue, \"Value was either too large or too small for an Int16.\")\n\n    [<Name \"WebSharper.Numeric.TryParseInt16\">]\n    static member TryParse(s: string, r: byref<System.Int16>) : bool =\n        N.TryParse(s, System.Int16.MinValue, System.Int16.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Int32>)>]\n[<Name \"Int32\">]\ntype internal NI32 =\n\n    [<Name \"WebSharper.Numeric.ParseInt32\">]\n    static member Parse(s: string) : System.Int32 =\n        N.Parse(s, System.Int32.MinValue, System.Int32.MaxValue, \"Value was either too large or too small for an Int32.\")\n\n    [<Name \"WebSharper.Numeric.TryParseInt32\">]\n    static member TryParse(s: string, r: byref<System.Int32>) : bool =\n        N.TryParse(s, System.Int32.MinValue, System.Int32.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.UInt16>)>]\n[<Name \"UInt16\">]\ntype internal NUI16 =\n\n    [<Name \"WebSharper.Numeric.ParseUInt16\">]\n    static member Parse(s: string) : System.UInt16 =\n        N.Parse(s, System.UInt16.MinValue, System.UInt16.MaxValue, \"Value was either too large or too small for an UInt16.\")\n\n    [<Name \"WebSharper.Numeric.TryParseUInt16\">]\n    static member TryParse(s: string, r: byref<System.UInt16>) : bool =\n        N.TryParse(s, System.UInt16.MinValue, System.UInt16.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.UInt32>)>]\n[<Name \"UInt32\">]\ntype internal NUI32 =\n\n    [<Name \"WebSharper.Numeric.ParseUInt32\">]\n    static member Parse(s: string) : System.UInt32 =\n        N.Parse(s, System.UInt32.MinValue, System.UInt32.MaxValue, \"Value was either too large or too small for an UInt32.\")\n\n    [<Name \"WebSharper.Numeric.TryParseUInt32\">]\n    static member TryParse(s: string, r: byref<System.UInt32>) : bool =\n        N.TryParse(s, System.UInt32.MinValue, System.UInt32.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Int64>)>]\n[<Name \"Int64\">]\ntype internal NI64 =\n\n    [<Name \"WebSharper.Numeric.ParseInt64\">]\n    static member Parse(s: string) : System.Int64 =\n        N.Parse(s, System.Int64.MinValue, System.Int64.MaxValue, \"Value was either too large or too small for an Int64.\")\n\n    [<Name \"WebSharper.Numeric.TryParseInt64\">]\n    static member TryParse(s: string, r: byref<System.Int64>) : bool =\n        N.TryParse(s, System.Int64.MinValue, System.Int64.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.UInt64>)>]\n[<Name \"UInt64\">]\ntype internal NUI64 =\n\n    [<Name \"WebSharper.Numeric.ParseUInt64\">]\n    static member Parse(s: string) : System.UInt64 =\n        N.Parse(s, System.UInt64.MinValue, System.UInt64.MaxValue, \"Value was either too large or too small for an UInt64.\")\n\n    [<Name \"WebSharper.Numeric.TryParseUInt64\">]\n    static member TryParse(s: string, r: byref<System.UInt64>) : bool =\n        N.TryParse(s, System.UInt64.MinValue, System.UInt64.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Single>)>]\ntype internal NS =\n\n    [<Inline \"Math.abs($0) === Infinity\">]\n    static member IsInfinity(f: single) = X<bool>\n\n    [<Inline \"isNaN($0)\">]\n    static member IsNaN(f: single) = X<bool>\n\n    [<Inline \"$0 === -Infinity\">]\n    static member IsNegativeInfinity (f: single) = X<bool>\n\n    [<Inline \"$0 === Infinity\">]\n    static member IsPositiveInfinity (f: single) = X<bool>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member Parse(x: string) = X<System.Single>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member TryParse(x: string, r: byref<System.Single>) = X<bool>\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Double>)>]\ntype internal ND =\n\n    [<Inline \"Math.abs($0) === Infinity\">]\n    static member IsInfinity(f: double) = X<bool>\n\n    [<Inline \"isNaN($0)\">]\n    static member IsNaN(f: double) = X<bool>\n\n    [<Inline \"$0 === -Infinity\">]\n    static member IsNegativeInfinity (f: double) = X<bool>\n\n    [<Inline \"$0 === Infinity\">]\n    static member IsPositiveInfinity (f: double) = X<bool>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member Parse(x: string) = X<System.Double>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member TryParse(x: string, r: byref<System.Double>) = X<bool>\n\n[<Proxy(typeof<System.Boolean>)>]\ntype internal B = \n    [<Inline>]\n    static member op_LogicalNot(a: bool) = not a\n\n    [<Inline \"$this == $x\">]\n    member this.Equals(x: bool) = X<bool>\n\n    [<Inline \"$this === $x\">]\n    override this.Equals(x: obj) = X<bool>\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality(a: bool, b: bool) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality(a: bool, b: bool) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Constant \"true\">]\n    static member TrueString = X<string>\n\n    [<Constant \"false\">]\n    static member FalseString = X<string>\n\n    [<Inline>]\n    override this.ToString() = string this\n\n    [<Inline>]\n    member this.CompareTo(x: bool) =\n        Unchecked.compare (this :> obj) (x :> obj)\n\n    [<Inline>]\n    member this.CompareTo(x: obj) =\n        Unchecked.compare (this :> obj) x\n\n    [<Inline>]\n    static member Parse(x: string) =\n        N.ParseBool x\n\n    [<Inline>]\n    static member TryParse(x: string, r: byref<bool>) =\n        N.TryParseBool(x, &r)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule internal WebSharper.ClientSideJson\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype OptionalFieldKind =\n    /// The field doesn't have type option<'T>\n    | NotOption = 0\n    /// The field has type option<'T>\n    | NormalOption = 1\n    /// The field has type option<'T> and is marked [<OptionalField>]\n    | MarkedOption = 2\n    /// The field has type Optional<'T>\n    | ErasedOption = 3\n\nlet ServerSideProvider = WebSharper.Core.Json.Provider.Create ()\n\n[<JavaScript>]\nmodule Provider =\n    let Id () = \n        ()\n        fun () -> id\n\n    let EncodeTuple (encs: (unit -> obj -> obj)[]) : (unit -> obj[] -> obj) =\n        ()\n        fun () args ->\n            box (Array.map2 (fun f x -> f () x) encs args)\n\n    let EncodeDateTime () =\n        ()\n        fun () (x: System.DateTime) ->\n            box (x.JS.ToISOString())\n\n    let EncodeDateTimeOffset () =\n        ()\n        fun () (x: System.DateTimeOffset) ->\n            box (New [ \"d\" => x.DateTime.JS.ToISOString(); \"o\" => x?o ])\n\n    let EncodeList (encEl: unit -> 'T -> obj) : (unit -> list<'T> -> obj) =\n        ()\n        fun () (l: list<'T>) ->\n            let a : obj[] = [||]\n            let e = encEl()\n            l |> List.iter (fun x -> a.JS.Push (e x) |> ignore)\n            box a\n\n    let EncodeRecord (_: obj) (fields: (string * (unit -> obj -> obj) * OptionalFieldKind)[]) : (unit -> 'T -> obj) =\n        ()\n        fun () x ->\n            let o = New []\n            fields |> Array.iter (fun (name, enc, kind) ->\n                match kind with\n                | OptionalFieldKind.NotOption ->\n                    o?(name) <- enc () x?(name)\n                | OptionalFieldKind.NormalOption ->\n                    match x?(name) with\n                    | Some x -> o?(name) <- enc () x\n                    | None -> ()\n                | OptionalFieldKind.MarkedOption ->\n                    if JS.HasOwnProperty x name then\n                        o?(name) <- enc () x?(name)\n                | OptionalFieldKind.ErasedOption ->\n                    if x?(name) ===. JS.Undefined then\n                        o?(name) <- enc () x?(name)\n                | _ -> failwith \"Invalid field option kind\")\n            o\n\n    let EncodeUnion (_: obj) (discr: string) (cases: (string * (string * string * (unit -> obj -> obj) * OptionalFieldKind)[])[]) : (unit -> 'T -> obj) =\n        ()\n        fun () x ->\n            if JS.TypeOf x ===. JS.Object && x !=. null then\n                let o = New []\n                let tag = x?(\"$\")\n                let tagName, fields = cases.[tag]\n                if JS.TypeOf discr = JS.Kind.String then o?(discr) <- tagName\n                fields |> Array.iter (fun (from, ``to``, enc, kind) ->\n                    match from with\n                    | null -> // inline record\n                        let record = enc () (x?(\"$0\"))\n                        JS.ForEach record (fun f -> o?(f) <- record?(f); false)\n                    | from -> // normal args\n                        match kind with\n                        | OptionalFieldKind.NotOption ->\n                            o?(``to``) <- enc () (x?(from))\n                        | OptionalFieldKind.NormalOption ->\n                            match x?(from) with\n                            | Some x -> o?(``to``) <- enc () x\n                            | None -> ()\n                        | _ -> failwith \"Invalid field option kind\")\n                o\n            else box x // [<Constant>]\n\n    let EncodeArray (encEl: (unit -> 'T -> obj)) : (unit -> 'T[] -> obj) =\n        ()\n        fun () (a: 'T[]) ->\n            let e = encEl()\n            box (Array.map e a)\n\n    let EncodeSet (encEl: (unit -> 'T -> obj)) : (unit -> Set<'T> -> obj) =\n        ()\n        fun () (s: Set<'T>) ->\n            let a : obj[] = [||]\n            let e = encEl()\n            s |> Set.iter (fun x -> a.JS.Push (e x) |> ignore)\n            box a\n\n    let EncodeStringMap (encEl:(unit -> 'T -> obj)) : (unit -> Map<string, 'T> -> obj) =\n        ()\n        fun () (m: Map<string, 'T>) ->\n            let o = New []\n            let e = encEl()\n            m |> Map.iter (fun k v -> o?(k) <- e v)\n            o\n\n    let EncodeArrayMap (encKey:(unit -> 'K -> obj)) (encEl:(unit -> 'V -> obj)) : (unit -> Map<'K, 'V> -> obj) =\n        ()\n        fun () (m: Map<'K, 'V>) ->\n            let a : obj[][] = [||]\n            let k = encKey()\n            let e = encEl()\n            m |> Map.iter (fun key el -> a.JS.Push([| [| k key; e el |] |]) |> ignore)\n            box a\n\n    let EncodeStringDictionary (encEl:(unit -> 'T -> obj)) : (unit -> Dictionary<string, 'T> -> obj) =\n        ()\n        fun () (d: Dictionary<string, 'T>) ->\n            let o = New []\n            let e = encEl()\n            for KeyValue(k, v) in d :> seq<_> do o?(k) <- e v\n            o\n\n    let EncodeArrayDictionary (encKey: (unit -> 'K -> obj)) (encEl: (unit -> 'V -> obj)) : (unit -> Dictionary<'K, 'V> -> obj) =\n        ()\n        fun () (d: Dictionary<'K, 'V>) ->\n            let a : obj[][] = [||]\n            let k = encKey()\n            let e = encEl()\n            for KeyValue(key, el) in d do a.JS.Push([| [| k key; e el |] |]) |> ignore\n            box a\n\n    let EncodeLinkedList (encEl:(unit -> 'T -> obj)) : (unit -> LinkedList<'T> -> obj) =\n        ()\n        fun () (d: LinkedList<'T>) ->\n            let o = Array<'T>()\n            let e = encEl()\n            for x in d :> seq<'T> do o.Push(e x) |> ignore\n            box o\n\n    let DecodeTuple (decs: (unit -> obj -> obj)[]) : (unit -> obj -> obj[]) =\n        As (EncodeTuple decs)\n\n    let DecodeDateTime() =\n        ()\n        fun () (x: obj) ->\n            if JS.HasOwnProperty x \"d\" then\n                Date(x?d: string).Self\n            else \n                Date(x :?> string).Self\n\n    let DecodeDateTimeOffset() =\n        ()\n        fun () (x: obj) ->\n            if JS.HasOwnProperty x \"d\" then\n                System.DateTimeOffset(Date(x?d: string).Self, System.TimeSpan.FromMinutes x?o)\n            else \n                System.DateTimeOffset(Date(x :?> string).Self, System.TimeSpan.Zero)\n\n    let DecodeList (decEl: (unit -> obj -> 'T)) : (unit -> obj -> list<'T>) =\n        ()\n        fun () (a : obj) ->\n            let e = decEl()\n            List.init (a :?> obj[]).Length (fun i -> e (a :?> obj[]).[i])\n\n    let DecodeSet (decEl: unit -> obj -> 'T) : (unit -> obj -> Set<'T>) =\n        ()\n        fun () (a : obj) ->\n            let e = decEl()\n            Set.ofArray(Array.map e (a :?> obj[]))\n\n    let DecodeRecord (t: obj) (fields: (string * (unit -> obj -> obj) * OptionalFieldKind)[]) : (unit -> obj -> 'T) =\n        ()\n        fun () (x: obj) ->\n            let o = if t ===. JS.Undefined then New [] else JS.New t\n            fields |> Array.iter (fun (name, dec, kind) ->\n                match kind with\n                | OptionalFieldKind.NotOption ->\n                    if JS.HasOwnProperty x name then\n                        o?(name) <- dec () x?(name)\n                    else failwith (\"Missing mandatory field: \" + name)\n                | OptionalFieldKind.NormalOption ->\n                    o?(name) <-\n                        if JS.HasOwnProperty x name\n                        then Some (dec () x?(name))\n                        else None\n                | OptionalFieldKind.MarkedOption ->\n                    if JS.HasOwnProperty x name then\n                        o?(name) <- (dec () x?(name))\n                | OptionalFieldKind.ErasedOption ->\n                    if x?(name) ===. JS.Undefined then\n                        o?(name) <- (dec () x?(name))\n                | _ -> failwith \"Invalid field option kind\")\n            o\n\n    let DecodeUnion (t: obj) (discr: string) (cases: (string * (string * string * (unit -> obj -> obj) * OptionalFieldKind)[])[]) : (unit -> obj -> 'T) =\n        ()\n        fun () (x: obj) ->\n            if JS.TypeOf x ===. JS.Object && x !=. null then\n                let o = if t ===. JS.Undefined then New [] else JS.New t\n                let tag =\n                    // [<NamedUnionCases(discr)>]\n                    if JS.TypeOf discr = JS.Kind.String then\n                        let tagName = x?(discr)\n                        cases |> Array.findIndex (fun (name, _) -> name = tagName)\n                    else // [<NamedUnionCases>]\n                        let r = ref JS.Undefined\n                        JS.ForEach discr (fun k ->\n                            if JS.HasOwnProperty x k then r := discr?(k); true else false)\n                        !r\n                o?(\"$\") <- tag\n                cases.[tag] |> snd |> Array.iter (fun (from, ``to``, dec, kind) ->\n                    match from with\n                    | null -> // inline record\n                        let r = dec () x\n                        // eliminate tag field if record deserializer is identity\n                        if As<bool> ``to`` then \n                            JS.Delete r discr\n                        o?(\"$0\") <- r\n                    | from -> // normal args\n                        match kind with\n                        | OptionalFieldKind.NotOption ->\n                            o?(from) <- dec () (x?(``to``))\n                        | OptionalFieldKind.NormalOption ->\n                            o?(from) <-\n                                if JS.HasOwnProperty x ``to``\n                                then Some (dec () x?(``to``))\n                                else None\n                        | _ -> failwith \"Invalid field option kind\")\n                o\n            else x :?> 'T // [<Constant>]\n\n    let DecodeArray (decEl :(unit -> obj -> 'T)) : (unit -> obj -> 'T[]) =\n        As (EncodeArray (As decEl))\n\n    let DecodeStringMap (decEl :(unit -> obj -> 'T)) : (unit -> obj -> Map<string, 'T>) =\n        ()\n        fun () (o: obj) ->\n            let m = ref Map.empty\n            let decEl = decEl ()\n            JS.ForEach o (fun k -> m := Map.add k (decEl o?(k)) !m; false)\n            !m\n\n    let DecodeArrayMap (decKey :(unit -> obj -> 'K)) (decEl :(unit -> obj -> 'V)) : (unit -> obj -> Map<'K, 'V>) =\n        ()\n        fun () (o: obj) ->\n            let decKey = decKey()\n            let decEl = decEl()\n            let mutable m = Map<'K, 'V> []\n            for k, v in o :?> (obj * obj)[] do m <- Map.add (decKey k) (decEl v) m\n            m\n\n    let DecodeStringDictionary (decEl: unit -> obj -> 'T) : (unit -> obj -> Dictionary<string, 'T>) =\n        ()\n        fun () (o: obj) ->\n            let d = System.Collections.Generic.Dictionary()\n            let decEl = decEl ()\n            JS.ForEach o (fun k -> d.Add(k, decEl o?(k)); false)\n            d\n\n    let DecodeArrayDictionary (decKey :(unit -> obj -> 'K)) (decEl :(unit -> obj -> 'V)) : (unit -> obj -> Dictionary<'K, 'V>) =\n        ()\n        fun () (o: obj) ->\n            let decKey = decKey()\n            let decEl = decEl()\n            let d = Dictionary<'K, 'V>()\n            for k, v in o :?> (obj * obj)[] do d.Add(decKey k, decEl v)\n            d\n\n    let DecodeLinkedList (decEl: unit -> obj -> 'T) : (unit -> obj -> LinkedList<'T>) =\n        ()\n        fun () (o: obj) ->\n            let l = LinkedList<'T>()\n            let decEl = decEl()\n            for x in o :?> obj[] do l.AddLast(decEl x) |> ignore\n            l\n\nmodule Macro =\n\n    module M = WebSharper.Core.Metadata\n    open WebSharper.Core.AST\n    module JI = WebSharper.Core.Json.Internal\n    type private BF = System.Reflection.BindingFlags\n\n    type Parameters =\n        {\n            Warnings : ResizeArray<string>\n            Dependencies : ResizeArray<M.Node>\n            Compilation : M.ICompilation\n        }\n\n    [<AutoOpen>]\n    module private Internals =\n\n        let cString s = !~ (Literal.String s)\n        let inline cInt i = !~ (Int i)\n\n        let mainJsonModule =\n            TypeDefinition {\n                FullName = \"WebSharper.Json\"\n                Assembly = \"WebSharper.Main\"\n            }\n        let mJson (comp: M.ICompilation) f args =\n            let m = comp.GetClassInfo(mainJsonModule).Value.Methods.Keys |> Seq.find (fun m -> m.Value.MethodName = f)\n            Call(None, NonGeneric mainJsonModule, NonGeneric m, args)\n\n        let (|T|) (t: TypeDefinition) = t.Value.FullName\n        let (|C|_|) (t: Type) =\n            match t with \n            | ConcreteType { Entity = e; Generics = g} -> Some (e, g)\n            | _ -> None\n\n        let providerType = \n            TypeDefinition {\n                FullName = \"WebSharper.ClientSideJson+Provider\"\n                Assembly = \"WebSharper.Web\"\n            }\n        let invoke (comp: M.ICompilation) isEnc n args = \n            let f = (if isEnc then \"Encode\" else \"Decode\") + n\n            let m = comp.GetClassInfo(providerType).Value.Methods.Keys |> Seq.find (fun m -> m.Value.MethodName = f)\n            Call(None, NonGeneric providerType, NonGeneric m, args)\n        let invokeId (comp: M.ICompilation) = \n            let m = comp.GetClassInfo(providerType).Value.Methods.Keys |> Seq.find (fun m -> m.Value.MethodName = \"Id\")\n            Call(None, NonGeneric providerType, NonGeneric m, [])\n\n        type EncodeResult = Choice<Expression, string, Type>\n\n        let (>>=) (x: EncodeResult) (f: Expression -> EncodeResult) =\n            match x with\n            | Choice1Of3 e -> f e\n            | _ -> x\n        let ok x = Choice1Of3 x : EncodeResult\n        let fail x = Choice2Of3 x : EncodeResult\n        let generic t = Choice3Of3 t : EncodeResult\n\n        let mapOk f x =\n            match x with\n            | Choice1Of3 x -> Choice1Of3 (f x) \n            | _ -> x\n\n        /// Returns None if MacroNeedsResolvedTypeArg.\n        let getEncoding name isEnc param (t: Type) : EncodeResult =\n            let warn msg = param.Warnings.Add msg\n            let addTypeDep td = param.Dependencies.Add (M.TypeNode td)\n            let comp = param.Compilation\n            let call = invoke comp isEnc\n            let ident = invokeId comp \n            let isIdent r =\n                match r with \n                | Choice1Of3 e when obj.ReferenceEquals(e, ident) -> true\n                | _ -> false\n            let rec encode t =\n                match t with\n                | ArrayType (t, 1)\n                | C (T \"System.Collections.Generic.List`1\", [t])\n                | C (T \"System.Collections.Generic.Queue`1\", [t])\n                | C (T \"System.Collections.Generic.Stack`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"Array\" [e])\n                | ArrayType _ ->\n                    fail \"JSON serialization for multidimensional arrays is not supported.\"\n                | VoidType\n                | C (T (\"Microsoft.FSharp.Core.Unit\"\n                            | \"System.Boolean\"\n                            | \"System.SByte\"   | \"System.Byte\"\n                            | \"System.Int16\"   | \"System.UInt16\"\n                            | \"System.Int32\"   | \"System.UInt32\"\n                            | \"System.Int64\"   | \"System.UInt64\"\n                            | \"System.Single\"  | \"System.Double\"\n                            | \"System.String\"  | \"System.Guid\"\n                            | \"WebSharper.Core.Json+Encoded\"), []) ->\n                    ok ident\n                | C (T \"System.Object\", []) ->\n                    if isEnc then \n                        fail \"JSON serialization for System.Object is not supported; only deserialization.\" \n                    else ok ident\n                | C (T \"Microsoft.FSharp.Collections.FSharpList`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"List\" [e])\n                | C (T \"Microsoft.FSharp.Collections.FSharpSet`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"Set\" [e])\n                | C (T \"Microsoft.FSharp.Collections.FSharpMap`2\", [k; t]) ->\n                    match k with\n                    | C (T \"System.String\", []) ->\n                        encode t >>= fun e -> \n                        ok (call \"StringMap\" [e])\n                    | _ ->\n                        encode k >>= fun k -> \n                        encode t >>= fun e -> \n                        ok (call \"ArrayMap\" [k; e])\n                | C (T \"System.Collections.Generic.Dictionary`2\", [k; t]) ->\n                    match k with\n                    | C (T \"System.String\", []) ->\n                        encode t >>= fun e ->\n                        ok (call \"StringDictionary\" [e])\n                    | _ ->\n                        encode k >>= fun k ->\n                        encode t >>= fun e ->\n                        ok (call \"ArrayDictionary\" [k; e])\n                | C (T \"System.Collections.Generic.LinkedList`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"LinkedList\" [e])\n                | TupleType (ts, _) ->\n                    ((fun es -> ok (call \"Tuple\" [NewArray es])), ts)\n                    ||> List.fold (fun k t ->\n                        fun es -> encode t >>= fun e -> k (e :: es))\n                    <| []\n                | C (T \"System.DateTime\", []) ->\n                    ok (call \"DateTime\" [])\n                | C (T \"System.DateTimeOffset\", []) ->\n                    ok (call \"DateTimeOffset\" [])\n                | C (td, args) ->                    \n                    let top = comp.AssemblyName.Replace(\".\",\"$\") + if isEnc then \"_JsonEncoder\" else \"_JsonDecoder\"\n                    let key = M.CompositeEntry [ M.StringEntry top; M.TypeEntry t ]\n                    match comp.GetMetadataEntries key with                    \n                    | M.StringEntry \"id\" :: _ ->\n                        ok ident\n                    | M.CompositeEntry [ M.TypeDefinitionEntry gtd; M.MethodEntry gm ] :: _ ->\n                        Lambda([], Call(None, NonGeneric gtd, NonGeneric gm, [])) |> ok\n                    | _ ->\n                        let gtd, gm, _ = comp.NewGenerated([top; \"j\"])\n                        let _, gv, va = comp.NewGenerated([top; \"_\" + \"v\"])\n                        comp.AddGeneratedCode(gv, Undefined)\n                        comp.AddMetadataEntry(key, M.CompositeEntry [ M.TypeDefinitionEntry gtd; M.MethodEntry gm ])\n                        ((fun es ->\n                            let enc = encRecType t args es\n                            if isIdent enc then\n                                comp.AddMetadataEntry(key, M.StringEntry \"id\")\n                                comp.AddGeneratedInline(gm, ident)\n                                enc\n                            else\n                                enc >>= fun e ->\n                                let v = Lambda([], Call (None, NonGeneric gtd, NonGeneric gv, []))\n                                let vn = Value (String va.Value.Head)\n                                let b = Lambda ([], Conditional(v, v, ItemSet(Global [top], vn, Application(e, [], NonPure, Some 0))))\n                                comp.AddGeneratedCode(gm, b)\n                                Lambda([], Call(None, NonGeneric gtd, NonGeneric gm, [])) |> ok\n                         ), args)\n                        ||> List.fold (fun k t es ->\n                            encode t >>= fun e -> k ((t, e) :: es))\n                        <| []\n                | ConcreteType _ -> failwith \"impossible\"\n                | FSharpFuncType _ -> \n                    fail (name + \": Cannot de/serialize a function value.\")\n                | ByRefType _ ->\n                    fail (name + \": Cannot de/serialize a byref value.\")\n                | LocalTypeParameter\n                | StaticTypeParameter _ \n                | TypeParameter _ ->\n                    generic t\n            // Encode a type that might be recursively defined\n            and encRecType t targs args =\n                let td = t.TypeDefinition\n                match comp.GetCustomTypeInfo td with\n                | M.EnumInfo _ -> ok ident\n                | M.FSharpRecordInfo fields ->\n                    let fieldEncoders =\n                        fields\n                        |> List.map (fun f ->\n                            if Option.isSome f.DateTimeFormat then\n                                warn (sprintf \"Warning: This record field has a custom DateTime format: %s.%s. \\\n                                    Client-side JSON serialization does not support custom DateTime formatting. \\\n                                    This field will be serialized using ISO format.\"\n                                    f.RecordFieldType.TypeDefinition.Value.FullName f.Name)\n                            let t, optionKind =\n                                match f.RecordFieldType with\n                                | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\" ->\n                                    if f.Optional then p, OptionalFieldKind.MarkedOption\n                                    else p, OptionalFieldKind.NormalOption\n                                | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"WebSharper.JavaScript.Optional`1\" ->\n                                    p, OptionalFieldKind.ErasedOption\n                                | t ->    \n                                    t, OptionalFieldKind.NotOption\n                            f.JSName, optionKind, encode (t.SubstituteGenerics (Array.ofList targs))\n                        )  \n                    let pr =\n                        match comp.GetClassInfo td with\n                        | Some cls -> \n                            addTypeDep td \n                            if cls.HasWSPrototype then\n                                GlobalAccess cls.Address.Value\n                            else Undefined\n                        | _ -> Undefined\n                    if pr = Undefined && fieldEncoders |> List.forall (fun (_, fo, fe) ->\n                        fo <> OptionalFieldKind.NormalOption && isIdent fe\n                    )\n                    then ok ident\n                    else\n                        ((fun es ->\n                            let es, tts = List.unzip es\n                            ok (call \"Record\" [pr; NewArray es])\n                            ), fieldEncoders)\n                        ||> List.fold (fun k (fn, fo, fe) es ->                     \n                                fe >>= fun e ->\n                                k ((NewArray [cString fn; e; cInt (int fo)], t) :: es))\n                        <| []\n                // TODO: handle nested case type (possible when using from C#)\n                | M.FSharpUnionInfo u ->\n                    let tryGetInlinableRecordInfo (uci: M.FSharpUnionCaseInfo) =\n                        match uci.Kind with \n                        | M.NormalFSharpUnionCase [f] when f.Name = \"Item\" ->\n                            let rec inl uft =\n                                match uft with\n                                | ConcreteType { Entity = fTd } as ft ->\n                                    match comp.GetCustomTypeInfo fTd with\n                                    | M.FSharpRecordInfo fRec -> Some (ft, fRec)\n                                    | _ -> None\n                                | TypeParameter i -> inl (targs.[i])\n                                | _ -> None\n                            inl f.UnionFieldType\n                        | _ -> None\n                    let isOption (t: Type) =\n                        match t with\n                        | ConcreteType { Entity = e } ->\n                            e.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\"\n                        | _ -> false\n                    let discr =\n                        match u.NamedUnionCases with\n                        | None -> JI.StandardField\n                        | Some None -> \n                            let allCases =\n                                u.Cases |> Seq.mapi (fun i uci ->\n                                    i,\n                                    match tryGetInlinableRecordInfo uci with\n                                    | Some (_, fRec) ->\n                                        fRec |> Seq.filter (fun rf -> not (isOption rf.RecordFieldType))\n                                        |> Seq.map (fun rf -> rf.JSName) |> Set.ofSeq\n                                    | None ->\n                                        match uci.Kind with \n                                        | M.NormalFSharpUnionCase fs ->\n                                            fs\n                                            |> List.choose (fun f ->\n                                                if isOption f.UnionFieldType then None else Some f.Name)\n                                            |> Set.ofList\n                                        | _ -> Set.empty\n                                )\n                                |> Map.ofSeq\n                            let findDistinguishingCase (cases: Map<int, Set<string>>) =\n                                cases\n                                |> Map.tryPick (fun t fs ->\n                                    let allOtherFields =\n                                        allCases\n                                        |> Seq.choose (fun (KeyValue(t', fs)) ->\n                                            if t = t' then None else Some fs)\n                                        |> Set.unionMany\n                                    let uniqueCases = fs - allOtherFields\n                                    if Set.isEmpty uniqueCases then\n                                        None\n                                    else Some (Seq.head uniqueCases, t)\n                                )\n                            let rec buildTable acc cases =\n                                if Map.isEmpty cases then acc else\n                                match findDistinguishingCase cases with\n                                | None -> failwithf \"No decoder for %s\" t.AssemblyQualifiedName\n                                | Some (name, tag) ->\n                                    buildTable\n                                        <| (name, tag) :: acc\n                                        <| Map.remove tag cases\n                            buildTable [] allCases |> JI.NoField\n                        | Some (Some n) -> JI.NamedField n\n                    let cases = u.Cases\n                    ((0, fun cases ->\n                        let cases = NewArray cases\n                        let discr =\n                            match discr with\n                            | JI.NoField discrFields ->\n                                discrFields\n                                |> List.map (fun (name, id) -> name, cInt id)\n                                |> Object\n                            | JI.StandardField -> cString \"$\"\n                            | JI.NamedField n -> cString n\n                        let tn =\n                            match comp.GetClassInfo td with\n                            | Some cls -> \n                                addTypeDep td\n                                if cls.HasWSPrototype then\n                                    GlobalAccess cls.Address.Value\n                                else\n                                    Undefined\n                            | _ -> Undefined\n                        ok (call \"Union\" [tn; discr; cases])\n                        ), cases)\n                    ||> List.fold (fun (i, k) case ->\n                        i + 1, fun es ->\n                            match tryGetInlinableRecordInfo case with\n                            | Some (ft, _) -> \n                                let tag =\n                                    match discr with\n                                    | JI.StandardField -> cInt i\n                                    | _ -> cString (match case.JsonName with Some n -> n | _ -> case.Name)\n                                let encF = encode ft \n                                let elimTag =\n                                    if isIdent encF then !~(Bool true) else !~Null\n                                encF >>= fun e ->\n                                k (NewArray [tag; NewArray [NewArray [!~Null; elimTag; e]]] :: es)\n                            | _ ->\n                            match case.Kind with\n                            | M.NormalFSharpUnionCase fields ->\n                                ((0, fun argNames ->\n                                    let tag =\n                                        match u.NamedUnionCases with\n                                        | None -> cInt i\n                                        | _ -> cString (match case.JsonName with Some n -> n | _ -> case.Name)\n                                    k (NewArray [tag; NewArray argNames] :: es)\n                                    ), fields)\n                                ||> List.fold (fun (j, k) f -> //(argName, argT, argFlags) ->\n                                    if Option.isSome f.DateTimeFormat then\n                                        warn (sprintf \"Warning: This union case field has a custom DateTime format: %s.%s [%s]. \\\n                                            Client-side JSON serialization does not support custom DateTime formatting. \\\n                                            This field will be serialized using ISO format.\"\n                                            f.UnionFieldType.TypeDefinition.Value.FullName case.Name f.Name)\n                                    let argT, optionKind =\n                                        match f.UnionFieldType with\n                                        | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\" ->\n                                            p, cInt (int OptionalFieldKind.NormalOption)\n                                        | t ->    \n                                            t, cInt (int OptionalFieldKind.NotOption)\n                                    j + 1, fun es ->\n                                        encode (argT.SubstituteGenerics (Array.ofList targs)) >>= fun e ->\n                                        k (NewArray [cString (\"$\" + string j); cString f.Name; e; optionKind] :: es))\n                                |> snd\n                                <| []\n                            | M.SingletonFSharpUnionCase ->\n                                let tag =\n                                    match u.NamedUnionCases with\n                                    | None -> cInt i\n                                    | _ -> cString (match case.JsonName with Some n -> n | _ -> case.Name)\n                                k (NewArray [tag; NewArray []] :: es)\n                            | M.ConstantFSharpUnionCase _ -> k (!~Null :: es)\n                    )\n                    |> snd\n                    <| []\n                | _ -> \n                    match comp.GetClassInfo td with\n                    | Some cls ->\n                        let fieldEncoders =\n                            cls.Fields.Values\n                            |> Seq.choose (fun (f, _, ft) ->\n                                let jsNameTypeAndOption =\n                                    let isOption name isMarked =\n                                        match ft with\n                                        | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\" ->\n                                            if isMarked then\n                                                Some (name, p, OptionalFieldKind.MarkedOption) \n                                            else\n                                                Some (name, p, OptionalFieldKind.NormalOption) \n                                        | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"WebSharper.JavaScript.Optional`1\" ->\n                                            Some (name, p, OptionalFieldKind.ErasedOption) \n                                        | ft ->    \n                                            Some (name, ft, OptionalFieldKind.NotOption)\n                                    match f with\n                                    | M.InstanceField n -> isOption n false\n                                    | M.IndexedField i -> isOption (string i) false\n                                    | M.OptionalField n -> isOption n true\n                                    | M.StaticField _ -> None\n                                jsNameTypeAndOption |> Option.map (fun (jsName, t, optionKind) ->\n                                    jsName, optionKind, encode (t.SubstituteGenerics (Array.ofList targs))\n                                )\n                            ) |> List.ofSeq\n                        let pr =\n                            match comp.GetClassInfo td with\n                            | Some cls -> \n                                addTypeDep td \n                                if cls.HasWSPrototype then\n                                    GlobalAccess cls.Address.Value\n                                else Undefined\n                            | _ -> Undefined\n                        if pr = Undefined && fieldEncoders |> List.forall (fun (_, fo, fe) ->\n                            fo <> OptionalFieldKind.NormalOption && isIdent fe\n                        )\n                        then ok ident\n                        else\n                            ((fun es ->\n                                let es, tts = List.unzip es\n                                ok (call \"Record\" [pr; NewArray es])\n                                ), fieldEncoders)\n                            ||> List.fold (fun k (fn, fo, fe) es ->                     \n                                    fe >>= fun e ->\n                                    k ((NewArray [cString fn; e; cInt (int fo)], t) :: es))\n                            <| []\n                    | _ ->\n                        fail (name + \": Type not supported: \" + t.TypeDefinition.Value.FullName)\n            encode t\n\n        let encodeLambda name param t =\n            getEncoding name true param t\n            |> mapOk (fun x -> Application(x, [], Pure, Some 0))\n\n        let encode name param t arg =\n            encodeLambda name param t\n            |> mapOk (fun x -> Application(x, [arg], Pure, Some 1))\n\n        let decodeLambda name param t =\n            getEncoding name false param t\n            |> mapOk (fun x -> Application(x, [], Pure, Some 0))\n\n        let decode name param t arg =\n            decodeLambda name param t\n            |> mapOk (fun x -> Application(x, [arg], Pure, Some 1))\n\n    let Encode param t arg =\n        // ENCODE()(arg)\n        encode \"Encode\" param t arg\n\n    let EncodeLambda warn t =\n        // ENCODE()\n        encodeLambda \"EncodeLambda\" warn t\n\n    let Serialize param t arg =\n        // JSON.stringify(ENCODE()(arg))\n        encode \"Serialize\" param t arg\n        |> mapOk (fun x -> mJson param.Compilation \"Stringify\" [x])\n\n    let SerializeLambda param t =\n        encodeLambda \"SerializeLambda\" param t\n        |> mapOk (fun x ->\n            let enc = Id.New(mut = false)\n            let arg = Id.New(mut = false)\n            // let enc = ENCODE() in fun arg -> JSON.stringify(enc(arg))\n            Let(enc, x,\n                Lambda([arg],\n                    mJson param.Compilation \"Stringify\" [Application(Var enc, [Var arg], Pure, Some 1)])))\n\n    let Decode param t arg =\n        // DECODE()(arg)\n        decode \"Decode\" param t arg\n\n    let DecodeLambda param t =\n        // DECODE()\n        decodeLambda \"DecodeLambda\" param t\n\n    let Deserialize param t arg =\n        // DECODE()(JSON.parse(arg))\n        decode \"Deserialize\" param t (mJson param.Compilation \"Parse\" [arg])\n\n    let DeserializeLambda param t =\n        decodeLambda \"DeserializeLambda\" param t\n        |> mapOk (fun x ->\n            let dec = Id.New(mut = false)\n            let arg = Id.New(mut = false)\n            // let dec = DECODE() in fun arg -> dec(JSON.parse(arg))\n            Let(dec, x,\n                Lambda([arg],\n                    Application(Var dec, [mJson param.Compilation \"Parse\" [Var arg]], Pure, Some 1))))\n\n    type SerializeMacro() =\n        inherit WebSharper.Core.Macro()\n\n        static let rec last = function\n            | [x] -> x\n            | x :: l -> last l\n            | _ -> failwith \"\"\n\n        override this.TranslateCall(c) =\n            let f =\n                match c.Method.Entity.Value.MethodName with\n                | \"Encode\" -> Encode\n                | \"Decode\" -> Decode\n                | \"Serialize\" -> Serialize\n                | \"Deserialize\" -> Deserialize\n                | _ -> failwith \"Invalid macro invocation\"\n            let param = \n                {\n                    Compilation = c.Compilation\n                    Warnings = ResizeArray()\n                    Dependencies = ResizeArray()\n                }\n            let res =\n                match f param c.Method.Generics.Head (last c.Arguments) with\n                | Choice1Of3 x -> WebSharper.Core.MacroOk x\n                | Choice2Of3 e -> WebSharper.Core.MacroError e\n                | Choice3Of3 t -> WebSharper.Core.MacroNeedsResolvedTypeArg t\n            let resWithWarnings =\n                if param.Warnings.Count > 0 then\n                    param.Warnings |> Seq.fold (fun res msg -> \n                        WebSharper.Core.MacroWarning (msg, res)) res\n                else res\n            if param.Dependencies.Count > 0 then\n                WebSharper.Core.MacroDependencies (List.ofSeq param.Dependencies, resWithWarnings)\n            else resWithWarnings    \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Web\n\nopen WebSharper\nopen WebSharper.Core\n\nmodule M = WebSharper.Core.Metadata\nmodule R = WebSharper.Core.AST.Reflection\n\n/// A server-side control that adds a runtime dependency on a given resource.\ntype Require (t: System.Type, [<System.ParamArray>] parameters: obj[]) =\n#if NET461 // ASP.NET: Control\n    inherit System.Web.UI.Control()\n#endif\n\n    let t = AST.Reflection.ReadTypeDefinition t\n    let req = \n        [M.ResourceNode (t, \n            if parameters.Length = 0 then None else Some(M.ParameterObject.OfObj parameters))]\n\n    interface INode with\n        member this.Write(_, _) = ()\n        member this.IsAttribute = false\n\n    interface IRequiresResources with\n        member this.Encode(_, _) = []\n        member this.Requires(_) = req :> _\n\n#if NET461 // ASP.NET: Control\n    override this.OnLoad _ =\n        this.ID <-\n            ScriptManager.Find(base.Page)\n                .Register(None, this, Shared.Metadata, Shared.Json)\n\n    override this.Render _ = ()\n#endif\n\n/// A server-side control that adds a runtime dependency on a given resource.\ntype Require<'T when 'T :> Resources.IResource>() =\n    inherit Require(typeof<'T>)\n\n/// A base class for defining custom ASP.NET controls. Inherit from this class,\n/// override the Body property and use the new class as a Server ASP.NET\n/// control in your application.\n[<AbstractClass>]\ntype Control() =\n#if NET461 // ASP.NET: Control\n    inherit System.Web.UI.Control()\n#endif\n\n    static let gen = System.Random()\n    [<System.NonSerialized>]\n    let mutable id = System.String.Format(\"ws{0:x}\", gen.Next().ToString())\n\n#if NET461 // ASP.NET: Control\n    override this.ID\n#else\n    member this.ID\n#endif\n        with get () = id\n        and set x = id <- x\n\n#if NET461 // ASP.NET: Control\n    override this.OnLoad _ =\n        this.ID <-\n            ScriptManager.Find(base.Page)\n                .Register(Some id, this, Shared.Metadata, Shared.Json)\n#endif\n\n    interface INode with\n        member this.IsAttribute = false\n        member this.Write (_, w) =\n            w.Write(\"\"\"<div id=\"{0}\"></div>\"\"\", this.ID)\n\n    [<JavaScript>]\n    abstract member Body : IControlBody\n\n    interface IControl with\n        [<JavaScript>]\n        member this.Body = this.Body\n        member this.Id = this.ID\n\n    member this.GetBodyNode() =\n        let t = this.GetType()\n        let t = if t.IsGenericType then t.GetGenericTypeDefinition() else t\n        let m = t.GetProperty(\"Body\").GetGetMethod()\n        M.MethodNode (R.ReadTypeDefinition t, R.ReadMethod m)\n\n    interface IRequiresResources with\n        member this.Requires(_) =\n            this.GetBodyNode() |> Seq.singleton\n\n        member this.Encode(meta, json) =\n            [this.ID, json.GetEncoder(this.GetType()).Encode this]\n\n#if NET461 // ASP.NET: Control\n    override this.Render writer =\n#else\n    member this.Render (writer: WebSharper.Core.Resources.HtmlTextWriter) =\n#endif\n        writer.WriteLine(\"<div id='{0}'></div>\", this.ID)\n\nopen WebSharper.JavaScript\nopen Microsoft.FSharp.Quotations\nopen Microsoft.FSharp.Quotations.Patterns\n\nmodule ClientSideInternals =\n\n    module M = WebSharper.Core.Metadata\n    module R = WebSharper.Core.AST.Reflection\n    module J = WebSharper.Core.Json\n    module P = FSharp.Quotations.Patterns\n\n    let getLocation' (q: Expr) =\n        let (|Val|_|) e : 't option =\n            match e with\n            | Quotations.Patterns.Value(:? 't as v,_) -> Some v\n            | _ -> None\n        let l =\n            q.CustomAttributes |> Seq.tryPick (function\n                | NewTuple [ Val \"DebugRange\";\n                             NewTuple [ Val (file: string)\n                                        Val (startLine: int)\n                                        Val (startCol: int)\n                                        Val (endLine: int)\n                                        Val (endCol: int) ] ] ->\n                    Some (sprintf \"%s: %i.%i-%i.%i\" file startLine startCol endLine endCol)\n                | _ -> None)\n        defaultArg l \"(no location)\"\n\n    let (|Val|_|) e : 't option =\n        match e with\n        | Quotations.Patterns.Value(:? 't as v,_) -> Some v\n        | _ -> None\n\n    let getLocation (q: Expr) =\n        q.CustomAttributes |> Seq.tryPick (function\n            | P.NewTuple [ Val \"DebugRange\";\n                           P.NewTuple [ Val (file: string)\n                                        Val (startLine: int)\n                                        Val (startCol: int)\n                                        Val (endLine: int)\n                                        Val (endCol: int) ] ] ->\n                ({\n                    FileName = System.IO.Path.GetFileName(file)\n                    Start = (startLine, startCol)\n                    End = (endLine, endCol)\n                } : WebSharper.Core.AST.SourcePos)\n                |> Some\n            | _ -> None)\n\n    let rec findArgs (env: Set<string>) (setArg: string -> obj -> unit) (q: Expr) =\n        match q with\n        | P.ValueWithName (v, _, n) when not (env.Contains n) -> setArg n v\n        | P.AddressOf q\n        | P.Coerce (q, _)\n        | P.FieldGet (Some q, _)\n        | P.QuoteRaw q\n        | P.QuoteTyped q\n        | P.VarSet (_, q)\n        | P.WithValue (_, _, q)\n        | P.TupleGet (q, _)\n        | P.TypeTest (q, _)\n        | P.UnionCaseTest (q, _)\n            -> findArgs env setArg q\n        | P.AddressSet (q1, q2)\n        | P.Application (q1, q2)\n        | P.Sequential (q1, q2)\n        | P.TryFinally (q1, q2)\n        | P.WhileLoop (q1, q2)\n            -> findArgs env setArg q1; findArgs env setArg q2\n        | P.PropertyGet (q, _, qs)\n        | P.Call (q, _, qs) ->\n            Option.iter (findArgs env setArg) q\n            List.iter (findArgs env setArg) qs\n        | P.FieldSet (q1, _, q2) ->\n            Option.iter (findArgs env setArg) q1; findArgs env setArg q2\n        | P.ForIntegerRangeLoop (v, q1, q2, q3) ->\n            findArgs env setArg q1\n            findArgs env setArg q2\n            findArgs (Set.add v.Name env) setArg q3\n        | P.IfThenElse (q1, q2, q3)\n            -> findArgs env setArg q1; findArgs env setArg q2; findArgs env setArg q3\n        | P.Lambda (v, q) ->\n            findArgs (Set.add v.Name env) setArg q\n        | P.Let (v, q1, q2) ->\n            findArgs env setArg q1\n            findArgs (Set.add v.Name env) setArg q2\n        | P.LetRecursive (vqs, q) ->\n            let vs, qs = List.unzip vqs\n            let env = (env, vs) ||> List.fold (fun env v -> Set.add v.Name env)\n            List.iter (findArgs env setArg) qs\n            findArgs env setArg q\n        | P.NewObject (_, qs)\n        | P.NewRecord (_, qs)\n        | P.NewTuple qs\n        | P.NewUnionCase (_, qs)\n        | P.NewArray (_, qs) ->\n            List.iter (findArgs env setArg) qs\n        | P.NewDelegate (_, vs, q) ->\n            let env = (env, vs) ||> List.fold (fun env v -> Set.add v.Name env)\n            findArgs env setArg q\n        | P.PropertySet (q1, _, qs, q2) ->\n            Option.iter (findArgs env setArg) q1\n            List.iter (findArgs env setArg) qs\n            findArgs env setArg q2\n        | P.TryWith (q, v1, q1, v2, q2) ->\n            findArgs env setArg q\n            findArgs (Set.add v1.Name env) setArg q1\n            findArgs (Set.add v2.Name env) setArg q2\n        | _ -> ()\n    \n    let internal compileClientSide (meta: M.Info) (reqs: list<M.Node>) (q: Expr) : (obj[] * _) =\n        let rec compile (reqs: list<M.Node>) (q: Expr) =\n            match getLocation q with\n            | Some p ->\n                match meta.Quotations.TryGetValue(p) with\n                | false, _ ->\n                    let ex =\n                        meta.Quotations.Keys\n                        |> Seq.map (sprintf \"  %O\")\n                        |> String.concat \"\\n\"\n                    failwithf \"Failed to find compiled quotation at position %O\\nExisting ones:\\n%s\" p ex\n                | true, (declType, meth, argNames) ->\n                    match meta.Classes.TryGetValue declType with\n                    | false, _ -> failwithf \"Error in ClientSide: Couldn't find JavaScript address for method %s.%s\" declType.Value.FullName meth.Value.MethodName\n                    | true, c ->\n                        let argIndices = Map (argNames |> List.mapi (fun i x -> x, i))\n                        let args = Array.create argNames.Length null\n                        let reqs = ref (M.MethodNode (declType, meth) :: M.TypeNode declType :: reqs)\n                        let setArg (name: string) (value: obj) =\n                            let i = argIndices.[name]\n                            if isNull args.[i] then\n                                args.[i] <-\n                                    match value with\n                                    | :? Expr as q ->\n                                        failwith \"Error in ClientSide: Spliced expressions are not allowed in InlineControl\"\n                                    | value ->\n                                        let typ = value.GetType ()\n                                        reqs := M.TypeNode (WebSharper.Core.AST.Reflection.ReadTypeDefinition typ) :: !reqs\n                                        value\n                        if not (List.isEmpty argNames) then\n                            findArgs Set.empty setArg q\n                        args, !reqs\n            | None -> failwithf \"Failed to find location of quotation: %A\" q\n        compile reqs q \n\n    type private FSV = Reflection.FSharpValue\n\n    let internal compileClientSideFallback (elt: Expr) = \n        let declType, meth, args, fReqs, subs =\n            let elt =\n                match elt with\n                | Coerce (e, _) -> e\n                | e -> e\n            let rec get subs expr =\n                match expr with\n                | PropertyGet(None, p, args) ->\n                    let m = p.GetGetMethod(true)\n                    let dt = R.ReadTypeDefinition p.DeclaringType\n                    let meth = R.ReadMethod m\n                    dt, meth, args, [M.MethodNode (dt, meth)], subs\n                | Call(None, m, args) ->\n                    let dt = R.ReadTypeDefinition m.DeclaringType\n                    let meth = R.ReadMethod m\n                    dt, meth, args, [M.MethodNode (dt, meth)], subs\n                | Let(var, value, body) ->\n                    get (subs |> Map.add var value) body\n                | e -> failwithf \"Wrong format for InlineControl at %s: expected global value or function access, got: %A\" (getLocation' elt) e\n            get Map.empty elt\n        let args, argReqs =\n            args\n            |> List.mapi (fun i value ->\n                let rec get expr =\n                    match expr with\n                    | Value (v, t) ->\n                        let v = match v with null -> WebSharper.Core.Json.Internal.MakeTypedNull t | _ -> v\n                        v, M.TypeNode (R.ReadTypeDefinition t)\n                    | TupleGet(v, i) ->\n                        let v, n = get v\n                        FSV.GetTupleField(v, i), n\n                    | Var v when subs.ContainsKey v ->\n                        get subs.[v]   \n                    | _ -> failwithf \"Wrong format for InlineControl at %s: argument #%i is not a literal or a local variable\" (getLocation' elt) (i+1)\n                get value\n            )\n            |> List.unzip\n        let args = Array.ofList args\n        args, declType, meth, fReqs @ argReqs\n\nopen ClientSideInternals\n\n/// Implements a web control based on a quotation-wrapped top-level body.\n/// Use the function ClientSide or ctx.ClientSide to create an InlineControl.\n[<CompiledName \"FSharpInlineControl\">]\ntype InlineControl<'T when 'T :> IControlBody>(elt: Expr<'T>) =\n    inherit Control()\n\n    [<System.NonSerialized>]\n    let elt = elt\n\n    let mutable args = [||]\n    let mutable funcName = [||]\n\n    [<JavaScript>]\n    override this.Body =\n        let f = Array.fold (?) JS.Window funcName\n        As<Function>(f).ApplyUnsafe(null, args) :?> _\n\n    interface IRequiresResources with\n        member this.Requires(meta) =\n            let declType, meth, reqs =\n                match getLocation elt with\n                | None -> failwith \"Failed to find location of quotation\"\n                | Some p ->\n                    match meta.Quotations.TryGetValue p with\n                    | true, (ty, m, _) ->\n                        let argVals, deps = compileClientSide meta [] elt\n                        args <- argVals\n                        ty, m, deps\n                    | false, _ ->\n                        let argVals, ty, m, deps = compileClientSideFallback elt\n                        args <- argVals\n                        ty, m, deps\n\n            // set funcName\n            let fail() =\n                failwithf \"Error in InlineControl at %s: Couldn't find translation of method %s.%s. The method or type should have JavaScript attribute or a proxy, and the assembly needs to be compiled with WsFsc.exe\" \n                    (getLocation' elt) declType.Value.FullName meth.Value.MethodName\n            match meta.Classes.TryFind declType with\n            | None -> fail()\n            | Some cls ->\n                match cls.Methods.TryFind meth with\n                | Some (M.Static a, _, _) ->\n                    funcName <- Array.ofList (List.rev a.Value)\n                | Some _ ->\n                    failwithf \"Error in InlineControl at %s: Method %s.%s must be static and not inlined\"\n                        (getLocation' elt) declType.Value.FullName meth.Value.MethodName\n                | None -> fail()\n\n            this.GetBodyNode() :: reqs |> Seq.ofList\n\n        member this.Encode(meta, json) =\n            [this.ID, json.GetEncoder(this.GetType()).Encode this]\n\n\nopen System\nopen System.Reflection\nopen System.Linq.Expressions\n\n// TODO: test in arguments: needs .NET 4.5\n// open System.Runtime.CompilerServices\n//[<CallerFilePath; Optional>] sourceFilePath \n//[<CallerLineNumber; Optional>] sourceLineNumber\n[<CompiledName \"InlineControl\">]\ntype CSharpInlineControl(elt: System.Linq.Expressions.Expression<Func<IControlBody>>) =\n    inherit Control()\n\n    [<System.NonSerialized>]\n    let elt = elt\n\n    static let ctrlReq = M.TypeNode (R.ReadTypeDefinition typeof<InlineControl<IControlBody>>)\n\n    [<System.NonSerialized>]\n    let bodyAndReqs =\n        let reduce (e: Expression) = if e.CanReduce then e.Reduce() else e\n        let declType, meth, args, fReqs =\n            match reduce elt.Body with\n            | :? MemberExpression as e ->\n                match e.Member with\n                | :? PropertyInfo as p ->\n                    let m = p.GetGetMethod(true)\n                    let dt = R.ReadTypeDefinition p.DeclaringType\n                    let meth = R.ReadMethod m\n                    dt, meth, [], [M.MethodNode (dt, meth)]\n                | _ -> failwith \"member must be a property\"\n            | :? MethodCallExpression as e -> \n                let m = e.Method\n                let dt = R.ReadTypeDefinition m.DeclaringType\n                let meth = R.ReadMethod m\n                dt, meth, e.Arguments |> List.ofSeq, [M.MethodNode (dt, meth)]\n            | e -> failwithf \"Wrong format for InlineControl: expected global value or function access, got: %A\"  e\n        let args, argReqs =\n            args\n            |> List.mapi (fun i a -> \n                let rec get needType (a: Expression) =\n                    match reduce a with\n                    | :? ConstantExpression as e ->\n                        let v = match e.Value with null -> WebSharper.Core.Json.Internal.MakeTypedNull e.Type | _ -> e.Value\n                        v, if needType then M.TypeNode (R.ReadTypeDefinition e.Type) else M.EntryPointNode\n                    | :? MemberExpression as e ->\n                        let o = \n                            match e.Expression with\n                            | null -> null\n                            | ee -> fst (get false ee)\n                        match e.Member with\n                        | :? FieldInfo as f ->\n                            f.GetValue(o), if needType then M.TypeNode (R.ReadTypeDefinition f.FieldType) else M.EntryPointNode\n                        | :? PropertyInfo as p ->\n                            if p.GetIndexParameters().Length > 0 then\n                                failwithf \"Wrong format for InlineControl in argument #%i, indexed property not allowed\" (i+1)\n                            p.GetValue(o, null), if needType then M.TypeNode (R.ReadTypeDefinition p.PropertyType) else M.EntryPointNode\n                        | m -> failwithf \"Wrong format for InlineControl in argument #%i, member access not allowed: %s\" (i+1) (m.GetType().Name)\n                    | a -> failwithf \"Wrong format for InlineControl in argument #%i, expression type: %s\" (i+1) (a.GetType().Name)\n                get true a\n            )\n            |> List.unzip\n        let args = Array.ofList args\n        let reqs = ctrlReq :: fReqs @ argReqs\n        args, (declType, meth, reqs)\n\n    let args = fst bodyAndReqs\n    let mutable funcName = [||]\n\n    [<JavaScript>]\n    override this.Body =\n        let f = Array.fold (?) JS.Window funcName\n        As<Function>(f).ApplyUnsafe(null, args) :?> _\n\n    interface IRequiresResources with\n        member this.Encode(meta, json) =\n            if funcName.Length = 0 then\n                let declType, meth, reqs = snd bodyAndReqs\n                let fail() =\n                    failwithf \"Error in InlineControl: Couldn't find translation of method %s.%s. The method or type should have JavaScript attribute or a proxy, and the project file needs to include WebSharper.CSharp.targets\" \n                        declType.Value.FullName meth.Value.MethodName\n                match meta.Classes.TryFind declType with\n                | None -> fail()\n                | Some cls ->\n                    match cls.Methods.TryFind meth with\n                    | Some (M.Static a, _, _) ->\n                        funcName <- Array.ofList (List.rev a.Value)\n                    | Some _ -> \n                        failwithf \"Error in InlineControl: Method %s.%s must be static and not inlined\"\n                            declType.Value.FullName meth.Value.MethodName\n                    | None -> fail()\n            [this.ID, json.GetEncoder(this.GetType()).Encode this]\n\n        member this.Requires(_) =\n            let _, _, reqs = snd bodyAndReqs \n            this.GetBodyNode() :: reqs |> Seq.ofList\n\nnamespace WebSharper\n\n[<AutoOpen>]\nmodule WebExtensions =\n\n    open Microsoft.FSharp.Quotations\n    open WebSharper.Web\n\n    /// Embed the given client-side control body in a server-side control.\n    /// The client-side control body must be an implicit or explicit quotation expression.\n    /// It can capture local variables, of the same types which are serializable by WebSharper as RPC results.\n    let ClientSide ([<JavaScript; ReflectedDefinition>] e: Expr<#IControlBody>) =\n        new InlineControl<_>(e)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Sitelets\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.JQuery\nopen System.Collections.Generic\nopen System.Text\n\n#nowarn \"64\" // type parameter renaming warnings \n\n[<NamedUnionCases \"result\"; RequireQualifiedAccess>]\ntype ParseRequestResult<'T> =\n    | [<CompiledName \"success\">]\n      Success of endpoint: 'T\n    | [<CompiledName \"invalidMethod\">]\n      InvalidMethod of endpoint: 'T * ``method``: string\n    | [<CompiledName \"invalidJson\">]\n      InvalidJson of endpoint: 'T\n    | [<CompiledName \"missingQueryParameter\">]\n      MissingQueryParameter of endpoint: 'T * queryParam: string\n    | [<CompiledName \"missingFormData\">]\n      MissingFormData of endpoint: 'T * formFieldName: string\n\n    member this.Value =\n        match this with\n        | Success a\n        | InvalidMethod (a, _)\n        | InvalidJson a\n        | MissingQueryParameter (a, _)\n        | MissingFormData (a, _) -> a\n\n    [<System.Obsolete \"Use Value instead\">]\n    member this.Action = this.Value\n\n[<System.Obsolete \"Use ParseRequestResult instead of ActionEncoding.DecodeResult\">]\n/// For back-compatibility only, use ParseRequestResult instead of ActionEncoding.DecodeResult\nmodule ActionEncoding =\n\n    type DecodeResult<'T> = ParseRequestResult<'T>\n\n    let Success endpoint = ParseRequestResult.Success endpoint\n    let InvalidMethod (endpoint, ``method``) = ParseRequestResult.InvalidMethod(endpoint, ``method``)\n    let InvalidJson endpoint = ParseRequestResult.InvalidJson endpoint\n    let MissingQueryParameter (endpoint, queryParam) = ParseRequestResult.MissingQueryParameter(endpoint, queryParam)\n    let MissingFormData (endpoint, formFieldName) = ParseRequestResult.MissingFormData(endpoint, formFieldName)\n\nmodule StringEncoding =\n\n    [<JavaScript>]\n    let isUnreserved isLast c =\n        match c with\n        | '-' | '_' -> true\n        | '.' -> not isLast\n        | c when c >= 'A' && c <= 'Z' -> true\n        | c when c >= 'a' && c <= 'z' -> true\n        | c when c >= '0' && c <= '9' -> true\n        | _ -> false\n    \n    let writeEscaped (w: System.Text.StringBuilder) isLast c =\n        let k = int c\n        if isUnreserved isLast c then w.Append c\n        elif k < 256 then w.AppendFormat(\"~{0:x2}\", k)\n        else w.AppendFormat(\"~u{0:x4}\", k)\n        |> ignore\n\n    [<JavaScript>]\n    let writeEscapedAsString isLast c =\n        let k = int c\n        if isUnreserved isLast c then string c\n        elif k < 256 then \"~\" + k.JS.ToString(16).PadLeft(2, '0')\n        else \"~u\" + k.JS.ToString(16).PadLeft(4, '0')\n\n    [<JavaScript>]\n    let write (s: string) = \n        if IsClient then\n            s |> Seq.mapi (fun i c ->\n                writeEscapedAsString (i + 1 = s.Length) c\n            )\n            |> String.concat \"\"\n        else\n            let b = System.Text.StringBuilder()\n            s |> Seq.iteri (fun i c ->\n                writeEscaped b (i + 1 = s.Length) c)\n            string b\n\n    [<JavaScript>]\n    let inline ( ++ ) (a: int) (b: int) = (a <<< 4) + b\n\n    [<Literal>]\n    let EOF = -1\n\n    [<Literal>]\n    let ERROR = -2\n\n    let readEscaped (r: System.IO.TextReader) =\n        let hex x =\n            match x with\n            | x when x >= int '0' && x <= int '9' -> x - int '0'\n            | x when x >= int 'a' && x <= int 'f' -> x - int 'a' + 10\n            | x when x >= int 'A' && x <= int 'F' -> x - int 'A' + 10\n            | _ -> ERROR\n        match r.Read() with\n        | x when x = int '~' ->\n            match r.Read() with\n            | x when x = int 'u' ->\n                let a = r.Read()\n                let b = r.Read()\n                let c = r.Read()\n                let d = r.Read()\n                if a >= 0 && b >= 0 && c >= 0 && d >= 0 then\n                    hex a ++ hex b ++ hex c ++ hex d\n                else ERROR\n            | x ->\n                let y = r.Read()\n                if x >= 0 && y >= 0 then\n                    hex x ++ hex y\n                else ERROR\n        | x ->\n            x\n\n    [<JavaScript>]\n    let readEscapedFromChars (chars: int list) =\n        let mutable chars = chars\n        let read() =\n            match chars with\n            | [] -> -1\n            | h :: t ->\n                chars <- t\n                h\n        let hex x =\n            match x with\n            | x when x >= int '0' && x <= int '9' -> x - int '0'\n            | x when x >= int 'a' && x <= int 'f' -> x - int 'a' + 10\n            | x when x >= int 'A' && x <= int 'F' -> x - int 'A' + 10\n            | _ -> ERROR\n        match read() with\n        | x when x = int '~' ->\n            match read() with\n            | x when x = int 'u' ->\n                let a = read()\n                let b = read()\n                let c = read()\n                let d = read()\n                if a >= 0 && b >= 0 && c >= 0 && d >= 0 then\n                    hex a ++ hex b ++ hex c ++ hex d\n                else ERROR\n            | x ->\n                let y = read()\n                if x >= 0 && y >= 0 then\n                    hex x ++ hex y\n                else ERROR\n        | x ->\n            x\n        , chars\n\n    [<JavaScript>]\n    let read (s: string) = \n        if IsClient then\n            let buf = ResizeArray()\n            let rec loop chars =\n                match readEscapedFromChars chars with\n                | ERROR, _ -> None\n                | EOF, _ -> Some (buf |> String.concat \"\")\n                | x, chars -> \n                    buf.Add(string (char x))\n                    loop chars\n            s |> Seq.map int |> List.ofSeq |> loop\n        else\n            let buf = System.Text.StringBuilder()\n            use i = new System.IO.StringReader(s)\n            let rec loop () =\n                match readEscaped i with\n                | ERROR -> None\n                | EOF -> Some (string buf)\n                | x -> buf.Append(char x) |> ignore; loop ()\n            loop ()\n\ntype internal PathUtil =\n    static member WriteQuery q =\n        let sb = StringBuilder 128\n        let mutable start = true\n        q |> Map.toSeq |> Seq.iter (fun (k: string, v: string) ->\n            if start then\n                start <- false\n            else \n                sb.Append('&') |> ignore                    \n            sb.Append(k).Append('=').Append(v) |> ignore\n        )\n        sb.ToString()\n\n    static member WriteLink s q =\n        let sb = StringBuilder 128\n        if List.isEmpty s then\n            sb.Append('/') |> ignore\n        else\n            s |> List.iter (fun x ->\n                if not (System.String.IsNullOrEmpty x) then\n                    sb.Append('/').Append(x) |> ignore\n            )\n        if Map.isEmpty q then () \n        else \n            let mutable start = true\n            sb.Append('?') |> ignore                    \n            q |> Map.toSeq |> Seq.iter (fun (k: string, v: string) ->\n                if start then\n                    start <- false\n                else \n                    sb.Append('&') |> ignore                    \n                sb.Append(k).Append('=').Append(v) |> ignore\n            )\n        sb.ToString()\n\n[<Proxy(typeof<PathUtil>)>]\ntype internal PathUtilProxy =\n    static member Concat xs = \n        let sb = System.Collections.Generic.Queue()\n        let mutable start = true\n        xs |> List.iter (fun x ->\n            if not (System.String.IsNullOrEmpty x) then\n                if start then\n                    start <- false\n                else \n                    sb.Enqueue(\"/\") |> ignore                    \n                sb.Enqueue(x) |> ignore\n        )\n        sb |> System.String.Concat\n\n    static member WriteQuery q =\n        q |> Map.toSeq |> Seq.map (fun (k, v) -> k + \"=\" + v) |> String.concat \"&\"\n\n    static member WriteLink s q =\n        let query = \n            if Map.isEmpty q then \"\" \n            else \"?\" + PathUtil.WriteQuery(q)\n        \"/\" + PathUtilProxy.Concat s + query\n\n[<JavaScript>]\ntype Route =\n    {\n        Segments : list<string>\n        QueryArgs : Map<string, string>\n        FormData : Map<string, string>\n        Method : option<string> \n        Body : Lazy<string>\n    }\n\n    static member Empty =\n        {\n            Segments = []\n            QueryArgs = Map.empty\n            FormData = Map.empty\n            Method = None\n            Body = Lazy.CreateFromValue null\n        }\n    \n    static member Segment s =\n        { Route.Empty with\n            Segments = [ s ]\n        }\n\n    static member Segment s =\n        { Route.Empty with\n            Segments = s\n        }\n\n    static member Segment (s, m) =\n        { Route.Empty with\n            Segments = s\n            Method = m\n        }\n\n    static member Combine (paths: seq<Route>) =\n        let paths = Seq.toArray paths\n        match paths.Length with\n        | 1 -> paths.[0]\n        | 0 -> Route.Empty\n        | _ ->\n        let mutable method = None\n        let mutable body = null\n        let segments = System.Collections.Generic.Queue()\n        let mutable queryArgs = Map.empty\n        let mutable formData = Map.empty\n        let mutable i = 0\n        let l = paths.Length\n        while i < l do\n            let p = paths.[i]\n            match p.Method with\n            | Some _ as m ->\n                method <- m\n            | _ -> ()\n            match p.Body.Value with\n            | null -> ()\n            | b ->\n                body <- b\n            queryArgs <- p.QueryArgs |> Map.foldBack Map.add queryArgs \n            formData <- p.FormData |> Map.foldBack Map.add formData \n            p.Segments |> List.iter segments.Enqueue\n            i <- i + 1\n        {\n            Segments = List.ofSeq segments\n            QueryArgs = queryArgs\n            FormData = formData\n            Method = method\n            Body = Lazy.CreateFromValue body\n        }\n\n    static member ParseQuery(q: string) =\n        q.Split('&') |> Array.choose (fun kv ->\n            match kv.Split('=') with\n            | [| k; v |] -> Some (k, v)\n            | _ -> \n                printfn \"wrong format for query argument: %s\" kv\n                None\n        ) |> Map.ofSeq\n    \n    static member WriteQuery(q) = PathUtil.WriteQuery q\n\n    static member FromUrl(path: string, ?strict: bool) =\n        let s, q = \n            match path.IndexOf '?' with\n            | -1 -> path, Map.empty\n            | i -> \n                path.Substring(0, i),\n                path.Substring(i + 1) |> Route.ParseQuery\n        let splitOptions =\n            if Option.isSome strict && strict.Value then \n                System.StringSplitOptions.None\n            else\n                System.StringSplitOptions.RemoveEmptyEntries\n        { Route.Empty with\n            Segments = \n                s.Split([| '/' |], splitOptions) |> List.ofArray\n            QueryArgs = q\n        }\n\n    [<JavaScript false>]\n    static member FromRequest(r: Http.Request) =\n        let u = r.Uri\n        let p =\n            if u.IsAbsoluteUri then \n                u.AbsolutePath \n            else \n                let s = u.OriginalString\n                match s.IndexOf('?') with\n                | -1 -> s\n                | q -> s.Substring(0, q)\n        {\n            Segments = p.Split([| '/' |], System.StringSplitOptions.RemoveEmptyEntries) |> List.ofArray\n            QueryArgs = r.Get.ToList() |> Map.ofList\n            FormData = r.Post.ToList() |> Map.ofList\n            Method = Some (r.Method.ToString())\n            Body = lazy r.BodyText\n        }\n\n    static member FromHash(path: string, ?strict: bool) =\n        match path.IndexOf \"#\" with\n        | -1 -> Route.Empty\n        | i -> \n            let h = path.Substring(i + 1)\n            if Option.isSome strict && strict.Value then \n                if h = \"\" || h = \"/\" then\n                    Route.Empty\n                elif h.StartsWith \"/\" then\n                    Route.FromUrl(h.Substring(1), true)\n                else\n                    Route.Segment(h)                    \n            else\n                Route.FromUrl(path.Substring(i), false)\n\n    member this.ToLink() = PathUtil.WriteLink this.Segments this.QueryArgs\n\n[<JavaScript>]\nmodule internal List =\n    let rec startsWith s l =\n        match s, l with\n        | [], _ -> Some l\n        | sh :: sr, lh :: lr when sh = lh -> startsWith sr lr\n        | _ -> None\n\ntype IRouter<'T> =\n    abstract Route : Http.Request -> option<'T>\n    abstract Link : 'T -> option<System.Uri>\n\n[<JavaScript>]\ntype Router =\n    {\n        Parse : Route -> Route seq\n        Segment : seq<Route> \n    }\n    \n    static member FromString (name: string) =\n        let parts = name.Split([| '/' |], System.StringSplitOptions.RemoveEmptyEntries)\n        if Array.isEmpty parts then \n            {\n                Parse = fun path -> Seq.singleton path\n                Segment = Seq.empty\n            }\n        else\n            let parts = List.ofArray parts\n            {\n                Parse = fun path ->\n                    match path.Segments |> List.startsWith parts with\n                    | Some p -> \n                        Seq.singleton ({ path with Segments = p })\n                    | _ -> Seq.empty\n                Segment = \n                    Seq.singleton (Route.Segment parts)\n            }\n\n    static member (/) (before: Router, after: Router) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect after.Parse\n            Segment = \n                Seq.append before.Segment after.Segment\n        }\n\n    [<Inline>]\n    static member (/) (before: string, after: Router) = Router.FromString before / after\n\n    [<Inline>]\n    static member (/) (before: Router, after: string) = before / Router.FromString after\n\n    static member (+) (a: Router, b: Router) =\n        {\n            Parse = fun path ->\n                Seq.append (a.Parse path) (b.Parse path) \n            Segment = a.Segment\n        }\n\n    [<Inline>]\n    static member Combine<'A, 'B when 'A: equality and 'B: equality>(a: Router<'A>, b: Router<'B>) : Router<'A * 'B> =\n        a / b\n\nand [<JavaScript>] Router<'T when 'T: equality> =\n    {\n        Parse : Route -> (Route * 'T) seq\n        Write : 'T -> option<seq<Route>> \n    }\n    \n    static member (/) (before: Router<'T>, after: Router<'U>) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect (fun (p, x) -> after.Parse p |> Seq.map (fun (p, y) -> (p, (x, y))))\n            Write = fun (v1, v2) ->\n                match before.Write v1, after.Write v2 with\n                | Some p1, Some p2 -> Some (Seq.append p1 p2)\n                | _ -> None\n        }\n\n    static member (/) (before: Router, after: Router<'T>) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect after.Parse\n            Write = fun v ->\n                after.Write v |> Option.map (Seq.append before.Segment)\n        }\n\n    static member (/) (before: Router<'T>, after: Router) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect (fun (p, x) -> after.Parse p |> Seq.map (fun p -> (p, x)))\n            Write = fun v ->\n                before.Write v |> Option.map (fun x -> Seq.append x after.Segment)\n        }\n\n    [<Inline>]\n    static member (/) (before: string, after: Router<'T>) = Router.FromString before / after\n\n    [<Inline>]\n    static member (/) (before: Router<'T>, after: string) = before / Router.FromString after\n\n    static member (+) (a: Router<'T>, b: Router<'T>) =\n        {\n            Parse = fun path ->\n                Seq.append (a.Parse path) (b.Parse path) \n            Write = fun value ->\n                match a.Write value with\n                | None -> b.Write value\n                | p -> p\n        }\n\n    interface IRouter<'T> with\n        [<JavaScript false>]\n        member this.Route req = \n            let path = Route.FromRequest req\n            this.Parse path\n            |> Seq.tryPick (fun (path, value) -> if List.isEmpty path.Segments then Some value else None)\n        [<JavaScript false>]\n        member this.Link ep =\n            this.Write ep |> Option.map (fun p -> System.Uri((Route.Combine p).ToLink(), System.UriKind.Relative))\n        \n[<JavaScript>]\nmodule Router =\n    [<Inline>]\n    let Combine (a: Router<'A>) (b: Router<'B>) = a / b\n    \n    [<Inline>]\n    let Shift (prefix: string) (router: Router<'A>) =\n        prefix / router\n\n    let Empty<'A when 'A: equality> : Router<'A> =\n        {\n            Parse = fun _ -> Seq.empty\n            Write = fun _ -> None\n        }\n\n    /// Creates a fully customized router.\n    let New (route: Http.Request -> option<'T>) (link: 'T -> option<System.Uri>) =\n        { new IRouter<'T> with\n            member this.Route req = route req\n            member this.Link e = link e\n        }\n\n    /// Creates a router for parsing/writing a full route using URL segments.\n    let Create (ser: 'T -> list<string>) (des: list<string> -> option<'T>) =\n        {\n            Parse = fun path ->\n                match des path.Segments with\n                | Some ep ->\n                    Seq.singleton ({ path with Segments = [] }, ep)\n                | None ->\n                    Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment(ser value)))\n        } : Router<'T>\n\n    /// Creates a router for parsing/writing a full route using URL segments and query parameters.\n    let CreateWithQuery (ser: 'T -> list<string> * Map<string, string>) (des: list<string> * Map<string, string> -> option<'T>) =\n        {\n            Parse = fun path ->\n                match des (path.Segments, path.QueryArgs) with\n                | Some ep ->\n                    Seq.singleton ({ path with Segments = [] }, ep)\n                | None ->\n                    Seq.empty\n            Write = fun value ->\n                let s, q = ser value\n                Some (Seq.singleton { Route.Empty with Segments = s; QueryArgs = q })\n        }\n    \n    /// Parses/writes a single value from a query argument with the given key instead of url path.\n    let Query key (item: Router<'A>) : Router<'A> =\n        {\n            Parse = fun path ->\n                match path.QueryArgs.TryFind key with\n                | None -> Seq.empty\n                | Some q -> \n                    let newQa = path.QueryArgs |> Map.remove key\n                    item.Parse { Route.Empty with Segments = [ q ] }\n                    |> Seq.map (fun (p, v) ->\n                        { path with QueryArgs = newQa }, v\n                    )\n            Write = fun value ->\n                item.Write value |> Option.map (fun p -> \n                    let p = Route.Combine p\n                    match p.Segments with\n                    | [ v ] -> Seq.singleton { Route.Empty with QueryArgs = Map.ofList [ key, v ] }\n                    | _ -> Seq.empty\n                )\n        }\n\n    /// Parses/writes a single option value from an optional query argument with the given key instead of url path.\n    let QueryOption key (item: Router<'A>) : Router<option<'A>> =\n        {\n            Parse = fun path ->\n                match path.QueryArgs.TryFind key with\n                | None -> Seq.singleton (path, None)\n                | Some q -> \n                    let newQa = path.QueryArgs |> Map.remove key\n                    item.Parse { Route.Empty with Segments = [ q ] }\n                    |> Seq.map (fun (_, v) ->\n                        { path with QueryArgs = newQa }, Some v\n                    )\n            Write = fun value ->\n                match value with\n                | None -> Some Seq.empty\n                | Some v ->\n                    item.Write v |> Option.map (fun p -> \n                        let p = Route.Combine p\n                        match p.Segments with\n                        | [ v ] -> Seq.singleton { Route.Empty with QueryArgs = Map.ofList [ key, v ] }\n                        | _ -> Seq.empty\n                    )\n        }\n\n    /// Parses/writes a single nullable value from an optional query argument with the given key instead of url path.\n    let QueryNullable key (item: Router<'A>) : Router<System.Nullable<'A>> =\n        {\n            Parse = fun path ->\n                match path.QueryArgs.TryFind key with\n                | None -> Seq.singleton (path, System.Nullable())\n                | Some q -> \n                    let newQa = path.QueryArgs |> Map.remove key\n                    item.Parse { Route.Empty with Segments = [ q ] }\n                    |> Seq.map (fun (_, v) ->\n                        { path with QueryArgs = newQa }, System.Nullable v\n                    )\n            Write = fun value ->\n                if value.HasValue then\n                    item.Write value.Value |> Option.map (fun p -> \n                        let p = Route.Combine p\n                        match p.Segments with\n                        | [ v ] -> Seq.singleton { Route.Empty with QueryArgs = Map.ofList [ key, v ] }\n                        | _ -> Seq.empty\n                    )\n                else\n                    Some Seq.empty\n        }\n\n    let Method (m: string) : Router =\n        {\n            Parse = fun path ->\n                match path.Method with\n                | Some pm when pm = m -> Seq.singleton path\n                | _ -> Seq.empty\n            Segment =\n                Seq.singleton { Route.Empty with Method = Some m }\n        }\n\n    let Body (deserialize: string -> option<'A>) (serialize: 'A -> string) : Router<'A> =\n        {\n            Parse = fun path ->\n                match path.Body.Value with\n                | null -> Seq.empty\n                | x ->\n                    match deserialize x with\n                    | Some b -> Seq.singleton ({ path with Body = Lazy.CreateFromValue null}, b)\n                    | _ -> Seq.empty\n            Write = fun value ->\n                Some <| Seq.singleton { Route.Empty with Body = Lazy.CreateFromValue (serialize value) }\n        }\n\n    let FormData (item: Router<'A>) : Router<'A> =\n        {\n            Parse = fun path ->\n                item.Parse { path with QueryArgs = path.FormData }\n                |> Seq.map (fun (_, r) -> path, r)\n            Write = fun value ->\n                item.Write value\n                |> Option.map (Seq.map (fun p -> { p with QueryArgs = Map.empty; FormData = p.QueryArgs }))  \n        }\n    \n    let Parse (router: Router<'A>) path =\n        router.Parse path\n        |> Seq.tryPick (fun (path, value) -> if List.isEmpty path.Segments then Some value else None)\n\n    let Write (router: Router<'A>) endpoint =\n        router.Write endpoint |> Option.map Route.Combine \n\n    let TryLink (router: Router<'A>) endpoint =\n        match Write router endpoint with\n        | Some p -> Some (p.ToLink())\n        | None -> None\n\n    let Link (router: Router<'A>) endpoint =\n        match Write router endpoint with\n        | Some p -> p.ToLink()\n        | None -> \"\"\n\n    let Ajax (router: Router<'A>) endpoint =\n        match Write router endpoint with\n        | Some path ->\n            let settings = AjaxSettings(DataType = DataType.Text)\n            match path.Method with\n            | Some m -> settings.Type <- As m\n            | _ -> ()\n            match path.Body.Value with\n            | null ->\n                if not (Map.isEmpty path.FormData) then\n                    let fd = JavaScript.FormData()\n                    path.FormData |> Map.iter (fun k v -> fd.Append(k, v))\n                    settings.ContentType <- Union1Of2 false\n                    settings.Data <- fd\n                    settings.ProcessData <- false\n            | b ->\n                settings.ContentType <- Union2Of2 \"application/json\"\n                settings.Data <- b\n                settings.ProcessData <- false\n            if Option.isNone path.Method then settings.Type <- RequestType.POST \n            Async.FromContinuations (fun (ok, err, cc) ->\n                settings.Success <- fun res _ _ -> ok (As<string> res) \n                settings.Error <- fun _ _ msg -> err (exn msg)\n                // todo: cancellation\n                let url = path.ToLink()\n                JQuery.Ajax(url, settings) |> ignore\n            )\n        | _ -> \n            failwith \"Failed to map endpoint to request\" \n\n    let Fetch (router: Router<'A>) endpoint : Promise<Response> =\n        match Write router endpoint with\n        | Some path ->\n            let options = RequestOptions()\n            match path.Method with\n            | Some m -> options.Method <- m\n            | None -> ()\n            match path.Body.Value with\n            | null ->\n                if not (Map.isEmpty path.FormData) then\n                    let fd = JavaScript.FormData()\n                    path.FormData |> Map.iter (fun k v -> fd.Append(k, v))\n                    options.Body <- fd\n            | b ->\n                options.Body <- b\n            if Option.isNone path.Method then options.Method <- \"POST\"\n            JS.Fetch(path.ToLink(), options)\n        | _ -> \n            failwith \"Failed to map endpoint to request\" \n\n    let HashLink (router: Router<'A>)  endpoint =\n        \"#\" + Link router endpoint\n    \n    /// Maps a router to a narrower router type. The decode function must return None if the\n    /// value can't be mapped to a value of the target.\n    let Slice (decode: 'T -> 'U option) (encode: 'U -> 'T) (router: Router<'T>) : Router<'U> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> decode v |> Option.map (fun v -> p, v)) \n            Write = fun value ->\n                encode value |> router.Write\n        }\n\n    /// Maps a router to a wider router type. The encode function must return None if the\n    /// value can't be mapped back to a value of the source.\n    let Embed (decode: 'A -> 'B) (encode: 'B -> 'A option) router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun (p, v) -> p, decode v) \n            Write = fun value ->\n                encode value |> Option.bind router.Write\n        }\n\n    /// Maps a router with a bijection.\n    let Map (decode: 'A -> 'B) (encode: 'B -> 'A) router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun (p, v) -> p, decode v) \n            Write = fun value ->\n                encode value |> router.Write\n        }\n\n    /// Combination of Slice and Embed, a mapping from a subset of source values to\n    /// a subset of target values. Both encode and decode must return None if\n    /// there is no mapping to a value of the other type.\n    let TryMap (decode: 'A -> 'B option) (encode: 'B -> 'A option) router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> decode v |> Option.map (fun v -> p, v)) \n            Write = fun value ->\n                encode value |> Option.bind router.Write\n        }\n\n    /// Filters a router, only parsing/writing values that pass the predicate check.\n    let Filter predicate router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.filter (snd >> predicate)\n            Write = fun value ->\n                if predicate value then router.Write value else None\n        }\n\n    [<Name \"Box\">]\n    let private BoxImpl tryUnbox (router: Router<'A>): Router<obj> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun (p, v) -> p, box v) \n            Write = fun value ->\n                tryUnbox value |> Option.bind router.Write\n        }\n\n    [<Inline>]\n    /// Converts to Router<obj>. When writing, a type check against type A is performed.\n    let Box (router: Router<'A>): Router<obj> =\n        BoxImpl (function :? 'A as v -> Some v | _ -> None) router\n\n    [<Inline>]\n    let Json<'T when 'T: equality> : Router<'T> =\n        Body (fun s -> try Some (Json.Deserialize<'T> s) with _ -> None) Json.Serialize<'T>\n\n    [<Name \"Unbox\">]\n    let UnboxImpl<'A when 'A: equality> tryUnbox (router: Router<obj>) : Router<'A> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> match tryUnbox v with Some v -> Some (p, v) | _ -> None) \n            Write = fun value ->\n                box value |> router.Write\n        }\n\n    [<Inline>]\n    /// Converts from Router<obj>. When parsing, a type check against type A is performed.\n    let Unbox<'A when 'A: equality> (router: Router<obj>) : Router<'A> =\n        UnboxImpl (function :? 'A as v -> Some v | _ -> None) router\n\n    [<Name \"Cast\">]\n    let private CastImpl tryParseCast tryWriteCast (router: Router<'A>): Router<'B> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> match tryParseCast v with Some v -> Some (p, v) | _ -> None) \n            Write = fun value ->\n                tryWriteCast value |> Option.bind router.Write\n        }\n\n    [<Inline>]\n    /// Converts a Router<A> to Router<B>. When parsing and writing, type checks are performed.\n    /// Upcasting do not change set of parsed routes, downcasting restricts it within the target type.\n    let Cast (router: Router<'A>): Router<'B> =\n        CastImpl (fun v -> match box v with :? 'B as v -> Some v | _ -> None) (fun v -> match box v with :? 'A as v -> Some v | _ -> None) router\n\n    /// Maps a single-valued (non-generic) Router to a specific value.\n    let MapTo value (router: Router) =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun p -> p, value) \n            Write = fun v ->\n                if v = value then Some router.Segment else None\n        }\n\n    /// Parses/writes using any of the routers, attempts are made in the given order.\n    let Sum (routers: seq<Router<_>>) =\n        let routers = Array.ofSeq routers\n        {\n            Parse = fun path ->\n                routers |> Seq.collect (fun r -> r.Parse path)\n            Write = fun value ->\n                routers |> Seq.tryPick (fun r -> r.Write value)\n        }\n    \n    // todo: optimize\n    let Table<'T when 'T : equality> (mapping: seq<'T * string>) : Router<'T> =\n        mapping |> Seq.map (fun (v, s) -> Router.FromString s |> MapTo v) |> Sum \n\n    let Single<'T when 'T : equality> (endpoint: 'T) (route: string) : Router<'T> =\n        let parts = route.Split([| '/' |], System.StringSplitOptions.RemoveEmptyEntries)\n        if Array.isEmpty parts then \n            {\n                Parse = fun path -> Seq.singleton (path, endpoint)\n                Write = fun value -> if value = endpoint then Some Seq.empty else None\n            }\n        else\n            let parts = List.ofArray parts\n            {\n                Parse = fun path ->\n                    match path.Segments |> List.startsWith parts with\n                    | Some p -> \n                        Seq.singleton ({ path with Segments = p }, endpoint)\n                    | _ -> Seq.empty\n                Write = fun value ->\n                    if value = endpoint then Some (Seq.singleton (Route.Segment parts)) else None\n            }\n\n    let Delay<'T when 'T: equality> (getRouter: unit -> Router<'T>) : Router<'T> =\n        let r = lazy getRouter()\n        {\n            Parse = fun path -> r.Value.Parse path\n            Write = fun value -> r.Value.Write value\n        }\n\n    /// Creates a router for parsing/writing an Array of values.\n    let Array (item: Router<'A>) : Router<'A[]> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match System.Int32.TryParse h with\n                    | true, l ->\n                        let rec collect l path acc =\n                            if l = 0 then Seq.singleton (path, Array.ofList (List.rev acc))\n                            else item.Parse path |> Seq.collect(fun (p, a) -> collect (l - 1) p (a :: acc))\n                        collect l { path with Segments = t } []\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                let parts = value |> Array.map item.Write\n                if Array.forall Option.isSome parts then\n                    Some (Seq.append (Seq.singleton (Route.Segment (string value.Length))) (parts |> Seq.collect Option.get))\n                else None                      \n        }\n\n    /// Creates a router for parsing/writing a Nullable value.\n    let Nullable (item: Router<'A>) : Router<System.Nullable<'A>> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | \"null\" :: p -> \n                    Seq.singleton ({ path with Segments = p }, System.Nullable())\n                | _ ->\n                    item.Parse path |> Seq.map (fun (p, v) -> p, System.Nullable v)\n            Write = fun value ->\n                if value.HasValue then \n                    item.Write value.Value\n                else \n                    Some (Seq.singleton (Route.Segment \"null\"))\n        }\n\n    /// Creates a router for parsing/writing an F# option of a value.\n    let Option (item: Router<'A>) : Router<'A option> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | \"None\" :: p -> \n                    Seq.singleton ({ path with Segments = p }, None)\n                | \"Some\" :: p ->\n                    item.Parse { path with Segments = p } |> Seq.map (fun (p, v) -> p, Some v)\n                | _ ->\n                    Seq.empty\n            Write = fun value ->\n                match value with \n                | None -> Some (Seq.singleton (Route.Segment \"None\"))\n                | Some v -> \n                    item.Write v |> Option.map (Seq.append (Seq.singleton (Route.Segment \"Some\")))\n        }\n\n    module FArray = Collections.Array\n\n    type IListArrayConverter =\n        abstract OfArray: obj -> obj\n        abstract ToArray: obj -> obj\n\n    type ListArrayConverter<'T>() =\n        interface IListArrayConverter with\n            member this.OfArray a = List.ofArray (unbox<'T []> a) |> box\n            member this.ToArray l = List.toArray (unbox<'T list> l) |> box\n\n    /// Creates a router for parsing/writing an F# list of a value.\n    let List (item: Router<'A>) : Router<'A list> =\n        Array item |> Map List.ofArray FArray.ofList\n\ntype Router with\n    [<Inline>]\n    member this.MapTo(value: 'T) =\n        Router.MapTo value this\n\n    [<Inline>]\n    static member Sum ([<System.ParamArray>] routers: Router<'T>[]) =\n        Router.Sum routers\n\n    [<Inline>]\n    static member Empty<'T when 'T: equality>() =\n        Router.Empty<'T>\n\n    [<JavaScript false>]\n    static member New(route: System.Func<Http.Request, 'T>, link: System.Func<'T, System.Uri>) =\n        Router.New (route.Invoke >> Option.ofObj) (link.Invoke >> Option.ofObj)\n\n    [<Inline>]\n    static member Method(method:string) =\n        Router.Method method\n\n    [<Inline>]\n    static member Body(des:System.Func<string, 'T>, ser: System.Func<'T, string>) =\n        Router.Body (fun s -> des.Invoke s |> Option.ofObj) ser.Invoke \n\n    [<Inline>]\n    static member Json<'T when 'T: equality>() =\n        Router.Json<'T>\n\n    [<Inline>]\n    static member Table([<System.ParamArray>] mapping: ('T * string)[]) =\n        Router.Table mapping\n\n    [<Inline>]\n    static member Single(endpoint, route) =\n        Router.Single endpoint route\n\n    [<Inline>]\n    static member Delay(getRouter: System.Func<Router<'T>>) =\n        Router.Delay getRouter.Invoke\n\ntype Router<'T when 'T: equality> with\n\n    [<Inline>]\n    member this.Query(key: string) =\n        Router.Query key this\n\n    [<Inline>]\n    member this.Link(endpoint: 'T) =\n        Router.Link this endpoint\n\n    [<Inline>]\n    member this.TryLink(endpoint: 'T, link: byref<string>) =\n        match Router.TryLink this endpoint with\n        | Some l ->\n            link <- l\n            true\n        | _ -> false\n               \n    [<Inline>]\n    member this.HashLink(endpoint: 'T) =\n        Router.HashLink this endpoint\n\n    [<Inline>]\n    member this.Map(decode: System.Func<'T, 'U>, encode: System.Func<'U, 'T>) =\n        Router.TryMap (decode.Invoke >> ofObjNoConstraint) (encode.Invoke >> ofObjNoConstraint) this\n\n    [<Inline>]\n    member this.Filter(predicate: System.Func<'T, bool>) =\n        Router.Filter predicate.Invoke this\n\n    [<Inline>]\n    member this.Cast<'U when 'U: equality>() : Router<'U> =\n        Router.Cast this\n\n    [<Inline>]\n    member this.FormData() =\n        Router.FormData this\n\n    [<Inline>]\n    member this.Ajax(endpoint) =\n        Router.Ajax this endpoint |> Async.StartAsTask\n\n    [<Inline>]\n    member this.Box() =\n        Router.Box this\n\n    [<Inline>]\n    member this.Array() =\n        Router.Array this\n\nopen System.Runtime.CompilerServices\n    \n[<Extension>]\ntype RouterExtensions =\n    [<Inline>]\n    static member QueryNullable(router, key) =\n        Router.QueryNullable key router\n\n    [<Inline>]\n    static member Unbox<'T when 'T: equality>(router) =\n        Router.Unbox<'T> router\n\n    [<Inline>]\n    static member Nullable(router) =\n        Router.Nullable router\n\nmodule IRouter =\n    open System\n\n    let Empty : IRouter<'T> =\n        { new IRouter<'T> with\n            member this.Route _ = None\n            member this.Link _ = None\n        }        \n\n    let Add (r1: IRouter<'T>) (r2: IRouter<'T>) =\n        { new IRouter<'T> with\n            member this.Route req = match r1.Route req with Some _ as l -> l | _ -> r2.Route req\n            member this.Link e = match r1.Link e with Some _ as l -> l | _ -> r2.Link e\n        }        \n\n    let Sum (routers: seq<IRouter<'T>>) : IRouter<'T> =\n        let routers = Array.ofSeq routers\n        if Seq.isEmpty routers then Empty else\n            { new IRouter<'T> with\n                member this.Route req = routers |> Array.tryPick (fun r -> r.Route req)\n                member this.Link e = routers |> Array.tryPick (fun r -> r.Link e)\n            }        \n            \n    let Map encode decode (router: IRouter<'T>) : IRouter<'U> =\n        { new IRouter<'U> with\n            member this.Route req = router.Route req |> Option.map encode\n            member this.Link e = decode e |> router.Link\n        } \n        \n    let TryMap encode decode (router: IRouter<'T>) : IRouter<'U> =\n        { new IRouter<'U> with\n            member this.Route req = router.Route req |> Option.bind encode\n            member this.Link e = decode e |> Option.bind router.Link\n        } \n\n    let Embed encode decode (router: IRouter<'T>) : IRouter<'U> =\n        { new IRouter<'U> with\n            member this.Route req = router.Route req |> Option.map encode\n            member this.Link e = decode e |> Option.bind router.Link\n        } \n\n    let private makeUri uri =\n        let mutable res = null\n        if Uri.TryCreate(uri, UriKind.Relative, &res) then res else\n            Uri(uri, UriKind.Absolute)\n    \n    let private path (uri: Uri) =\n        if uri.IsAbsoluteUri\n        then uri.AbsolutePath\n        else uri.OriginalString |> joinWithSlash \"/\"\n        \n    let private trimFinalSlash (s: string) =\n        match s.TrimEnd('/') with\n        | \"\" -> \"/\"\n        | s -> s\n    \n    let Shift prefix (router: IRouter<'T>) =\n        let prefix = joinWithSlash \"/\" prefix\n        let shift (loc: System.Uri) =\n            if loc.IsAbsoluteUri then loc else\n                makeUri (joinWithSlash prefix (path loc) |> trimFinalSlash)\n        { new IRouter<'T> with\n            member this.Route req =\n                let builder = UriBuilder req.Uri\n                if builder.Path.StartsWith prefix then\n                    builder.Path <- builder.Path.Substring prefix.Length\n                    router.Route (req.WithUri(builder.Uri))\n                else\n                    None\n            member this.Link e = router.Link e |> Option.map shift\n        }     \n        \n    let Box (router: IRouter<'T>) : IRouter<obj> =\n        { new IRouter<obj> with\n            member this.Route req = router.Route req |> Option.map box\n            member this.Link e = tryUnbox<'T> e |> Option.bind router.Link\n        } \n\n    let Unbox (router: IRouter<obj>) : IRouter<'T> =\n        { new IRouter<'T> with\n            member this.Route req = router.Route req |> Option.bind tryUnbox<'T>\n            member this.Link e = box e |> router.Link\n        } \n\n[<JavaScript>]\nmodule RouterOperators =\n    let rRoot : Router =\n        {\n            Parse = fun path -> Seq.singleton path\n            Segment = Seq.empty\n        }\n    \n    [<Inline>]\n    /// Parse/write a specific string.\n    let r name : Router = Router.FromString name\n\n    /// Parse/write a string using URL encode/decode.\n    let rString : Router<string> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match StringEncoding.read h with\n                    | Some s ->\n                        Seq.singleton ({ path with Segments = t }, s)\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (if isNull value then \"null\" else StringEncoding.write value)))\n        }\n\n    /// Parse/write a char.\n    let rChar : Router<char> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match StringEncoding.read h with\n                    | Some c when c.Length = 1 ->\n                        Seq.singleton ({ path with Segments = t }, char c)\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (string value)))\n        }\n\n    [<Inline>]\n    let inline rTryParse< ^T when ^T: (static member TryParse: string * byref< ^T> -> bool) and ^T: equality>() =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    let mutable res = Unchecked.defaultof< ^T>\n                    let ok = (^T: (static member TryParse: string * byref< ^T> -> bool) (h, &res))\n                    if ok then \n                        Seq.singleton ({ path with Segments = t }, res)\n                    else Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (string value)))\n        }\n\n    /// Parse/write a Guid.\n    let rGuid = rTryParse<System.Guid>()\n    /// Parse/write an int.\n    let rInt = rTryParse<int>()\n    /// Parse/write a double.\n    let rDouble = rTryParse<double>()\n    /// Parse/write a signed byte.\n    let rSByte = rTryParse<sbyte>() \n    /// Parse/write a byte.\n    let rByte = rTryParse<byte>() \n    /// Parse/write a 16-bit int.\n    let rInt16 = rTryParse<int16>() \n    /// Parse/write a 16-bit unsigned int.\n    let rUInt16 = rTryParse<uint16>() \n    /// Parse/write an unsigned int.\n    let rUInt = rTryParse<uint32>() \n    /// Parse/write a 64-bit int.\n    let rInt64 = rTryParse<int64>() \n    /// Parse/write a 64-bit unsigned int.\n    let rUInt64 = rTryParse<uint64>() \n    /// Parse/write a single.\n    let rSingle = rTryParse<single>() \n\n    /// Parse/write a bool.\n    let rBool : Router<bool> =\n        // we define rBool not with rTryParse so that fragments are capitalized\n        // to be fully consistent on client+server\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match System.Boolean.TryParse h with\n                    | true, g ->\n                        Seq.singleton ({ path with Segments = t }, g)\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (if value then \"True\" else \"False\")))\n        }\n\n    /// Parses any remaining part of the URL as a string, no URL encode/decode is done.\n    let rWildcard : Router<string> = \n        {\n            Parse = fun path ->\n                let s = path.Segments |> String.concat \"/\"\n                Seq.singleton ({ path with Segments = [] }, s)\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment value))\n        }\n    \n    let rWildcardArray (item: Router<'A>) : Router<'A[]> =\n        {\n            Parse = fun path ->\n                let rec collect path acc =\n                    match path.Segments with\n                    | [] -> Seq.singleton (path, Array.ofList (List.rev acc))\n                    | _ ->\n                        item.Parse path |> Seq.collect(fun (p, a) -> collect p (a :: acc))\n                collect path []\n            Write = fun value ->\n                let parts = value |> Array.map item.Write\n                if Array.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n\n    let rWildcardList (item: Router<'A>) : Router<'A list> = \n        {\n            Parse = fun path ->\n                let rec collect path acc =\n                    match path.Segments with\n                    | [] -> Seq.singleton (path, List.rev acc)\n                    | _ ->\n                        item.Parse path |> Seq.collect(fun (p, a) -> collect p (a :: acc))\n                collect path []\n            Write = fun value ->\n                let parts = value |> List.map item.Write\n                if List.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n\n    /// Parse/write a DateTime in `YYYY-MM-DD-HH.mm.ss` format.\n    let rDateTime : Router<System.DateTime> =\n        let pInt x =\n            match System.Int32.TryParse x with\n            | true, i -> Some i\n            | _ -> None\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    if h.Length = 19 && h.[4] = '-' && h.[7] = '-' && h.[10] = '-' && h.[13] = '.' && h.[16] = '.' then\n                        match pInt h.[0 .. 3], pInt h.[5 .. 6], pInt h.[8 .. 9], pInt h.[11 .. 12], pInt h.[14 .. 15], pInt h.[17 .. 18] with\n                        | Some y, Some m, Some d, Some h, Some mi, Some s  ->\n                            Seq.singleton ({ path with Segments = t }, System.DateTime(y, m, d, h, mi, s))\n                        | _ -> Seq.empty\n                    else Seq.empty\n                | _ -> Seq.empty\n            Write = fun d ->\n                let pad2 (x: int) =\n                    let s = string x\n                    if s.Length = 1 then \"0\" + s else s\n                let pad4 (x: int) =\n                    let s = string x\n                    match s.Length with\n                    | 1 -> \"000\" + s\n                    | 2 -> \"00\" + s\n                    | 3 -> \"0\" + s\n                    | _ -> s\n                let s = \n                    pad4 d.Year + \"-\" + pad2 d.Month + \"-\" + pad2 d.Day\n                    + \"-\" + pad2 d.Hour + \".\" + pad2 d.Minute + \".\" + pad2 d.Second\n                Some (Seq.singleton (Route.Segment s))\n        }\n      \n    let internal Tuple (readItems: obj -> obj[]) (createTuple: obj[] -> obj) (items: Router<obj>[]) =\n        {\n            Parse = fun path ->\n                let rec collect elems path acc =\n                    match elems with \n                    | [] -> Seq.singleton (path, createTuple (Array.ofList (List.rev acc)))\n                    | h :: t -> h.Parse path |> Seq.collect(fun (p, a) -> collect t p (a :: acc))\n                collect (List.ofArray items) path []\n            Write = fun value ->\n                let parts =\n                    (readItems value, items) ||> Array.map2 (fun v r ->\n                        r.Write v\n                    )\n                if Array.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n\n    let internal JSTuple (items: Router<obj>[]) : Router<obj> =\n        let readItems (value: obj) =\n            Array.init items.Length (fun i ->\n                (As<Array<obj>> value).[i]\n            )\n        Tuple readItems box items\n\n    [<Inline>]\n    let internal JSEmpty () : Router<obj> = Router.Empty<obj>\n\n    [<Inline>]\n    let internal JSArray item = Router.Array item\n    \n    [<Inline>]\n    let internal JSList item = Router.List item\n\n    [<Inline>]\n    let internal JSOption item = Router.Option item\n\n    [<Inline>]\n    let internal JSNullable item = Router.Nullable item\n\n    [<Inline>]\n    let internal JSQuery key item = Router.Query key item\n\n    [<Inline>]\n    let internal JSQueryOption key item = Router.QueryOption key item\n\n    [<Inline>]\n    let internal JSQueryNullable key item = Router.QueryNullable key item\n\n    [<Inline>]\n    let internal JSFormData item = Router.FormData item\n\n    [<Inline>]\n    let internal JSJson<'T when 'T: equality> = Router.Json<'T>\n\n    [<Inline>]\n    let internal JSBox item = Router.Box item\n\n    [<Inline>]\n    let internal JSDelayed getRouter = Router.Delay getRouter\n        \n    let internal JSRecord (t: obj) (fields: (string * bool * Router<obj>)[]) : Router<obj> =\n        let readFields value =\n            fields |> Array.map (fun (fn, opt, _) ->\n                if opt then\n                    let v = value?(fn)\n                    if v = JS.Undefined then box None else box (Some v)\n                else\n                    value?(fn)\n            )\n        let createRecord fieldValues =\n            let o = if isNull t then New [] else JS.New t\n            (fields, fieldValues) ||> Array.iter2 (fun (fn, opt, _) v ->\n                if opt then\n                    match As<option<obj>> v with\n                    | None -> ()\n                    | Some v ->\n                        o?(fn) <- v\n                else\n                    o?(fn) <- v\n            )\n            o\n        let fields = fields |> Array.map (fun (_, _, r) -> r)\n        let fieldsList =  List.ofArray fields        \n        {\n            Parse = fun path ->\n                let rec collect fields path acc =\n                    match fields with \n                    | [] -> Seq.singleton (path, createRecord (Array.ofList (List.rev acc)))\n                    | h :: t -> h.Parse path |> Seq.collect(fun (p, a) -> collect t p (a :: acc))\n                collect fieldsList path []\n            Write = fun value ->\n                let parts =\n                    (readFields value, fields) ||> Array.map2 (fun v r ->\n                        r.Write v\n                    )\n                if Array.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n    \n    let internal isCorrectMethod m p =\n        match p, m with\n        | Some pm, Some m -> pm = m\n        | _, Some _ -> false\n        | _ -> true\n\n    let internal JSUnion (t: obj) (cases: (option<obj> * (option<string> * string[])[] * Router<obj>[])[]) : Router<obj> = \n        let getTag value = \n            let constIndex =\n                cases |> Seq.tryFindIndex (\n                    function\n                    | Some c, _, _ -> value = c\n                    | _ -> false\n                )\n            match constIndex with\n            | Some i -> i\n            | _ -> value?(\"$\") \n        let readFields tag value =\n            let _, _, fields = cases.[tag]\n            Array.init fields.Length (fun i ->\n                value?(\"$\" + string i)\n            )\n        let createCase tag fieldValues =\n            let o = if isNull t then New [] else JS.New t\n            match cases.[tag] with\n            | Some constant, _, _ -> constant\n            | _ ->\n                o?(\"$\") <- tag\n                fieldValues |> Seq.iteri (fun i v ->\n                    o?(\"$\" + string i) <- v\n                )\n                o\n        let parseCases =\n            cases |> Seq.indexed |> Seq.collect (fun (i, (_, eps, fields)) ->\n                eps |> Seq.map (fun (m, p) -> i, m, p, fields)    \n            )\n        {                                                    \n            Parse = fun path ->\n                parseCases |> Seq.collect (fun (i, m, s, fields) ->\n                    if isCorrectMethod m path.Method then\n                        match path.Segments |> List.startsWith (List.ofArray s) with\n                        | Some p -> \n                            match List.ofArray fields with\n                            | [] -> Seq.singleton ({ path with Segments = p }, createCase i [||])\n                            | fields -> \n                                let rec collect fields path acc =\n                                    match fields with \n                                    | [] -> Seq.singleton (path, createCase i (Array.ofList (List.rev acc)))\n                                    | h :: t -> h.Parse path |> Seq.collect(fun (p, a) -> collect t p (a :: acc))\n                                collect fields { path with Segments = p } []\n                        | None -> Seq.empty\n                    else\n                        Seq.empty\n                )\n            Write = fun value ->\n                let tag = getTag value\n                let _, eps, fields = cases.[tag]\n                let method, path = eps.[0]\n                let casePath = Seq.singleton (Route.Segment (List.ofArray path, method))\n                match fields with\n                | [||] -> Some casePath\n                | _ ->\n                    let fieldParts =\n                        (readFields tag value, fields) ||> Array.map2 (fun v f -> f.Write v)\n                    if Array.forall Option.isSome fieldParts then\n                        Some (Seq.append casePath (fieldParts |> Seq.collect Option.get))\n                    else None                      \n        }\n\n    let internal JSClass (ctor: unit -> obj) (fields: (string * bool * Router<obj>)[]) (endpoints: (option<string> * Union<string, int>[])[]) (subClasses: Router<obj>[]) : Router<obj> =\n        let readFields value =\n            fields |> Array.map (fun (fn, opt, _) ->\n                if opt then\n                    let v = value?(fn)\n                    if v = JS.Undefined then box None else box (Some v)\n                else\n                    value?(fn)\n            )\n        let createObject fieldValues =\n            let o = ctor()\n            (fields, fieldValues) ||> Array.iter2 (fun (fn, opt, _) v ->\n                if opt then\n                    match As<option<obj>> v with\n                    | None -> ()\n                    | Some v ->\n                        o?(fn) <- v\n                else\n                    o?(fn) <- v\n            )\n            o\n        let partsAndRoutersLists =\n            endpoints |> Array.map (fun (m, ep) ->\n                m, \n                ep |> Seq.map (fun p ->\n                    match p with\n                    | Union1Of2 s -> Choice1Of2 s\n                    | Union2Of2 i -> \n                        let _, _, r = fields.[i]\n                        Choice2Of2 (i, r)\n                ) |> List.ofSeq\n            )\n        let thisClass =\n            {\n                Parse = fun path ->\n                    let rec collect fields path arr =\n                        match fields with \n                        | [] -> \n                            Seq.singleton (path, createObject arr)\n                        | Choice1Of2 p :: t -> \n                            match path.Segments with\n                            | pp :: pr when pp = p ->\n                                collect t { path with Segments = pr } arr\n                            | _ -> Seq.empty\n                        | Choice2Of2 (i, h) :: t -> \n                            h.Parse path |> Seq.collect(fun (p, a) -> \n                                let narr = Array.copy arr\n                                narr.[i] <- a\n                                collect t p narr\n                            )\n                    partsAndRoutersLists |> Seq.collect (fun (m, ps) -> \n                        if isCorrectMethod m path.Method then\n                            let arr = Array.zeroCreate fields.Length\n                            collect ps path arr\n                        else Seq.empty\n                    )\n                Write = fun value ->\n                    let values = readFields value\n                    let method, ep = endpoints.[0]\n                    let parts =\n                        ep |> Array.map (function\n                            | Union1Of2 p -> Some (Seq.singleton (Route.Segment(p)))\n                            | Union2Of2 i ->\n                                let _, _, r = fields.[i] \n                                r.Write(values.[i])\n                        )\n                    if Array.forall Option.isSome parts then\n                        let w = parts |> Seq.collect Option.get\n                        match method with\n                        | Some _ -> Some (Seq.append (Seq.singleton { Route.Empty with Method = method }) w)\n                        | None -> Some w\n                    else None                      \n            }\n        if Array.isEmpty subClasses then\n            thisClass\n        else\n            Router.Sum (Seq.append subClasses (Seq.singleton thisClass))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<JavaScript>]\nmodule internal Observer =\n\n    type Message<'T> =\n        | Message of 'T\n        | Error of exn\n        | Completed\n\n    let Of f : IObserver<_> =\n        { new IObserver<'T> with\n            member __.OnNext x = f x\n            member __.OnError x = raise x\n            member __.OnCompleted() = ()\n        }\n\n    let New (f, e, c) : IObserver<_> =\n        { new IObserver<'T> with\n            member __.OnNext x = f x\n            member __.OnError x = e x\n            member __.OnCompleted() = c()\n        }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\nmodule internal HotStream =\n    open System\n\n    /// Implementation for \"hot stream\".\n    /// Subscribers to hot streams will only observe the latest\n    /// and future values.\n    [<JavaScript>]\n    type HotStream<'T> =\n        internal\n            {\n                Latest  : ref<option<'T>>\n                Event   : Event<'T>\n            }\n        interface IObservable<'T> with\n            member this.Subscribe(o) =\n                if this.Latest.Value.IsSome then\n                    o.OnNext this.Latest.Value.Value\n                let disp =\n                    this.Event.Publish.Subscribe(fun v ->\n                        o.OnNext(v)\n                    )\n                disp\n\n        member this.Trigger(v) =\n            this.Latest := Some v\n            this.Event.Trigger v\n\n        static member New<'U>() : HotStream<'U> =\n            {\n                Latest = ref None\n                Event = Event<_>()\n            }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.JavaScript>]\nmodule internal WebSharper.Control.Observable\n\nopen System\nopen WebSharper\n\n[<Inline>]\nlet New f : IObservable<'T> = { new IObservable<'T> with member __.Subscribe o = f o }\n\nlet Of (f: ('T -> unit) -> (unit -> unit)) : IObservable<_> =\n    New (fun o -> Disposable.Of (f (fun x -> o.OnNext x)))\n\nlet Return<'T> (x: 'T) : IObservable<'T> =\n    let f (o : IObserver<'T>) =\n        o.OnNext x\n        o.OnCompleted ()\n        Disposable.Of ignore\n    New f\n\nlet Never<'T> () : IObservable<'T> =\n    New(fun _ ->\n        Disposable.Of ignore\n    )\n\nlet Protect f succeed fail =\n    match (try Choice1Of2 (f ()) with e -> Choice2Of2 e) with\n    | Choice1Of2 x -> (succeed x)\n    | Choice2Of2 e -> (fail e)\n\nlet Map (f: 'T -> 'U) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) o1.OnNext o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\n\nlet Filter (f: 'T -> bool) (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let on v = \n            Protect (fun () -> if f v then Some v else None)\n                (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <|  Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Choose  (f: 'T -> option<'U>) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Drop count (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let index = ref 0\n        let on v =\n            incr index\n            if index.Value > count then\n                o1.OnNext v\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Merge (io1: IObservable<'T>) (io2: IObservable<'T>) : IObservable<'T> =\n    New <| fun o ->\n        let completed1 = ref false\n        let completed2 = ref false\n        let disp1 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed1 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io1.Subscribe\n        let disp2 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed2 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io2.Subscribe\n        Disposable.Of (fun () -> disp1.Dispose(); disp2.Dispose())\n\nlet Concat (io1: IObservable<'T>) (io2: IObservable<'T>) =\n    New <| fun o ->\n        let innerDisp = ref None\n        let outerDisp =\n            io1.Subscribe(\n                Observer.New(o.OnNext, ignore, fun () ->\n                    innerDisp := Some <| io2.Subscribe(o)\n                )\n            )\n        Disposable.Of <| fun () ->\n            if innerDisp.Value.IsSome then\n                innerDisp.Value.Value.Dispose ()\n            outerDisp.Dispose()\n\n\nlet Range (start: int , count: int) : IObservable<int> =\n    New <| fun o ->\n        for i = start to start + count do\n            o.OnNext i\n        Disposable.Of ignore\n\n\nlet CombineLatest   (io1 : IObservable<'T>)\n                    (io2: IObservable<'U>)\n                    (f: 'T -> 'U -> 'S) : IObservable<'S> =\n    New <| fun o ->\n        let lv1 = ref None\n        let lv2 = ref None\n        let update () =\n            match !lv1, !lv2 with\n            | Some v1, Some v2  ->\n                Protect (fun () -> f v1 v2) o.OnNext o.OnError\n            | _                 ->\n                ()\n        let o1 =\n            let onNext x =\n                lv1 := Some x\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let o2 =\n            let onNext y =\n                lv2 := Some y\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let d1 = io1.Subscribe(o1)\n        let d2 = io2.Subscribe(o2)\n        Disposable.Of (fun () -> d1.Dispose() ; d2.Dispose())\n\nlet Switch (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp =\n            let index = ref 0\n            let disp : option<IDisposable> ref = ref None\n\n            // Subscribe to outer stream\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Update counter\n                incr index\n\n                // Dispose old observer\n                if disp.Value.IsSome then\n                    disp.Value.Value.Dispose ()\n\n                let currentIndex = index.Value\n                let d =\n                    o1.Subscribe (fun v ->\n                        if currentIndex = index.Value then\n                            o.OnNext(v)\n                    ) |> Some\n                // Update dispose\n                disp := d\n            )\n        disp\n    )\n\nlet SelectMany (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp = ref ignore\n        // Subscribe to outer stream\n        let d =\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Subscribe to inner stream\n                let d =\n                    o1.Subscribe (fun v ->\n                        o.OnNext v\n                    )\n                disp := fun () ->\n                    disp.Value ()\n                    d.Dispose ()\n            )\n        Disposable.Of (fun () ->\n            disp.Value ()\n            d.Dispose ()\n        )\n    )\n\nlet Aggregate (io: IObservable<'T>) (seed: 'S) (fold: 'S -> 'T -> 'S) =\n    New <| fun o1 ->\n        let state = ref seed\n        let on v = \n            Protect (fun () -> fold !state v) \n                (fun s -> state := s; o1.OnNext s) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n////    let CollectLatest (outer: IObservable<IObservable<'T>>) : IObservable<seq<'T>> =\n//        New (fun o ->\n//            let dict = System.Collections.Generic.Dictionary<int, 'T>()\n//            let index = ref 0\n//\n//            // Outer subscription\n//            outer.Subscribe(fun (inner: IObservable<'T>) ->\n//                incr index\n//                let currentIndex = index.Value\n//\n//                // Inner subscription\n//                inner.Subscribe(fun value ->\n//                    dict.[currentIndex] <- value\n//                    seq {for pair in dict do yield pair.Value}\n//                    |> o.OnNext\n//                )|> ignore\n//            )\n//        )\n\nlet Sequence (ios: seq<IObservable<'T>>) : IObservable<List<'T>> =\n    let rec sequence (ios: list<IObservable<'T>>) =\n        match ios with\n        | []        ->\n            Return []\n        | x::xs  ->\n            let rest = sequence xs\n            CombineLatest x rest  (fun x y -> x :: y)\n    sequence (List.ofSeq ios)\n\n\n[<Inline>]\nlet Heat (io: IObservable<'T>) : IObservable<'T> =\n    let formStream = HotStream.HotStream<_>.New()\n    let disp =\n        io.Subscribe formStream.Trigger\n    formStream :> IObservable<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.ObservableModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private ObservableModule =\n\n    [<Inline>]\n    let Add (f: 'T -> unit) (o: IObservable<'T>) =\n        ignore (o.Subscribe (Observer.Of f))\n\n    [<Inline>]\n    let Choose (c: 'T -> option<'U>) (e: IObservable<'T>) =\n        Observable.Choose c e\n\n    [<Inline>]\n    let Filter (ok: 'T -> bool) (e: IObservable<'T>) : IObservable<'T> =\n        Observable.Filter ok e\n\n    [<Inline>]\n    let Map (f: 'T -> 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.Map f e\n\n    [<Inline>]\n    let Merge (e1: IObservable<'T>) (e2: IObservable<'T>) =\n        Observable.Merge e1 e2\n\n    let Pairwise (e: IObservable<'T>) : IObservable<'T * 'T> =\n        Observable.New <| fun o1 ->\n            let last = ref None\n            let on v =\n                match !last with\n                | None -> ()\n                | Some l -> o1.OnNext(l, v)\n                last := Some v\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    let Partition (f: 'T -> bool) (e: IObservable<'T>) :\n            IObservable<'T> * IObservable<'T> =\n        (Observable.Filter f e, Observable.filter (f >> not) e)\n\n    let Scan (fold: 'U -> 'T -> 'U) (seed: 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.New <| fun o1 ->\n            let state = ref seed\n            let on v = \n                Observable.Protect (fun () -> fold !state v) \n                    (fun s -> state := s; o1.OnNext s) o1.OnError\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    let Split (f: 'T -> Core.Choice<'U1,'U2>) (e: IObservable<'T>) :\n            IObservable<'U1> * IObservable<'U2> =\n        let left =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _ -> None)\n        let right =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _ -> None)\n        (left, right)\n\n    [<Inline>]\n    let Subscribe (f: 'T -> unit) (e: IObservable<'T>) =\n        e.Subscribe f\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nmodule internal Event =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    type Event<'T> = private { Handlers : ResizeArray<Handler<'T>> } with\n\n        member this.Trigger(x: 'T) =\n            for h in this.Handlers.ToArray() do\n                h.Invoke(null, x)\n\n        member this.AddHandler(h: Handler<'T>) =\n            this.Handlers.Add h\n\n        member this.RemoveHandler(h: Handler<'T>) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        member this.Subscribe(observer: IObserver<'T>) =\n            let h = new Handler<'T>(fun _ x -> observer.OnNext x)\n            this.AddHandler h\n            Disposable.Of (fun () -> this.RemoveHandler h)\n\n        interface IDisposable with\n                member this.Dispose() = ()\n\n        interface IObservable<'T> with\n                member this.Subscribe observer = this.Subscribe observer\n\n        interface IDelegateEvent<Handler<'T>> with\n                member this.AddHandler x = this.AddHandler x\n                member this.RemoveHandler x = this.RemoveHandler x\n\n        interface IEvent<'T>\n\n    [<Inline>]\n    let New () = { Handlers = ResizeArray() }\n\nmodule internal DelegateEvent =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    type DelegateEvent<'T when 'T :> System.Delegate and 'T: equality> = private { Handlers : ResizeArray<'T> } with\n\n        member this.Trigger(x: obj[]) =\n            for h in this.Handlers.ToArray() do\n                h.DynamicInvoke(x) |> ignore\n\n        member this.AddHandler(h: 'T) =\n            this.Handlers.Add h\n\n        member this.RemoveHandler(h: 'T) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        interface IDisposable with\n                member this.Dispose() = ()\n\n        interface IDelegateEvent<'T> with\n                member this.AddHandler x = this.AddHandler x\n                member this.RemoveHandler x = this.RemoveHandler x\n\n    [<Inline>]\n    let New () = { Handlers = ResizeArray() }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\n[<Proxy(typeof<Event<_>>)>]\n[<Name \"WebSharper.Control.FSharpEvent\">]\ntype private FSharpEvent<'T> [<JavaScript>] () =\n    let event = Event.New ()\n\n    [<Inline>]\n    member this.Trigger(x: 'T) = event.Trigger x\n\n    member this.Publish with [<Inline>] get () = event :> IEvent<_>\n\n[<Proxy(typeof<DelegateEvent<_>>)>]\n[<Name \"WebSharper.Control.FSharpDelegateEvent\">]\ntype private FSharpDelegateEvent<'T when 'T :> System.Delegate and 'T: equality> [<JavaScript>] () =\n    let event = DelegateEvent.New ()\n\n    [<Inline>]\n    member this.Trigger(args: obj[]) = event.Trigger args\n\n    member this.Publish with [<Inline>] get () = event :> IDelegateEvent<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.EventModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private EventModule =\n\n    [<Inline>]\n    let Add f (e: IEvent<_,_>) = e.Add f\n\n    let Choose c (e: IEvent<_,_>) : IEvent<_> =\n        // let r = Event.New ()\n        let r = Event<_>()\n        e.Add (fun x ->\n            match c x with\n            | Some y    -> r.Trigger y\n            | None      -> ())\n        r.Publish :> _\n\n    let Filter ok (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> if ok x then r.Trigger x)\n        r :> _\n\n    let Map f (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> r.Trigger (f x))\n        r :> _\n\n    let Merge<'D1,'T,'D2 when 'D1 :> Delegate\n                          and 'D1 :  delegate<'T,unit>\n                          and 'D2 :> Delegate\n                          and 'D2 :  delegate<'T,unit>>\n            (e1: IEvent<'D1,'T>) (e2: IEvent<'D2,'T>) : IEvent<_> =\n        let r = Event.New ()\n        e1.Add r.Trigger\n        e2.Add r.Trigger\n        r :> _\n\n    let Pairwise (e: IEvent<_,_>) : IEvent<_> =\n        let buf = ref None\n        let ev  = Event.New ()\n        e.Add (fun x ->\n            match buf.Value with\n            | None ->\n                buf := Some x\n            | Some old ->\n                buf := Some x\n                ev.Trigger(old, x))\n        ev :> _\n\n    let Partition f e =\n        (Event.filter f e, Event.filter (f >> not) e)\n\n    let Scan fold seed e =\n        let state = ref seed\n        let f value =\n            state := fold !state value\n            !state\n        Event.map f e\n\n    let Split (f: 'T -> Choice<'U1,'U2>) (e: IEvent<'Del,'T>) =\n        (\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _                 -> None),\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _                 -> None)\n        )\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Threading\n\n[<Proxy(typeof<AsyncReplyChannel<_>>)>]\ntype private ChannelProxy<'T> =\n    [<Inline \"$this($res)\">]\n    member this.Reply(res: 'T) = X<unit>\n\n[<Proxy(typeof<MailboxProcessor<_>>)>]\n[<Name \"MailboxProcessor\">]\ntype private MailboxProcessorProxy<'T> (initial, ?token: CancellationToken) =\n    let mutable started = false\n    let errorEvent = Event<exn>()\n    let mailbox = LinkedList<'T>()\n    let mutable savedCont = None\n\n    let startAsync a =\n        Async.Start(a, ?cancellationToken = token)\n\n    let resume() =\n        match savedCont with\n        | None -> ()\n        | Some c ->\n            savedCont <- None\n            c |> startAsync\n\n    do  match token with\n        | Some ct -> \n            ct.Register(fun () -> resume()) |> ignore\n        | None -> ()\n\n    let dequeue() =\n        let f = mailbox.First.Value\n        mailbox.RemoveFirst()\n        f\n\n    [<CLIEvent>]\n    member this.Error = errorEvent.Publish\n\n    member val DefaultTimeout = -1 with get, set    \n\n    member this.Start() =\n        if started then\n            failwith \"The MailboxProcessor has already been started.\"\n        else\n            started <- true\n            async {\n                try do! initial (As<MailboxProcessor<'T>> this)\n                with err -> errorEvent.Trigger err\n            } |> startAsync\n\n    static member Start(initial, ?token: CancellationToken) =\n        let mb = new MailboxProcessor<'T>(initial, ?cancellationToken = token)\n        mb.Start()\n        mb\n\n    [<Inline>]\n    member this.Post(msg: 'T) =\n        mailbox.AddLast msg |> ignore\n        resume()\n\n    member this.TryReceive(?timeout: int) =        \n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if mailbox.First = null then\n                if timeout < 0 then\n                    savedCont <- Some <| async { dequeue() |> Some |> ok }\n                else  \n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout \n                    savedCont <- Some <| async { \n                        if !waiting then do\n                            waiting := false  \n                            JS.ClearTimeout pending\n                            dequeue() |> Some |> ok \n                    }\n            else dequeue() |> Some |> ok\n\n    member this.Receive(?timeout: int) =\n        async {\n            let! x = this.TryReceive(?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n                              \n    member this.CurrentQueueLength = mailbox.Count\n\n    member this.PostAndTryAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R option> =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if timeout < 0 then\n                As (Some >> ok) |> msgf |> this.Post\n            else\n                let waiting = ref true\n                As (fun res ->\n                    if !waiting then\n                        waiting := false\n                        ok (Some res)\n                ) |> msgf |> this.Post\n                JS.SetTimeout (fun () ->\n                    if !waiting then\n                        waiting := false\n                        ok None        \n                ) timeout |> ignore               \n\n    member this.PostAndAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R> =\n        async {\n            let! x = this.PostAndTryAsyncReply(msgf, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n\n    member this.TryScan(scanner, ?timeout: int) =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        async {\n            let scanInbox() =\n                let mutable m = mailbox.First\n                let mutable found = None\n                while m <> null do \n                    match scanner m.Value with\n                    | None ->\n                        m <- m.Next\n                    | _ as a ->\n                        mailbox.Remove m\n                        m <- null\n                        found <- a\n                found\n            match scanInbox() with\n            | Some found -> \n                let! res = found\n                return Some res\n            | _ -> return! Async.FromContinuations <| fun (ok, _, _) -> \n                if timeout < 0 then\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                ok (Some res)\n                        }\n                    scanNext()\n                else\n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                if !waiting then do\n                                    waiting := false\n                                    JS.ClearTimeout pending\n                                    ok (Some res)\n                        }\n                    scanNext()\n        }\n        \n    member this.Scan(scanner, ?timeout: int) =\n        async {\n            let! x = this.TryScan(scanner, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\n\nmodule Array =\n\n    /// Returns defaultValue if array is empty.\n    /// Otherwise makes a binary tree of the array elements and uses reduction to combine\n    /// all items into a single value.\n    [<JavaScript>]\n    let TreeReduce (defaultValue: 'A) (reduction: 'A -> 'A -> 'A) (array: 'A[]) : 'A =\n        let l = array.Length\n        let rec loop off len =\n            match len with\n            | n when n <= 0 -> defaultValue\n            | 1 when off >= 0 && off < l ->\n                array.[off]\n            | n ->\n                let l2 = len / 2\n                let a = loop off l2\n                let b = loop (off + l2) (len - l2)\n                reduction a b\n        loop 0 l\n\n    /// Returns defaultValue if array is empty.\n    /// Otherwise makes a binary tree of the array elements and uses reduction to combine \n    /// all items into a single value using the mapping function first on each item.\n    [<JavaScript>]\n    let MapTreeReduce (mapping: 'A -> 'B) (defaultValue: 'B) (reduction: 'B -> 'B -> 'B) (array: 'A[]) : 'B =\n        let l = array.Length\n        let rec loop off len =\n            match len with\n            | n when n <= 0 -> defaultValue\n            | 1 when off >= 0 && off < l ->\n                mapping array.[off]\n            | n ->\n                let l2 = len / 2\n                let a = loop off l2\n                let b = loop (off + l2) (len - l2)\n                reduction a b\n        loop 0 l\n\n    [<JavaScript>]\n    /// Same as Array.ofSeq, but if argument is an array, it does not copy it.\n    let ofSeqNonCopying (xs: seq<'T>) : 'T [] =\n        if xs :? System.Array then\n            xs :?> 'T[]\n        elif xs :? _ list then\n            Array.ofList (xs :?> 'T list)\n        elif obj.ReferenceEquals(xs, null) then\n            [||]\n        else\n            let q : 'T [] = [||]\n            use o = xs.GetEnumerator()\n            while o.MoveNext() do\n                q.JS.Push(o.Current) |> ignore\n            q\n\n    [<JavaScript>]\n    /// Unsafe operation, modifies each element of an array by a mapping function.\n    let mapInPlace (f: 'T1 -> 'T2) (arr: 'T1 []) =\n        if IsClient then\n            for i = 0 to Array.length arr - 1 do\n                arr.JS.[i] <- As (f arr.JS.[i])\n            As<'T2[]> arr\n        else Array.map f arr\n\nmodule internal String =\n\n    [<JavaScript>]\n    let isBlank s =\n        String.forall Char.IsWhiteSpace s\n\nmodule internal List =\n\n    // TODO: better impl only going to n?\n    [<JavaScript>]\n    let replaceFirst (k: 'A -> bool) (f: 'A -> 'A) (l: list<'A>) =\n        let didIt = ref false\n        l |> List.map (fun x -> if not !didIt && k x then f x else x)\n\n    // TODO: better impl only going to n?\n    [<JavaScript>]\n    let maybeReplaceFirst (k: 'A -> bool) (f: 'A -> option<'A>) (l: list<'A>) =\n        let didIt = ref false\n        l |> List.map (fun x -> if not !didIt && k x then defaultArg (f x) x else x)\n\n/// Abbreviations and small utilities for this assembly.\n[<AutoOpen>]\nmodule internal Abbrev =\n\n    [<JavaScript>]\n    module Fresh =\n\n        let mutable private counter = 0\n\n        let Int () =\n            counter <- counter + 1\n            counter\n\n        let Id () =\n            counter <- counter + 1\n            \"uid\" + string counter\n\n    [<JavaScript>]\n    module HashSet =\n\n        let ToArray (set: HashSet<'T>) =\n            let arr = Array.create set.Count JS.Undefined\n            set.CopyTo(arr)\n            arr\n\n        let Except (excluded: HashSet<'T>) (included: HashSet<'T>) =\n            let set = HashSet<'T>(ToArray included)\n            set.ExceptWith(ToArray excluded)\n            set\n\n        let Intersect (a: HashSet<'T>) (b: HashSet<'T>) =\n            let set = HashSet<'T>(ToArray a)\n            set.IntersectWith(ToArray b)\n            set\n\n        let Filter (ok: 'T -> bool) (set: HashSet<'T>) =\n            HashSet<'T>(ToArray set |> Array.filter ok)\n\n    [<JavaScript>]\n    module Dict =\n\n        let ToKeyArray (d: Dictionary<_,_>) =\n            let arr = Array.create d.Count JS.Undefined\n            d |> Seq.iteri (fun i kv -> arr.[i] <- kv.Key)\n            arr\n\n        let ToValueArray (d: Dictionary<_,_>) =\n            let arr = Array.create d.Count JS.Undefined\n            d |> Seq.iteri (fun i kv -> arr.[i] <- kv.Value)\n            arr\n\n    module Queue =\n\n        [<Inline \"$q\">]\n        let ToArray (q: Queue<_>) = q.ToArray()\n\n    [<JavaScript>]\n    [<Sealed>]\n    type Slot<'T,'K when 'K : equality>(key: 'T -> 'K, value: 'T) =\n        member s.Value = value\n\n        override s.Equals(o: obj) =\n            key value = key (o :?> Slot<'T,'K>).Value\n\n        override s.GetHashCode() = hash (key value)\n\n    [<JavaScript>]\n    type Slot =\n        static member Create key value = Slot(key, value)\n\n    [<JavaScript>]\n    module Async =\n\n        [<Direct \"console.log('WebSharper UI: Uncaught asynchronous exception', $e)\">]\n        let OnError (e: exn) = ()\n\n        let StartTo comp k =\n            Async.StartWithContinuations (comp, k, OnError, ignore)\n\n        [<Inline \"WebSharper.Concurrency.scheduler().Fork($f)\">]\n        let Schedule f =\n            async { return f () }\n            |> Async.Start\n\n    [<JavaScript>]\n    module Mailbox =\n\n        type MailboxState =\n            | Idle = 0\n            | Working = 1\n            | WorkingMore = 2\n\n        /// Simplified MailboxProcessor implementation.\n        let StartProcessor procAsync =\n            let st = ref MailboxState.Idle\n            let rec work() =\n                async {\n                    do! procAsync\n                    match !st with\n                    | MailboxState.Working -> \n                        st := MailboxState.Idle\n                    | MailboxState.WorkingMore ->\n                        st := MailboxState.Working\n                        return! work() \n                    | _ -> ()\n                }\n            let post() =\n                match !st with\n                | MailboxState.Idle ->\n                    st := MailboxState.Working\n                    Async.Start (work()) \n                | MailboxState.Working -> \n                    st := MailboxState.WorkingMore\n                | _ -> ()\n            post\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\nopen WebSharper\n\nopen System.Collections.Generic\n\ntype AppendList<'T> =\n    | AL0\n    | AL1 of 'T\n    | AL2 of AppendList<'T> * AppendList<'T>\n    | AL3 of 'T []\n\n[<JavaScript>]\nmodule AppendList =\n\n    type T<'T> = AppendList<'T>\n\n    let Empty<'T> : T<'T> = AL0\n\n    let Append x y =\n        match x, y with\n        | AL0, x | x, AL0 -> x\n        | _ -> AL2 (x, y)\n\n    let Concat xs =\n        Array.ofSeqNonCopying xs\n        |> Array.TreeReduce Empty Append\n\n    let Single x =\n        AL1 x\n\n    let ToArray xs =\n        let out = Queue()\n        let rec loop xs =\n            match xs with\n            | AL0 -> ()\n            | AL1 x -> out.Enqueue x\n            | AL2 (x, y) -> loop x; loop y\n            | AL3 xs -> Array.iter (fun v -> out.Enqueue v) xs\n        loop xs\n        out.ToArray()\n\n    let FromArray xs =\n        match Array.length xs with\n        | 0 -> AL0\n        | 1 -> AL1 xs.[0]\n        | _ -> AL3 (Array.copy xs)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Utility functions for manipulating DOM.\n[<JavaScript>]\nmodule internal DomUtility =\n\n    /// The current DOM Document.\n    let Doc = JS.Document\n\n    /// Appends a child node to the given DOM element.\n    let AppendTo (ctx: Dom.Element) node =\n        ctx.AppendChild(node) |> ignore\n\n    /// Removes all attributes from the given DOM element.\n    let ClearAttrs (ctx: Dom.Element) =\n        while ctx.HasAttributes() do\n            ctx.RemoveAttributeNode(ctx.Attributes.[0] :?> _) |> ignore\n\n    /// Removes all child nodes from the given DOM element.\n    let Clear (ctx: Dom.Element) =\n        while ctx.HasChildNodes() do\n            ctx.RemoveChild(ctx.FirstChild) |> ignore\n\n    /// Creates a new DOM element.\n    let CreateElement (name: string) =\n        Doc.CreateElement name\n\n    /// Creates an element in the SVG namespace.\n    let CreateSvgElement (name: string) =\n        Doc.CreateElementNS(\"http://www.w3.org/2000/svg\", name)\n\n    /// Creates a new DOM text node with the given value.\n    let CreateText s =\n        Doc.CreateTextNode(s)\n\n    /// Creates a new DOM attribute.\n    let CreateAttr name value =\n        let a = Doc.CreateAttribute(name)\n        a.Value <- value\n        a\n\n    /// Removes a DOM attribute.\n    let RemoveAttr (el: Dom.Element) (attrName: string) =\n        el.RemoveAttribute attrName\n\n    /// Sets the value of the attribute given by\n    /// `name` to `value` in element `el`.\n    let SetAttr (el: Dom.Element) name value =\n        el.SetAttribute(name, value)\n\n    [<Direct \"$target.setProperty($name, $value)\">]\n    let private SetProperty (target: obj) (name: string) (value: string) = ()\n\n    /// Sets a style property.\n    let SetStyle (el: Dom.Element) name value =\n        SetProperty el?style name value\n\n    /// Safe remove of a node\n    let RemoveNode (parent: Dom.Element) (el: Dom.Node) =\n        // make sure not to remove already removed nodes\n        if obj.ReferenceEquals(el.ParentNode, parent) then\n            parent.RemoveChild(el) |> ignore\n\n    /// Position in a `children` list of a DOM Element\n    /// where a node can be inserted.\n    [<AllowNullLiteral>]\n    type InsertPos [<Inline \"$x\">] private (x: Dom.Node) =\n        [<Inline>]\n        static member AtEnd = null : InsertPos\n        [<Inline>]\n        static member BeforeNode n = InsertPos n\n    [<Inline>]\n    let AtEnd = InsertPos.AtEnd\n    [<Inline>]\n    let BeforeNode n = InsertPos.BeforeNode n\n\n    /// Inserts a new child node into the tree under\n    /// a given `parent` at given `pos`.\n    let InsertAt (parent: Dom.Element) (pos: InsertPos) (node: Dom.Node) =\n        let currentPos (node: Dom.Node) =\n            match node.NextSibling with\n            | null -> AtEnd\n            | s -> BeforeNode s\n        let canSkip =\n            node.ParentNode ===. parent\n            && pos ===. currentPos node\n        if not canSkip then\n            parent.InsertBefore(node, As pos) |> ignore\n\n    let private clsRE cls =\n        new RegExp(@\"(\\s+|^)\" + cls + @\"(?:\\s+\" + cls + \")*(\\s+|$)\", \"g\")\n\n    [<Inline \"$element instanceof SVGElement\">]\n    let private isSvg (element: Dom.Element) = X<bool>\n\n    let private getClass (element: Dom.Element) =\n        if isSvg element then\n            element.GetAttribute(\"class\")\n        else\n            element.ClassName\n\n    let private setClass (element: Dom.Element) (value: string) =\n        if isSvg element then\n            element.SetAttribute(\"class\", value)\n        else\n            element.ClassName <- value\n\n    /// Adds a class.\n    let AddClass (element: Dom.Element) (cl: string) =\n        let c = getClass element\n        if c = \"\" then\n            setClass element cl\n        elif not <| (clsRE cl).Test(c) then\n            setClass element (c + \" \" + cl)\n\n    /// Removes a class.\n    let RemoveClass (element: Dom.Element) (cl: string) =\n        setClass element <|\n            (clsRE cl).Replace(getClass element, FuncWithArgs(fun (_fullStr, before, after) ->\n                if before = \"\" || after = \"\" then \"\" else \" \"\n            ))\n\n    /// Retrieve the children of an element as an array.\n    let ChildrenArray (element: Dom.Element) : Dom.Node[] =\n        let a = [||]\n        for i = 0 to element.ChildNodes.Length - 1 do\n            a.JS.Push(element.ChildNodes.[i]) |> ignore\n        a\n\n    /// Iterate through a NodeList assuming it's all Elements.\n    let IterSelector (el: Dom.Element) (selector: string) (f: Dom.Element -> unit) =\n        let l = el.QuerySelectorAll(selector)\n        for i = 0 to l.Length - 1 do f (l.[i] :?> Dom.Element)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\nopen WebSharper\n\nopen System.Collections.Generic\nmodule M = Map\n\n/// Trie lookup structure.\ntype Trie<'K,'V when 'K : comparison> =\n    | TrieBranch of Map<'K,Trie<'K,'V>> // invariant: not empty\n    | TrieEmpty\n    | TrieLeaf of 'V\n\n/// Trie combinators.\n[<JavaScript>]\nmodule Trie =\n\n    /// Branch trie, maintaining invariant.\n    let TrieBranch xs =\n        if M.isEmpty xs then TrieEmpty else TrieBranch xs\n\n    /// Singleton trie.\n    let Leaf v =\n        TrieLeaf v\n\n    /// Prefix a trie - becomes a branch.\n    let Prefix key trie =\n        TrieBranch (Map [key, trie])\n\n    /// Finds a value in a multi-map.\n    let MultiFind key map =\n        defaultArg (M.tryFind key map) []\n\n    /// Adds a value to a multi-map.\n    let MultiAdd key value map =\n        Map.add key (value :: MultiFind key map) map\n\n    /// Makes sure all results are Some.\n    let AllSome (xs: seq<option<'T>>) =\n        let e = xs.GetEnumerator()\n        let r = ResizeArray()\n        let mutable ok = true\n        while ok && e.MoveNext() do\n            match e.Current with\n            | None -> ok <- false\n            | Some x -> r.Add(x)\n        if ok then Some (r.ToArray() :> seq<_>) else None\n\n    /// Merges multiple maps into one given a merge function on values.\n    let MergeMaps merge maps =\n        Seq.collect M.toSeq maps\n        |> Seq.fold (fun s (k, v) -> MultiAdd k v s) M.empty\n        |> M.toSeq\n        |> Seq.map (fun (k, vs) -> merge vs |> Option.map (fun v -> (k, v)))\n        |> AllSome\n        |> Option.map Map.ofSeq\n\n    /// Checks for leaves.\n    let IsLeaf t =\n        match t with\n        | TrieLeaf _ -> true\n        | _ -> false\n\n    /// Merges tries.\n    let rec Merge (ts: seq<_>) =\n        let ts = Array.ofSeqNonCopying ts\n        match ts.Length with\n        | 0 -> Some TrieEmpty\n        | 1 -> Some ts.[0]\n        | _ ->\n            // leaves do not merge\n            if Array.exists IsLeaf ts then None else\n                ts\n                |> Seq.choose (function\n                    | TrieBranch map -> Some map\n                    | _ -> None)\n                |> MergeMaps Merge\n                |> Option.map TrieBranch\n\n    /// Inner loop for Map function.\n    let rec MapLoop loc f trie =\n        match trie with\n        | TrieBranch mp ->\n            mp\n            |> M.map (fun k v -> MapLoop (loc @ [k]) f v)\n            |> TrieBranch\n        | TrieEmpty -> TrieEmpty\n        | TrieLeaf x -> TrieLeaf (f loc x)\n\n    /// Maps a function.\n    let Map f trie =\n        MapLoop [] f trie\n\n    /// Map with a counter.\n    let Mapi f trie =\n        let counter = ref 0\n        let next () =\n            let c = !counter\n            counter := c + 1\n            c\n        Map (fun x -> f (next ()) x) trie\n\n    /// Collects all values.\n    let ToArray trie =\n        // TODO: more efficient than this.\n        let all = Queue()\n        Map (fun _ v -> all.Enqueue v) trie\n        |> ignore\n        all.ToArray()\n\n    /// Result of lookup function.\n    type LookupResult<'K,'V> =\n        | Found of value: 'V * remainder: list<'K>\n        | NotFound\n\n    /// Lookup main loop.\n    let rec Look key trie =\n        match trie, key with\n        | TrieLeaf v, _ -> Found (v, key)\n        | TrieBranch map, k :: ks ->\n            match M.tryFind k map with\n            | Some trie -> Look ks trie\n            | None -> NotFound\n        | _ -> NotFound\n\n    /// Looks up a value in the trie.\n    let Lookup trie key =\n        Look (Seq.toList key) trie\n\n    /// Empty trie.\n    let Empty<'K,'V when 'K : comparison> : Trie<'K,'V> =\n        TrieEmpty\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\n\n(*\n\nSnap implements a snapshot of a time-varying value.\n\nFinal states:\n\n    Forever     -- will never be obsolete\n    Obsolete    -- is obsolete\n\nDistinguishing Forever state is important as it avoids a class of\nmemory leaks connected with waiting on a Snap to become obsolete\nwhen it will never do so.\n\nState transitions:\n\n    Waiting         -> Forever      // MarkForever\n    Waiting         -> Obsolete     // MarkObsolete\n    Waiting         -> Ready        // MarkReady\n    Ready           -> Obsolete     // MarkObsolete\n\n*)\n\n[<JavaScript false>]\ntype ISnap =\n    abstract Obsolete : unit -> unit\n    abstract IsNotObsolete : unit -> bool\n\ntype OnObsoleted = Union<ISnap, unit -> unit>\n\n[<JavaScript>]\ntype SnapState<'T> =\n    | Forever of 'T\n    | [<Constant null>] Obsolete\n    | Ready of 'T * Queue<OnObsoleted>\n    | Waiting of Queue<'T -> unit> * Queue<OnObsoleted>\n\n[<JavaScript; AutoOpen>]\nmodule SnapInternals =\n\n    [<Inline \"typeof $o == 'object' ? $doObs($o) : $o()\">]\n    let obs (o: OnObsoleted) doObs =  \n        match o with\n        | Union1Of2 sn -> doObs sn\n        | Union2Of2 f -> f()\n\n    [<Inline \"typeof $o == 'object' ? $doObs($o) : $doFunc($o)\">]\n    let clean (o: OnObsoleted) doObs doFunc =  \n        match o with\n        | Union1Of2 sn -> doObs sn\n        | Union2Of2 f -> doFunc f\n\ntype Snap<'T> =\n    {\n        [<Name \"s\">] mutable State : SnapState<'T>\n    }\n\n    [<JavaScript>]\n    static member Obsolete(sn: Snap<'T>) =\n        match sn.State with\n        | Forever _ | Obsolete -> ()\n        | Ready (_, q) | Waiting (_, q) ->\n            sn.State <- Obsolete\n            let qa = Queue.ToArray q\n            for i = 0 to qa.Length - 1 do \n                obs qa.[i] (fun sn -> sn.Obsolete())\n\n    interface ISnap with\n        member this.Obsolete() =\n            Snap.Obsolete(this)\n\n        member this.IsNotObsolete() =\n            match this.State with\n            | Obsolete -> false\n            | _ -> true\n\n[<Proxy(typeof<ISnap>)>]\ntype internal ISnapProxy =\n    [<Inline>]\n    member this.Obsolete() =\n        Snap.Obsolete(As<Snap<obj>> this)\n\n    [<Inline \"$this.s\">]\n    member this.IsNotObsolete() = X<bool>\n\n[<JavaScript>]\nmodule Snap =\n\n  // constructors\n\n    [<Inline>]\n    let Make st = { State = st }\n\n    [<Inline>]\n    let Create () = Make (Waiting (Queue(), Queue()))\n\n    [<Inline>]\n    let CreateForever v = Make (Forever v)\n\n    [<Inline>]\n    let CreateWithValue v = Make (Ready (v, Queue()))\n\n  // misc\n\n    [<Inline>]\n    let IsForever snap =\n        match snap.State with\n        | Forever _ -> true\n        | _ -> false\n\n    [<Inline>]\n    let IsObsolete snap =\n        match snap.State with\n        | Obsolete -> true\n        | _ -> false\n\n    [<Inline>]\n    let IsDone snap =\n        match snap.State with\n        | Forever _ | Ready _ -> true\n        | _ -> false\n\n    let TryGet snap =\n        match snap.State with\n        | Forever x | Ready (x, _) -> Some x\n        | _ -> None\n\n  // transitions\n\n    let MarkForever sn v =\n        match sn.State with\n        | Waiting (q, _) ->\n            sn.State <- Forever v\n            let qa = Queue.ToArray q\n            for i = 0 to qa.Length - 1 do \n                qa.[i] v\n        | _ -> ()\n\n    [<Inline>]\n    let MarkObsolete (sn: Snap<_>) =\n        (sn :> ISnap).Obsolete()\n\n    let MarkReady sn v =\n        match sn.State with\n        | Waiting (q1, q2) ->\n            sn.State <- Ready (v, q2)\n            let qa = Queue.ToArray q1\n            for i = 0 to qa.Length - 1 do \n                qa.[i] v\n        | _ -> ()\n\n    let MarkDone res sn v =\n        if IsForever sn then\n            MarkForever res v\n        else\n            MarkReady res v\n\n    let EnqueueSafe (q: Queue<_>) x =\n        q.Enqueue x\n        if q.Count % 20 = 0 then\n            let qcopy = q.ToArray()\n            q.Clear()\n            for i = 0 to qcopy.Length - 1 do\n                clean qcopy.[i]\n                    (fun sn -> if sn.IsNotObsolete() then q.Enqueue (Union1Of2 sn))\n                    (fun f -> q.Enqueue (Union2Of2 f)) \n\n  // eliminators\n\n    let When snap avail (obs: ISnap) =\n        match snap.State with\n        | Forever v -> avail v\n        | Obsolete -> obs.Obsolete()\n        | Ready (v, q1) -> EnqueueSafe q1 (Union1Of2 obs); avail v\n        | Waiting (q1, q2) -> q1.Enqueue avail; EnqueueSafe q2 (Union1Of2 obs)\n\n    let WhenRun snap avail obs =\n        match snap.State with\n        | Forever v -> avail v\n        | Obsolete -> obs()\n        | Ready (v, q1) -> q1.Enqueue (Union2Of2 obs); avail v\n        | Waiting (q1, q2) -> q1.Enqueue avail; q2.Enqueue (Union2Of2 obs)\n\n    let WhenReady snap avail =\n        match snap.State with\n        | Forever v\n        | Ready (v, _) -> avail v\n        | Obsolete -> ()\n        | Waiting (q1, _) -> q1.Enqueue avail\n\n    let WhenObsolete snap (obs: ISnap) =\n        match snap.State with\n        | Forever v -> ()\n        | Obsolete -> obs.Obsolete()\n        | Ready (v, q) -> EnqueueSafe q (Union1Of2 obs)\n        | Waiting (q1, q2) -> EnqueueSafe q2 (Union1Of2 obs)\n\n    let WhenObsoleteRun snap obs =\n        match snap.State with\n        | Forever v -> ()\n        | Obsolete -> obs()\n        | Ready (v, q) -> q.Enqueue (Union2Of2 obs)\n        | Waiting (q1, q2) -> q2.Enqueue (Union2Of2 obs)\n\n    let ValueAndForever snap =\n        match snap.State with\n        | Forever v -> Some (v, true)\n        | Ready (v, _) -> Some (v, false)\n        | _ -> None\n\n  // combinators\n\n    let Join snap =\n        let res = Create ()\n        let onReady x =\n            let y = x ()\n            When y (fun v ->\n                if IsForever y && IsForever snap then\n                    MarkForever res v\n                else\n                    MarkReady res v) res\n        When snap onReady res\n        res\n\n    let JoinInner snap =\n        let res = Create ()\n        let onReady x =\n            let y = x ()\n            When y (fun v ->\n                if IsForever y && IsForever snap then\n                    MarkForever res v\n                else\n                    MarkReady res v) res\n            WhenObsolete snap y\n        When snap onReady res\n        res\n\n    let CreateForeverAsync a =\n        let o = Make (Waiting (Queue(), Queue()))\n        Async.StartTo a (MarkForever o)\n        o\n\n    let Sequence (snaps : seq<Snap<'T>>) =\n        let snaps = Array.ofSeq snaps\n        if Array.isEmpty snaps then CreateForever Seq.empty\n        else\n            let res = Create () : Snap<seq<'T>>\n            let w = ref (snaps.Length - 1)\n            let cont _ =\n                if !w = 0 then\n                    // all source snaps should have a value\n                    let vs = \n                        snaps |> Array.map (fun s -> \n                            match s.State with\n                            | Forever v | Ready (v, _) -> v\n                            | _ -> failwith \"value not found by View.Sequence\")\n                    if Array.forall IsForever snaps then\n                        MarkForever res (vs :> seq<_>)\n                    else\n                        MarkReady res (vs :> seq<_>)\n                else\n                    decr w\n            snaps\n            |> Array.iter (fun s -> When s cont res)\n            res\n\n    let Map fn sn =\n        match sn.State with\n        | Forever x -> CreateForever (fn x) // optimization\n        | _ ->\n            let res = Create ()\n            When sn (fun a -> MarkDone res sn (fn a)) res\n            res\n\n    let WithInit x sn =\n        match sn.State with\n        | Forever _\n        | Obsolete -> sn // optimization\n        | Ready (v, _) ->\n            let res = CreateWithValue v\n            WhenObsolete sn res\n            res\n        | Waiting _ ->\n            let res = CreateWithValue x\n            When sn (fun _ -> Snap.Obsolete res) res\n            res\n\n    let WithInitOption sn =\n        match sn.State with\n        | Forever x -> CreateForever (Some x) // optimization\n        | Obsolete -> { State = Obsolete }\n        | Ready (v, _) ->\n            let res = CreateWithValue (Some v)\n            WhenObsolete sn res\n            res\n        | Waiting _ ->\n            let res = CreateWithValue None\n            When sn (fun _ -> Snap.Obsolete res) res\n            res\n\n    let Copy sn =\n        match sn.State with\n        | Forever _ \n        | Obsolete -> sn // optimization\n        | Ready (v, _) ->\n            let res = CreateWithValue v\n            WhenObsolete sn res\n            res\n        | Waiting _ ->\n            let res = Create ()\n            When sn (MarkDone res sn) res\n            res\n\n    let MapCachedBy eq prev fn sn =\n        let fn x =\n            match !prev with\n            | Some (x', y) when eq x x' -> y\n            | _ ->\n                let y = fn x\n                prev := Some (x, y)\n                y\n        Map fn sn\n\n    let Map2Opt1 fn x sn2 = Map (fun y -> fn x y) sn2\n    let Map2Opt2 fn y sn1 = Map (fun x -> fn x y) sn1\n    let Map2 fn sn1 sn2 =\n        match sn1.State, sn2.State with\n        | Forever x, Forever y -> CreateForever (fn x y) // optimization\n        | Forever x, _ -> Map2Opt1 fn x sn2 // optimize for known sn1\n        | _, Forever y -> Map2Opt2 fn y sn1 // optimize for known s2\n        | _ ->\n            let res = Create ()\n            let cont _ =\n                if not (IsDone res) then \n                    match ValueAndForever sn1, ValueAndForever sn2 with\n                    | Some (x, f1), Some (y, f2) ->\n                        if f1 && f2 then\n                            MarkForever res (fn x y)\n                        else\n                            MarkReady res (fn x y) \n                    | _ -> ()\n            When sn1 cont res\n            When sn2 cont res\n            res\n\n    let Map2Unit sn1 sn2 =\n        match sn1.State, sn2.State with\n        | Forever (), Forever () -> CreateForever () // optimization\n        | Forever (), _ -> sn2 // optimize for known sn1\n        | _, Forever () -> sn1 // optimize for known s2\n        | _ ->\n            let res = Create ()\n            let cont () =\n                if not (IsDone res) then \n                    match ValueAndForever sn1, ValueAndForever sn2 with\n                    | Some (_, f1), Some (_, f2) ->\n                        if f1 && f2 then\n                            MarkForever res ()\n                        else\n                            MarkReady res () \n                    | _ -> ()\n            When sn1 cont res\n            When sn2 cont res\n            res\n\n    let Map3Opt1 fn x y sn3   = Map (fun z -> fn x y z) sn3\n    let Map3Opt2 fn x z sn2   = Map (fun y -> fn x y z) sn2\n    let Map3Opt3 fn x sn2 sn3 = Map2 (fun y z -> fn x y z) sn2 sn3\n    let Map3Opt4 fn y z sn1   = Map (fun x -> fn x y z) sn1\n    let Map3Opt5 fn y sn1 sn3 = Map2 (fun x z -> fn x y z) sn1 sn3\n    let Map3Opt6 fn z sn1 sn2 = Map2 (fun x y -> fn x y z) sn1 sn2\n    let Map3 fn sn1 sn2 sn3 =\n        match sn1.State, sn2.State, sn3.State with\n        | Forever x, Forever y, Forever z -> CreateForever (fn x y z)\n        | Forever x, Forever y, _         -> Map3Opt1 fn x y sn3  \n        | Forever x, _,         Forever z -> Map3Opt2 fn x z sn2  \n        | Forever x, _,         _         -> Map3Opt3 fn x sn2 sn3\n        | _,         Forever y, Forever z -> Map3Opt4 fn y z sn1  \n        | _,         Forever y, _         -> Map3Opt5 fn y sn1 sn3\n        | _,         _,         Forever z -> Map3Opt6 fn z sn1 sn2    \n        | _,         _,         _         ->\n            let res = Create ()\n            let cont _ =\n                if not (IsDone res) then \n                    match ValueAndForever sn1, ValueAndForever sn2, ValueAndForever sn3 with\n                    | Some (x, f1), Some (y, f2), Some (z, f3) ->\n                        if f1 && f2 && f3 then\n                            MarkForever res (fn x y z)\n                        else\n                            MarkReady res (fn x y z) \n                    | _ -> ()\n            When sn1 cont res\n            When sn2 cont res\n            When sn3 cont res\n            res\n\n    let SnapshotOn sn1 sn2 =\n        let res = Create ()\n        let cont _ =\n            if not (IsDone res) then \n                match ValueAndForever sn1, ValueAndForever sn2 with\n                | Some (_, f1), Some (y, f2) ->\n                    if f1 || f2 then\n                        MarkForever res y \n                    else\n                        MarkReady res y\n                | _ -> ()\n        When sn1 cont res\n        WhenReady sn2 cont\n        res\n\n    let MapAsync fn snap =\n        let res = Create ()\n        When snap\n            (fun v -> Async.StartTo (fn v) (MarkDone res snap))\n            res\n        res\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\n#nowarn \"40\" // AsyncAwait let rec\n\nopen System.Collections.Generic\nopen WebSharper\ntype private JS = WebSharper.JavaScript.JS\n\n[<JavaScript; AbstractClass>]\ntype Var<'T>() =\n    abstract Get : unit -> 'T\n    abstract Set : 'T -> unit\n    abstract SetFinal : 'T -> unit\n    member this.Value\n        with [<Inline>] get() = this.Get()\n        and [<Inline>] set v = this.Set v\n    abstract Update : ('T -> 'T) -> unit\n    abstract UpdateMaybe : ('T -> 'T option) -> unit\n    abstract View : View<'T>\n    abstract Id : string\n\nand [<JavaScript>] View<'T> =\n    | View of (unit -> Snap<'T>)\n\n[<AutoOpen>]\nmodule ViewOptimization =\n    open WebSharper.JavaScript\n    [<Inline \"$x\">]\n    let V (x: unit -> Snap<'T>) = View x\n    [<Inline \"$x\">]\n    let (|V|) (x: View<'T>) = let (View v) = x in v\n    [<Inline \"$x\">]\n    let getSnapV (x: Snap<View<'T>>) = Snap.Map (|V|) x\n    [<Inline \"$x\">]\n    let getSnapF (x: 'A -> View<'T>) = x >> (|V|)\n    [<Inline \"null\">]\n    let jsNull<'T>() = Unchecked.defaultof<'T>\n    [<Inline \"Error().stack\">]\n    let jsStack<'T>() = \"\"\n    \n/// Var either holds a Snap or is in Const state.\n[<JavaScript>]\ntype ConcreteVar<'T>(isConst: bool, initSnap: Snap<'T>, initValue: 'T) =\n    inherit Var<'T>()\n\n    let mutable isConst = isConst\n    let mutable current = initValue\n    let mutable snap = initSnap\n    let view = V (fun () -> snap)\n    let id = Fresh.Int()\n\n    override this.Get() = current\n\n    override this.Set(v) =\n        if isConst then\n            printfn \"WebSharper.UI: invalid attempt to change value of a Var after calling SetFinal\"\n        else\n            Snap.MarkObsolete snap\n            current <- v\n            snap <- Snap.CreateWithValue v\n\n    override this.SetFinal(v) =\n        if isConst then\n            printfn \"WebSharper.UI: invalid attempt to change value of a Var after calling SetFinal\"\n        else\n            Snap.MarkObsolete snap\n            isConst <- true\n            current <- v\n            snap <- Snap.CreateForever v\n\n    override this.Update(f) =\n        this.Set (f (this.Get()))\n\n    override this.UpdateMaybe(f) =\n        match f (this.Get()) with\n        | None -> ()\n        | Some v -> this.Set(v)\n\n    override this.View = view\n\n    override this.Id = \"uinref\" + string id\n\nand [<JavaScript; Sealed>] Var private () =\n\n    [<Inline>]\n    static let (?) x f = WebSharper.JavaScript.Pervasives.(?) x f\n\n    [<Inline>]\n    static let (?<-) x f v = WebSharper.JavaScript.Pervasives.(?<-) x f v\n\n    static member Create v =\n        ConcreteVar<'T>(false, Snap.CreateWithValue v, v)\n        :> Var<'T>\n\n    static member CreateLogged (name: string) v =\n        if IsClient then\n            if not (JS.Global?UINVars) then\n                JS.Global?UINVars <- [||]\n            let res = Var.Create v\n            JS.Global?UINVars?push([| name; unbox res |])\n            res\n        else\n            Var.Create v\n\n    static member Create() =\n        ConcreteVar<unit>(false, Snap.CreateWithValue(), ())\n        :> Var<unit>\n\n    static member CreateWaiting<'T>() =\n        ConcreteVar<'T>(false, Snap.Create(), jsNull<'T>())\n        :> Var<'T>\n\n    [<Inline>]\n    static member Get (var: Var<'T>) =\n        var.Get()\n\n    static member Set (var: Var<'T>) value =\n        var.Set(value)\n\n    static member SetFinal (var: Var<'T>) value =\n        var.SetFinal(value)\n\n    static member Update var fn =\n        Var.Set var (fn (Var.Get var))\n\n    [<Inline>]\n    static member GetId (var: Var<'T>) =\n        var.Id\n\ntype [<JavaScript>] Updates = \n    {\n        [<Name \"c\">] mutable Current : View<unit>\n        [<Name \"s\">] mutable Snap : Snap<unit>\n        [<Name \"v\">] VarView : View<unit>\n    }\n\n    [<Inline>]\n    member this.View = this.VarView\n\n    static member Create v =\n        let mutable var = jsNull()\n        var <-\n            {\n                Current = v\n                Snap = jsNull()\n                VarView = \n                    let obs () =\n                        let mutable c = var.Snap\n                        if obj.ReferenceEquals(c, null) then\n                            let (V observe) = var.Current\n                            c <- observe() |> Snap.Copy\n                            var.Snap <- c\n                            Snap.WhenObsoleteRun c (fun () -> \n                                var.Snap <- jsNull())\n                            c\n                        else c\n                    \n                    V obs\n            }\n        var\n\n    member this.Value\n        with [<Inline>] get() = this.Current\n        and set v =\n            let sn = this.Snap\n            if not (obj.ReferenceEquals(sn, null)) then\n                Snap.MarkObsolete sn\n            this.Current <- v\n\ntype ViewNode<'A,'B> =\n    {\n        [<Name \"e\">] NValue : 'B\n        [<Name \"r\">] NVar : Var<'A>\n        [<Name \"w\">] NView : View<'A>\n    }\n\ntype LazyView<'T> =\n    {\n        [<Name \"c\">] mutable Current : Snap<'T>\n        [<Name \"o\">] mutable Observe : unit -> Snap<'T>  \n    } \n\n[<JavaScript>]\n[<Sealed>]\ntype View =\n\n    [<Inline>]\n    static member FromVar (var: Var<'T>) =\n        var.View\n\n    static member CreateLazy observe =\n        let lv =\n            {\n                Current = jsNull()\n                Observe = observe \n            }\n        let obs () =\n            let mutable c = lv.Current\n            if obj.ReferenceEquals(c, null) then\n                c <- lv.Observe()\n                lv.Current <- c\n                if Snap.IsForever c then \n                    lv.Observe <- jsNull()\n                else\n                    Snap.WhenObsoleteRun c (fun () -> \n                        lv.Current <- jsNull()) \n                c\n            else c\n        V obs\n\n    static member Map fn (V observe) =\n        View.CreateLazy (fun () ->\n            observe () |> Snap.Map fn)\n\n    static member MapCachedBy eq fn (V observe) =\n        let vref = ref None\n        View.CreateLazy (fun () ->\n            observe () |> Snap.MapCachedBy eq vref fn)\n\n    static member MapCached fn v =\n        View.MapCachedBy (=) fn v\n\n    static member Map2 fn (V o1) (V o2) =\n        View.CreateLazy (fun () ->\n            let s1 = o1 ()\n            let s2 = o2 ()\n            Snap.Map2 fn s1 s2)\n\n    static member Map2Unit (V o1) (V o2) =\n        View.CreateLazy (fun () ->\n            let s1 = o1 ()\n            let s2 = o2 ()\n            Snap.Map2Unit s1 s2)\n\n    static member Map3 fn (V o1) (V o2) (V o3) =\n        View.CreateLazy (fun () ->\n            let s1 = o1 ()\n            let s2 = o2 ()\n            let s3 = o3 ()\n            Snap.Map3 fn s1 s2 s3)\n\n    static member MapAsync fn (V observe) =\n        View.CreateLazy (fun () -> observe () |> Snap.MapAsync fn)\n\n    static member MapAsync2 fn v1 v2 =\n        View.Map2 fn v1 v2 |> View.MapAsync id\n\n    static member TryGet (V observe) =\n        Snap.TryGet (observe ())\n\n    static member Get (f: 'T -> unit) (V observe) =\n        let ok = ref false\n        let rec obs () =\n            Snap.WhenRun (observe ())\n                (fun v ->\n                    if not !ok then\n                        ok := true\n                        f v)\n                (fun () -> if not !ok then obs ())\n        obs ()\n\n    static member WithInit (x: 'T) (V observe) =\n        View.CreateLazy (fun () -> observe () |> Snap.WithInit x)\n\n    static member WithInitOption (V observe) =\n        View.CreateLazy (fun () -> observe () |> Snap.WithInitOption)\n\n    static member GetAsync v =\n        Async.FromContinuations (fun (ok, _, _) -> View.Get ok v)\n\n    static member SnapshotOn def (V o1) (V o2) =\n        let sInit = Snap.CreateWithValue def\n\n        let obs () =\n            let s1 = o1 ()\n            if Snap.IsObsolete sInit then\n                let s2 = o2 ()\n                Snap.SnapshotOn s1 s2\n            else\n                Snap.WhenObsolete s1 sInit\n                sInit\n\n        View.CreateLazy obs\n\n     // Collections --------------------------------------------------------------\n\n    static member MapSeqCachedBy<'A,'B,'K,'SeqA when 'K : equality and 'SeqA :> seq<'A>>\n            (key: 'A -> 'K) (conv: 'A -> 'B) (view: View<'SeqA>) =\n        // Save history only for t - 1, discard older history.\n        let state = ref (Dictionary())\n        view\n        |> View.Map (fun xs ->\n            let prevState = !state\n            let newState = Dictionary()\n            let result =\n                Seq.toArray xs\n                |> Array.mapInPlace (fun x ->\n                    let k = key x\n                    let res =\n                        if prevState.ContainsKey k\n                            then prevState.[k]\n                            else conv x\n                    newState.[k] <- res\n                    res)\n                :> seq<_>\n            state := newState\n            result)\n\n    static member MapSeqCached conv view =\n        View.MapSeqCachedBy (fun x -> x) conv view\n\n    static member ConvertSeqNode conv value =\n        let var = Var.Create value\n        let view = View.FromVar var\n        {\n            NValue = conv view\n            NVar = var\n            NView = view\n        }\n\n    static member MapSeqCachedViewBy<'A,'B,'K,'SeqA when 'K : equality and 'SeqA :> seq<'A>>\n            (key: 'A -> 'K) (conv: 'K -> View<'A> -> 'B) (view: View<'SeqA>) =\n        // Save history only for t - 1, discard older history.\n        let state = ref (Dictionary())\n        view\n        |> View.Map (fun xs ->\n            let prevState = !state\n            let newState = Dictionary()\n            let result =\n                Seq.toArray xs\n                |> Array.mapInPlace (fun x ->\n                    let k = key x\n                    let node =\n                        if prevState.ContainsKey k then\n                            let n = prevState.[k]\n                            Var.Set n.NVar x\n                            n\n                        else\n                            View.ConvertSeqNode (fun v -> conv k v) x\n                    newState.[k] <- node\n                    node.NValue)\n                :> seq<_>\n            state := newState\n            result)\n\n    static member MapSeqCachedView conv view =\n        View.MapSeqCachedViewBy (fun x -> x) (fun _ v -> conv v) view\n\n    [<Inline>]\n    static member Convert<'A, 'B when 'A : equality> (f: 'A -> 'B) v =\n        View.MapSeqCached f v\n\n    [<Inline>]\n    static member ConvertBy<'A, 'B, 'K when 'K : equality> (k: 'A -> 'K) (f: 'A -> 'B) v =\n        View.MapSeqCachedBy k f v\n\n    [<Inline>]\n    static member ConvertSeq<'A, 'B when 'A : equality> (f: View<'A> -> 'B) v =\n        View.MapSeqCachedView f v\n\n    [<Inline>]\n    static member ConvertSeqBy<'A, 'B, 'K when 'K : equality> (k: 'A -> 'K) (f: 'K -> View<'A> -> 'B) v =\n        View.MapSeqCachedViewBy k f v\n\n  // More cominators ------------------------------------------------------------\n\n    static member Join (V observe : View<View<'T>>) : View<'T> =\n        View.CreateLazy (fun () ->\n            Snap.Join (getSnapV (observe ())))\n\n    static member Bind (fn: 'A -> View<'B>) view =\n        View.Join (View.Map fn view)\n\n    static member JoinInner (V observe : View<View<'T>>) : View<'T> =\n        View.CreateLazy (fun () ->\n            Snap.JoinInner (getSnapV (observe ())))\n\n    static member BindInner fn view =\n        View.JoinInner (View.Map fn view)\n\n    static member UpdateWhile def v1 v2 =\n        let value = ref def\n        View.BindInner (fun pred ->\n            if pred then\n                View.Map (fun v ->\n                    value := v\n                    v\n                ) v2   \n            else View.Const (!value) \n        ) v1\n\n    static member Sequence views =\n        View.CreateLazy(fun () ->\n            views\n            |> Seq.map (fun (V observe) -> observe ())\n            |> Snap.Sequence)\n\n    static member Const x =\n        let o = Snap.CreateForever x\n        V (fun () -> o)\n\n    static member ConstAsync a =\n        let o = Snap.CreateForeverAsync a\n        V (fun () -> o)\n\n    static member TryWith (f: exn -> View<'T>) (V observe: View<'T>) : View<'T> =\n        View.CreateLazy (fun () ->\n            try\n                observe ()\n            with exn ->\n                let (V obs) = f exn\n                obs ()\n        )\n\n    static member TryFinally (f: unit -> unit) (V observe: View<'T>) : View<'T> =\n        View.CreateLazy (fun () ->\n            try\n                observe ()\n            finally\n                f ()\n        )\n\n    static member Sink act (V observe) =\n        let rec loop () =\n            let sn = observe ()\n            Snap.WhenRun sn act (fun () ->\n                Async.Schedule loop)\n        Async.Schedule loop\n\n    static member RemovableSink act (V observe) =\n        let cont = ref true\n        let rec loop () =\n            let sn = observe ()\n            Snap.WhenRun sn\n                (fun x -> if !cont then act x)\n                (fun () -> if !cont then Async.Schedule loop)\n        Async.Schedule loop\n        fun () -> cont := false\n\n    static member AsyncAwait filter view =\n        Async.FromContinuations <| fun (ok, _, _) ->\n            let rec remove =\n                View.RemovableSink (fun value ->\n                    if filter value then\n                        remove ()\n                        ok value\n                ) view\n            ()\n\n    static member Apply fn view =\n        View.Map2 (fun f x -> f x) fn view\n\ntype Var with\n\n    [<JavaScript>]\n    static member Lens (var: Var<_>) get update =\n        let id = Fresh.Id()\n        let view = var.View |> View.Map get\n\n        { new Var<'V>() with\n\n            member this.Get() =\n                get (var.Get())\n\n            member this.Set(v) =\n                var.Update(fun t -> update t v)\n\n            member this.SetFinal(v) =\n                this.Set(v)\n\n            member this.Update(f) =\n                var.Update(fun t -> update t (f (get t)))\n\n            member this.UpdateMaybe(f) =\n                var.UpdateMaybe(fun t -> Option.map (fun x -> update t x) (f (get t)))\n\n            member this.View =\n                view\n\n            member this.Id =\n                id\n        }\n\n    static member MapLens<'A, 'B, 'K when 'K : equality> (getKey: 'A -> 'K) (f: Var<'A> -> 'B) (var: Var<list<'A>>) : View<seq<'B>> =\n        var.View |> View.MapSeqCachedViewBy getKey (fun k v ->\n            let id = Fresh.Id()\n            let isThis a =\n                getKey a = k\n            f { new Var<'A>() with\n\n                member this.Get() =\n                    List.find isThis var.Value\n\n                member this.Set(v) =\n                    var.Update (List.replaceFirst isThis (fun _ -> v))\n\n                member this.SetFinal(v) =\n                    this.Set(v)\n\n                member this.Update(f) =\n                    var.Update(List.replaceFirst isThis f)\n\n                member this.UpdateMaybe(f) =\n                    var.Update(List.maybeReplaceFirst isThis f)\n\n                member this.View =\n                    v\n\n                member this.Id =\n                    id\n            }\n        )\n\n\n// These methods apply to any View<'A>, so we can use `type View with`\n// and they'll be compiled as normal instance methods on View<'A>.\ntype View<'T> with\n\n    [<JavaScript; Inline>]\n    member v.Map f = View.Map f v\n\n    //[<JavaScript; Inline>]\n    //member v.Map (f: System.Func<_, 'B>) =\n    //    View.Map (FSharpConvert.Fun f) v\n\n    [<JavaScript; Inline>]\n    member v.MapAsync f = View.MapAsync f v\n\n    //member v.MapAsync (f: System.Func<_, System.Threading.Tasks.Task<'B>>) =\n    //    v |> View.MapAsync (fun a ->\n    //        async {\n    //            let! res = f.Invoke(a) |> Async.AwaitTask\n    //            return res\n    //        })\n\n    [<JavaScript; Inline>]\n    member v.Bind f = View.Bind f v\n\n    [<JavaScript; Inline>]\n    member v.BindInner f = View.BindInner f v\n\n    //[<JavaScript; Inline>]\n    //member v.Bind (f: System.Func<_, View<'B>>) =\n    //    View.Bind (FSharpConvert.Fun f) v\n\n    [<JavaScript; Inline>]\n    member v.SnapshotOn init v' = View.SnapshotOn init v' v\n\n    [<JavaScript; Inline>]\n    member v.UpdateWhile init vPred = View.UpdateWhile init vPred v\n\n    [<JavaScript; Macro(typeof<Macros.VProp>)>]\n    member v.V = failwith \"View<'T>.V can only be called in an argument to a V-enabled function or if 'T = Doc.\" : 'T\n\ntype Var<'T> with\n\n    [<Macro(typeof<Macros.VProp>)>]\n    member this.V = this.View.V\n\n    [<JavaScript; Inline>]\n    member var.Lens get update =\n        Var.Lens var get update\n\n[<JavaScript>]\ntype FromView<'T>(view: View<'T>, set: 'T -> unit) =\n    inherit Var<'T>()\n\n    let id = Fresh.Int()\n    let mutable current =\n        match View.TryGet view with\n        | Some x -> x\n        | None -> jsNull<'T>()\n    let view = view |> View.Map (fun x -> current <- x; x)\n\n    override this.View = view\n\n    override this.Get() = current\n\n    override this.Set(x) = set x\n\n    override this.UpdateMaybe(f) =\n        view |> View.Get (fun x ->\n            match f x with\n            | None -> ()\n            | Some x -> set x\n        )\n\n    override this.Update(f) =\n        view |> View.Get (f >> set)\n\n    override this.SetFinal(x) = set x\n\n    override this.Id = \"uinref\" + string id\n\ntype Var with\n\n    [<JavaScript; Inline>]\n    static member Make view set =\n        FromView(view, set) :> Var<_>\n\ntype ViewBuilder =\n    | B\n\n    [<JavaScript; Inline>]\n    member b.Bind(x, f) = View.Bind f x\n\n    [<JavaScript; Inline>]\n    member b.Return x = View.Const x\n\n    [<JavaScript; Inline>]\n    member b.ReturnFrom(v: View<'T>) = v\n\n    [<JavaScript; Inline>]\n    member b.TryWith(v, f) = View.TryWith f v\n\n    [<JavaScript; Inline>]\n    member b.TryFinally(v, f) = View.TryFinally f v\n\ntype View with\n    [<JavaScript>]\n    static member Do = B\n\n[<Sealed; JavaScript>]\ntype Submitter<'T> (input: View<'T>, init: 'T) =\n    let var = Var.Create ()\n    let view = View.SnapshotOn init var.View input\n\n    [<Inline>]\n    member this.View = view\n\n    member this.Trigger() = var.Value <- ()\n\n    [<Inline>]\n    member this.Input = input\n\n[<Sealed; JavaScript>]\ntype Submitter =\n\n    [<Inline>]\n    static member CreateDefault input =\n        Submitter<_>(input, Unchecked.defaultof<_>)\n\n    [<Inline>]\n    static member Create input init =\n        Submitter<_>(input, init)\n\n    static member CreateOption input =\n        Submitter<_>(View.Map Some input, None)\n\n    [<Inline>]\n    static member View (s: Submitter<_>) =\n        s.View\n\n    [<Inline>]\n    static member Trigger (s: Submitter<_>) =\n        s.Trigger()\n\n    [<Inline>]\n    static member Input (s: Submitter<_>) =\n        s.Input\n\n[<AutoOpen>]\nmodule V =\n\n    [<Macro(typeof<Macros.V>)>]\n    let V (x: 'T) = View.Const x\n\n[<assembly:System.Runtime.CompilerServices.Extension>]\ndo ()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\n\n[<JavaScript>]\ntype Key =\n    | Key of int\n\n    static member Fresh () = Key (Fresh.Int ())\n\n[<JavaScript>]\ntype Model<'I,'M>(var: Var<'M>, view: View<'I>) =\n\n    new (proj: Func<'M, 'I>, init: 'M) =\n        let var = Var.Create init\n        let view = View.Map proj.Invoke var.View\n        Model(var, view)\n\n    [<Inline>]\n    member this.Var = var\n    [<Inline>]\n    member this.View = view\n\n[<JavaScript>]\n[<Sealed>]\ntype Model =\n\n    static member Create proj init =\n        Model(Func<_,_>(proj), init)\n\n    static member Update update (m: Model<'I, 'M>) =\n        Var.Update m.Var (fun x -> update x; x)\n\n    [<Inline>]\n    static member View (m: Model<'I, 'M>) =\n        m.View\n\ntype Storage<'T> =\n    [<Name \"SAppend\">]\n    abstract member Append : appending: 'T -> ``to``: 'T[] -> 'T[]\n    [<Name \"SAppendMany\">]\n    abstract member AppendMany : appending: seq<'T> -> ``to``: 'T[] -> 'T[]\n    [<Name \"SPrepend\">]\n    abstract member Prepend : appending: 'T -> ``to``: 'T[] -> 'T[]\n    [<Name \"SPrependMany\">]\n    abstract member PrependMany : appending: seq<'T> -> ``to``: 'T[] -> 'T[]\n    [<Name \"SInit\">]\n    abstract member Init : unit -> 'T[]\n    [<Name \"SRemoveIf\">]\n    abstract member RemoveIf : ('T -> bool) -> 'T [] -> 'T[]\n    [<Name \"SSetAt\">]\n    abstract member SetAt : int -> 'T -> 'T[] -> 'T[]\n    [<Name \"SSet\">]\n    abstract member Set : 'T seq -> 'T[]\n\ntype Serializer<'T> =\n    {\n        Encode : 'T -> obj\n        Decode : obj -> 'T\n    }\n\n[<JavaScript>]\nmodule Serializer =\n    open WebSharper\n    open WebSharper.JavaScript\n\n    let Default =\n        {\n            Encode = box\n            Decode = unbox\n        }\n\n    [<Inline>]\n    let Typed =\n        {\n            Encode = WebSharper.Json.Encode<'T>\n            Decode = WebSharper.Json.Decode<'T>\n        }\n\n[<JavaScript>]\nmodule Storage =\n    open WebSharper\n    open WebSharper.JavaScript\n    \n    type private ArrayStorage<'T>(init) =\n\n        interface Storage<'T> with\n            member x.Append i arr = arr.JS.Push i |> ignore; arr\n            member x.AppendMany is arr = arr.JS.Push (Array.ofSeqNonCopying is) |> ignore; arr\n            member x.Prepend i arr = arr.JS.Unshift i |> ignore; arr\n            member x.PrependMany is arr = arr.JS.Unshift (Array.ofSeqNonCopying is) |> ignore; arr\n            member x.Init () = init\n            member x.RemoveIf pred arr = Array.filter (fun i -> not (pred i)) arr\n            member x.SetAt idx elem arr = arr.[idx] <- elem; arr\n            member x.Set coll = Seq.toArray coll\n\n    type private LocalStorageBackend<'T>(id : string, serializer : Serializer<'T>) =\n        let storage = JS.Window.LocalStorage\n        let set (arr : 'T[]) = \n            storage.SetItem(id, arr |> Array.map serializer.Encode |> Json.Stringify)\n            arr\n        let clear () = storage.RemoveItem(id)\n\n        interface Storage<'T> with\n            member x.Append i arr = arr.JS.Push i |> ignore; set arr\n            member x.AppendMany is arr = arr.JS.Push (Array.ofSeqNonCopying is) |> ignore; set arr\n            member x.Prepend i arr = arr.JS.Unshift i |> ignore; set arr\n            member x.PrependMany is arr = arr.JS.Unshift (Array.ofSeqNonCopying is) |> ignore; set arr\n\n            member x.Init () =\n                let item = storage.GetItem(id)\n                if item = null then [||]\n                else \n                    try\n                        let arr = As<obj []> <| Json.Parse(item)\n                        arr |> Array.map serializer.Decode\n                    with _ -> [||]\n\n            member x.RemoveIf pred arr = set <| Array.filter (fun i -> not (pred i)) arr\n            member x.SetAt idx elem arr = arr.[idx] <- elem; set arr\n            member x.Set coll = set <| Seq.toArray coll\n\n    let InMemory init =\n        new ArrayStorage<_>(init) :> Storage<_>\n\n    let LocalStorage id serializer =\n        new LocalStorageBackend<_>(id, serializer) :> Storage<_>\n\ntype ListModelState<'T> =\n    [<Inline>]\n    member this.Length =\n        JavaScript.Pervasives.As<'T[]>(this).Length\n    [<Inline>]\n    member this.Item\n        with get i = JavaScript.Pervasives.As<'T[]>(this).[i]\n    [<Inline>]\n    member this.ToArray() =                             \n        Array.copy (JavaScript.Pervasives.As<'T[]>(this))\n    [<Inline>]\n    member this.ToArray(pred: Predicate<'T>) =\n        Array.filter pred.Invoke (JavaScript.Pervasives.As<'T[]>(this))\n    interface seq<'T> with\n        member this.GetEnumerator() = (JavaScript.Pervasives.As<'T[]>(this)).GetEnumerator()\n        member this.GetEnumerator() = (JavaScript.Pervasives.As<'T seq>(this)).GetEnumerator()\n\n[<JavaScript>]\ntype ListModel<'Key, 'T when 'Key : equality>\n    (\n        key : System.Func<'T, 'Key>,\n        var: Var<'T[]>,\n        storage : Storage<'T>\n    ) =\n\n    let v = var.View.Map(fun x -> Array.copy x :> _ seq)\n           \n    let it = Dictionary<'Key, Snap<option<'T>>>()\n\n    new (key: System.Func<'T, 'Key>, init: seq<'T>) =\n        let init = Seq.toArray init\n        ListModel<'Key, 'T>(key, Var.Create init, Storage.InMemory init)\n\n    new (key: System.Func<'T, 'Key>) =\n        ListModel<'Key, 'T>(key, [||])\n\n    new (key: System.Func<'T, 'Key>, storage: Storage<'T>) =\n        let var =\n            Seq.distinctBy key.Invoke (storage.Init ())\n            |> Seq.toArray\n            |> Var.Create\n        ListModel<'Key, 'T>(key, var, storage)\n\n    [<Inline>]\n    member this.key x = key.Invoke x\n    [<Inline>]\n    member this.Var = var\n    [<Inline>]\n    member this.Storage = storage\n    [<Inline>]\n    member this.View = v\n    [<Inline>]\n    member this.ViewState = JavaScript.Pervasives.As<View<ListModelState<'T>>> var.View\n    [<Inline>]\n    member this.itemSnaps = it\n\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            (Seq.ofArray var.Value).GetEnumerator()\n\n        member this.GetEnumerator() =\n            var.Value.GetEnumerator()\n\n[<JavaScript>]\nmodule ListModels =\n               \n    let Contains keyFn item xs =\n        let t = keyFn item\n        Array.exists (fun it -> keyFn it = t) xs\n\ntype ListModel<'Key,'T when 'Key : equality> with\n\n    [<Inline>]\n    member m.Key x = m.key x\n\n    [<Inline>]\n    member m.Add item =\n        m.Append item\n\n    member m.ObsoleteKey key =\n        match m.itemSnaps.TryGetValue(key) with\n        | true, sn ->\n            Snap.MarkObsolete sn \n            m.itemSnaps.Remove key |> ignore\n        | _ -> ()\n\n    member m.ObsoleteAll() =\n        m.itemSnaps |> Seq.iter (fun ksn -> Snap.MarkObsolete ksn.Value)\n        m.itemSnaps.Clear()\n\n    member m.Append item =\n        let v = m.Var.Value\n        let t = m.Key item\n        match Array.tryFindIndex (fun it -> m.Key it = t) v with\n        | None -> m.Var.Value <- m.Storage.Append item v\n        | Some index -> \n            m.Var.Value <- m.Storage.SetAt index item v\n        m.ObsoleteKey t\n\n    member m.AppendMany items =\n        let toAppend = ResizeArray()\n        let v =\n            (m.Var.Value, items)\n            ||> Seq.fold (fun v item ->\n                let t = m.Key item\n                m.ObsoleteKey t\n                match Array.tryFindIndex (fun it -> m.Key it = t) v with\n                | Some index ->\n                    m.Storage.SetAt index item v\n                | None -> toAppend.Add item; v)\n        m.Var.Value <- m.Storage.AppendMany toAppend v\n\n    member m.Prepend item =\n        let v = m.Var.Value\n        let t = m.Key item\n        match Array.tryFindIndex (fun it -> m.Key it = t) v with\n        | None -> m.Var.Value <- m.Storage.Prepend item v\n        | Some index -> \n            m.Var.Value <- m.Storage.SetAt index item v\n        m.ObsoleteKey t\n\n    member m.PrependMany items =\n        let toPrepend = ResizeArray()\n        let v =\n            (m.Var.Value, items)\n            ||> Seq.fold (fun v item ->\n                let t = m.Key item\n                m.ObsoleteKey t\n                match Array.tryFindIndex (fun it -> m.Key it = t) v with\n                | Some index -> \n                    m.Storage.SetAt index item v\n                | None -> toPrepend.Add item; v)\n        m.Var.Value <- m.Storage.PrependMany toPrepend v\n\n    member m.Remove item =\n        let v = m.Var.Value\n        if ListModels.Contains m.key item v then\n            let keyFn = m.key\n            let k = keyFn item\n            m.Var.Value <- m.Storage.RemoveIf (fun i -> keyFn i = k) v\n            m.ObsoleteKey k\n\n    member m.RemoveBy (f: 'T -> bool) =\n        for v in m.Var.Value do\n            if f v then\n                m.ObsoleteKey (m.key v)\n        m.Var.Value <- m.Storage.RemoveIf f m.Var.Value\n\n    member m.RemoveByKey key =\n        m.Var.Value <- m.Storage.RemoveIf (fun i -> m.Key i = key) m.Var.Value\n        m.ObsoleteKey key\n\n    member m.Iter fn =\n        Array.iter fn m.Var.Value\n\n    member m.Set lst =\n        m.Var.Value <- m.Storage.Set lst\n        m.ObsoleteAll()\n\n    member m.ContainsKey key =\n        Array.exists (fun it -> m.key it = key) m.Var.Value\n\n    member m.ContainsKeyAsView key =\n        m.Var.View |> View.Map (Array.exists (fun it -> m.key it = key))\n\n    member m.Find pred =\n        Array.find pred m.Var.Value\n\n    member m.TryFind pred =\n        Array.tryFind pred m.Var.Value\n\n    member m.FindAsView pred =\n        m.Var.View |> View.Map (Array.find pred)\n\n    member m.TryFindAsView pred =\n        m.Var.View |> View.Map (Array.tryFind pred)\n\n    member m.FindByKey key =\n        Array.find (fun it -> m.key it = key) m.Var.Value\n\n    member m.TryFindByKey key =\n        Array.tryFind (fun it -> m.key it = key) m.Var.Value\n\n    member m.TryFindByKeyAsView key =\n        ViewOptimization.V (fun () -> \n            match m.itemSnaps.TryGetValue(key) with\n            | true, snap -> snap                \n            | _ ->\n                let it = m.TryFindByKey(key)\n                let sn = Snap.CreateWithValue it\n                m.itemSnaps.Add(key, sn)\n                sn\n        )\n\n    member m.FindByKeyAsView key =\n        m.TryFindByKeyAsView key |> View.Map Option.get\n\n    member m.UpdateAll fn =\n        m.Var.Update <| fun a ->\n            a |> Array.iteri (fun i x ->\n                fn x |> Option.iter (fun y -> a.[i] <- y))\n            m.Storage.Set a\n        m.ObsoleteAll()\n\n    member m.UpdateBy fn key =\n        let v = m.Var.Value\n        match Array.tryFindIndex (fun it -> m.key it = key) v with\n        | None -> ()\n        | Some index ->\n            match fn v.[index] with\n            | None -> ()\n            | Some value ->\n                m.Var.Value <- m.Storage.SetAt index value v\n                m.ObsoleteKey key\n\n    [<Inline>]\n    member m.UpdateByU(fn, key) =\n        m.UpdateBy fn key\n\n    member m.Clear () =\n        m.Var.Value <- m.Storage.Set Seq.empty\n        m.ObsoleteAll()\n\n    member m.Length =\n        m.Var.Value.Length\n\n    member m.LengthAsView =\n        m.Var.View |> View.Map (fun arr -> arr.Length)\n\n    member private m.LensInto'(get: 'T -> 'V, update: 'T -> 'V -> 'T, key : 'Key, view: View<'V>) : Var<'V> =\n        let id = Fresh.Id()\n    \n        { new Var<'V>() with\n\n            member r.Get() =\n                m.FindByKey key |> get\n\n            member r.Set(v) =\n                m.UpdateBy (fun i -> Some (update i v)) key\n\n            member r.SetFinal(v) =\n                r.Set(v)\n\n            member r.Update(f) =\n                m.UpdateBy (fun i -> Some (update i (f (get i)))) key\n\n            member r.UpdateMaybe(f) =\n                m.UpdateBy (fun i -> Option.map (fun v -> update i v) (f (get i))) key\n\n            member r.View =\n                view\n\n            member r.Id =\n                id\n        }\n\n    member m.LensInto (get: 'T -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) : Var<'V> =\n        let view = m.FindByKeyAsView(key) |> View.Map get\n        m.LensInto'(get, update, key, view)\n\n    [<Inline>]\n    member m.LensIntoU<'V> (get: 'T -> 'V, update: 'T -> 'V -> 'T, key : 'Key) : Var<'V> =\n        m.LensInto get update key\n\n    member m.Lens (key: 'Key) =\n        m.LensInto id (fun _ -> id) key\n\n    member m.Value\n        with [<Inline>] get () = m.Var.Value :> seq<_>\n        and [<Inline>] set v = m.Set(v)\n\n    [<Inline>]\n    member m.Map (f: 'T -> 'V) : View<seq<'V>> =\n        View.MapSeqCachedBy m.key f m.ViewState\n\n    [<Inline>]\n    member m.Map (f: 'Key -> View<'T> -> 'V) : View<seq<'V>> =\n        View.MapSeqCachedViewBy m.key f m.ViewState\n\n    member m.MapLens (f: 'Key -> Var<'T> -> 'V) =\n        let get k v =\n            f k (m.LensInto'(id, (fun _ -> id), k, v))\n        View.MapSeqCachedViewBy m.key get m.ViewState\n\n[<JavaScript>]\ntype ListModel =\n\n    static member CreateWithStorage<'Key,'T when 'Key : equality>\n            (key: 'T -> 'Key) (storage : Storage<'T>) =\n        ListModel<'Key, 'T>(key, storage)\n\n    static member Create<'Key, 'T when 'Key : equality> (key: 'T -> 'Key) init =\n        ListModel.CreateWithStorage key (Storage.InMemory <| Seq.toArray init)\n\n    static member FromSeq init =\n        ListModel.Create id init\n\n    static member Wrap<'Key, 'T, 'U when 'Key : equality>\n            (underlying: ListModel<'Key, 'U>)\n            (extract: 'T -> 'U)\n            (createItem: 'U -> 'T)\n            (updateItem: 'T -> 'U -> 'T) =\n        let state = ref (Dictionary<'Key, 'T>())\n        let init =\n            underlying.Var.Value |> Array.map (fun u ->\n                let t = createItem u\n                (!state).[underlying.Key u] <- t\n                t)\n        let var : Var<'T[]> =\n            underlying.Var.Lens\n                <| fun us ->\n                    let newState = Dictionary<'Key, 'T>()\n                    let ts =\n                        us |> Array.map (fun u ->\n                            let k = underlying.Key u\n                            let t =\n                                if (!state).ContainsKey(k) then\n                                    updateItem (!state).[k] u\n                                else\n                                    createItem u\n                            newState.[k] <- t\n                            t\n                        )\n                    state := newState\n                    ts\n                <| fun us ts ->\n                    let newState = Dictionary<'Key, 'T>()\n                    let us =\n                        ts |> Array.map (fun t ->\n                            let u = extract t\n                            newState.[underlying.Key u] <- t\n                            u)\n                    state := newState\n                    us\n        ListModel<'Key, 'T>(Func<_,_>(extract >> underlying.Key), var, Storage.InMemory init)\n\n    [<Inline>]\n    static member View (m: ListModel<_,_>) =\n        m.View\n\n    [<Inline>]\n    static member ViewState (m: ListModel<_,_>) =\n        m.ViewState\n\n    [<Inline>]\n    static member Key (m: ListModel<_,_>) =\n        m.key\n\n    [<Inline>]\n    static member Map f (m: ListModel<_, _>) =\n        View.MapSeqCachedBy m.key f m.ViewState\n\n    [<Inline>]\n    static member MapView f (m: ListModel<_, _>) =\n        View.MapSeqCachedViewBy m.key f m.ViewState\n\n    [<Inline>]\n    static member MapLens f (m: ListModel<_, _>) =\n        m.MapLens f\n\ntype ListModel<'Key,'T when 'Key : equality> with\n\n    member this.Wrap extract wrap update =\n        ListModel.Wrap this extract wrap update\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System.Runtime.CompilerServices\nopen WebSharper\nopen WebSharper.JavaScript\ntype private KV<'K, 'V> = System.Collections.Generic.KeyValuePair<'K, 'V>\n\n[<AutoOpen>]\nmodule VarModule =\n\n    [<Macro(typeof<Macros.LensFunction>)>]\n    let Lens (x: 'T) = Var.Create x\n\n// These methods apply to specific types of View (such as View<seq<'A>> when 'A : equality)\n/// so we need to use C#-style extension methods.\n[<Extension; JavaScript>]\ntype ReactiveExtensions() =\n\n    [<Extension; Inline>]\n    static member MapCached (v, f) = View.MapCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<seq<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<seq<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<seq<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<seq<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<list<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<list<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<list<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<list<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<array<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<array<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<array<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<array<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<ListModelState<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<ListModelState<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<ListModelState<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<ListModelState<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality and 'K : comparison>\n        (v: View<Map<'K, 'A>>, f: 'K -> View<'A> -> 'B) =\n        View.MapSeqCachedViewBy\n            (fun (kv: KV<'K, 'A>) -> kv.Key)\n            (fun k v -> f k (View.Map (fun (kv: KV<'K, 'A>) -> kv.Value) v))\n            v\n\n    [<Extension; Macro(typeof<Macros.LensMethod>)>]\n    static member LensAuto<'T, 'U>(ref: Var<'T>, getter: 'T -> 'U) = X<Var<'U>>\n\n    [<Extension; Inline>]\n    static member MapLens<'A, 'B, 'K when 'K : equality>(v: Var<list<'A>>, k: 'A -> 'K, f: Var<'A> -> 'B) = Var.MapLens k f v\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Runtime.InteropServices\n\ntype Time = double\ntype NormalizedTime = double\n\n// Interpolation --------------------------------------------------------------\n\ntype Interpolation<'T> =\n    [<Name \"Interpolate\">]\n    abstract Interpolate : NormalizedTime -> 'T -> 'T -> 'T\n\n[<JavaScript>]\ntype DoubleInterpolation =\n    | DoubleInterpolation\n\n    interface Interpolation<double> with\n        member d.Interpolate t x y =\n            x + t * (y - x)\n\n[<JavaScript>]\n[<Sealed>]\ntype Interpolation =\n    static member Double = DoubleInterpolation :> Interpolation<_>\n\n// Easing ---------------------------------------------------------------------\n\n[<JavaScript>]\ntype Easing (transformTime : Converter<NormalizedTime, NormalizedTime>) =\n\n    member this.TransformTime t = transformTime.Invoke t\n    static member Custom f = Easing (fun t -> f t)\n\n[<JavaScript>]\nmodule Easings =\n\n    let CubicInOut =\n        let f t =\n            let t2 = t * t\n            let t3 = t2 * t\n            3. * t2 - 2. * t3\n        Easing.Custom f\n\ntype Easing with\n    static member CubicInOut = Easings.CubicInOut\n\n// Animation ------------------------------------------------------------------\n\ntype Anim<'T> =\n    private {\n        Compute : Time -> 'T\n        Duration : Time\n    }\n\ntype Animation =\n    | Finally of (unit -> unit)\n    | Work of Anim<unit>\n\n[<JavaScript>]\n[<Name \"An\">]\ntype Anim =\n    | Anim of AppendList<Animation>\n\n[<JavaScript>]\nmodule Anims =\n\n    let List (Anim xs) =\n        xs\n\n    let Finalize (Anim all) =\n        AppendList.ToArray all\n        |> Array.iter (function\n            | Finally f -> f ()\n            | _ -> ())\n\n    let Def d f =\n        { Compute = f; Duration = d}\n\n    let Const v =\n        Def 0. (fun t -> v)\n\n    // \"Prolongs\" an animation to the given time by adding in several\n    // no-ops after the animation finishes.\n    let Prolong nextDuration anim =\n        let comp = anim.Compute\n        let dur = anim.Duration\n        let last = lazy anim.Compute anim.Duration\n        let compute t = if t >= dur then last.Value else comp t\n\n        {\n            Compute = compute\n            Duration = nextDuration\n        }\n\n    let ConcatActions xs =\n        let xs = Array.ofSeqNonCopying xs\n        match xs.Length with\n        | 0 -> Const ()\n        | 1 -> xs.[0]\n        | _ ->\n            let dur = xs |> Seq.map (fun anim -> anim.Duration) |> Seq.max\n            let xs = Array.map (Prolong dur) xs\n            Def dur (fun t -> Array.iter (fun anim -> anim.Compute t) xs)\n\n    let Actions (Anim all) =\n        AppendList.ToArray all\n        |> Array.choose (function\n            | Work w -> Some w\n            | _ -> None)\n        |> ConcatActions\n\n    let mutable UseAnimations = true\n\ntype Anim with\n\n    static member UseAnimations \n        with get() = Anims.UseAnimations\n        and set v = Anims.UseAnimations <- v \n\n    static member Append (Anim a) (Anim b) =\n        Anim (AppendList.Append a b)\n\n    static member Concat xs =\n        xs\n        |> Seq.map Anims.List\n        |> AppendList.Concat\n        |> Anim\n\n    static member Const v =\n        Anims.Const v\n\n    static member Simple (inter: Interpolation<'T>) (easing: Easing) dur x y=\n        {\n            Duration = dur\n            Compute = fun t ->\n                let t = easing.TransformTime (t / dur)\n                inter.Interpolate t x y\n        }\n\n    static member Delayed (inter: Interpolation<'T>) (easing: Easing) dur delay x y =\n        {\n            Duration = dur + delay\n            Compute = fun t ->\n              //  JavaScript.Log <| \"T: \" + (string t) + \", delay: \" + (string delay)\n                if t <= delay then\n                    x\n                else\n                    let normalisedTime = easing.TransformTime ((t - delay) / dur)\n                    inter.Interpolate normalisedTime x y\n        }\n\n    static member Map f anim =\n        Anims.Def anim.Duration (anim.Compute >> f)\n\n    static member Pack anim =\n        Anim (AppendList.Single (Work anim))\n\n    static member Play anim =\n        async {\n            do! Anims.Actions anim\n                |> Anim.Run ignore\n            return Anims.Finalize anim\n        }\n\n    static member Run k anim =\n        let dur = anim.Duration\n        if dur = 0. then async.Zero() else\n        Async.FromContinuations <| fun (ok, _, _) ->\n            let rec loop start now =\n                let t = now - start\n                k (anim.Compute t)\n                if t <= dur then\n                    JS.RequestAnimationFrame (fun t -> loop start t) |> ignore\n                else ok ()\n            JS.RequestAnimationFrame (fun t -> loop t t) |> ignore\n\n    static member WhenDone f main =\n        main\n        |> Anim.Append (Anim (AppendList.Single (Finally f)))\n\n    static member Empty =\n        Anim AppendList.Empty\n\n// Transitions ----------------------------------------------------------------\n\ntype TFlags =\n    | TTrivial = 0\n    | TChange = 1\n    | TEnter = 2\n    | TExit = 4\n\n[<JavaScript>]\ntype Trans<'T>\n    (\n        change: Func<'T, 'T, Anim<'T>>,\n        enter: Func<'T, Anim<'T>>,\n        exit: Func<'T, Anim<'T>>,\n        flags: TFlags\n    ) =\n\n    new () =\n        Trans(\n            (fun x y -> Anim.Const y),\n            (fun t -> Anim.Const t),\n            (fun t -> Anim.Const t),\n            TFlags.TTrivial\n        )\n\n    new (ch: Func<'T, 'T, Anim<'T>>) =\n        Trans(\n            ch,\n            (fun t -> Anim.Const t),\n            (fun t -> Anim.Const t),\n            TFlags.TChange\n        )\n\n    new (ch: Func<'T, 'T, Anim<'T>>, enter, exit) =\n        Trans(\n            ch,\n            (if enter = null then Func<_,_>(fun t -> Anim.Const t) else enter),\n            (if exit = null then Func<_,_>(fun t -> Anim.Const t) else exit),\n            TFlags.TChange ||| \n                (if enter = null then TFlags.TTrivial else TFlags.TEnter) |||\n                (if exit = null then TFlags.TTrivial else TFlags.TExit)\n        )\n\n    member this.TChange x y = change.Invoke(x, y)\n    member this.TEnter = enter.Invoke\n    member this.TExit = exit.Invoke\n    member this.TFlags = flags\n\n    member this.Copy(?change, ?enter, ?exit, ?flags) =\n        let ch = defaultArg change this.TChange\n        let en = defaultArg enter this.TEnter\n        let ex = defaultArg exit this.TExit\n        let fl = defaultArg flags this.TFlags\n        Trans(Func<_,_,_>(ch), Func<_,_>(en),\n            Func<_,_>(ex), fl)\n\n[<JavaScript>]\n[<Sealed>]\ntype Trans =\n\n  // Using a Trans ---------------\n\n    static member AnimateChange (tr: Trans<'T>) x y = tr.TChange x y\n    static member AnimateEnter (tr: Trans<'T>) x = tr.TEnter x\n    static member AnimateExit (tr: Trans<'T>) x = tr.TExit x\n    static member CanAnimateChange (tr: Trans<'T>) = tr.TFlags.HasFlag(TFlags.TChange)\n    static member CanAnimateEnter (tr: Trans<'T>) = tr.TFlags.HasFlag(TFlags.TEnter)\n    static member CanAnimateExit (tr: Trans<'T>) = tr.TFlags.HasFlag(TFlags.TExit)\n\n  // Creating a Trans ------------\n\n    static member Trivial () =\n        Trans()\n\n    static member Create (ch: 'T -> 'T -> Anim<'T>) =\n        Trans(Func<_,_,_>(ch))\n\n    static member Change ch (tr: Trans<'T>) =\n        tr.Copy(change = ch, flags = (tr.TFlags ||| TFlags.TChange))\n\n    static member Enter f (tr: Trans<'T>) =\n        tr.Copy(enter = f, flags = (tr.TFlags ||| TFlags.TEnter))\n\n    static member Exit f (tr: Trans<'T>) =\n        tr.Copy(exit = f, flags = (tr.TFlags ||| TFlags.TExit))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen System.Linq.Expressions\nopen Microsoft.FSharp.Quotations\nopen Microsoft.FSharp.Quotations.Patterns\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Core.Resources\nmodule M = WebSharper.Core.Metadata\nmodule R = WebSharper.Core.AST.Reflection\nmodule J = WebSharper.Core.Json\nmodule P = FSharp.Quotations.Patterns\n\nmodule private Internal =\n\n    open WebSharper.Core\n    open WebSharper.Web.ClientSideInternals\n\n    let activateNode =\n        M.MethodNode(\n            AST.TypeDefinition {\n                Assembly = \"WebSharper.Main\"\n                FullName = \"WebSharper.Activator\"\n            },\n            AST.Method {\n                MethodName = \"Activate\"\n                Parameters = []\n                ReturnType = AST.VoidType\n                Generics = 0\n            } \n        )\n\n    let compile (meta: M.Info) (json: J.Provider) (q: Expr) (doCall: string -> string) =\n        let reqs = ResizeArray<M.Node>()\n        let rec compile' (q: Expr) =\n            match getLocation q with\n            | Some p ->\n                match meta.Quotations.TryGetValue(p) with\n                | false, _ ->\n                    None\n                | true, (declType, meth, argNames) ->\n                    match meta.Classes.TryGetValue declType with\n                    | false, _ -> failwithf \"Error in Handler: Couldn't find JavaScript address for method %s.%s\" declType.Value.FullName meth.Value.MethodName\n                    | true, c ->\n                        let argIndices = Map (argNames |> List.mapi (fun i x -> x, i))\n                        let args = Array.create argNames.Length null\n                        reqs.Add(M.MethodNode (declType, meth))\n                        reqs.Add(M.TypeNode declType)\n                        let setArg (name: string) (value: obj) =\n                            let i = argIndices.[name]\n                            if isNull args.[i] then\n                                args.[i] <-\n                                    match value with\n                                    | :? Expr as q ->\n                                        compile' q |> Option.get\n                                    | value ->\n                                        let typ = value.GetType()\n                                        reqs.Add(M.TypeNode (WebSharper.Core.AST.Reflection.ReadTypeDefinition typ))\n                                        let packed = json.GetEncoder(typ).Encode(value) |> json.Pack\n                                        let s =\n                                            WebSharper.Core.Json.Stringify(packed)\n                                                .Replace(\"&\", \"&amp;\")\n                                                .Replace(\"\\\"\", \"&quot;\")\n                                        match packed with\n                                        | WebSharper.Core.Json.Object (((\"$TYPES\" | \"$DATA\"), _) :: _) ->\n                                            \"WebSharper.Json.Activate(\" + s + \")\"\n                                        | _ -> s\n                        findArgs Set.empty setArg q\n                        let addr =\n                            match c.Methods.TryGetValue meth with\n                            | true, (M.CompiledMember.Static x, _, _) -> x.Value\n                            | _ -> failwithf \"Error in Handler: Couldn't find JavaScript address for method %s.%s\" declType.Value.FullName meth.Value.MethodName\n                        let funcall = String.concat \".\" (List.rev addr)\n                        let args = String.concat \",\" args\n                        Some (sprintf \"%s(%s)\" funcall args)\n            | None -> None\n        compile' q\n        |> Option.map (fun s ->\n            reqs.Add(activateNode)\n            doCall s, reqs :> seq<_>\n        )\n\ntype private OnAfterRenderControl() =\n    inherit Web.Control()\n\n    [<JavaScript>]\n    override this.Body =\n        let l = JS.Document.QuerySelectorAll(\"[ws-runafterrender]\")\n        for i = 0 to l.Length - 1 do\n            let x = l.[i] :?> Dom.Element\n            let f = JS.Eval(x.GetAttribute(\"ws-runafterrender\")) :?> (Dom.Element -> unit)\n            x.RemoveAttribute(\"ws-runafterrender\")\n            f x\n        { new IControlBody with member this.ReplaceInDom(_) = () }\n\n// We would have wanted to use UseNullAsTrueValue so that EmptyAttr = null,\n// which makes things much easier when it comes to optional arguments in Templating.\n// The problem is that for some reason UNATV is ignored if there are 4 or more cases.\n// So we end up having to do explicit null checks everywhere :(\ntype Attr =\n    | AppendAttr of list<Attr>\n    | SingleAttr of string * string\n    | DepAttr of string * (M.Info -> string) * (M.Info -> seq<M.Node>) * (M.Info -> J.Provider -> list<string * J.Encoded>)\n\n    member this.Write(meta, w: HtmlTextWriter, removeWsHole) =\n        match this with\n        | AppendAttr attrs ->\n            attrs |> List.iter (fun a ->\n                if not (obj.ReferenceEquals(a, null))\n                then a.Write(meta, w, removeWsHole))\n        | SingleAttr (n, v) ->\n            if not (removeWsHole && n = \"ws-hole\") then\n                w.WriteAttribute(n, v)\n        | DepAttr (n, v, _, _) ->\n            w.WriteAttribute(n, v meta)\n\n    interface IRequiresResources with\n\n        member this.Requires(meta) =\n            match this with\n            | AppendAttr attrs ->\n                attrs |> Seq.collect (fun a ->\n                    if obj.ReferenceEquals(a, null)\n                    then Seq.empty\n                    else (a :> IRequiresResources).Requires(meta))\n            | DepAttr (_, _, reqs, _) -> reqs meta\n            | SingleAttr _ -> Seq.empty\n\n        member this.Encode (meta, json) =\n            match this with\n            | AppendAttr attrs ->\n                attrs |> List.collect (fun a ->\n                    if obj.ReferenceEquals(a, null)\n                    then []\n                    else (a :> IRequiresResources).Encode(meta, json))\n            | DepAttr (_, _, _, enc) -> enc meta json\n            | SingleAttr _ -> []\n\n    member this.WithName(n) =\n        match this with\n        | AppendAttr _ -> this\n        | SingleAttr(_, v) -> SingleAttr(n, v)\n        | DepAttr(_, v, d, e) -> DepAttr(n, v, d, e)\n\n    static member Create name value =\n        SingleAttr (name, value)\n\n    static member Append a b =\n        AppendAttr [a; b]\n\n    static member Empty =\n        AppendAttr []\n\n    static member Concat (xs: seq<Attr>) =\n        AppendAttr (List.ofSeq xs)\n\n    static member WithDependencies(name, getValue, deps) =\n        DepAttr (name, getValue, deps, fun _ _ -> [])\n\n    static member OnAfterRenderImpl(q: Expr<Dom.Element -> unit>) =\n        let json = WebSharper.Web.Shared.Json // TODO: fix?\n        let value = ref None\n        let init meta =\n            if Option.isNone !value then\n                value :=\n                    match Internal.compile meta json q id with\n                    | Some _ as v -> v\n                    | _ ->\n                        let m =\n                            match q with\n                            | Lambda (x1, Call(None, m, [Var x2])) when x1 = x2 -> m\n                            | _ -> failwithf \"Invalid handler function: %A\" q\n                        let loc = WebSharper.Web.ClientSideInternals.getLocation' q\n                        let func, reqs = Attr.HandlerFallback(m, loc, id)\n                        Some (func meta, reqs)\n        let getValue (meta: M.Info) =\n            init meta\n            fst (Option.get !value)\n        let getReqs (meta: M.Info) =\n            init meta\n            snd (Option.get !value)\n        let enc (meta: M.Info) (json: J.Provider) =\n            init meta\n            (new OnAfterRenderControl() :> IRequiresResources).Encode(meta, json)\n        DepAttr(\"ws-runafterrender\", getValue, getReqs, enc)\n\n    static member HandlerImpl(event: string, q: Expr<Dom.Element -> #Dom.Event -> unit>) =\n        let json = WebSharper.Web.Shared.Json // TODO: fix?\n        let value = ref None\n        let init meta =\n            if Option.isNone !value then\n                value :=\n                    match Internal.compile meta json q (fun s -> s + \"(this)(event)\") with\n                    | Some _ as v -> v\n                    | _ ->\n                        let m =\n                            match q with\n                            | Lambda (x1, Lambda (y1, Call(None, m, [Var x2; (Var y2 | Coerce(Var y2, _))]))) when x1 = x2 && y1 = y2 -> m\n                            | _ -> failwithf \"Invalid handler function: %A\" q\n                        let loc = WebSharper.Web.ClientSideInternals.getLocation' q\n                        let func, reqs = Attr.HandlerFallback(m, loc, fun s -> s + \"(this, event)\")\n                        Some (func meta, reqs)\n        let getValue (meta: M.Info) =\n            init meta\n            fst (Option.get !value)\n        let getReqs (meta: M.Info) =\n            init meta\n            snd (Option.get !value)\n        Attr.WithDependencies(\"on\" + event, getValue, getReqs)\n\n    static member Handler (event: string) ([<JavaScript>] q: Expr<Dom.Element -> #Dom.Event -> unit>) =\n        Attr.HandlerImpl(event, q)\n\n    static member HandlerFallback(m, location, doCall) =\n        let meth = R.ReadMethod m\n        let declType = R.ReadTypeDefinition m.DeclaringType\n        let reqs = [M.MethodNode (declType, meth); M.TypeNode declType]\n        let value = ref None\n        let fail() =\n            failwithf \"Error in Handler%s: Couldn't find JavaScript address for method %s.%s\"\n                location declType.Value.FullName meth.Value.MethodName\n        let func (meta: M.Info) =\n            match !value with\n            | None ->\n                match meta.Classes.TryGetValue declType with\n                | true, c ->\n                    let addr =\n                        match c.Methods.TryGetValue meth with\n                        | true, (M.CompiledMember.Static x, _, _) -> x.Value\n                        | _ -> fail()\n                    let s = String.concat \".\" (List.rev addr) |> doCall\n                    value := Some s\n                    s\n                | _ -> fail()\n            | Some v -> v\n        func, reqs :> seq<_>\n\n    static member HandlerLinqImpl(event, m, location) =\n        let func, reqs = Attr.HandlerFallback(m, location, fun s -> s + \"(this, event)\")\n        DepAttr (\"on\" + event, func, (fun _ -> reqs), (fun _ _ -> []))\n\n    static member HandlerLinq (event: string) (q: Expression<Action<Dom.Element, #Dom.Event>>) =\n        let meth =\n            match q.Body with\n            | :? MethodCallExpression as e -> e.Method\n            | _ -> failwithf \"Invalid handler function: %A\" q\n        Attr.HandlerLinqImpl(event, meth, \"\")\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI.Client\n\nopen System.Collections.Generic\nopen Microsoft.FSharp.Quotations\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nmodule DU = DomUtility\n\ntype IAttrNode =\n    [<Name \"NChanged\">]\n    abstract Changed : View<unit>\n    [<Name \"NGetChangeAnim\">]\n    abstract GetChangeAnim : Dom.Element -> Anim\n    [<Name \"NGetEnterAnim\">]\n    abstract GetEnterAnim : Dom.Element -> Anim\n    [<Name \"NGetExitAnim\">]\n    abstract GetExitAnim : Dom.Element -> Anim\n    [<Name \"NSync\">]\n    abstract Sync : Dom.Element -> unit\n\n[<JavaScript; Sealed; Name \"WebSharper.UI.AnimatedAttrNode\">]\ntype AnimatedAttrNode<'T>(tr: Trans<'T>, view: View<'T>, push: Dom.Element -> 'T -> unit) =\n    let mutable logical : option<'T> = None // current logical value\n    let mutable visible : option<'T> = None // current value pushed to the parent element\n    let mutable dirty = true // logical <> visible\n\n    let updates =\n        view\n        |> View.Map (fun x ->\n            logical <- Some x\n            dirty <- true)\n\n    let pushVisible el v =\n        visible <- Some v\n        dirty <- true\n        push el v\n\n    let sync p =\n        if dirty then\n            Option.iter (fun v -> push p v) logical\n            visible <- logical\n            dirty <- false\n\n    interface IAttrNode with\n\n        member a.GetChangeAnim parent =\n            match visible, logical with\n            | Some v, Some l when dirty ->\n                Trans.AnimateChange tr v l\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | _ -> Anim.Empty\n            |> Anim.WhenDone (fun () -> sync parent)\n\n        member a.GetEnterAnim parent =\n            match visible, logical with\n            | Some vi, Some lo when dirty ->\n                Trans.AnimateChange tr vi lo\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | None, Some lo ->\n                Trans.AnimateEnter tr lo\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | _ -> Anim.Empty\n            |> Anim.WhenDone (fun () -> sync parent)\n\n        member a.GetExitAnim parent =\n            match visible with\n            | Some cur ->\n                Trans.AnimateExit tr cur\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | _ -> Anim.Empty\n            |> Anim.WhenDone (fun () -> dirty <- true; visible <- None)\n\n        /// NOTE: enter or change animation will do the sync.\n        member a.Sync parent = ()\n\n        member a.Changed = updates\n\n[<JavaScript; Sealed; Name \"WebSharper.UI.DynamicAttrNode\">]\ntype DynamicAttrNode<'T>(view: View<'T>, push: Dom.Element -> 'T -> unit) =\n    let mutable value = JS.Undefined\n    let mutable dirty = false\n    let updates = view |> View.Map (fun x -> value <- x; dirty <- true)\n    interface IAttrNode with\n        member a.GetChangeAnim parent = Anim.Empty\n        member a.GetEnterAnim parent = Anim.Empty\n        member a.GetExitAnim parent = Anim.Empty\n        member a.Sync parent = if dirty then push parent value; dirty <- false\n        member a.Changed = updates\n\ntype AttrFlags =\n    | Defaults = 0\n    | HasEnterAnim = 1\n    | HasExitAnim = 2\n    | HasChangeAnim = 4\n\n[<JavaScript; Proxy(typeof<Attr>); Name \"WebSharper.UI.AttrProxy\"; Prototype>]\ntype internal AttrProxy =\n    | [<Constant(null)>] A0\n    | A1 of IAttrNode\n    | A2 of AttrProxy * AttrProxy\n    | A3 of init: (Dom.Element -> unit)\n    | A4 of onAfterRender: (Dom.Element -> unit)\n\n[<JavaScript; Name \"WebSharper.UI.Attrs\">]\nmodule Attrs =\n\n    type Dyn =\n        {\n            DynElem : Dom.Element\n            DynFlags : AttrFlags\n            DynNodes : IAttrNode []\n            [<OptionalField>]\n            OnAfterRender : option<Dom.Element -> unit>\n        }\n\n    let HasChangeAnim attr =\n        attr.DynFlags.HasFlag AttrFlags.HasChangeAnim\n\n    let HasEnterAnim attr =\n        attr.DynFlags.HasFlag AttrFlags.HasEnterAnim\n\n    let HasExitAnim attr =\n        attr.DynFlags.HasFlag AttrFlags.HasExitAnim\n\n    let Flags a =\n        if a !==. null && JS.HasOwnProperty a \"flags\"\n        then a?flags\n        else AttrFlags.Defaults\n\n    let SetFlags (a: AttrProxy) (f: AttrFlags) =\n        a?flags <- f\n\n    /// Synchronizes dynamic attributes.\n    let Sync elem dyn =\n        dyn.DynNodes\n        |> Array.iter (fun d ->\n            d.Sync elem)\n\n    /// Inserts static attributes and computes dynamic attributes.\n    let Insert elem (tree: Attr) =\n        let nodes = Queue()\n        let oar = Queue()\n        let rec loop node =\n          if not (obj.ReferenceEquals(node, null)) then // work around WS issue with UseNullAsTrueValue\n            match node with\n            | A0 -> ()\n            | A1 n -> nodes.Enqueue n\n            | A2 (a, b) -> loop a; loop b\n            | A3 mk -> mk elem\n            | A4 cb -> oar.Enqueue cb\n        loop (As<AttrProxy> tree)\n        let arr = nodes.ToArray()\n        {\n            DynElem = elem\n            DynFlags = Flags tree\n            DynNodes = arr\n            OnAfterRender =\n                if oar.Count = 0 then None else\n                Some (fun el -> Seq.iter (fun f -> f el) oar)\n        }\n\n    let Empty e =\n        {\n            DynElem = e\n            DynFlags = AttrFlags.Defaults\n            DynNodes = [||]\n            OnAfterRender = None\n        }\n\n    let Updates dyn =\n        dyn.DynNodes\n        |> Array.MapTreeReduce (fun x -> x.Changed) (View.Const ()) View.Map2Unit\n\n    let GetAnim dyn f =\n        dyn.DynNodes\n        |> Array.map (fun n -> f n dyn.DynElem)\n        |> Anim.Concat\n\n    let GetEnterAnim dyn =\n        GetAnim dyn (fun n -> n.GetEnterAnim)\n\n    let GetExitAnim dyn =\n        GetAnim dyn (fun n -> n.GetExitAnim)\n\n    let GetChangeAnim dyn =\n        GetAnim dyn (fun n -> n.GetChangeAnim)\n\n    [<Inline>]\n    let GetOnAfterRender dyn =\n        dyn.OnAfterRender\n\n    let AppendTree a b =\n        // work around WS issue with UseNullAsTrueValue\n        if obj.ReferenceEquals(a, null) then b\n        elif obj.ReferenceEquals(b, null) then a\n        else\n        let x = A2 (a, b)\n        SetFlags x (Flags a ||| Flags b)\n        x\n//        match a, b with\n//        | A0, x | x, A0 -> x\n//        | _ -> A2 (a, b)\n\n    let internal EmptyAttr = A0\n\n    let internal Animated tr view set =\n        let node = AnimatedAttrNode (tr, view, set)\n        let mutable flags = AttrFlags.HasChangeAnim\n        if Trans.CanAnimateEnter tr then\n            flags <- flags ||| AttrFlags.HasEnterAnim\n        if Trans.CanAnimateExit tr then\n            flags <- flags ||| AttrFlags.HasExitAnim\n        let n = A1 node\n        SetFlags n flags\n        n\n\n    let internal Dynamic view set =\n        A1 (DynamicAttrNode (view, set))\n\n    let internal Static attr =\n        A3 attr\n\n\n[<JavaScript>]\ntype AttrProxy with\n\n    static member Create name value =\n        As<Attr> (Attrs.Static (fun el -> DU.SetAttr el name value))\n\n    static member Append (a: Attr) (b: Attr) =\n        As<Attr> (Attrs.AppendTree (As a) (As b))\n\n    [<Inline>]\n    static member Empty =\n        As<Attr> Attrs.EmptyAttr\n\n    static member Concat (xs: seq<Attr>) =\n        Array.ofSeqNonCopying xs\n        |> Array.TreeReduce Attr.Empty Attr.Append\n\n    static member OnAfterRenderImpl(q: Expr<Dom.Element -> unit>) =\n        As<Attr> (A4 (As q))\n\n    static member HandlerImpl(event: string, q: Expr<Dom.Element -> #Dom.Event-> unit>) =\n        As<Attr> (Attrs.Static (fun el -> el.AddEventListener(event, (As<Dom.Element -> Dom.Event -> unit> q) el, false)))\n\n    static member Handler (event: string) (q: Expr<Dom.Element -> #Dom.Event-> unit>) =\n        AttrProxy.HandlerImpl(event, q)\n\n[<JavaScript; Name \"WebSharper.UI.CheckedInput\">]\ntype CheckedInput<'T> =\n    | Valid of value: 'T * inputText: string\n    | Invalid of inputText: string\n    | Blank of inputText: string\n\n    static member Make(x: 'T) =\n        Valid (x, x.ToString())\n\n    member this.Input =\n        match this with\n        | Valid (_, x)\n        | Invalid x\n        | Blank x -> x\n\n[<JavaScript; Name \"WebSharper.UI.AttrModule\">]\nmodule Attr =\n\n    [<JavaScript; Macro(typeof<Macros.AttrStyle>)>]\n    let Style name value =\n        As<Attr> (Attrs.Static (fun el -> DU.SetStyle el name value))\n\n    let Animated name tr view attr =\n        As<Attr> (Attrs.Animated tr view (fun el v -> DU.SetAttr el name (attr v)))\n\n    let AnimatedStyle name tr view attr =\n        As<Attr> (Attrs.Animated tr view (fun el v -> DU.SetStyle el name (attr v)))\n\n    let Dynamic name view =\n        As<Attr> (Attrs.Dynamic view (fun el v -> DU.SetAttr el name v))\n\n    let DynamicCustom set view =\n        As<Attr> (Attrs.Dynamic view set)\n\n    let DynamicStyle name view =\n        As<Attr> (Attrs.Dynamic view (fun el v -> DU.SetStyle el name v))\n\n    let Handler name (callback: Dom.Element -> #Dom.Event -> unit) =\n        As<Attr> (Attrs.Static (fun el -> el.AddEventListener(name, As<Dom.Event -> unit> (callback el), false)))\n\n    let HandlerView name (view: View<'T>) (callback: Dom.Element -> #Dom.Event -> 'T -> unit) =\n        let init (el: Dom.Element) =\n            let callback = callback el\n            el.AddEventListener(name, (fun (ev: Dom.Event) -> View.Get (callback (As ev)) view), false)\n        As<Attr> (Attrs.Static init)\n\n    let OnAfterRender (callback: Dom.Element -> unit) =\n        As<Attr> (A4 callback)\n\n    let OnAfterRenderView (v: View<'T>) (callback: Dom.Element -> 'T -> unit) =\n        let id = Fresh.Id()\n        Attr.Append\n            (OnAfterRender (fun el -> callback el el?(id)))\n            (DynamicCustom (fun el x -> el?(id) <- x) v)\n\n    let DynamicClassPred name view =\n        As<Attr> (Attrs.Dynamic view (fun el v ->\n            if v then DU.AddClass el name else DU.RemoveClass el name))\n\n    [<JavaScript; Macro(typeof<Macros.AttrClass>)>]\n    let ClassPred name isSet =\n        As<Attr> (Attrs.Static (fun el ->\n            if isSet then DU.AddClass el name else DU.RemoveClass el name))\n\n    let Class name = ClassPred name true\n\n    let DynamicClass name view ok =\n        DynamicClassPred name (View.Map ok view)\n\n    let DynamicPred name predView valView =\n        let viewFn el (p, v) =\n            if p then\n                DU.SetAttr el name v\n            else\n                DU.RemoveAttr el name\n        let tupleView = View.Map2 (fun pred value -> (pred, value)) predView valView\n        As<Attr> (Attrs.Dynamic tupleView viewFn)\n\n    let DynamicProp name view =\n        As<Attr> (Attrs.Dynamic view (fun el v ->\n            el?(name) <- v))\n\n    let CustomVar (var: Var<'a>) (set: Dom.Element -> 'a -> unit) (get: Dom.Element -> 'a option) =\n        let onChange (el: Dom.Element) (e: Dom.Event) =\n            var.UpdateMaybe(fun v ->\n                match get el with\n                | Some x as o when x <> v -> o\n                | _ -> None)\n        let set e v =\n            match get e with\n            | Some x when x = v -> ()\n            | _ -> set e v\n        Attr.Concat [\n            Handler \"change\" onChange\n            Handler \"input\" onChange\n            Handler \"keypress\" onChange\n            DynamicCustom set var.View\n        ]\n\n    let CustomValue (var: Var<'a>) (toString : 'a -> string) (fromString : string -> 'a option) =\n        CustomVar var (fun e v -> e?value <- toString v) (fun e -> fromString e?value)\n\n    let ContentEditableText (var: Var<string>) =\n        CustomVar var (fun e v -> e.TextContent <- v) (fun e -> Some e.TextContent)\n        |> Attr.Append (Attr.Create \"contenteditable\" \"true\")\n\n    let ContentEditableHtml (var: Var<string>) =\n        CustomVar var (fun e v -> e?innerHTML <- v) (fun e -> Some e?innerHTML)\n        |> Attr.Append (Attr.Create \"contenteditable\" \"true\")\n\n    let Value (var: Var<string>) =\n        CustomValue var id (id >> Some)\n\n    [<JavaScript; Inline \"$e.checkValidity?$e.checkValidity():true\">]\n    let CheckValidity (e: Dom.Element) = X<bool>\n\n    let IntValueUnchecked (var: Var<int>) =\n        let parseInt (s: string) =\n            if String.isBlank s then Some 0 else\n            let pd : int = JS.Plus s\n            if pd !==. (pd >>. 0) then None else Some pd\n        CustomValue var string parseInt\n\n    let IntValue (var: Var<CheckedInput<int>>) =\n        let parseCheckedInt (el: Dom.Element) : option<CheckedInput<int>> =\n            let s = el?value\n            if String.isBlank s then\n                if CheckValidity el then Blank s else Invalid s\n            else\n                match System.Int32.TryParse(s) with\n                | true, i -> Valid (i, s)\n                | false, _ -> Invalid s\n            |> Some\n        CustomVar var\n            (fun el i ->\n                let i = i.Input\n                if el?value <> i then el?value <- i)\n            parseCheckedInt\n\n    let FloatValueUnchecked (var: Var<float>) =\n        let parseFloat (s: string) =\n            if String.isBlank s then Some 0. else\n            let pd : float = JS.Plus s\n            if JS.IsNaN pd then None else Some pd\n        CustomValue var string parseFloat\n\n    let FloatValue (var: Var<CheckedInput<float>>) =\n        let parseCheckedFloat (el: Dom.Element) : option<CheckedInput<float>> =\n            let s = el?value\n            if String.isBlank s then\n                if CheckValidity el then Blank s else Invalid s\n            else\n                let i = JS.Plus s\n                if JS.IsNaN i then Invalid s else Valid (i, s)\n            |> Some\n        CustomVar var\n            (fun el i ->\n                let i = i.Input\n                if el?value <> i then el?value <- i)\n            parseCheckedFloat\n\n    let Checked (var: Var<bool>) =\n        let onSet (el: Dom.Element) (ev: Dom.Event) =\n            if var.Value <> el?``checked`` then\n                var.Value <- el?``checked``\n        Attr.Concat [\n            DynamicProp \"checked\" var.View\n            Handler \"change\" onSet\n        ]\n\n    let ValidateForm () =\n        OnAfterRender Resources.H5F.Setup\n\n[<assembly:System.Reflection.AssemblyVersionAttribute(\"4.0.0.0\")>]\ndo()\n", "namespace WebSharper.UI.Client\n\n#nowarn \"44\" // HTML deprecated\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\n\nmodule DU = DomUtility\ntype private A = Attr\n\n[<JavaScript>]\nmodule Settings =\n    let mutable BatchUpdatesEnabled = true\n\n[<JavaScript>]\ntype internal DocNode =\n    | AppendDoc of DocNode * DocNode\n    | ElemDoc of DocElemNode\n    | EmbedDoc of DocEmbedNode\n    | [<Constant(null)>] EmptyDoc\n    | TextDoc of DocTextNode\n    | TextNodeDoc of Dom.Text\n    | TreeDoc of DocTreeNode\n\nand [<CustomEquality>]\n    [<JavaScript>]\n    [<NoComparison>]\n    [<Name \"WebSharper.UI.DocElemNode\">]\n    internal DocElemNode =\n    {\n        Attr : Attrs.Dyn\n        mutable Children : DocNode\n        [<OptionalField>]\n        Delimiters : (Dom.Node * Dom.Node) option\n        El : Dom.Element\n        ElKey : int\n        [<OptionalField>]\n        mutable Render : option<Dom.Element -> unit>\n    }\n\n    override this.Equals(o: obj) =\n        this.ElKey = (o :?> DocElemNode).ElKey\n\n    override this.GetHashCode() =\n        this.ElKey\n\nand internal DocEmbedNode =\n    {\n        mutable Current : DocNode\n        mutable Dirty : bool\n    }\n\nand internal DocTextNode =\n    {\n        Text : Dom.Text\n        mutable Dirty : bool\n        mutable Value : string\n    }\n\nand internal DocTreeNode =\n    {\n        mutable Els : Union<Dom.Node, DocNode>[]\n        mutable Dirty : bool\n        mutable Holes : DocElemNode[]\n        Attrs : (Dom.Element * Attrs.Dyn)[]\n        [<OptionalField>]\n        mutable Render : option<Dom.Element -> unit>\n        [<OptionalField>]\n        El : option<Dom.Element>\n    }\n\ntype EltUpdater =\n    inherit Elt\n\n    member this.AddUpdated(doc: Elt) = ()\n    member this.RemoveUpdated(doc: Elt) = ()\n    member this.RemoveAllUpdated() = ()\n\n[<JavaScript; Name \"WebSharper.UI.Docs\">]\nmodule internal Docs =\n\n    /// Sets of DOM nodes.\n    type DomNodes =\n        | DomNodes of Dom.Node[]\n\n        /// Actual chidlren of an element.\n        static member Children (elem: Dom.Element) (delims: option<Dom.Node * Dom.Node>) =\n            match delims with\n            | None ->\n                DomNodes (Array.init elem.ChildNodes.Length elem.ChildNodes.Item)\n            | Some (ldelim, rdelim) ->\n                let a = Array<_>()\n                let mutable n = ldelim.NextSibling\n                while n !==. rdelim do\n                    a.Push(n) |> ignore\n                    n <- n.NextSibling\n                DomNodes (As a)\n\n        /// Shallow children of an element node.\n        static member DocChildren node =\n            let q = Queue()\n            let rec loop doc =\n                match doc with\n                | AppendDoc (a, b) -> loop a; loop b\n                | EmbedDoc d -> loop d.Current\n                | ElemDoc e -> q.Enqueue (e.El :> Dom.Node)\n                | EmptyDoc -> ()\n                | TextNodeDoc tn -> q.Enqueue (tn :> Dom.Node)\n                | TextDoc t -> q.Enqueue (t.Text :> Dom.Node)\n                | TreeDoc t ->\n                    t.Els |> Array.iter (function\n                        | Union1Of2 e -> q.Enqueue e\n                        | Union2Of2 n -> loop n\n                    )\n            loop node.Children\n            DomNodes (Array.ofSeqNonCopying q)\n\n        /// Set difference - currently only using equality O(N^2).\n        /// Can do better? Can store <hash> data on every node?\n        static member Except (DomNodes excluded) (DomNodes included) =\n            included\n            |> Array.filter (fun n ->\n                excluded\n                |> Array.forall (fun k -> not (n ===. k)))\n            |> DomNodes\n\n        /// Iteration.\n        static member Iter f (DomNodes ns) =\n            Array.iter f ns\n\n        /// Iteration.\n        static member FoldBack f (DomNodes ns) z =\n            Array.foldBack f ns z\n\n    /// Inserts a node at position.\n    let InsertNode parent node pos =\n        DU.InsertAt parent pos node\n        DU.BeforeNode node\n\n    /// Inserts a doc at position.\n    let rec InsertDoc parent doc pos =\n        match doc with\n        | AppendDoc (a, b) -> InsertDoc parent a (InsertDoc parent b pos)\n        | ElemDoc e -> InsertNode parent e.El pos\n        | EmbedDoc d -> d.Dirty <- false; InsertDoc parent d.Current pos\n        | EmptyDoc -> pos\n        | TextDoc t -> InsertNode parent t.Text pos\n        | TextNodeDoc t -> InsertNode parent t pos\n        | TreeDoc t ->\n            Array.foldBack (fun el pos ->\n                match el with\n                | Union1Of2 e -> InsertNode parent e pos\n                | Union2Of2 n -> InsertDoc parent n pos\n            ) t.Els pos\n\n    /// Synchronizes an element with its children (shallow).\n    let DoSyncElement (el : DocElemNode) =\n        let parent = el.El\n        let rec ins doc pos =\n            match doc with\n            | AppendDoc (a, b) -> ins a (ins b pos)\n            | ElemDoc e -> DU.BeforeNode e.El\n            | EmbedDoc d ->\n                if d.Dirty then\n                    d.Dirty <- false\n                    InsertDoc parent d.Current pos\n                else\n                    ins d.Current pos\n            | EmptyDoc -> pos\n            | TextDoc t -> DU.BeforeNode t.Text\n            | TextNodeDoc t -> DU.BeforeNode t\n            | TreeDoc t ->\n                if t.Dirty then t.Dirty <- false\n                Array.foldBack (fun el pos ->\n                    match el with\n                    | Union1Of2 e -> DU.BeforeNode e\n                    | Union2Of2 n -> ins n pos\n                ) t.Els pos\n        let ch = DomNodes.DocChildren el\n        // remove children that are not in the current set\n        DomNodes.Children el.El el.Delimiters\n        |> DomNodes.Except ch\n        |> DomNodes.Iter (DU.RemoveNode el.El)\n        // insert current children\n        let pos =\n            match el.Delimiters with\n            | None -> DU.AtEnd\n            | Some (_, rdelim) -> DU.BeforeNode rdelim\n        ins el.Children pos |> ignore\n\n    /// Optimized version of DoSyncElement.\n    let SyncElement (el: DocElemNode) =\n        /// Test if any children have changed.\n        let rec hasDirtyChildren el =\n            let rec dirty doc =\n                match doc with\n                | AppendDoc (a, b) -> dirty a || dirty b\n                | EmbedDoc d -> d.Dirty || dirty d.Current\n                | TreeDoc t -> t.Dirty || Array.exists hasDirtyChildren t.Holes\n                | _ -> false\n            dirty el.Children\n        Attrs.Sync el.El el.Attr\n        if hasDirtyChildren el then\n            DoSyncElement el\n\n    /// Links an element to children by inserting them.\n    let LinkElement el children =\n        InsertDoc el children DU.AtEnd |> ignore\n\n    /// Links an element to previous siblings by inserting them.\n    let LinkPrevElement (el: Dom.Node) children =\n        InsertDoc (el.ParentNode :?> _) children (DU.BeforeNode el) |> ignore\n\n    let InsertBeforeDelim (afterDelim: Dom.Node) (doc: DocNode) =\n        let p = afterDelim.ParentNode\n        let before = JS.Document.CreateTextNode(\"\") :> Dom.Node\n        p.InsertBefore(before, afterDelim) |> ignore\n        LinkPrevElement afterDelim doc\n        before\n\n    /// Invokes and clears an element's afterRender callback(s).\n    let AfterRender (el: DocElemNode) =\n        match el.Render with\n        | None -> ()\n        | Some f -> f el.El; el.Render <- None\n\n    /// Synchronizes the document (deep).\n    let rec Sync doc =\n        match doc with\n        | AppendDoc (a, b) -> Sync a; Sync b\n        | ElemDoc el -> SyncElemNode false el\n        | EmbedDoc n -> Sync n.Current\n        | EmptyDoc\n        | TextNodeDoc _ -> ()\n        | TextDoc d ->\n            if d.Dirty then\n                d.Text.NodeValue <- d.Value\n                d.Dirty <- false\n        | TreeDoc t ->\n            Array.iter (SyncElemNode false) t.Holes\n            Array.iter (fun (e, a) -> Attrs.Sync e a) t.Attrs\n            AfterRender (As t)\n\n    /// Synchronizes an element node (deep).\n    and SyncElemNode childrenOnly el =\n        if not childrenOnly then\n            SyncElement el\n        Sync el.Children\n        AfterRender el\n\n    /// A set of node element nodes.\n    type NodeSet =\n        | NodeSet of HashSet<DocElemNode>\n\n        /// Filters out only nodes that have on-remove animations.\n        static member Filter f (NodeSet set) =\n            NodeSet (HashSet.Filter f set)\n\n        /// Finds all node elements in a tree.\n        static member FindAll doc =\n            let q = Queue()\n            let rec loop node =\n                match node with\n                | AppendDoc (a, b) -> loop a; loop b\n                | ElemDoc el -> loopEN el\n                | EmbedDoc em -> loop em.Current\n                | TreeDoc t -> t.Holes |> Array.iter loopEN\n                | _ -> ()\n            and loopEN el =\n                q.Enqueue el\n                loop el.Children\n            loop doc\n            NodeSet (HashSet q)\n\n        /// Set difference.\n        static member Except (NodeSet excluded) (NodeSet included) =\n            NodeSet (included |> HashSet.Except excluded)\n\n        /// Set intersection.\n        static member Intersect (NodeSet a) (NodeSet b) =\n            NodeSet (HashSet.Intersect a b)\n\n        /// Checks if empty.\n        static member IsEmpty (NodeSet ns) =\n            ns.Count = 0\n\n        /// The empty set.\n        static member Empty =\n            NodeSet (HashSet ())\n\n        /// Converts to array.\n        static member ToArray (NodeSet ns) =\n            HashSet.ToArray ns\n\n    /// State of the Doc.Run (updator) proces.\n    type RunState =\n        {\n            mutable PreviousNodes : NodeSet\n            Top : DocElemNode\n        }\n\n    /// Creates an element node.\n    let CreateElemNode el attr children =\n        LinkElement el children\n        let attr = Attrs.Insert el attr\n        {\n            Attr = attr\n            Children = children\n            Delimiters = None\n            El = el\n            ElKey = Fresh.Int ()\n            Render = Attrs.GetOnAfterRender attr\n        }\n\n    /// Creates an element node that handles a delimited subset of its children.\n    let CreateDelimitedElemNode (ldelim: Dom.Node) (rdelim: Dom.Node) attr children =\n        let el = ldelim.ParentNode :?> Dom.Element\n        LinkPrevElement rdelim children\n        let attr = Attrs.Insert el attr\n        {\n            Attr = attr\n            Children = children\n            Delimiters = Some (ldelim, rdelim)\n            El = el\n            ElKey = Fresh.Int ()\n            Render = Attrs.GetOnAfterRender attr\n        }\n\n    /// Creates a new RunState.\n    let CreateRunState parent doc =\n        {\n            PreviousNodes = NodeSet.Empty\n            Top = CreateElemNode parent Attr.Empty doc\n        }\n\n    /// Creates a new RunState for a delimited subset of the children of a node.\n    let CreateDelimitedRunState ldelim rdelim doc =\n        {\n            PreviousNodes = NodeSet.Empty\n            Top = CreateDelimitedElemNode ldelim rdelim Attr.Empty doc\n        }\n\n    /// Computes the animation of nodes that animate removal.\n    let ComputeExitAnim st cur =\n        st.PreviousNodes\n        |> NodeSet.Filter (fun n -> Attrs.HasExitAnim n.Attr)\n        |> NodeSet.Except cur\n        |> NodeSet.ToArray\n        |> Array.map (fun n -> Attrs.GetExitAnim n.Attr)\n        |> Anim.Concat\n\n    /// Computes the animation for changed nodes.\n    let ComputeChangeAnim st cur =\n        let relevant = NodeSet.Filter (fun n -> Attrs.HasChangeAnim n.Attr)\n        NodeSet.Intersect (relevant st.PreviousNodes) (relevant cur)\n        |> NodeSet.ToArray\n        |> Array.map (fun n -> Attrs.GetChangeAnim n.Attr)\n        |> Anim.Concat\n\n    /// Computes the animation for entering nodes.\n    let ComputeEnterAnim st cur =\n        cur\n        |> NodeSet.Filter (fun n -> Attrs.HasEnterAnim n.Attr)\n        |> NodeSet.Except st.PreviousNodes\n        |> NodeSet.ToArray\n        |> Array.map (fun n -> Attrs.GetEnterAnim n.Attr)\n        |> Anim.Concat\n\n    let SyncElemNodesNextFrame childrenOnly st =\n        if Settings.BatchUpdatesEnabled then\n            Async.FromContinuations <| fun (ok, _, _) ->\n                JS.RequestAnimationFrame (fun _ ->\n                    SyncElemNode childrenOnly st.Top\n                    ok()\n                ) |> ignore\n        else\n            async.Return(SyncElemNode childrenOnly st.Top)\n\n    /// The main function: how to perform an animated top-level document update.\n    let PerformAnimatedUpdate childrenOnly st doc =\n        if Anim.UseAnimations then\n            async {\n                let cur = NodeSet.FindAll doc\n                let change = ComputeChangeAnim st cur\n                let enter = ComputeEnterAnim st cur\n                let exit = ComputeExitAnim st cur\n                do! Anim.Play (Anim.Append change exit)\n                do! SyncElemNodesNextFrame childrenOnly st\n                do! Anim.Play enter\n                return st.PreviousNodes <- cur\n            }\n        else\n            SyncElemNodesNextFrame childrenOnly st\n\n    let PerformSyncUpdate childrenOnly st doc =\n        let cur = NodeSet.FindAll doc\n        SyncElemNode childrenOnly st.Top\n        st.PreviousNodes <- cur\n\n    /// EmbedNode constructor.\n    let CreateEmbedNode () =\n        {\n            Current = EmptyDoc\n            Dirty = false\n        }\n\n    /// EmbedNode update (marks dirty).\n    let UpdateEmbedNode node upd =\n        node.Current <- upd\n        node.Dirty <- true\n\n    /// Text node constructor.\n    let CreateTextNode () =\n        {\n            Dirty = false\n            Text = DU.CreateText \"\"\n            Value = \"\"\n        }\n\n    /// Text node update (marks dirty).\n    let UpdateTextNode n t =\n        n.Value <- t\n        n.Dirty <- true\n\n// We implement the Doc interface, the Doc module proxy and the Client.Doc module proxy\n// all in this so that it all neatly looks like Doc.* in javascript.\n[<Name \"WebSharper.UI.Doc\"; Proxy(typeof<Doc>)>]\ntype internal Doc' [<JavaScript>] (docNode, updates) =\n\n    [<JavaScript; Inline>]\n    member this.DocNode = docNode\n    [<JavaScript; Inline>]\n    member this.Updates = updates\n\n    interface IControlBody with\n\n        [<JavaScript>]\n        member this.ReplaceInDom(elt) =\n            // Insert empty text nodes that will serve as delimiters for the Doc.\n            let rdelim = JS.Document.CreateTextNode \"\"\n            elt.ParentNode.ReplaceChild(rdelim, elt) |> ignore\n            Doc'.RunBefore rdelim this\n\n    [<JavaScript>]\n    static member Mk node updates =\n        Doc'(node, updates)\n\n    [<JavaScript>]\n    static member Append (a: Doc') (b: Doc') =\n        (a.Updates, b.Updates)\n        ||> View.Map2Unit\n        |> Doc'.Mk (AppendDoc (a.DocNode, b.DocNode))\n\n    [<JavaScript>]\n    static member Concat xs =\n        Array.ofSeqNonCopying xs\n        |> Array.TreeReduce Doc'.Empty Doc'.Append\n\n    [<JavaScript>]\n    static member Empty\n        with get () =\n            Doc'.Mk EmptyDoc (View.Const ())\n\n    [<JavaScript; Inline>]\n    static member Elem el attr (children: Doc') =\n        Elt'.New(el, attr, children)\n\n    [<JavaScript>]\n    static member TextNode v =\n        Doc'.Mk (TextNodeDoc (DU.CreateText v)) (View.Const ())\n\n    [<JavaScript>]\n    static member StaticProxy el : Elt' =\n        Doc'.Elem el Attr.Empty Doc'.Empty\n\n    [<JavaScript; Inline>]\n    static member Static el : Elt = As (Doc'.StaticProxy el)\n\n    [<JavaScript>]\n    static member Verbatim html =\n        let a =\n            match JQuery.JQuery.ParseHTML html with\n            | null -> [||]\n            | a -> a\n        let elem (n: Dom.Node) =\n            if n.NodeType = Dom.NodeType.Text then\n                TextNodeDoc (n :?> Dom.Text)\n            else\n                ElemDoc (Docs.CreateElemNode (n :?> Dom.Element) Attr.Empty EmptyDoc)\n        let append x y = AppendDoc (x, y)\n        let es = Array.MapTreeReduce elem EmptyDoc append a\n        Doc'.Mk es (View.Const ())\n\n    [<JavaScript>]\n    static member EmbedView (view: View<Doc'>) =\n        let node = Docs.CreateEmbedNode ()\n        view\n        |> View.Bind (fun doc ->\n            Docs.UpdateEmbedNode node doc.DocNode\n            doc.Updates)\n        |> View.Map ignore\n        |> Doc'.Mk (EmbedDoc node)\n\n    [<JavaScript>]\n    static member BindView (f: 'T -> Doc') (view: View<'T>) =\n        Doc'.EmbedView (View.Map f view)\n\n    [<JavaScript>]\n    static member Async (a: Async<Doc'>) : Doc' =\n        View.Const a\n        |> View.MapAsync id\n        |> Doc'.EmbedView\n\n    [<JavaScript>]\n    static member RunBetween ldelim rdelim (doc: Doc') =\n        Docs.LinkPrevElement rdelim doc.DocNode\n        let st = Docs.CreateDelimitedRunState ldelim rdelim doc.DocNode\n        let p =\n            if Anim.UseAnimations || Settings.BatchUpdatesEnabled then\n                Mailbox.StartProcessor (Docs.PerformAnimatedUpdate false st doc.DocNode)\n            else\n                fun () -> Docs.PerformSyncUpdate false st doc.DocNode\n        View.Sink p doc.Updates\n\n    [<JavaScript>]\n    static member RunBefore (rdelim: Dom.Node) (doc: Doc') =\n        let ldelim = JS.Document.CreateTextNode(\"\")\n        rdelim.ParentNode.InsertBefore(ldelim, rdelim) |> ignore\n        Doc'.RunBetween ldelim rdelim doc\n\n    [<JavaScript>]\n    static member RunBeforeById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunBefore el doc\n\n    [<JavaScript>]\n    static member RunAfter (ldelim : Dom.Node) (doc: Doc') =\n        let rdelim = JS.Document.CreateTextNode(\"\")\n        ldelim.ParentNode.InsertBefore(rdelim, ldelim.NextSibling) |> ignore\n        Doc'.RunBetween ldelim rdelim doc\n\n    [<JavaScript>]\n    static member RunAfterById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunAfter el doc\n\n    [<JavaScript>]\n    static member RunAppend (parent: Dom.Element) (doc: Doc') =\n        let rdelim = JS.Document.CreateTextNode \"\"\n        parent.AppendChild(rdelim) |> ignore\n        Doc'.RunBefore rdelim doc\n\n    [<JavaScript>]\n    static member RunAppendById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunAppend el doc\n\n    [<JavaScript>]\n    static member RunPrepend (parent: Dom.Element) (doc: Doc') =\n        let rdelim = JS.Document.CreateTextNode \"\"\n        parent.InsertBefore(rdelim, parent.FirstChild) |> ignore\n        Doc'.RunBefore rdelim doc\n\n    [<JavaScript>]\n    static member RunPrependById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunPrepend el doc\n\n    [<JavaScript>]\n    static member RunInPlace childrenOnly parent (doc: Doc') =\n        let d = doc.DocNode\n        let st = Docs.CreateRunState parent d\n        let p =\n            if Anim.UseAnimations || Settings.BatchUpdatesEnabled then\n                Mailbox.StartProcessor (Docs.PerformAnimatedUpdate childrenOnly st doc.DocNode)\n            else\n                fun () -> Docs.PerformSyncUpdate childrenOnly st doc.DocNode\n        View.Sink p doc.Updates\n\n    [<JavaScript>]\n    static member Run parent (doc: Doc') =\n        Docs.LinkElement parent doc.DocNode\n        Doc'.RunInPlace false parent doc\n\n    [<JavaScript>]\n    static member RunById id tr =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.Run el tr\n\n    [<JavaScript>]\n    static member RunReplaceById id (tr: Doc') =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> (tr :> IControlBody).ReplaceInDom(el)\n\n    [<JavaScript>]\n    static member TextView txt =\n        let node = Docs.CreateTextNode ()\n        txt\n        |> View.Map (Docs.UpdateTextNode node)\n        |> Doc'.Mk (TextDoc node)\n\n    [<JavaScript>]\n    static member Flatten view =\n        view\n        |> View.Map Doc'.Concat\n        |> Doc'.EmbedView\n\n    [<JavaScript>]\n    static member Convert render view =\n        View.MapSeqCached render view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertBy key render view =\n        View.MapSeqCachedBy key render view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertSeq render view =\n        View.MapSeqCachedView render view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertSeqBy key render view =\n        View.MapSeqCachedViewBy key (As render) view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertSeqVarBy key render var =\n        Var.MapLens key (As render) var |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member InputInternal elemTy attr =\n        let el = DU.CreateElement elemTy\n        Doc'.Elem el (Attr.Concat (attr el)) Doc'.Empty\n\n    [<JavaScript>]\n    static member Input attr (var: Var<string>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [| Attr.Value var |])\n\n    [<JavaScript>]\n    static member PasswordBox attr (var: Var<string>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [|\n                Attr.Value var\n                Attr.Create \"type\" \"password\"\n            |])\n\n    [<JavaScript>]\n    static member IntInputUnchecked attr (var: Var<int>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [|\n                (if var.Get() = 0 then Attr.Create \"value\" \"0\" else Attr.Empty)\n                Attr.IntValueUnchecked var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member IntInput attr (var: Var<CheckedInput<int>>) =\n        Doc'.InputInternal \"input\" (fun el ->\n            Seq.append attr [|\n                Attr.IntValue var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member FloatInputUnchecked attr (var: Var<float>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [|\n                (if var.Get() = 0. then Attr.Create \"value\" \"0\" else Attr.Empty)\n                Attr.FloatValueUnchecked var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member FloatInput attr (var: Var<CheckedInput<float>>) =\n        Doc'.InputInternal \"input\" (fun el ->\n            Seq.append attr [|\n                Attr.FloatValue var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member InputArea attr (var: Var<string>) =\n        Doc'.InputInternal \"textarea\" (fun _ ->\n            Seq.append attr [| Attr.Value var |])\n\n    [<JavaScript>]\n    static member SelectImpl attrs (show: 'T -> string) (optionElements) (current: Var<'T>) =\n        let options = ref []\n        let getIndex (el: Dom.Element) =\n            el?selectedIndex : int\n        let setIndex (el: Dom.Element) (i: int) =\n            el?selectedIndex <- i\n        let getSelectedItem el =\n            let i = getIndex el\n            (!options).[i]\n        let itemIndex x =\n            List.findIndex ((=) x) !options\n        let setSelectedItem (el: Dom.Element) item =\n            setIndex el (itemIndex item)\n        let el = DU.CreateElement \"select\"\n        let selectedItemAttr =\n            current.View\n            |> Attr.DynamicCustom setSelectedItem\n        let onChange (x: Dom.Event) =\n            current.UpdateMaybe(fun x ->\n                let y = getSelectedItem el\n                if x = y then None else Some y\n            )\n        el.AddEventListener(\"change\", onChange, false)\n        let attrs =\n            Attr.Concat attrs\n            |> Attr.Append selectedItemAttr\n            |> Attr.Append (Attr.OnAfterRender (fun el -> \n                setSelectedItem el <| current.Get()))\n        Doc'.Elem el attrs (optionElements options)\n\n    [<JavaScript>]\n    static member SelectDyn attrs (show: 'T -> string) (vOptions: View<list<'T>>) (current: Var<'T>) =\n        let optionElements options =\n            vOptions\n            |> View.Map (fun l ->\n                options := l\n                l |> Seq.mapi (fun i x -> i, x)\n            )\n            |> Doc'.Convert (fun (i, o) ->\n                Doc'.Element \"option\" [\n                    Attr.Create \"value\" (string i)\n                ] [Doc'.TextNode (show o)]\n                :> Doc'\n            )\n        Doc'.SelectImpl attrs show optionElements current\n\n    [<JavaScript>]\n    static member Select attrs show options current =\n        let optionElements rOptions =\n            rOptions := options\n            options\n            |> List.mapi (fun i o ->\n                Doc'.Element \"option\" [\n                    Attr.Create \"value\" (string i)\n                ] [Doc'.TextNode (show o)]\n                :> Doc'\n            )\n            |> Doc'.Concat\n        Doc'.SelectImpl attrs show optionElements current\n\n    [<JavaScript>]\n    static member SelectOptional attrs noneText show options current =\n        Doc'.Select attrs\n            (function None -> noneText | Some x -> show x)\n            (None :: List.map Some options)\n            current\n\n    [<JavaScript>]\n    static member SelectDynOptional attrs noneText show vOptions current =\n        Doc'.SelectDyn attrs\n            (function None -> noneText | Some x -> show x)\n            (vOptions |> View.Map (fun options -> None :: List.map Some options))\n            current\n\n    [<JavaScript>]\n    static member CheckBox attrs (chk: Var<bool>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attrs [\n                Attr.Create \"type\" \"checkbox\"\n                Attr.Checked chk\n            ])\n\n    [<JavaScript>]\n    static member CheckBoxGroup attrs (item: 'T) (chk: Var<list<'T>>) =\n        let rv =\n            chk.Lens\n                (List.exists ((=) item))\n                (fun l b ->\n                    if b then\n                        if List.exists ((=) item) l then l else item :: l\n                    else\n                        List.filter ((<>) item) l\n                )\n        Doc'.CheckBox attrs rv\n\n    [<JavaScript>]\n    static member Clickable elem action =\n        let el = DU.CreateElement elem\n        el.AddEventListener(\"click\", (fun (ev: Dom.Event) ->\n            ev.PreventDefault()\n            action ()), false)\n        el\n\n    [<JavaScript>]\n    static member Button caption attrs action =\n        let attrs = Attr.Concat attrs\n        let el = Doc'.Clickable \"button\" action\n        Doc'.Elem el attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member ButtonView caption attrs view action =\n        let evAttr = Attr.HandlerView \"click\" view (fun _ _ -> action)\n        let attrs = Attr.Concat (Seq.append [|evAttr|] attrs)\n        Doc'.Elem (DU.CreateElement \"button\") attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member Link caption attrs action =\n        let attrs = Attr.Concat attrs |> Attr.Append (Attr.Create \"href\" \"#\")\n        let el = Doc'.Clickable \"a\" action\n        Doc'.Elem el attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member LinkView caption attrs view action =\n        let evAttr = Attr.HandlerView \"click\" view (fun _ _ -> action)\n        let attrs = Attr.Concat (Seq.append [|evAttr; Attr.Create \"href\" \"#\"|] attrs)\n        Doc'.Elem (DU.CreateElement \"a\") attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member Radio attrs value (var: Var<_>) =\n        // Radio buttons work by taking a common var, which is given a unique ID.\n        // This ID is serialised and used as the name, giving us the \"grouping\"\n        // behaviour.\n        let el = DU.CreateElement \"input\"\n        el.AddEventListener(\"click\", (fun (x : Dom.Event) -> var.Set value), false)\n        let predView = View.Map (fun x -> x = value) var.View\n        let valAttr = Attr.DynamicProp \"checked\" predView\n        let (==>) k v = Attr.Create k v\n        let attr =\n            [\n                \"type\" ==> \"radio\"\n                \"name\" ==> var.Id\n                valAttr\n            ] @ (List.ofSeq attrs) |> Attr.Concat\n        Doc'.Elem el attr Doc'.Empty\n\n    // Actual proxy members\n\n    [<JavaScript>]\n    static member Element (name: string) (attr: seq<Attr>) (children: seq<Doc'>) : Elt' =\n        let attr = Attr.Concat attr\n        let children = Doc'.Concat children\n        Doc'.Elem (DU.CreateElement name) attr children\n\n    static member ToMixedDoc (o: obj) =\n        match o with\n        | :? Doc' as d -> d\n        | :? string as t -> Doc'.TextNode t\n        | :? Dom.Element as e -> Doc'.StaticProxy e :> Doc'\n        | :? Function as v ->\n            Doc'.EmbedView ((As<View<_>>v).Map Doc'.ToMixedDoc)\n        | :? Var<obj> as v ->\n            Doc'.EmbedView (v.View.Map Doc'.ToMixedDoc)\n        | null -> Doc'.Empty\n        | o -> Doc'.TextNode (string o)\n\n    static member MixedNodes (nodes: seq<obj>) =\n        let attrs = ResizeArray()\n        let children = ResizeArray()\n        for n in nodes do\n            match n with\n            | :? Attr as a -> attrs.Add a\n            | _ -> children.Add (Doc'.ToMixedDoc n)\n        attrs :> _ seq, children :> _ seq \n\n    static member ConcatMixed (elts: obj[]) =\n        Doc'.Concat (Seq.map Doc'.ToMixedDoc elts)\n\n    [<JavaScript>]\n    static member ElementMixed (tagname: string) (nodes: seq<obj>) =\n        let attrs, children = Doc'.MixedNodes nodes\n        Doc'.Element tagname attrs children \n\n    [<JavaScript>]\n    static member SvgElement (name: string) (attr: seq<Attr>) (children: seq<Doc'>) : Elt' =\n        let attr = Attr.Concat attr\n        let children = Doc'.Concat children\n        Doc'.Elem (DU.CreateSvgElement name) attr children\n\n    [<JavaScript>]\n    static member SvgElementMixed (tagname: string) (nodes: seq<obj>) =\n        let attrs, children = Doc'.MixedNodes nodes\n        Doc'.SvgElement tagname attrs children \n\n    [<JavaScript; Inline>]\n    static member ClientSide (expr: Microsoft.FSharp.Quotations.Expr<#IControlBody>) : Doc' =\n        As expr\n\nand [<JavaScript; Proxy(typeof<Elt>); Name \"WebSharper.UI.Elt\">]\n    internal Elt'(docNode, updates, elt: Dom.Element, rvUpdates: Updates) =\n    inherit Doc'(docNode, updates)\n\n    static member New(el: Dom.Element, attr: Attr, children: Doc') =\n        let node = Docs.CreateElemNode el attr children.DocNode\n        let rvUpdates = Updates.Create children.Updates\n        let attrUpdates = Attrs.Updates node.Attr\n        let updates = View.Map2Unit attrUpdates rvUpdates.View\n        new Elt'(ElemDoc node, updates, el, rvUpdates)\n\n    /// Assumes tree.Els = [| Union1Of2 someDomElement |]\n    static member TreeNode(tree: DocTreeNode, updates) =\n        let rvUpdates = Updates.Create updates\n        let attrUpdates =\n            tree.Attrs\n            |> Array.map (snd >> Attrs.Updates)\n            |> Array.TreeReduce (View.Const ()) View.Map2Unit\n        let updates = View.Map2Unit attrUpdates rvUpdates.View\n        new Elt'(TreeDoc tree, updates, tree.Els.[0].Value1 :?> _, rvUpdates)\n\n    [<Inline \"$0.elt\">]\n    member this.Element = elt\n\n    member this.on (ev: string, cb: Dom.Element -> #Dom.Event -> unit) =\n        elt.AddEventListener(ev, (fun (ev: Dom.Event) -> cb elt (ev :?> _)), false)\n        this\n\n    member this.onView (ev: string, view: View<'T>, cb: Dom.Element -> #Dom.Event -> 'T -> unit) =\n        let cb = cb elt\n        elt.AddEventListener(ev, (fun (ev: Dom.Event) -> View.Get (cb (ev :?> _)) view), false)\n        this\n\n    [<Name \"On\"; Inline>]\n    member this.onExpr (ev: string, cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> #Dom.Event -> unit>) =\n        this.on (ev, As<_ -> _ -> _> cb)\n\n    member this.OnAfterRender' (cb: Dom.Element -> unit) =\n        match docNode with\n        | ElemDoc e ->\n            e.Render <-\n                match e.Render with\n                | None -> Some cb\n                | Some f -> Some (fun el -> f el; cb el)\n        | TreeDoc e ->\n            e.Render <-\n                match e.Render with\n                | None -> Some cb\n                | Some f -> Some (fun el -> f el; cb el)\n        | _ -> failwith \"Invalid docNode in Elt\"\n        this\n\n    member this.OnAfterRender (cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> unit>) =\n        this.OnAfterRender' (As<Dom.Element -> unit> cb)\n\n    member this.OnAfterRenderView (view: View<'T>, cb: Dom.Element -> 'T -> unit) =\n        let id = Fresh.Id()\n        this.AppendDoc(Doc'.BindView (fun x -> this.Element?(id) <- x; Doc'.Empty) view)\n        this.OnAfterRender'(fun e -> cb e e?(id))\n\n    abstract AddHole : DocElemNode -> unit \n    default this.AddHole h = \n        match docNode with\n        | TreeDoc e ->\n            e.Holes.JS.Push h |> ignore\n        | _ -> ()\n\n    abstract ClearHoles : unit -> unit \n    default this.ClearHoles() = \n        match docNode with\n        | TreeDoc e ->\n            e.Holes <- [||]\n        | _ -> ()\n\n    [<Name \"Append\">]\n    member this.AppendDoc(doc: Doc') =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- AppendDoc(e.Children, doc.DocNode)\n            Docs.InsertDoc elt doc.DocNode DU.AtEnd |> ignore\n        | TreeDoc e ->\n            let after = elt.AppendChild(JS.Document.CreateTextNode \"\")\n            let before = Docs.InsertBeforeDelim after doc.DocNode\n            this.AddHole {\n                El = elt\n                Attr = Attrs.Empty elt\n                Children = doc.DocNode\n                Delimiters = Some (before, after)\n                ElKey = Fresh.Int()\n                Render = None\n            } \n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Map2Unit rvUpdates.Value doc.Updates\n\n    [<Name \"Prepend\">]\n    member this.PrependDoc(doc: Doc') =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- AppendDoc(doc.DocNode, e.Children)\n            let pos =\n                match elt.FirstChild with\n                | null -> DU.AtEnd\n                | n -> DU.BeforeNode n\n            Docs.InsertDoc elt doc.DocNode pos |> ignore\n        | TreeDoc e ->\n            let after = elt.InsertBefore(JS.Document.CreateTextNode \"\", elt.FirstChild)\n            let before = Docs.InsertBeforeDelim after doc.DocNode\n            this.AddHole {\n                El = elt\n                Attr = Attrs.Empty elt\n                Children = doc.DocNode\n                Delimiters = Some (before, after)\n                ElKey = Fresh.Int()\n                Render = None\n            }\n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Map2Unit rvUpdates.Value doc.Updates\n\n    [<Name \"Clear\">]\n    member this.Clear'() =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- EmptyDoc\n        | TreeDoc e ->\n            e.Els <- [||]\n            this.ClearHoles()\n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Const()\n        while (elt.HasChildNodes()) do elt.RemoveChild(elt.FirstChild) |> ignore\n\n    [<JavaScript>]\n    member this.ToUpdater() =\n        let docTreeNode : DocTreeNode =\n            match docNode with\n            | ElemDoc e ->\n                {\n                    Els = [| Union1Of2 (upcast elt) |]\n                    Holes = [||]\n                    Attrs = [| elt, e.Attr |]\n                    Render = None\n                    Dirty = true\n                    El = Some elt\n                }\n            | TreeDoc e -> e\n            | _ -> failwith \"Invalid docNode in Elt\"\n\n        EltUpdater'(docTreeNode, updates, elt, rvUpdates, Var.Create [||])\n\n    [<Name \"Html\">]\n    member this.Html'() : string =\n        elt?outerHTML\n\n    [<Name \"Id\">]\n    member this.Id'() : string =\n        elt?id\n\n    [<Name \"GetValue\">]\n    member this.GetValue() : string =\n        elt?value\n\n    [<Name \"SetValue\">]\n    member this.SetValue(v: string) : unit =\n        elt?value <- v\n\n    [<Name \"GetText\">]\n    member this.GetText() : string =\n        elt.TextContent\n\n    [<Name \"SetText\">]\n    member this.SetText(v: string) : unit =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- EmptyDoc\n        | TreeDoc e ->\n            e.Els <- [||]\n            this.ClearHoles()\n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Const()\n        elt.TextContent <- v\n\n    [<Name \"SetAttribute\">]\n    member this.SetAttribute'(name: string, value: string) =\n        elt.SetAttribute(name, value)\n\n    [<Name \"GetAttribute\">]\n    member this.GetAttribute'(name) =\n        elt.GetAttribute(name)\n\n    [<Name \"HasAttribute\">]\n    member this.HasAttribute'(name) =\n        elt.HasAttribute(name)\n\n    [<Name \"RemoveAttribute\">]\n    member this.RemoveAttribute'(name) =\n        elt.RemoveAttribute(name)\n\n    [<Name \"SetProperty\">]\n    member this.SetProperty'(name: string, value: 'T) =\n        elt?(name) <- value\n\n    [<Name \"GetProperty\">]\n    member this.GetProperty'(name: string) : 'T =\n        elt?(name)\n\n    [<Inline>]\n    member this.AddClass'(cls: string) =\n        DU.AddClass elt cls\n\n    [<Inline>]\n    member this.RemoveClass'(cls: string) =\n        DU.RemoveClass elt cls\n\n    [<Name \"HasClass\">]\n    member this.HasClass'(cls: string) =\n        (new RegExp(@\"(\\s|^)\" + cls + @\"(\\s|$)\")).Test(elt?className)\n\n    [<Name \"SetStyle\">]\n    member this.SetStyle'(style: string, value: string) =\n        elt?style?(style) <- value\n\n    // {{ event\n    [<Inline>]\n    member this.OnAbort(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"abort\", cb)\n    [<Inline>]\n    member this.OnAfterPrint(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"afterprint\", cb)\n    [<Inline>]\n    member this.OnAnimationEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"animationend\", cb)\n    [<Inline>]\n    member this.OnAnimationIteration(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"animationiteration\", cb)\n    [<Inline>]\n    member this.OnAnimationStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"animationstart\", cb)\n    [<Inline>]\n    member this.OnAudioProcess(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"audioprocess\", cb)\n    [<Inline>]\n    member this.OnBeforePrint(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"beforeprint\", cb)\n    [<Inline>]\n    member this.OnBeforeUnload(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"beforeunload\", cb)\n    [<Inline>]\n    member this.OnBeginEvent(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"beginEvent\", cb)\n    [<Inline>]\n    member this.OnBlocked(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"blocked\", cb)\n    [<Inline>]\n    member this.OnBlur(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.FocusEvent -> unit>) = this.onExpr(\"blur\", cb)\n    [<Inline>]\n    member this.OnCached(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"cached\", cb)\n    [<Inline>]\n    member this.OnCanPlay(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"canplay\", cb)\n    [<Inline>]\n    member this.OnCanPlayThrough(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"canplaythrough\", cb)\n    [<Inline>]\n    member this.OnChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"change\", cb)\n    [<Inline>]\n    member this.OnChargingChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"chargingchange\", cb)\n    [<Inline>]\n    member this.OnChargingTimeChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"chargingtimechange\", cb)\n    [<Inline>]\n    member this.OnChecking(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"checking\", cb)\n    [<Inline>]\n    member this.OnClick(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"click\", cb)\n    [<Inline>]\n    member this.OnClose(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"close\", cb)\n    [<Inline>]\n    member this.OnComplete(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"complete\", cb)\n    [<Inline>]\n    member this.OnCompositionEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.CompositionEvent -> unit>) = this.onExpr(\"compositionend\", cb)\n    [<Inline>]\n    member this.OnCompositionStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.CompositionEvent -> unit>) = this.onExpr(\"compositionstart\", cb)\n    [<Inline>]\n    member this.OnCompositionUpdate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.CompositionEvent -> unit>) = this.onExpr(\"compositionupdate\", cb)\n    [<Inline>]\n    member this.OnContextMenu(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"contextmenu\", cb)\n    [<Inline>]\n    member this.OnCopy(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"copy\", cb)\n    [<Inline>]\n    member this.OnCut(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"cut\", cb)\n    [<Inline>]\n    member this.OnDblClick(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"dblclick\", cb)\n    [<Inline>]\n    member this.OnDeviceLight(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"devicelight\", cb)\n    [<Inline>]\n    member this.OnDeviceMotion(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"devicemotion\", cb)\n    [<Inline>]\n    member this.OnDeviceOrientation(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"deviceorientation\", cb)\n    [<Inline>]\n    member this.OnDeviceProximity(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"deviceproximity\", cb)\n    [<Inline>]\n    member this.OnDischargingTimeChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dischargingtimechange\", cb)\n    [<Inline>]\n    member this.OnDOMActivate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"DOMActivate\", cb)\n    [<Inline>]\n    member this.OnDOMAttributeNameChanged(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"DOMAttributeNameChanged\", cb)\n    [<Inline>]\n    member this.OnDOMAttrModified(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMAttrModified\", cb)\n    [<Inline>]\n    member this.OnDOMCharacterDataModified(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMCharacterDataModified\", cb)\n    [<Inline>]\n    member this.OnDOMContentLoaded(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"DOMContentLoaded\", cb)\n    [<Inline>]\n    member this.OnDOMElementNameChanged(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"DOMElementNameChanged\", cb)\n    [<Inline>]\n    member this.OnDOMNodeInserted(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeInserted\", cb)\n    [<Inline>]\n    member this.OnDOMNodeInsertedIntoDocument(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeInsertedIntoDocument\", cb)\n    [<Inline>]\n    member this.OnDOMNodeRemoved(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeRemoved\", cb)\n    [<Inline>]\n    member this.OnDOMNodeRemovedFromDocument(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeRemovedFromDocument\", cb)\n    [<Inline>]\n    member this.OnDOMSubtreeModified(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMSubtreeModified\", cb)\n    [<Inline>]\n    member this.OnDownloading(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"downloading\", cb)\n    [<Inline>]\n    member this.OnDrag(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"drag\", cb)\n    [<Inline>]\n    member this.OnDragEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragend\", cb)\n    [<Inline>]\n    member this.OnDragEnter(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragenter\", cb)\n    [<Inline>]\n    member this.OnDragLeave(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragleave\", cb)\n    [<Inline>]\n    member this.OnDragOver(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragover\", cb)\n    [<Inline>]\n    member this.OnDragStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragstart\", cb)\n    [<Inline>]\n    member this.OnDrop(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"drop\", cb)\n    [<Inline>]\n    member this.OnDurationChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"durationchange\", cb)\n    [<Inline>]\n    member this.OnEmptied(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"emptied\", cb)\n    [<Inline>]\n    member this.OnEnded(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"ended\", cb)\n    [<Inline>]\n    member this.OnEndEvent(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"endEvent\", cb)\n    [<Inline>]\n    member this.OnError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"error\", cb)\n    [<Inline>]\n    member this.OnFocus(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.FocusEvent -> unit>) = this.onExpr(\"focus\", cb)\n    [<Inline>]\n    member this.OnFullScreenChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"fullscreenchange\", cb)\n    [<Inline>]\n    member this.OnFullScreenError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"fullscreenerror\", cb)\n    [<Inline>]\n    member this.OnGamepadConnected(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"gamepadconnected\", cb)\n    [<Inline>]\n    member this.OnGamepadDisconnected(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"gamepaddisconnected\", cb)\n    [<Inline>]\n    member this.OnHashChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"hashchange\", cb)\n    [<Inline>]\n    member this.OnInput(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"input\", cb)\n    [<Inline>]\n    member this.OnInvalid(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"invalid\", cb)\n    [<Inline>]\n    member this.OnKeyDown(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.KeyboardEvent -> unit>) = this.onExpr(\"keydown\", cb)\n    [<Inline>]\n    member this.OnKeyPress(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.KeyboardEvent -> unit>) = this.onExpr(\"keypress\", cb)\n    [<Inline>]\n    member this.OnKeyUp(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.KeyboardEvent -> unit>) = this.onExpr(\"keyup\", cb)\n    [<Inline>]\n    member this.OnLanguageChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"languagechange\", cb)\n    [<Inline>]\n    member this.OnLevelChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"levelchange\", cb)\n    [<Inline>]\n    member this.OnLoad(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"load\", cb)\n    [<Inline>]\n    member this.OnLoadedData(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadeddata\", cb)\n    [<Inline>]\n    member this.OnLoadedMetadata(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadedmetadata\", cb)\n    [<Inline>]\n    member this.OnLoadEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadend\", cb)\n    [<Inline>]\n    member this.OnLoadStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadstart\", cb)\n    [<Inline>]\n    member this.OnMessage(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"message\", cb)\n    [<Inline>]\n    member this.OnMouseDown(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mousedown\", cb)\n    [<Inline>]\n    member this.OnMouseEnter(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseenter\", cb)\n    [<Inline>]\n    member this.OnMouseLeave(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseleave\", cb)\n    [<Inline>]\n    member this.OnMouseMove(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mousemove\", cb)\n    [<Inline>]\n    member this.OnMouseOut(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseout\", cb)\n    [<Inline>]\n    member this.OnMouseOver(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseover\", cb)\n    [<Inline>]\n    member this.OnMouseUp(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseup\", cb)\n    [<Inline>]\n    member this.OnNoUpdate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"noupdate\", cb)\n    [<Inline>]\n    member this.OnObsolete(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"obsolete\", cb)\n    [<Inline>]\n    member this.OnOffline(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"offline\", cb)\n    [<Inline>]\n    member this.OnOnline(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"online\", cb)\n    [<Inline>]\n    member this.OnOpen(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"open\", cb)\n    [<Inline>]\n    member this.OnOrientationChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"orientationchange\", cb)\n    [<Inline>]\n    member this.OnPageHide(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pagehide\", cb)\n    [<Inline>]\n    member this.OnPageShow(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pageshow\", cb)\n    [<Inline>]\n    member this.OnPaste(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"paste\", cb)\n    [<Inline>]\n    member this.OnPause(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pause\", cb)\n    [<Inline>]\n    member this.OnPlay(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"play\", cb)\n    [<Inline>]\n    member this.OnPlaying(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"playing\", cb)\n    [<Inline>]\n    member this.OnPointerLockChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pointerlockchange\", cb)\n    [<Inline>]\n    member this.OnPointerLockError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pointerlockerror\", cb)\n    [<Inline>]\n    member this.OnPopState(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"popstate\", cb)\n    [<Inline>]\n    member this.OnProgress(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"progress\", cb)\n    [<Inline>]\n    member this.OnRateChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"ratechange\", cb)\n    [<Inline>]\n    member this.OnReadyStateChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"readystatechange\", cb)\n    [<Inline>]\n    member this.OnRepeatEvent(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"repeatEvent\", cb)\n    [<Inline>]\n    member this.OnReset(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"reset\", cb)\n    [<Inline>]\n    member this.OnResize(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"resize\", cb)\n    [<Inline>]\n    member this.OnScroll(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"scroll\", cb)\n    [<Inline>]\n    member this.OnSeeked(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"seeked\", cb)\n    [<Inline>]\n    member this.OnSeeking(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"seeking\", cb)\n    [<Inline>]\n    member this.OnSelect(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"select\", cb)\n    [<Inline>]\n    member this.OnShow(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"show\", cb)\n    [<Inline>]\n    member this.OnStalled(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"stalled\", cb)\n    [<Inline>]\n    member this.OnStorage(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"storage\", cb)\n    [<Inline>]\n    member this.OnSubmit(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"submit\", cb)\n    [<Inline>]\n    member this.OnSuccess(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"success\", cb)\n    [<Inline>]\n    member this.OnSuspend(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"suspend\", cb)\n    [<Inline>]\n    member this.OnSVGAbort(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGAbort\", cb)\n    [<Inline>]\n    member this.OnSVGError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGError\", cb)\n    [<Inline>]\n    member this.OnSVGLoad(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGLoad\", cb)\n    [<Inline>]\n    member this.OnSVGResize(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGResize\", cb)\n    [<Inline>]\n    member this.OnSVGScroll(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGScroll\", cb)\n    [<Inline>]\n    member this.OnSVGUnload(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGUnload\", cb)\n    [<Inline>]\n    member this.OnSVGZoom(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGZoom\", cb)\n    [<Inline>]\n    member this.OnTimeOut(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"timeout\", cb)\n    [<Inline>]\n    member this.OnTimeUpdate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"timeupdate\", cb)\n    [<Inline>]\n    member this.OnTouchCancel(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchcancel\", cb)\n    [<Inline>]\n    member this.OnTouchEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchend\", cb)\n    [<Inline>]\n    member this.OnTouchEnter(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchenter\", cb)\n    [<Inline>]\n    member this.OnTouchLeave(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchleave\", cb)\n    [<Inline>]\n    member this.OnTouchMove(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchmove\", cb)\n    [<Inline>]\n    member this.OnTouchStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchstart\", cb)\n    [<Inline>]\n    member this.OnTransitionEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"transitionend\", cb)\n    [<Inline>]\n    member this.OnUnload(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"unload\", cb)\n    [<Inline>]\n    member this.OnUpdateReady(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"updateready\", cb)\n    [<Inline>]\n    member this.OnUpgradeNeeded(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"upgradeneeded\", cb)\n    [<Inline>]\n    member this.OnUserProximity(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"userproximity\", cb)\n    [<Inline>]\n    member this.OnVersionChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"versionchange\", cb)\n    [<Inline>]\n    member this.OnVisibilityChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"visibilitychange\", cb)\n    [<Inline>]\n    member this.OnVolumeChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"volumechange\", cb)\n    [<Inline>]\n    member this.OnWaiting(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"waiting\", cb)\n    [<Inline>]\n    member this.OnWheel(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.WheelEvent -> unit>) = this.onExpr(\"wheel\", cb)\n    // }}\n\nand [<JavaScript; Proxy(typeof<EltUpdater>)>] \n    internal EltUpdater'(treeNode : DocTreeNode, updates, elt, rvUpdates: Updates, holeUpdates: Var<(int * View<unit>)[]>) =\n    inherit Elt'(\n        TreeDoc treeNode, \n        View.Map2Unit updates (holeUpdates.View |> View.BindInner (Array.map snd >> Array.TreeReduce (View.Const ()) View.Map2Unit)),\n        elt, rvUpdates)\n\n    let mutable origHoles = treeNode.Holes\n\n    override this.AddHole h =\n        origHoles.JS.Push h |> ignore\n        treeNode.Holes <- Array.append treeNode.Holes [| h |]\n\n    override this.ClearHoles() =\n        origHoles <- [||]\n        treeNode.Holes <- [||]\n        holeUpdates.Value <- [||]\n\n    member this.AddUpdated(doc: Elt') =\n        match doc.DocNode with\n        | ElemDoc e ->\n            treeNode.Holes <- Array.append treeNode.Holes [| e |]\n            let hu = holeUpdates.Value\n            hu.JS.Push ((e.ElKey, doc.Updates)) |> ignore\n            holeUpdates.Value <- hu\n        | _ -> failwith \"DocUpdater.AddUpdated expects a single element node\"\n\n    member this.RemoveUpdated(doc: Elt') =\n        match doc.DocNode with\n        | ElemDoc e ->\n            let k = e.ElKey\n            treeNode.Holes <-\n                treeNode.Holes |> Array.filter (fun h -> h.ElKey <> k)\n            holeUpdates.Value <-\n                holeUpdates.Value |> Array.filter (function\n                    | uk, _ when uk = k -> false\n                    | _ -> true\n                )  \n        | _ -> failwith \"DocUpdater.RemoveUpdated expects a single element node\"\n\n    member this.RemoveAllUpdated() =\n        treeNode.Holes <- origHoles\n        holeUpdates.Value <- [||]\n", "namespace WebSharper.UI.Client\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\n\n[<JavaScript>]\nmodule internal Templates =\n\n    let LoadedTemplates = Dictionary<string, Dictionary<string, Dom.Element>>()\n    let LoadedTemplateFile name =\n        match LoadedTemplates.TryGetValue name with\n        | true, d -> d\n        | false, _ ->\n            let d = Dictionary()\n            LoadedTemplates.[name] <- d\n            d\n    let mutable LocalTemplatesLoaded = false\n\n    let TextHoleRE = \"\"\"\\${([^}]+)}\"\"\"\n\n    let InlineTemplate (el: Dom.Element) (fillWith: seq<TemplateHole>) =\n        let holes : DocElemNode[] = [||]\n        let updates : View<unit>[] = [||]\n        let attrs : (Dom.Element * Attrs.Dyn)[] = [||]\n        let afterRender : (Dom.Element -> unit)[] = [||]\n        let fw = Dictionary()\n        for x in fillWith do fw.[TemplateHole.Name x] <- x\n        let els = As<Union<Dom.Node, DocNode>[]> (DomUtility.ChildrenArray el)\n        let addAttr (el: Dom.Element) (attr: Attr) =\n            let attr = Attrs.Insert el attr\n            updates.JS.Push (Attrs.Updates attr) |> ignore\n            attrs.JS.Push ((el, attr)) |> ignore\n            match Attrs.GetOnAfterRender attr with\n            | Some f -> afterRender.JS.Push(fun _ -> f el) |> ignore\n            | None -> ()\n        let tryGetAsDoc name =\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.Elt (_, doc) -> Some (As<Doc'> doc)\n            | true, TemplateHole.Text (_, text) -> Some (Doc'.TextNode text)\n            | true, TemplateHole.TextView (_, tv) -> Some (Doc'.TextView tv)\n            | true, TemplateHole.VarStr (_, v) -> Some (Doc'.TextView v.View)\n            | true, TemplateHole.VarBool (_, v) -> Some (Doc'.TextView (v.View.Map string))\n            | true, TemplateHole.VarInt (_, v) -> Some (Doc'.TextView (v.View.Map (fun i -> i.Input)))\n            | true, TemplateHole.VarIntUnchecked (_, v) -> Some (Doc'.TextView (v.View.Map string))\n            | true, TemplateHole.VarFloat (_, v) -> Some (Doc'.TextView (v.View.Map (fun i -> i.Input)))\n            | true, TemplateHole.VarFloatUnchecked (_, v) -> Some (Doc'.TextView (v.View.Map string))\n            | true, _ -> Console.Warn(\"Content hole filled with attribute data\", name); None\n            | false, _ -> None\n\n        DomUtility.IterSelector el \"[ws-hole]\" <| fun p ->\n            let name = p.GetAttribute(\"ws-hole\")\n            p.RemoveAttribute(\"ws-hole\")\n            while (p.HasChildNodes()) do\n                p.RemoveChild(p.LastChild) |> ignore\n            match tryGetAsDoc name with\n            | None -> ()\n            | Some doc ->\n                Docs.LinkElement p doc.DocNode\n                holes.JS.Push {\n                    Attr = Attrs.Empty p\n                    Children = doc.DocNode\n                    Delimiters = None\n                    El = p\n                    ElKey = Fresh.Int()\n                    Render = None\n                }\n                |> ignore\n                updates.JS.Push doc.Updates |> ignore\n\n        DomUtility.IterSelector el \"[ws-replace]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-replace\")\n            match tryGetAsDoc name with\n            | None -> ()\n            | Some doc ->\n                let p = e.ParentNode :?> Dom.Element\n                let after = JS.Document.CreateTextNode(\"\") :> Dom.Node\n                p.ReplaceChild(after, e) |> ignore\n                let before = Docs.InsertBeforeDelim after doc.DocNode\n                els\n                |> Array.tryFindIndex ((===.) e)\n                |> Option.iter (fun i -> els.[i] <- Union2Of2 doc.DocNode)\n                holes.JS.Push {\n                    Attr = Attrs.Empty p\n                    Children = doc.DocNode\n                    Delimiters = Some (before, after)\n                    El = p\n                    ElKey = Fresh.Int()\n                    Render = None\n                }\n                |> ignore\n                updates.JS.Push doc.Updates |> ignore\n\n        DomUtility.IterSelector el \"[ws-attr]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-attr\")\n            e.RemoveAttribute(\"ws-attr\")\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.Attribute (_, attr) -> addAttr e attr\n            | true, _ -> Console.Warn(\"Attribute hole filled with non-attribute data\", name)\n            | false, _ -> ()\n\n        DomUtility.IterSelector el \"[ws-on]\" <| fun e ->\n            e.GetAttribute(\"ws-on\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            |> Array.choose (fun x ->\n                let a = x.Split([|':'|], StringSplitOptions.RemoveEmptyEntries)\n                match fw.TryGetValue(a.[1]) with\n                | true, TemplateHole.Event (_, handler) -> Some (Attr.Handler a.[0] handler)\n                | true, TemplateHole.EventQ (_, _, handler) -> Some (A.Handler a.[0] handler)\n                | true, _ ->\n                    Console.Warn(\"Event hole on\" + a.[0] + \" filled with non-event data\", a.[1])\n                    None\n                | false, _ -> None\n            )\n            |> Attr.Concat\n            |> addAttr e\n            e.RemoveAttribute(\"ws-on\")\n\n        DomUtility.IterSelector el \"[ws-onafterrender]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-onafterrender\")\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.AfterRender (_, handler) ->\n                e.RemoveAttribute(\"ws-onafterrender\")\n                addAttr e (Attr.OnAfterRender handler)\n            | true, TemplateHole.AfterRenderQ (_, handler) ->\n                e.RemoveAttribute(\"ws-onafterrender\")\n                addAttr e (Attr.OnAfterRender (As handler))\n            | true, _ -> Console.Warn(\"onafterrender hole filled with non-onafterrender data\", name)\n            | false, _ -> ()\n\n        DomUtility.IterSelector el \"[ws-var]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-var\")\n            e.RemoveAttribute(\"ws-var\")\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.VarStr (_, var) -> addAttr e (Attr.Value var)\n            | true, TemplateHole.VarBool (_, var) -> addAttr e (Attr.Checked var)\n            | true, TemplateHole.VarInt (_, var) -> addAttr e (Attr.IntValue var)\n            | true, TemplateHole.VarIntUnchecked (_, var) -> addAttr e (Attr.IntValueUnchecked var)\n            | true, TemplateHole.VarFloat (_, var) -> addAttr e (Attr.FloatValue var)\n            | true, TemplateHole.VarFloatUnchecked (_, var) -> addAttr e (Attr.FloatValueUnchecked var)\n            | true, _ -> Console.Warn(\"Var hole filled with non-Var data\", name)\n            | false, _ -> ()\n\n        DomUtility.IterSelector el \"[ws-attr-holes]\" <| fun e ->\n            let re = new RegExp(TextHoleRE, \"g\")\n            let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            e.RemoveAttribute(\"ws-attr-holes\")\n            for attrName in holeAttrs do\n                let s = e.GetAttribute(attrName)\n                let mutable m = null\n                let mutable lastIndex = 0\n                let res : (string * string)[] = [||]\n                while (m <- re.Exec s; m !==. null) do\n                    let textBefore = s.[lastIndex .. re.LastIndex-m.[0].Length-1]\n                    lastIndex <- re.LastIndex\n                    let holeName = m.[1]\n                    res.JS.Push((textBefore, holeName)) |> ignore\n                let finalText = s.[lastIndex..]\n                re.LastIndex <- 0\n                let value =\n                    Array.foldBack (fun (textBefore, holeName: string) (textAfter, views) ->\n                        let holeContent =\n                            match fw.TryGetValue(holeName) with\n                            | true, TemplateHole.Text (_, t) -> Choice1Of2 t\n                            | true, TemplateHole.TextView (_, v) -> Choice2Of2 v\n                            | true, TemplateHole.VarStr (_, v) -> Choice2Of2 v.View\n                            | true, TemplateHole.VarBool (_, v) -> Choice2Of2 (v.View.Map string)\n                            | true, TemplateHole.VarInt (_, v) -> Choice2Of2 (v.View.Map (fun i -> i.Input))\n                            | true, TemplateHole.VarIntUnchecked (_, v) -> Choice2Of2 (v.View.Map string)\n                            | true, TemplateHole.VarFloat (_, v) -> Choice2Of2 (v.View.Map (fun i -> i.Input))\n                            | true, TemplateHole.VarFloatUnchecked (_, v) -> Choice2Of2 (v.View.Map string)\n                            | true, _ ->\n                                Console.Warn(\"Attribute value hole filled with non-text data\", holeName)\n                                Choice1Of2 \"\"\n                            | false, _ -> Choice1Of2 \"\"\n                        match holeContent with\n                        | Choice1Of2 text -> textBefore + text + textAfter, views\n                        | Choice2Of2 v ->\n                            let v =\n                                if textAfter = \"\" then v else\n                                View.Map (fun s -> s + textAfter) v\n                            textBefore, v :: views\n                    ) res (finalText, [])\n                match value with\n                | s, [] -> Attr.Create attrName s\n                | \"\", [v] -> Attr.Dynamic attrName v\n                | s, [v] -> Attr.Dynamic attrName (View.Map (fun v -> s + v) v)\n                | s, [v1; v2] -> Attr.Dynamic attrName (View.Map2 (fun v1 v2 -> s + v1 + v2) v1 v2)\n                | s, [v1; v2; v3] -> Attr.Dynamic attrName (View.Map3 (fun v1 v2 v3 -> s + v1 + v2 + v3) v1 v2 v3)\n                | s, vs ->\n                    View.Sequence vs\n                    |> View.Map (fun vs -> s + String.concat \"\" vs)\n                    |> Attr.Dynamic attrName\n                |> addAttr e\n\n        let docTreeNode : DocTreeNode =\n            {\n                Els = els\n                Holes = holes\n                Attrs = attrs\n                Render =\n                    if Array.isEmpty afterRender\n                    then None\n                    else Some (fun el -> Array.iter (fun f -> f el) afterRender)\n                Dirty = true\n                El =\n                    match els with\n                    | [| Union1Of2 (:? Dom.Element as el) |] -> Some el\n                    | _ -> None\n            }\n        let updates =\n            updates |> Array.TreeReduce (View.Const ()) View.Map2Unit\n        docTreeNode, updates\n\n    let ChildrenTemplate (el: Dom.Element) (fillWith: seq<TemplateHole>) =\n        let docTreeNode, updates = InlineTemplate el fillWith\n        match docTreeNode.Els with\n        | [| Union1Of2 e |] when e.NodeType = Dom.NodeType.Element ->\n            Elt'.TreeNode(docTreeNode, updates) :> Doc'\n        | _ ->\n            Doc'.Mk (TreeDoc docTreeNode) updates\n\n    let FakeRoot (els: Dom.Node[]) =\n        let fakeroot = JS.Document.CreateElement(\"div\")\n        for el in els do fakeroot.AppendChild el |> ignore\n        fakeroot\n\n    let FakeRootSingle (el: Dom.Element) =\n        el.RemoveAttribute(\"ws-template\")\n        match el.GetAttribute(\"ws-replace\") with\n        | null -> ()\n        | replace ->\n            el.RemoveAttribute(\"ws-replace\")\n            match el.ParentNode with\n            | null -> ()\n            | p ->\n                let n = JS.Document.CreateElement(el.TagName)\n                n.SetAttribute(\"ws-replace\", replace)\n                p.ReplaceChild(n, el) |> ignore\n        FakeRoot [| el |]\n\n    module private Prepare =\n\n        let convertAttrs (el: Dom.Element) =\n            let attrs = el.Attributes\n            let toRemove = [||]\n            let events = [||]\n            let holedAttrs = [||]\n            for i = 0 to attrs.Length - 1 do\n                let a = attrs.[i]\n                if a.NodeName.StartsWith \"ws-on\" && a.NodeName <> \"ws-onafterrender\" && a.NodeName <> \"ws-on\" then\n                    toRemove.JS.Push(a.NodeName) |> ignore\n                    events.JS.Push(a.NodeName.[\"ws-on\".Length..] + \":\" + a.NodeValue.ToLower()) |> ignore\n                elif not (a.NodeName.StartsWith \"ws-\") && RegExp(TextHoleRE).Test(a.NodeValue) then\n                    a.NodeValue <-\n                        RegExp(TextHoleRE, \"g\")\n                            .Replace(a.NodeValue, FuncWithArgs (fun (_, h: string) ->\n                                \"${\" + h.ToLower() + \"}\"))\n                    holedAttrs.JS.Push(a.NodeName) |> ignore\n            if not (Array.isEmpty events) then\n                el.SetAttribute(\"ws-on\", String.concat \" \" events)\n            if not (Array.isEmpty holedAttrs) then\n                el.SetAttribute(\"ws-attr-holes\", String.concat \" \" holedAttrs)\n            let lowercaseAttr name =\n                match el.GetAttribute(name) with\n                | null -> ()\n                | x -> el.SetAttribute(name, x.ToLower())\n            lowercaseAttr \"ws-hole\"\n            lowercaseAttr \"ws-replace\"\n            lowercaseAttr \"ws-attr\"\n            lowercaseAttr \"ws-onafterrender\"\n            lowercaseAttr \"ws-var\"\n            Array.iter el.RemoveAttribute toRemove\n\n        let convertTextNode (n: Dom.Node) =\n            let mutable m = null\n            let mutable li = 0\n            let s = n.TextContent\n            let strRE = RegExp(TextHoleRE, \"g\")\n            while (m <- strRE.Exec s; m !==. null) do\n                n.ParentNode.InsertBefore(JS.Document.CreateTextNode(s.[li..strRE.LastIndex-m.[0].Length-1]), n) |> ignore\n                li <- strRE.LastIndex\n                let hole = JS.Document.CreateElement(\"span\")\n                hole.SetAttribute(\"ws-replace\", m.[1].ToLower())\n                n.ParentNode.InsertBefore(hole, n) |> ignore\n            strRE.LastIndex <- 0\n            n.TextContent <- s.[li..]\n\n        let mapHoles (t: Dom.Element) (mappings: Dictionary<string, string>) =\n            let run attrName =\n                DomUtility.IterSelector t (\"[\" + attrName + \"]\") <| fun e ->\n                    match mappings.TryGetValue(e.GetAttribute(attrName).ToLower()) with\n                    | true, m -> e.SetAttribute(attrName, m)\n                    | false, _ -> ()\n            run \"ws-hole\"\n            run \"ws-replace\"\n            run \"ws-attr\"\n            run \"ws-onafterrender\"\n            run \"ws-var\"\n            DomUtility.IterSelector t \"[ws-on]\" <| fun e ->\n                let a =\n                    e.GetAttribute(\"ws-on\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                    |> Array.map (fun x ->\n                        let a = x.Split([|':'|], StringSplitOptions.RemoveEmptyEntries)\n                        match mappings.TryGetValue(a.[1]) with\n                        | true, x -> a.[0] + \":\" + x\n                        | false, _ -> x\n                    )\n                    |> String.concat \" \"\n                e.SetAttribute(\"ws-on\", a)\n            DomUtility.IterSelector t \"[ws-attr-holes]\" <| fun e ->\n                let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                for attrName in holeAttrs do\n                    let s =\n                        (e.GetAttribute(attrName), mappings)\n                        ||> Seq.fold (fun s (KeyValue(a, m)) ->\n                            RegExp(\"\\\\${\" + a + \"}\", \"ig\").Replace(s, \"${\" + m + \"}\")\n                        )\n                    e.SetAttribute(attrName, s)\n\n        let fillInstanceAttrs (instance: Dom.Element) (fillWith: Dom.Element) =\n            convertAttrs fillWith\n            let name = fillWith.NodeName.ToLower()\n            match instance.QuerySelector(\"[ws-attr=\" + name + \"]\") with\n            | null -> Console.Warn(\"Filling non-existent attr hole\", name)\n            | e ->\n                e.RemoveAttribute(\"ws-attr\")\n                for i = 0 to fillWith.Attributes.Length - 1 do\n                    let a = fillWith.Attributes.[i]\n                    if a.Name = \"class\" && e.HasAttribute(\"class\") then\n                        e.SetAttribute(\"class\", e.GetAttribute(\"class\") + \" \" + a.NodeValue)\n                    else\n                        e.SetAttribute(a.Name, a.NodeValue)\n\n        let removeHolesExcept (instance: Dom.Element) (dontRemove: HashSet<string>) =\n            let run attrName =\n                DomUtility.IterSelector instance (\"[\" + attrName + \"]\") <| fun e ->\n                    if not (dontRemove.Contains(e.GetAttribute attrName)) then\n                        e.RemoveAttribute(attrName)\n            run \"ws-attr\"\n            run \"ws-onafterrender\"\n            run \"ws-var\"\n            DomUtility.IterSelector instance \"[ws-hole]\" <| fun e ->\n                if not (dontRemove.Contains(e.GetAttribute \"ws-hole\")) then\n                    e.RemoveAttribute(\"ws-hole\")\n                    while e.HasChildNodes() do\n                        e.RemoveChild(e.LastChild) |> ignore\n            DomUtility.IterSelector instance \"[ws-replace]\" <| fun e ->\n                if not (dontRemove.Contains(e.GetAttribute \"ws-replace\")) then\n                    e.ParentNode.RemoveChild(e) |> ignore\n            DomUtility.IterSelector instance \"[ws-on]\" <| fun e ->\n                let a =\n                    e.GetAttribute(\"ws-on\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                    |> Array.filter (fun x ->\n                        let a = x.Split([|':'|], StringSplitOptions.RemoveEmptyEntries)\n                        dontRemove.Contains a.[1]\n                    )\n                    |> String.concat \" \"\n                e.SetAttribute(\"ws-on\", a)\n            DomUtility.IterSelector instance \"[ws-attr-holes]\" <| fun e ->\n                let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                for attrName in holeAttrs do\n                    let s =\n                        RegExp(TextHoleRE, \"g\")\n                            .Replace(e.GetAttribute(attrName), FuncWithArgs(fun (full: string, h: string) ->\n                                if dontRemove.Contains h then full else \"\"\n                            ))\n                    e.SetAttribute(attrName, s)\n\n        let fillTextHole (instance: Dom.Element) (fillWith: string) (templateName: string) =\n            match instance.QuerySelector \"[ws-replace]\" with\n            | null ->\n                Console.Warn(\"Filling non-existent text hole\", templateName)\n                None\n            | n ->\n                n.ParentNode.ReplaceChild(Dom.Text fillWith, n) |> ignore\n                Some <| n.GetAttribute(\"ws-replace\")\n\n        let rec fill (fillWith: Dom.Element) (p: Dom.Node) n =\n            if fillWith.HasChildNodes() then\n                fill fillWith p (p.InsertBefore(fillWith.LastChild, n))\n\n        let failNotLoaded (name: string) =\n            Console.Warn(\"Instantiating non-loaded template\", name)\n\n    let rec PrepareTemplateStrict (baseName: string) (name: option<string>) (els: Dom.Node[]) (root: option<Dom.Element>) (prepareLocalTemplate: option<string -> unit>) =\n        let rec fillDocHole (instance: Dom.Element) (fillWith: Dom.Element) =\n            let name = fillWith.NodeName.ToLower()\n            let fillHole (p: Dom.Node) (n: Dom.Node) =\n                // The \"title\" node is treated specially by HTML, its content is considered pure text,\n                // so we need to re-parse it.\n                if name = \"title\" && fillWith.HasChildNodes() then\n                    let parsed = JQuery.JQuery.ParseHTML fillWith.TextContent\n                    fillWith.RemoveChild(fillWith.FirstChild) |> ignore\n                    for i in parsed do\n                        fillWith.AppendChild(i) |> ignore\n                convertElement fillWith\n                Prepare.fill fillWith p n\n            DomUtility.IterSelector instance \"[ws-attr-holes]\" <| fun e ->\n                let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                for attrName in holeAttrs do\n                    e.SetAttribute(attrName,\n                        RegExp(\"\\\\${\" + name + \"}\", \"ig\").\n                            Replace(e.GetAttribute(attrName), fillWith.TextContent)\n                    )\n            match instance.QuerySelector(\"[ws-hole=\" + name + \"]\") with\n            | null ->\n                match instance.QuerySelector(\"[ws-replace=\" + name + \"]\") with\n                | null -> ()\n                | e ->\n                    fillHole e.ParentNode e\n                    e.ParentNode.RemoveChild(e) |> ignore\n            | e ->\n                while e.HasChildNodes() do\n                    e.RemoveChild(e.LastChild) |> ignore\n                e.RemoveAttribute(\"ws-hole\")\n                fillHole e null\n\n        and convertElement (el: Dom.Element) =\n            if el.NodeName.ToLower().StartsWith \"ws-\" then\n                convertInstantiation el\n            else\n                Prepare.convertAttrs el\n                convertNodeAndSiblings el.FirstChild\n\n        and convertNodeAndSiblings (n: Dom.Node) =\n            if n !==. null then\n                let next = n.NextSibling\n                if n.NodeType = Dom.NodeType.Text then\n                    Prepare.convertTextNode n\n                elif n.NodeType = Dom.NodeType.Element then\n                    convertElement (n :?> Dom.Element)\n                convertNodeAndSiblings next\n\n        and convertInstantiation (el: Dom.Element) =\n            let name = el.NodeName.[3..].ToLower()\n            let instBaseName, instName =\n                match name.IndexOf('.') with\n                | -1 -> baseName, name\n                | n -> name.[..n-1], name.[n+1..]\n            if instBaseName <> \"\" && not (LoadedTemplates.ContainsKey instBaseName) then\n                Prepare.failNotLoaded instName\n            else\n            if instBaseName = \"\" && prepareLocalTemplate.IsSome then\n                prepareLocalTemplate.Value instName\n            let d = LoadedTemplates.[instBaseName]\n            if not (d.ContainsKey instName) then Prepare.failNotLoaded instName else\n            let t = d.[instName]\n            let instance = t.CloneNode(true) :?> Dom.Element\n            let usedHoles = HashSet()\n            let mappings = Dictionary()\n            // 1. gather mapped and filled holes.\n            let attrs = el.Attributes\n            for i = 0 to attrs.Length - 1 do\n                let name = attrs.[i].Name.ToLower()\n                let mappedName = match attrs.[i].NodeValue with \"\" -> name | s -> s.ToLower()\n                mappings.[name] <- mappedName\n                if not (usedHoles.Add(name)) then\n                    Console.Warn(\"Hole mapped twice\", name)\n            for i = 0 to el.ChildNodes.Length - 1 do\n                let n = el.ChildNodes.[i]\n                if n.NodeType = Dom.NodeType.Element then\n                    let n = n :?> Dom.Element\n                    if not (usedHoles.Add(n.NodeName.ToLower())) then\n                        Console.Warn(\"Hole filled twice\", instName)\n            // 2. If single text hole, apply it.\n            let singleTextFill = el.ChildNodes.Length = 1 && el.FirstChild.NodeType = Dom.NodeType.Text\n            if singleTextFill then\n                Prepare.fillTextHole instance el.FirstChild.TextContent instName\n                |> Option.iter (usedHoles.Add >> ignore)\n            // 3. eliminate non-mapped/filled holes.\n            Prepare.removeHolesExcept instance usedHoles\n            // 4. apply mappings/fillings.\n            if not singleTextFill then\n                for i = 0 to el.ChildNodes.Length - 1 do\n                    let n = el.ChildNodes.[i]\n                    if n.NodeType = Dom.NodeType.Element then\n                        let n = n :?> Dom.Element\n                        if n.HasAttributes() then\n                            Prepare.fillInstanceAttrs instance n\n                        else\n                            fillDocHole instance n\n            Prepare.mapHoles instance mappings\n            // 5. insert result.\n            Prepare.fill instance el.ParentNode el\n            el.ParentNode.RemoveChild(el) |> ignore\n\n        let rec convertNestedTemplates (el: Dom.Element) =\n            match el.QuerySelector \"[ws-template]\" with\n            | null ->\n                match el.QuerySelector \"[ws-children-template]\" with\n                | null -> ()\n                | n ->\n                    let name = n.GetAttribute \"ws-children-template\"\n                    n.RemoveAttribute \"ws-children-template\"\n                    PrepareTemplateStrict baseName (Some name) (DomUtility.ChildrenArray n) None None\n                    convertNestedTemplates el\n            | n ->\n                let name = n.GetAttribute \"ws-template\"\n                PrepareSingleTemplate baseName (Some name) n None\n                convertNestedTemplates el\n\n        let fakeroot = root |> Option.defaultWith (fun () -> FakeRoot els)\n        let name = (defaultArg name \"\").ToLower()\n        LoadedTemplateFile(baseName).[name] <- fakeroot\n        if els.Length > 0 then\n            convertNestedTemplates fakeroot\n            convertNodeAndSiblings els.[0]\n\n    and PrepareSingleTemplate (baseName: string) (name: option<string>) (el: Dom.Element) =\n        let root = FakeRootSingle el\n        PrepareTemplateStrict baseName name [| el |] (Some root)\n\n    let PrepareTemplate (baseName: string) (name: option<string>) (els: unit -> Dom.Node[]) =\n        if not (LoadedTemplateFile(baseName).ContainsKey(defaultArg name \"\")) then\n            let els = els()\n            for el in els do\n                match el.ParentNode :?> Dom.Element with\n                | null -> ()\n                | p -> p.RemoveChild(el) |> ignore\n            PrepareTemplateStrict baseName name els None None\n\n    /// Load all the templates declared nested under `root` into `baseName`.\n    let LoadNestedTemplates (root: Dom.Element) baseName =\n        let loadedTpls = LoadedTemplateFile baseName\n        let rawTpls = Dictionary()\n        let wsTemplates = root.QuerySelectorAll \"[ws-template]\"\n        for i = 0 to wsTemplates.Length - 1 do\n            let node = wsTemplates.[i] :?> Dom.Element\n            let name = node.GetAttribute(\"ws-template\").ToLower()\n            node.RemoveAttribute(\"ws-template\")\n            rawTpls.[name] <- ([| node :> Dom.Node |], FakeRootSingle node)\n        let wsChildrenTemplates = root.QuerySelectorAll \"[ws-children-template]\"\n        for i = 0 to wsChildrenTemplates.Length - 1 do\n            let node = wsChildrenTemplates.[i] :?> Dom.Element\n            let name = node.GetAttribute(\"ws-children-template\").ToLower()\n            node.RemoveAttribute(\"ws-children-template\")\n            rawTpls.[name] <-\n                let els = DomUtility.ChildrenArray node\n                (els, FakeRoot els)\n        let instantiated = HashSet()\n        let rec prepareTemplate name =\n            if not (loadedTpls.ContainsKey name) then\n                match rawTpls.TryGetValue(name) with\n                | false, _ ->\n                    Console.Warn(\n                        if instantiated.Contains(name)\n                        then \"Encountered loop when instantiating \" + name\n                        else \"Local template does not exist: \" + name)\n                | true, (els, root) ->\n                    instantiated.Add(name) |> ignore\n                    rawTpls.Remove(name) |> ignore\n                    PrepareTemplateStrict baseName (Some name) els (Some root) (Some prepareTemplate)\n        while rawTpls.Count > 0 do\n            prepareTemplate (Seq.head rawTpls.Keys)\n\n    let LoadLocalTemplates (baseName: string) =\n        if not LocalTemplatesLoaded then\n            LocalTemplatesLoaded <- true\n            LoadNestedTemplates JS.Document.Body \"\"\n        LoadedTemplates.[baseName] <- LoadedTemplateFile(\"\")\n\n    let RunFullDocTemplate (fillWith: seq<TemplateHole>) =\n        LoadLocalTemplates \"\"\n        PrepareTemplateStrict \"\" None (DomUtility.ChildrenArray JS.Document.Body) (Some JS.Document.Body) None\n        ChildrenTemplate JS.Document.Body fillWith\n        |>! Doc'.RunInPlace true JS.Document.Body\n\n    let Template (els: Dom.Node[]) (fillWith: seq<TemplateHole>) =\n        ChildrenTemplate (FakeRoot els) fillWith\n\n    let NamedTemplate (baseName: string) (name: option<string>) (fillWith: seq<TemplateHole>) =\n        match LoadedTemplateFile(baseName).TryGetValue(defaultArg name \"\") with\n        | true, t -> ChildrenTemplate (t.CloneNode(true) :?> Dom.Element) fillWith\n        | false, _ -> Console.Warn(\"Local template doesn't exist\", name); Doc'.Empty\n\n    let GetOrLoadTemplate (baseName: string) (name: option<string>) (els: unit -> Dom.Node[]) (fillWith: seq<TemplateHole>) =\n        LoadLocalTemplates \"\"\n        PrepareTemplate baseName name els\n        NamedTemplate baseName name fillWith\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\nopen WebSharper\n\nopen System\nopen WebSharper.UI.Client\n\n[<JavaScript>]\ntype Flow<'T>(render: Var<Doc> -> ('T -> unit) -> unit) =\n\n    new (define: Func<Func<'T, unit>, Doc>) =\n        Flow(fun var cont -> Var.Set var (define.Invoke (Func<_,_>(cont))))\n\n    member this.Render = render\n\n[<JavaScript>]\n[<Sealed>]\ntype Flow =\n\n    static member Map f (x: Flow<'A>) =\n        Flow(fun var cont -> x.Render var (fun r -> (f r) |> cont))\n\n    // \"Unwrap\" the value from the flowlet, use it as an argument to the\n    // continuation k, and return the value of the applied continuation.\n\n    // Semantically, what we're doing here is running the form (or other\n    // input mechanism, but let's stick with thinking about forms), getting\n    // the result, and then using this as an input to the continuation.\n    static member Bind (m: Flow<'A>) (k: 'A -> Flow<'B>) =\n        Flow(fun var cont -> m.Render var (fun r -> (k r).Render var cont))\n\n    static member Return x =\n        Flow(fun var cont -> cont x)\n\n    static member Embed (fl: Flow<'A>) =\n        let var = Var.Create Doc.Empty\n        fl.Render var ignore\n        Doc.EmbedView var.View\n\n    static member Define (f: ('A -> unit) -> Doc) =\n        Flow(Func<_,_>(fun (x: Func<'A, unit>) -> f x.Invoke))\n\n    static member Static doc =\n        Flow(fun var cont -> Var.Set var doc; cont ())\n\n[<JavaScript>]\n[<Sealed>]\ntype FlowBuilder() =\n    member x.Bind(comp, func) = Flow.Bind comp func\n    member x.Return(value) = Flow.Return value\n    member x.ReturnFrom(inner: Flow<'A>) = inner\n\ntype Flow with\n\n    static member Do =\n        FlowBuilder()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\n#nowarn \"44\" // HTML deprecated\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// This is an auto-generated module providing HTML5 vocabulary.\n/// Generated using tags.csv from WebSharper;\n/// See tools/UpdateElems.fsx for the code-generation logic.\n// Warning: don't mark this module as JavaScript: some submodules _must_ not\n// be JavaScript because they are proxied.\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Html =\n\n    /// Create a text node with constant content, or with dynamic content using `view.V`.\n    [<JavaScript; Inline; Macro(typeof<Macros.TextView>)>]\n    let text t = Doc.TextNode t\n\n    /// Create a text node with dynamic content.\n    [<JavaScript; Inline>]\n    let textView v = Client.Doc.TextView v\n\n    /// Insert a client-side Doc.\n    [<JavaScript; Inline>]\n    let client ([<ReflectedDefinition; JavaScript>] q) = Doc.ClientSide q\n\n    module Elt =\n\n        // {{ tag normal colliding deprecated [elt]\n        /// Create an HTML element <a> with attributes and children.\n        [<JavaScript; Inline>]\n        let a ats ch = Doc.Element \"a\" ats ch\n        /// Create an HTML element <abbr> with attributes and children.\n        [<JavaScript; Inline>]\n        let abbr ats ch = Doc.Element \"abbr\" ats ch\n        /// Create an HTML element <acronym> with attributes and children.\n        [<JavaScript; Inline>]\n        let acronym ats ch = Doc.Element \"acronym\" ats ch\n        /// Create an HTML element <address> with attributes and children.\n        [<JavaScript; Inline>]\n        let address ats ch = Doc.Element \"address\" ats ch\n        /// Create an HTML element <applet> with attributes and children.\n        [<JavaScript; Inline>]\n        let applet ats ch = Doc.Element \"applet\" ats ch\n        /// Create an HTML element <area> with attributes and children.\n        [<JavaScript; Inline>]\n        let area ats ch = Doc.Element \"area\" ats ch\n        /// Create an HTML element <article> with attributes and children.\n        [<JavaScript; Inline>]\n        let article ats ch = Doc.Element \"article\" ats ch\n        /// Create an HTML element <aside> with attributes and children.\n        [<JavaScript; Inline>]\n        let aside ats ch = Doc.Element \"aside\" ats ch\n        /// Create an HTML element <audio> with attributes and children.\n        [<JavaScript; Inline>]\n        let audio ats ch = Doc.Element \"audio\" ats ch\n        /// Create an HTML element <b> with attributes and children.\n        [<JavaScript; Inline>]\n        let b ats ch = Doc.Element \"b\" ats ch\n        /// Create an HTML element <base> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``base`` ats ch = Doc.Element \"base\" ats ch\n        /// Create an HTML element <basefont> with attributes and children.\n        [<JavaScript; Inline>]\n        let basefont ats ch = Doc.Element \"basefont\" ats ch\n        /// Create an HTML element <bdi> with attributes and children.\n        [<JavaScript; Inline>]\n        let bdi ats ch = Doc.Element \"bdi\" ats ch\n        /// Create an HTML element <bdo> with attributes and children.\n        [<JavaScript; Inline>]\n        let bdo ats ch = Doc.Element \"bdo\" ats ch\n        /// Create an HTML element <big> with attributes and children.\n        [<JavaScript; Inline>]\n        let big ats ch = Doc.Element \"big\" ats ch\n        /// Create an HTML element <blockquote> with attributes and children.\n        [<JavaScript; Inline>]\n        let blockquote ats ch = Doc.Element \"blockquote\" ats ch\n        /// Create an HTML element <body> with attributes and children.\n        [<JavaScript; Inline>]\n        let body ats ch = Doc.Element \"body\" ats ch\n        /// Create an HTML element <br> with attributes and children.\n        [<JavaScript; Inline>]\n        let br ats ch = Doc.Element \"br\" ats ch\n        /// Create an HTML element <button> with attributes and children.\n        [<JavaScript; Inline>]\n        let button ats ch = Doc.Element \"button\" ats ch\n        /// Create an HTML element <canvas> with attributes and children.\n        [<JavaScript; Inline>]\n        let canvas ats ch = Doc.Element \"canvas\" ats ch\n        /// Create an HTML element <caption> with attributes and children.\n        [<JavaScript; Inline>]\n        let caption ats ch = Doc.Element \"caption\" ats ch\n        /// Create an HTML element <center> with attributes and children.\n        [<JavaScript; Inline>]\n        let center ats ch = Doc.Element \"center\" ats ch\n        /// Create an HTML element <cite> with attributes and children.\n        [<JavaScript; Inline>]\n        let cite ats ch = Doc.Element \"cite\" ats ch\n        /// Create an HTML element <code> with attributes and children.\n        [<JavaScript; Inline>]\n        let code ats ch = Doc.Element \"code\" ats ch\n        /// Create an HTML element <col> with attributes and children.\n        [<JavaScript; Inline>]\n        let col ats ch = Doc.Element \"col\" ats ch\n        /// Create an HTML element <colgroup> with attributes and children.\n        [<JavaScript; Inline>]\n        let colgroup ats ch = Doc.Element \"colgroup\" ats ch\n        /// Create an HTML element <command> with attributes and children.\n        [<JavaScript; Inline>]\n        let command ats ch = Doc.Element \"command\" ats ch\n        /// Create an HTML element <content> with attributes and children.\n        [<JavaScript; Inline>]\n        let content ats ch = Doc.Element \"content\" ats ch\n        /// Create an HTML element <data> with attributes and children.\n        [<JavaScript; Inline>]\n        let data ats ch = Doc.Element \"data\" ats ch\n        /// Create an HTML element <datalist> with attributes and children.\n        [<JavaScript; Inline>]\n        let datalist ats ch = Doc.Element \"datalist\" ats ch\n        /// Create an HTML element <dd> with attributes and children.\n        [<JavaScript; Inline>]\n        let dd ats ch = Doc.Element \"dd\" ats ch\n        /// Create an HTML element <del> with attributes and children.\n        [<JavaScript; Inline>]\n        let del ats ch = Doc.Element \"del\" ats ch\n        /// Create an HTML element <details> with attributes and children.\n        [<JavaScript; Inline>]\n        let details ats ch = Doc.Element \"details\" ats ch\n        /// Create an HTML element <dfn> with attributes and children.\n        [<JavaScript; Inline>]\n        let dfn ats ch = Doc.Element \"dfn\" ats ch\n        /// Create an HTML element <dir> with attributes and children.\n        [<JavaScript; Inline>]\n        let dir ats ch = Doc.Element \"dir\" ats ch\n        /// Create an HTML element <div> with attributes and children.\n        [<JavaScript; Inline>]\n        let div ats ch = Doc.Element \"div\" ats ch\n        /// Create an HTML element <dl> with attributes and children.\n        [<JavaScript; Inline>]\n        let dl ats ch = Doc.Element \"dl\" ats ch\n        /// Create an HTML element <dt> with attributes and children.\n        [<JavaScript; Inline>]\n        let dt ats ch = Doc.Element \"dt\" ats ch\n        /// Create an HTML element <em> with attributes and children.\n        [<JavaScript; Inline>]\n        let em ats ch = Doc.Element \"em\" ats ch\n        /// Create an HTML element <embed> with attributes and children.\n        [<JavaScript; Inline>]\n        let embed ats ch = Doc.Element \"embed\" ats ch\n        /// Create an HTML element <fieldset> with attributes and children.\n        [<JavaScript; Inline>]\n        let fieldset ats ch = Doc.Element \"fieldset\" ats ch\n        /// Create an HTML element <figcaption> with attributes and children.\n        [<JavaScript; Inline>]\n        let figcaption ats ch = Doc.Element \"figcaption\" ats ch\n        /// Create an HTML element <figure> with attributes and children.\n        [<JavaScript; Inline>]\n        let figure ats ch = Doc.Element \"figure\" ats ch\n        /// Create an HTML element <font> with attributes and children.\n        [<JavaScript; Inline>]\n        let font ats ch = Doc.Element \"font\" ats ch\n        /// Create an HTML element <footer> with attributes and children.\n        [<JavaScript; Inline>]\n        let footer ats ch = Doc.Element \"footer\" ats ch\n        /// Create an HTML element <form> with attributes and children.\n        [<JavaScript; Inline>]\n        let form ats ch = Doc.Element \"form\" ats ch\n        /// Create an HTML element <frame> with attributes and children.\n        [<JavaScript; Inline>]\n        let frame ats ch = Doc.Element \"frame\" ats ch\n        /// Create an HTML element <frameset> with attributes and children.\n        [<JavaScript; Inline>]\n        let frameset ats ch = Doc.Element \"frameset\" ats ch\n        /// Create an HTML element <h1> with attributes and children.\n        [<JavaScript; Inline>]\n        let h1 ats ch = Doc.Element \"h1\" ats ch\n        /// Create an HTML element <h2> with attributes and children.\n        [<JavaScript; Inline>]\n        let h2 ats ch = Doc.Element \"h2\" ats ch\n        /// Create an HTML element <h3> with attributes and children.\n        [<JavaScript; Inline>]\n        let h3 ats ch = Doc.Element \"h3\" ats ch\n        /// Create an HTML element <h4> with attributes and children.\n        [<JavaScript; Inline>]\n        let h4 ats ch = Doc.Element \"h4\" ats ch\n        /// Create an HTML element <h5> with attributes and children.\n        [<JavaScript; Inline>]\n        let h5 ats ch = Doc.Element \"h5\" ats ch\n        /// Create an HTML element <h6> with attributes and children.\n        [<JavaScript; Inline>]\n        let h6 ats ch = Doc.Element \"h6\" ats ch\n        /// Create an HTML element <head> with attributes and children.\n        [<JavaScript; Inline>]\n        let head ats ch = Doc.Element \"head\" ats ch\n        /// Create an HTML element <header> with attributes and children.\n        [<JavaScript; Inline>]\n        let header ats ch = Doc.Element \"header\" ats ch\n        /// Create an HTML element <hgroup> with attributes and children.\n        [<JavaScript; Inline>]\n        let hgroup ats ch = Doc.Element \"hgroup\" ats ch\n        /// Create an HTML element <hr> with attributes and children.\n        [<JavaScript; Inline>]\n        let hr ats ch = Doc.Element \"hr\" ats ch\n        /// Create an HTML element <html> with attributes and children.\n        [<JavaScript; Inline>]\n        let html ats ch = Doc.Element \"html\" ats ch\n        /// Create an HTML element <i> with attributes and children.\n        [<JavaScript; Inline>]\n        let i ats ch = Doc.Element \"i\" ats ch\n        /// Create an HTML element <iframe> with attributes and children.\n        [<JavaScript; Inline>]\n        let iframe ats ch = Doc.Element \"iframe\" ats ch\n        /// Create an HTML element <img> with attributes and children.\n        [<JavaScript; Inline>]\n        let img ats ch = Doc.Element \"img\" ats ch\n        /// Create an HTML element <input> with attributes and children.\n        [<JavaScript; Inline>]\n        let input ats ch = Doc.Element \"input\" ats ch\n        /// Create an HTML element <ins> with attributes and children.\n        [<JavaScript; Inline>]\n        let ins ats ch = Doc.Element \"ins\" ats ch\n        /// Create an HTML element <isindex> with attributes and children.\n        [<JavaScript; Inline>]\n        let isindex ats ch = Doc.Element \"isindex\" ats ch\n        /// Create an HTML element <kbd> with attributes and children.\n        [<JavaScript; Inline>]\n        let kbd ats ch = Doc.Element \"kbd\" ats ch\n        /// Create an HTML element <keygen> with attributes and children.\n        [<JavaScript; Inline>]\n        let keygen ats ch = Doc.Element \"keygen\" ats ch\n        /// Create an HTML element <label> with attributes and children.\n        [<JavaScript; Inline>]\n        let label ats ch = Doc.Element \"label\" ats ch\n        /// Create an HTML element <legend> with attributes and children.\n        [<JavaScript; Inline>]\n        let legend ats ch = Doc.Element \"legend\" ats ch\n        /// Create an HTML element <li> with attributes and children.\n        [<JavaScript; Inline>]\n        let li ats ch = Doc.Element \"li\" ats ch\n        /// Create an HTML element <link> with attributes and children.\n        [<JavaScript; Inline>]\n        let link ats ch = Doc.Element \"link\" ats ch\n        /// Create an HTML element <main> with attributes and children.\n        [<JavaScript; Inline>]\n        let main ats ch = Doc.Element \"main\" ats ch\n        /// Create an HTML element <map> with attributes and children.\n        [<JavaScript; Inline>]\n        let map ats ch = Doc.Element \"map\" ats ch\n        /// Create an HTML element <mark> with attributes and children.\n        [<JavaScript; Inline>]\n        let mark ats ch = Doc.Element \"mark\" ats ch\n        /// Create an HTML element <menu> with attributes and children.\n        [<JavaScript; Inline>]\n        let menu ats ch = Doc.Element \"menu\" ats ch\n        /// Create an HTML element <menuitem> with attributes and children.\n        [<JavaScript; Inline>]\n        let menuitem ats ch = Doc.Element \"menuitem\" ats ch\n        /// Create an HTML element <meta> with attributes and children.\n        [<JavaScript; Inline>]\n        let meta ats ch = Doc.Element \"meta\" ats ch\n        /// Create an HTML element <meter> with attributes and children.\n        [<JavaScript; Inline>]\n        let meter ats ch = Doc.Element \"meter\" ats ch\n        /// Create an HTML element <nav> with attributes and children.\n        [<JavaScript; Inline>]\n        let nav ats ch = Doc.Element \"nav\" ats ch\n        /// Create an HTML element <noframes> with attributes and children.\n        [<JavaScript; Inline>]\n        let noframes ats ch = Doc.Element \"noframes\" ats ch\n        /// Create an HTML element <noscript> with attributes and children.\n        [<JavaScript; Inline>]\n        let noscript ats ch = Doc.Element \"noscript\" ats ch\n        /// Create an HTML element <object> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``object`` ats ch = Doc.Element \"object\" ats ch\n        /// Create an HTML element <ol> with attributes and children.\n        [<JavaScript; Inline>]\n        let ol ats ch = Doc.Element \"ol\" ats ch\n        /// Create an HTML element <optgroup> with attributes and children.\n        [<JavaScript; Inline>]\n        let optgroup ats ch = Doc.Element \"optgroup\" ats ch\n        /// Create an HTML element <option> with attributes and children.\n        [<JavaScript; Inline>]\n        let option ats ch = Doc.Element \"option\" ats ch\n        /// Create an HTML element <output> with attributes and children.\n        [<JavaScript; Inline>]\n        let output ats ch = Doc.Element \"output\" ats ch\n        /// Create an HTML element <p> with attributes and children.\n        [<JavaScript; Inline>]\n        let p ats ch = Doc.Element \"p\" ats ch\n        /// Create an HTML element <param> with attributes and children.\n        [<JavaScript; Inline>]\n        let param ats ch = Doc.Element \"param\" ats ch\n        /// Create an HTML element <picture> with attributes and children.\n        [<JavaScript; Inline>]\n        let picture ats ch = Doc.Element \"picture\" ats ch\n        /// Create an HTML element <pre> with attributes and children.\n        [<JavaScript; Inline>]\n        let pre ats ch = Doc.Element \"pre\" ats ch\n        /// Create an HTML element <progress> with attributes and children.\n        [<JavaScript; Inline>]\n        let progress ats ch = Doc.Element \"progress\" ats ch\n        /// Create an HTML element <q> with attributes and children.\n        [<JavaScript; Inline>]\n        let q ats ch = Doc.Element \"q\" ats ch\n        /// Create an HTML element <rp> with attributes and children.\n        [<JavaScript; Inline>]\n        let rp ats ch = Doc.Element \"rp\" ats ch\n        /// Create an HTML element <rt> with attributes and children.\n        [<JavaScript; Inline>]\n        let rt ats ch = Doc.Element \"rt\" ats ch\n        /// Create an HTML element <rtc> with attributes and children.\n        [<JavaScript; Inline>]\n        let rtc ats ch = Doc.Element \"rtc\" ats ch\n        /// Create an HTML element <ruby> with attributes and children.\n        [<JavaScript; Inline>]\n        let ruby ats ch = Doc.Element \"ruby\" ats ch\n        /// Create an HTML element <s> with attributes and children.\n        [<JavaScript; Inline>]\n        let s ats ch = Doc.Element \"s\" ats ch\n        /// Create an HTML element <samp> with attributes and children.\n        [<JavaScript; Inline>]\n        let samp ats ch = Doc.Element \"samp\" ats ch\n        /// Create an HTML element <script> with attributes and children.\n        [<JavaScript; Inline>]\n        let script ats ch = Doc.Element \"script\" ats ch\n        /// Create an HTML element <section> with attributes and children.\n        [<JavaScript; Inline>]\n        let section ats ch = Doc.Element \"section\" ats ch\n        /// Create an HTML element <select> with attributes and children.\n        [<JavaScript; Inline>]\n        let select ats ch = Doc.Element \"select\" ats ch\n        /// Create an HTML element <shadow> with attributes and children.\n        [<JavaScript; Inline>]\n        let shadow ats ch = Doc.Element \"shadow\" ats ch\n        /// Create an HTML element <small> with attributes and children.\n        [<JavaScript; Inline>]\n        let small ats ch = Doc.Element \"small\" ats ch\n        /// Create an HTML element <source> with attributes and children.\n        [<JavaScript; Inline>]\n        let source ats ch = Doc.Element \"source\" ats ch\n        /// Create an HTML element <span> with attributes and children.\n        [<JavaScript; Inline>]\n        let span ats ch = Doc.Element \"span\" ats ch\n        /// Create an HTML element <strike> with attributes and children.\n        [<JavaScript; Inline>]\n        let strike ats ch = Doc.Element \"strike\" ats ch\n        /// Create an HTML element <strong> with attributes and children.\n        [<JavaScript; Inline>]\n        let strong ats ch = Doc.Element \"strong\" ats ch\n        /// Create an HTML element <style> with attributes and children.\n        [<JavaScript; Inline>]\n        let style ats ch = Doc.Element \"style\" ats ch\n        /// Create an HTML element <sub> with attributes and children.\n        [<JavaScript; Inline>]\n        let sub ats ch = Doc.Element \"sub\" ats ch\n        /// Create an HTML element <summary> with attributes and children.\n        [<JavaScript; Inline>]\n        let summary ats ch = Doc.Element \"summary\" ats ch\n        /// Create an HTML element <sup> with attributes and children.\n        [<JavaScript; Inline>]\n        let sup ats ch = Doc.Element \"sup\" ats ch\n        /// Create an HTML element <table> with attributes and children.\n        [<JavaScript; Inline>]\n        let table ats ch = Doc.Element \"table\" ats ch\n        /// Create an HTML element <tbody> with attributes and children.\n        [<JavaScript; Inline>]\n        let tbody ats ch = Doc.Element \"tbody\" ats ch\n        /// Create an HTML element <td> with attributes and children.\n        [<JavaScript; Inline>]\n        let td ats ch = Doc.Element \"td\" ats ch\n        /// Create an HTML element <template> with attributes and children.\n        [<JavaScript; Inline>]\n        let template ats ch = Doc.Element \"template\" ats ch\n        /// Create an HTML element <textarea> with attributes and children.\n        [<JavaScript; Inline>]\n        let textarea ats ch = Doc.Element \"textarea\" ats ch\n        /// Create an HTML element <tfoot> with attributes and children.\n        [<JavaScript; Inline>]\n        let tfoot ats ch = Doc.Element \"tfoot\" ats ch\n        /// Create an HTML element <th> with attributes and children.\n        [<JavaScript; Inline>]\n        let th ats ch = Doc.Element \"th\" ats ch\n        /// Create an HTML element <thead> with attributes and children.\n        [<JavaScript; Inline>]\n        let thead ats ch = Doc.Element \"thead\" ats ch\n        /// Create an HTML element <time> with attributes and children.\n        [<JavaScript; Inline>]\n        let time ats ch = Doc.Element \"time\" ats ch\n        /// Create an HTML element <title> with attributes and children.\n        [<JavaScript; Inline>]\n        let title ats ch = Doc.Element \"title\" ats ch\n        /// Create an HTML element <tr> with attributes and children.\n        [<JavaScript; Inline>]\n        let tr ats ch = Doc.Element \"tr\" ats ch\n        /// Create an HTML element <track> with attributes and children.\n        [<JavaScript; Inline>]\n        let track ats ch = Doc.Element \"track\" ats ch\n        /// Create an HTML element <tt> with attributes and children.\n        [<JavaScript; Inline>]\n        let tt ats ch = Doc.Element \"tt\" ats ch\n        /// Create an HTML element <u> with attributes and children.\n        [<JavaScript; Inline>]\n        let u ats ch = Doc.Element \"u\" ats ch\n        /// Create an HTML element <ul> with attributes and children.\n        [<JavaScript; Inline>]\n        let ul ats ch = Doc.Element \"ul\" ats ch\n        /// Create an HTML element <var> with attributes and children.\n        [<JavaScript; Inline>]\n        let var ats ch = Doc.Element \"var\" ats ch\n        /// Create an HTML element <video> with attributes and children.\n        [<JavaScript; Inline>]\n        let video ats ch = Doc.Element \"video\" ats ch\n        /// Create an HTML element <wbr> with attributes and children.\n        [<JavaScript; Inline>]\n        let wbr ats ch = Doc.Element \"wbr\" ats ch\n        // }}\n\n    // {{ tag normal [doc]\n    /// Create an HTML element <a> with attributes and children.\n    [<JavaScript; Inline>]\n    let a ats ch = Elt.a ats ch :> Doc\n    /// Create an HTML element <abbr> with attributes and children.\n    [<JavaScript; Inline>]\n    let abbr ats ch = Elt.abbr ats ch :> Doc\n    /// Create an HTML element <address> with attributes and children.\n    [<JavaScript; Inline>]\n    let address ats ch = Elt.address ats ch :> Doc\n    /// Create an HTML element <area> with attributes and children.\n    [<JavaScript; Inline>]\n    let area ats ch = Elt.area ats ch :> Doc\n    /// Create an HTML element <article> with attributes and children.\n    [<JavaScript; Inline>]\n    let article ats ch = Elt.article ats ch :> Doc\n    /// Create an HTML element <aside> with attributes and children.\n    [<JavaScript; Inline>]\n    let aside ats ch = Elt.aside ats ch :> Doc\n    /// Create an HTML element <audio> with attributes and children.\n    [<JavaScript; Inline>]\n    let audio ats ch = Elt.audio ats ch :> Doc\n    /// Create an HTML element <b> with attributes and children.\n    [<JavaScript; Inline>]\n    let b ats ch = Elt.b ats ch :> Doc\n    /// Create an HTML element <base> with attributes and children.\n    [<JavaScript; Inline>]\n    let ``base`` ats ch = Elt.``base`` ats ch :> Doc\n    /// Create an HTML element <bdi> with attributes and children.\n    [<JavaScript; Inline>]\n    let bdi ats ch = Elt.bdi ats ch :> Doc\n    /// Create an HTML element <bdo> with attributes and children.\n    [<JavaScript; Inline>]\n    let bdo ats ch = Elt.bdo ats ch :> Doc\n    /// Create an HTML element <blockquote> with attributes and children.\n    [<JavaScript; Inline>]\n    let blockquote ats ch = Elt.blockquote ats ch :> Doc\n    /// Create an HTML element <body> with attributes and children.\n    [<JavaScript; Inline>]\n    let body ats ch = Elt.body ats ch :> Doc\n    /// Create an HTML element <br> with attributes and children.\n    [<JavaScript; Inline>]\n    let br ats ch = Elt.br ats ch :> Doc\n    /// Create an HTML element <button> with attributes and children.\n    [<JavaScript; Inline>]\n    let button ats ch = Elt.button ats ch :> Doc\n    /// Create an HTML element <canvas> with attributes and children.\n    [<JavaScript; Inline>]\n    let canvas ats ch = Elt.canvas ats ch :> Doc\n    /// Create an HTML element <caption> with attributes and children.\n    [<JavaScript; Inline>]\n    let caption ats ch = Elt.caption ats ch :> Doc\n    /// Create an HTML element <cite> with attributes and children.\n    [<JavaScript; Inline>]\n    let cite ats ch = Elt.cite ats ch :> Doc\n    /// Create an HTML element <code> with attributes and children.\n    [<JavaScript; Inline>]\n    let code ats ch = Elt.code ats ch :> Doc\n    /// Create an HTML element <col> with attributes and children.\n    [<JavaScript; Inline>]\n    let col ats ch = Elt.col ats ch :> Doc\n    /// Create an HTML element <colgroup> with attributes and children.\n    [<JavaScript; Inline>]\n    let colgroup ats ch = Elt.colgroup ats ch :> Doc\n    /// Create an HTML element <command> with attributes and children.\n    [<JavaScript; Inline>]\n    let command ats ch = Elt.command ats ch :> Doc\n    /// Create an HTML element <datalist> with attributes and children.\n    [<JavaScript; Inline>]\n    let datalist ats ch = Elt.datalist ats ch :> Doc\n    /// Create an HTML element <dd> with attributes and children.\n    [<JavaScript; Inline>]\n    let dd ats ch = Elt.dd ats ch :> Doc\n    /// Create an HTML element <del> with attributes and children.\n    [<JavaScript; Inline>]\n    let del ats ch = Elt.del ats ch :> Doc\n    /// Create an HTML element <details> with attributes and children.\n    [<JavaScript; Inline>]\n    let details ats ch = Elt.details ats ch :> Doc\n    /// Create an HTML element <dfn> with attributes and children.\n    [<JavaScript; Inline>]\n    let dfn ats ch = Elt.dfn ats ch :> Doc\n    /// Create an HTML element <div> with attributes and children.\n    [<JavaScript; Inline>]\n    let div ats ch = Elt.div ats ch :> Doc\n    /// Create an HTML element <dl> with attributes and children.\n    [<JavaScript; Inline>]\n    let dl ats ch = Elt.dl ats ch :> Doc\n    /// Create an HTML element <dt> with attributes and children.\n    [<JavaScript; Inline>]\n    let dt ats ch = Elt.dt ats ch :> Doc\n    /// Create an HTML element <em> with attributes and children.\n    [<JavaScript; Inline>]\n    let em ats ch = Elt.em ats ch :> Doc\n    /// Create an HTML element <embed> with attributes and children.\n    [<JavaScript; Inline>]\n    let embed ats ch = Elt.embed ats ch :> Doc\n    /// Create an HTML element <fieldset> with attributes and children.\n    [<JavaScript; Inline>]\n    let fieldset ats ch = Elt.fieldset ats ch :> Doc\n    /// Create an HTML element <figcaption> with attributes and children.\n    [<JavaScript; Inline>]\n    let figcaption ats ch = Elt.figcaption ats ch :> Doc\n    /// Create an HTML element <figure> with attributes and children.\n    [<JavaScript; Inline>]\n    let figure ats ch = Elt.figure ats ch :> Doc\n    /// Create an HTML element <footer> with attributes and children.\n    [<JavaScript; Inline>]\n    let footer ats ch = Elt.footer ats ch :> Doc\n    /// Create an HTML element <form> with attributes and children.\n    [<JavaScript; Inline>]\n    let form ats ch = Elt.form ats ch :> Doc\n    /// Create an HTML element <h1> with attributes and children.\n    [<JavaScript; Inline>]\n    let h1 ats ch = Elt.h1 ats ch :> Doc\n    /// Create an HTML element <h2> with attributes and children.\n    [<JavaScript; Inline>]\n    let h2 ats ch = Elt.h2 ats ch :> Doc\n    /// Create an HTML element <h3> with attributes and children.\n    [<JavaScript; Inline>]\n    let h3 ats ch = Elt.h3 ats ch :> Doc\n    /// Create an HTML element <h4> with attributes and children.\n    [<JavaScript; Inline>]\n    let h4 ats ch = Elt.h4 ats ch :> Doc\n    /// Create an HTML element <h5> with attributes and children.\n    [<JavaScript; Inline>]\n    let h5 ats ch = Elt.h5 ats ch :> Doc\n    /// Create an HTML element <h6> with attributes and children.\n    [<JavaScript; Inline>]\n    let h6 ats ch = Elt.h6 ats ch :> Doc\n    /// Create an HTML element <head> with attributes and children.\n    [<JavaScript; Inline>]\n    let head ats ch = Elt.head ats ch :> Doc\n    /// Create an HTML element <header> with attributes and children.\n    [<JavaScript; Inline>]\n    let header ats ch = Elt.header ats ch :> Doc\n    /// Create an HTML element <hgroup> with attributes and children.\n    [<JavaScript; Inline>]\n    let hgroup ats ch = Elt.hgroup ats ch :> Doc\n    /// Create an HTML element <hr> with attributes and children.\n    [<JavaScript; Inline>]\n    let hr ats ch = Elt.hr ats ch :> Doc\n    /// Create an HTML element <html> with attributes and children.\n    [<JavaScript; Inline>]\n    let html ats ch = Elt.html ats ch :> Doc\n    /// Create an HTML element <i> with attributes and children.\n    [<JavaScript; Inline>]\n    let i ats ch = Elt.i ats ch :> Doc\n    /// Create an HTML element <iframe> with attributes and children.\n    [<JavaScript; Inline>]\n    let iframe ats ch = Elt.iframe ats ch :> Doc\n    /// Create an HTML element <img> with attributes and children.\n    [<JavaScript; Inline>]\n    let img ats ch = Elt.img ats ch :> Doc\n    /// Create an HTML element <input> with attributes and children.\n    [<JavaScript; Inline>]\n    let input ats ch = Elt.input ats ch :> Doc\n    /// Create an HTML element <ins> with attributes and children.\n    [<JavaScript; Inline>]\n    let ins ats ch = Elt.ins ats ch :> Doc\n    /// Create an HTML element <kbd> with attributes and children.\n    [<JavaScript; Inline>]\n    let kbd ats ch = Elt.kbd ats ch :> Doc\n    /// Create an HTML element <keygen> with attributes and children.\n    [<JavaScript; Inline>]\n    let keygen ats ch = Elt.keygen ats ch :> Doc\n    /// Create an HTML element <label> with attributes and children.\n    [<JavaScript; Inline>]\n    let label ats ch = Elt.label ats ch :> Doc\n    /// Create an HTML element <legend> with attributes and children.\n    [<JavaScript; Inline>]\n    let legend ats ch = Elt.legend ats ch :> Doc\n    /// Create an HTML element <li> with attributes and children.\n    [<JavaScript; Inline>]\n    let li ats ch = Elt.li ats ch :> Doc\n    /// Create an HTML element <link> with attributes and children.\n    [<JavaScript; Inline>]\n    let link ats ch = Elt.link ats ch :> Doc\n    /// Create an HTML element <mark> with attributes and children.\n    [<JavaScript; Inline>]\n    let mark ats ch = Elt.mark ats ch :> Doc\n    /// Create an HTML element <meta> with attributes and children.\n    [<JavaScript; Inline>]\n    let meta ats ch = Elt.meta ats ch :> Doc\n    /// Create an HTML element <meter> with attributes and children.\n    [<JavaScript; Inline>]\n    let meter ats ch = Elt.meter ats ch :> Doc\n    /// Create an HTML element <nav> with attributes and children.\n    [<JavaScript; Inline>]\n    let nav ats ch = Elt.nav ats ch :> Doc\n    /// Create an HTML element <noframes> with attributes and children.\n    [<JavaScript; Inline>]\n    let noframes ats ch = Elt.noframes ats ch :> Doc\n    /// Create an HTML element <noscript> with attributes and children.\n    [<JavaScript; Inline>]\n    let noscript ats ch = Elt.noscript ats ch :> Doc\n    /// Create an HTML element <ol> with attributes and children.\n    [<JavaScript; Inline>]\n    let ol ats ch = Elt.ol ats ch :> Doc\n    /// Create an HTML element <optgroup> with attributes and children.\n    [<JavaScript; Inline>]\n    let optgroup ats ch = Elt.optgroup ats ch :> Doc\n    /// Create an HTML element <output> with attributes and children.\n    [<JavaScript; Inline>]\n    let output ats ch = Elt.output ats ch :> Doc\n    /// Create an HTML element <p> with attributes and children.\n    [<JavaScript; Inline>]\n    let p ats ch = Elt.p ats ch :> Doc\n    /// Create an HTML element <param> with attributes and children.\n    [<JavaScript; Inline>]\n    let param ats ch = Elt.param ats ch :> Doc\n    /// Create an HTML element <picture> with attributes and children.\n    [<JavaScript; Inline>]\n    let picture ats ch = Elt.picture ats ch :> Doc\n    /// Create an HTML element <pre> with attributes and children.\n    [<JavaScript; Inline>]\n    let pre ats ch = Elt.pre ats ch :> Doc\n    /// Create an HTML element <progress> with attributes and children.\n    [<JavaScript; Inline>]\n    let progress ats ch = Elt.progress ats ch :> Doc\n    /// Create an HTML element <q> with attributes and children.\n    [<JavaScript; Inline>]\n    let q ats ch = Elt.q ats ch :> Doc\n    /// Create an HTML element <rp> with attributes and children.\n    [<JavaScript; Inline>]\n    let rp ats ch = Elt.rp ats ch :> Doc\n    /// Create an HTML element <rt> with attributes and children.\n    [<JavaScript; Inline>]\n    let rt ats ch = Elt.rt ats ch :> Doc\n    /// Create an HTML element <rtc> with attributes and children.\n    [<JavaScript; Inline>]\n    let rtc ats ch = Elt.rtc ats ch :> Doc\n    /// Create an HTML element <ruby> with attributes and children.\n    [<JavaScript; Inline>]\n    let ruby ats ch = Elt.ruby ats ch :> Doc\n    /// Create an HTML element <samp> with attributes and children.\n    [<JavaScript; Inline>]\n    let samp ats ch = Elt.samp ats ch :> Doc\n    /// Create an HTML element <script> with attributes and children.\n    [<JavaScript; Inline>]\n    let script ats ch = Elt.script ats ch :> Doc\n    /// Create an HTML element <section> with attributes and children.\n    [<JavaScript; Inline>]\n    let section ats ch = Elt.section ats ch :> Doc\n    /// Create an HTML element <select> with attributes and children.\n    [<JavaScript; Inline>]\n    let select ats ch = Elt.select ats ch :> Doc\n    /// Create an HTML element <shadow> with attributes and children.\n    [<JavaScript; Inline>]\n    let shadow ats ch = Elt.shadow ats ch :> Doc\n    /// Create an HTML element <small> with attributes and children.\n    [<JavaScript; Inline>]\n    let small ats ch = Elt.small ats ch :> Doc\n    /// Create an HTML element <source> with attributes and children.\n    [<JavaScript; Inline>]\n    let source ats ch = Elt.source ats ch :> Doc\n    /// Create an HTML element <span> with attributes and children.\n    [<JavaScript; Inline>]\n    let span ats ch = Elt.span ats ch :> Doc\n    /// Create an HTML element <strong> with attributes and children.\n    [<JavaScript; Inline>]\n    let strong ats ch = Elt.strong ats ch :> Doc\n    /// Create an HTML element <sub> with attributes and children.\n    [<JavaScript; Inline>]\n    let sub ats ch = Elt.sub ats ch :> Doc\n    /// Create an HTML element <summary> with attributes and children.\n    [<JavaScript; Inline>]\n    let summary ats ch = Elt.summary ats ch :> Doc\n    /// Create an HTML element <sup> with attributes and children.\n    [<JavaScript; Inline>]\n    let sup ats ch = Elt.sup ats ch :> Doc\n    /// Create an HTML element <table> with attributes and children.\n    [<JavaScript; Inline>]\n    let table ats ch = Elt.table ats ch :> Doc\n    /// Create an HTML element <tbody> with attributes and children.\n    [<JavaScript; Inline>]\n    let tbody ats ch = Elt.tbody ats ch :> Doc\n    /// Create an HTML element <td> with attributes and children.\n    [<JavaScript; Inline>]\n    let td ats ch = Elt.td ats ch :> Doc\n    /// Create an HTML element <textarea> with attributes and children.\n    [<JavaScript; Inline>]\n    let textarea ats ch = Elt.textarea ats ch :> Doc\n    /// Create an HTML element <tfoot> with attributes and children.\n    [<JavaScript; Inline>]\n    let tfoot ats ch = Elt.tfoot ats ch :> Doc\n    /// Create an HTML element <th> with attributes and children.\n    [<JavaScript; Inline>]\n    let th ats ch = Elt.th ats ch :> Doc\n    /// Create an HTML element <thead> with attributes and children.\n    [<JavaScript; Inline>]\n    let thead ats ch = Elt.thead ats ch :> Doc\n    /// Create an HTML element <time> with attributes and children.\n    [<JavaScript; Inline>]\n    let time ats ch = Elt.time ats ch :> Doc\n    /// Create an HTML element <tr> with attributes and children.\n    [<JavaScript; Inline>]\n    let tr ats ch = Elt.tr ats ch :> Doc\n    /// Create an HTML element <track> with attributes and children.\n    [<JavaScript; Inline>]\n    let track ats ch = Elt.track ats ch :> Doc\n    /// Create an HTML element <ul> with attributes and children.\n    [<JavaScript; Inline>]\n    let ul ats ch = Elt.ul ats ch :> Doc\n    /// Create an HTML element <video> with attributes and children.\n    [<JavaScript; Inline>]\n    let video ats ch = Elt.video ats ch :> Doc\n    /// Create an HTML element <wbr> with attributes and children.\n    [<JavaScript; Inline>]\n    let wbr ats ch = Elt.wbr ats ch :> Doc\n    // }}\n\n    /// HTML5 element functions.\n    module Tags =\n\n        // {{ tag colliding deprecated [doc]\n        /// Create an HTML element <acronym> with attributes and children.\n        [<JavaScript; Inline>]\n        let acronym ats ch = Elt.acronym ats ch :> Doc\n        /// Create an HTML element <applet> with attributes and children.\n        [<JavaScript; Inline>]\n        let applet ats ch = Elt.applet ats ch :> Doc\n        /// Create an HTML element <basefont> with attributes and children.\n        [<JavaScript; Inline>]\n        let basefont ats ch = Elt.basefont ats ch :> Doc\n        /// Create an HTML element <big> with attributes and children.\n        [<JavaScript; Inline>]\n        let big ats ch = Elt.big ats ch :> Doc\n        /// Create an HTML element <center> with attributes and children.\n        [<JavaScript; Inline>]\n        let center ats ch = Elt.center ats ch :> Doc\n        /// Create an HTML element <content> with attributes and children.\n        [<JavaScript; Inline>]\n        let content ats ch = Elt.content ats ch :> Doc\n        /// Create an HTML element <data> with attributes and children.\n        [<JavaScript; Inline>]\n        let data ats ch = Elt.data ats ch :> Doc\n        /// Create an HTML element <dir> with attributes and children.\n        [<JavaScript; Inline>]\n        let dir ats ch = Elt.dir ats ch :> Doc\n        /// Create an HTML element <font> with attributes and children.\n        [<JavaScript; Inline>]\n        let font ats ch = Elt.font ats ch :> Doc\n        /// Create an HTML element <frame> with attributes and children.\n        [<JavaScript; Inline>]\n        let frame ats ch = Elt.frame ats ch :> Doc\n        /// Create an HTML element <frameset> with attributes and children.\n        [<JavaScript; Inline>]\n        let frameset ats ch = Elt.frameset ats ch :> Doc\n        /// Create an HTML element <isindex> with attributes and children.\n        [<JavaScript; Inline>]\n        let isindex ats ch = Elt.isindex ats ch :> Doc\n        /// Create an HTML element <main> with attributes and children.\n        [<JavaScript; Inline>]\n        let main ats ch = Elt.main ats ch :> Doc\n        /// Create an HTML element <map> with attributes and children.\n        [<JavaScript; Inline>]\n        let map ats ch = Elt.map ats ch :> Doc\n        /// Create an HTML element <menu> with attributes and children.\n        [<JavaScript; Inline>]\n        let menu ats ch = Elt.menu ats ch :> Doc\n        /// Create an HTML element <menuitem> with attributes and children.\n        [<JavaScript; Inline>]\n        let menuitem ats ch = Elt.menuitem ats ch :> Doc\n        /// Create an HTML element <object> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``object`` ats ch = Elt.``object`` ats ch :> Doc\n        /// Create an HTML element <option> with attributes and children.\n        [<JavaScript; Inline>]\n        let option ats ch = Elt.option ats ch :> Doc\n        /// Create an HTML element <s> with attributes and children.\n        [<JavaScript; Inline>]\n        let s ats ch = Elt.s ats ch :> Doc\n        /// Create an HTML element <strike> with attributes and children.\n        [<JavaScript; Inline>]\n        let strike ats ch = Elt.strike ats ch :> Doc\n        /// Create an HTML element <style> with attributes and children.\n        [<JavaScript; Inline>]\n        let style ats ch = Elt.style ats ch :> Doc\n        /// Create an HTML element <template> with attributes and children.\n        [<JavaScript; Inline>]\n        let template ats ch = Elt.template ats ch :> Doc\n        /// Create an HTML element <title> with attributes and children.\n        [<JavaScript; Inline>]\n        let title ats ch = Elt.title ats ch :> Doc\n        /// Create an HTML element <tt> with attributes and children.\n        [<JavaScript; Inline>]\n        let tt ats ch = Elt.tt ats ch :> Doc\n        /// Create an HTML element <u> with attributes and children.\n        [<JavaScript; Inline>]\n        let u ats ch = Elt.u ats ch :> Doc\n        /// Create an HTML element <var> with attributes and children.\n        [<JavaScript; Inline>]\n        let var ats ch = Elt.var ats ch :> Doc\n        // }}\n\n    /// SVG elements.\n    module SvgElements =\n\n        module Elt =\n\n            // {{ svgtag normal [elt]\n            /// Create an SVG element <a> with attributes and children.\n            [<JavaScript; Inline>]\n            let a ats ch = Doc.SvgElement \"a\" ats ch\n            /// Create an SVG element <altglyph> with attributes and children.\n            [<JavaScript; Inline>]\n            let altglyph ats ch = Doc.SvgElement \"altglyph\" ats ch\n            /// Create an SVG element <altglyphdef> with attributes and children.\n            [<JavaScript; Inline>]\n            let altglyphdef ats ch = Doc.SvgElement \"altglyphdef\" ats ch\n            /// Create an SVG element <altglyphitem> with attributes and children.\n            [<JavaScript; Inline>]\n            let altglyphitem ats ch = Doc.SvgElement \"altglyphitem\" ats ch\n            /// Create an SVG element <animate> with attributes and children.\n            [<JavaScript; Inline>]\n            let animate ats ch = Doc.SvgElement \"animate\" ats ch\n            /// Create an SVG element <animatecolor> with attributes and children.\n            [<JavaScript; Inline>]\n            let animatecolor ats ch = Doc.SvgElement \"animatecolor\" ats ch\n            /// Create an SVG element <animatemotion> with attributes and children.\n            [<JavaScript; Inline>]\n            let animatemotion ats ch = Doc.SvgElement \"animatemotion\" ats ch\n            /// Create an SVG element <animatetransform> with attributes and children.\n            [<JavaScript; Inline>]\n            let animatetransform ats ch = Doc.SvgElement \"animatetransform\" ats ch\n            /// Create an SVG element <circle> with attributes and children.\n            [<JavaScript; Inline>]\n            let circle ats ch = Doc.SvgElement \"circle\" ats ch\n            /// Create an SVG element <clippath> with attributes and children.\n            [<JavaScript; Inline>]\n            let clippath ats ch = Doc.SvgElement \"clippath\" ats ch\n            /// Create an SVG element <color-profile> with attributes and children.\n            [<JavaScript; Inline>]\n            let colorProfile ats ch = Doc.SvgElement \"color-profile\" ats ch\n            /// Create an SVG element <cursor> with attributes and children.\n            [<JavaScript; Inline>]\n            let cursor ats ch = Doc.SvgElement \"cursor\" ats ch\n            /// Create an SVG element <defs> with attributes and children.\n            [<JavaScript; Inline>]\n            let defs ats ch = Doc.SvgElement \"defs\" ats ch\n            /// Create an SVG element <desc> with attributes and children.\n            [<JavaScript; Inline>]\n            let desc ats ch = Doc.SvgElement \"desc\" ats ch\n            /// Create an SVG element <ellipse> with attributes and children.\n            [<JavaScript; Inline>]\n            let ellipse ats ch = Doc.SvgElement \"ellipse\" ats ch\n            /// Create an SVG element <feblend> with attributes and children.\n            [<JavaScript; Inline>]\n            let feblend ats ch = Doc.SvgElement \"feblend\" ats ch\n            /// Create an SVG element <fecolormatrix> with attributes and children.\n            [<JavaScript; Inline>]\n            let fecolormatrix ats ch = Doc.SvgElement \"fecolormatrix\" ats ch\n            /// Create an SVG element <fecomponenttransfer> with attributes and children.\n            [<JavaScript; Inline>]\n            let fecomponenttransfer ats ch = Doc.SvgElement \"fecomponenttransfer\" ats ch\n            /// Create an SVG element <fecomposite> with attributes and children.\n            [<JavaScript; Inline>]\n            let fecomposite ats ch = Doc.SvgElement \"fecomposite\" ats ch\n            /// Create an SVG element <feconvolvematrix> with attributes and children.\n            [<JavaScript; Inline>]\n            let feconvolvematrix ats ch = Doc.SvgElement \"feconvolvematrix\" ats ch\n            /// Create an SVG element <fediffuselighting> with attributes and children.\n            [<JavaScript; Inline>]\n            let fediffuselighting ats ch = Doc.SvgElement \"fediffuselighting\" ats ch\n            /// Create an SVG element <fedisplacementmap> with attributes and children.\n            [<JavaScript; Inline>]\n            let fedisplacementmap ats ch = Doc.SvgElement \"fedisplacementmap\" ats ch\n            /// Create an SVG element <fedistantlight> with attributes and children.\n            [<JavaScript; Inline>]\n            let fedistantlight ats ch = Doc.SvgElement \"fedistantlight\" ats ch\n            /// Create an SVG element <feflood> with attributes and children.\n            [<JavaScript; Inline>]\n            let feflood ats ch = Doc.SvgElement \"feflood\" ats ch\n            /// Create an SVG element <fefunca> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefunca ats ch = Doc.SvgElement \"fefunca\" ats ch\n            /// Create an SVG element <fefuncb> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefuncb ats ch = Doc.SvgElement \"fefuncb\" ats ch\n            /// Create an SVG element <fefuncg> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefuncg ats ch = Doc.SvgElement \"fefuncg\" ats ch\n            /// Create an SVG element <fefuncr> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefuncr ats ch = Doc.SvgElement \"fefuncr\" ats ch\n            /// Create an SVG element <fegaussianblur> with attributes and children.\n            [<JavaScript; Inline>]\n            let fegaussianblur ats ch = Doc.SvgElement \"fegaussianblur\" ats ch\n            /// Create an SVG element <feimage> with attributes and children.\n            [<JavaScript; Inline>]\n            let feimage ats ch = Doc.SvgElement \"feimage\" ats ch\n            /// Create an SVG element <femerge> with attributes and children.\n            [<JavaScript; Inline>]\n            let femerge ats ch = Doc.SvgElement \"femerge\" ats ch\n            /// Create an SVG element <femergenode> with attributes and children.\n            [<JavaScript; Inline>]\n            let femergenode ats ch = Doc.SvgElement \"femergenode\" ats ch\n            /// Create an SVG element <femorphology> with attributes and children.\n            [<JavaScript; Inline>]\n            let femorphology ats ch = Doc.SvgElement \"femorphology\" ats ch\n            /// Create an SVG element <feoffset> with attributes and children.\n            [<JavaScript; Inline>]\n            let feoffset ats ch = Doc.SvgElement \"feoffset\" ats ch\n            /// Create an SVG element <fepointlight> with attributes and children.\n            [<JavaScript; Inline>]\n            let fepointlight ats ch = Doc.SvgElement \"fepointlight\" ats ch\n            /// Create an SVG element <fespecularlighting> with attributes and children.\n            [<JavaScript; Inline>]\n            let fespecularlighting ats ch = Doc.SvgElement \"fespecularlighting\" ats ch\n            /// Create an SVG element <fespotlight> with attributes and children.\n            [<JavaScript; Inline>]\n            let fespotlight ats ch = Doc.SvgElement \"fespotlight\" ats ch\n            /// Create an SVG element <fetile> with attributes and children.\n            [<JavaScript; Inline>]\n            let fetile ats ch = Doc.SvgElement \"fetile\" ats ch\n            /// Create an SVG element <feturbulence> with attributes and children.\n            [<JavaScript; Inline>]\n            let feturbulence ats ch = Doc.SvgElement \"feturbulence\" ats ch\n            /// Create an SVG element <filter> with attributes and children.\n            [<JavaScript; Inline>]\n            let filter ats ch = Doc.SvgElement \"filter\" ats ch\n            /// Create an SVG element <font> with attributes and children.\n            [<JavaScript; Inline>]\n            let font ats ch = Doc.SvgElement \"font\" ats ch\n            /// Create an SVG element <font-face> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFace ats ch = Doc.SvgElement \"font-face\" ats ch\n            /// Create an SVG element <font-face-format> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceFormat ats ch = Doc.SvgElement \"font-face-format\" ats ch\n            /// Create an SVG element <font-face-name> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceName ats ch = Doc.SvgElement \"font-face-name\" ats ch\n            /// Create an SVG element <font-face-src> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceSrc ats ch = Doc.SvgElement \"font-face-src\" ats ch\n            /// Create an SVG element <font-face-uri> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceUri ats ch = Doc.SvgElement \"font-face-uri\" ats ch\n            /// Create an SVG element <foreignobject> with attributes and children.\n            [<JavaScript; Inline>]\n            let foreignobject ats ch = Doc.SvgElement \"foreignobject\" ats ch\n            /// Create an SVG element <g> with attributes and children.\n            [<JavaScript; Inline>]\n            let g ats ch = Doc.SvgElement \"g\" ats ch\n            /// Create an SVG element <glyph> with attributes and children.\n            [<JavaScript; Inline>]\n            let glyph ats ch = Doc.SvgElement \"glyph\" ats ch\n            /// Create an SVG element <glyphref> with attributes and children.\n            [<JavaScript; Inline>]\n            let glyphref ats ch = Doc.SvgElement \"glyphref\" ats ch\n            /// Create an SVG element <hkern> with attributes and children.\n            [<JavaScript; Inline>]\n            let hkern ats ch = Doc.SvgElement \"hkern\" ats ch\n            /// Create an SVG element <image> with attributes and children.\n            [<JavaScript; Inline>]\n            let image ats ch = Doc.SvgElement \"image\" ats ch\n            /// Create an SVG element <line> with attributes and children.\n            [<JavaScript; Inline>]\n            let line ats ch = Doc.SvgElement \"line\" ats ch\n            /// Create an SVG element <lineargradient> with attributes and children.\n            [<JavaScript; Inline>]\n            let lineargradient ats ch = Doc.SvgElement \"lineargradient\" ats ch\n            /// Create an SVG element <marker> with attributes and children.\n            [<JavaScript; Inline>]\n            let marker ats ch = Doc.SvgElement \"marker\" ats ch\n            /// Create an SVG element <mask> with attributes and children.\n            [<JavaScript; Inline>]\n            let mask ats ch = Doc.SvgElement \"mask\" ats ch\n            /// Create an SVG element <metadata> with attributes and children.\n            [<JavaScript; Inline>]\n            let metadata ats ch = Doc.SvgElement \"metadata\" ats ch\n            /// Create an SVG element <missing-glyph> with attributes and children.\n            [<JavaScript; Inline>]\n            let missingGlyph ats ch = Doc.SvgElement \"missing-glyph\" ats ch\n            /// Create an SVG element <mpath> with attributes and children.\n            [<JavaScript; Inline>]\n            let mpath ats ch = Doc.SvgElement \"mpath\" ats ch\n            /// Create an SVG element <path> with attributes and children.\n            [<JavaScript; Inline>]\n            let path ats ch = Doc.SvgElement \"path\" ats ch\n            /// Create an SVG element <pattern> with attributes and children.\n            [<JavaScript; Inline>]\n            let pattern ats ch = Doc.SvgElement \"pattern\" ats ch\n            /// Create an SVG element <polygon> with attributes and children.\n            [<JavaScript; Inline>]\n            let polygon ats ch = Doc.SvgElement \"polygon\" ats ch\n            /// Create an SVG element <polyline> with attributes and children.\n            [<JavaScript; Inline>]\n            let polyline ats ch = Doc.SvgElement \"polyline\" ats ch\n            /// Create an SVG element <radialgradient> with attributes and children.\n            [<JavaScript; Inline>]\n            let radialgradient ats ch = Doc.SvgElement \"radialgradient\" ats ch\n            /// Create an SVG element <rect> with attributes and children.\n            [<JavaScript; Inline>]\n            let rect ats ch = Doc.SvgElement \"rect\" ats ch\n            /// Create an SVG element <script> with attributes and children.\n            [<JavaScript; Inline>]\n            let script ats ch = Doc.SvgElement \"script\" ats ch\n            /// Create an SVG element <set> with attributes and children.\n            [<JavaScript; Inline>]\n            let set ats ch = Doc.SvgElement \"set\" ats ch\n            /// Create an SVG element <stop> with attributes and children.\n            [<JavaScript; Inline>]\n            let stop ats ch = Doc.SvgElement \"stop\" ats ch\n            /// Create an SVG element <style> with attributes and children.\n            [<JavaScript; Inline>]\n            let style ats ch = Doc.SvgElement \"style\" ats ch\n            /// Create an SVG element <svg> with attributes and children.\n            [<JavaScript; Inline>]\n            let svg ats ch = Doc.SvgElement \"svg\" ats ch\n            /// Create an SVG element <switch> with attributes and children.\n            [<JavaScript; Inline>]\n            let switch ats ch = Doc.SvgElement \"switch\" ats ch\n            /// Create an SVG element <symbol> with attributes and children.\n            [<JavaScript; Inline>]\n            let symbol ats ch = Doc.SvgElement \"symbol\" ats ch\n            /// Create an SVG element <text> with attributes and children.\n            [<JavaScript; Inline>]\n            let text ats ch = Doc.SvgElement \"text\" ats ch\n            /// Create an SVG element <textpath> with attributes and children.\n            [<JavaScript; Inline>]\n            let textpath ats ch = Doc.SvgElement \"textpath\" ats ch\n            /// Create an SVG element <title> with attributes and children.\n            [<JavaScript; Inline>]\n            let title ats ch = Doc.SvgElement \"title\" ats ch\n            /// Create an SVG element <tref> with attributes and children.\n            [<JavaScript; Inline>]\n            let tref ats ch = Doc.SvgElement \"tref\" ats ch\n            /// Create an SVG element <tspan> with attributes and children.\n            [<JavaScript; Inline>]\n            let tspan ats ch = Doc.SvgElement \"tspan\" ats ch\n            /// Create an SVG element <use> with attributes and children.\n            [<JavaScript; Inline>]\n            let ``use`` ats ch = Doc.SvgElement \"use\" ats ch\n            /// Create an SVG element <view> with attributes and children.\n            [<JavaScript; Inline>]\n            let view ats ch = Doc.SvgElement \"view\" ats ch\n            /// Create an SVG element <vkern> with attributes and children.\n            [<JavaScript; Inline>]\n            let vkern ats ch = Doc.SvgElement \"vkern\" ats ch\n            // }}\n\n        // {{ svgtag normal [doc]\n        /// Create an SVG element <a> with attributes and children.\n        [<JavaScript; Inline>]\n        let a ats ch = Elt.a ats ch :> Doc\n        /// Create an SVG element <altglyph> with attributes and children.\n        [<JavaScript; Inline>]\n        let altglyph ats ch = Elt.altglyph ats ch :> Doc\n        /// Create an SVG element <altglyphdef> with attributes and children.\n        [<JavaScript; Inline>]\n        let altglyphdef ats ch = Elt.altglyphdef ats ch :> Doc\n        /// Create an SVG element <altglyphitem> with attributes and children.\n        [<JavaScript; Inline>]\n        let altglyphitem ats ch = Elt.altglyphitem ats ch :> Doc\n        /// Create an SVG element <animate> with attributes and children.\n        [<JavaScript; Inline>]\n        let animate ats ch = Elt.animate ats ch :> Doc\n        /// Create an SVG element <animatecolor> with attributes and children.\n        [<JavaScript; Inline>]\n        let animatecolor ats ch = Elt.animatecolor ats ch :> Doc\n        /// Create an SVG element <animatemotion> with attributes and children.\n        [<JavaScript; Inline>]\n        let animatemotion ats ch = Elt.animatemotion ats ch :> Doc\n        /// Create an SVG element <animatetransform> with attributes and children.\n        [<JavaScript; Inline>]\n        let animatetransform ats ch = Elt.animatetransform ats ch :> Doc\n        /// Create an SVG element <circle> with attributes and children.\n        [<JavaScript; Inline>]\n        let circle ats ch = Elt.circle ats ch :> Doc\n        /// Create an SVG element <clippath> with attributes and children.\n        [<JavaScript; Inline>]\n        let clippath ats ch = Elt.clippath ats ch :> Doc\n        /// Create an SVG element <color-profile> with attributes and children.\n        [<JavaScript; Inline>]\n        let colorProfile ats ch = Elt.colorProfile ats ch :> Doc\n        /// Create an SVG element <cursor> with attributes and children.\n        [<JavaScript; Inline>]\n        let cursor ats ch = Elt.cursor ats ch :> Doc\n        /// Create an SVG element <defs> with attributes and children.\n        [<JavaScript; Inline>]\n        let defs ats ch = Elt.defs ats ch :> Doc\n        /// Create an SVG element <desc> with attributes and children.\n        [<JavaScript; Inline>]\n        let desc ats ch = Elt.desc ats ch :> Doc\n        /// Create an SVG element <ellipse> with attributes and children.\n        [<JavaScript; Inline>]\n        let ellipse ats ch = Elt.ellipse ats ch :> Doc\n        /// Create an SVG element <feblend> with attributes and children.\n        [<JavaScript; Inline>]\n        let feblend ats ch = Elt.feblend ats ch :> Doc\n        /// Create an SVG element <fecolormatrix> with attributes and children.\n        [<JavaScript; Inline>]\n        let fecolormatrix ats ch = Elt.fecolormatrix ats ch :> Doc\n        /// Create an SVG element <fecomponenttransfer> with attributes and children.\n        [<JavaScript; Inline>]\n        let fecomponenttransfer ats ch = Elt.fecomponenttransfer ats ch :> Doc\n        /// Create an SVG element <fecomposite> with attributes and children.\n        [<JavaScript; Inline>]\n        let fecomposite ats ch = Elt.fecomposite ats ch :> Doc\n        /// Create an SVG element <feconvolvematrix> with attributes and children.\n        [<JavaScript; Inline>]\n        let feconvolvematrix ats ch = Elt.feconvolvematrix ats ch :> Doc\n        /// Create an SVG element <fediffuselighting> with attributes and children.\n        [<JavaScript; Inline>]\n        let fediffuselighting ats ch = Elt.fediffuselighting ats ch :> Doc\n        /// Create an SVG element <fedisplacementmap> with attributes and children.\n        [<JavaScript; Inline>]\n        let fedisplacementmap ats ch = Elt.fedisplacementmap ats ch :> Doc\n        /// Create an SVG element <fedistantlight> with attributes and children.\n        [<JavaScript; Inline>]\n        let fedistantlight ats ch = Elt.fedistantlight ats ch :> Doc\n        /// Create an SVG element <feflood> with attributes and children.\n        [<JavaScript; Inline>]\n        let feflood ats ch = Elt.feflood ats ch :> Doc\n        /// Create an SVG element <fefunca> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefunca ats ch = Elt.fefunca ats ch :> Doc\n        /// Create an SVG element <fefuncb> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefuncb ats ch = Elt.fefuncb ats ch :> Doc\n        /// Create an SVG element <fefuncg> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefuncg ats ch = Elt.fefuncg ats ch :> Doc\n        /// Create an SVG element <fefuncr> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefuncr ats ch = Elt.fefuncr ats ch :> Doc\n        /// Create an SVG element <fegaussianblur> with attributes and children.\n        [<JavaScript; Inline>]\n        let fegaussianblur ats ch = Elt.fegaussianblur ats ch :> Doc\n        /// Create an SVG element <feimage> with attributes and children.\n        [<JavaScript; Inline>]\n        let feimage ats ch = Elt.feimage ats ch :> Doc\n        /// Create an SVG element <femerge> with attributes and children.\n        [<JavaScript; Inline>]\n        let femerge ats ch = Elt.femerge ats ch :> Doc\n        /// Create an SVG element <femergenode> with attributes and children.\n        [<JavaScript; Inline>]\n        let femergenode ats ch = Elt.femergenode ats ch :> Doc\n        /// Create an SVG element <femorphology> with attributes and children.\n        [<JavaScript; Inline>]\n        let femorphology ats ch = Elt.femorphology ats ch :> Doc\n        /// Create an SVG element <feoffset> with attributes and children.\n        [<JavaScript; Inline>]\n        let feoffset ats ch = Elt.feoffset ats ch :> Doc\n        /// Create an SVG element <fepointlight> with attributes and children.\n        [<JavaScript; Inline>]\n        let fepointlight ats ch = Elt.fepointlight ats ch :> Doc\n        /// Create an SVG element <fespecularlighting> with attributes and children.\n        [<JavaScript; Inline>]\n        let fespecularlighting ats ch = Elt.fespecularlighting ats ch :> Doc\n        /// Create an SVG element <fespotlight> with attributes and children.\n        [<JavaScript; Inline>]\n        let fespotlight ats ch = Elt.fespotlight ats ch :> Doc\n        /// Create an SVG element <fetile> with attributes and children.\n        [<JavaScript; Inline>]\n        let fetile ats ch = Elt.fetile ats ch :> Doc\n        /// Create an SVG element <feturbulence> with attributes and children.\n        [<JavaScript; Inline>]\n        let feturbulence ats ch = Elt.feturbulence ats ch :> Doc\n        /// Create an SVG element <filter> with attributes and children.\n        [<JavaScript; Inline>]\n        let filter ats ch = Elt.filter ats ch :> Doc\n        /// Create an SVG element <font> with attributes and children.\n        [<JavaScript; Inline>]\n        let font ats ch = Elt.font ats ch :> Doc\n        /// Create an SVG element <font-face> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFace ats ch = Elt.fontFace ats ch :> Doc\n        /// Create an SVG element <font-face-format> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceFormat ats ch = Elt.fontFaceFormat ats ch :> Doc\n        /// Create an SVG element <font-face-name> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceName ats ch = Elt.fontFaceName ats ch :> Doc\n        /// Create an SVG element <font-face-src> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceSrc ats ch = Elt.fontFaceSrc ats ch :> Doc\n        /// Create an SVG element <font-face-uri> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceUri ats ch = Elt.fontFaceUri ats ch :> Doc\n        /// Create an SVG element <foreignobject> with attributes and children.\n        [<JavaScript; Inline>]\n        let foreignobject ats ch = Elt.foreignobject ats ch :> Doc\n        /// Create an SVG element <g> with attributes and children.\n        [<JavaScript; Inline>]\n        let g ats ch = Elt.g ats ch :> Doc\n        /// Create an SVG element <glyph> with attributes and children.\n        [<JavaScript; Inline>]\n        let glyph ats ch = Elt.glyph ats ch :> Doc\n        /// Create an SVG element <glyphref> with attributes and children.\n        [<JavaScript; Inline>]\n        let glyphref ats ch = Elt.glyphref ats ch :> Doc\n        /// Create an SVG element <hkern> with attributes and children.\n        [<JavaScript; Inline>]\n        let hkern ats ch = Elt.hkern ats ch :> Doc\n        /// Create an SVG element <image> with attributes and children.\n        [<JavaScript; Inline>]\n        let image ats ch = Elt.image ats ch :> Doc\n        /// Create an SVG element <line> with attributes and children.\n        [<JavaScript; Inline>]\n        let line ats ch = Elt.line ats ch :> Doc\n        /// Create an SVG element <lineargradient> with attributes and children.\n        [<JavaScript; Inline>]\n        let lineargradient ats ch = Elt.lineargradient ats ch :> Doc\n        /// Create an SVG element <marker> with attributes and children.\n        [<JavaScript; Inline>]\n        let marker ats ch = Elt.marker ats ch :> Doc\n        /// Create an SVG element <mask> with attributes and children.\n        [<JavaScript; Inline>]\n        let mask ats ch = Elt.mask ats ch :> Doc\n        /// Create an SVG element <metadata> with attributes and children.\n        [<JavaScript; Inline>]\n        let metadata ats ch = Elt.metadata ats ch :> Doc\n        /// Create an SVG element <missing-glyph> with attributes and children.\n        [<JavaScript; Inline>]\n        let missingGlyph ats ch = Elt.missingGlyph ats ch :> Doc\n        /// Create an SVG element <mpath> with attributes and children.\n        [<JavaScript; Inline>]\n        let mpath ats ch = Elt.mpath ats ch :> Doc\n        /// Create an SVG element <path> with attributes and children.\n        [<JavaScript; Inline>]\n        let path ats ch = Elt.path ats ch :> Doc\n        /// Create an SVG element <pattern> with attributes and children.\n        [<JavaScript; Inline>]\n        let pattern ats ch = Elt.pattern ats ch :> Doc\n        /// Create an SVG element <polygon> with attributes and children.\n        [<JavaScript; Inline>]\n        let polygon ats ch = Elt.polygon ats ch :> Doc\n        /// Create an SVG element <polyline> with attributes and children.\n        [<JavaScript; Inline>]\n        let polyline ats ch = Elt.polyline ats ch :> Doc\n        /// Create an SVG element <radialgradient> with attributes and children.\n        [<JavaScript; Inline>]\n        let radialgradient ats ch = Elt.radialgradient ats ch :> Doc\n        /// Create an SVG element <rect> with attributes and children.\n        [<JavaScript; Inline>]\n        let rect ats ch = Elt.rect ats ch :> Doc\n        /// Create an SVG element <script> with attributes and children.\n        [<JavaScript; Inline>]\n        let script ats ch = Elt.script ats ch :> Doc\n        /// Create an SVG element <set> with attributes and children.\n        [<JavaScript; Inline>]\n        let set ats ch = Elt.set ats ch :> Doc\n        /// Create an SVG element <stop> with attributes and children.\n        [<JavaScript; Inline>]\n        let stop ats ch = Elt.stop ats ch :> Doc\n        /// Create an SVG element <style> with attributes and children.\n        [<JavaScript; Inline>]\n        let style ats ch = Elt.style ats ch :> Doc\n        /// Create an SVG element <svg> with attributes and children.\n        [<JavaScript; Inline>]\n        let svg ats ch = Elt.svg ats ch :> Doc\n        /// Create an SVG element <switch> with attributes and children.\n        [<JavaScript; Inline>]\n        let switch ats ch = Elt.switch ats ch :> Doc\n        /// Create an SVG element <symbol> with attributes and children.\n        [<JavaScript; Inline>]\n        let symbol ats ch = Elt.symbol ats ch :> Doc\n        /// Create an SVG element <text> with attributes and children.\n        [<JavaScript; Inline>]\n        let text ats ch = Elt.text ats ch :> Doc\n        /// Create an SVG element <textpath> with attributes and children.\n        [<JavaScript; Inline>]\n        let textpath ats ch = Elt.textpath ats ch :> Doc\n        /// Create an SVG element <title> with attributes and children.\n        [<JavaScript; Inline>]\n        let title ats ch = Elt.title ats ch :> Doc\n        /// Create an SVG element <tref> with attributes and children.\n        [<JavaScript; Inline>]\n        let tref ats ch = Elt.tref ats ch :> Doc\n        /// Create an SVG element <tspan> with attributes and children.\n        [<JavaScript; Inline>]\n        let tspan ats ch = Elt.tspan ats ch :> Doc\n        /// Create an SVG element <use> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``use`` ats ch = Elt.``use`` ats ch :> Doc\n        /// Create an SVG element <view> with attributes and children.\n        [<JavaScript; Inline>]\n        let view ats ch = Elt.view ats ch :> Doc\n        /// Create an SVG element <vkern> with attributes and children.\n        [<JavaScript; Inline>]\n        let vkern ats ch = Elt.vkern ats ch :> Doc\n        // }}\n\n    [<JavaScript; Sealed>]\n    type attr private () =\n\n        /// Create an HTML attribute \"data-name\" with the given value.\n        [<JavaScript; Inline>]\n        static member ``data-`` name value = Attr.Create (\"data-\" + name) value\n\n        // {{ attr normal colliding deprecated\n        /// Create an HTML attribute \"accept\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accept\")>]\n        static member accept value = Attr.Create \"accept\" value\n        /// Create an HTML attribute \"accept-charset\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accept-charset\")>]\n        static member acceptCharset value = Attr.Create \"accept-charset\" value\n        /// Create an HTML attribute \"accesskey\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accesskey\")>]\n        static member accesskey value = Attr.Create \"accesskey\" value\n        /// Create an HTML attribute \"action\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"action\")>]\n        static member action value = Attr.Create \"action\" value\n        /// Create an HTML attribute \"align\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"align\")>]\n        static member align value = Attr.Create \"align\" value\n        /// Create an HTML attribute \"alink\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"alink\")>]\n        static member alink value = Attr.Create \"alink\" value\n        /// Create an HTML attribute \"alt\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"alt\")>]\n        static member alt value = Attr.Create \"alt\" value\n        /// Create an HTML attribute \"altcode\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"altcode\")>]\n        static member altcode value = Attr.Create \"altcode\" value\n        /// Create an HTML attribute \"archive\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"archive\")>]\n        static member archive value = Attr.Create \"archive\" value\n        /// Create an HTML attribute \"async\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"async\")>]\n        static member async value = Attr.Create \"async\" value\n        /// Create an HTML attribute \"autocomplete\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autocomplete\")>]\n        static member autocomplete value = Attr.Create \"autocomplete\" value\n        /// Create an HTML attribute \"autofocus\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autofocus\")>]\n        static member autofocus value = Attr.Create \"autofocus\" value\n        /// Create an HTML attribute \"autoplay\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autoplay\")>]\n        static member autoplay value = Attr.Create \"autoplay\" value\n        /// Create an HTML attribute \"autosave\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autosave\")>]\n        static member autosave value = Attr.Create \"autosave\" value\n        /// Create an HTML attribute \"axis\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"axis\")>]\n        static member axis value = Attr.Create \"axis\" value\n        /// Create an HTML attribute \"background\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"background\")>]\n        static member background value = Attr.Create \"background\" value\n        /// Create an HTML attribute \"bgcolor\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"bgcolor\")>]\n        static member bgcolor value = Attr.Create \"bgcolor\" value\n        /// Create an HTML attribute \"border\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"border\")>]\n        static member border value = Attr.Create \"border\" value\n        /// Create an HTML attribute \"bordercolor\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"bordercolor\")>]\n        static member bordercolor value = Attr.Create \"bordercolor\" value\n        /// Create an HTML attribute \"buffered\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"buffered\")>]\n        static member buffered value = Attr.Create \"buffered\" value\n        /// Create an HTML attribute \"cellpadding\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cellpadding\")>]\n        static member cellpadding value = Attr.Create \"cellpadding\" value\n        /// Create an HTML attribute \"cellspacing\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cellspacing\")>]\n        static member cellspacing value = Attr.Create \"cellspacing\" value\n        /// Create an HTML attribute \"challenge\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"challenge\")>]\n        static member challenge value = Attr.Create \"challenge\" value\n        /// Create an HTML attribute \"char\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"char\")>]\n        static member char value = Attr.Create \"char\" value\n        /// Create an HTML attribute \"charoff\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"charoff\")>]\n        static member charoff value = Attr.Create \"charoff\" value\n        /// Create an HTML attribute \"charset\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"charset\")>]\n        static member charset value = Attr.Create \"charset\" value\n        /// Create an HTML attribute \"checked\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"checked\")>]\n        static member ``checked`` value = Attr.Create \"checked\" value\n        /// Create an HTML attribute \"cite\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cite\")>]\n        static member cite value = Attr.Create \"cite\" value\n        /// Create an HTML attribute \"class\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"class\")>]\n        static member ``class`` value = Attr.Create \"class\" value\n        /// Create an HTML attribute \"classid\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"classid\")>]\n        static member classid value = Attr.Create \"classid\" value\n        /// Create an HTML attribute \"clear\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clear\")>]\n        static member clear value = Attr.Create \"clear\" value\n        /// Create an HTML attribute \"code\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"code\")>]\n        static member code value = Attr.Create \"code\" value\n        /// Create an HTML attribute \"codebase\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"codebase\")>]\n        static member codebase value = Attr.Create \"codebase\" value\n        /// Create an HTML attribute \"codetype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"codetype\")>]\n        static member codetype value = Attr.Create \"codetype\" value\n        /// Create an HTML attribute \"color\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color\")>]\n        static member color value = Attr.Create \"color\" value\n        /// Create an HTML attribute \"cols\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cols\")>]\n        static member cols value = Attr.Create \"cols\" value\n        /// Create an HTML attribute \"colspan\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"colspan\")>]\n        static member colspan value = Attr.Create \"colspan\" value\n        /// Create an HTML attribute \"compact\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"compact\")>]\n        static member compact value = Attr.Create \"compact\" value\n        /// Create an HTML attribute \"content\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"content\")>]\n        static member content value = Attr.Create \"content\" value\n        /// Create an HTML attribute \"contenteditable\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contenteditable\")>]\n        static member contenteditable value = Attr.Create \"contenteditable\" value\n        /// Create an HTML attribute \"contextmenu\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contextmenu\")>]\n        static member contextmenu value = Attr.Create \"contextmenu\" value\n        /// Create an HTML attribute \"controls\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"controls\")>]\n        static member controls value = Attr.Create \"controls\" value\n        /// Create an HTML attribute \"coords\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"coords\")>]\n        static member coords value = Attr.Create \"coords\" value\n        /// Create an HTML attribute \"data\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"data\")>]\n        static member data value = Attr.Create \"data\" value\n        /// Create an HTML attribute \"datetime\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"datetime\")>]\n        static member datetime value = Attr.Create \"datetime\" value\n        /// Create an HTML attribute \"declare\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"declare\")>]\n        static member declare value = Attr.Create \"declare\" value\n        /// Create an HTML attribute \"default\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"default\")>]\n        static member ``default`` value = Attr.Create \"default\" value\n        /// Create an HTML attribute \"defer\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"defer\")>]\n        static member defer value = Attr.Create \"defer\" value\n        /// Create an HTML attribute \"dir\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dir\")>]\n        static member dir value = Attr.Create \"dir\" value\n        /// Create an HTML attribute \"disabled\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"disabled\")>]\n        static member disabled value = Attr.Create \"disabled\" value\n        /// Create an HTML attribute \"download\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"download\")>]\n        static member download value = Attr.Create \"download\" value\n        /// Create an HTML attribute \"draggable\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"draggable\")>]\n        static member draggable value = Attr.Create \"draggable\" value\n        /// Create an HTML attribute \"dropzone\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dropzone\")>]\n        static member dropzone value = Attr.Create \"dropzone\" value\n        /// Create an HTML attribute \"enctype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"enctype\")>]\n        static member enctype value = Attr.Create \"enctype\" value\n        /// Create an HTML attribute \"face\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"face\")>]\n        static member face value = Attr.Create \"face\" value\n        /// Create an HTML attribute \"for\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"for\")>]\n        static member ``for`` value = Attr.Create \"for\" value\n        /// Create an HTML attribute \"form\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"form\")>]\n        static member form value = Attr.Create \"form\" value\n        /// Create an HTML attribute \"formaction\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formaction\")>]\n        static member formaction value = Attr.Create \"formaction\" value\n        /// Create an HTML attribute \"formenctype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formenctype\")>]\n        static member formenctype value = Attr.Create \"formenctype\" value\n        /// Create an HTML attribute \"formmethod\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formmethod\")>]\n        static member formmethod value = Attr.Create \"formmethod\" value\n        /// Create an HTML attribute \"formnovalidate\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formnovalidate\")>]\n        static member formnovalidate value = Attr.Create \"formnovalidate\" value\n        /// Create an HTML attribute \"formtarget\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formtarget\")>]\n        static member formtarget value = Attr.Create \"formtarget\" value\n        /// Create an HTML attribute \"frame\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"frame\")>]\n        static member frame value = Attr.Create \"frame\" value\n        /// Create an HTML attribute \"frameborder\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"frameborder\")>]\n        static member frameborder value = Attr.Create \"frameborder\" value\n        /// Create an HTML attribute \"headers\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"headers\")>]\n        static member headers value = Attr.Create \"headers\" value\n        /// Create an HTML attribute \"height\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"height\")>]\n        static member height value = Attr.Create \"height\" value\n        /// Create an HTML attribute \"hidden\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"hidden\")>]\n        static member hidden value = Attr.Create \"hidden\" value\n        /// Create an HTML attribute \"high\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"high\")>]\n        static member high value = Attr.Create \"high\" value\n        /// Create an HTML attribute \"href\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"href\")>]\n        static member href value = Attr.Create \"href\" value\n        /// Create an HTML attribute \"hreflang\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"hreflang\")>]\n        static member hreflang value = Attr.Create \"hreflang\" value\n        /// Create an HTML attribute \"hspace\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"hspace\")>]\n        static member hspace value = Attr.Create \"hspace\" value\n        /// Create an HTML attribute \"http\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"http\")>]\n        static member http value = Attr.Create \"http\" value\n        /// Create an HTML attribute \"icon\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"icon\")>]\n        static member icon value = Attr.Create \"icon\" value\n        /// Create an HTML attribute \"id\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"id\")>]\n        static member id value = Attr.Create \"id\" value\n        /// Create an HTML attribute \"ismap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ismap\")>]\n        static member ismap value = Attr.Create \"ismap\" value\n        /// Create an HTML attribute \"itemprop\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"itemprop\")>]\n        static member itemprop value = Attr.Create \"itemprop\" value\n        /// Create an HTML attribute \"keytype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"keytype\")>]\n        static member keytype value = Attr.Create \"keytype\" value\n        /// Create an HTML attribute \"kind\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kind\")>]\n        static member kind value = Attr.Create \"kind\" value\n        /// Create an HTML attribute \"label\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"label\")>]\n        static member label value = Attr.Create \"label\" value\n        /// Create an HTML attribute \"lang\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"lang\")>]\n        static member lang value = Attr.Create \"lang\" value\n        /// Create an HTML attribute \"language\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"language\")>]\n        static member language value = Attr.Create \"language\" value\n        /// Create an HTML attribute \"link\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"link\")>]\n        static member link value = Attr.Create \"link\" value\n        /// Create an HTML attribute \"list\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"list\")>]\n        static member list value = Attr.Create \"list\" value\n        /// Create an HTML attribute \"longdesc\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"longdesc\")>]\n        static member longdesc value = Attr.Create \"longdesc\" value\n        /// Create an HTML attribute \"loop\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"loop\")>]\n        static member loop value = Attr.Create \"loop\" value\n        /// Create an HTML attribute \"low\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"low\")>]\n        static member low value = Attr.Create \"low\" value\n        /// Create an HTML attribute \"manifest\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"manifest\")>]\n        static member manifest value = Attr.Create \"manifest\" value\n        /// Create an HTML attribute \"marginheight\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marginheight\")>]\n        static member marginheight value = Attr.Create \"marginheight\" value\n        /// Create an HTML attribute \"marginwidth\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marginwidth\")>]\n        static member marginwidth value = Attr.Create \"marginwidth\" value\n        /// Create an HTML attribute \"max\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"max\")>]\n        static member max value = Attr.Create \"max\" value\n        /// Create an HTML attribute \"maxlength\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"maxlength\")>]\n        static member maxlength value = Attr.Create \"maxlength\" value\n        /// Create an HTML attribute \"media\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"media\")>]\n        static member media value = Attr.Create \"media\" value\n        /// Create an HTML attribute \"method\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"method\")>]\n        static member ``method`` value = Attr.Create \"method\" value\n        /// Create an HTML attribute \"min\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"min\")>]\n        static member min value = Attr.Create \"min\" value\n        /// Create an HTML attribute \"multiple\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"multiple\")>]\n        static member multiple value = Attr.Create \"multiple\" value\n        /// Create an HTML attribute \"name\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"name\")>]\n        static member name value = Attr.Create \"name\" value\n        /// Create an HTML attribute \"nohref\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"nohref\")>]\n        static member nohref value = Attr.Create \"nohref\" value\n        /// Create an HTML attribute \"noresize\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"noresize\")>]\n        static member noresize value = Attr.Create \"noresize\" value\n        /// Create an HTML attribute \"noshade\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"noshade\")>]\n        static member noshade value = Attr.Create \"noshade\" value\n        /// Create an HTML attribute \"novalidate\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"novalidate\")>]\n        static member novalidate value = Attr.Create \"novalidate\" value\n        /// Create an HTML attribute \"nowrap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"nowrap\")>]\n        static member nowrap value = Attr.Create \"nowrap\" value\n        /// Create an HTML attribute \"object\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"object\")>]\n        static member ``object`` value = Attr.Create \"object\" value\n        /// Create an HTML attribute \"open\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"open\")>]\n        static member ``open`` value = Attr.Create \"open\" value\n        /// Create an HTML attribute \"optimum\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"optimum\")>]\n        static member optimum value = Attr.Create \"optimum\" value\n        /// Create an HTML attribute \"pattern\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pattern\")>]\n        static member pattern value = Attr.Create \"pattern\" value\n        /// Create an HTML attribute \"ping\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ping\")>]\n        static member ping value = Attr.Create \"ping\" value\n        /// Create an HTML attribute \"placeholder\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"placeholder\")>]\n        static member placeholder value = Attr.Create \"placeholder\" value\n        /// Create an HTML attribute \"poster\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"poster\")>]\n        static member poster value = Attr.Create \"poster\" value\n        /// Create an HTML attribute \"preload\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"preload\")>]\n        static member preload value = Attr.Create \"preload\" value\n        /// Create an HTML attribute \"profile\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"profile\")>]\n        static member profile value = Attr.Create \"profile\" value\n        /// Create an HTML attribute \"prompt\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"prompt\")>]\n        static member prompt value = Attr.Create \"prompt\" value\n        /// Create an HTML attribute \"pubdate\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pubdate\")>]\n        static member pubdate value = Attr.Create \"pubdate\" value\n        /// Create an HTML attribute \"radiogroup\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"radiogroup\")>]\n        static member radiogroup value = Attr.Create \"radiogroup\" value\n        /// Create an HTML attribute \"readonly\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"readonly\")>]\n        static member readonly value = Attr.Create \"readonly\" value\n        /// Create an HTML attribute \"rel\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rel\")>]\n        static member rel value = Attr.Create \"rel\" value\n        /// Create an HTML attribute \"required\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"required\")>]\n        static member required value = Attr.Create \"required\" value\n        /// Create an HTML attribute \"rev\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rev\")>]\n        static member rev value = Attr.Create \"rev\" value\n        /// Create an HTML attribute \"reversed\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"reversed\")>]\n        static member reversed value = Attr.Create \"reversed\" value\n        /// Create an HTML attribute \"rows\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rows\")>]\n        static member rows value = Attr.Create \"rows\" value\n        /// Create an HTML attribute \"rowspan\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rowspan\")>]\n        static member rowspan value = Attr.Create \"rowspan\" value\n        /// Create an HTML attribute \"rules\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rules\")>]\n        static member rules value = Attr.Create \"rules\" value\n        /// Create an HTML attribute \"sandbox\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"sandbox\")>]\n        static member sandbox value = Attr.Create \"sandbox\" value\n        /// Create an HTML attribute \"scheme\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scheme\")>]\n        static member scheme value = Attr.Create \"scheme\" value\n        /// Create an HTML attribute \"scope\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scope\")>]\n        static member scope value = Attr.Create \"scope\" value\n        /// Create an HTML attribute \"scoped\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scoped\")>]\n        static member scoped value = Attr.Create \"scoped\" value\n        /// Create an HTML attribute \"scrolling\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scrolling\")>]\n        static member scrolling value = Attr.Create \"scrolling\" value\n        /// Create an HTML attribute \"seamless\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"seamless\")>]\n        static member seamless value = Attr.Create \"seamless\" value\n        /// Create an HTML attribute \"selected\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"selected\")>]\n        static member selected value = Attr.Create \"selected\" value\n        /// Create an HTML attribute \"shape\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"shape\")>]\n        static member shape value = Attr.Create \"shape\" value\n        /// Create an HTML attribute \"size\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"size\")>]\n        static member size value = Attr.Create \"size\" value\n        /// Create an HTML attribute \"sizes\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"sizes\")>]\n        static member sizes value = Attr.Create \"sizes\" value\n        /// Create an HTML attribute \"span\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"span\")>]\n        static member span value = Attr.Create \"span\" value\n        /// Create an HTML attribute \"spellcheck\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"spellcheck\")>]\n        static member spellcheck value = Attr.Create \"spellcheck\" value\n        /// Create an HTML attribute \"src\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"src\")>]\n        static member src value = Attr.Create \"src\" value\n        /// Create an HTML attribute \"srcdoc\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"srcdoc\")>]\n        static member srcdoc value = Attr.Create \"srcdoc\" value\n        /// Create an HTML attribute \"srclang\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"srclang\")>]\n        static member srclang value = Attr.Create \"srclang\" value\n        /// Create an HTML attribute \"standby\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"standby\")>]\n        static member standby value = Attr.Create \"standby\" value\n        /// Create an HTML attribute \"start\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"start\")>]\n        static member start value = Attr.Create \"start\" value\n        /// Create an HTML attribute \"step\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"step\")>]\n        static member step value = Attr.Create \"step\" value\n        /// Create an HTML attribute \"style\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"style\")>]\n        static member style value = Attr.Create \"style\" value\n        /// Create an HTML attribute \"subject\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"subject\")>]\n        static member subject value = Attr.Create \"subject\" value\n        /// Create an HTML attribute \"summary\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"summary\")>]\n        static member summary value = Attr.Create \"summary\" value\n        /// Create an HTML attribute \"tabindex\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"tabindex\")>]\n        static member tabindex value = Attr.Create \"tabindex\" value\n        /// Create an HTML attribute \"target\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"target\")>]\n        static member target value = Attr.Create \"target\" value\n        /// Create an HTML attribute \"text\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text\")>]\n        static member text value = Attr.Create \"text\" value\n        /// Create an HTML attribute \"title\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"title\")>]\n        static member title value = Attr.Create \"title\" value\n        /// Create an HTML attribute \"type\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"type\")>]\n        static member ``type`` value = Attr.Create \"type\" value\n        /// Create an HTML attribute \"usemap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"usemap\")>]\n        static member usemap value = Attr.Create \"usemap\" value\n        /// Create an HTML attribute \"valign\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"valign\")>]\n        static member valign value = Attr.Create \"valign\" value\n        /// Create an HTML attribute \"value\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"value\")>]\n        static member value value = Attr.Create \"value\" value\n        /// Create an HTML attribute \"valuetype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"valuetype\")>]\n        static member valuetype value = Attr.Create \"valuetype\" value\n        /// Create an HTML attribute \"version\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"version\")>]\n        static member version value = Attr.Create \"version\" value\n        /// Create an HTML attribute \"vlink\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"vlink\")>]\n        static member vlink value = Attr.Create \"vlink\" value\n        /// Create an HTML attribute \"vspace\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"vspace\")>]\n        static member vspace value = Attr.Create \"vspace\" value\n        /// Create an HTML attribute \"width\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"width\")>]\n        static member width value = Attr.Create \"width\" value\n        /// Create an HTML attribute \"wrap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"wrap\")>]\n        static member wrap value = Attr.Create \"wrap\" value\n        // }}\n\n    type on =\n\n        /// Adds a callback to be called after the element has been inserted in the DOM.\n        /// The callback is guaranteed to be called only once, even if the element is moved or removed and reinserted.\n        static member afterRender ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> unit>) = Attr.OnAfterRenderImpl(f)\n\n        // {{ event\n        /// Create a handler for the event \"abort\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member abort ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"abort\", f)\n        /// Create a handler for the event \"afterprint\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member afterPrint ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"afterprint\", f)\n        /// Create a handler for the event \"animationend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member animationEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"animationend\", f)\n        /// Create a handler for the event \"animationiteration\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member animationIteration ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"animationiteration\", f)\n        /// Create a handler for the event \"animationstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member animationStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"animationstart\", f)\n        /// Create a handler for the event \"audioprocess\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member audioProcess ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"audioprocess\", f)\n        /// Create a handler for the event \"beforeprint\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member beforePrint ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"beforeprint\", f)\n        /// Create a handler for the event \"beforeunload\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member beforeUnload ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"beforeunload\", f)\n        /// Create a handler for the event \"beginEvent\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member beginEvent ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"beginEvent\", f)\n        /// Create a handler for the event \"blocked\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member blocked ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"blocked\", f)\n        /// Create a handler for the event \"blur\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member blur ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.FocusEvent -> unit>) = Attr.HandlerImpl(\"blur\", f)\n        /// Create a handler for the event \"cached\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member cached ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"cached\", f)\n        /// Create a handler for the event \"canplay\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member canPlay ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"canplay\", f)\n        /// Create a handler for the event \"canplaythrough\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member canPlayThrough ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"canplaythrough\", f)\n        /// Create a handler for the event \"change\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member change ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"change\", f)\n        /// Create a handler for the event \"chargingchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member chargingChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"chargingchange\", f)\n        /// Create a handler for the event \"chargingtimechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member chargingTimeChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"chargingtimechange\", f)\n        /// Create a handler for the event \"checking\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member checking ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"checking\", f)\n        /// Create a handler for the event \"click\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member click ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"click\", f)\n        /// Create a handler for the event \"close\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member close ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"close\", f)\n        /// Create a handler for the event \"complete\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member complete ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"complete\", f)\n        /// Create a handler for the event \"compositionend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member compositionEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.CompositionEvent -> unit>) = Attr.HandlerImpl(\"compositionend\", f)\n        /// Create a handler for the event \"compositionstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member compositionStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.CompositionEvent -> unit>) = Attr.HandlerImpl(\"compositionstart\", f)\n        /// Create a handler for the event \"compositionupdate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member compositionUpdate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.CompositionEvent -> unit>) = Attr.HandlerImpl(\"compositionupdate\", f)\n        /// Create a handler for the event \"contextmenu\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member contextMenu ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"contextmenu\", f)\n        /// Create a handler for the event \"copy\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member copy ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"copy\", f)\n        /// Create a handler for the event \"cut\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member cut ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"cut\", f)\n        /// Create a handler for the event \"dblclick\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dblClick ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"dblclick\", f)\n        /// Create a handler for the event \"devicelight\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceLight ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"devicelight\", f)\n        /// Create a handler for the event \"devicemotion\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceMotion ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"devicemotion\", f)\n        /// Create a handler for the event \"deviceorientation\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceOrientation ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"deviceorientation\", f)\n        /// Create a handler for the event \"deviceproximity\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceProximity ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"deviceproximity\", f)\n        /// Create a handler for the event \"dischargingtimechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dischargingTimeChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dischargingtimechange\", f)\n        /// Create a handler for the event \"DOMActivate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMActivate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"DOMActivate\", f)\n        /// Create a handler for the event \"DOMAttributeNameChanged\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMAttributeNameChanged ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"DOMAttributeNameChanged\", f)\n        /// Create a handler for the event \"DOMAttrModified\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMAttrModified ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMAttrModified\", f)\n        /// Create a handler for the event \"DOMCharacterDataModified\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMCharacterDataModified ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMCharacterDataModified\", f)\n        /// Create a handler for the event \"DOMContentLoaded\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMContentLoaded ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"DOMContentLoaded\", f)\n        /// Create a handler for the event \"DOMElementNameChanged\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMElementNameChanged ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"DOMElementNameChanged\", f)\n        /// Create a handler for the event \"DOMNodeInserted\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeInserted ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeInserted\", f)\n        /// Create a handler for the event \"DOMNodeInsertedIntoDocument\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeInsertedIntoDocument ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeInsertedIntoDocument\", f)\n        /// Create a handler for the event \"DOMNodeRemoved\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeRemoved ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeRemoved\", f)\n        /// Create a handler for the event \"DOMNodeRemovedFromDocument\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeRemovedFromDocument ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeRemovedFromDocument\", f)\n        /// Create a handler for the event \"DOMSubtreeModified\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMSubtreeModified ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMSubtreeModified\", f)\n        /// Create a handler for the event \"downloading\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member downloading ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"downloading\", f)\n        /// Create a handler for the event \"drag\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member drag ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"drag\", f)\n        /// Create a handler for the event \"dragend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragend\", f)\n        /// Create a handler for the event \"dragenter\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragEnter ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragenter\", f)\n        /// Create a handler for the event \"dragleave\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragLeave ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragleave\", f)\n        /// Create a handler for the event \"dragover\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragOver ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragover\", f)\n        /// Create a handler for the event \"dragstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragstart\", f)\n        /// Create a handler for the event \"drop\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member drop ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"drop\", f)\n        /// Create a handler for the event \"durationchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member durationChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"durationchange\", f)\n        /// Create a handler for the event \"emptied\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member emptied ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"emptied\", f)\n        /// Create a handler for the event \"ended\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member ended ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"ended\", f)\n        /// Create a handler for the event \"endEvent\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member endEvent ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"endEvent\", f)\n        /// Create a handler for the event \"error\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member error ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"error\", f)\n        /// Create a handler for the event \"focus\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member focus ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.FocusEvent -> unit>) = Attr.HandlerImpl(\"focus\", f)\n        /// Create a handler for the event \"fullscreenchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member fullScreenChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"fullscreenchange\", f)\n        /// Create a handler for the event \"fullscreenerror\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member fullScreenError ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"fullscreenerror\", f)\n        /// Create a handler for the event \"gamepadconnected\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member gamepadConnected ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"gamepadconnected\", f)\n        /// Create a handler for the event \"gamepaddisconnected\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member gamepadDisconnected ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"gamepaddisconnected\", f)\n        /// Create a handler for the event \"hashchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member hashChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"hashchange\", f)\n        /// Create a handler for the event \"input\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member input ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"input\", f)\n        /// Create a handler for the event \"invalid\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member invalid ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"invalid\", f)\n        /// Create a handler for the event \"keydown\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member keyDown ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.KeyboardEvent -> unit>) = Attr.HandlerImpl(\"keydown\", f)\n        /// Create a handler for the event \"keypress\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member keyPress ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.KeyboardEvent -> unit>) = Attr.HandlerImpl(\"keypress\", f)\n        /// Create a handler for the event \"keyup\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member keyUp ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.KeyboardEvent -> unit>) = Attr.HandlerImpl(\"keyup\", f)\n        /// Create a handler for the event \"languagechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member languageChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"languagechange\", f)\n        /// Create a handler for the event \"levelchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member levelChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"levelchange\", f)\n        /// Create a handler for the event \"load\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member load ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"load\", f)\n        /// Create a handler for the event \"loadeddata\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadedData ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadeddata\", f)\n        /// Create a handler for the event \"loadedmetadata\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadedMetadata ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadedmetadata\", f)\n        /// Create a handler for the event \"loadend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadend\", f)\n        /// Create a handler for the event \"loadstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadstart\", f)\n        /// Create a handler for the event \"message\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member message ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"message\", f)\n        /// Create a handler for the event \"mousedown\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseDown ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mousedown\", f)\n        /// Create a handler for the event \"mouseenter\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseEnter ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseenter\", f)\n        /// Create a handler for the event \"mouseleave\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseLeave ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseleave\", f)\n        /// Create a handler for the event \"mousemove\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseMove ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mousemove\", f)\n        /// Create a handler for the event \"mouseout\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseOut ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseout\", f)\n        /// Create a handler for the event \"mouseover\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseOver ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseover\", f)\n        /// Create a handler for the event \"mouseup\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseUp ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseup\", f)\n        /// Create a handler for the event \"noupdate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member noUpdate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"noupdate\", f)\n        /// Create a handler for the event \"obsolete\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member obsolete ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"obsolete\", f)\n        /// Create a handler for the event \"offline\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member offline ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"offline\", f)\n        /// Create a handler for the event \"online\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member online ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"online\", f)\n        /// Create a handler for the event \"open\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member ``open`` ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"open\", f)\n        /// Create a handler for the event \"orientationchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member orientationChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"orientationchange\", f)\n        /// Create a handler for the event \"pagehide\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pageHide ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pagehide\", f)\n        /// Create a handler for the event \"pageshow\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pageShow ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pageshow\", f)\n        /// Create a handler for the event \"paste\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member paste ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"paste\", f)\n        /// Create a handler for the event \"pause\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pause ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pause\", f)\n        /// Create a handler for the event \"play\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member play ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"play\", f)\n        /// Create a handler for the event \"playing\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member playing ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"playing\", f)\n        /// Create a handler for the event \"pointerlockchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pointerLockChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pointerlockchange\", f)\n        /// Create a handler for the event \"pointerlockerror\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pointerLockError ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pointerlockerror\", f)\n        /// Create a handler for the event \"popstate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member popState ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"popstate\", f)\n        /// Create a handler for the event \"progress\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member progress ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"progress\", f)\n        /// Create a handler for the event \"ratechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member rateChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"ratechange\", f)\n        /// Create a handler for the event \"readystatechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member readyStateChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"readystatechange\", f)\n        /// Create a handler for the event \"repeatEvent\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member repeatEvent ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"repeatEvent\", f)\n        /// Create a handler for the event \"reset\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member reset ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"reset\", f)\n        /// Create a handler for the event \"resize\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member resize ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"resize\", f)\n        /// Create a handler for the event \"scroll\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member scroll ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"scroll\", f)\n        /// Create a handler for the event \"seeked\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member seeked ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"seeked\", f)\n        /// Create a handler for the event \"seeking\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member seeking ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"seeking\", f)\n        /// Create a handler for the event \"select\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member select ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"select\", f)\n        /// Create a handler for the event \"show\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member show ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"show\", f)\n        /// Create a handler for the event \"stalled\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member stalled ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"stalled\", f)\n        /// Create a handler for the event \"storage\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member storage ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"storage\", f)\n        /// Create a handler for the event \"submit\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member submit ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"submit\", f)\n        /// Create a handler for the event \"success\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member success ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"success\", f)\n        /// Create a handler for the event \"suspend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member suspend ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"suspend\", f)\n        /// Create a handler for the event \"SVGAbort\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGAbort ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGAbort\", f)\n        /// Create a handler for the event \"SVGError\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGError ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGError\", f)\n        /// Create a handler for the event \"SVGLoad\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGLoad ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGLoad\", f)\n        /// Create a handler for the event \"SVGResize\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGResize ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGResize\", f)\n        /// Create a handler for the event \"SVGScroll\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGScroll ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGScroll\", f)\n        /// Create a handler for the event \"SVGUnload\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGUnload ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGUnload\", f)\n        /// Create a handler for the event \"SVGZoom\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGZoom ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGZoom\", f)\n        /// Create a handler for the event \"timeout\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member timeOut ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"timeout\", f)\n        /// Create a handler for the event \"timeupdate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member timeUpdate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"timeupdate\", f)\n        /// Create a handler for the event \"touchcancel\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchCancel ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchcancel\", f)\n        /// Create a handler for the event \"touchend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchend\", f)\n        /// Create a handler for the event \"touchenter\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchEnter ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchenter\", f)\n        /// Create a handler for the event \"touchleave\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchLeave ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchleave\", f)\n        /// Create a handler for the event \"touchmove\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchMove ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchmove\", f)\n        /// Create a handler for the event \"touchstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchstart\", f)\n        /// Create a handler for the event \"transitionend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member transitionEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"transitionend\", f)\n        /// Create a handler for the event \"unload\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member unload ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"unload\", f)\n        /// Create a handler for the event \"updateready\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member updateReady ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"updateready\", f)\n        /// Create a handler for the event \"upgradeneeded\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member upgradeNeeded ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"upgradeneeded\", f)\n        /// Create a handler for the event \"userproximity\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member userProximity ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"userproximity\", f)\n        /// Create a handler for the event \"versionchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member versionChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"versionchange\", f)\n        /// Create a handler for the event \"visibilitychange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member visibilityChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"visibilitychange\", f)\n        /// Create a handler for the event \"volumechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member volumeChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"volumechange\", f)\n        /// Create a handler for the event \"waiting\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member waiting ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"waiting\", f)\n        /// Create a handler for the event \"wheel\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member wheel ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.WheelEvent -> unit>) = Attr.HandlerImpl(\"wheel\", f)\n        // }}\n\n    /// SVG attributes.\n    module SvgAttributes =\n\n        // {{ svgattr normal\n        /// Create an SVG attribute \"accent-height\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accent-height\")>]\n        let accentHeight value = Attr.Create \"accent-height\" value\n        /// Create an SVG attribute \"accumulate\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accumulate\")>]\n        let accumulate value = Attr.Create \"accumulate\" value\n        /// Create an SVG attribute \"additive\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"additive\")>]\n        let additive value = Attr.Create \"additive\" value\n        /// Create an SVG attribute \"alignment-baseline\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"alignment-baseline\")>]\n        let alignmentBaseline value = Attr.Create \"alignment-baseline\" value\n        /// Create an SVG attribute \"ascent\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ascent\")>]\n        let ascent value = Attr.Create \"ascent\" value\n        /// Create an SVG attribute \"attributeName\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"attributeName\")>]\n        let attributeName value = Attr.Create \"attributeName\" value\n        /// Create an SVG attribute \"attributeType\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"attributeType\")>]\n        let attributeType value = Attr.Create \"attributeType\" value\n        /// Create an SVG attribute \"azimuth\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"azimuth\")>]\n        let azimuth value = Attr.Create \"azimuth\" value\n        /// Create an SVG attribute \"baseFrequency\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"baseFrequency\")>]\n        let baseFrequency value = Attr.Create \"baseFrequency\" value\n        /// Create an SVG attribute \"baseline-shift\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"baseline-shift\")>]\n        let baselineShift value = Attr.Create \"baseline-shift\" value\n        /// Create an SVG attribute \"begin\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"begin\")>]\n        let ``begin`` value = Attr.Create \"begin\" value\n        /// Create an SVG attribute \"bias\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"bias\")>]\n        let bias value = Attr.Create \"bias\" value\n        /// Create an SVG attribute \"calcMode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"calcMode\")>]\n        let calcMode value = Attr.Create \"calcMode\" value\n        /// Create an SVG attribute \"class\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"class\")>]\n        let ``class`` value = Attr.Create \"class\" value\n        /// Create an SVG attribute \"clip\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clip\")>]\n        let clip value = Attr.Create \"clip\" value\n        /// Create an SVG attribute \"clip-path\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clip-path\")>]\n        let clipPath value = Attr.Create \"clip-path\" value\n        /// Create an SVG attribute \"clipPathUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clipPathUnits\")>]\n        let clipPathUnits value = Attr.Create \"clipPathUnits\" value\n        /// Create an SVG attribute \"clip-rule\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clip-rule\")>]\n        let clipRule value = Attr.Create \"clip-rule\" value\n        /// Create an SVG attribute \"color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color\")>]\n        let color value = Attr.Create \"color\" value\n        /// Create an SVG attribute \"color-interpolation\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-interpolation\")>]\n        let colorInterpolation value = Attr.Create \"color-interpolation\" value\n        /// Create an SVG attribute \"color-interpolation-filters\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-interpolation-filters\")>]\n        let colorInterpolationFilters value = Attr.Create \"color-interpolation-filters\" value\n        /// Create an SVG attribute \"color-profile\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-profile\")>]\n        let colorProfile value = Attr.Create \"color-profile\" value\n        /// Create an SVG attribute \"color-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-rendering\")>]\n        let colorRendering value = Attr.Create \"color-rendering\" value\n        /// Create an SVG attribute \"contentScriptType\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contentScriptType\")>]\n        let contentScriptType value = Attr.Create \"contentScriptType\" value\n        /// Create an SVG attribute \"contentStyleType\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contentStyleType\")>]\n        let contentStyleType value = Attr.Create \"contentStyleType\" value\n        /// Create an SVG attribute \"cursor\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cursor\")>]\n        let cursor value = Attr.Create \"cursor\" value\n        /// Create an SVG attribute \"cx\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cx\")>]\n        let cx value = Attr.Create \"cx\" value\n        /// Create an SVG attribute \"cy\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cy\")>]\n        let cy value = Attr.Create \"cy\" value\n        /// Create an SVG attribute \"d\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"d\")>]\n        let d value = Attr.Create \"d\" value\n        /// Create an SVG attribute \"diffuseConstant\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"diffuseConstant\")>]\n        let diffuseConstant value = Attr.Create \"diffuseConstant\" value\n        /// Create an SVG attribute \"direction\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"direction\")>]\n        let direction value = Attr.Create \"direction\" value\n        /// Create an SVG attribute \"display\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"display\")>]\n        let display value = Attr.Create \"display\" value\n        /// Create an SVG attribute \"divisor\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"divisor\")>]\n        let divisor value = Attr.Create \"divisor\" value\n        /// Create an SVG attribute \"dominant-baseline\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dominant-baseline\")>]\n        let dominantBaseline value = Attr.Create \"dominant-baseline\" value\n        /// Create an SVG attribute \"dur\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dur\")>]\n        let dur value = Attr.Create \"dur\" value\n        /// Create an SVG attribute \"dx\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dx\")>]\n        let dx value = Attr.Create \"dx\" value\n        /// Create an SVG attribute \"dy\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dy\")>]\n        let dy value = Attr.Create \"dy\" value\n        /// Create an SVG attribute \"edgeMode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"edgeMode\")>]\n        let edgeMode value = Attr.Create \"edgeMode\" value\n        /// Create an SVG attribute \"elevation\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"elevation\")>]\n        let elevation value = Attr.Create \"elevation\" value\n        /// Create an SVG attribute \"end\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"end\")>]\n        let ``end`` value = Attr.Create \"end\" value\n        /// Create an SVG attribute \"externalResourcesRequired\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"externalResourcesRequired\")>]\n        let externalResourcesRequired value = Attr.Create \"externalResourcesRequired\" value\n        /// Create an SVG attribute \"fill\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"fill\")>]\n        let fill value = Attr.Create \"fill\" value\n        /// Create an SVG attribute \"fill-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"fill-opacity\")>]\n        let fillOpacity value = Attr.Create \"fill-opacity\" value\n        /// Create an SVG attribute \"fill-rule\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"fill-rule\")>]\n        let fillRule value = Attr.Create \"fill-rule\" value\n        /// Create an SVG attribute \"filter\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"filter\")>]\n        let filter value = Attr.Create \"filter\" value\n        /// Create an SVG attribute \"filterRes\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"filterRes\")>]\n        let filterRes value = Attr.Create \"filterRes\" value\n        /// Create an SVG attribute \"filterUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"filterUnits\")>]\n        let filterUnits value = Attr.Create \"filterUnits\" value\n        /// Create an SVG attribute \"flood-color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"flood-color\")>]\n        let floodColor value = Attr.Create \"flood-color\" value\n        /// Create an SVG attribute \"flood-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"flood-opacity\")>]\n        let floodOpacity value = Attr.Create \"flood-opacity\" value\n        /// Create an SVG attribute \"font-family\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-family\")>]\n        let fontFamily value = Attr.Create \"font-family\" value\n        /// Create an SVG attribute \"font-size\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-size\")>]\n        let fontSize value = Attr.Create \"font-size\" value\n        /// Create an SVG attribute \"font-size-adjust\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-size-adjust\")>]\n        let fontSizeAdjust value = Attr.Create \"font-size-adjust\" value\n        /// Create an SVG attribute \"font-stretch\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-stretch\")>]\n        let fontStretch value = Attr.Create \"font-stretch\" value\n        /// Create an SVG attribute \"font-style\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-style\")>]\n        let fontStyle value = Attr.Create \"font-style\" value\n        /// Create an SVG attribute \"font-variant\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-variant\")>]\n        let fontVariant value = Attr.Create \"font-variant\" value\n        /// Create an SVG attribute \"font-weight\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-weight\")>]\n        let fontWeight value = Attr.Create \"font-weight\" value\n        /// Create an SVG attribute \"from\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"from\")>]\n        let from value = Attr.Create \"from\" value\n        /// Create an SVG attribute \"gradientTransform\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"gradientTransform\")>]\n        let gradientTransform value = Attr.Create \"gradientTransform\" value\n        /// Create an SVG attribute \"gradientUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"gradientUnits\")>]\n        let gradientUnits value = Attr.Create \"gradientUnits\" value\n        /// Create an SVG attribute \"height\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"height\")>]\n        let height value = Attr.Create \"height\" value\n        /// Create an SVG attribute \"image-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"image-rendering\")>]\n        let imageRendering value = Attr.Create \"image-rendering\" value\n        /// Create an SVG attribute \"in\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"in\")>]\n        let ``in`` value = Attr.Create \"in\" value\n        /// Create an SVG attribute \"in2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"in2\")>]\n        let in2 value = Attr.Create \"in2\" value\n        /// Create an SVG attribute \"k1\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k1\")>]\n        let k1 value = Attr.Create \"k1\" value\n        /// Create an SVG attribute \"k2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k2\")>]\n        let k2 value = Attr.Create \"k2\" value\n        /// Create an SVG attribute \"k3\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k3\")>]\n        let k3 value = Attr.Create \"k3\" value\n        /// Create an SVG attribute \"k4\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k4\")>]\n        let k4 value = Attr.Create \"k4\" value\n        /// Create an SVG attribute \"kernelMatrix\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kernelMatrix\")>]\n        let kernelMatrix value = Attr.Create \"kernelMatrix\" value\n        /// Create an SVG attribute \"kernelUnitLength\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kernelUnitLength\")>]\n        let kernelUnitLength value = Attr.Create \"kernelUnitLength\" value\n        /// Create an SVG attribute \"kerning\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kerning\")>]\n        let kerning value = Attr.Create \"kerning\" value\n        /// Create an SVG attribute \"keySplines\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"keySplines\")>]\n        let keySplines value = Attr.Create \"keySplines\" value\n        /// Create an SVG attribute \"keyTimes\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"keyTimes\")>]\n        let keyTimes value = Attr.Create \"keyTimes\" value\n        /// Create an SVG attribute \"letter-spacing\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"letter-spacing\")>]\n        let letterSpacing value = Attr.Create \"letter-spacing\" value\n        /// Create an SVG attribute \"lighting-color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"lighting-color\")>]\n        let lightingColor value = Attr.Create \"lighting-color\" value\n        /// Create an SVG attribute \"limitingConeAngle\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"limitingConeAngle\")>]\n        let limitingConeAngle value = Attr.Create \"limitingConeAngle\" value\n        /// Create an SVG attribute \"local\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"local\")>]\n        let local value = Attr.Create \"local\" value\n        /// Create an SVG attribute \"marker-end\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marker-end\")>]\n        let markerEnd value = Attr.Create \"marker-end\" value\n        /// Create an SVG attribute \"markerHeight\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"markerHeight\")>]\n        let markerHeight value = Attr.Create \"markerHeight\" value\n        /// Create an SVG attribute \"marker-mid\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marker-mid\")>]\n        let markerMid value = Attr.Create \"marker-mid\" value\n        /// Create an SVG attribute \"marker-start\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marker-start\")>]\n        let markerStart value = Attr.Create \"marker-start\" value\n        /// Create an SVG attribute \"markerUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"markerUnits\")>]\n        let markerUnits value = Attr.Create \"markerUnits\" value\n        /// Create an SVG attribute \"markerWidth\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"markerWidth\")>]\n        let markerWidth value = Attr.Create \"markerWidth\" value\n        /// Create an SVG attribute \"mask\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"mask\")>]\n        let mask value = Attr.Create \"mask\" value\n        /// Create an SVG attribute \"maskContentUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"maskContentUnits\")>]\n        let maskContentUnits value = Attr.Create \"maskContentUnits\" value\n        /// Create an SVG attribute \"maskUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"maskUnits\")>]\n        let maskUnits value = Attr.Create \"maskUnits\" value\n        /// Create an SVG attribute \"max\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"max\")>]\n        let max value = Attr.Create \"max\" value\n        /// Create an SVG attribute \"min\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"min\")>]\n        let min value = Attr.Create \"min\" value\n        /// Create an SVG attribute \"mode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"mode\")>]\n        let mode value = Attr.Create \"mode\" value\n        /// Create an SVG attribute \"numOctaves\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"numOctaves\")>]\n        let numOctaves value = Attr.Create \"numOctaves\" value\n        /// Create an SVG attribute \"opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"opacity\")>]\n        let opacity value = Attr.Create \"opacity\" value\n        /// Create an SVG attribute \"operator\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"operator\")>]\n        let operator value = Attr.Create \"operator\" value\n        /// Create an SVG attribute \"order\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"order\")>]\n        let order value = Attr.Create \"order\" value\n        /// Create an SVG attribute \"overflow\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"overflow\")>]\n        let overflow value = Attr.Create \"overflow\" value\n        /// Create an SVG attribute \"paint-order\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"paint-order\")>]\n        let paintOrder value = Attr.Create \"paint-order\" value\n        /// Create an SVG attribute \"pathLength\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pathLength\")>]\n        let pathLength value = Attr.Create \"pathLength\" value\n        /// Create an SVG attribute \"patternContentUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"patternContentUnits\")>]\n        let patternContentUnits value = Attr.Create \"patternContentUnits\" value\n        /// Create an SVG attribute \"patternTransform\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"patternTransform\")>]\n        let patternTransform value = Attr.Create \"patternTransform\" value\n        /// Create an SVG attribute \"patternUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"patternUnits\")>]\n        let patternUnits value = Attr.Create \"patternUnits\" value\n        /// Create an SVG attribute \"pointer-events\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointer-events\")>]\n        let pointerEvents value = Attr.Create \"pointer-events\" value\n        /// Create an SVG attribute \"points\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"points\")>]\n        let points value = Attr.Create \"points\" value\n        /// Create an SVG attribute \"pointsAtX\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointsAtX\")>]\n        let pointsAtX value = Attr.Create \"pointsAtX\" value\n        /// Create an SVG attribute \"pointsAtY\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointsAtY\")>]\n        let pointsAtY value = Attr.Create \"pointsAtY\" value\n        /// Create an SVG attribute \"pointsAtZ\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointsAtZ\")>]\n        let pointsAtZ value = Attr.Create \"pointsAtZ\" value\n        /// Create an SVG attribute \"preserveAlpha\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"preserveAlpha\")>]\n        let preserveAlpha value = Attr.Create \"preserveAlpha\" value\n        /// Create an SVG attribute \"preserveAspectRatio\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"preserveAspectRatio\")>]\n        let preserveAspectRatio value = Attr.Create \"preserveAspectRatio\" value\n        /// Create an SVG attribute \"primitiveUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"primitiveUnits\")>]\n        let primitiveUnits value = Attr.Create \"primitiveUnits\" value\n        /// Create an SVG attribute \"r\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"r\")>]\n        let r value = Attr.Create \"r\" value\n        /// Create an SVG attribute \"radius\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"radius\")>]\n        let radius value = Attr.Create \"radius\" value\n        /// Create an SVG attribute \"repeatCount\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"repeatCount\")>]\n        let repeatCount value = Attr.Create \"repeatCount\" value\n        /// Create an SVG attribute \"repeatDur\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"repeatDur\")>]\n        let repeatDur value = Attr.Create \"repeatDur\" value\n        /// Create an SVG attribute \"requiredFeatures\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"requiredFeatures\")>]\n        let requiredFeatures value = Attr.Create \"requiredFeatures\" value\n        /// Create an SVG attribute \"restart\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"restart\")>]\n        let restart value = Attr.Create \"restart\" value\n        /// Create an SVG attribute \"result\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"result\")>]\n        let result value = Attr.Create \"result\" value\n        /// Create an SVG attribute \"rx\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rx\")>]\n        let rx value = Attr.Create \"rx\" value\n        /// Create an SVG attribute \"ry\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ry\")>]\n        let ry value = Attr.Create \"ry\" value\n        /// Create an SVG attribute \"scale\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scale\")>]\n        let scale value = Attr.Create \"scale\" value\n        /// Create an SVG attribute \"seed\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"seed\")>]\n        let seed value = Attr.Create \"seed\" value\n        /// Create an SVG attribute \"shape-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"shape-rendering\")>]\n        let shapeRendering value = Attr.Create \"shape-rendering\" value\n        /// Create an SVG attribute \"specularConstant\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"specularConstant\")>]\n        let specularConstant value = Attr.Create \"specularConstant\" value\n        /// Create an SVG attribute \"specularExponent\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"specularExponent\")>]\n        let specularExponent value = Attr.Create \"specularExponent\" value\n        /// Create an SVG attribute \"stdDeviation\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stdDeviation\")>]\n        let stdDeviation value = Attr.Create \"stdDeviation\" value\n        /// Create an SVG attribute \"stitchTiles\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stitchTiles\")>]\n        let stitchTiles value = Attr.Create \"stitchTiles\" value\n        /// Create an SVG attribute \"stop-color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stop-color\")>]\n        let stopColor value = Attr.Create \"stop-color\" value\n        /// Create an SVG attribute \"stop-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stop-opacity\")>]\n        let stopOpacity value = Attr.Create \"stop-opacity\" value\n        /// Create an SVG attribute \"stroke\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke\")>]\n        let stroke value = Attr.Create \"stroke\" value\n        /// Create an SVG attribute \"stroke-dasharray\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-dasharray\")>]\n        let strokeDasharray value = Attr.Create \"stroke-dasharray\" value\n        /// Create an SVG attribute \"stroke-dashoffset\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-dashoffset\")>]\n        let strokeDashoffset value = Attr.Create \"stroke-dashoffset\" value\n        /// Create an SVG attribute \"stroke-linecap\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-linecap\")>]\n        let strokeLinecap value = Attr.Create \"stroke-linecap\" value\n        /// Create an SVG attribute \"stroke-linejoin\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-linejoin\")>]\n        let strokeLinejoin value = Attr.Create \"stroke-linejoin\" value\n        /// Create an SVG attribute \"stroke-miterlimit\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-miterlimit\")>]\n        let strokeMiterlimit value = Attr.Create \"stroke-miterlimit\" value\n        /// Create an SVG attribute \"stroke-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-opacity\")>]\n        let strokeOpacity value = Attr.Create \"stroke-opacity\" value\n        /// Create an SVG attribute \"stroke-width\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-width\")>]\n        let strokeWidth value = Attr.Create \"stroke-width\" value\n        /// Create an SVG attribute \"style\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"style\")>]\n        let style value = Attr.Create \"style\" value\n        /// Create an SVG attribute \"surfaceScale\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"surfaceScale\")>]\n        let surfaceScale value = Attr.Create \"surfaceScale\" value\n        /// Create an SVG attribute \"targetX\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"targetX\")>]\n        let targetX value = Attr.Create \"targetX\" value\n        /// Create an SVG attribute \"targetY\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"targetY\")>]\n        let targetY value = Attr.Create \"targetY\" value\n        /// Create an SVG attribute \"text-anchor\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text-anchor\")>]\n        let textAnchor value = Attr.Create \"text-anchor\" value\n        /// Create an SVG attribute \"text-decoration\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text-decoration\")>]\n        let textDecoration value = Attr.Create \"text-decoration\" value\n        /// Create an SVG attribute \"text-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text-rendering\")>]\n        let textRendering value = Attr.Create \"text-rendering\" value\n        /// Create an SVG attribute \"to\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"to\")>]\n        let ``to`` value = Attr.Create \"to\" value\n        /// Create an SVG attribute \"transform\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"transform\")>]\n        let transform value = Attr.Create \"transform\" value\n        /// Create an SVG attribute \"type\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"type\")>]\n        let ``type`` value = Attr.Create \"type\" value\n        /// Create an SVG attribute \"values\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"values\")>]\n        let values value = Attr.Create \"values\" value\n        /// Create an SVG attribute \"viewBox\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"viewBox\")>]\n        let viewBox value = Attr.Create \"viewBox\" value\n        /// Create an SVG attribute \"visibility\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"visibility\")>]\n        let visibility value = Attr.Create \"visibility\" value\n        /// Create an SVG attribute \"width\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"width\")>]\n        let width value = Attr.Create \"width\" value\n        /// Create an SVG attribute \"word-spacing\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"word-spacing\")>]\n        let wordSpacing value = Attr.Create \"word-spacing\" value\n        /// Create an SVG attribute \"writing-mode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"writing-mode\")>]\n        let writingMode value = Attr.Create \"writing-mode\" value\n        /// Create an SVG attribute \"x\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"x\")>]\n        let x value = Attr.Create \"x\" value\n        /// Create an SVG attribute \"x1\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"x1\")>]\n        let x1 value = Attr.Create \"x1\" value\n        /// Create an SVG attribute \"x2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"x2\")>]\n        let x2 value = Attr.Create \"x2\" value\n        /// Create an SVG attribute \"xChannelSelector\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"xChannelSelector\")>]\n        let xChannelSelector value = Attr.Create \"xChannelSelector\" value\n        /// Create an SVG attribute \"y\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"y\")>]\n        let y value = Attr.Create \"y\" value\n        /// Create an SVG attribute \"y1\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"y1\")>]\n        let y1 value = Attr.Create \"y1\" value\n        /// Create an SVG attribute \"y2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"y2\")>]\n        let y2 value = Attr.Create \"y2\" value\n        /// Create an SVG attribute \"yChannelSelector\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"yChannelSelector\")>]\n        let yChannelSelector value = Attr.Create \"yChannelSelector\" value\n        /// Create an SVG attribute \"z\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"z\")>]\n        let z value = Attr.Create \"z\" value\n        // }}\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Sitelets\n\n[<CompiledName \"InstallRouter\">]\n[<JavaScript>]\nmodule Router =\n\n    let private getCurrent parse onParseError =\n        let loc = JS.Window.Location\n        let p = loc.Pathname + loc.Search |> Route.FromUrl\n        match parse p with\n        | Some a -> a\n        | None ->\n            printfn \"Failed to parse route: %s\" (p.ToLink()) \n            onParseError\n\n    /// Trim the #fragment, if any, from a URL.\n    let private trimFragment (url: string) =\n        match url.IndexOf('#') with\n        | -1 -> url\n        | i -> url.[..i-1]\n\n    /// Transform the url from an <a href=\"XYZ\"> tag into an absolute path+query,\n    /// if it is indeed a URL that Install wants to handle.\n    let private hrefToAbsolute (href: string) =\n        if href.StartsWith(\"?\") then\n            // Query only, just add it to the current path\n            Some (JS.Window.Location.Pathname + href |> trimFragment)\n        elif href.StartsWith(\"#\") then\n            // Fragment only, Install doesn't handle it\n            None\n        elif href.StartsWith(\"/\") then\n            // Absolute path, just use it\n            Some (href |> trimFragment)\n        elif RegExp(\"^[a-zA-Z0-9]:\").Test(href) then\n            // Full URL (eg: \"http://foo.bar\"), we don't handle it\n            None\n        else\n            // Relative URL, combine it with the current path\n            let s = JS.Window.Location.Pathname\n            Some (s.[..s.LastIndexOf('/')] + href |> trimFragment)\n\n    let rec private findLinkHref (n: Dom.Element) =\n        if n.TagName = \"A\" then\n            n.GetAttribute(\"href\") |> Option.ofObj\n        elif n ===. JS.Document.Body then\n            None\n        else\n            findLinkHref (n.ParentNode :?> Dom.Element)\n\n    /// Installs client-side routing on the full URL. \n    /// If initials URL parse fails, value is left as the initial value of `var`.\n    let InstallInto (var: Var<'T>) onParseError (router: Router<'T>) : unit =\n        let parse p = Router.Parse router p\n        let cur() : 'T = getCurrent parse onParseError\n\n        let set value =\n            if var.Value <> value then\n                var.Value <- value\n        \n        JS.Window.AddEventListener(\"popstate\", (fun () -> set (cur())), false)\n\n        JS.Document.Body.AddEventListener(\"click\", (fun (ev: Dom.Event) ->\n            findLinkHref (As ev.Target)\n            |> Option.bind hrefToAbsolute\n            |> Option.bind (Route.FromUrl >> parse)\n            |> Option.iter (fun a ->\n                set a\n                ev.PreventDefault()\n            )\n        ), false)\n        \n        var.View\n        |> View.Sink (fun value ->\n            if value <> cur() then \n                let url = Router.Link router value\n                JS.Window.History.PushState(null, null, url)\n        )\n\n    /// Installs client-side routing on the full URL. \n    /// If initials URL parse fails, value is set to `onParseError`. \n    let Install onParseError (router: Router<'T>) : Var<'T> =\n        let parse p = Router.Parse router p\n        let var = Var.Create (getCurrent parse onParseError)\n        InstallInto var onParseError router\n        var\n\n    let private getCurrentHash parse onParseError =\n        let h = JS.Window.Location.Hash\n        match parse h with\n        | Some a -> \n            a\n        | None ->\n            printfn \"Failed to parse route: %s\" h \n            onParseError\n\n    /// Installs client-side routing on the hash part of the URL. \n    /// If initials URL parse fails, value is left as the initial value of `var`.\n    let InstallHashInto (var: Var<'T>) onParseError (router: Router<'T>) =\n        let parse h = \n            let p = Route.FromHash(h, true)\n            Router.Parse router p\n        let cur() : 'T = getCurrentHash parse onParseError\n        let set value =\n            if var.Value <> value then\n                var.Value <- value\n       \n        JS.Window.AddEventListener(\"popstate\", (fun () -> set (cur())), false)\n        JS.Window.AddEventListener(\"hashchange\", (fun () -> set (cur())), false)\n\n        JS.Document.Body.AddEventListener(\"click\", (fun (ev: Dom.Event) ->\n            findLinkHref (As ev.Target)\n            |> Option.bind (fun href -> if href.StartsWith \"#\" then parse href else None)\n            |> Option.iter (fun a ->\n                set a\n                ev.PreventDefault()\n            )\n        ), false)\n\n        var.View\n        |> View.Sink (fun value ->\n            if value <> cur() then \n                let url = Router.HashLink router value\n                JS.Window.History.PushState(null, null, url)\n        )\n\n    /// Installs client-side routing on the hash part of the URL. \n    /// If initials URL parse fails, value is set to `onParseError`. \n    let InstallHash onParseError (router: Router<'T>) =\n        let parse h = \n            let p = Route.FromHash(h, true)\n            Router.Parse router p\n        let cur() : 'T = getCurrentHash parse onParseError\n        let var = Var.Create (cur())\n        InstallHashInto var onParseError router\n        var\n\nopen System.Runtime.CompilerServices\n\n[<Extension; JavaScript>]\ntype RouterExtensions =\n\n    [<Extension; Inline>]\n    static member Install(router, onParseError) =\n        Router.Install onParseError router\n\n    [<Extension; Inline>]\n    static member InstallHash(router, onParseError) =\n        Router.InstallHash onParseError router\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\n// NOTES: need better facilities for the user to construct routers. In particular,\n// should be possible to encode numbers, semi-automatically provide bijections,\n// and so on.\n\nopen WebSharper\nopen WebSharper.JavaScript\nmodule A = AppendList\nmodule T = Trie\n\ntype RouteMap<'T> =\n    {\n        Des : (list<string> * Map<string, string>) -> 'T\n        Ser : 'T -> (list<string> * Map<string, string>)\n    }\n\n[<JavaScript>]\nmodule Route =\n\n    let private NoHash (s: string) =\n        if s.StartsWith(\"#\") then s.Substring(1) else s\n\n    [<Inline \"decodeURIComponent($x)\">]\n    let private Decode (x: string) : string = JS.Undefined\n\n    [<Inline \"encodeURIComponent($x)\">]\n    let private Encode (x: string) : string = JS.Undefined\n\n    type T =\n        private\n        | Route of AppendList<string> * Map<string, string>\n\n    let ParseHash (hash: string) =\n        let hash = NoHash hash\n        let path, query =\n            match hash.IndexOf '?' with\n            | -1 -> hash, \"\"\n            | i -> hash.[..i-1], hash.[i+1..]\n        let path =\n            if path = \"\" then [||] \n            else path.Split('/') |> Array.map Decode\n            |> A.FromArray\n        let query =\n            query.Split('&')\n            |> Array.map (fun s ->\n                match s.IndexOf '=' with\n                | -1 -> Decode s, \"\"\n                | i -> Decode (s.[..i-1]), Decode (s.[i+1..]))\n            |> Map.ofArray\n        Route (path, query)\n\n    let MakeHash (Route (path, query)) =\n        let path =\n            A.ToArray path\n            |> Array.map Encode\n            |> String.concat \"/\"\n        if Map.isEmpty query then\n            path\n        else\n            path + \"?\" +\n            (query\n            |> Seq.map (fun (KeyValue(k, v)) -> Encode k + \"=\" + Encode v)\n            |> String.concat \"&\")\n\n    let SameHash a b =\n        NoHash a = NoHash b\n\n    let ToList (Route (rt, q)) =\n        let path =\n            A.ToArray rt\n            |> Array.toList\n        path, q\n\n    let FromList (xs, q) =\n        let a =\n            List.toArray xs\n            |> A.FromArray\n        Route(a, q)\n\n    let Append (Route (pa, qa)) (Route (pb, qb)) =\n        Route (A.Append pa pb, Map.foldBack Map.add qa qb)\n\n[<JavaScript>]\nmodule Routing =\n\n    let InstallMap (rt: RouteMap<'T>) : Var<'T> =\n        let win = JS.Window\n        let same a b = rt.Ser a = rt.Ser b\n        let cur () =\n            Route.ParseHash win.Location.Hash\n            |> Route.ToList\n            |> rt.Des\n        let var = Var.Create (cur ())\n        let set value =\n            if not (same var.Value value) then\n                var.Value <- value\n        let onUpdate = System.Action<_>(fun (evt: Dom.Event) -> set (cur ()))\n        win.Onpopstate <- onUpdate\n        win.Onhashchange <- onUpdate\n        var.View\n        |> View.Sink (fun loc ->\n            let ha = Route.MakeHash (Route.FromList (rt.Ser loc))\n            if not (Route.SameHash win.Location.Hash ha) then\n                win.Location.Replace (\"#\" + ha))\n        var\n\n    let DoRoute map route =\n        map.Des (Route.ToList route)\n\n    let DoLink map va =\n        Route.FromList (map.Ser va)\n\n[<JavaScript>]\n[<Sealed>]\ntype RouteMap =\n\n    static member CreateWithQuery ser des =\n        { Ser = ser; Des = des }\n\n    static member Create ser des =\n        { Ser = (fun x -> ser x, Map.empty); Des = fst >> des }\n\n    static member Install map =\n        Routing.InstallMap map\n", "namespace WebSharper.UI\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nopen WebSharper.UI.Notation\nopen WebSharper.JQuery\n\n[<JavaScript>]\nmodule Input =\n\n    type MousePosSt =\n        {\n            mutable Active : bool\n            PosV : Var<int * int>\n        }\n\n    type MouseBtnSt =\n        {\n            mutable Active : bool\n            Left : Var<bool>\n            Middle : Var<bool>\n            Right : Var<bool>\n        }\n\n    let MousePosSt = { Active = false; PosV = Var.Create (0, 0) }\n    let MouseBtnSt =\n        {\n            Active = false;\n            Left = Var.Create false\n            Middle = Var.Create false\n            Right = Var.Create false\n        }\n\n    // Add the button listener if it hasn't been added already.\n    // Button listener adds mousedown and mouseup events, which modify\n    // MouseBtnSt vars.\n    let ActivateButtonListener =\n        let buttonListener (evt: Dom.MouseEvent) down =\n            match evt.Button with\n            | 0 -> Var.Set MouseBtnSt.Left down\n            | 1 -> Var.Set MouseBtnSt.Middle down\n            | 2 -> Var.Set MouseBtnSt.Right down\n            | _ -> ()\n\n        if not MouseBtnSt.Active then\n            MouseBtnSt.Active <- true\n            JS.Document.AddEventListener(\"mousedown\",\n                (fun (evt: Dom.Event) -> buttonListener (evt :?> Dom.MouseEvent) true), false)\n            JS.Document.AddEventListener(\"mouseup\",\n                (fun (evt: Dom.Event) -> buttonListener (evt :?> Dom.MouseEvent) false), false)\n\n    [<Sealed>]\n    type Mouse =\n\n        static member Position =\n\n            let onMouseMove (evt: Dom.Event) =\n                // We know this is a mouse event, so safe to downcast\n                let mEvt = evt :?> Dom.MouseEvent\n                Var.Set MousePosSt.PosV (mEvt.ClientX, mEvt.ClientY)\n\n            // Add the mouse movement event if it's not there already.\n            if not MousePosSt.Active then\n                JS.Document.AddEventListener(\"mousemove\", onMouseMove, false)\n                MousePosSt.Active <- true\n\n            View.FromVar MousePosSt.PosV\n\n        static member LeftPressed =\n            ActivateButtonListener\n            MouseBtnSt.Left.View\n\n        static member MiddlePressed =\n            ActivateButtonListener\n            MouseBtnSt.Middle.View\n\n        static member RightPressed =\n            ActivateButtonListener\n            MouseBtnSt.Right.View\n\n        static member MousePressed =\n            ActivateButtonListener\n            // True if any button is pressed\n            View.Const (fun l m r -> l || m || r)\n            <*> MouseBtnSt.Left.View\n            <*> MouseBtnSt.Middle.View\n            <*> MouseBtnSt.Right.View\n\n    type Key = int\n\n    // State for keyboard listener: which keys are pressed, whether the listener\n    // is active, and the last key that has been presed\n    type KeyListenerSt =\n        {\n            KeysPressed : Var<Key list>\n            mutable KeyListenerActive : bool\n            LastPressed : Var<Key>\n        }\n\n    let KeyListenerState =\n        {\n            KeysPressed = Var.Create []\n            KeyListenerActive = false\n            LastPressed = Var.Create (-1)\n        }\n\n    let ActivateKeyListener =\n        if not KeyListenerState.KeyListenerActive then\n            // Using JQuery for cross-compatibility.\n            JQuery.Of(JS.Document).Keydown(fun el evt ->\n                let keyCode = evt.Which\n                Var.Set KeyListenerState.LastPressed keyCode\n                let xs = Var.Get KeyListenerState.KeysPressed\n                if not (List.exists (fun x -> x = keyCode) xs) then\n                    KeyListenerState.KeysPressed.Value <- xs @ [keyCode]\n            ) |> ignore\n\n            JQuery.Of(JS.Document).Keyup(fun el evt ->\n                let keyCode = evt.Which\n                Var.Update KeyListenerState.KeysPressed\n                    (List.filter (fun x -> x <> keyCode))\n            ) |> ignore\n\n    [<Sealed>]\n    type Keyboard =\n\n        static member KeysPressed =\n            ActivateKeyListener\n            KeyListenerState.KeysPressed.View\n\n        static member LastPressed =\n            ActivateKeyListener\n            KeyListenerState.LastPressed.View\n\n        static member IsPressed key =\n            ActivateKeyListener\n            View.Map (List.exists (fun x -> x = key))\n                KeyListenerState.KeysPressed.View\n", "#nowarn \"3242\"\n#nowarn \"52\"\n#nowarn \"1182\"\n#nowarn \"1178\"\n////-d:FSharpStation1567214137408 -d:NETSTANDARD20 -d:NOFRAMEWORK --noframework -d:TEE -d:WEBSHARPER\n////#cd @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/projects/ProzperServer\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Core\\lib\\netstandard1.6\\FSharp.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\netstandard.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\mscorlib.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Globalization.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Reflection.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Numerics.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.Linq.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Net.Http.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Runtime.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.IO.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.Tasks.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.JavaScript.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Collections.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.InterfaceGenerator.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Main.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JQuery.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JavaScript.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Web.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Sitelets.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Control.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\HtmlAgilityPack.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Runtime.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Common.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Data\\lib\\net45\\FSharp.Data.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\other\\AuthorizeNet\\lib\\AuthorizeNet.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper/WindowsAzure.Storage/lib/net45/Microsoft.WindowsAzure.Storage.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper/Newtonsoft.Json/lib/net45/Newtonsoft.Json.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.IdentityModel.Tokens\\lib\\net461\\Microsoft.IdentityModel.Tokens.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.Protocols\\lib\\net461\\Microsoft.IdentityModel.Protocols.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.Protocols.OpenIdConnect\\lib\\net461\\Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.Logging\\lib\\net461\\Microsoft.IdentityModel.Logging.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.JsonWebTokens\\lib\\net461\\Microsoft.IdentityModel.JsonWebTokens.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Configuration.ConfigurationManager/lib/net461/System.Configuration.ConfigurationManager.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.Cryptography.ProtectedData/lib/net461/System.Security.Cryptography.ProtectedData.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.Permissions/lib/net461/System.Security.Permissions.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.AccessControl/lib/net461/System.Security.AccessControl.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Buffers/lib/netstandard1.1/System.Buffers.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Numerics.Vectors/lib/net46/System.Numerics.Vectors.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Runtime.CompilerServices.Unsafe/lib/netstandard1.0/System.Runtime.CompilerServices.Unsafe.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.Principal.Windows/lib/net461/System.Security.Principal.Windows.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Memory/lib/netstandard1.1/System.Memory.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages\\test2\\System.IdentityModel.Tokens.Jwt\\lib\\net461\\System.IdentityModel.Tokens.Jwt.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Host.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Core\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Extensions\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Extensions.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Extensions.Storage\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Extensions.Storage.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.Primitives\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.Logging\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.Logging.Abstractions\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Extensions.Http\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Extensions.Http.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.DependencyInjection\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.DependencyInjection.Abstractions\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Http\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Http.Abstractions\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Http.Features\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Mvc.Core\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Mvc.Abstractions\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\"\n//#nowarn \"3242\"\n//#nowarn \"52\"\n//#nowarn \"1182\"\n//#nowarn \"1178\"\n/// Root namespace for all code\n//#define FSharpStation1567214137408\n#if INTERACTIVE\nmodule FsRoot   =\n#else\nnamespace FsRoot\n#endif\n\n    #if !NETSTANDARD20\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\"\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Web.dll\"\n    \n    #if WEBSHARPER\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\"\n    \n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n    #endif\n    #endif\n    //#define NOFRAMEWORK --noframework\n    \n    #if NETSTANDARD20\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Core\\lib\\netstandard1.6\\FSharp.Core.dll\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\netstandard.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\mscorlib.dll\"\n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Globalization.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Reflection.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Numerics.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Core.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Xml.Linq.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Net.Http.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Runtime.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.IO.dll\"   \n    //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\NETStandard.Library\\build\\netstandard2.0\\ref\\System.Threading.Tasks.dll\"  \n    \n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\"\n    \n    #if WEBSHARPER\n    \n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Collections.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Main.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JQuery.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Web.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Sitelets.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\netstandard2.0\\WebSharper.Control.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\HtmlAgilityPack.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\netstandard2.0\\WebSharper.UI.Templating.Common.dll\"\n    #endif\n    #endif\n    #if WEBSHARPER\n    //#nowarn \"3242\" \n    \n    open WebSharper\n    open WebSharper.JavaScript\n    open WebSharper.UI\n    open WebSharper.UI.Client\n    type on   = WebSharper.UI.Html.on\n    type attr = WebSharper.UI.Html.attr\n    #else\n    /// dummy WebSharper definition in order to avoid having to use #if WEBSHARPER all the time\n    module WebSharper =\n        type RpcAttribute() =\n            inherit System.Attribute()\n            let a = 1\n        type JavaScriptAttribute(translate:bool) =\n            inherit System.Attribute()\n            let a = 1\n            new() = JavaScriptAttribute true\n        type InlineAttribute(code:string) =\n            inherit System.Attribute()\n            let a = 1\n            new() = InlineAttribute \"\"\n        type DirectAttribute(code:string) =\n            inherit System.Attribute()\n            let a = 1\n    \n    open WebSharper\n    \n    #endif\n    \n        /// Essentials that can be converted to JavaScript with WebSharper\n        [< JavaScript ; AutoOpen >]\n        module Library = \n            let Error = Result.Error\n        \n            let [<Inline>] inline swap f a b = f b a\n            \n            /// swap: for use with operators: [1..5] |> List.map (__ (/) 2)\n            let [<Inline>] inline __   f a b = f b a\n            \n            /// call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |> tee (printfn \"value = %d\") |> doSomethingElse\n            let [<Inline>] inline tee f v = f v ; v\n            \n            /// tee: call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |!> printfn \"value = %d\" |> doSomethingElse\n            let [<Inline>] inline  (|>!) v f   = f v ; v\n            let [<Inline>] inline  (>>!) g f   = g >> fun v -> f v ; v\n            \n            let inline print v = \n                match box v with\n                | :? string as s -> printfn \"%s\" s\n                | __             -> printfn \"%A\" v\n            \n            //#define TEE\n            \n            let [< Inline \"new Date(0).getTime()\" >] Utc1970_01_01                 = System.DateTime(1970,1,1,0,0,0,System.DateTimeKind.Utc)\n            let [< Inline \"$d\"                    >] date2Long (d:System.DateTime) = d.Subtract(Utc1970_01_01).Ticks / 10000L\n            let [< Inline \"$l\"                    >] long2Date (l:int64          ) = Utc1970_01_01.Add(System.TimeSpan(l * 10000L) )\n            \n            \n            (* issues with websharper Type not found in JavaScript compilation: System.Collections.Generic.IDictionary`2\n            module IDict =\n            #if WEBSHARPER\n                [< Inline >]\n            #endif\n                let inline tryGetValue key (dict:System.Collections.Generic.IDictionary<_, _>) =\n                    let mutable res = Unchecked.defaultof<_>\n                    if dict.TryGetValue(key, &res)\n                    then Some res \n                    else None\n                let add          key v (dict:System.Collections.Generic.IDictionary<_, _>) = if dict.ContainsKey key then      dict.[key] <- v else dict.Add(key, v)\n            *)\n            module Dict =\n                let [<Inline>] inline tryGetValue key (dict:System.Collections.Generic. Dictionary<_, _>) =\n                    let mutable res = Unchecked.defaultof<_>\n                    if dict.TryGetValue(key, &res)\n                    then Some res \n                    else None\n                let add          key v (dict:System.Collections.Generic. Dictionary<_, _>) = if dict.ContainsKey key then      dict.[key] <- v else dict.Add(key, v)\n            \n            module LDict =\n                let [<Inline>] inline containsKey  key  dict = (^a : (member ContainsKey : _ -> bool) (dict, key))\n                //let inline item         key  dict = (^a : (member get_Item    : _ -> _   ) (dict, key))\n                let [<Inline>] inline tryGetValue fitem key  dict =\n                    if containsKey key dict then Some (fitem key)\n                    else None\n            \n            \n            module Memoize =\n            \n                /// returns 3 functions:\n                ///    checkO  : ('p->'v option) \n                ///    getOrAdd: ('p->('p->'v)->'v) \n                ///    clear   : (unit->unit)\n                [<Inline>]\n                let getStoreWithDict (cache: System.Collections.Generic.Dictionary<_, _>) =\n                    let checkO v     = let mutable res = Unchecked.defaultof<_>\n                                       let ok          = cache.TryGetValue(v, &res)\n                                       if  ok then Some res else None\n                    let store  v res = cache.[v] <- res\n                                       res\n                    let getOrAdd p f = checkO p |> Option.defaultWith (fun () -> f p |> store p )\n                    (checkO, getOrAdd), cache.Clear\n            \n                /// creates a Dictionary to store memoized values\n                /// returns 3 functions:\n                ///    checkO  : ('p->'v option) \n                ///    getOrAdd: ('p->('p->'v)->'v) \n                ///    clear   : (unit->unit)\n                [<Inline>]\n                let getStore() = getStoreWithDict (System.Collections.Generic.Dictionary<_, _>() )\n            \n                /// Memoizes function f using the provided cache\n                /// getCache() returns 1 function:\n                ///    getOrAdd: ('p->('p->'v)->'v) \n                [< Inline >]\n                let memoizeStore (getOrAdd:('key -> ('key -> 'value) -> 'value) ) f =\n                    fun p -> getOrAdd p f\n            \n            \n                /// Memoizes the function f using a Dictionary\n                /// Returns the memoized function and a clear() function\n                /// The dictionary can be reset using the clear() function\n                [< Inline >]\n                let memoizeResetable f =\n                    let (check, getOrAdd), clear = getStore()\n                    let memoF = memoizeStore getOrAdd f\n                    memoF, clear\n            \n                /// Memoizes the function f using the provided Dictionary\n                [<Inline>]\n                let memoizeWithDict dict f =\n                    let (check, getOrAdd), clear = getStoreWithDict dict\n                    let memoF = memoizeStore getOrAdd f\n                    memoF\n            \n                /// Memoizes the function f and returns Dictionary\n                [<Inline>]\n                let memoizeDict f =\n                    let dict = System.Collections.Generic.Dictionary<_, _>() \n                    let (check, getOrAdd), clear = getStoreWithDict dict\n                    let memoF = memoizeStore getOrAdd f\n                    memoF, dict\n            \n                /// Memoizes the function f using a Dictionary\n                [<Inline>]\n                let memoize f = memoizeResetable f |> fst\n            \n            \n            [< AutoOpen >]\n            module Monads =\n                module Seq =    \n                    let rtn = Seq.singleton\n                    let insertO  vSO              = vSO |> Option.map(Seq.map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vSR:Result<_,_>) = vSR |> function | Error m -> rtn (Error m) | Ok v -> Seq.map Ok v\n                    let absorbO  vOS              = vOS |> Seq.choose id\n                    let absorbR  vOS              = vOS |> Seq.choose (function Ok v -> Some v |_-> None)\n                    let ofOption vO = \n                        match vO with\n                        | Some v -> Seq.singleton v\n                        | None   -> Seq.empty\n                \n                /// Extensions to Async\n                module Async =\n                    let [< Inline >] inline rtn   v    = async.Return v\n                    let [< Inline >] inline bind  f vA = async.Bind(  vA, f)\n                    let [< Inline >] inline map   f    = bind (f >> rtn)\n                    /// Executes f Synchronously\n                    [< Inline \"throw 'iterS cannot be used in JavaScript!'\" >] \n                    let inline iterS (f: 'a->unit) = map f >> Async.RunSynchronously\n                    /// Executes f Asynchronously\n                    let [< Inline >] inline iterA f             = map f >> Async.Start\n                    let apply fA vA = async {\n                        let! fChild = Async.StartChild fA\n                        let! vChild = Async.StartChild vA\n                        let! f = fChild\n                        let! v = vChild \n                        return f v \n                    }\n                    let sleepThen f milliseconds = async {\n                        do! Async.Sleep milliseconds\n                        return f()\n                    }\n                    let (>>=)                              v f = bind f v\n                    let traverseSeq             f           sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO  vAO                           = vAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vAR:Result<_,_>)              = vAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                \n                \n                module Result =\n                    open Result\n                \n                    let errorf fmt = Printf.ksprintf Error fmt\n                \n                    let rtn                          = Ok\n                    let join                       r = Result.bind id r\n                    let flatten                    r = Result.bind id r\n                    let toOption                   r = r   |> function Ok v -> Some v |       _ -> None\n                    let defaultWith              f r = r   |> function Ok v ->      v | Error e -> f e\n                    let defaultValue             d r = r   |> function Ok v ->      v | Error _ -> d\n                    let failIfTrue               m v = if     v then m |> Error  else Ok () \n                    let failIfFalse              m v = if not v then m |> Error  else Ok () \n                    let iter                  fE f r = r   |> map  f |> defaultWith fE                                                 : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map Ok           |> Option.defaultWith (f >> Error)\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> Ok None)\n                    let absorbO               f  vOR = vOR |> bind (ofOption f)\n                    let (>>=)                    r f = bind f r\n                    let traverseSeq           f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bind f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let result = Builder()\n                    \n                    module Operators =\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                        let result = result\n                \n                \n                /// Based on Nick Palladino's https://github.com/palladin/Eff\n                \n                [< AutoOpen >]\n                module Eff =\n                    type Effect  = abstract Extend : (Effect -> Effect) -> Effect\n                \n                    type Eff<'H, 'a> = Eff of (('a -> Effect) -> Effect) \n                        with  member this.Create = match this with Eff create -> create\n                \n                    let inline rtn  v : Eff<'H, 'a> = Eff (fun k -> k v)\n                    let bind  (f: 'a -> Eff<'H, 'b>) (effA: Eff<'H, 'a>) : Eff<'H, 'b> = \n                                        Eff (fun kb -> \n                                                let (Eff effKa) = effA\n                                                effKa (fun a -> \n                                                    let (Eff effKb) = f a\n                                                    effKb kb\n                                                )\n                                            )\n                    let inline map   f  m  = bind (f >> rtn) m\n                    let inline apply fR vR = fR |> bind (fun f -> map f vR)\n                \n                    type Done<'a>(v : 'a) =\n                        member self.Value = v\n                        interface Effect with member self.Extend(_) : Effect = self :> _\n                \n                    let done'  (v : 'a) : Effect = new Done<'a>(v) :> _ \n                    //let return'(v : 'a) : Eff<'H, 'c> = Eff( fun _ -> done' v )\n                    let return' v = Eff( fun _ -> done' v )\n                \n                    let run<'H, 'a> (eff: Eff<'H, 'a>) : 'a =\n                        match eff.Create done' with\n                        | :? Done<'a> as done' -> done'.Value\n                        | v                    -> failwithf \"Unhandled effect %A\" v\n                \n                    let inline runResult<'H, 'a> eff = \n                        try run<'H, 'a> eff |> Ok\n                        with e -> Error(e.ToString())\n                \n                \n                    let inline ( <*> ) f v   = apply f v\n                    let inline ( |>> ) v f   = map   f v\n                    let inline ( >>= ) v f   = bind  f v\n                    let inline ( >-> ) f g v = f v |>> g\n                    let inline ( >=> ) f g v = f v >>= g\n                    \n                    #if TEE\n                    let inline ( |>>!) v f   = map   (tee f                       ) v\n                    let inline ( >>=!) v f   = bind  (fun w -> f w |>> fun () -> w) v\n                    #endif\n                    \n                    let inline join m = m |> bind id\n                    \n                    let traverseSeq            f     sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                          Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |>> Seq.ofList\n                    let inline sequenceSeq           sq = traverseSeq id sq\n                    \n                    let inline insertO    vvO               = vvO   |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let inline insertR   (vvR:Result<_,_>)  = vvR   |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let inline insertFst (fst, vEf)         = vEf   |> map (fun v -> fst, v)\n                    let inline insertSnd (vEf, snd)         = vEf   |> map (fun v -> v, snd)\n                    \n                    let inline bindO (f:'a->Eff<'H,'b>) (ef:Eff<'H,'a option>) = bind (Option.map f >> insertO) ef\n                    let rec whileLoop cond fEf =\n                        if   cond () \n                        then fEf  () |> bind (fun () -> whileLoop cond fEf)\n                        else rtn  ()\n                    \n                    \n                    type EffBuilder<'H>() =\n                        member __.ReturnFrom            vEf        : Eff<'H, _   > =           vEf\n                        member __.Return                v          : Eff<'H, _   > = rtn       v  \n                        member __.Zero                  ()         : Eff<'H, unit> = rtn       () \n                        member __.Bind                 (vEf,  fEf) : Eff<'H, _   > = bind fEf  vEf\n                        member __.Combine              (vEf,  fEf) : Eff<'H, _   > = bind fEf  vEf\n                        member __.Delay                       fEf                  = fEf\n                        member __.Run                         fEf  : Eff<'H, _   > = rtn () |> bind fEf\n                        member this.TryWith   (body, handler     ) : Eff<'H,_> = Eff(fun k -> try body() |> function Eff(f) -> f k with e -> handler e |> function Eff(f) -> f k)\n                        member this.TryFinally(body:unit-> Eff<'H,'R>, compensation) : Eff<'H,'R> = (try body() with e -> compensation() ; reraise() ) |>>! (fun _ -> compensation())\n                        member this.Using     (disposable, body  ) : Eff<'H,_> = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                                    let body' = fun () -> body disposable\n                                    this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                        member __.While   (guard , fEf) : Eff<'H, unit> = whileLoop guard fEf \n                        member th.For  (s: 'a seq, fEf) : Eff<'H, unit> = th.Using(s.GetEnumerator (), fun enum ->\n                                                                                        th.While(enum.MoveNext,\n                                                                                            th.Delay(fun () -> fEf enum.Current)))\n                    \n                    let eff<'H> = EffBuilder<'H>()\n                    \n                    //type EffBuilder<'H>() =\n                    //    member self.Zero      (                 ) = rtn ()\n                    //    member self.Return    (v   :         'A ) = rtn v\n                    //    member self.ReturnFrom eff                = eff\n                    //    member self.Bind      (eff, f           ) = bind f eff\n                    //    member self.Combine   (first, second    ) = bind (fun () -> second) first\n                    //    member __.Combine   (vEf,  fEf) : Eff<'H  , 'm> = bind fEf  vEf\n                    //    member self.Delay (f : unit -> Eff<'U, 'A>) : Eff<'U, 'A> =  Eff (fun k -> let (Eff cont) = f () in cont k)\n                    ////    member inline __.Delay       f                  = f\n                    //    member __.While(guard, body) =\n                    //        let rec whileLoop guard body =\n                    //            if guard() then body() |> bind (fun () -> whileLoop guard body)\n                    //            else rtn   ()\n                    //        whileLoop guard body\n                    //    member this.TryWith   (body, handler     ) = Eff(fun k -> try body() |> function Eff(f) -> f k with e -> handler e |> function Eff(f) -> f k)\n                    //    member this.TryFinally(body, compensation) = Eff(fun k -> try body() |> function Eff(f) -> f k finally   compensation()           )\n                    //    member this.Using     (disposable, body  ) = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                    //                let body' = fun () -> body disposable\n                    //                this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                    //    member this.For(sequence:seq<_>, body) =\n                    //        this.Using(sequence.GetEnumerator(),fun enum -> \n                    //            this.While(enum.MoveNext, \n                    //                fun () -> this.Delay(fun () -> body enum.Current)))\n                    //\n                    //\n                    //let eff<'H> = new EffBuilder<'H>()\n                    \n                    //type EA<'H, 'a, 'b> = 'a -> Eff<'H, 'b>\n                    /// Equal to (|>) \n                    //let (>|>) (ea:EA<_,_,_>) f : EA<_,_,_> = ea |> f\n                    /// Equal to (>>)\n                    //let (>>>) = (>>)\n                    \n                    module EA =\n                        let tee (f: 'a -> Eff<'H, unit>) : 'a -> Eff<'H, 'a> = (fun v -> f v |> map (fun () -> v) )\n                    \n                    //    let mapOutput  f (ea: EA<_,_, _>) : EA<_,_,          _   > = ea >> (bind (f >> rtn) )\n                    //    let bindOutput(f: EA<_,_, _>) (ea: EA<_,_, _>) : EA<_,_, _> = ea >> (bind  f  )\n                    //    let mapBoth    f (ea: EA<_,_, _>) : EA<_,_,          _   > = fun i -> i |> mapOutput (f i) ea\n                    //    let bindBoth   f (ea: EA<_,_, _>) : EA<_,_,          _   > = mapBoth f  ea |> bindOutput id\n                    //\n                    //    let mapO         (ea: EA<_,_, _>) : EA<_,_,          _   > = Option.map ea >> insertO\n                    //\n                    //    let mapFst     f (a, b) = (f a,   b)\n                    //    let mapSnd     f (a, b) = (  a, f b)\n                    //\n                    //    let bindFst    (f:EA<_,_,_>) (a, b) = eff {\n                    //        let! fa = f a\n                    //        return (fa, b)\n                    //    }\n                    //\n                    //    let bindSnd    (f:EA<_,_,_>) (a, b) = eff {\n                    //        let! fb = f b\n                    //        return (a, fb)\n                    //    }\n                    //\n                    //    let lift    f : EA<_,_,_> = f >> rtn\n                    //    let pairWith v ea : EA<_,_,_> =\n                    //        ea\n                    //        >-> fun fst -> fst, v\n                    //\n                    //    let getResult ea:EA<_,_,_> = ea >-> Ok\n                    \n                    \n                    module Reader =\n                        type Reader< 'E> = interface end // this acts as a reminder to add a handler for the Effect\n                        type Reader2<'E> = interface end // this acts as a reminder to add a handler for the Effect\n                        type Reader3<'E> = interface end // this acts as a reminder to add a handler for the Effect\n                        type Reader4<'E> = interface end // this acts as a reminder to add a handler for the Effect\n                        type Reader5<'E> = interface end // this acts as a reminder to add a handler for the Effect\n                    \n                        type Ask<'E>(k : 'E -> Effect) =\n                            member self.K = k\n                            interface Effect with\n                                member self.Extend extension : Effect = new Ask<'E>(k >> extension) :> _\n                    \n                        let ask () : Eff<'H, 'E> when 'H :> Reader< 'E> = Eff (fun k -> Ask(k) :> _ )\n                        let ask2() : Eff<'H, 'E> when 'H :> Reader2<'E> = Eff (fun k -> Ask(k) :> _ )\n                        let ask3() : Eff<'H, 'E> when 'H :> Reader3<'E> = Eff (fun k -> Ask(k) :> _ )\n                        let ask4() : Eff<'H, 'E> when 'H :> Reader4<'E> = Eff (fun k -> Ask(k) :> _ )\n                        let ask5() : Eff<'H, 'E> when 'H :> Reader5<'E> = Eff (fun k -> Ask(k) :> _ )\n                    \n                        let readerHandler0<'E, 'H, 'a> (env:'E) (eff: Eff<'H, 'a>) : Eff<'H, 'a> = \n                            let rec loop (exitK: 'a -> Effect) : Effect -> Effect = function\n                                | :? Done<'a> as done' -> done'.Value        |>      exitK\n                                | :? Ask<'E>  as ask   -> ask.K env          |> loop exitK\n                                | effect               -> effect.Extend        (loop exitK)\n                            Eff (fun exitK             -> eff.Create done'   |> loop exitK)\n                    \n                        let readerHandler< 'E, 'H, 'a when 'H :> Reader< 'E>> (env:'E) (eff: Eff<'H, 'a>) : Eff<'H, 'a> = readerHandler0<'E, 'H, 'a> env eff\n                        let readerHandler2<'E, 'H, 'a when 'H :> Reader2<'E>> (env:'E) (eff: Eff<'H, 'a>) : Eff<'H, 'a> = readerHandler0<'E, 'H, 'a> env eff\n                        let readerHandler3<'E, 'H, 'a when 'H :> Reader3<'E>> (env:'E) (eff: Eff<'H, 'a>) : Eff<'H, 'a> = readerHandler0<'E, 'H, 'a> env eff\n                        let readerHandler4<'E, 'H, 'a when 'H :> Reader4<'E>> (env:'E) (eff: Eff<'H, 'a>) : Eff<'H, 'a> = readerHandler0<'E, 'H, 'a> env eff\n                        let readerHandler5<'E, 'H, 'a when 'H :> Reader5<'E>> (env:'E) (eff: Eff<'H, 'a>) : Eff<'H, 'a> = readerHandler0<'E, 'H, 'a> env eff\n                    \n                        let readerFun f = ask() |> map f \n                    module Log = \n                        type Log< 'L> = interface end  // this acts as a reminder to add a handler for the Log Effects\n                        type Log2<'L> = interface end  // this acts as a reminder to add a handler for the Log Effects\n                        type Log3<'L> = interface end  // this acts as a reminder to add a handler for the Log Effects\n                    \n                        type LogEntry<'L>(v : 'L, k : unit -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Effect with\n                                member self.Extend extension  : Effect = new LogEntry<'L>(v, k >> extension) :> _\n                    \n                        let log (s:'L)  : Eff<'H, unit> when 'H :> #Log< 'L> = Eff (fun k -> LogEntry(s, k) :> _ )\n                        let logf fmt = Printf.ksprintf log fmt\n                        let log2 (s:'L) : Eff<'H, unit> when 'H :> #Log2<'L> = Eff (fun k -> LogEntry(s, k) :> _ )\n                        let log3 (s:'L) : Eff<'H, unit> when 'H :> #Log3<'L> = Eff (fun k -> LogEntry(s, k) :> _ )\n                    \n                        let pureLogHandler0<'L, 'H, 'a> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = \n                            let rec loop (exitK:('a * list<'L>) -> Effect) (ls: list<'L>) : Effect -> Effect = function\n                                | :? Done<    'a> as done' -> (done'.Value, ls)  |>       exitK\n                                | :? LogEntry<'L> as log   -> log.K ()           |>  loop exitK (log.Value :: ls)  \n                                | effect                   -> effect.Extend         (loop exitK ls               )\n                            Eff (fun exitK                 -> eff.Create done'   |>  loop exitK []               )\n                    \n                        let consoleLogHandler0<'L, 'H, 'a> (eff: Eff<'H, 'a>) : Eff<'H, 'a> =\n                            let rec loop (exitK: 'a -> Effect) : Effect -> Effect = function\n                                | :? Done<    'a> as done' -> done'.Value        |>      exitK\n                                | :? LogEntry<'L> as log   -> printfn \"Log: %A\" log.Value\n                                                              log.K ()           |> loop exitK\n                                | effect                   -> effect.Extend        (loop exitK)\n                            Eff (fun exitK                 -> eff.Create done'   |> loop exitK)\n                    \n                        let loggerLogHandler0<'L, 'H, 'a> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> =\n                            let rec loop (exitK: 'a -> Effect) : Effect -> Effect = function\n                                | :? Done<    'a> as done' -> done'.Value        |>      exitK\n                                | :? LogEntry<'L> as log   -> logger log.Value\n                                                              log.K ()           |> loop exitK\n                                | effect                   -> effect.Extend        (loop exitK)\n                            Eff (fun exitK                 -> eff.Create done'   |> loop exitK)\n                    \n                        let pureLogHandler< 'L, 'H, 'a when 'H :> Log< 'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = pureLogHandler0<'L, 'H, 'a> eff\n                        let pureLogHandler2<'L, 'H, 'a when 'H :> Log2<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = pureLogHandler0<'L, 'H, 'a> eff\n                        let pureLogHandler3<'L, 'H, 'a when 'H :> Log3<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a * list<'L>> = pureLogHandler0<'L, 'H, 'a> eff\n                    \n                    \n                        let consoleLogHandler< 'L, 'H, 'a when 'H :> Log< 'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a> = consoleLogHandler0<'L, 'H, 'a> eff\n                        let consoleLogHandler2<'L, 'H, 'a when 'H :> Log2<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a> = consoleLogHandler0<'L, 'H, 'a> eff\n                        let consoleLogHandler3<'L, 'H, 'a when 'H :> Log3<'L>> (eff: Eff<'H, 'a>) : Eff<'H, 'a> = consoleLogHandler0<'L, 'H, 'a> eff\n                    \n                        let loggerLogHandler< 'L, 'H, 'a when 'H :> Log< 'L>> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> = loggerLogHandler0<'L, 'H, 'a> logger eff\n                        let loggerLogHandler2<'L, 'H, 'a when 'H :> Log2<'L>> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> = loggerLogHandler0<'L, 'H, 'a> logger eff\n                        let loggerLogHandler3<'L, 'H, 'a when 'H :> Log3<'L>> logger (eff: Eff<'H, 'a>) : Eff<'H, 'a> = loggerLogHandler0<'L, 'H, 'a> logger eff\n                    \n                    module Rsl = \n                    \n                    \n                        type Rsl<'M> = interface end\n                        \n                        type IRsl<'M> = abstract Value : 'M\n                    \n                        type Fail<'a,'M>(v : 'M, k : 'a -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Effect   with member __.Extend extension : Effect = new Fail<'a,'M>(v, k >> extension) :> _\n                            interface IRsl<'M> with member __.Value = v\n                    \n                        let fail (s:'M) : Eff<'H, _> when 'H :> #Rsl<'M> = Eff (fun k -> new Fail<_,_>(s, k) :> _)\n                        let failf fmt = Printf.ksprintf fail fmt\n                        let inline ofResult (res:Result<'a,'b>) : Eff<'c,'a> = eff {\n                            match res with\n                            | Ok    v   ->  return v\n                            | Error msg ->  let! m = fail msg\n                                            return failwith \"this code should be unreachable\"\n                        }\n                        \n                        let rslHandler<'U, 'M, 'A when 'U :> Rsl<'M>> (eff: Eff<'U, 'A>) : Eff<'U, _> = \n                            let rec loop (exitK:(Result<'A,'M>) -> Effect) : Effect -> Effect = function\n                                | :? Done<    'A> as done' -> Ok    done'.Value |>       exitK\n                                | :? IRsl<    'M> as fail  -> Error fail .Value |>       exitK\n                                | effect                   -> effect.Extend        (loop exitK)\n                            Eff (fun exitK                 -> eff.Create done'  |>  loop exitK)\n                    \n                        let inline getResult   v                = v     |> rslHandler\n                        let inline absorbR     vvEf             = vvEf  |> bind ofResult\n                        let inline absorbO   f vOEf             = vOEf  |> map (Result.ofOption  f) |> absorbR\n                    \n                    module Asy = \n                        type Asy = interface end // this acts as a reminder to add a handler for the Effect\n                    \n                        type AsynG =\n                            abstract RunSync      : unit               -> Effect\n                            abstract RunAsync<'a> : (Effect -> Effect) -> Effect\n                    \n                        [< Inline \"console.log('RunSynch Not implemented in JavaSacript')\" >]\n                        let runSynch v = Async.RunSynchronously v\n                    \n                        type Asyn<'v>(v : Async<'v>, k : ('v -> Effect) ) =\n                            member __.Value = v\n                            member __.K     = k\n                            interface Effect with member __.Extend   extension = new Asyn<_>(v, k >> extension) :> _\n                            interface AsynG  with \n                                member __.RunSync  ()        = runSynch v |> k\n                                member __.RunAsync<'a> exitK = done' (v |> Async.bind (fun v -> k v |> exitK :?> Done<Async<'a>> |> fun don -> don.Value ) )\n                    \n                        let inline ofAsync (v:Async<'a>) : Eff<'H, 'a> when 'H :> Asy= Eff (fun k -> new Asyn<'a>(v, k) :> _)\n                    \n                        /// This handler uses RunSynchronously to resolve Asyncs\n                        let syncHandler<'H, 'a when 'H :> Asy> (eff: Eff<'H, 'a>) : Eff<'H, 'a> =\n                            let rec loop (exitK:'a -> Effect) : Effect -> Effect = function\n                                | :? Done<'a> as done' -> done'.Value        |>      exitK\n                                | :? AsynG    as asy   -> asy.RunSync()      |> loop exitK\n                                | effect               -> effect.Extend        (loop exitK)\n                            Eff (fun exitK             -> eff.Create done'   |> loop exitK)\n                    \n                        /// this should be the last handler before Eff.run\n                        let asyncHandler0<'H, 'a when 'H :> Asy> (eff: Eff<'H, 'a>) : Eff<'H, Async<'a>> = \n                            let rec loop (exitK:(Async<'a>) -> Effect) : Effect -> Effect = function\n                                | :? Done<'a> as done' -> done'.Value |> async.Return |>      exitK\n                                | :? AsynG    as asy   -> asy.RunAsync<'a>              (loop exitK)\n                                | effect               -> effect.Extend                 (loop exitK)\n                            Eff (fun exitK             -> eff.Create done'            |> loop exitK)\n                    \n                        let asyncHandler<'H, 'a when 'H :> Asy> (eff: Eff<'H, 'a>) : Eff<'H, Async<'a>> = \n                            Async.rtn () \n                            |>  ofAsync \n                            >>= fun () -> eff \n                            |>  asyncHandler0\n                    \n            type System.String with\n                member this.Substring2(from, n) = \n                    if   n    <= 0           then \"\"\n                    elif from <  0           then this.Substring2(0, n + from)\n                    elif from >= this.Length then \"\"\n                    else this.Substring(from, min n (this.Length - from))\n                member this.Left             n  = if n < 0 \n                                                  then this.Substring2(0, this.Length + n)\n                                                  else this.Substring2(0, n              )\n                member this.Right            n  = this.Substring2(max 0 (this.Length - n), this.Length)\n                member this.toUnderscore        = this |> Seq.mapi(fun i c -> if i > 0 && System.Char.IsUpper(c) then [ '_' ; c ] else [ c ])  |> Seq.collect id |> Seq.toArray |> System.String\n            \n            module String =\n                let splitByChar (c: char) (s: string) = s.Split c\n                let splitInTwoO spl txt = \n                    let i = (txt:string).IndexOf (spl:string)\n                    if  i = -1 then None else\n                    (txt.Left(i), txt.Substring (i + spl.Length) )\n                    |> Some\n                let delimitedO  op cl txt =\n                    splitInTwoO op txt\n                    |> Option.bind(fun (bef, sec) ->\n                        splitInTwoO cl sec\n                        |> Option.map(fun (mid, aft) -> bef, mid, aft)\n                    )\n                let contains     sub  (whole: string) = whole.Contains sub\n                let trim                  (s: string) = s.Trim()\n                let append     (a: string)(b: string) =  a + b\n                let skipFirstLine (txt:string) = txt.IndexOf '\\n' |> fun i -> if i < 0 then \"\" else txt.[i + 1..]\n                let unindent (s:string) =\n                    let lines = s.Split '\\n'\n                    let n     = lines \n                                |> Seq.tryFind (fun l -> l.Trim() <> \"\")\n                                |> Option.defaultValue \"\"\n                                |> Seq.tryFindIndex ((<>) ' ') \n                                |> Option.defaultValue 0\n                    lines \n                    |> Seq.map    (fun l -> if l.Length <= n then \"\" else l.Substring n)\n                    |> Seq.filter (fun s -> s.StartsWith \"# 1 \" |> not)\n                let indent n (s:string) =\n                    s.Split '\\n'\n                    |> Seq.map ((+) (String.replicate n \" \"))\n                let unindentStr = unindent >> String.concat \"\\n\"\n                let indentStr i = indent i >> String.concat \"\\n\" \n                let skipLastLine =\n                       splitByChar '\\n' \n                    >> fun s -> s.[0 .. (max 0 (s.Length - 2)) ]\n                    >> String.concat \"\\n\"\n                let (|StartsWith|_|) (start:string) (s:string) = if s.StartsWith start then Some s.[start.Length..                          ] else None\n                let (|EndsWith  |_|) (ends :string) (s:string) = if s.EndsWith   ends  then Some s.[0           ..s.Length - ends.Length - 1] else None\n                \n                let thousands n =\n                    let v = n.ToString()\n                    let r = v.Length % 3 \n                    let s = if r = 0 then 3 else r\n                    [   yield v.[0.. s - 1]\n                        for i in 0..(v.Length - s)/ 3 - 1 do\n                            yield v.[i * 3 + s .. i * 3 + s + 2]\n                    ] |> String.concat \",\"\n            \n            let mapFst     (f: 'a->'c) (a:'a, b:'b) = (f a,   b)\n            let mapSnd     (f: 'b->'c) (a:'a, b:'b) = (  a, f b)\n            \n            module ParseO =\n                let tryParseWith tryParseFunc = tryParseFunc >> function\n                        | true, v    -> Some v\n                        | false, _   -> None\n            \n            \n                /// Javascript adds time zone information when parsing a date and that can change the result\n                let parseDateO2  = (fun s -> s + \"T00:00:00\") >> tryParseWith System.DateTime.TryParse\n                let parseDateO   = tryParseWith System.DateTime.TryParse\n                let parseIntO    = tryParseWith System.Int32   .TryParse\n                let parseInt64O  = tryParseWith System.Int64   .TryParse\n                let parseSingleO = tryParseWith System.Single  .TryParse\n                let parseDoubleO = tryParseWith System.Double  .TryParse\n                let parseGuidO   = tryParseWith System.Guid    .TryParse\n                // etc.\n                \n                // active patterns for try-parsing strings\n                let (|Date  |_|) = parseDateO\n                let (|Int   |_|) = parseIntO\n                let (|Int64 |_|) = parseInt64O\n                let (|Single|_|) = parseSingleO\n                let (|Double|_|) = parseDoubleO\n                let (|Guid  |_|) = parseGuidO\n                \n            module Serializer =\n                open System\n            \n                type JsonIntermediate = {\n                    tryFloat    : unit   ->  float                option\n                    tryInt      : unit   ->  int64                option\n                    tryString   : unit   ->  string               option\n                    tryBool     : unit   ->  bool                 option\n                    tryArray    : unit   -> (JsonIntermediate []) option\n                    tryField    : string ->  JsonIntermediate     option\n                    isObject    : unit   ->  bool\n                    isNull      : unit   ->  bool\n                    toString    : unit   ->  string  \n                }\n            \n                type SerS<'T> = ('T                 -> string   )        //      Serialization function\n                type SerD<'T> = (JsonIntermediate   -> 'T option)        //    deSerialization function\n                type Ser< 'T> = SerS<'T> * SerD<'T>                      // both Serialization functions\n            \n                let serialize (ser: Ser<_>) v = fst ser v\n                let (|Field|_|) field j = j.tryField field\n            \n                let [< Inline >] inline sprintU  v = sprintf \"%A\"       v\n                let [< Inline >] inline toString v = v.ToString()\n                let [< Inline >] inline sprintQ  v = sprintf \"\\\"%A\\\"\"   v\n                let              inline sprintA  v = String.concat \", \" v |> sprintf \"[%s]\"\n            \n                let toJsonString (v:string) =\n                    seq {\n                        yield '\"'\n                        if String.IsNullOrEmpty v |> not then\n                            for i = 0 to v.Length - 1 do\n                                let c = v.[i]\n                                let ci = int c\n                                if ci >= 0 && ci <= 7 || ci = 11 || ci >= 14 && ci <= 31 then\n                                    yield! sprintf \"\\\\u%04x\" ci\n                                else \n                                match c with\n                                | '\\b' -> yield! \"\\\\b\"\n                                | '\\t' -> yield! \"\\\\t\"\n                                | '\\n' -> yield! \"\\\\n\"\n                                | '\\f' -> yield! \"\\\\f\"\n                                | '\\r' -> yield! \"\\\\r\"\n                                | '\"'  -> yield! \"\\\\\\\"\"\n                                | '\\\\' -> yield! \"\\\\\\\\\"\n                                | _    -> yield c\n                        yield '\"'\n                    } |> Seq.toArray|> String\n            \n                let serString : Ser<string  > = toJsonString           , (fun j -> j.tryString()                         )\n                let serFloat  : Ser<float   > = sprintU                , (fun j -> j.tryFloat ()                         )\n                let serInt    : Ser<int     > = sprintU                , (fun j -> j.tryInt   () |> Option.map int       )\n                let serInt64  : Ser<int64   > = toString               , (fun j -> j.tryInt   ()                         )\n                let serBool   : Ser<bool    > = sprintU                , (fun j -> j.tryBool  ()                         )\n                let serDate   : Ser<DateTime> = (date2Long >> toString), (fun j -> j.tryInt   () |> Option.map long2Date )\n                [< JavaScript false >]\n                let serDate2  : Ser<DateTime> = (fun d -> d.ToFileTimeUtc() |> toString), (fun j -> j.tryInt   () |> Option.map (fun t -> DateTime.FromFileTimeUtc t ) )\n                [< JavaScript false >]\n                let serDate3  : Ser<DateTime> = \n                    (  fun (d:System.DateTime ) -> d.ToString(\"u\") |> sprintf \"%A\"                )\n                    , (fun (j:JsonIntermediate) -> j.tryString() |> Option.bind ParseO.parseDateO )\n            \n                let [< Inline >] inline serId  (get: 'a -> System.Guid) (set:System.Guid -> 'a) (print: 'a->string) : Ser<'a> =\n                    let s               = System.Guid.Empty |> set |> print |> fun (s:string) -> s.Split ' ' |> Array.head\n                    let sQ              = sprintf \"%A\" s\n                    let serialize   gid = get gid |> string |> sprintf \"{%10s :%A}\" sQ\n                    let deserialize j   = j.tryField s \n                                          |> Option.bind (fun jf -> jf.tryString() ) \n                                          |> Option.bind ParseO.parseGuidO \n                                          |> Option.map  set\n                    serialize, deserialize\n            \n                let serField (name:string) (get:'D->'e) (set:'e->'D->'D) (serFuncs:Ser<'e>) : string * SerS<'D> * ('D -> SerD<'D>) = \n                    serFuncs |> fun (ser, deser) -> name, get >> ser, (fun rc j -> deser j |> Option.map (fun v -> set v rc) ) \n                    \n                let [< Inline >] serRecord init (fields: #seq<(string * SerS<'D> * ('D -> SerD<'D>))>) : Ser<'D> =\n                    if isNull (init :> obj) then failwith \"Initial record is null\"\n                    let serialize   dim = fields |> Seq.map  (fun     (n,  ser, _deser) -> sprintf \"%A: %s\" n (ser dim)) |> String.concat \", \" |> sprintf \"{%s}\"\n                    let deserialize j   = fields |> Seq.fold (fun dim (n, _ser,  deser) -> j.tryField n |> Option.bind (deser dim) |> Option.defaultValue dim)   init |> Some\n                    serialize, deserialize\n                \n                let serSeq (ser:Ser<'D>) : Ser<'D seq     > = (Seq   .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Seq.ofArray)\n                let serArr (ser:Ser<'D>) : Ser<'D []      > = (Array .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser))                          )\n                let serLst (ser:Ser<'D>) : Ser<'D list    > = (List  .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Seq.toList )\n                let serSet (ser:Ser<'D>) : Ser<Set<'D>    > = (Set   .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Set        )\n                let serOpt (ser:Ser<'D>) : Ser<'D option  > = (Option.map (fst ser) >> Option.defaultValue \"null\"              ), (fun j -> (if j.isNull() then None else              snd ser j)|> Some                  )\n                let serDup(serFst,serSnd): Ser<'a * 'b    > = (fun (f,s  ) -> sprintf \"[%s, %s]\" (fst serFst f) (fst serSnd s) ), (fun j -> j.tryArray () \n                                                                                                                                            |> function \n                                                                                                                                                | Some [| j1 ; j2 |] -> match snd serFst j1, snd serSnd j2 with\n                                                                                                                                                                        | Some f, Some s -> Some(f, s) |_->None\n                                                                                                                                                | _ -> None )\n                let serTrp(sF,sS,sT)      : Ser<'a *'b*'c > = (fun (f,s,t) -> sprintf \"[%s, %s, %s]\" (fst sF f) (fst sS s)  (fst sT t)) , (fun j -> j.tryArray () \n                                                                                                                                                    |> function \n                                                                                                                                                        | Some [| j1 ;j2; j3|]   -> match snd sF j1, snd sS j2, snd sT j3 with\n                                                                                                                                                                                    | Some f, Some s, Some t -> Some(f, s, t) |_-> None\n                                                                                                                                                        | _ -> None ) \n                let serMap serKey serElm : Ser<Map<'k, 'e>> =   serDup(serKey, serElm)\n                                                                |> serSeq \n                                                                |> (fun serKVPs -> (Seq.map (fun kvp -> kvp.Key, kvp.Value) >> fst serKVPs) , (snd serKVPs >> Option.map Map) )\n            \n                let serTypedRegisters = System.Collections.Generic.Dictionary<string, Ser<obj>>()\n            \n                let map (g: 'b -> 'a) (f: 'a -> 'b) ((serS, serD): Ser<'a>) : Ser<'b> = g >> serS, (serD >> Option.map f)\n            \n                [< JavaScript false >]\n                let fixType t = System.Text.RegularExpressions.Regex.Replace(t, @\"FSI_[0-9]{4}\\+\", \"\", System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace)\n            \n                [< JavaScript false >]\n                let serSpecial (regSer: Ser<'T>) : Ser<obj> =\n                    let tn0 = typeof<'T>.FullName |> fixType\n                    if serTypedRegisters.ContainsKey tn0 |> not then serTypedRegisters.Add(tn0, map unbox box regSer)\n                    (fun t -> \n                        let tn    = t.GetType().FullName |> fixType\n                        let snd   = if   serTypedRegisters.ContainsKey tn \n                                    then fst serTypedRegisters.[tn] t\n                                    else failwithf \"Serializer not registered for type: %s\" tn\n                        sprintf \"[%s, %s]\" (fst serString tn) snd)\n                    ,(fun j -> \n                        match j.tryArray () with\n                        | Some [| j1 ; j2 |] -> \n                            match snd serString j1 with\n                            | Some tn    -> if   serTypedRegisters.ContainsKey tn \n                                            then snd serTypedRegisters.[tn] j2\n                                            else failwithf \"Serializer not registered for type: %s\" tn\n                            |_-> failwithf \"Expected json string with type name: %A\" (j1.toString())\n                        |    _-> failwithf \"Expected json array with 2 elements: %s\" (j.toString()) )\n            \n        /// Essentials that cannot run in Javascript (WebSharper)\n        [< AutoOpen >]\n        module LibraryNoJS =\n            let rec getNamespace (t:System.Type) =\n                match t.DeclaringType with\n                | null -> match t.Namespace with null -> \"\" | ns -> ns + \".\"\n                | dt   -> getNamespace dt + dt.Name + \".\"\n            \n            let rec getTypeName (t:System.Type) =\n                if t.IsArray then getTypeName (t.GetElementType()) + \"[]\" else\n                let ns    = getNamespace t\n                let name  = if   t.Name = \"FSharpOption`1\"                then \"Option\"\n                            elif t.Name = \"FSharpList`1\"                  then \"List\"\n                            elif ns     = \"Microsoft.FSharp.Core.\"\n                              || ns     = \"Microsoft.FSharp.Collections.\" then t.Name   \n                            else  ns + t.Name\n                let name2 = name.Split('`').[0]\n                let parms = t.GenericTypeArguments |> Seq.map getTypeName |> String.concat \",\"\n                if parms = \"\" then name2 else sprintf \"%s<%s>\" name2 parms\n            \n            module DiscUnion =\n                open FSharp.Reflection\n            \n                let simple<'U> =\n                    FSharpType.GetUnionCases typeof<'U>\n                    |> Seq.filter (fun c -> c.GetFields() |> Seq.isEmpty )\n                    |> Seq.map (fun c -> c.Name)\n                    |> Seq.toArray\n            \n                let caseTuple (v:'T) = \n                    let c, vs = FSharpValue.GetUnionFields(v, typeof<'T>)\n                    let types = c.GetFields() |> Array.map (fun p -> p.PropertyType)\n                    if types.Length = 1 then c.Name, types.[0], vs.[0] else\n                    let ttype = FSharpType.MakeTupleType(types)\n                    c.Name, ttype, FSharpValue.MakeTuple(vs, ttype)\n            \n                let caseArray (v:'T) = \n                    let c, vs = FSharpValue.GetUnionFields(v, typeof<'T>)\n                    let types = c.GetFields() |> Array.map (fun p -> p.PropertyType.FullName)\n                    c.Name, Array.zip types vs\n            \n                let caseInfos<'T>            = FSharpType.GetUnionCases typeof<'T>\n                let caseInfo< 'T> (s:string) = caseInfos<'T> |> Seq.find (fun c -> c.Name = s)\n            \n            //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Data\\lib\\net45\\FSharp.Data.dll\"\n            module Serializer =\n                open Serializer\n                open FSharp.Data\n            \n                let rec getJsonIntermediate df di ds db da (j:JsonValue) : JsonIntermediate =\n                    let jsonInt = getJsonIntermediate df di ds db da\n                    {\n                        tryFloat    = fun () -> (match j with JsonValue.Float   v ->       v |> Some | JsonValue.Number v -> float v |> Some    |_-> None) |> Option.orElseWith df\n                        tryInt      = fun () -> (match j with JsonValue.Float   v -> int64 v |> Some | JsonValue.Number v -> int64 v |> Some    |_-> None) |> Option.orElseWith di\n                        tryString   = fun () -> (match j with JsonValue.String  v ->       v |> Some                                            |_-> None) |> Option.orElseWith ds\n                        tryBool     = fun () -> (match j with JsonValue.Boolean v ->       v |> Some                                            |_-> None) |> Option.orElseWith db\n                        tryArray    = fun () -> (match j with JsonValue.Array   v ->       v |> Array.map jsonInt |> Some                       |_-> None) |> Option.orElseWith (fun () -> da  jsonInt   )\n                        tryField    = fun fl -> j.TryGetProperty fl |> Option.map jsonInt                                                                 \n                        isObject    = fun () -> (match j with JsonValue.Record  _ ->       true |_-> false)\n                        isNull      = fun () -> (match j with JsonValue.Null      ->       true |_-> false)\n                        toString    = fun () -> sprintf \"%A\" j\n                    }\n            \n                let tryJsonValue s =\n                    JsonValue.TryParse (\"[\" + s + \"]\")\n                    |> Option.bind (function JsonValue.Array v -> Seq.tryHead v |_ -> None)\n            \n                let toJsonIntermediateWithTry (s:string) =\n                    tryJsonValue s\n                    |> Option.map\n                        (getJsonIntermediate\n                            (fun _   -> None                                 )\n                            (fun _   -> None                                 )\n                            (fun _   -> None                                 )\n                            (fun _   -> None                                 )\n                            (fun _   -> None                                 ))\n            \n                let toJsonIntermediateWithDefs s = \n                    tryJsonValue s\n                    |> Option.map\n                        (getJsonIntermediate\n                            (fun _   -> Some 0.0                             )\n                            (fun _   -> Some 0L                              )\n                            (fun _   -> Some \"\"                              )\n                            (fun _   -> Some false                           )\n                            (fun _   -> Some [||]                            ))\n            \n                let toJsonIntermediateWithFail s = \n                    tryJsonValue s\n                    |> Option.map\n                        (getJsonIntermediate\n                            (fun _   -> failwith  \"Error expecting float\"    )\n                            (fun _   -> failwith  \"Error expecting int\"      )\n                            (fun _   -> failwith  \"Error expecting string\"   )\n                            (fun _   -> failwith  \"Error expecting bool\"     )\n                            (fun _   -> failwith  \"Error expecting array\"    ))\n            \n                let deserialize toJsonIntermediate (ser: Serializer.Ser<_>) js = toJsonIntermediate js |> Option.bind (snd ser)\n                let tryDeserialize      ser = deserialize toJsonIntermediateWithTry  ser\n                let deserializeWithDefs ser = deserialize toJsonIntermediateWithDefs ser\n                let deserializeWithFail ser = deserialize toJsonIntermediateWithFail ser\n            \n                open FSharp.Reflection\n            \n                let inline serObj ((ser, deser):Ser<'T>) : string * Ser<obj> = typeof<'T> |> getTypeName, (unbox >> ser, deser >> Option.map box)\n            \n                let serDU<'DU when 'DU : equality> (sers : (string * Ser<obj>) seq) =\n                    let cases  = FSharpType.GetUnionCases             typeof<'DU>\n                    let dCases =\n                        cases\n                        |> Array.map (fun case ->\n                            if case.GetFields().Length = 0 then\n                                let serC         _ = sprintf \"{%A:1}\" case.Name\n                                let deserC       _ = FSharpValue.MakeUnion(case, [||]) :?> 'DU |> Some \n                                case.Tag, (serC, deserC)\n                            else\n                                let sers2 =\n                                    case.GetFields() |> Array.map(fun fld ->\n                                        let tn = fld.PropertyType  |> getTypeName\n                                        sers \n                                        |> Seq.tryPick(fun (nm, ser) -> if nm = tn then Some ser else None)\n                                        |> Option.defaultWith (fun () -> \n                                            sers |> Seq.map fst |> String.concat \", \"\n                                            |> failwithf \"serDU: Could not find Ser<%s> for %s. Provided: %s\" tn (typeof<'DU> |> getTypeName) \n                                        )\n                                    ) \n                                let getValues      = box<'DU> >> FSharpValue.PreComputeUnionReader case \n                                let setValues      = FSharpValue.PreComputeUnionConstructor case >> unbox<'DU>\n                                let serC (v:'DU) =\n                                    Seq.zip (getValues v) sers2\n                                    |> Seq.map (fun (vi, seri) -> fst seri vi )\n                                    |> String.concat \", \"\n                                    |> sprintf \"{%A:[%s]}\" case.Name\n                                let deserC (j:JsonIntermediate) = \n                                    match j with \n                                    | Field case.Name j2 ->\n                                        match j2.tryArray () with\n                                        | None -> None\n                                        | Some js -> \n                                        Array.zip js sers2\n                                        |> Array.choose (fun (ji, seri) -> snd seri ji)\n                                        |> setValues\n                                        |> Some\n                                    |_-> None \n                                case.Tag, (serC, deserC)\n                        ) |> dict\n                    let readTag   = box<'DU> >> FSharpValue.PreComputeUnionTagReader typeof<'DU> >> fun i -> dCases.[i]\n                    let serDU   v = (readTag v |> fst) v\n                    let deserDU j =\n                        let case =  cases |> Seq.tryPick(fun case -> match j with Field case.Name _ -> Some case |_-> None) |> Option.defaultWith (fun () -> failwithf \"Could not find DU element %A\" j)\n                        snd dCases.[case.Tag] j\n                    serDU, deserDU\n            \n                let serDUt (sers : (string * Ser<obj>) seq) (ttype:System.Type) =\n                    let cases  = FSharpType.GetUnionCases ttype\n                    let dCases =\n                        cases\n                        |> Array.map (fun case ->\n                            if case.GetFields().Length = 0 then\n                                let serC         _ = sprintf \"{%A:1}\" case.Name\n                                let deserC       _ = FSharpValue.MakeUnion(case, [||]) :?> 'DU |> Some \n                                case.Tag, (serC, deserC)\n                            else\n                                let sers2 =\n                                    case.GetFields() |> Array.map(fun fld ->\n                                        let tn = fld.PropertyType |> getTypeName\n                                        sers \n                                        |> Seq.tryPick(fun (nm, ser) -> if nm = tn then Some ser else None)\n                                        |> Option.defaultWith (fun () -> \n                                            sers |> Seq.map fst |> String.concat \", \"\n                                            |> failwithf \"serDU: Could not find Ser<%s> for %s. Provided: %s\" tn (ttype |> getTypeName) \n                                        )\n                                    ) \n                                let getValues      = FSharpValue.PreComputeUnionReader case \n                                let setValues      = FSharpValue.PreComputeUnionConstructor case\n                                let serC v =\n                                    Seq.zip (getValues v) sers2\n                                    |> Seq.map (fun (vi, seri) -> fst seri vi )\n                                    |> String.concat \", \"\n                                    |> sprintf \"{%A:[%s]}\" case.Name\n                                let deserC (j:JsonIntermediate) = \n                                    match j with \n                                    | Field case.Name j2 ->\n                                        match j2.tryArray () with\n                                        | None -> None\n                                        | Some js -> \n                                        Array.zip js sers2\n                                        |> Array.choose (fun (ji, seri) -> snd seri ji)\n                                        |> setValues\n                                        |> Some\n                                    |_-> None \n                                case.Tag, (serC, deserC)\n                        ) |> dict\n                    let readTag   = FSharpValue.PreComputeUnionTagReader ttype >> fun i -> dCases.[i]\n                    let serDU   v = (readTag v |> fst) v\n                    let deserDU j =\n                        let case =  cases |> Seq.pick(fun case -> match j with Field case.Name _ -> Some case |_-> None)\n                        snd dCases.[case.Tag] j\n                    serDU, deserDU\n                    \n            module Default =\n                open FSharp.Reflection\n            \n                let defaults vs = vs |> Seq.map (fun v -> v.GetType().FullName, v ) |> dict\n            \n                let defs = \n                    defaults [\n                        box 0\n                        box 0L\n                        box 0.\n                        box 0.F\n                        box \"\"\n                        box false\n                        box System.Guid.Empty\n                        box System.DateTime.MinValue\n                    ]\n            \n                let rec defaultValue defs (t:System.Type) : obj =\n                    match (defs:System.Collections.Generic.IDictionary<string, obj>).TryGetValue t.FullName with\n                    | true , v -> v\n                    | false, _ ->\n                    if t.IsArray then \n                        System.Array.CreateInstance(t.GetElementType(), 0) |> box\n                    elif t.IsEnum then\n                        (System.Enum.GetValues t).GetValue [| 0 |] |> box\n                    else\n                    let c = t.GetConstructor System.Type.EmptyTypes\n                    if  isNull c |> not then\n                        c.Invoke [||]\n                    elif FSharpType.IsRecord t then\n                        FSharpType.GetRecordFields t\n                        |> Array.map (fun fld -> fld.PropertyType )\n                        |> createArray (defaultValue defs)\n                        |> fun os -> FSharpValue.MakeRecord(t, os)\n                    elif FSharpType.IsTuple t then\n                        FSharpType.GetTupleElements t\n                        |> createArray (defaultValue defs)\n                        |> fun os -> FSharpValue.MakeTuple(os, t)\n                    elif FSharpType.IsUnion t then\n                        let case = FSharpType.GetUnionCases t |> Seq.head\n                        case.GetFields()\n                        |> Array.map (fun fld -> fld.PropertyType )\n                        |> createArray (defaultValue defs)\n                        |> fun os -> FSharpValue.MakeUnion(case, os)\n                    else failwithf \"Could no create default for %s\" t.FullName\n            \n                and createArray defs (ts : System.Type []) = ts |> Array.map defs\n            \n                let inline value<'T> : 'T = typeof<'T> |> defaultValue defs |> unbox\n            \n            \n        /// Essentials that run in Javascript (WebSharper)\n        //#define WEBSHARPER \n        [< JavaScript ; AutoOpen >]\n        module LibraryJS =\n            module Promise =\n                let ofAsyncResult (v: Async<Result<'a,'b>>) : Promise<'a> =\n                    new Promise<'a>(fun (resolve, reject) ->\n                        Async.StartWithContinuations(v, (function Ok ok -> resolve ok | Error er -> reject <| sprintf \"%A\" er), reject, reject)\n                    )\n            \n            module Date =\n                let toYYYYMMDD     sep (date:System.DateTime) = sprintf \"%d%s%02d%s%02d\" date.Year sep  date.Month sep date.Day\n                let toHHMM             (date:System.DateTime) = sprintf \"%02d:%02d\" date.Hour  date.Minute\n                let toYYYYMMDDHHMM sep (date:System.DateTime) = sprintf \"%s %s\" (toYYYYMMDD sep date) (toHHMM date)\n                \n            [< Inline \"\"\"(!$v)\"\"\">]\n            let isUndefined v = v.GetType() = v.GetType()\n                \n            \n    \n    //#cd @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/projects/ProzperServer\"\n    module ProzperServer =\n    \n        [< AutoOpen ; JavaScript >]\n        module Basico =\n            type IdAliado     = IdAliado     of string          with member this.Id = match this with IdAliado    id -> id\n            type IdAuthorize  = IdAuthorize  of string          with member this.Id = match this with IdAuthorize id -> id\n            type IdAddress    = IdAddress    of string          with member this.Id = match this with IdAddress   id -> id\n            type IdPayment    = IdPayment    of string          with member this.Id = match this with IdPayment   id -> id\n        \n            type VariableAmbienteI   = \n                    abstract getVar  : string -> string\n                    abstract member CarpetaRaiz          : unit     -> string\n        \n            let variableAmbienteE v  = Reader.ask() |>> fun (h:#VariableAmbienteI) -> h.getVar     v \n            let carpetaRaiz       () = Reader.ask() |>> fun (h:#VariableAmbienteI) -> h.CarpetaRaiz()\n        \n        \n        [< AutoOpen ; JavaScript >]\n        module TypesV0 =\n            type LatestType = TypeV0\n        \n            type IdAliado       = IdAliado       of string          with member this.Id = match this with IdAliado       id -> id\n            type IdAuthorize    = IdAuthorize    of string          with member this.Id = match this with IdAuthorize    id -> id\n            type IdAddress      = IdAddress      of string          with member this.Id = match this with IdAddress      id -> id\n            type IdPayment      = IdPayment      of string          with member this.Id = match this with IdPayment      id -> id\n            type IdSubscription = IdSubscription of string          with member this.Id = match this with IdSubscription id -> id\n        \n            type StatusAliado =\n            | CuentaCreada\n            | Activo\n            | Inactivo\n            | Cancelado\n                with\n                    override this.ToString() = sprintf \"%A\" this\n                    static member tryParse (s:string) = \n                        match s.Trim().ToUpper() with\n                        | \"CUENTACREADA\"             -> CuentaCreada\n                        | \"ACTIVO\"                   -> Activo\n                        | \"CANCELADO\"                -> Cancelado\n                        | _                          -> Inactivo\n        \n            type TipoAliado =\n            | Master\n            | Regular\n                with\n                    override this.ToString() = sprintf \"%A\" this\n        \n            type Pais =\n            | USA\n            | Venezuela \n            | Argentina\n            | OtroP of string\n                with \n                    static member tryParse (s:string) = \n                        match s.Trim().ToUpper() with\n                        | \"\"               -> None    \n                        | \"EEUU\" | \"UNITED STATES\"  | \"UNITED STATES OF AMERICA\" | \"US\" | \"E.E.U.U.\" | \"AMERICA\"\n                        | \"USA\"            -> Some <| USA\n                        | \"VENEZUELA\"      -> Some <| Venezuela\n                        | \"ARGENTINA\"      -> Some <| Argentina\n                        | _                -> Some <| (OtroP <| s.Trim() )\n                    override this.ToString() = match this with OtroP s -> s | v -> sprintf \"%A\" v\n        \n            type Estado =\n            | Texas\n            | Florida\n            | OtroS of string\n                with \n                    static member tryParse (s:string) = \n                        match s.Trim().ToUpper() with\n                        | \"\"               -> None    \n                        | \"TX\"\n                        | \"TEXAS\"          -> Some <| Texas\n                        | \"FL\"\n                        | \"FLORIDA\"        -> Some <| Florida\n                        | _                -> Some <| (OtroS <| s.Trim() )\n                    override this.ToString() = match this with OtroS s -> s | v -> sprintf \"%A\" v\n        \n            type Territorio =\n            | Estado of Estado\n        \n            type Emisor =\n            | Pais       of Pais\n            | Territorio of Territorio\n        \n            type Documento =\n            | Pasaporte        of string\n            | Cedula           of string\n            | LicenciaConducir of string\n        \n            type Identificacion = {\n                emisor    : Emisor\n                documento : Documento\n                emision   : System.DateTime\n                vence     : System.DateTime\n            }\n        \n            type TipoArchivo =\n            | Contrato\n            | Autorizacion\n            | Pasaporte\n            | Cedula\n            | LicenciaConducir\n            | FormaW9\n            | FormaW8BEN\n            | Otro            of string\n                with \n                    static member Parse (s:string) = \n                        match s with\n                        | String.StartsWith \"Otro \" r -> Otro r\n                        | \"Contrato\"                  -> Contrato\n                        | \"FormaW9\"                   -> FormaW9\n                        | \"FormaW8BEN\"                -> FormaW8BEN\n                        | \"Autorizacion\"              -> Autorizacion\n                        | \"Pasaporte\"                 -> Pasaporte\n                        | \"Cedula\"                    -> Cedula\n                        | \"LicenciaConducir\"          -> LicenciaConducir\n                        | _                           -> Otro <| s.Trim()\n                    override this.ToString() = match this with Otro s -> s | v -> sprintf \"%A\" v\n        \n            type StatusArchivo =\n            | Subido\n            | Verificado\n            | Rechazado \n            | Expirado  \n            | Cancelado  \n            | Cambiado\n                with \n                    static member Parse (s:string) = \n                        match s with\n                        | \"Cambiado\"   -> Cambiado\n                        | \"Expirado\"   -> Expirado \n                        | \"Cancelado\"  -> Cancelado\n                        | \"Verificado\" -> Verificado \n                        | \"Rechazado\"  -> Rechazado  \n                        | _            -> Subido\n                    override this.ToString() = sprintf \"%A\" this\n        \n            type Archivo = {\n                idAliado    : IdAliado\n                tipo        : TipoArchivo\n                nombre      : string\n                modificado  : System.DateTime\n                tamano      : int64\n                status      : StatusArchivo\n                comentario  : string\n            }\n        \n            type Mes =\n            | Enero      =  1\n            | Febrero    =  2\n            | Marzo      =  3\n            | Abril      =  4\n            | Mayo       =  5\n            | Junio      =  6\n            | Julio      =  7\n            | Agosto     =  8\n            | Septiembre =  9\n            | Octubre    = 10\n            | Noviembre  = 11\n            | Diciembre  = 12\n        \n            type Expiracion = {\n                anio : int\n                mes  : Mes\n            } with\n                member this.Id = sprintf \"%04d-%02d\" this.anio (int this.mes)\n                static member TryParse (txt:string) =\n                    let create century (anio:string) (mes:string) =\n                        {\n                            anio = century   + int anio\n                            mes  = enum<Mes>  (int mes )\n                        } |> Some\n                    if txt.Length = 4 || txt.Length = 5 then \n                        create 2000 (txt.Right 2) (txt.Left  2)\n                    elif txt.Length = 7 then\n                        txt.Split[| '-' ; '/' |]\n                        |> function \n                            | [| py ; pm |] when py.Length = 4 -> create 0 py pm\n                            | [| pm ; py |] when py.Length = 4 -> create 0 py pm\n                            |_-> None\n                    else None\n        \n        \n            type NumeroCuenta   = NumeroCuenta  of string       with member this.Id = match this with NumeroCuenta  id -> id\n            type NumeroTarjeta  = NumeroTarjeta of string       with member this.Id = match this with NumeroTarjeta id -> id\n            type RoutingNumber  = RoutingNumber of string       with member this.Id = match this with RoutingNumber id -> id \n        \n            type TipoTarjeta     = \n            | Visa\n            | MasterCard\n            | Amex\n            | Otra of string\n                with \n                    static member tryParse (s:string) = \n                        match s.Trim().ToUpper() with\n                        | \"\"                 -> None    \n                        | \"VISA\"             -> Some <| Visa\n                        | \"MASTERCARD\"       -> Some <| MasterCard\n                        | \"AMEX\"\n                        | \"AMERICAN EXPRESS\" -> Some <| Amex\n                        | _                  -> Some <| (Otra <| s.Trim() )\n                    override this.ToString() = match this with Otra s -> s | v -> sprintf \"%A\" v\n        \n            type TipoCuenta     = \n            | Ahorro\n            | Corriente\n            | Otra of string\n                with \n                    static member tryParse (s:string) = \n                        match s.Trim().ToUpper() with\n                        | \"\"               -> None    \n                        | \"SAVINGS\"\n                        | \"AHORRO\"         -> Some <| Ahorro\n                        | \"CHECKING\"\n                        | \"CORRIENTE\"      -> Some <| Corriente\n                        | _                -> Some <| (Otra <| s.Trim() )\n                    override this.ToString() = match this with Otra s -> s | v -> sprintf \"%A\" v\n        \n            type CuentaBancaria = {\n                titular     : string\n                banco       : string\n                tipo        : TipoCuenta\n                numero      : NumeroCuenta\n                routing     : RoutingNumber\n            }\n        \n            type TarjetaCredito = {\n                titular     : string\n                tipoTarjeta : TipoTarjeta\n                numero      : NumeroTarjeta\n                expiracion  : Expiracion\n            }\n        \n            type ConceptoPago =\n            | PagoAfiliacion\n            | PagoComision\n            | Otro of string\n                with\n                    static member tryParse (s:string) = \n                        match s.Trim().ToUpper() with\n                        | \"\"               -> None    \n                        | \"PAGOAFILIACION\" -> Some <| PagoAfiliacion\n                        | \"PAGOCOMISION\"   -> Some <| PagoComision\n                        | _                -> Some <| (ConceptoPago.Otro <| s.Trim() )\n                    override this.ToString() = match this with Otro s -> s | v -> sprintf \"%A\" v\n        \n            type Transaccion = {\n                fechaPago      : System.DateTime\n                ano            : int\n                periodo        : int\n                monto          : int\n                idAliado       : IdAliado\n                concepto       : ConceptoPago\n                transaccion    : string\n                statusTran     : string\n            }\n        \n            type TipoDireccion = \n            | Habitacion\n            | Oficina\n            | ServicioPostal\n            | Otro of string\n                with \n                    static member tryParse (s:string) = \n                        match s.Trim() with\n                        | \"\"               -> None    \n                        | \"Habitacion\"     -> Some <| Habitacion\n                        | \"Oficina\"        -> Some <| Oficina\n                        | \"ServicioPostal\" -> Some <| ServicioPostal\n                        | s                -> Some <| Otro s\n                    override this.ToString() = match this with Otro s -> s | v -> sprintf \"%A\" v\n        \n            type ZonaPostal = ZonaPostal of string\n                with \n                    static member tryParse (s:string) = if s.Trim() <> \"\" then Some (ZonaPostal <| s.Trim()) else None\n                    override this.ToString() = match this with ZonaPostal s -> s\n        \n            type Direccion = {\n                authorizeIdR  : Result<IdAddress, string>\n                tipoDireccion : TipoDireccion\n                linea1        : string\n                linea2        : string\n                ciudad        : string\n                estado        : Estado\n                pais          : Pais\n                zonaPostal    : ZonaPostal\n            }\n        \n            type TipoTelefono =\n            | Movil\n            | Oficina\n            | Habitacion\n            | Voip\n                with \n                    static member tryParse = function\n                        | \"Movil\"      -> Some Movil\n                        | \"Oficina\"    -> Some Oficina\n                        | \"Habitacion\" -> Some Habitacion\n                        | _            -> None    \n                    override this.ToString() = sprintf \"%A\" this\n        \n            type Telefono          = {\n                tipoTelefono : TipoTelefono\n                codigoPais   : string\n                codigoArea   : string\n                numero       : string\n                extension    : string\n                mensajes     : bool\n            }\n        \n            type CorreoElectronico = {\n                email       : string\n                enviado     : System.DateTime option\n                recibido    : System.DateTime option\n            }\n                with override this.ToString() = this.email\n        \n            type Contacto =\n            | Direccion         of Direccion\n            | CorreoElectronico of CorreoElectronico\n            | Telefono          of Telefono\n            | Mensajeria        of string\n            | PaginaWeb         of string\n            | SocialMedia       of string\n        \n            type Genero =\n            | Masculino\n            | Femenino\n            | Empresa\n                with \n                    static member tryParse (s:string) = \n                        match s.Trim() with\n                        | \"Masculino\"      -> Some <| Masculino\n                        | \"Femenino\"       -> Some <| Femenino\n                        | \"Empresa\"        -> Some <| Empresa\n                        | _                -> None    \n        \n            type DatosPersonales = {\n                titulo          : string option\n                nombre1         : string\n                nombre2         : string\n                apellido1       : string\n                apellido2       : string\n                nacionalidad    : Pais\n                genero          : Genero\n                fechaNacimiento : System.DateTime\n            }\n        \n            type CuentaPago =\n            | CuentaBancaria            of CuentaBancaria\n            | TarjetaCredito            of TarjetaCredito\n            | TransferenciaElectronica  of string\n                with\n                    member this.MaskedCuenta =\n                        match this with\n                        | TarjetaCredito           tc -> tc.numero.Id\n                        | CuentaBancaria           cb -> cb.numero.Id\n                        | TransferenciaElectronica te -> te\n                    member this.TipoCorto =\n                        match this with\n                        | TarjetaCredito           tc -> \"TC\"\n                        | CuentaBancaria           bc -> \"CB\"\n                        | TransferenciaElectronica te -> \"TE\"\n                    member this.TipoLargo =\n                        match this with\n                        | TarjetaCredito           tc -> \"Tarjeta de Credito\"\n                        | CuentaBancaria           bc -> \"Cuenta Bancaria\"\n                        | TransferenciaElectronica te -> \"Transferencia Electronica\"\n                    member this.AutorizacionPre = sprintf \"Autorizacion %s %s\" this.TipoCorto this.MaskedCuenta\n        \n            type StatusFormaPago =\n            | NuevaFormaPago\n            | Registrada      of          System.DateTime option\n            | RegistroFallido of string * System.DateTime option\n        \n            type Subscripcion = {\n                idSubscripcion  : IdSubscription\n                inicio          : System.DateTime\n                monto           : int\n                descripcion     : string\n                status          : int\n            } with \n                member this.Short = sprintf \"%s %s $%d.00 %s %d\" this.idSubscripcion.Id (Date.toYYYYMMDD \"-\" this.inicio) this.monto this.descripcion this.status\n        \n            type FormaPago = {\n                nombre          : string\n                authorizeIdR    : Result<IdPayment, string>\n                cuentaPago      : CuentaPago\n                subscripcion    : Subscripcion option\n            }\n        \n            type TipoMensaje = \n            | Alerta\n            | Informacion\n            | Saludo\n        \n            type Remitente =\n            | Prozper\n            | Aliado of IdAliado\n            | OtroR  of string\n        \n            type Mensaje = {\n                tipo      : TipoMensaje\n                leido     : System.DateTime option\n                fecha     : System.DateTime\n                texto     : string\n                remitente : Remitente\n            }\n        \n            type PremisasCalculo = {\n                comisionReferidosRegular     : int\n                comisionReferidosMaster      : int\n                comisionDescendientesMaster  : int\n                comisionDescendientesRegular : int\n                montoAfiliacion              : int\n                numeroReferidosMaster        : int\n                diaCorte1                    : int\n                diaCorte2                    : int\n            }\n        \n            let premisasCalculo = {\n                comisionReferidosRegular     = 15\n                comisionReferidosMaster      = 25\n                comisionDescendientesMaster  = 25\n                comisionDescendientesRegular =  0\n                montoAfiliacion              = 75\n                numeroReferidosMaster        = 31\n                diaCorte1                    = 26\n                diaCorte2                    = 28\n            }\n        \n            let telVacio = {            \n                tipoTelefono = Movil\n                codigoPais   = \"\"\n                codigoArea   = \"\"\n                numero       = \"\"\n                extension    = \"\"\n                mensajes     = false\n            }\n        \n            let dirVacio = {\n                authorizeIdR  = Error \"\"\n                tipoDireccion = TipoDireccion.Habitacion\n                linea1        = \"\"\n                linea2        = \"\"\n                ciudad        = \"\"\n                estado        = OtroS \"\"\n                pais          = OtroP \"\"\n                zonaPostal    = ZonaPostal \"\"\n            }\n        \n            let tarVacio = {            \n                tipoTarjeta  = Visa\n                numero       = NumeroTarjeta \"\"\n                expiracion   = { anio = 2000 ; mes = Mes.Enero }\n                titular      = \"\"\n            }\n        \n            let ctaVacio = {            \n                banco        = \"\"\n                numero       = NumeroCuenta \"\"\n                tipo         = Ahorro\n                titular      = \"\"\n                routing      = RoutingNumber \"\"\n            }\n        \n            type DiaPago =\n            |   Dia01\n            |   Dia05\n            |   Dia10\n            |   Dia15\n            |   Dia20\n            |   Dia25\n        \n            type IdForAuthorize = IdForAuthorize of string  with member this.Id = match this with IdForAuthorize id -> id\n        \n            type Aliado = {\n                id              :      IdAliado\n                idPadreO        :      IdAliado       option\n                idForAuthorize  :      IdForAuthorize option\n                influyente      :      string         option\n                datosPersonales :      DatosPersonales\n                contactos       :      Contacto       []\n                identificacion  :      Identificacion []\n                isInternal      :      bool\n                status          :      StatusAliado\n                diaPago         :      DiaPago\n                tipo            :      TipoAliado\n                fechaRegistro   :      System.DateTime\n                fechaStatus     :      System.DateTime\n                nReferidos      :      int\n                nRefActivos     :      int\n                nDescendientes  :      int\n                nDescActivos    :      int\n                comision        :      int\n                nivel           :      int\n                documentos      :      int\n                docPendientes   :      int\n            }\n        \n            type Modelo = {\n                idAliado      : IdAliado\n                aliados       : Aliado []\n                anoActual     : int\n                periodoActual : int\n                premisas      : PremisasCalculo\n                nevento       : int64\n            }\n        \n            let modeloVacio = {\n                idAliado      = IdAliado \"\"\n                aliados       = [||]\n                anoActual     = System.DateTime.Now.Year\n                periodoActual = System.DateTime.Now.Month\n                premisas      = premisasCalculo\n                nevento       = 0L\n            }\n        \n            let correoVacio = {\n                email       = \"\"\n                enviado     = None\n                recibido    = None\n            }\n        \n        [< JavaScript >]\n        module Aliado =\n            open Operators\n        \n            //let statusActual ano mes al  =\n            //    al.transacciones.Value\n            //    |> Array.tryFind (fun t -> t.idAliado = al.id \n            //                            && t.ano      = ano\n            //                            && t.periodo  = mes\n            //                            && t.concepto = PagoAfiliacion)\n            //    |> Option.map    (fun _ ->  Activo )\n            //    |> Option.defaultValue    Inactivo\n        \n            open System.Collections.Generic\n        \n            let premisas pre al =\n                let comRef, comDes = match al.tipo  with\n                                     | Regular -> pre.comisionReferidosRegular, pre.comisionDescendientesRegular\n                                     | Master  -> pre.comisionReferidosMaster , pre.comisionDescendientesMaster\n                match al.status with\n                | Activo -> comRef, comDes\n                | _      -> 0     , 0\n        \n            let comision pre al = \n                let comRef, comDes = premisas pre al\n                al.nRefActivos * comRef, al.nDescActivos * comDes\n        \n            type Buscar = {\n                hijosDe        : (IdAliado -> IdAliado [])\n                nivelDe        : (IdAliado option -> int)\n                aliado         : (IdAliado -> Aliado)\n                aliadoO        : (IdAliado -> Aliado option)\n                hijos          : (Aliado -> Aliado [])\n                descendientes  : (Aliado -> Aliado [])\n            }\n        \n            let busqueda aliados =\n                let padres               = aliados \n                                           |> Seq.map(fun al -> al.idPadreO, al.id) \n                                           |> Seq.groupBy fst \n                                           |> Seq.map(fun (pO, ch) -> pO, ch |> Seq.map snd |> Seq.toArray) |> Map\n                let aliadosMap           = aliados |> Seq.map (fun al -> al.id, al) |> Map\n                let aliadoO          id  = match aliadosMap.TryGetValue id with\n                                           | true, al -> Some al\n                                           | _        -> None\n                let aliado           id  = try aliadosMap.[id] with e -> failwithf \"buscarAliado failed: %A\" id\n                let hijosDe          idO = match padres.TryGetValue (Some idO) with\n                                           | true, hijos -> hijos\n                                           | _           -> [||]\n                let rec nivelDe      idO = idO |> Option.bind aliadoO |> Option.map (fun al -> 1 + nivelDe al.idPadreO) |> Option.defaultValue 0\n                let hijos             al = hijosDe al.id |> Array.choose aliadoO\n                let rec descendientes al =\n                    [|\n                        for h in hijos al do\n                            yield                h\n                            yield! descendientes h\n                    |]\n                {\n                    hijosDe       = hijosDe       \n                    nivelDe       = nivelDe       \n                    aliado        = aliado        \n                    aliadoO       = aliadoO       \n                    hijos         = hijos         \n                    descendientes = descendientes \n                }\n        \n            let diaPago (registro:System.DateTime) =\n                let  diaMes = registro.Day\n                if   diaMes  =  1 then Dia01\n                elif diaMes <=  5 then Dia05\n                elif diaMes <= 10 then Dia10\n                elif diaMes <= 15 then Dia15\n                elif diaMes <= 20 then Dia20\n                elif diaMes <= 25 then Dia25\n                else                   Dia01\n        \n            let dia = function\n            | Dia01 ->  1\n            | Dia05 ->  5\n            | Dia10 -> 10\n            | Dia15 -> 15\n            | Dia20 -> 20\n            | Dia25 -> 25\n        \n            let actualizarAliados (transAll:Transaccion []) modelo =\n                let buscar             = busqueda modelo.aliados\n                let pre                = modelo.premisas\n                let trans              = transAll |> Array.filter (fun tr -> tr.fechaPago > System.DateTime.Today.AddMonths -1 )\n                let statusActual    al = \n                    match al.status with\n                    | Activo\n                    | Inactivo -> if trans\n                                     |> Seq.exists(fun tr -> tr.idAliado = al.id && tr.monto >= pre.montoAfiliacion ) \n                                    then Activo else Inactivo\n                    | st       -> st\n                let rec aliadoActualizado alid =\n                    let al             = buscar.aliado alid\n                    let hijos          = buscar.hijosDe al.id |> Seq.map aliadoActualizadoM |> Seq.cache\n                    let status         = statusActual al\n                    let nReferidos     = hijos |> Seq.length\n                    let nRefActivos    = hijos |> Seq.filter (fun al -> al.status = Activo && al.tipo = Regular) |> Seq.length\n                    let nDescendientes = hijos |> Seq.sumBy  (fun al -> al.nDescendientes + al.nReferidos )\n                    let nDescActivos   = hijos |> Seq.sumBy  (fun al -> al.nDescActivos   + al.nRefActivos)\n                    let tipo           = if nRefActivos >= pre.numeroReferidosMaster then Master else Regular\n                    let nivel          = 1 + buscar.nivelDe al.idPadreO\n                    let al0 =\n                        { al with\n                            status         = status\n                            tipo           = tipo\n                            nReferidos     = nReferidos    \n                            nRefActivos    = nRefActivos   \n                            nDescendientes = nDescendientes\n                            nDescActivos   = nDescActivos  \n                            diaPago        = diaPago al.fechaRegistro\n                            //fechaStatus    = System.DateTime()\n                            nivel          = nivel\n                        }\n                    let comRef, comDes = comision pre al0\n                    let al1 = { al0 with comision = comRef + comDes}\n                    {al1 with status = if al1.status = Inactivo && al1.comision >= pre.montoAfiliacion then Activo else al1.status }\n        \n                and aliadoActualizadoM = Memoize.memoize aliadoActualizado\n        \n                modelo.aliados \n                |> Seq.map (fun al -> al.id)\n                |> Seq.map aliadoActualizadoM\n                |> Seq.toArray\n        \n            //let actualizarModelEf () = eff {\n            //    let! modelo     = State.get()\n            //    do! State.put { modelo with aliados = actualizarAliados modelo }\n            //    ()\n            //}\n        \n            let empty = {\n                datosPersonales = {\n                                        titulo          = None\n                                        nombre1         = \"\"\n                                        nombre2         = \"\"\n                                        apellido1       = \"\"\n                                        apellido2       = \"\"\n                                        nacionalidad    = USA\n                                        genero          = Masculino\n                                        fechaNacimiento = System.DateTime(2000, 1, 1)\n                                    }\n                id              =  IdAliado \"\"\n                idPadreO        =  None\n                idForAuthorize  =  None\n                influyente      =  None\n                contactos       =  [||]\n                identificacion  =  [||]\n                isInternal      =  false\n                status          =  Inactivo\n                tipo            =  Regular\n                fechaRegistro   =  System.DateTime(2000, 1, 1)\n                fechaStatus     =  System.DateTime(2000, 1, 1)\n                diaPago         =  Dia01\n                nReferidos      =  0\n                nRefActivos     =  0\n                nDescendientes  =  0\n                nDescActivos    =  0\n                comision        =  0\n                nivel           =  0\n                documentos      =  0\n                docPendientes   =  0\n            }\n        \n            let nombre dp = \n                let titulo   = dp.titulo |> Option.map ((+) \" \") |> Option.defaultValue \"\"\n                let apellido = if dp.apellido1 = \"\" then \"\" else (dp.apellido1 + \" \" + dp.apellido2).Trim() + \", \"\n                titulo + apellido + dp.nombre1 + \" \" + dp.nombre2\n        \n            let nombre2 dp = \n                let titulo   = dp.titulo |> Option.map ((+) \" \") |> Option.defaultValue \"\"\n                titulo + (dp.nombre1 + \" \" + dp.nombre2).Trim() + \" \" + (dp.apellido1 + \" \" + dp.apellido2).Trim()\n        \n            let correo al  =\n                al.contactos |> Seq.choose(function | CorreoElectronico correo -> Some correo.email |_-> None ) |> Seq.tryHead |> Option.defaultValue \"\"\n                \n        module Serializador =\n            open Serializer\n            open System\n        \n            [< AutoOpen >]\n            module TypesV0 =\n                open TypesV0\n            \n                let serDate : Ser<System.DateTime> = \n                    (  fun (d:System.DateTime ) -> d.ToString(\"u\") |> sprintf \"%A\"                )\n                    , (fun (j:JsonIntermediate) -> j.tryString() |> Option.bind ParseO.parseDateO )\n        \n                let serIdAliado          = serDU<IdAliado         > [   serObj serString            ]    \n                let serIdAuthorized      = serDU<IdAuthorize      > [   serObj serString            ]    \n                let serIdForAuthorize    = serDU<IdForAuthorize   > [   serObj serString            ]    \n                let serIdPayment         = serDU<IdPayment        > [   serObj serString            ]    \n                let serIdAddress         = serDU<IdAddress        > [   serObj serString            ]    \n                let serTipoAliado        = serDU<TipoAliado       > [   serObj serString            ]\n                let serPais              = serDU<Pais             > [   serObj serString            ]    \n                let serEstado            = serDU<Estado           > [   serObj serString            ]    \n                let serTerritorio        = serDU<Territorio       > [   serObj serEstado            ]   \n                let serEmisor            = serDU<Emisor           > [   serObj serPais\n                                                                        serObj serTerritorio        ]\n                let serDocumento         = serDU<Documento        > [   serObj serString            ]    \n                let serNumeroCuenta      = serDU<NumeroCuenta     > [   serObj serString            ]    \n                let serNumeroTarjeta     = serDU<NumeroTarjeta    > [   serObj serString            ]\n                let serRoutingNumber     = serDU<RoutingNumber    > [   serObj serString            ]    \n                let serTipoCuenta        = serDU<TipoCuenta       > [   serObj serString            ]    \n                let serStatusAliado      = serDU<StatusAliado     > [   serObj serString            ]    \n                let serConceptoPago      = serDU<ConceptoPago     > [   serObj serString            ]    \n                let serTipoDireccion     = serDU<TipoDireccion    > [   serObj serString            ]    \n                let serZonaPostal        = serDU<ZonaPostal       > [   serObj serString            ]    \n                let serTipoTelefono      = serDU<TipoTelefono     > [   serObj serString            ]    \n                let serGenero            = serDU<Genero           > [   serObj serString            ]    \n                let serTipoMensaje       = serDU<TipoMensaje      > [   serObj serString            ]\n                let serDiaPago           = serDU<DiaPago          > [                               ]\n                let serTipoArchivo       = serDU<TipoArchivo      > [   serObj serString            ]    \n                let serStatusArchivo     = serDU<StatusArchivo    > [   serObj serString            ]    \n        \n                let serMes : Ser<Mes>    = (int >> fst serInt), (snd serInt >> Option.map enum<_> )\n        \n                let serIdAuthorizedR     = serDU<Result<IdAuthorize, string>> [   serObj serString ; serObj serIdAuthorized ]    \n                let serIdPaymentR        = serDU<Result<IdPayment  , string>> [   serObj serString ; serObj serIdPayment    ]    \n                let serIdAddressR        = serDU<Result<IdAddress  , string>> [   serObj serString ; serObj serIdAddress    ]    \n        \n                let serExpiracion: Ser<Expiracion> =\n                    [|\n                        serInt        |> serField \"anio\"    (fun s -> s.anio   ) (fun v s -> { s with anio    = v } )   \n                        serMes        |> serField \"mes\"     (fun s -> s.mes    ) (fun v s -> { s with mes     = v } )          \n                    |] |> serRecord tarVacio.expiracion\n        \n        \n                let serIdentificacion : Ser<Identificacion> = \n                    [|\n                        serEmisor    |> serField \"emisor\"    (fun s -> s.emisor    ) (fun v s -> { s with emisor    = v } )\n                        serDocumento |> serField \"documento\" (fun s -> s.documento ) (fun v s -> { s with documento = v } )\n                        serDate      |> serField \"emision\"   (fun s -> s.emision   ) (fun v s -> { s with emision   = v } )\n                        serDate      |> serField \"vence\"     (fun s -> s.vence     ) (fun v s -> { s with vence     = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serCuentaBancaria : Ser<CuentaBancaria> =\n                    [|\n                        serString        |> serField \"titular\" (fun (s:CuentaBancaria) -> s.titular) (fun v s -> { s with titular = v } )   \n                        serString        |> serField \"banco\"   (fun  s                 -> s.banco  ) (fun v s -> { s with banco   = v } )   \n                        serTipoCuenta    |> serField \"tipo\"    (fun  s                 -> s.tipo   ) (fun v s -> { s with tipo    = v } )        \n                        serNumeroCuenta  |> serField \"numero\"  (fun  s                 -> s.numero ) (fun v s -> { s with numero  = v } )          \n                        serRoutingNumber |> serField \"routing\" (fun  s                 -> s.routing) (fun v s -> { s with routing = v } )           \n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serTarjetaCredito : Ser<TarjetaCredito> =\n                    [|\n                        serExpiracion    |> serField \"expiracion\" (fun s -> s.expiracion) (fun v s -> { s with expiracion = v } )   \n                        serString        |> serField \"titular\"    (fun s -> s.titular   ) (fun v s -> { s with titular    = v } )   \n                        serNumeroTarjeta |> serField \"numero\"     (fun s -> s.numero    ) (fun v s -> { s with numero     = v } )          \n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serTransaccion : Ser<Transaccion> = \n                    [|\n                        serDate          |> serField \"fechaPago\"   (fun s -> s.fechaPago  ) (fun v s -> { s with fechaPago   = v } ) \n                        serInt           |> serField \"ano\"         (fun s -> s.ano        ) (fun v s -> { s with ano         = v } )\n                        serInt           |> serField \"periodo\"     (fun s -> s.periodo    ) (fun v s -> { s with periodo     = v } )\n                        serInt           |> serField \"monto\"       (fun s -> s.monto      ) (fun v s -> { s with monto       = v } )\n                        serIdAliado      |> serField \"idAliado\"    (fun s -> s.idAliado   ) (fun v s -> { s with idAliado    = v } )     \n                        serConceptoPago  |> serField \"concepto\"    (fun s -> s.concepto   ) (fun v s -> { s with concepto    = v } )         \n                        serString        |> serField \"transaccion\" (fun s -> s.transaccion) (fun v s -> { s with transaccion = v } )   \n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serDireccion : Ser<Direccion> = \n                    [|\n                        serTipoDireccion |> serField \"tipoDireccion\" (fun s -> s.tipoDireccion) (fun v s -> { s with tipoDireccion = v } )\n                        serString        |> serField \"linea1\"        (fun s -> s.linea1       ) (fun v s -> { s with linea1        = v } )\n                        serString        |> serField \"linea2\"        (fun s -> s.linea2       ) (fun v s -> { s with linea2        = v } )\n                        serString        |> serField \"ciudad\"        (fun s -> s.ciudad       ) (fun v s -> { s with ciudad        = v } )\n                        serPais          |> serField \"pais\"          (fun s -> s.pais         ) (fun v s -> { s with pais          = v } )\n                        serZonaPostal    |> serField \"zonaPostal\"    (fun s -> s.zonaPostal   ) (fun v s -> { s with zonaPostal    = v } )\n                        serEstado        |> serField \"estado\"        (fun s -> s.estado       ) (fun v s -> { s with estado        = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serTelefono : Ser<Telefono> =\n                    [|\n                        serTipoTelefono |> serField \"tipoTelefono\" (fun s -> s.tipoTelefono) (fun v s -> { s with tipoTelefono = v } )\n                        serString       |> serField \"codigoPais\"   (fun s -> s.codigoPais  ) (fun v s -> { s with codigoPais   = v } )\n                        serString       |> serField \"codigoArea\"   (fun s -> s.codigoArea  ) (fun v s -> { s with codigoArea   = v } )\n                        serString       |> serField \"numero\"       (fun s -> s.numero      ) (fun v s -> { s with numero       = v } )\n                        serString       |> serField \"extension\"    (fun s -> s.extension   ) (fun v s -> { s with extension    = v } )\n                        serBool         |> serField \"mensajes\"     (fun s -> s.mensajes    ) (fun v s -> { s with mensajes     = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serCuentaPago        = serDU<CuentaPago       > [   serObj serString              \n                                                                        serObj serTarjetaCredito\n                                                                        serObj serCuentaBancaria    ]\n                let serRemitente         = serDU<Remitente        > [   serObj serIdAliado\n                                                                        serObj serString            ]\n        \n                let serFormaPago : Ser<FormaPago> =\n                    [|\n                        serCuentaPago            |> serField \"cuentaPago\"  (fun s -> s.cuentaPago   ) (fun v s -> { s with cuentaPago   = v } )\n                        serString                |> serField \"nombre\"      (fun s -> s.nombre       ) (fun v s -> { s with nombre       = v } )\n                        serIdPaymentR            |> serField \"authorizeId\" (fun s -> s.authorizeIdR ) (fun v s -> { s with authorizeIdR = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serDatosPersonales : Ser<DatosPersonales> =\n                    [|\n                        serString        |> serOpt  |> serField \"titulo\"          (fun s -> s.titulo         ) (fun v s -> { s with titulo          = v } )\n                        serString                   |> serField \"nombre1\"         (fun s -> s.nombre1        ) (fun v s -> { s with nombre1         = v } )\n                        serString                   |> serField \"nombre2\"         (fun s -> s.nombre2        ) (fun v s -> { s with nombre2         = v } )\n                        serString                   |> serField \"apellido1\"       (fun s -> s.apellido1      ) (fun v s -> { s with apellido1       = v } )\n                        serString                   |> serField \"apellido2\"       (fun s -> s.apellido2      ) (fun v s -> { s with apellido2       = v } )\n                        serPais                     |> serField \"nacionalidad\"    (fun s -> s.nacionalidad   ) (fun v s -> { s with nacionalidad    = v } )\n                        serGenero                   |> serField \"genero\"          (fun s -> s.genero         ) (fun v s -> { s with genero          = v } )\n                        serDate                     |> serField \"fechaNacimiento\" (fun s -> s.fechaNacimiento) (fun v s -> { s with fechaNacimiento = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serMensaje : Ser<Mensaje> =\n                    [|\n                        serTipoMensaje           |> serField \"tipo\"      (fun (s:Mensaje) -> s.tipo     ) (fun v s -> { s with tipo      = v } )\n                        serDate        |> serOpt |> serField \"leido\"     (fun (s:Mensaje) -> s.leido    ) (fun v s -> { s with leido     = v } )\n                        serDate                  |> serField \"fecha\"     (fun (s:Mensaje) -> s.fecha    ) (fun v s -> { s with fecha     = v } )\n                        serString                |> serField \"texto\"     (fun (s:Mensaje) -> s.texto    ) (fun v s -> { s with texto     = v } )\n                        serRemitente             |> serField \"remitente\" (fun (s:Mensaje) -> s.remitente) (fun v s -> { s with remitente = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serPremisasCalculo : Ser<PremisasCalculo> =\n                    [|\n                        serInt  |> serField \"comisionReferidosRegular\"     (fun s -> s.comisionReferidosRegular    ) (fun v s -> { s with comisionReferidosRegular     = v } )\n                        serInt  |> serField \"comisionReferidosMaster\"      (fun s -> s.comisionReferidosMaster     ) (fun v s -> { s with comisionReferidosMaster      = v } )\n                        serInt  |> serField \"comisionDescendientesMaster\"  (fun s -> s.comisionDescendientesMaster ) (fun v s -> { s with comisionDescendientesMaster  = v } )\n                        serInt  |> serField \"comisionDescendientesRegular\" (fun s -> s.comisionDescendientesRegular) (fun v s -> { s with comisionDescendientesRegular = v } )\n                        serInt  |> serField \"montoAfiliacion\"              (fun s -> s.montoAfiliacion             ) (fun v s -> { s with montoAfiliacion              = v } )\n                        serInt  |> serField \"numeroReferidosMaster\"        (fun s -> s.numeroReferidosMaster       ) (fun v s -> { s with numeroReferidosMaster        = v } )\n                        serInt  |> serField \"diaCorte1\"                    (fun s -> s.diaCorte1                   ) (fun v s -> { s with diaCorte1                    = v } )\n                        serInt  |> serField \"diaCorte2\"                    (fun s -> s.diaCorte2                   ) (fun v s -> { s with diaCorte2                    = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serCorreoElectronico : Ser<CorreoElectronico> = \n                    [|\n                        serString         |> serField \"email\"    (fun s -> s.email    ) (fun v s -> { s with email    = v } )\n                        serDate |> serOpt |> serField \"enviado\"  (fun s -> s.enviado  ) (fun v s -> { s with enviado  = v } )\n                        serDate |> serOpt |> serField \"recibido\" (fun s -> s.recibido ) (fun v s -> { s with recibido = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serContacto          = serDU<Contacto         > [   serObj serString     \n                                                                        serObj serTelefono\n                                                                        serObj serCorreoElectronico\n                                                                        serObj serDireccion         ] \n        \n                let serArchivo : Ser<Archivo> = \n                    [|\n                        serString                      |> serField \"nombre\"          (fun (s:Archivo)-> s.nombre) (fun v s -> { s with nombre          = v } )\n                        serIdAliado                    |> serField \"id\"              (fun s -> s.idAliado       ) (fun v s -> { s with idAliado        = v } )\n                        serDate                        |> serField \"modificado\"      (fun s -> s.modificado     ) (fun v s -> { s with modificado      = v } )\n                        serString                      |> serField \"comentario\"      (fun s -> s.comentario     ) (fun v s -> { s with comentario      = v } )\n                        serStatusArchivo               |> serField \"status\"          (fun s -> s.status         ) (fun v s -> { s with status          = v } )\n                        serTipoArchivo                 |> serField \"tipo\"            (fun s -> s.tipo           ) (fun v s -> { s with tipo            = v } )\n                        serInt64                       |> serField \"tamano\"          (fun s -> s.tamano         ) (fun v s -> { s with tamano          = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serAliado : Ser<Aliado> =\n                    [|\n                        serIdAliado                    |> serField \"id\"              (fun s -> s.id             ) (fun v s -> { s with id              = v } )\n                        serIdForAuthorize   |> serOpt  |> serField \"idForAuthorize\"  (fun s -> s.idForAuthorize ) (fun v s -> { s with idForAuthorize  = v } )\n                        serIdAliado         |> serOpt  |> serField \"idPadreO\"        (fun s -> s.idPadreO       ) (fun v s -> { s with idPadreO        = v } )\n                        serIdentificacion   |> serArr  |> serField \"identificacion\"  (fun s -> s.identificacion ) (fun v s -> { s with identificacion  = v } )\n                        serString           |> serOpt  |> serField \"influyente\"      (fun s -> s.influyente     ) (fun v s -> { s with influyente      = v } )\n                        serDatosPersonales             |> serField \"datosPersonales\" (fun s -> s.datosPersonales) (fun v s -> { s with datosPersonales = v } )\n                        serContacto         |> serArr  |> serField \"contactos\"       (fun s -> s.contactos      ) (fun v s -> { s with contactos       = v } )\n                        //serFormaPago        |> serArr  |> serField \"formasPago\"      (fun s -> s.formasPago     ) (fun v s -> { s with formasPago      = v } )\n                        //serTransaccion      |> serArr  |> serField \"transacciones\"   (fun s -> s.transacciones  ) (fun v s -> { s with transacciones   = v } )\n                        //serMensaje          |> serArr  |> serField \"mensajes\"        (fun s -> s.mensajes       ) (fun v s -> { s with mensajes        = v } )\n                        serBool                        |> serField \"isInternal\"      (fun s -> s.isInternal     ) (fun v s -> { s with isInternal      = v } )\n                        serStatusAliado                |> serField \"status\"          (fun s -> s.status         ) (fun v s -> { s with status          = v } )\n                        serTipoAliado                  |> serField \"tipo\"            (fun s -> s.tipo           ) (fun v s -> { s with tipo            = v } )\n                        serDate                        |> serField \"fechaRegistro\"   (fun s -> s.fechaRegistro  ) (fun v s -> { s with fechaRegistro   = v } )\n                        serDate                        |> serField \"fechaStatus\"     (fun s -> s.fechaStatus    ) (fun v s -> { s with fechaStatus     = v } )\n                        serDiaPago                     |> serField \"diaPago\"         (fun s -> s.diaPago        ) (fun v s -> { s with diaPago         = v } )\n                        serInt                         |> serField \"nReferidos\"      (fun s -> s.nReferidos     ) (fun v s -> { s with nReferidos      = v } )\n                        serInt                         |> serField \"nRefActivos\"     (fun s -> s.nRefActivos    ) (fun v s -> { s with nRefActivos     = v } )\n                        serInt                         |> serField \"nDescendientes\"  (fun s -> s.nDescendientes ) (fun v s -> { s with nDescendientes  = v } )\n                        serInt                         |> serField \"nDescActivos\"    (fun s -> s.nDescActivos   ) (fun v s -> { s with nDescActivos    = v } )\n                        serInt                         |> serField \"comision\"        (fun s -> s.comision       ) (fun v s -> { s with comision        = v } )\n                        serInt                         |> serField \"nivel\"           (fun s -> s.nivel          ) (fun v s -> { s with nivel           = v } )\n                        serInt                         |> serField \"documentos\"      (fun s -> s.documentos     ) (fun v s -> { s with documentos      = v } )\n                        serInt                         |> serField \"docPendientes\"   (fun s -> s.docPendientes  ) (fun v s -> { s with docPendientes   = v } )                \n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n                let serModelo : Ser<Modelo> = \n                    [|\n                        serInt64                      |> serField \"nevento\"       (fun s -> s.nevento       ) (fun v s -> { s with nevento       = v } )\n                        serIdAliado                   |> serField \"idAliado\"      (fun s -> s.idAliado      ) (fun v s -> { s with idAliado      = v } )\n                        //serAliado           |> serArr |> serField \"aliados\"       (fun s -> s.aliados       ) (fun v s -> { s with aliados       = v } )\n                        serInt                        |> serField \"anoActual\"     (fun s -> s.anoActual     ) (fun v s -> { s with anoActual     = v } )\n                        serInt                        |> serField \"periodoActual\" (fun s -> s.periodoActual ) (fun v s -> { s with periodoActual = v } )\n                        serPremisasCalculo            |> serField \"premisas\"      (fun s -> s.premisas      ) (fun v s -> { s with premisas      = v } )\n                    |] |> serRecord LibraryNoJS.Default.value<_>\n        \n        \n        module ObtenerEstado =\n            open Serializador\n        \n            type EstadoI<'H> =\n                    abstract member UltimoEstado        : unit          -> Eff<'H, int64 option>\n        //            abstract member LeerEventos          : int64    ->  Eff<'H, (int64 * string * string * string * string * System.DateTime) []>\n        //            abstract member LeerTipos            : unit     ->  string           []\n        //            abstract member LeerEventosTipos     : unit     -> (string * string) []\n                    abstract member GuardarEstado       : int64         -> string ->  Eff<'H, unit>\n                    abstract member GuardarAliado       : string        -> string ->  Eff<'H, unit>\n                    abstract member ObtenerEstado       : unit          -> Eff<'H, (int64 * string) option>\n                    abstract member ObtenerAliados      : unit          -> Eff<'H, string     [] >\n                    abstract member LeerTransacciones   : unit          -> Eff<'H, Transaccion[] >\n                    abstract member SalvarTransacciones : Transaccion[] -> Eff<'H, unit          >\n        \n            let guardarEstadoE   (nevento, serialModelo) = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.GuardarEstado nevento serialModelo\n            let obtenerEstado0E  ()                      = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.ObtenerEstado    ()                  \n            let obtenerAliadosE  ()                      = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.ObtenerAliados   ()                  \n            let guardarAliadoE   id json                 = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.GuardarAliado    id json             \n            let ultimoEstadoE    ()                      = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.UltimoEstado     ()\n            let leerTransaccsE   ()                      = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.LeerTransacciones()\n            let salvarTransaccsE ts                      = Reader.ask() >>= fun (h:#EstadoI<_>) -> h.SalvarTransacciones ts\n        \n            let aliadosPrevio = System.Collections.Generic.Dictionary<_,_>()\n        \n            let guardarAliados aliados = eff {\n                let mutable first = true\n                for (aliado:Aliado) in aliados do\n                    let previoO = Dict.tryGetValue aliado.id aliadosPrevio\n                    if previoO <> Some aliado then\n                        if first then \n                            first <- false\n                            printfn \"previo = %A\" previoO \n                            printfn \"nuevo  = %A\" aliado\n                        do! aliado |> Serializer.serialize serAliado |> guardarAliadoE aliado.id.Id\n                    if previoO.IsSome then aliadosPrevio.Remove aliado.id |> ignore\n                    aliadosPrevio.Add(aliado.id, aliado)\n                    ()\n            }\n        \n            let actualizarAliadosPrevio aliados = eff {\n                aliadosPrevio.Clear()\n                for aliado in aliados do\n                    aliadosPrevio.Add(aliado.id, aliado)\n            }\n        \n            let guardarEstado nevento modelo = \n                eff {\n                    let! trans = leerTransaccsE()\n                    return!\n                        { modelo with nevento = nevento ; aliados = Aliado.actualizarAliados trans modelo } \n                        |> EA.tee (fun e -> guardarAliados e.aliados)\n                        |>> fun (modelo:Modelo) -> nevento, modelo |> Serializer.serialize serModelo\n                        >>= guardarEstadoE\n                }\n        \n            let private obtenerAliados () = eff {\n                let! aliadoss = obtenerAliadosE()\n                let  aliados  = aliadoss |> Array.choose (Serializer.deserializeWithDefs serAliado)\n                do! actualizarAliadosPrevio aliados\n                return aliados\n            }\n        \n            let obtenerEstado00E() = eff {\n                let! estadoPO = obtenerEstado0E()\n                let! estadoSinAliados = \n                    estadoPO \n                    |> Option.map snd                                       \n                    |> Option.map (Serializer.deserializeWithDefs serModelo)\n                    |> Option.defaultValue  (Some modeloVacio)              \n                    |> Result.ofOption  (fun () -> \"Modelo no fue deserializado\")\n                    |> Rsl.ofResult\n                let! aliados = obtenerAliados()\n                //let! trans = leerTransaccsE()\n                let  estado = { estadoSinAliados with aliados = aliados }\n                //return { estado with aliados = Aliado.actualizarAliados trans estado } \n                return estado\n            }\n        \n            let mutable private estadoActual : Modelo option = None\n        \n            let resetEstadoActual() = estadoActual <- None\n        \n            let obtenerEstado() = eff{\n                let! estado = ultimoEstadoE()\n                match estado, estadoActual with\n                | Some n, Some e when n = e.nevento -> return e\n                |_-> return! obtenerEstado00E() |>>! (fun e -> estadoActual <- Some e)\n            }\n        \n            //let obtenerUsuario (aid: (_*_) []) : string =  aid \n                //|>  Seq.tryFind(fun (n,v) -> n = \"http://schemas.microsoft.com/identity/aid/objectidentifier\") \n                //|>  Option.map snd\n                //|>  Option.defaultWith (fun () -> failwith \"Usuario no autenticado\")\n        \n            let obtenerAliadoEstado (aid:IdAliado) =\n                obtenerEstado()\n                |>> fun modelo -> \n                        modelo.aliados \n                        |> Array.tryFind (fun al -> al.id = aid ) \n                        |> Option.map (fun v -> v, modelo) \n                |> Rsl.absorbO (fun () -> \"Aliado no fue encontrado\")\n        \n            //let obtenerAliadoEstado    aid       = obtenerUsuario       aid |>  obtenerAliadoEstado0\n            let obtenerAliado          aid       = obtenerAliadoEstado  aid |>> fst\n            //let obtenerAliadoEstadoId (IdAliado id) = obtenerAliadoEstado id\n            //let pairAliadoEstado       aid   ev  = obtenerAliadoEstado  aid |>> fun s -> s, ev\n            //let pairAliado             aid   ev  = obtenerAliado        aid |>> fun a -> a, ev\n        \n            let obtenerSubModelo esAdmin (aliado:Aliado, modelo:Modelo) = \n                let buscar = Aliado.busqueda modelo.aliados\n                if esAdmin then modelo else\n                let subAliados = (if aliado.tipo = Master then buscar.descendientes else buscar.hijos) aliado\n                { modelo with \n                    idAliado = aliado.id\n                    aliados  = Array.append [| aliado |] subAliados \n                }\n        \n            let obtenerEstadoParaUsuario aid esAdmin =\n                obtenerAliadoEstado aid\n                |>> obtenerSubModelo esAdmin\n        \n        \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\other\\AuthorizeNet\\lib\\AuthorizeNet.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Newtonsoft.Json\\lib\\netstandard2.0\\Newtonsoft.Json.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Data\\lib\\net45\\FSharp.Data.dll\"\n        \n        module Authorize =\n            open System\n            open AuthorizeNet\n            open AuthorizeNet.Api.Controllers\n            open AuthorizeNet.Api.Contracts.V1\n            open AuthorizeNet.Api.Controllers.Bases\n        \n            type AuthorizeI<'H>     = abstract execute : IApiOperation<'A, 'B> -> 'B\n                                      abstract prepare : unit                  -> Eff<'H, unit>\n        \n            let authorizeMerchantId (aliado:Aliado) =\n                match aliado.idForAuthorize with\n                | Some v ->        v .Id                .Left(20)\n                | None   -> aliado.id.Id.Replace(\"-\",\"\").Left(20)\n        \n            let executeE (controller: IApiOperation<_,_> ) = Reader.ask() |>> fun (h:#AuthorizeI<_>) -> h.execute controller\n            let prepareE (                               ) = Reader.ask() >>= fun (h:#AuthorizeI<_>) -> h.prepare ()\n            let inline executeGetResponse controller : Eff<_, 'b> = eff {\n                let! response = executeE controller\n                if response = null then \n                    return! Rsl.failf \"%s Failed, Response = null\" ( controller.GetType().Name )\n                elif response.messages.resultCode = messageTypeEnum.Ok then\n                    return response\n                elif response.messages.message <> null then\n                    return! Rsl.failf \"%s Error: %s %s\"  ( controller.GetType().Name ) response.messages.message.[0].code response.messages.message.[0].text\n                else\n                    return! Rsl.failf \"%s Error: resultCode = %A, no messages\" ( controller.GetType().Name ) response.messages.resultCode\n            }\n        \n            let ( |*> ) request controllerF =\n                prepareE()\n                |>> fun () -> controllerF request\n                >>= executeGetResponse \n        \n            let ( >*= ) requestEf controllerF = \n                requestEf \n                >>= fun request -> request |*> controllerF\n        \n            let buscarPerfil aliado =\n                getCustomerProfileRequest( merchantCustomerId  = authorizeMerchantId aliado ) \n                |*> getCustomerProfileController\n                |>> fun response -> response.profile, match response.subscriptionIds with null -> [||] | v -> v\n                \n        \n            let buscarIdAuthorize aliado =\n                buscarPerfil aliado\n                |>> fun (p,_) -> IdAuthorize p.customerProfileId\n        \n            let registrarAliadoNuevo (aliado:Aliado, paymentProfile : customerPaymentProfileType) =\n                let email = aliado.contactos \n                            |> Seq.choose(function CorreoElectronico cor -> Some cor.email |_-> None) \n                            |> Seq.tryHead |> Option.defaultValue \"\"\n                let customerProfile = \n                    customerProfileType(        merchantCustomerId  = authorizeMerchantId aliado\n                                            ,   email               = email \n                                            ,   paymentProfiles     = [| paymentProfile |] )\n                createCustomerProfileRequest(   profile             = customerProfile\n                                            ,   validationMode      = validationModeEnum.liveMode )\n                |*> createCustomerProfileController \n                |>> fun response -> response.customerPaymentProfileIdList.[0]\n        \n            let registrarPagoNuevo (IdAuthorize id, pp : customerPaymentProfileType) =\n                createCustomerPaymentProfileRequest(customerProfileId = id\n                                                ,   paymentProfile    = pp\n                                                ,   validationMode    = validationModeEnum.liveMode)\n                |*> createCustomerPaymentProfileController\n                |>> fun response -> response.customerPaymentProfileId\n        \n            let pagoTipoTarjeta (tar:TarjetaCredito) =\n                let creditCard = creditCardType(cardNumber      = tar.numero.Id\n                                            ,   expirationDate  = tar.expiracion.Id               )\n                paymentType( Item = creditCard ), tar.titular\n        \n            let pagoTipoCuenta  (cta:CuentaBancaria) =\n                let  bankAccount = bankAccountType(  accountNumber   = cta.numero .Id\n                                                ,   routingNumber   = cta.routing.Id\n                                            //,   accountType     = bankAccountTypeEnum.checking\n                                            //,   echeckType      = echeckTypeEnum.WEB\n                                                ,   nameOnAccount   = cta.titular\n                                                ,   bankName        = cta.banco)\n                paymentType( Item = bankAccount  ), cta.titular\n        \n            let datosTitularO (aliado:Aliado) (titular:string) =\n                aliado.contactos \n                |> Seq.tryPick(function | Direccion dir -> Some dir |_-> None)\n                |> Option.map (fun direccion -> \n                    customerAddressType(firstName = (titular.Split ' ').[0]\n                                    ,   lastName  = (titular.Split ' ' |> Seq.skip 1 |> String.concat \" \")\n                                    ,   address   = direccion.linea1\n                                    ,   city      = direccion.ciudad\n                                    ,   state     = direccion.estado    .ToString()\n                                    ,   zip       = direccion.zonaPostal.ToString()\n                                    ,   country   = direccion.pais      .ToString()\n                                    )\n                )\n        \n            let perfilPago (tipoPago: paymentType, titular: string) (aliado:Aliado) =\n                datosTitularO aliado titular\n                |> Option.map (fun datosTitular ->\n                    aliado,\n                    customerPaymentProfileType( payment = tipoPago\n                                            ,   billTo  = datosTitular )\n                )\n        \n            let registrarFormaPago (al, pp) =\n                buscarIdAuthorize al\n                |> Rsl.getResult\n                >>= function\n                    | Ok p -> registrarPagoNuevo   (p , pp)\n                    |_     -> registrarAliadoNuevo (al, pp)\n        \n            let crearFormaPago aid (tipoPago: paymentType, titular : string) =\n                ObtenerEstado.obtenerAliado aid\n                |>> perfilPago (tipoPago, titular)\n                |>  Rsl.absorbO (fun () -> \"No se encontro direccion\")\n                >>= registrarFormaPago\n        \n            let registrarTarjeta         aid (tc:TarjetaCredito) =\n                pagoTipoTarjeta tc\n                |>  crearFormaPago aid\n                |>> fun _ -> \"Tarjeta registrada.\"\n        \n            let registrarCuenta          aid (cta: CuentaBancaria) =\n                pagoTipoCuenta cta\n                |>  crearFormaPago aid\n                |>> fun _ -> \"Cuenta registrada.\"\n        \n            let validarFormaPago         aid (IdPayment idp) =\n                ObtenerEstado.obtenerAliado aid\n                >>= buscarIdAuthorize\n                |>> fun (IdAuthorize idm)  ->\n                        validateCustomerPaymentProfileRequest(  customerProfileId        = idm\n                                                            ,   customerPaymentProfileId = idp\n                                                            ,   validationMode           = validationModeEnum.liveMode\n                        )\n                >*= validateCustomerPaymentProfileController\n                |>> fun response -> response.directResponse\n        \n            let obtenerAliadoEstadoPerfilSubIds idAl =\n                ObtenerEstado.obtenerAliadoEstado idAl\n                >>= fun (al,md) ->\n                        buscarPerfil al\n                        |>> fun (pe,subIds) -> al, md, pe, subIds\n        \n            let getSubscription sid =\n                ARBGetSubscriptionRequest(subscriptionId = sid, refId = sid)\n                |*> ARBGetSubscriptionController\n        \n            let obtenerAliadoEstadoPerfilSubActivos idAl =\n                obtenerAliadoEstadoPerfilSubIds     idAl\n                >>= fun  (al : Aliado, md : Modelo, pe, subIds)  ->\n                        subIds\n                        |> traverseSeq getSubscription \n                        |>> Seq.filter (fun s -> s.subscription.status = ARBSubscriptionStatusEnum.active)\n                        |>> fun subs -> (al, md, pe, subs)\n        \n            let obtenerAliadoEstadoPerfilSubActiva  idAl =\n                obtenerAliadoEstadoPerfilSubActivos idAl\n                |>> fun  (al : Aliado, md : Modelo, pe, subs)  ->\n                        subs\n                        |> Seq.tryHead\n                        |> fun subO -> (al, md, pe, subO)\n        \n            let obtenerFormasDePagoId aid =\n                obtenerAliadoEstadoPerfilSubActivos aid\n                |>> fun (al, md, perfil, subs) ->\n                        if perfil.paymentProfiles = null then [||] else perfil.paymentProfiles\n                        |> Array.choose (fun pago ->\n                            match pago.payment.Item with\n                            | :? AuthorizeNet.Api.Contracts.V1.creditCardMaskedType as cc -> \n                                TarjetaCredito {\n                                    titular       = pago.billTo.firstName + \" \" + pago.billTo.lastName\n                                    tipoTarjeta   = TipoTarjeta.tryParse cc.cardType |> Option.defaultValue Visa\n                                    numero        = NumeroTarjeta cc.cardNumber\n                                    expiracion    = { anio = 0 ; mes = Mes.Enero}\n                                } |> Some\n                            | :? AuthorizeNet.Api.Contracts.V1.bankAccountMaskedType as ba -> \n                                CuentaBancaria {\n                                    titular     = ba.nameOnAccount\n                                    banco       = ba.bankName\n                                    tipo        = match ba.accountType with\n                                                    | AuthorizeNet.Api.Contracts.V1.bankAccountTypeEnum.businessChecking\n                                                    | AuthorizeNet.Api.Contracts.V1.bankAccountTypeEnum.checking          -> Corriente\n                                                    |_-> Ahorro\n                                    numero      = NumeroCuenta  ba.accountNumber\n                                    routing     = RoutingNumber ba.routingNumber\n                                } |> Some\n                            |_-> None\n                            |> Option.map (fun cta ->\n                                {\n                                    nombre        = \"\"\n                                    authorizeIdR  = pago.customerPaymentProfileId |> IdPayment |> Ok\n                                    cuentaPago    = cta\n                                    subscripcion  = subs \n                                                    |> Seq.tryFind(fun sub -> sub.subscription.profile.paymentProfile.customerPaymentProfileId = pago.customerPaymentProfileId)\n                                                    |> Option.map (fun sub -> {\n                                                        idSubscripcion = IdSubscription sub.refId \n                                                        monto          = int sub.subscription.amount\n                                                        descripcion    =     sub.subscription.name\n                                                        inicio         =     sub.subscription.paymentSchedule.startDate\n                                                        status         = int sub.subscription.status\n                                                    })\n                                }\n                            )\n                        )\n                |>  Rsl.getResult\n                |>> Result.defaultValue [||]\n        \n        //    let obtenerFormasDePago aid =\n        //        fun () -> ObtenerEstado.obtenerAliado aid\n        //        >=> obtenerFormasDePagoId\n        \n            let obtenerFormasDePagoPara (alIds:_[]) = eff {\n                let! fps =\n                    alIds \n                    |> traverseSeq (fun id -> eff {\n                        let! fp = obtenerFormasDePagoId id\n                        return id, fp\n                    })\n                return fps |> Seq.toArray \n            }\n        \n            let crearSubscripcion aid (IdPayment idp) = \n                obtenerAliadoEstadoPerfilSubActiva aid \n                >>= fun  (al : Aliado, md : Modelo, pe, subO)  -> eff {\n                        let start = DateTime(DateTime.Today.Year, DateTime.Today.Month, Aliado.dia al.diaPago)\n                                    |> fun start -> if start < DateTime.Today               then start.AddMonths 1 else start\n                                    |> fun start -> if start < al.fechaRegistro.AddMonths 1 then start.AddMonths 1 else start\n                        let sub   = if subO.IsNone then \n                                        ARBSubscriptionType(\n                                                amount                  = decimal md.premisas.montoAfiliacion\n                                            ,   name                    = \"Afiliacion Mensual Prozper\"\n                                            ,   paymentSchedule         = paymentScheduleType(  interval                    = paymentScheduleTypeInterval(length = int16 1, unit = ARBSubscriptionUnitEnum.months) \n                                                                                            ,   totalOccurrences            = int16 240\n                                                                                            ,   startDate                   = start)\n                                            ,   profile                 = customerProfileIdType(customerProfileId           = pe.customerProfileId\n                                                                                            ,   customerPaymentProfileId    = idp)\n                                        )\n                                    else\n                                        ARBSubscriptionType(\n                                                amount                  = decimal md.premisas.montoAfiliacion\n                                            ,   name                    = \"Afiliacion Mensual Prozper\"\n                                            ,   profile                 = customerProfileIdType(customerProfileId           = pe.customerProfileId\n                                                                                            ,   customerPaymentProfileId    = idp)\n                                        )\n                        return sub, subO\n                    }\n        \n            let createSubscription sub =\n                ARBCreateSubscriptionRequest(subscription = sub)\n                |*> ARBCreateSubscriptionController\n                |>> fun response -> response.subscriptionId\n        \n            let updateSubscription subId sub =\n                ARBUpdateSubscriptionRequest(subscription = sub, subscriptionId = subId)\n                |*> ARBUpdateSubscriptionController\n                |>> fun _response -> subId\n        \n            let actualizarSubscripcion aid idp =\n                crearSubscripcion aid idp\n                >>= function\n                    | subT, None     -> createSubscription           subT\n                    | subT, Some sub -> updateSubscription sub.refId subT // usando refId para guardar subscriptionId\n        \n            let getBatchDetalles bid = \n                getTransactionListRequest(  batchId = bid )\n                |*> getTransactionListController\n                |>> fun response -> response.transactions\n        \n            let buscarPerfilPorProfileId pid =\n                getCustomerProfileRequest(  customerProfileId = string pid )\n                |*> getCustomerProfileController\n                |>> fun response -> response.profile\n        \n            let getSubscriptions active =\n                ARBGetSubscriptionListRequest(searchType = (if active then ARBGetSubscriptionListSearchTypeEnum.subscriptionActive else ARBGetSubscriptionListSearchTypeEnum.subscriptionInactive) )\n                |*> ARBGetSubscriptionListController\n                |>> fun response -> response.subscriptionDetails\n                >>= traverseSeq (fun s -> buscarPerfilPorProfileId s.customerProfileId |>> (fun p -> s, p) )\n        \n            let cancelarSubscripcion sid =\n                ARBCancelSubscriptionRequest(subscriptionId = sid)\n                |*> ARBCancelSubscriptionController\n        \n            let borrarFormaPago aid (IdPayment idp) =\n                obtenerAliadoEstadoPerfilSubActiva aid \n                >>= fun (al : Aliado, md : Modelo, pe, subO)  -> eff {\n                        match subO with\n                        | Some sub when sub.subscription.profile.paymentProfile.customerPaymentProfileId = idp -> \n                                let! _ = cancelarSubscripcion sub.refId\n                                do!      Log.logf \"Subscripcion cancelada %s\" idp\n                                return al\n                        |_->    return al\n                }\n                >>= buscarIdAuthorize\n                |>> fun (IdAuthorize idm)  ->\n                        deleteCustomerPaymentProfileRequest(customerProfileId        = idm\n                                                        ,   customerPaymentProfileId = idp\n                        )\n                >*= deleteCustomerPaymentProfileController\n                |>> fun response -> \"Forma de pago borrada.\"\n        \n            let toTransaccion aid (tr:transactionSummaryType) = {\n                fechaPago   = tr.submitTimeLocal\n                ano         = tr.submitTimeLocal.Year\n                periodo     = tr.submitTimeLocal.Month\n                monto       = int (tr.settleAmount * 100.00M)\n                idAliado    = aid\n                concepto    = ConceptoPago.Otro tr.accountNumber\n                transaccion = tr.transId\n                statusTran  = tr.transactionStatus\n            }\n        \n            let obtenerTransacciones nO =\n                let n = Option.defaultValue 0 nO\n                getSettledBatchListRequest(  firstSettlementDate = System.DateTime.Today.AddMonths (-n-1) \n                                         ,   lastSettlementDate  = System.DateTime.Today.AddMonths (-n  ) )\n                |*> getSettledBatchListController\n                |>> fun response -> response.batchList\n                >>= traverseSeq (fun b -> getBatchDetalles b.batchId |>> (fun ts -> b, ts) )\n                |>> Seq.collect (snd >> Seq.filter(fun tr -> tr.subscription <> null || tr.profile <> null) )// >> Seq.map (toTransaccion <| IdAliado \"\"))\n        \n            let ResultToOption r = r |> Result.map Some |> Result.defaultValue None\n            let getOption eff = Rsl.getResult eff |>> ResultToOption\n        \n            let actualizarTransacciones nO = eff {\n                let! modelo   = ObtenerEstado.obtenerEstado()\n                let! ts       = obtenerTransacciones nO\n                let! perfs    = modelo.aliados |> traverseSeq (fun  al -> buscarPerfil al |>> (fun (p, subs) -> al, p, subs) |> getOption) |>> (Seq.choose id >> Seq.toArray)\n                let  subs     = perfs          |> Seq.collect (fun (al,_   ,sbs) -> sbs |>  Seq.map (fun sb -> sb, al.id )   ) |>  Seq.toArray\n                let  ids      = perfs          |> Seq.map     (fun (al,perf, _ ) ->        perf.customerProfileId, al.id     ) |>  Seq.toArray\n                do!     ts \n                        |> Seq.choose(fun tr ->\n                            if   tr.subscription <> null then subs |> Seq.tryFind (fst >> (=) (string tr.subscription.id   ) ) |> Option.map snd\n                            elif tr.profile      <> null then ids  |> Seq.tryFind (fst >> (=) tr.profile.customerProfileId   ) |> Option.map snd\n                            else None\n                            |> Option.map (swap toTransaccion tr) )\n                        |> Seq.toArray\n                        |> ObtenerEstado.salvarTransaccsE\n            }\n        \n            let obtenerTransaccionesPara aid isAdmin = eff {\n                let! modelo   = ObtenerEstado.obtenerEstadoParaUsuario aid isAdmin\n                let  aids     = modelo.aliados |> Seq.map(fun al -> al.id) |> Set\n                let! ts       = ObtenerEstado.leerTransaccsE ()\n                return ts |> Array.filter (fun tr -> aids |> Set.contains tr.idAliado)\n            }\n        \n            let getSubscriptionTransactions () =\n                getSettledBatchListRequest(  firstSettlementDate = System.DateTime.Today.AddMonths -1 \n                                         ,   lastSettlementDate = System.DateTime.Now)\n                |*> getSettledBatchListController\n                |>> fun response -> response.batchList\n                >>= traverseSeq (fun b -> getBatchDetalles b.batchId |>> (fun ts -> b, ts) )\n                |>>(Seq.map   (fun (b,ts) -> b, ts |> Seq.filter(fun t -> t.subscription <> null) )\n                 >> Seq.filter(fun (b,ts) ->    ts |> Seq.isEmpty |> not )\n                   )\n        \n            let SubsYTransacciones () =\n                getSubscriptionTransactions()\n                |>> Seq.collect (fun (b, ts) -> ts |> Seq.map (fun t -> b, t))\n                >>= fun ts -> eff {\n                        let! subs = getSubscriptions true\n                        return ts, subs \n                    }\n                >>=! (fun (ts, subs) -> eff {\n                        let orphans = ts |> Seq.filter(fun (b,t) -> subs |> Seq.exists (fun (s,p) -> s.id = t.subscription.id) |> not) |> Seq.toArray\n                        for b, t in orphans do\n                            do! Log.logf \"Huerfano: %A\" (\n                                        b.batchId\n                                        , t.accountNumber\n                                        , t.accountType\n                                        , t.firstName\n                                        , t.lastName\n                                        , t.settleAmount\n                                        , t.subscription.id\n                                        , t.subscription.payNum\n                                        , t.transactionStatus\n                                        , t.transId )\n                    })\n                |>> fun (ts, subs) ->  subs |> Seq.map(fun (sub,p) -> sub,p, ts |> Seq.filter (fun (b,t) -> t.subscription.id = sub.id) )\n        \n            //type H() =\n            //    interface Rsl.Rsl<string>\n            //    interface Log.Log<string>\n            //    interface VariableAmbienteI with member __.getVar  v  = failwith \"VariableAmbienteI.getVar not implemented\"\n            //    interface AuthorizeI<H>     with member __.execute c  = failwith \"AuthorizeI<H>.Execute not implemented\"\n            //                                     member __.prepare () = failwith \"AuthorizeI<H>.Prepare not implemented\"\n            //    interface EstadoI with\n            //            member __.UltimoEvento      ()  = failwith \"EstadoI.UltimoEvento not implemented\"\n            //            member __.UltimoEstado      ()  = failwith \"EstadoI.UltimoEstado not implemented\"\n            //            member __.LeerEventos       p   = failwith \"EstadoI.LeerEventos not implemented\"\n            //            member __.LeerTipos         ()  = failwith \"EstadoI.LeerTipos not implemented\"\n            //            member __.LeerEventosTipos  ()  = failwith \"EstadoI.LeerEventosTipos not implemented\"\n            //            member __.GuardarEstado     p q = failwith \"EstadoI.GuardarEstado not implemented\"\n            //            member __.GuardarAliado     p q = failwith \"EstadoI.GuardarAliado not implemented\"\n            //            member __.ObtenerEstado     ()  = failwith \"EstadoI.ObtenerEstado not implemented\"\n            //            member __.ObtenerAliados    ()  = failwith \"EstadoI.ObtenerAliados not implemented\"\n        \n            let voidTransaction tid =\n                transactionRequestType(transactionType = \"voidTransaction\", refTransId = tid)\n                |>  fun trt -> createTransactionRequest(transactionRequest = trt)\n                |*> createTransactionController\n        \n            let obtenerTransaccionesReq aid req =\n                req\n                |*>  getTransactionListForCustomerController\n                |>>  fun resp ->\n                        if resp.transactions = null then [||] else \n                        resp.transactions\n                        |> Array.map (toTransaccion aid)\n        \n            let obtenerTransaccionesAliado aid =\n                ObtenerEstado.obtenerAliado aid\n                >>=  buscarPerfil\n                >>=! fun (perfil,_) -> Log.logf \"Perfil: %A %A %A\" perfil.customerProfileId perfil.description perfil.email\n                |>>  fun (perfil,_) -> getTransactionListForCustomerRequest( customerProfileId = perfil.customerProfileId)\n                >>=  obtenerTransaccionesReq aid\n        \n            let xobtenerTransaccionesForPayment aid pid =\n                ObtenerEstado.obtenerAliado aid\n                >>=  buscarPerfil\n                >>=! fun (perfil,_) -> Log.logf \"Perfil: %A %A %A\" perfil.customerProfileId perfil.description perfil.email\n                |>>  fun (perfil,_) -> getTransactionListForCustomerRequest( customerProfileId = perfil.customerProfileId, customerPaymentProfileId = pid)\n                >>=  obtenerTransaccionesReq aid          \n        \n            let xxobtenerTransaccionesPara aid = eff {\n                let! perfil, subs = ObtenerEstado.obtenerAliado aid >>= buscarPerfil\n                let! ats = getSubscriptionTransactions ()\n                let! ts2 = obtenerTransaccionesAliado aid\n                let  ts  = ats |> Seq.collect( fun (a,ts) -> ts) \n                return \n                    ts\n                    |> Seq.filter (fun tr -> subs |> Seq.contains (string tr.subscription.id) )\n                    |> Seq.map (toTransaccion aid)\n                    |> Seq.append ts2\n                    |> Seq.toArray\n            }\n        \n        \n         [< JavaScript >]\n        type DataEvento =\n        | AgregarAliados            of (Aliado[]                                                   )\n        | AgregarAliado             of (Aliado                                                     )\n        | InvitarPotencialesAliados of (IdAliado * string []                                       )\n        | RegistroNuevo             of (IdAliado * DatosPersonales * IdAliado option * Contacto [] )\n        | ActualizarDatosPersonales of (IdAliado * DatosPersonales                                 )\n        | ActualizarContactos       of (IdAliado * Contacto  []                                    )\n        //| ActualizarFormasPago      of (IdAliado * FormaPago []                                    )\n        | CorreoVerificacionEnviado of (IdAliado * string                                          )\n        | CorreoVerificado          of (IdAliado * string                                          )\n        //| ActualizarAuthorizeId     of (IdAliado * Result<IdAuthorize, string>                     )\n        //| ActualizarPagoAuthorizeId of (IdAliado * CuentaPago * Result<IdPayment, string>          )\n        | ActualizarStatusPadre     of (IdAliado * StatusAliado * (IdAliado option) * string option)\n        | ActualizarArchivos        of (IdAliado * Archivo []                                      )\n        \n        [< JavaScript >]\n        type Evento = {\n            nevento : int64\n            aliadoO : IdAliado option\n            data    : DataEvento\n        }\n        \n        [< JavaScript >]\n        type Respuesta =\n        | ROk\n        | NuevoRegistro        of string\n        | Mensaje              of string\n        \n        module Eventos =\n        \n            type TipoDatos = TipoDatos of nombre:string * tipos:string\n        \n            type ResultadoManejador<'H> = Modelo -> Eff<'H, Modelo * Respuesta>\n        \n            type ObjetoDatos<'T> = {\n                tipoDatos : TipoDatos\n                datos     : 'T\n            }\n        \n            type ManejadorDatos<'T, 'H> = {\n                tipoDatos  : TipoDatos\n                manejadorF : ObjetoDatos<'T> -> ResultadoManejador<'H>\n            }\n        \n            type EventosI<'H> =\n                abstract ManejadorGenerico    : ObjetoDatos<obj> -> ResultadoManejador<'H>\n                abstract GuardarArchivo<'H>   : Archivo          -> Eff<'H, unit>\n                abstract ObtenerListaDocs<'H> : IdAliado         -> Eff<'H, Archivo     []>\n        \n            let manejadorGenericoE msg modelo    = Reader.ask() >>= fun (h:#EventosI<_>) -> h.ManejadorGenerico msg modelo\n            let guardarArchivo (archivo:Archivo) = Reader.ask() >>= fun (h:#EventosI<_>) -> h.GuardarArchivo archivo\n            let obtenerListaDocs  alid           = Reader.ask() >>= fun (h:#EventosI<_>) -> h.ObtenerListaDocs alid                 \n        \n            let xManejadores<'H> = System.Collections.Generic.Dictionary<TipoDatos, ManejadorDatos<obj,'H>>()\n        \n            let deDatosGen (msg: ObjetoDatos<obj>) : ObjetoDatos<_> = {\n                tipoDatos = msg.tipoDatos\n                datos     = unbox msg.datos\n            }    \n        \n            let xregistrarManejador nombre (manejadorF:ObjetoDatos<'T> -> ResultadoManejador<_>) =\n                let manejador  = {\n                    tipoDatos  = TipoDatos (nombre, typeof<'T> |> getTypeName) |>! print\n                    manejadorF = deDatosGen >> manejadorF\n                }\n                xManejadores.Add(manejador.tipoDatos, manejador )\n        \n            let genManejador nombre (manejadorF:'T -> ResultadoManejador<_>) = {\n                tipoDatos  = TipoDatos (nombre, typeof<'T> |> getTypeName) |>! print\n                manejadorF = deDatosGen >> (fun oDatos -> manejadorF oDatos.datos)\n            }\n        \n            let xregistrarManejadorf nombre (manejadorF:'T -> ResultadoManejador<_>) =\n                xregistrarManejador  nombre (fun oDatos -> manejadorF oDatos.datos)\n        \n            //let xmanejadorGenerico (msg:ObjetoDatos<obj>) : ResultadoManejador<_> =\n            //    match Manejadores.TryGetValue msg.tipoDatos with\n            //    | false, _         -> failwithf \"No Handler for message: %A \\n handlers: [%s]\" msg (Manejadores.Keys |> Seq.map (sprintf \"%A\") |> String.concat \"\\n\")\n            //    | true , manejador -> manejador.manejadorF msg\n        \n            let addNewAliados (als1: Aliado []) (als2: Aliado []) : Aliado [] =\n                als1 |> Seq.filter(fun a -> als2 |> Seq.exists (fun b -> a.id = b.id ) |> not ) |> Seq.append als2 |> Seq.toArray\n        \n            let registroNuevo (idA, datos:DatosPersonales, padre, contactos) (modelo: Modelo) : Eff<'H,Modelo * Respuesta> = eff {\n                match   contactos\n                        |> Seq.tryPick(function CorreoElectronico email -> Some email |_-> None ) with\n                | None        -> return! sprintf \"No se encontro Correo Electronico: %A\" datos |> Error |> Rsl.ofResult\n                | Some correo ->\n                if  modelo.aliados\n                    |> Seq.exists(fun al ->\n                        al.contactos\n                        |> Seq.exists(function CorreoElectronico correo2 -> correo = correo2 |_-> false ) \n                    )\n                    then return! sprintf \"Correo Electronico ya esta registrado: %A\" correo |> Error |> Rsl.ofResult\n                else\n                if modelo.aliados |> Seq.exists (fun al -> al.id = idA) \n                    then return! sprintf \"Id ya esta en uso: %A\" idA                        |> Error |> Rsl.ofResult\n                else\n                let now = System.DateTime.Now\n                let aliado = {\n                    datosPersonales =  datos\n                    id              =  idA\n                    idPadreO        =  padre\n                    idForAuthorize  =  None\n                    influyente      =  None\n                    contactos       =  contactos\n                    identificacion  =  [||]\n                    isInternal      =  false\n                    status          =  CuentaCreada\n                    tipo            =  Regular\n                    fechaRegistro   =  now\n                    fechaStatus     =  now\n                    diaPago         =  Dia01\n                    nReferidos      =  0\n                    nRefActivos     =  0\n                    nDescendientes  =  0\n                    nDescActivos    =  0\n                    comision        =  0\n                    nivel           =  0\n                    documentos      =  0\n                    docPendientes   =  0\n                }\n                return\n                    { modelo with aliados = Array.append modelo.aliados [| aliado |] }\n                ,   [ datos.nombre1 ; datos.nombre2 ; datos.apellido1 ; datos.apellido2 ] \n                    |> String.concat \" \"\n                    |> NuevoRegistro  \n            }\n        \n            let cambiaAliado ida   f (modelo:Modelo) = { modelo with aliados    = modelo.aliados          |> Array.map (fun al -> if al.id = ida then f al else al )}\n            let cambiaCorreo email f (aliado:Aliado) = { aliado with contactos  = aliado.contactos        |> Array.map (function CorreoElectronico c when c.email = email -> f c |> CorreoElectronico | co -> co )}\n            //let cambiaFormaPago cp f (aliado:Aliado) = { aliado with formasPago = aliado.formasPago.Value |> Array.map (fun fp -> if fp.cuentaPago = cp then f fp else fp ) }\n            let cambiaStatusCorreo ida email f = cambiaAliado ida (cambiaCorreo email  f)\n        \n            let actualizarDatosPersonales (idA, datos:DatosPersonales) (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                return\n                    cambiaAliado idA (fun al -> { al with datosPersonales = datos }) modelo\n                ,   Mensaje <| \"Datos personales actualizados!\" \n            }\n        \n            //let actualizarAuthorizeId   (idA, authorizeIdR) (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n            //    return\n            //        cambiaAliado idA (fun al -> { al with authorizeIdR = authorizeIdR }) modelo\n            //    ,   Mensaje <| \"AuthorizeId actualizada\" \n            //}\n        \n            //let actualizarPagoAuthorizeId (idA, cuenta, paymentIdR : Result<IdPayment, string> )  (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n            //    return\n            //        cambiaAliado idA (cambiaFormaPago cuenta (fun fp -> { fp with authorizeIdR = paymentIdR }) ) modelo\n            //    ,   Mensaje <| \"AuthorizeId actualizada\" \n            //}\n        \n            let actualizarContactos (idA, contactos:Contacto[]) (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                return\n                    cambiaAliado idA (fun al -> { al with contactos = contactos }) modelo\n                ,   Mensaje <| \"Contactos actualizados!\" \n            }\n        \n            let actualizarStatusPadre (idA, status:StatusAliado, padreO:IdAliado option, inflO :  string option) (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                return\n                    cambiaAliado idA (fun al -> { al with status = status ; idPadreO = padreO ; influyente = inflO }) modelo\n                ,   Mensaje <| \"status actualizados!\" \n            }\n        \n            //let actualizarFormasPago (idA, formasPago:FormaPago[]) (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n            //    return\n            //        cambiaAliado idA (fun al -> { al with formasPago = formasPago }) modelo\n            //    ,  Mensaje <| \"Formas de pago actualizadas!\" \n            //}\n        \n            let agregarAliado  aliado  modelo = eff { return { modelo with Modelo.aliados = addNewAliados [| aliado  |] modelo.aliados }, ROk }\n            let agregarAliados aliados modelo = eff { return { modelo with Modelo.aliados = addNewAliados    aliados    modelo.aliados }, ROk }\n        \n            let correoVerificacionEnviado (ida, correo)  (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                return\n                    cambiaStatusCorreo ida correo (fun c -> { c with enviado = Some System.DateTime.Now }) modelo\n                ,   ROk\n            }\n        \n            let correoVerificado          (ida, correo)  (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                return\n                    cambiaStatusCorreo ida correo (fun c -> { c with recibido = Some System.DateTime.Now }) modelo\n                ,   ROk\n            }\n        \n            let actualizarEstado (modelo: Modelo, evento: Evento) = eff {\n                if modelo.nevento <> -1L && modelo.nevento + 1L <> evento.nevento then \n                    failwithf \"Evento fuera de secuencia: %d %d\" modelo.nevento evento.nevento\n                let case, tuple, data = DiscUnion.caseTuple evento.data\n                let objData           = {\n                    tipoDatos         = TipoDatos(case, tuple |> getTypeName)\n                    datos             = data\n                }\n                return! manejadorGenericoE objData modelo\n            }\n        \n            let actualizarArchivos (idA:IdAliado, archivos:Archivo[]) (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                for ar in archivos do\n                    do! guardarArchivo ar\n                let! ars  = obtenerListaDocs idA\n                let  n    = ars.Length\n                let  p    = ars |> Seq.filter (fun d -> d.status = Subido || d.status = Cambiado) |> Seq.length\n                return\n                    cambiaAliado idA (fun al -> { al with documentos = n ; docPendientes = p }) modelo\n                ,   Mensaje <| \"Archivos actualizados!\" \n            }\n        \n        \n            let eventoNoImplementado ev (modelo: Modelo) : Eff<_,Modelo * Respuesta> = eff {\n                return! sprintf \"Evento no Implementado: %A\" ev |> Error |> Rsl.ofResult\n            } \n        \n            let invitarPotencialesAliados ev = eventoNoImplementado ev\n        module SerializadorEventos =\n            open Serializador\n            open Serializer\n            open System\n        \n            open FSharp.Reflection\n        \n            let serObject : Ser<obj> = (fun o -> o.GetType().ToString() |> sprintf \"%A\"), (fun _ -> None)\n        \n            let serSerializadoresEventos =\n                let sers = System.Collections.Generic.Dictionary<_,_>()\n                [\n                    serObj         serObject\n                    serObj         serString\n                    serObj         serAliado\n                    serObj         serIdAliado\n                    serObj         serIdAuthorized\n                    serObj (serOpt serIdAliado )\n                    serObj (serArr serContacto )\n                    serObj (serArr serFormaPago)\n                    serObj (serArr serAliado   )\n                    serObj (serArr serString   )\n                    serObj         serDatosPersonales\n                    serObj         serIdAuthorizedR\n                    serObj         serCuentaPago\n                    serObj         serIdPaymentR\n                    serObj (serArr serArchivo  )\n                ] |> Seq.iter sers.Add\n                sers\n        \n            let rec registrarSerializadorParaTipos (ts:System.Type []) =\n                if Seq.length ts <= 1 then () else\n                let tupleType = FSharpType.MakeTupleType ts\n                let tname     = getTypeName tupleType\n                if serSerializadoresEventos.ContainsKey tname then () else\n                let sers      = ts |> Array.map (fun t ->   let tname = getTypeName  t\n                                                            serSerializadoresEventos \n                                                            |> Dict.tryGetValue tname \n                                                            |> Option.defaultWith (fun () -> failwithf \"Serializador no encontrado: %s\" tname) )\n                let getValues = FSharpValue.PreComputeTupleReader      tupleType\n                let setValues = FSharpValue.PreComputeTupleConstructor tupleType\n                let serC    v = Seq.zip (getValues v) sers\n                                |> Seq.map (fun (vi, seri) -> fst seri vi )\n                                |> String.concat \", \"\n                                |> sprintf \"[%s]\"\n                let deserC (j:JsonIntermediate) = \n                                match j.tryArray () with\n                                | None -> None\n                                | Some js -> \n                                Array.zip js sers\n                                |> Array.choose (fun (ji, seri) -> snd seri ji)\n                                |> setValues\n                                |> Some\n                serSerializadoresEventos.Add(tname, (serC, deserC))\n        \n            and registrarSerializadoresParaDU (ttype:System.Type) =\n                FSharpType.GetUnionCases ttype\n                |> Seq.iter(fun case ->\n                    let ts = case.GetFields() |> Array.map(fun p -> p.PropertyType) \n                    ts |> Seq.iter registrarSerializadorPara \n                    ts |> registrarSerializadorParaTipos\n                )\n        \n            and registrarSerializadorPara (ttype:System.Type) =\n                let tname = getTypeName ttype\n                if serSerializadoresEventos.ContainsKey tname then () else\n                if   FSharpType.IsUnion ttype then \n                    registrarSerializadoresParaDU ttype\n                    if serSerializadoresEventos.ContainsKey tname then () else\n                    let ser = Serializer.serDUt (Seq.zip serSerializadoresEventos.Keys serSerializadoresEventos.Values) ttype\n                    serSerializadoresEventos.Add(tname, ser)\n                elif FSharpType.IsTuple ttype then\n                    let ts = FSharpType.GetTupleElements ttype\n                    ts |> Seq.iter registrarSerializadorPara\n                    registrarSerializadorParaTipos ts\n                else\n                    failwithf \"Could not register serializer for: %s\" tname\n        \n            registrarSerializadorPara typeof<DataEvento>\n        \n            let obtenerSerializador tipoEvento = \n                serSerializadoresEventos \n                |> Dict.tryGetValue tipoEvento\n                |> Option.defaultWith (fun () -> failwithf \"Could not find deserializer for %s\" tipoEvento)\n        \n        \n            let registrarF add evento (f : 'T -> Eventos.ResultadoManejador<_>) =\n                Eventos.genManejador evento f |> add\n                registrarSerializadorPara typeof<'T>\n        \n            //open CodigoGenerado\n        \n        //    let chequearEventosEnBD et =\n        //        match et with\n        //        | ActualizarDatosPersonales_V0  v -> Eventos.actualizarDatosPersonales  v\n                //| ActualizarFormasPago_V0       v -> Eventos.actualizarFormasPago       v\n                //| AgregarAliado_V1              v -> Eventos.agregarAliado              v\n                //| RegistroNuevo_V1              v -> Eventos.registroNuevo              v\n                //| CorreoVerificacionEnviado_V0  v -> Eventos.correoVerificacionEnviado  v\n        \n            let chequearEventos ev =\n                match ev with\n                | AgregarAliado                 v -> Eventos.agregarAliado              v\n                | AgregarAliados                v -> Eventos.agregarAliados             v\n                | RegistroNuevo                 v -> Eventos.registroNuevo              v\n                | ActualizarDatosPersonales     v -> Eventos.actualizarDatosPersonales  v\n                | ActualizarContactos           v -> Eventos.actualizarContactos        v\n                //| ActualizarFormasPago          v -> Eventos.actualizarFormasPago       v\n                | CorreoVerificacionEnviado     v -> Eventos.correoVerificacionEnviado  v\n                | CorreoVerificado              v -> Eventos.correoVerificado           v\n                | InvitarPotencialesAliados     v -> Eventos.invitarPotencialesAliados  v\n                //| ActualizarAuthorizeId         v -> Eventos.actualizarAuthorizeId      v\n                //| ActualizarPagoAuthorizeId     v -> Eventos.actualizarPagoAuthorizeId  v\n                | ActualizarStatusPadre         v -> Eventos.actualizarStatusPadre      v\n                | ActualizarArchivos            v -> Eventos.actualizarArchivos         v\n        \n            let registrarEventos add =\n                registrarF add \"AgregarAliado\"             Eventos.agregarAliado\n                registrarF add \"AgregarAliados\"            Eventos.agregarAliados\n                registrarF add \"RegistroNuevo\"             Eventos.registroNuevo\n                registrarF add \"ActualizarDatosPersonales\" Eventos.actualizarDatosPersonales\n                registrarF add \"ActualizarContactos\"       Eventos.actualizarContactos\n                //registrarF add \"ActualizarFormasPago\"      Eventos.actualizarFormasPago\n                registrarF add \"CorreoVerificacionEnviado\" Eventos.correoVerificacionEnviado\n                registrarF add \"CorreoVerificado\"          Eventos.correoVerificado\n                registrarF add \"InvitarPotencialesAliados\" Eventos.invitarPotencialesAliados\n                //registrarF add \"ActualizarAuthorizeId\"     Eventos.actualizarAuthorizeId\n                //registrarF add \"ActualizarPagoAuthorizeId\" Eventos.actualizarPagoAuthorizeId\n                registrarF add \"ActualizarStatusPadre\"     Eventos.actualizarStatusPadre\n                registrarF add \"ActualizarArchivos\"        Eventos.actualizarArchivos\n        \n            //SQLServer.leerTipos()\n            //|> Seq.iter (fun t ->\n            //    if serSerializadoresEventos.ContainsKey t |> not then\n            //        failwithf \"Serializador no encontrado para tipo %s\" t\n            //)\n        //\n            //SQLServer.leerEventosTipos()\n            //    |> Seq.iter (fun t ->\n            //    if Eventos.TipoDatos t |> Eventos.Manejadores.ContainsKey |> not then\n            //        failwithf \"Manejador no encontrado para evento %A\" t\n            //)\n        \n        \n        module Correo = \n            open System.IO\n            open WebSharper.UI.Server\n        \n            type EmailI<'H> = abstract member SendEmail : string -> string -> string -> Eff<'H, unit>\n            let sendEmail (recipiente:string) (tema:string) (contenido:string)  = Reader.ask() >>= fun (h:#EmailI<'H>) -> h.SendEmail recipiente tema contenido\n        \n            let dummyCtxE() =\n                carpetaRaiz()\n                |>> fun raiz ->\n                        { new WebSharper.Web.Context() with\n                            member this.RootFolder      = raiz\n                            member this.RequestUri      = failwith \"Unsupported\"\n                            member this.UserSession     = failwith \"Unsupported\"\n                            member this.Environment     = failwith \"Unsupported\"\n                            member this.Json            = failwith \"Unsupported\"\n                            member this.Metadata        = failwith \"Unsupported\"\n                            member this.Dependencies    = failwith \"Unsupported\"\n                            member this.ApplicationPath = failwith \"Unsupported\"\n                            member this.ResourceContext = failwith \"Unsupported\" }\n        \n            let prepareHtml (doc:Doc) =\n                dummyCtxE()\n                |>> fun dummyCtx ->\n                        use tw  = new StringWriter()\n                        use w   = new Core.Resources.HtmlTextWriter(tw, \" \")        \n                        doc.Write(dummyCtx, w, false)\n                        tw.ToString()\n        \n            open WebSharper.UI.Templating\n         \n            let [< Literal >] TemplatesCorreos = @\"Correos.html\" \n            type TemplateCorreo = Template<TemplatesCorreos, serverLoad = ServerLoad.PerRequest>\n        \n            let hostE() = variableAmbienteE \"Website\" |>> sprintf \"https://%s\"\n        \n            let SendGridAPIKey = \"\"\n         \n            let enviarCorreoInvitacion tema (IdAliado idPadre) (email:string)= \n                hostE()\n                |>> fun host ->\n                        TemplateCorreo.Invitacion() \n                            .Logo(   TemplateCorreo.Logo().Doc()    )\n                            .Host( host                           )\n                            .IdPadre(idPadre                        )\n                            .Doc()\n                >>= prepareHtml\n                >>= sendEmail email tema\n        \n            let enviarCorreosInvitacion (tema, padre, emails:string[]) = eff {\n                for email in emails do\n                    do! enviarCorreoInvitacion tema padre email\n            }\n        \n            let enviarBienvenida (aliado:Aliado) (correo:CorreoElectronico) =\n                let sufijo = match aliado.datosPersonales.genero with Femenino -> \"a\" |_-> \"o\"\n                let nombre = Aliado.nombre2 aliado.datosPersonales\n                let tema   = sprintf \"Prozper le da la bienvenida\"\n                hostE()\n                |>> fun host ->\n                        TemplateCorreo.Bienvenida()\n                                .Logo(   TemplateCorreo.Logo().Doc())\n                                .Host(          host                )\n                                .Sufijo(        sufijo              )\n                                .NombreAfiliado(nombre              )\n                                .Doc()\n                >>= prepareHtml\n                >>= sendEmail correo.email tema\n                //CorreoVerificacionEnviado (aliado.id, correo.email)\n                //|> EstadoActual.agregarEventoServer\n        \n            let enviarVerificacionCorreo (aliado:Aliado) (correo:CorreoElectronico) =\n                WebSharper.UI.Html.div [] [ WebSharper.UI.Html.text \"CORREO CONTENIDO\" ]\n                |>  prepareHtml\n                >>= sendEmail correo.email \"Verificacion de Correo\"\n                //CorreoVerificacionEnviado (aliado.id, correo.email)\n                //|> EstadoActual.agregarEventoServer\n        \n        \n        \n        module ManejadorEventos =\n            //open ObtenerEstado\n        \n            type ManejadorI<'H> =\n                abstract member NuevoEvento<     'H> : string   -> string -> string -> string -> Eff<'H, int64         >\n                abstract member UltimoEvento<    'H> : unit     ->                               Eff<'H, int64 option  >\n                abstract member EnviarMensaje<   'H> : string   -> string -> string -> string -> Eff<'H, unit          >\n        \n            let nuevoEvento   (usuario:string) (nombre:string) (evento:string) (tipo:string) = Reader.ask() >>= fun (h:#ManejadorI<'H>) -> h.NuevoEvento usuario nombre evento tipo\n            let enviarMensaje (d:string) (r:string) (t:string) (c:string)                    = Reader.ask() >>= fun (h:#ManejadorI<'H>) -> h.EnviarMensaje d r t c                 \n        \n            type SerialEvento = {\n                nombre  : string\n                tipo    : string\n                json    : string\n                data    : obj\n            }\n        \n            type SerialEventoU = {\n                usuario   : string\n                serEvento : SerialEvento\n            }\n        \n            type SerialEventoN = {\n                nevento    : int64\n                serEventoU : SerialEventoU\n            }\n        \n            let deserializarEvento (serEvento : SerialEvento) =\n                let ser = SerializadorEventos.obtenerSerializador serEvento.tipo\n                match Serializer.deserializeWithDefs ser serEvento.json with\n                | Some data -> data\n                | None      -> failwithf \"No se pudo deserializar el Evento: %A\" serEvento\n        \n            let manejadorGenerico msg = \n                ObtenerEstado.obtenerEstado()\n                >>= fun estadoO -> \n                        Eventos.manejadorGenericoE msg estadoO\n                        |>  Rsl.getResult\n                        |>> function \n                            | Ok (estadoN, r) -> estadoN, Ok    r\n                            | Error m         -> estadoO, Error m\n        \n            let serialN2serialU (serEventoN: SerialEventoN) = serEventoN.serEventoU\n        \n            let serialU2TipoDatos (serEventoU: SerialEventoU) =\n                {\n                    Eventos.tipoDatos = Eventos.TipoDatos(serEventoU.serEvento.nombre, serEventoU.serEvento.tipo)\n                    Eventos.datos     = serEventoU.serEvento.data\n                }\n        \n            let evento2TipoDatos (evento:Evento) =\n                let case, tuple, data = DiscUnion.caseTuple evento.data\n                {\n                    Eventos.tipoDatos = Eventos.TipoDatos(case, tuple |> getTypeName)\n                    Eventos.datos     = data\n                }\n        \n            let separarEstado (modeloI:Modelo, eventoSerialN : SerialEventoN) oR =  \n                let modelo = oR |> Result.map fst |> Result.defaultValue modeloI\n                let resp   = oR |> Result.map snd\n                { modelo with nevento = eventoSerialN.nevento }, resp\n        \n            let ejecutarEventoSerial ev =\n                ev\n                |> serialN2serialU \n                |> serialU2TipoDatos\n                |> manejadorGenerico\n                >>= EA.tee (fst >> ObtenerEstado.guardarEstado ev.nevento)\n                |>> snd\n                |>  Rsl.absorbR\n        \n            let guardarEventoSerialU (serEventoU :  SerialEventoU) = \n                nuevoEvento\n                    serEventoU.usuario\n                    serEventoU.serEvento.nombre\n                    serEventoU.serEvento.json\n                    serEventoU.serEvento.tipo\n        \n            let serializarDataEvento (evento : DataEvento) =\n                let  name, ttype, obj = DiscUnion.caseTuple evento\n                let  tname            = ttype |> getTypeName\n                let  ser              = SerializadorEventos.obtenerSerializador tname\n                {   nombre            = name\n                    tipo              = tname\n                    json              = fst ser obj\n                    data              = obj\n                }\n        \n            let guardarEventoSerial  serEventoU =\n                guardarEventoSerialU serEventoU\n                |>> fun nevento  -> { nevento = nevento ; serEventoU = serEventoU }\n        \n            let serializarEvento (evento:Evento) =\n                evento.aliadoO \n                |> Option.map(fun (IdAliado usuario) -> { usuario = usuario ; serEvento  = serializarDataEvento evento.data })\n                |> Result.ofOption (fun () -> sprintf \"Aliado es Nulo para evento %A\" evento)\n                |> Rsl.ofResult\n        \n            let intentarEventoSerial ev =\n                serialU2TipoDatos ev\n                |>  manejadorGenerico\n                |>> snd\n                |>  Rsl.absorbR\n                |>> ignore\n        \n            let ejecutarEventoNuevo ev =\n                serializarEvento ev\n                >>= EA.tee intentarEventoSerial\n                >>= guardarEventoSerial\n                >>= fun inp ->\n                        ejecutarEventoSerial inp\n                        >>= EA.tee (fun out ->  enviarMensaje \"\" inp.serEventoU.usuario (sprintf \"%A\" out) \"\")\n        \n            let ejecutarDataEventoNuevo  claims de =\n                ObtenerEstado.obtenerAliado claims\n                |>> fun al ->\n                        {\n                            Evento.nevento = 0L\n                            Evento.aliadoO = Some al.id\n                            data           = de\n                        }\n                >>= ejecutarEventoNuevo\n        \n            let obtenerClaim claim claims =\n                claims \n                |>  Array.tryFind(fun (n,v) -> n = claim) \n                |>  Option.map snd\n        \n            let enviarBienvenida aid = \n                ObtenerEstado.obtenerAliado aid\n                >>= fun (aliado:Aliado) -> eff {\n                    for contacto in aliado.contactos do\n                        match contacto with\n                        | CorreoElectronico correo -> \n                            match correo.enviado with\n                            | None -> do! Correo.enviarBienvenida aliado correo\n                            |_-> ()\n                        | _ -> ()\n                }\n                \n            let crearRegistroNuevo (aid:IdAliado) claims (modelo:Modelo) = eff {\n                if  aid.Id    = \"admin\" || (modelo.aliados |> Array.exists (fun al -> al.id = aid)) then return None else\n                let datos     = \n                    { Default.value<DatosPersonales> with \n                        nombre1         = claims |> obtenerClaim \"given_name\"                                              |> Option.defaultValue \"\"\n                        apellido1       = claims |> obtenerClaim \"family_name\"                                             |> Option.defaultValue \"\"\n                        fechaNacimiento = claims |> obtenerClaim \"extension_DateOfBirth\" |> Option.bind ParseO.parseDateO2 |> Option.defaultValue System.DateTime.MinValue\n                    }\n                let correo    = \n                    { Default.value<CorreoElectronico> with \n                        email           = claims |> obtenerClaim \"emails\" |> Option.defaultValue \"\"\n                    }\n                let direccion    = \n                    { Default.value<Direccion> with \n                        linea1          = claims |> obtenerClaim \"streetAddress\" |> Option.defaultValue \"\"\n                        ciudad          = claims |> obtenerClaim \"city\"          |> Option.defaultValue \"\"\n                        estado          = claims |> obtenerClaim \"state\"         |> Option.bind Estado    .tryParse |> Option.defaultValue (OtroS      \"\")\n                        zonaPostal      = claims |> obtenerClaim \"postalCode\"    |> Option.bind ZonaPostal.tryParse |> Option.defaultValue (ZonaPostal \"\")\n                        pais            = claims |> obtenerClaim \"country\"       |> Option.bind Pais      .tryParse |> Option.defaultValue (OtroP      \"\")\n                        authorizeIdR    = Error \"\"\n                    }\n                let contactos = [| CorreoElectronico correo ; Direccion direccion |]\n                let referidoPor = \n                    claims \n                    |> obtenerClaim \"referidoPor\" \n                    |> Option.bind (function \"\" -> None | s -> Some s)\n                    |> Option.bind (fun ref -> modelo.aliados |> Seq.tryFind(fun padre -> padre.id.Id = ref))\n                    |> Option.map  (fun padre -> padre.id)\n                do! Log.logf \"referidoPor = %A\" referidoPor\n                //Correo.enviarBienvenida aliado // (**) mover afuera\n                return Some\n                    {\n                        Evento.nevento = 0L\n                        Evento.aliadoO = Some aid\n                        data           = DataEvento.RegistroNuevo(aid, datos, referidoPor, contactos)\n                    }\n            }\n        \n            let agregarUsuarioSiEsNuevo claims1 claims =\n                ObtenerEstado.obtenerEstado()\n                >>= crearRegistroNuevo claims1 claims        \n                |>  bindO ejecutarEventoNuevo                \n                |>  bindO (fun _ -> enviarBienvenida claims1)\n                |>  bindO (Log.logf \"agregarUsuarioSiEsNuevo: %A\")\n                |>> Option.iter id\n        \n            let obtenerListaDocs aid = eff {\n                let! al = ObtenerEstado.obtenerAliado aid\n                return!   Eventos.obtenerListaDocs al.id\n            }\n        \n            let obtenerInfluyente (inf:string) =\n                ObtenerEstado.obtenerEstado()\n                |>> fun es -> \n                        let infO = Some (inf.Trim().ToLower())\n                        es.aliados \n                        |> Seq.tryFind (fun al -> al.influyente = infO )\n                        |> Result.ofOption (fun () -> sprintf \"Influyente no encontrado : %s\" inf)\n                |>  Rsl.absorbR\n        \n            let obtenerIdInfluyente inf =\n                obtenerInfluyente   inf\n                |>> fun al -> al.id.Id\n        \n        \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper/WindowsAzure.Storage/lib/net45/Microsoft.WindowsAzure.Storage.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper/Newtonsoft.Json/lib/net45/Newtonsoft.Json.dll\"\n        module Azure =\n            open System\n            open System.IO\n        //    open Microsoft.Azure\n        //    open Microsoft.Azure.Storage\n        //    //open Microsoft.Azure.Storage.Table\n        //    open Microsoft.Azure.Storage.Queue\n        //    open Microsoft.Azure.Storage.Blob\n        //    open Microsoft.Azure.Storage.Core\n            open Microsoft.WindowsAzure.Storage\n            open Microsoft.WindowsAzure.Storage.Queue\n            open Microsoft.WindowsAzure.Storage.Table\n        \n            let storageSetting      =  \"APPSETTING_AzureWebJobsStorage\"\n            let aliadosTableName    =  \"Aliados\"\n            let eventosTableName    =  \"Eventos\"\n            let mensajesTableName   =  \"Mensajes\"\n            let estadoTableName     =  \"Modelo\"\n            let transacTableName    =  \"Transacciones\"\n            let archivosTableName   =  \"Archivos\"\n            let correosQueueName    =  \"correos\"\n            let mensajesQueueName   =  \"mensajes\"\n            let storageAccountE()   = variableAmbienteE storageSetting |>> CloudStorageAccount.Parse\n            let storageAccountC()   = variableAmbienteE storageSetting |>> CloudStorageAccount.Parse\n            let tableClientE   ()   = storageAccountC() |>> fun storageAccount -> storageAccount.CreateCloudTableClient()\n            let queueClientE   ()   = storageAccountE() |>> fun storageAccount -> storageAccount.CreateCloudQueueClient()\n            let blobClientE    ()   = storageAccountE() |>> fun storageAccount -> storageAccount.CreateCloudBlobClient ()\n            let fileClientE    ()   = storageAccountC() |>> fun storageAccount -> storageAccount.CreateCloudFileClient ()\n            let aliadosTableE  ()   = tableClientE   () |>> fun tableClient    -> tableClient.GetTableReference(aliadosTableName )\n            let mensajesTableE ()   = tableClientE   () |>> fun tableClient    -> tableClient.GetTableReference(mensajesTableName)\n            let eventosTableE  ()   = tableClientE   () |>> fun tableClient    -> tableClient.GetTableReference(eventosTableName )\n            let estadoTableE   ()   = tableClientE   () |>> fun tableClient    -> tableClient.GetTableReference(estadoTableName  )\n            let transacTableE  ()   = tableClientE   () |>> fun tableClient    -> tableClient.GetTableReference(transacTableName )\n            let archivosTableE ()   = tableClientE   () |>> fun tableClient    -> tableClient.GetTableReference(archivosTableName)\n            let queueCorreosE  ()   = queueClientE   () |>> fun queueClient    -> queueClient.GetQueueReference(correosQueueName )\n            let queueMensajesE ()   = queueClientE   () |>> fun queueClient    -> queueClient.GetQueueReference(mensajesQueueName)\n        \n            type Correo = {\n                Subject       : string\n                Content       : string\n                CustomerEmail : string\n            }\n        \n            type Mensaje = {\n                remitente     : string\n                destinatario  : string\n                tema          : string\n                contenido     : string\n            }\n        \n            let enviarCorreoAzure (recipiente:string) (tema:string) (contenido:string)  = \n                {   Subject       = tema\n                    Content       = contenido \n                    CustomerEmail = recipiente\n                }\n                |> Newtonsoft.Json.JsonConvert.SerializeObject\n                |> CloudQueueMessage\n                |> (fun m -> queueCorreosE() >>= fun queueCorreos -> queueCorreos.AddMessageAsync m |> Async.AwaitTask |> Asy.ofAsync)\n        \n            let enviarMensaje (mensaje:Mensaje) = \n                mensaje\n                |> Newtonsoft.Json.JsonConvert.SerializeObject\n                |> CloudQueueMessage \n                |> (fun m -> queueMensajesE() >>= fun queueMensajes -> queueMensajes.AddMessageAsync m |> Async.AwaitTask |> Asy.ofAsync)\n        \n            type AliadoE(id, aliado: string) =\n                inherit TableEntity(partitionKey=\"Aliado\", rowKey=id)\n                new() = AliadoE(null, null)\n                member val Aliado = aliado with get, set\n        \n            type MensajeE(mensaje: Mensaje, id) =\n                inherit TableEntity(partitionKey= mensaje.destinatario, rowKey=id)\n                new(mensaje) = MensajeE(mensaje, System.Guid.NewGuid().ToString())\n                new() = MensajeE(  {    remitente     = \"\"\n                                        destinatario  = \"\"\n                                        tema          = \"\"\n                                        contenido     = \"\"\n                                    }  )\n                member val id           = id                    with get, set\n                member val Remitente    = mensaje.remitente     with get, set\n                member val Destinatario = mensaje.destinatario  with get, set\n                member val Tema         = mensaje.tema          with get, set\n                member val Contenido    = mensaje.contenido     with get, set\n        \n            type TransacE(transac: Transaccion) =\n                inherit TableEntity(partitionKey= transac.idAliado.Id, rowKey=transac.transaccion)\n                new() = TransacE({  fechaPago      = System.DateTime.MinValue\n                                    ano            = 0\n                                    periodo        = 0\n                                    monto          = 0\n                                    idAliado       = IdAliado \"\"\n                                    concepto       = ConceptoPago.Otro \"\"\n                                    transaccion    = \"-\"\n                                    statusTran     = \"\"\n                            })\n                member val fechaPago      = transac.fechaPago             with get, set\n                member val ano            = transac.ano                   with get, set\n                member val periodo        = transac.periodo               with get, set\n                member val monto          = transac.monto                 with get, set\n                member val idAliado       = transac.idAliado.Id           with get, set\n                member val concepto       = transac.concepto.ToString()   with get, set\n                member val transaccion    = transac.transaccion           with get, set\n                member val statusTran     = transac.statusTran            with get, set\n        \n            type ArchivoE(archivo: Archivo) =\n                inherit TableEntity(partitionKey= archivo.idAliado.Id, rowKey= archivo.nombre)\n                new() = ArchivoE({  idAliado    = IdAliado \"\"\n                                    tipo        = TipoArchivo.Otro \"\"\n                                    nombre      = \"\"\n                                    modificado  = System.DateTime.MinValue\n                                    tamano      = 0L\n                                    status      = StatusArchivo.Subido\n                                    comentario  = \"\"\n                            })\n                member val modificado = archivo.modificado           with get, set\n                member val tamano     = archivo.tamano               with get, set\n                member val comentario = archivo.comentario           with get, set\n                member val tipo       = archivo.tipo  .ToString()    with get, set\n                member val status     = archivo.status.ToString()    with get, set\n        \n            type EstadoE(n:int64, estado: string) =\n                inherit TableEntity(partitionKey= \"EstadoActual\", rowKey= \"Estado\")\n                new() = EstadoE(0L, \"\")\n                member val nevento      = n      with get, set\n                member val estado       = estado with get, set\n        \n            type EstadoNE(n:int64) =\n                inherit TableEntity(partitionKey= \"EstadoActual\", rowKey= \"EstadoActual\")\n                new() = EstadoNE(0L)\n                member val nevento      = n      with get, set\n        \n            type EventoE(n:int64, usuario:string, nombre:string, evento:string, tipo:string) =\n                inherit TableEntity(partitionKey= \"Evento\", rowKey= sprintf \"%08d\" n)\n                new() = EventoE(0L, \"\", \"\", \"\", \"\")\n                member val nevento      = n       with get, set\n                member val usuario      = usuario with get, set\n                member val nombre       = nombre  with get, set\n                member val tipo         = tipo    with get, set\n                member val evento       = evento  with get, set\n        \n            type EventoNE(n:int64) =\n                inherit TableEntity(partitionKey= \"Actual\", rowKey= \"Actual\")\n                new() = EventoNE(0L)\n                member val nevento      = n      with get, set\n        \n            let executeE      tbE  op = tbE() >>= fun (tb:CloudTable) -> tb.ExecuteAsync      op |> Async.AwaitTask |> Asy.ofAsync\n            let executeQueryE tbE (op:TableQuery<_>) = tbE() >>= fun (tb:CloudTable) -> tb.ExecuteQuerySegmentedAsync(op, null) |> Async.AwaitTask |> Asy.ofAsync\n        \n            let guardarAliado id contenido = \n                TableOperation.InsertOrReplace <| AliadoE(id, contenido)\n                |> executeE aliadosTableE\n        \n            let guardarMensaje mensaje =\n                TableOperation.InsertOrReplace <| MensajeE(mensaje)\n                |> executeE mensajesTableE\n        \n            let guardarTransac transac =\n                TableOperation.InsertOrReplace <| TransacE(transac)\n                |> executeE transacTableE\n        \n            let guardarTransacs (ts: Transaccion seq) = \n                ts \n                |> traverseSeq guardarTransac\n                |>> Seq.iter ignore\n        \n            let obtenerTransacs() = \n                TableQuery<TransacE>()\n                |>  executeQueryE transacTableE\n                |>> (Seq.map (fun tr -> {  \n                                    fechaPago      = tr.fechaPago  \n                                    ano            = tr.ano        \n                                    periodo        = tr.periodo    \n                                    monto          = tr.monto      \n                                    idAliado       = IdAliado tr.idAliado   \n                                    concepto       = ConceptoPago.tryParse tr.concepto |> Option.defaultValue (ConceptoPago.Otro \"\")\n                                    transaccion    = tr.transaccion\n                                    statusTran     = tr.statusTran \n                            }\n                ) >> Seq.toArray)\n        \n            let guardarArchivo archivo =\n                TableOperation.InsertOrReplace <| ArchivoE(archivo)\n                |> executeE archivosTableE\n        \n            let obtenerArchivos() = \n                TableQuery<ArchivoE>()\n                |>  executeQueryE archivosTableE\n                |>> (Seq.map (fun tr -> {  \n                                    idAliado    = IdAliado tr.PartitionKey\n                                    nombre      = tr.RowKey\n                                    modificado  = tr.modificado\n                                    tamano      = tr.tamano    \n                                    comentario  = tr.comentario\n                                    tipo        = tr.tipo   |> TipoArchivo  .Parse\n                                    status      = tr.status |> StatusArchivo.Parse \n                            }\n                ) >> Seq.toArray)\n        \n            let obtenerAliados() =\n                TableQuery<AliadoE>()\n                |>  executeQueryE aliadosTableE\n                |>> (Seq.map (fun al -> al.Aliado) >> Seq.toArray)\n        \n            let borrarAliado aid =\n                TableOperation.Delete(AliadoE(aid, \"\", ETag = \"*\") )\n                |> executeE aliadosTableE\n        \n            let guardarEstado (n:int64) s =\n                let op1 = TableOperation.InsertOrReplace <| EstadoE( n, s)\n                let op2 = TableOperation.InsertOrReplace <| EstadoNE(n   )\n                executeE estadoTableE op1\n                >>= fun _ -> executeE estadoTableE op2\n        \n            let ultimoEstado() =\n                TableQuery<EstadoNE>()\n                  .Where(\n                      TableQuery.CombineFilters(\n                          TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"EstadoActual\"),\n                          TableOperators.And,\n                          TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.Equal,\"EstadoActual\")\n                  ))\n                |> executeQueryE estadoTableE\n                |>> (Seq.tryHead >> Option.map (fun e -> e.nevento) )\n        \n            let obtenerEstado() =\n                TableQuery<EstadoE>()\n                  .Where(\n                      TableQuery.CombineFilters(\n                          TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"EstadoActual\"),\n                          TableOperators.And,\n                          TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.Equal,\"Estado\")\n                  ))\n                |> executeQueryE estadoTableE\n                |>> (Seq.tryHead >> Option.map (fun e -> e.nevento, e.estado) )\n        \n            let ultimoEvento() = //obtenerTextoArchivo archivoUltimoEvento |> Option.bind ParseO.parseInt64O \n                TableQuery<EventoNE>()\n                  .Where(\n                      TableQuery.CombineFilters(\n                          TableQuery.GenerateFilterCondition(\"PartitionKey\", QueryComparisons.Equal, \"Actual\"),\n                          TableOperators.And,\n                          TableQuery.GenerateFilterCondition(\"RowKey\", QueryComparisons.Equal,\"Actual\")\n                  ))\n                |> executeQueryE eventosTableE\n                |>> (Seq.tryHead >> Option.map (fun e -> e.nevento) )\n        \n            let nuevoEvento (usuario:string) (nombre:string) (evento:string) (tipo:string) =\n                ultimoEvento()\n                |>> Option.defaultValue 0L\n                |>> (+) 1L\n                >>= fun nextEvento ->\n                    EventoE( nextEvento, usuario, nombre, evento, tipo)\n                    |>  TableOperation.InsertOrReplace\n                    |>  executeE eventosTableE\n                    |>> fun _ -> EventoNE(nextEvento   )\n                    |>> TableOperation.InsertOrReplace\n                    >>= executeE eventosTableE\n                    |>> fun _ -> nextEvento\n        \n            let getMimeO (name :string)=\n                match name.ToLower() with\n                | String.EndsWith \".pdf\"  _ -> Some \"application/pdf\"\n                | String.EndsWith \".rtf\"  _ -> Some \"application/rtf\"\n                | String.EndsWith \".pbm\"  _ -> Some \"image/x-portable-bitmap\"\n                | String.EndsWith \".bmp\"  _ -> Some \"image/bmp\"\n                | String.EndsWith \".gif\"  _ -> Some \"image/gif\"\n                | String.EndsWith \".tif\"  _\n                | String.EndsWith \".tiff\" _ -> Some \"image/tiff\"\n                | String.EndsWith \".png\"  _ -> Some \"image/png\"\n                | String.EndsWith \".jpe\"  _ \n                | String.EndsWith \".jpeg\" _ \n                | String.EndsWith \".jpg\"  _ -> Some \"image/jpeg\"\n                | String.EndsWith \".png\"  _ -> Some \"image/png\"\n                | String.EndsWith \".html\" _ -> Some \"text/html\"\n                | _-> None\n        \n            let obtenerListaDocs (IdAliado alid) = eff {\n                let! bcli      = blobClientE()\n                let  container = bcli.GetContainerReference \"documentos\"\n                let  dir       = container.GetDirectoryReference  alid\n                let! blobs     = dir.ListBlobsSegmentedAsync   null |> Async.AwaitTask |> Asy.ofAsync\n                let! archivos  = obtenerArchivos() |>> Array.filter (fun a -> a.idAliado.Id = alid)\n                return\n                    blobs.Results\n                    |> Seq.choose (fun blob ->\n                        blob.Uri.GetComponents(UriComponents.Path, UriFormat.Unescaped) \n                        |> String.splitInTwoO (alid + \"/\")\n                        |> Option.map snd\n                        |> Option.map (fun nombre ->\n                            let ref = dir.GetBlockBlobReference nombre\n                            ref.FetchAttributes()\n                            archivos\n                            |> Seq.tryFind (fun a -> a.nombre = nombre) \n                            |> Option.map  (fun a ->\n                                if a.modificado = ref.Properties.LastModified.Value.DateTime && a.tamano = ref.Properties.Length then a else\n                                { a with \n                                    modificado  = ref.Properties.LastModified.Value.DateTime\n                                    tamano      = ref.Properties.Length\n                                    status      = StatusArchivo.Cambiado\n                                }\n                            )\n                            |> Option.defaultWith ( fun () -> {  \n                                idAliado    = IdAliado alid\n                                nombre      = nombre\n                                modificado  = ref.Properties.LastModified.Value.DateTime\n                                tamano      = ref.Properties.Length\n                                comentario  = \"\"\n                                tipo        = TipoArchivo.Otro \"-\"\n                                status      = StatusArchivo.Subido\n                            })\n                        )\n                    )\n                    |> Seq.toArray\n            }\n        \n            let subirBlob fromFile toContainerName toFile =\n                blobClientE()\n                >>= fun bcli ->\n                        bcli                          .GetContainerReference toContainerName\n                        |>  fun container -> container.GetBlockBlobReference toFile\n                        |>  fun blob      -> blob     .UploadFromFileAsync   fromFile |> Async.AwaitTask |> Asy.ofAsync |>> fun () -> blob\n                        >>= fun blob      -> eff { \n                                match getMimeO toFile with\n                                | None -> ()\n                                |   Some mime ->    blob.Properties.ContentType <- mime\n                                                    do! blob.SetPropertiesAsync() |> Async.AwaitTask |> Asy.ofAsync\n                            }\n        \n            let obtenerPropiedadesBlob toContainerName toFile = eff {\n                let! bcli = blobClientE()\n                let  blob =\n                        bcli                         .GetContainerReference toContainerName\n                        |> fun container -> container.GetBlockBlobReference toFile\n                let! exists = blob.ExistsAsync() |> Async.AwaitTask |> Asy.ofAsync\n                return if exists then Some blob.Properties else None\n            }\n        \n            let obtenerPropiedadesArchivo shareName toFile = eff {\n                let! fcli = fileClientE   () \n                let  file =\n                        fcli                 .GetShareReference        shareName\n                        |> fun share -> share.GetRootDirectoryReference()\n                        |> fun dir   -> dir  .GetFileReference         toFile\n                let! exists = file.ExistsAsync() |> Async.AwaitTask |> Asy.ofAsync\n                return if exists then Some file.Properties else None\n            }\n        \n            let subirArchivo fromFile shareName toFile =\n                fileClientE   () \n                >>= fun fcli ->\n                        fcli                 .GetShareReference        shareName\n                        |> fun share -> share.GetRootDirectoryReference()\n                        |> fun dir   -> dir  .GetFileReference         toFile\n                        |> fun file  -> file .UploadFromFileAsync    fromFile |> Async.AwaitTask |> Asy.ofAsync\n        \n        \n        //    let setAmbiente() =\n        //        {\n        //            new IAmbiente with \n        //                member __.UltimoEvento      ()  = ultimoEvento()\n        //                member __.UltimoEstado      ()  = ultimoEstado()\n        //                member __.LeerTipos         ()  = [||]   \n        //                member __.LeerEventosTipos  ()  = [||]   \n        //                member __.NuevoEvento       (usuario:string) (nombre:string) (evento:string) (tipo:string) = nuevoEvento usuario nombre evento tipo\n        //                member __.LeerEventos       n   = AsyncResultM.errorMsgf \"ambienteAzure.LeerEventos not implemented\"\n        //                member __.GuardarEstado     n s = guardarEstado n s\n        //                member __.ObtenerEstado     ()  = obtenerEstado\n        //                member __.GuardarAliado     i s = guardarAliado i s\n        //                member __.ObtenerAliados    ()  = obtenerAliados\n        //                member __.NombreAmbiente    ()  = \"azure\"\n        //                member __.CarpetaRaiz       ()  = carpeta\n        //                member __.EnviarCorreo    r t c = enviarCorreoAzure r t c\n        //                member __.EnviarMensaje d r t c = enviarMensaje  { \n        //                                                        remitente     = d \n        //                                                        destinatario  = r \n        //                                                        tema          = t \n        //                                                        contenido     = c \n        //                                                    }\n        //                member __.ObtenerTransacciones      id = AsyncResultM.errorMsgf \"Ambiente.ObtenerTransacciones: not implemented\"\n        //                member __.ObtenerMensajes           id = AsyncResultM.errorMsgf \"Ambiente.ObtenerMensajes: not implemented\"\n        //                member __.ObtenerListaDocs          id = obtenerListaDocs id\n        //                member __.VariableAmbiente           v = System.Environment.GetEnvironmentVariable v\n        //                member __.Prepare                   () = Authorize.prepareAuthorizeNetEnvironment()\n        //        }\n        //\n        \n            let invokeE nameF (f:'a->Eff<'H, 'b>) (p:'a) =\n                try \n                    f p |> Ok\n                with e ->\n                    Error (sprintf \"Exception! %s %s\" <| nameF p <| e.ToString())\n                |> Rsl.ofResult\n                |> join\n        \n            let invokeR nameF (f:'a->'b) (p:'a) =\n                try \n                    f p |> Ok\n                with e ->\n                    Error (sprintf \"Exception! %s %s\" <| nameF p <| e.ToString())\n                |> Rsl.ofResult\n        \n            let invokeVerboseR nameF (f:'a->'b) (p:'a) = eff {\n                try \n                    do! Log.logf \"invokeVerboseR: %s\" (nameF p)\n                    let r = f p \n                    do! Log.logf \"%s %A\" (nameF p) r\n                    return r\n                with e ->\n                    return!\n                        Error (sprintf \"Exception! %s %s\" <| nameF p <| e.ToString())\n                        |> Rsl.ofResult\n            }\n        \n            let invokeL nameF (f:'a->'b) (p:'a) =\n                try \n                    f p |> Log.logf \"%s %A\" (nameF p) //|>> ignore \n                with e ->\n                    Error (sprintf \"Exception! %s %s\" <| nameF p <| e.ToString())\n                    |> Rsl.ofResult\n        \n            let invokeLE nameF (f:'a->Eff<'H, 'b>) (p:'a) =\n                try \n                    f p \n                    >>= Log.logf \"%s %A\" (nameF p) \n                    |>  Ok\n                with e ->\n                    Error (sprintf \"Exception! %s %s\" <| nameF p <| e.ToString())\n                |> Rsl.ofResult\n                |> join\n        \n        [< AutoOpen >]\n        module AzureHandler =\n            open Authorize\n            open AuthorizeNet\n            open AuthorizeNet.Api.Controllers\n            open AuthorizeNet.Api.Contracts.V1\n            open AuthorizeNet.Api.Controllers.Bases\n            open Azure\n        \n        \n            type AR<'V> = Eff<AzureReader,'V>\n            and  AzureReader(?environment : string) =\n                let manejadores = System.Collections.Generic.Dictionary<Eventos.TipoDatos, Eventos.ManejadorDatos<obj,AzureReader>>()\n                let manejadorGenerico (msg:Eventos.ObjetoDatos<obj>) : Eventos.ResultadoManejador<AzureReader> =\n                        match manejadores.TryGetValue msg.tipoDatos with\n                        | false, _         -> failwithf \"No Handler for message: %A \\n handlers: [%s]\" msg (manejadores.Keys |> Seq.map (sprintf \"%A\") |> String.concat \"\\n\")\n                        | true , manejador -> manejador.manejadorF msg\n                do SerializadorEventos.registrarEventos (fun m -> manejadores.Add(m.tipoDatos, m))\n        \n                let prepareEnvironment env id transactionKey =\n                    ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment         <- env\n                    ApiOperationBase<ANetApiRequest, ANetApiResponse>.MerchantAuthentication <- \n                        new merchantAuthenticationType( name            = id\n                                                    ,   ItemElementName = ItemChoiceType.transactionKey\n                                                    ,   Item            = transactionKey )\n                let mutable environmentNameO = None\n                let prepararE = eff {\n                    let! env =  eff {\n                                    match environment with\n                                    | Some v -> return v.ToUpper()\n                                    |_       -> return! variableAmbienteE \"Authorize_Environment\"\n                                }\n                    let  environment, environmentName, idV, tranKeyV =\n                        match env with\n                        | \"P\" ->(   AuthorizeNet.Environment.PRODUCTION\n                                ,   \"PRODUCTION\"\n                                ,   \"Authorize_Id_Production\"          \n                                ,   \"Authorize_Transaction_Production\" \n                                )\n                        |_->    (   AuthorizeNet.Environment.SANDBOX\n                                ,   \"SANDBOX\"\n                                ,   \"Authorize_Id_Sandbox\"          \n                                ,   \"Authorize_Transaction_Sandbox\" \n                                )\n                    let! id      = variableAmbienteE idV\n                    let! tranKey = variableAmbienteE tranKeyV\n                    environmentNameO <- Some environmentName\n                    prepareEnvironment environment id tranKey\n                }\n        \n                let obtenerTransaccionesMem, resetTransMem = \n                    let mutable transO = None\n                    fun() -> eff {\n                        match transO with\n                        | Some trans -> return trans\n                        | None       -> let!   trans = Azure.obtenerTransacs()\n                                        transO <- Some trans\n                                        let!   modelo = ObtenerEstado.obtenerEstado()\n                                        let  aliados  = Aliado.actualizarAliados trans modelo\n                                        if aliados <> modelo.aliados then\n                                            let! n = ObtenerEstado.ultimoEstadoE() |>> Option.defaultValue 0L\n                                            do! ObtenerEstado.guardarEstado (n + 1L) { modelo with aliados = aliados }\n                                        return trans\n                    }, (fun () -> transO <- None)\n        \n                interface Reader.Reader<AzureReader> \n                interface Log.Log<string> \n                interface Rsl.Rsl<string>\n                interface Asy.Asy\n                interface VariableAmbienteI with\n                    member __.getVar          v  = System.Environment.GetEnvironmentVariable v\n                    member __.CarpetaRaiz     () = @\"D:\\home\\site\\wwwroot\"\n                interface Eventos        .EventosI<AzureReader> with\n                    member __.ManejadorGenerico                  msg = manejadorGenerico msg\n                    member __.GuardarArchivo                     ar  = invokeLE  (fun _ -> \"GuardarArchivo\"    )  Azure.guardarArchivo ar\n                    member __.ObtenerListaDocs                   ida = invokeE   (fun _ -> \"ObtenerListaDocs\"  )  Azure.obtenerListaDocs ida\n                interface Correo          .EmailI<AzureReader>  with\n                    member __.SendEmail                        r t c = invokeE  (fun _ -> \"SendEmail\"          ) (Azure.enviarCorreoAzure r t      ) c\n                interface ObtenerEstado   .EstadoI<AzureReader> with\n                    member __.UltimoEstado                        () = invokeE  (fun _ -> \"UltimoEstado\"       )  Azure.ultimoEstado                 ()\n                    member __.GuardarAliado                     id s = invokeLE (fun _ -> \"GuardarAliado\"      ) (Azure.guardarAliado id  :_->AR<_>) s\n                    member __.GuardarEstado                      n s = invokeLE (fun _ -> \"GuardarEstado\"      ) (Azure.guardarEstado  n  :_->AR<_>) s\n                    member __.ObtenerEstado                       () = invokeE  (fun _ -> \"ObtenerEstado\"      )  Azure.obtenerEstado                ()\n                    member __.ObtenerAliados                      () = invokeE  (fun _ -> \"ObtenerAliados\"     )  Azure.obtenerAliados               ()\n                    member __.LeerTransacciones                   () = invokeE  (fun _ -> \"LeerTransacciones\"  )  obtenerTransaccionesMem            ()\n                    member __.SalvarTransacciones                 ts = invokeE  (fun _ -> \"SalvarTransacciones\")  Azure.guardarTransacs              ts\n                interface ManejadorEventos.ManejadorI<AzureReader> with\n                    member __.NuevoEvento usuario nombre evento tipo = invokeE  (fun _ -> \"NuevoEvento\"   ) (Azure.nuevoEvento   usuario nombre evento) tipo\n                    member __.UltimoEvento                        () = invokeE  (fun _ -> \"UltimoEvento\"  )  Azure.ultimoEvento                 ()\n                    member __.EnviarMensaje                  d r t c = invokeE  (fun _ -> \"EnviarMensaje\" )  Azure.enviarMensaje { \n                                                                                                                            remitente     = d \n                                                                                                                            destinatario  = r \n                                                                                                                            tema          = t \n                                                                                                                            contenido     = c \n                                                                                                                        }\n                interface AuthorizeI<AzureReader> with\n                    member __.execute controller =  controller.Execute()\n                                                    controller.GetApiResponse()\n                    member __.prepare         () = if environmentNameO.IsNone then prepararE else rtn ()\n                member __.RefrescarTransacciones() : Eff<AzureReader,_> = eff {\n                    do!  Authorize.actualizarTransacciones   None\n                    resetTransMem                            ()\n                    ObtenerEstado.resetEstadoActual          ()\n                    let! trans = ObtenerEstado.leerTransaccsE() \n                    ()\n                }\n        \n            let reader = AzureReader()\n            let mutable logger : string -> unit = print\n        \n            let run   (eff:Eff<_,_>) = async {\n                try\n                    return!\n                        eff\n                        |> Reader.readerHandler reader\n                        |> Log.loggerLogHandler logger\n                        |> Rsl.rslHandler \n                        |> Asy.asyncHandler\n                        |> Eff.run<AzureReader,_>\n                with e -> \n                    return Error (sprintf \"Eff Exception: %s %s\" e.Message e.StackTrace)\n            }\n        \n            let printEff (log:string -> unit) eff = \n                run eff\n                |> Async.map \n                   (function\n                    | Ok ()   -> ()\n                    | Error m -> log m)\n                |> Async.iterA id\n        \n        \n        \n        \n        \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Fake.IO.FileSystem\\lib\\net46\\Fake.IO.FileSystem.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.IdentityModel.Tokens\\lib\\net461\\Microsoft.IdentityModel.Tokens.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.Protocols\\lib\\net461\\Microsoft.IdentityModel.Protocols.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.Protocols.OpenIdConnect\\lib\\net461\\Microsoft.IdentityModel.Protocols.OpenIdConnect.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.Logging\\lib\\net461\\Microsoft.IdentityModel.Logging.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\test\\Microsoft.IdentityModel.JsonWebTokens\\lib\\net461\\Microsoft.IdentityModel.JsonWebTokens.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Configuration.ConfigurationManager/lib/net461/System.Configuration.ConfigurationManager.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.Cryptography.ProtectedData/lib/net461/System.Security.Cryptography.ProtectedData.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.Permissions/lib/net461/System.Security.Permissions.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.AccessControl/lib/net461/System.Security.AccessControl.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Buffers/lib/netstandard1.1/System.Buffers.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Numerics.Vectors/lib/net46/System.Numerics.Vectors.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Runtime.CompilerServices.Unsafe/lib/netstandard1.0/System.Runtime.CompilerServices.Unsafe.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Security.Principal.Windows/lib/net461/System.Security.Principal.Windows.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages/prozper0/System.Memory/lib/netstandard1.1/System.Memory.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages\\test2\\System.IdentityModel\\lib\\net461\\System.IdentityModel.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation/packages\\test2\\System.IdentityModel.Tokens.Jwt\\lib\\net461\\System.IdentityModel.Tokens.Jwt.dll\"\n        module TokenValidate =\n            open System.IO\n            open Microsoft.IdentityModel.Tokens\n            open System.ComponentModel\n            open System\n            open System.Security.Cryptography\n            open System.Text\n            open System.Configuration\n            open Microsoft.IdentityModel.Protocols.OpenIdConnect\n            open System.IdentityModel.Tokens.Jwt\n        \n        /// https://prozper.b2clogin.com/tfp/prozper.onmicrosoft.com/B2C_1_Registrarse/discovery/v2.0/keys\n            let e      = \"AQAB\"\n            let n      = \"tVKUtcx_n9rt5afY_2WFNvU6PlFMggCatsZ3l4RjKxH0jgdLq6CScb0P3ZGXYbPzXvmmLiWZizpb-h0qup5jznOvOr-Dhw9908584BSgC83YacjWNqEK3urxhyE2jWjwRm2N95WGgb5mzE5XmZIvkvyXnn7X8dvgFPF5QwIngGsDG8LyHuJWlaDhr_EPLMW4wHvH0zZCuRMARIJmmqiMy3VD4ftq4nS5s8vJL0pVSrkuNojtokp84AtkADCDU_BUhrc2sIgfnvZ03koCQRoZmWiHu86SuJZYkDFstVTVSR0hiXudFlfQ2rOhPlpObmku68lXw-7V-P7jwrQRFfQVXw\"\n            \n            let addPadding (s:string) = s.Replace('_', '/').Replace('-', '+').PadRight(s.Length + (s.Length * 3) % 4, '=')\n        \n            let rsa = new RSACryptoServiceProvider()\n            rsa.ImportParameters(\n                    new RSAParameters(\n                        Exponent = Convert.FromBase64String (addPadding e)\n                      , Modulus  = Convert.FromBase64String (addPadding n)\n                    ))\n        \n        \n            let validate(token:string) =\n                let validationParameters = TokenValidationParameters(   ValidateAudience  =  false\n                                                                      , ValidateIssuer    =  false\n                                                                      , ValidateLifetime  =  true\n                                                                      , IssuerSigningKey  =  RsaSecurityKey rsa\n                                                                    )\n                let handler = JwtSecurityTokenHandler()\n                try\n                    match handler.ValidateToken(token, validationParameters) with\n                    | principal, jwt -> Ok principal\n                with e -> Error e.Message\n        \n            //match validate bearer with\n            //| Ok principal -> \n            //    //principal.Identities |> Seq.iter printObj\n            //    principal.Claims     |> Seq.map (fun c -> (c.Type, c.Value) ) |> Seq.toArray |> printObj\n            //| Error msg -> print msg\n        \n        \n        module Rpc0 =\n            open WebSharper\n            open WebSharper.JavaScript\n        \n            [< JavaScript >]\n            let serverEndPoint = \n                lazy \n                    if IsClient then \n                        if JS.Window.Location.Protocol = \"http:\" \n                        then \"http://localhost:7071/api/\"\n                        else sprintf \"https://%s/api/\" JS.Window.Location.Host\n                    else     \n                        variableAmbienteE \"Website\" \n                        |>> sprintf \"https://%s/api/\"\n                        |>  AzureHandler.run\n                        |>  Async.RunSynchronously\n                        |>  Result.defaultValue \"https://aliados.prozper.com/api\"\n        \n            let obtenerUnions0 () =\n                ( DiscUnion.simple<Pais          >\n                , DiscUnion.simple<Estado        >\n                , DiscUnion.simple<TipoDireccion >\n                , DiscUnion.simple<TipoTelefono  >\n                , DiscUnion.simple<Genero        >\n                , DiscUnion.simple<TipoCuenta    >\n                , DiscUnion.simple<TipoTarjeta   >\n                , DiscUnion.simple<StatusAliado  >\n                , [| for m in System.Enum.GetValues(typeof<Mes>)                       do yield string m |]\n                , [| for i in System.DateTime.Now.Year..System.DateTime.Now.Year + 15  do yield        i |]\n                , DiscUnion.simple<TipoArchivo   >\n                , DiscUnion.simple<StatusArchivo >\n                )        \n        \n            open Azure\n            open AzureHandler\n        \n            let borrarFormaPago0 aid    idp = eff {\n                let! fps   = Authorize.obtenerFormasDePagoId   aid\n                let! res   = Authorize.borrarFormaPago         aid idp\n                let! docs  = ManejadorEventos.obtenerListaDocs aid\n                match fps |> Seq.tryFind (fun fp -> fp.authorizeIdR = Ok idp) with\n                | None -> ()\n                | Some fp ->\n                    let  pre = fp.cuentaPago.AutorizacionPre\n                    let  docsN = docs |> Array.choose(fun doc ->\n                                    match doc.status with\n                                    | Subido | Cambiado | Verificado | Rechazado when doc.nombre.StartsWith pre -> Some { doc with status = Cancelado }\n                                    |_-> None\n                                )\n                    if docsN.Length > 0 then\n                        let! _ = ActualizarArchivos(aid, docsN) |> ManejadorEventos.ejecutarDataEventoNuevo aid\n                        ()\n                return res\n            }\n        \n            type AR<'T> = Async<Result<'T, string>>\n            let aidClaim = \"http://schemas.microsoft.com/identity/claims/objectidentifier\"\n            let jobClaim = \"jobTitle\"\n            let jobAdmin = \"AdministradorPROZPER\"\n        \n            let check tk (aid:IdAliado) = \n                eff {\n                    let! principal    = TokenValidate.validate tk |> Rsl.ofResult\n                    let  claims       = principal.Claims |> Seq.toArray\n                    let tryClaim name = claims |> Seq.tryPick (fun cl -> if cl.Type = name then Some cl.Value else None)\n                    let esAdminL      = lazy (tryClaim jobClaim = Some jobAdmin)\n                    match tryClaim aidClaim with\n                    | Some id when id = aid.Id || esAdminL.Value -> return esAdminL\n                    | _  ->   \n                        do! Log.logf \"Claims %d\" claims.Length\n                        for cl in claims do\n                            do! Log.logf \"claim: %s = %s\" cl.Type cl.Value\n                        return! Result.Error \"No autorizado!\" |> Rsl.ofResult\n                } \n        \n            let adm = IdAliado \"\"\n        \n            let [< Rpc >] obtenerUnions                          () : AR<_> =                             invokeVerboseR(fun _ -> \"obtenerUnions\")  obtenerUnions0 () |> AzureHandler.run\n            let [< Rpc >] obtenerIdInfluyente                codigo : AR<_> =                             ManejadorEventos.obtenerIdInfluyente      codigo            |> AzureHandler.run\n            let [< Rpc >] obtenerEstadoParaUsuario tk aid           : AR<_> = check tk aid >>= (fun aL -> ObtenerEstado   .obtenerEstadoParaUsuario aid    aL.Value ) |> AzureHandler.run\n            let [< Rpc >] actualizarSubscripcion   tk aid    idp    : AR<_> = check tk aid >>= (fun _  -> Authorize       .actualizarSubscripcion   aid     idp     ) |> AzureHandler.run\n            let [< Rpc >] ejecutarDataEventoNuevo  tk aid    de     : AR<_> = check tk aid >>= (fun _  -> ManejadorEventos.ejecutarDataEventoNuevo  aid     de      ) |> AzureHandler.run\n            let [< Rpc >] agregarUsuarioSiEsNuevo  tk aid    claims : AR<_> = check tk aid >>= (fun _  -> ManejadorEventos.agregarUsuarioSiEsNuevo  aid     claims  ) |> AzureHandler.run\n            let [< Rpc >] obtenerFormasDePagoId    tk aid           : AR<_> = check tk aid >>= (fun _  -> Authorize       .obtenerFormasDePagoId    aid             ) |> AzureHandler.run\n            let [< Rpc >] registrarTarjeta         tk aid    p      : AR<_> = check tk aid >>= (fun _  -> Authorize       .registrarTarjeta         aid     p       ) |> AzureHandler.run\n            let [< Rpc >] registrarCuenta          tk aid    p      : AR<_> = check tk aid >>= (fun _  -> Authorize       .registrarCuenta          aid     p       ) |> AzureHandler.run\n            let [< Rpc >] validarFormaPago         tk aid    p      : AR<_> = check tk aid >>= (fun _  -> Authorize       .validarFormaPago         aid     p       ) |> AzureHandler.run\n            let [< Rpc >] borrarFormaPago          tk aid    p      : AR<_> = check tk aid >>= (fun _  ->                  borrarFormaPago0         aid     p       ) |> AzureHandler.run\n            let [< Rpc >] obtenerListaDocs         tk aid           : AR<_> = check tk aid >>= (fun _  -> ManejadorEventos.obtenerListaDocs         aid             ) |> AzureHandler.run\n            let [< Rpc >] enviarCorreosInvitacion  tk aid (tm, ems) : AR<_> = check tk aid >>= (fun _  -> Correo          .enviarCorreosInvitacion (tm, aid, ems)   ) |> AzureHandler.run\n            let [< Rpc >] obtenerFormasDePagoPara  tk aids          : AR<_> = check tk adm >>= (fun _  -> Authorize       .obtenerFormasDePagoPara  aids            ) |> AzureHandler.run\n            let [< Rpc >] obtenerTransaccionesPara tk aid           : AR<_> = check tk aid >>= (fun aL -> Authorize       .obtenerTransaccionesPara aid    aL.Value ) |> AzureHandler.run\n            let [< Rpc >] refrescarTransacciones   tk            () : AR<_> = check tk adm >>= (fun _  -> reader          .RefrescarTransacciones            ()     ) |> AzureHandler.run\n        \n        [<JavaScript>]\n        module Remoting = // not being used anymore as token now is a parameter of the rpc function\n            open WebSharper.JavaScript\n        \n            let private originalProvider = WebSharper.Remoting.AjaxProvider\n        \n            let mutable getTokenOA = fun () -> async { return None } // ... get token from storage ...\n        \n            type CustomXhrProvider () =\n                interface WebSharper.Remoting.IAjaxProvider with\n                    member this.Async url headers data ok err = \n                        async {\n                            let! tokenO = getTokenOA()\n                            tokenO |> Option.iter (fun token -> JS.Set headers \"Authorization\" <| sprintf \"Bearer %s\" token)\n                            originalProvider.Async url headers data ok err\n                        } |> Async.Start\n                    member this.Sync url headers data =\n                            originalProvider.Sync url headers data\n                    \n            let installBearer getTokenOAF =\n                getTokenOA <-  getTokenOAF\n                WebSharper.Remoting.AjaxProvider <- CustomXhrProvider()\n                \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Host.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Core\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Extensions\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Extensions.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Extensions.Storage\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Extensions.Storage.dll\" \n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.Primitives\\lib\\netstandard2.0\\Microsoft.Extensions.Primitives.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.Logging\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.Logging.Abstractions\\lib\\netstandard2.0\\Microsoft.Extensions.Logging.Abstractions.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Azure.WebJobs.Extensions.Http\\lib\\netstandard2.0\\Microsoft.Azure.WebJobs.Extensions.Http.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.DependencyInjection\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.Extensions.DependencyInjection.Abstractions\\lib\\netstandard2.0\\Microsoft.Extensions.DependencyInjection.Abstractions.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Http\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Http.Abstractions\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Abstractions.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Http.Features\\lib\\netstandard2.0\\Microsoft.AspNetCore.Http.Features.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Mvc.Core\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Core.dll\"\n        //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\Prozper\\Microsoft.AspNetCore.Mvc.Abstractions\\lib\\netstandard2.0\\Microsoft.AspNetCore.Mvc.Abstractions.dll\"\n        \n        //#define NETSTANDARD20\n        \n        module AzureFunctions =\n            open Microsoft.Azure.WebJobs\n            open Microsoft.Azure.WebJobs.Extensions\n            open Microsoft.Azure.WebJobs.Extensions.Storage\n            open Microsoft.Azure.WebJobs.Extensions.Http\n            open Microsoft.Extensions.Logging\n            open Microsoft.AspNetCore.Http\n            open Microsoft.AspNetCore.Mvc\n            open Newtonsoft.Json\n            open System\n            open System.IO \n        \n            module RM = WebSharper.Core.Remoting\n        \n            [<FunctionName(\"keepAlive\")>]\n            let keepAlive([< TimerTrigger(\"0 */5 * * * *\") >] myTimer : TimerInfo, log : ILogger ) =\n                ()\n        \n            [<FunctionName(\"refreshTransactions\")>]\n            let refreshTransactions([< TimerTrigger(\"0 0 0 */1 * *\") >] myTimer : TimerInfo, log : ILogger ) =\n                reader.RefrescarTransacciones() |> AzureHandler.printEff log.LogInformation\n        \n            type MaxDepthJsonTextWriter(writer : TextWriter, maxDepth : int ) =\n                inherit JsonTextWriter(writer) \n                let mutable maxObservedDepth = 0\n                member this.CheckDepth() =\n                    maxObservedDepth <- Math.Max(maxObservedDepth, this.Top)\n                    if this.Top > int maxDepth then\n                        failwithf \"Depth %d Exceeds MaxDepth %A at path %A\" this.Top maxDepth this.Path\n                override this.WriteStartArray          () = base.WriteStartArray()           ; this.CheckDepth()\n                override this.WriteStartConstructor  name = base.WriteStartConstructor(name) ; this.CheckDepth()\n                override this.WriteStartObject         () = base.WriteStartObject()          ; this.CheckDepth()\n        \n            let splitAndSend n f name (txt:string) =\n                let rec loop (txt:string) =\n                    if txt.Length <= n then f txt else\n                    f txt.[0..n]\n                    loop txt.[n + 1..]\n                loop (name + \"<<<:\" + txt + \":>>>\")\n        \n            let serializeMaxDepth depth obj = \n                let settings = JsonSerializerSettings(ReferenceLoopHandling  = ReferenceLoopHandling.Ignore\n                                                    , MissingMemberHandling  = MissingMemberHandling.Ignore\n                                                    , Error                  = EventHandler<Serialization.ErrorEventArgs>(fun s a -> a.ErrorContext.Handled <- true)\n                                                    )\n                use writer      = new StringWriter()\n                use jsonWriter  = new MaxDepthJsonTextWriter(writer, depth)\n                JsonSerializer.Create(settings).Serialize(jsonWriter, obj)\n                writer.ToString()\n        \n            let  wsServer = lazy RM.Server.Create WebSharper.Web.Shared.Metadata WebSharper.Web.Shared.Json\n        \n            [<FunctionName(\"rpc\")>]\n            let runRpc( [<HttpTrigger(AuthorizationLevel.Anonymous, \"get\" , \"post\", \"options\", Route = \"rpc/rpc\")>] \n                        request     : HttpRequest\n                      , principal   : System.Security.Claims.ClaimsPrincipal \n                      , log         : ILogger  ) = \n                async {\n                    do              log.LogInformation \"runRpc: ENTERING v.016\"\n                    //serializeMaxDepth 13 request   |> splitAndSend 9999 log.LogInformation \"request\"\n                    //serializeMaxDepth 13 principal |> splitAndSend 9999 log.LogInformation \"principal\"\n                    //log.LogInformation(sprintf \"%d Headers:\" <| Seq.length request.Headers)\n                    //request.Headers |> Seq.collect (fun kvp -> kvp.Value |> Seq.map (fun v -> kvp.Key, v)) |> Seq.iter (sprintf \"%A\" >> log.LogInformation)\n                    //log.LogInformation(sprintf \"%d real Claims:\" <| Seq.length principal.Claims)\n                    //principal.Claims |> Seq.map (fun kvp -> kvp.Type, kvp.Value) |> Seq.iter (sprintf \"%A\" >> log.LogInformation)\n                    do              log.LogInformation <| sprintf \"runRpc: %s\" request.Headers.[\"x-websharper-rpc\"].[0]\n                    let  start    = System.DateTime.UtcNow.Ticks\n                    //let  wsServer = RM.Server.Create WebSharper.Web.Shared.Metadata WebSharper.Web.Shared.Json\n                    do              log.LogInformation \"runRpc: after Server.Create\"\n                    let! body     = request.ReadAsStringAsync() |> Async.AwaitTask\n                    let  wsReq    = {\n                        RM.Request.Body    = body\n                        RM.Request.Headers = ParseO.tryParseWith request.Headers.TryGetValue >> Option.bind Seq.tryHead\n                    }\n                    logger <- fun s -> log.LogInformation s\n                    try\n                        let! wsResp      = wsServer.Value.HandleRequest wsReq\n                        let  elapsedSpan = new System.TimeSpan(System.DateTime.UtcNow.Ticks - start)\n                        log.LogInformation <| sprintf \"Finished: %s %s\" request.Headers.[\"x-websharper-rpc\"].[0] (elapsedSpan.ToString())\n                        //log.LogInformation (sprintf \"runRpc: after HandleRequest %s %s\" wsResp.ContentType wsResp.Content)\n                        return ContentResult(Content = wsResp.Content, ContentType = wsResp.ContentType)\n                    with e ->\n                        log.LogError (sprintf \"Exception: %A %A\" e.Message e.StackTrace)\n                        return failwithf \"Exception %A %A\" e.Message e.StackTrace\n                } |> Async.StartAsTask\n        \n            open Microsoft.WindowsAzure.Storage\n            open Microsoft.WindowsAzure.Storage.Queue\n        \n            //open Microsoft.Azure.Cosmos.Table\n            open Microsoft.AspNetCore.Http\n            open System.IO\n            open Microsoft.AspNetCore.Mvc\n        \n            [<FunctionName(\"subir\")>]\n            let subirDocumentos([<HttpTrigger(AuthorizationLevel.Anonymous, \"post\"   , Route      = \"subir/{id}/{filename}\")>] req   : HttpRequest\n                              , [<Blob(\"documentos/{id}/{filename}\", System.IO.FileAccess.Write, Connection = \"AzureWebJobsStorage\"  )>] writer: Stream \n                              , log     : ILogger\n                              , id      : string\n                              , filename: string ) = \n              async {\n                    log.LogInformation <| sprintf \"subiendo documento %d %s\" req.Form.Files.Count filename\n                    if req.Form.Files.Count <> 1 then\n                        log.LogWarning \"no se encontro el documento\"\n                        return ContentResult(Content = \"no se encontro el documento\", ContentType = \"text/plain\")\n                    else\n                    let  file      = req.Form.Files |> Seq.head\n                    do!  file.CopyToAsync writer |> Async.AwaitTask\n                    eff {\n                        try\n                            do!  Asy.ofAsync <| Async.Sleep 500\n                            let! blobClient = Azure.blobClientE()\n                            let  container  = blobClient.GetContainerReference \"documentos\"\n                            let  dir        = container.GetDirectoryReference id\n                            let  blobRef    = dir.GetBlockBlobReference filename\n                            Azure.getMimeO filename\n                            |> Option.iter (fun mime -> \n                                blobRef.Properties.ContentType <- mime\n                                blobRef.SetPropertiesAsync() |> Async.AwaitTask |> Async.Start\n                            )\n                        with e -> do! Rsl.ofResult <| Error (sprintf \"%A\" e)\n                    } |> AzureHandler.run |> Async.map (function | Error m -> printfn \"%A\" m |_-> ()) |> Async.Start\n                    return ContentResult(Content = \"Documento subido!\", ContentType = \"text/plain\")\n              } |> Async.StartAsTask\n        \n            [<FunctionName(\"passMessages\")>]\n            let passMessages( [<QueueTrigger(\"mensajes\", Connection = \"AzureWebJobsStorage\")>]  \n                    mensaje: Azure.Mensaje, log: ILogger) = \n                async {\n                    log.LogInformation (sprintf \"guardarMensaje %A (ignorando) \" mensaje)\n                    //let! v = AmbienteAzure.guardarMensaje mensaje\n                    //let! next = AmbienteAzure.queueMensajes.PeekMessageAsync() |> Async.AwaitTask\n                    //if isNull next then \n                        //log.LogInformation <| sprintf \"ambiente: %s\" (ambiente.NombreAmbiente())\n                        ////let! res = Acciones.ejecutarAcciones()\n                        ////log.LogInformation <| sprintf \"Acciones ejecutadas %A\" res\n                    ()\n                } |> Async.RunSynchronously\n        \n            [<FunctionName(\"path\")>]\n            let path( [<HttpTrigger(AuthorizationLevel.Anonymous, \"get\" , \"post\", \"options\", Route = \"{anything}\")>] \n                        request     : HttpRequest\n                      , log         : ILogger ) =\n                //log.LogInformation(sprintf \"isMimeMultipart: %A\" <| request.Content.IsMimeMultipartContent())          \n                request.Headers |> Seq.iter (fun h -> log.LogInformation(sprintf \"header: %s %A\" h.Key (h.Value |> String.concat \"; \")) )\n                let uid    = ParseO.tryParseWith request.Headers.TryGetValue \"idAliado\" |> Option.bind Seq.tryHead |> Option.defaultValue \"\"\n                let claims = [| \"http://schemas.microsoft.com/identity/claims/objectidentifier\", uid |]\n                claims |> Seq.iter (sprintf \"%A\" >> log.LogInformation)\n                //let serializares =\n                //    SerializadorEventos.serSerializadoresEventos.Keys \n                //    |> Seq.map (sprintf \"%A\")\n                //    |> String.concat \"\\n\"\n                //    |> sprintf \"serializers: %s\"\n                //let handlers =\n                //    Eventos.Manejadores.Keys \n                //    |> Seq.map (sprintf \"%A\")\n                //    |> String.concat \"\\n\"\n                //    |> sprintf \"Handlers: %s\"\n                //let content = sprintf \"Hello\\n%s\\n%s\" serializares handlers\n                let content = Directory.GetCurrentDirectory() //\"Hello\"\n                ContentResult(Content = content, ContentType = \"text/plain\")\n        \n            [<FunctionName(\"letsEncryptF\")>]\n            let letsEncryptFunc( [<HttpTrigger(AuthorizationLevel.Anonymous, \"get\" , \"post\", \"options\", Route = \"letsencrypt/{filename}\")>] \n                                request     : HttpRequest\n                              , filename    : string\n                              , log         : ILogger ) =\n                log.LogInformation \"LetsEncryptFunc called...\" \n                log.LogInformation(sprintf \"LetsEncryptFunc: %s\" filename)\n                let content   = System.IO.File.ReadAllText(@\"D:\\home\\site\\wwwroot\\.well-known\\acme-challenge\\\" + filename)\n                ContentResult(Content = content, ContentType = \"text/plain\")\n                //let resp      = new HttpResponseMessage(System.Net.HttpStatusCode.OK)\n                //resp.Content <- new StringContent(content, System.Text.Encoding.UTF8, \"text/plain\")\n                //resp\n        \n        \n        //#nowarn \"52\"\n        //#nowarn \"1182\"\n        //#nowarn \"1178\"\n        \n        //#define NOFRAMEWORK --noframework\n        //#define WEBSHARPER\n        \n        //// to generate function.json (s):\n        //// D:\\Abe\\CIPHERWorkspace\\AzureFunctions\\packages\\Microsoft.NET.Sdk.Functions\\tools\\net46\\Microsoft.NET.Sdk.Functions.Generator.exe bin\\ProzperServer.dll .\n        \n        //// to save function.json:\n        //// PUT https://management.azure.com/subscriptions/fd33982d-5249-477d-9587-b0f758dd6fe9/resourceGroups/Prozper/providers/Microsoft.Web/sites/Prozper0/functions/%s?api-version=2018-02-01\n        //// {\n        ////       \"properties\": {\n        ////         \"config\": %s\n        //// }\n        \n        \n        "],
"names": [],
"mappings": "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"
}
