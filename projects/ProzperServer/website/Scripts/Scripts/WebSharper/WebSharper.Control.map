{
"version": 3,
"sourceRoot": "Source",
"sources": ["WebSharper.Control/Observer.fs", "WebSharper.Control/HotStream.fs", "WebSharper.Control/Observable.fs", "WebSharper.Control/ObservableModule.fs", "WebSharper.Control/Event.fs", "WebSharper.Control/FSharpEvent.fs", "WebSharper.Control/EventModule.fs", "WebSharper.Control/MailboxProcessor.fs"],
"sourcesContent": ["// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<JavaScript>]\nmodule internal Observer =\n\n    type Message<'T> =\n        | Message of 'T\n        | Error of exn\n        | Completed\n\n    let Of f : IObserver<_> =\n        { new IObserver<'T> with\n            member __.OnNext x = f x\n            member __.OnError x = raise x\n            member __.OnCompleted() = ()\n        }\n\n    let New (f, e, c) : IObserver<_> =\n        { new IObserver<'T> with\n            member __.OnNext x = f x\n            member __.OnError x = e x\n            member __.OnCompleted() = c()\n        }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\nmodule internal HotStream =\n    open System\n\n    /// Implementation for \"hot stream\".\n    /// Subscribers to hot streams will only observe the latest\n    /// and future values.\n    [<JavaScript>]\n    type HotStream<'T> =\n        internal\n            {\n                Latest  : ref<option<'T>>\n                Event   : Event<'T>\n            }\n        interface IObservable<'T> with\n            member this.Subscribe(o) =\n                if this.Latest.Value.IsSome then\n                    o.OnNext this.Latest.Value.Value\n                let disp =\n                    this.Event.Publish.Subscribe(fun v ->\n                        o.OnNext(v)\n                    )\n                disp\n\n        member this.Trigger(v) =\n            this.Latest := Some v\n            this.Event.Trigger v\n\n        static member New<'U>() : HotStream<'U> =\n            {\n                Latest = ref None\n                Event = Event<_>()\n            }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.JavaScript>]\nmodule internal WebSharper.Control.Observable\n\nopen System\nopen WebSharper\n\n[<Inline>]\nlet New f : IObservable<'T> = { new IObservable<'T> with member __.Subscribe o = f o }\n\nlet Of (f: ('T -> unit) -> (unit -> unit)) : IObservable<_> =\n    New (fun o -> Disposable.Of (f (fun x -> o.OnNext x)))\n\nlet Return<'T> (x: 'T) : IObservable<'T> =\n    let f (o : IObserver<'T>) =\n        o.OnNext x\n        o.OnCompleted ()\n        Disposable.Of ignore\n    New f\n\nlet Never<'T> () : IObservable<'T> =\n    New(fun _ ->\n        Disposable.Of ignore\n    )\n\nlet Protect f succeed fail =\n    match (try Choice1Of2 (f ()) with e -> Choice2Of2 e) with\n    | Choice1Of2 x -> (succeed x)\n    | Choice2Of2 e -> (fail e)\n\nlet Map (f: 'T -> 'U) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) o1.OnNext o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\n\nlet Filter (f: 'T -> bool) (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let on v = \n            Protect (fun () -> if f v then Some v else None)\n                (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <|  Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Choose  (f: 'T -> option<'U>) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Drop count (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let index = ref 0\n        let on v =\n            incr index\n            if index.Value > count then\n                o1.OnNext v\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Merge (io1: IObservable<'T>) (io2: IObservable<'T>) : IObservable<'T> =\n    New <| fun o ->\n        let completed1 = ref false\n        let completed2 = ref false\n        let disp1 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed1 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io1.Subscribe\n        let disp2 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed2 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io2.Subscribe\n        Disposable.Of (fun () -> disp1.Dispose(); disp2.Dispose())\n\nlet Concat (io1: IObservable<'T>) (io2: IObservable<'T>) =\n    New <| fun o ->\n        let innerDisp = ref None\n        let outerDisp =\n            io1.Subscribe(\n                Observer.New(o.OnNext, ignore, fun () ->\n                    innerDisp := Some <| io2.Subscribe(o)\n                )\n            )\n        Disposable.Of <| fun () ->\n            if innerDisp.Value.IsSome then\n                innerDisp.Value.Value.Dispose ()\n            outerDisp.Dispose()\n\n\nlet Range (start: int , count: int) : IObservable<int> =\n    New <| fun o ->\n        for i = start to start + count do\n            o.OnNext i\n        Disposable.Of ignore\n\n\nlet CombineLatest   (io1 : IObservable<'T>)\n                    (io2: IObservable<'U>)\n                    (f: 'T -> 'U -> 'S) : IObservable<'S> =\n    New <| fun o ->\n        let lv1 = ref None\n        let lv2 = ref None\n        let update () =\n            match !lv1, !lv2 with\n            | Some v1, Some v2  ->\n                Protect (fun () -> f v1 v2) o.OnNext o.OnError\n            | _                 ->\n                ()\n        let o1 =\n            let onNext x =\n                lv1 := Some x\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let o2 =\n            let onNext y =\n                lv2 := Some y\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let d1 = io1.Subscribe(o1)\n        let d2 = io2.Subscribe(o2)\n        Disposable.Of (fun () -> d1.Dispose() ; d2.Dispose())\n\nlet Switch (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp =\n            let index = ref 0\n            let disp : option<IDisposable> ref = ref None\n\n            // Subscribe to outer stream\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Update counter\n                incr index\n\n                // Dispose old observer\n                if disp.Value.IsSome then\n                    disp.Value.Value.Dispose ()\n\n                let currentIndex = index.Value\n                let d =\n                    o1.Subscribe (fun v ->\n                        if currentIndex = index.Value then\n                            o.OnNext(v)\n                    ) |> Some\n                // Update dispose\n                disp := d\n            )\n        disp\n    )\n\nlet SelectMany (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp = ref ignore\n        // Subscribe to outer stream\n        let d =\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Subscribe to inner stream\n                let d =\n                    o1.Subscribe (fun v ->\n                        o.OnNext v\n                    )\n                disp := fun () ->\n                    disp.Value ()\n                    d.Dispose ()\n            )\n        Disposable.Of (fun () ->\n            disp.Value ()\n            d.Dispose ()\n        )\n    )\n\nlet Aggregate (io: IObservable<'T>) (seed: 'S) (fold: 'S -> 'T -> 'S) =\n    New <| fun o1 ->\n        let state = ref seed\n        let on v = \n            Protect (fun () -> fold !state v) \n                (fun s -> state := s; o1.OnNext s) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n////    let CollectLatest (outer: IObservable<IObservable<'T>>) : IObservable<seq<'T>> =\n//        New (fun o ->\n//            let dict = System.Collections.Generic.Dictionary<int, 'T>()\n//            let index = ref 0\n//\n//            // Outer subscription\n//            outer.Subscribe(fun (inner: IObservable<'T>) ->\n//                incr index\n//                let currentIndex = index.Value\n//\n//                // Inner subscription\n//                inner.Subscribe(fun value ->\n//                    dict.[currentIndex] <- value\n//                    seq {for pair in dict do yield pair.Value}\n//                    |> o.OnNext\n//                )|> ignore\n//            )\n//        )\n\nlet Sequence (ios: seq<IObservable<'T>>) : IObservable<List<'T>> =\n    let rec sequence (ios: list<IObservable<'T>>) =\n        match ios with\n        | []        ->\n            Return []\n        | x::xs  ->\n            let rest = sequence xs\n            CombineLatest x rest  (fun x y -> x :: y)\n    sequence (List.ofSeq ios)\n\n\n[<Inline>]\nlet Heat (io: IObservable<'T>) : IObservable<'T> =\n    let formStream = HotStream.HotStream<_>.New()\n    let disp =\n        io.Subscribe formStream.Trigger\n    formStream :> IObservable<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.ObservableModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private ObservableModule =\n\n    [<Inline>]\n    let Add (f: 'T -> unit) (o: IObservable<'T>) =\n        ignore (o.Subscribe (Observer.Of f))\n\n    [<Inline>]\n    let Choose (c: 'T -> option<'U>) (e: IObservable<'T>) =\n        Observable.Choose c e\n\n    [<Inline>]\n    let Filter (ok: 'T -> bool) (e: IObservable<'T>) : IObservable<'T> =\n        Observable.Filter ok e\n\n    [<Inline>]\n    let Map (f: 'T -> 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.Map f e\n\n    [<Inline>]\n    let Merge (e1: IObservable<'T>) (e2: IObservable<'T>) =\n        Observable.Merge e1 e2\n\n    let Pairwise (e: IObservable<'T>) : IObservable<'T * 'T> =\n        Observable.New <| fun o1 ->\n            let last = ref None\n            let on v =\n                match !last with\n                | None -> ()\n                | Some l -> o1.OnNext(l, v)\n                last := Some v\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    let Partition (f: 'T -> bool) (e: IObservable<'T>) :\n            IObservable<'T> * IObservable<'T> =\n        (Observable.Filter f e, Observable.filter (f >> not) e)\n\n    let Scan (fold: 'U -> 'T -> 'U) (seed: 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.New <| fun o1 ->\n            let state = ref seed\n            let on v = \n                Observable.Protect (fun () -> fold !state v) \n                    (fun s -> state := s; o1.OnNext s) o1.OnError\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    let Split (f: 'T -> Core.Choice<'U1,'U2>) (e: IObservable<'T>) :\n            IObservable<'U1> * IObservable<'U2> =\n        let left =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _ -> None)\n        let right =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _ -> None)\n        (left, right)\n\n    [<Inline>]\n    let Subscribe (f: 'T -> unit) (e: IObservable<'T>) =\n        e.Subscribe f\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nmodule internal Event =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    type Event<'T> = private { Handlers : ResizeArray<Handler<'T>> } with\n\n        member this.Trigger(x: 'T) =\n            for h in this.Handlers.ToArray() do\n                h.Invoke(null, x)\n\n        member this.AddHandler(h: Handler<'T>) =\n            this.Handlers.Add h\n\n        member this.RemoveHandler(h: Handler<'T>) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        member this.Subscribe(observer: IObserver<'T>) =\n            let h = new Handler<'T>(fun _ x -> observer.OnNext x)\n            this.AddHandler h\n            Disposable.Of (fun () -> this.RemoveHandler h)\n\n        interface IDisposable with\n                member this.Dispose() = ()\n\n        interface IObservable<'T> with\n                member this.Subscribe observer = this.Subscribe observer\n\n        interface IDelegateEvent<Handler<'T>> with\n                member this.AddHandler x = this.AddHandler x\n                member this.RemoveHandler x = this.RemoveHandler x\n\n        interface IEvent<'T>\n\n    [<Inline>]\n    let New () = { Handlers = ResizeArray() }\n\nmodule internal DelegateEvent =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    type DelegateEvent<'T when 'T :> System.Delegate and 'T: equality> = private { Handlers : ResizeArray<'T> } with\n\n        member this.Trigger(x: obj[]) =\n            for h in this.Handlers.ToArray() do\n                h.DynamicInvoke(x) |> ignore\n\n        member this.AddHandler(h: 'T) =\n            this.Handlers.Add h\n\n        member this.RemoveHandler(h: 'T) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        interface IDisposable with\n                member this.Dispose() = ()\n\n        interface IDelegateEvent<'T> with\n                member this.AddHandler x = this.AddHandler x\n                member this.RemoveHandler x = this.RemoveHandler x\n\n    [<Inline>]\n    let New () = { Handlers = ResizeArray() }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\n[<Proxy(typeof<Event<_>>)>]\n[<Name \"WebSharper.Control.FSharpEvent\">]\ntype private FSharpEvent<'T> [<JavaScript>] () =\n    let event = Event.New ()\n\n    [<Inline>]\n    member this.Trigger(x: 'T) = event.Trigger x\n\n    member this.Publish with [<Inline>] get () = event :> IEvent<_>\n\n[<Proxy(typeof<DelegateEvent<_>>)>]\n[<Name \"WebSharper.Control.FSharpDelegateEvent\">]\ntype private FSharpDelegateEvent<'T when 'T :> System.Delegate and 'T: equality> [<JavaScript>] () =\n    let event = DelegateEvent.New ()\n\n    [<Inline>]\n    member this.Trigger(args: obj[]) = event.Trigger args\n\n    member this.Publish with [<Inline>] get () = event :> IDelegateEvent<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.EventModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private EventModule =\n\n    [<Inline>]\n    let Add f (e: IEvent<_,_>) = e.Add f\n\n    let Choose c (e: IEvent<_,_>) : IEvent<_> =\n        // let r = Event.New ()\n        let r = Event<_>()\n        e.Add (fun x ->\n            match c x with\n            | Some y    -> r.Trigger y\n            | None      -> ())\n        r.Publish :> _\n\n    let Filter ok (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> if ok x then r.Trigger x)\n        r :> _\n\n    let Map f (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> r.Trigger (f x))\n        r :> _\n\n    let Merge<'D1,'T,'D2 when 'D1 :> Delegate\n                          and 'D1 :  delegate<'T,unit>\n                          and 'D2 :> Delegate\n                          and 'D2 :  delegate<'T,unit>>\n            (e1: IEvent<'D1,'T>) (e2: IEvent<'D2,'T>) : IEvent<_> =\n        let r = Event.New ()\n        e1.Add r.Trigger\n        e2.Add r.Trigger\n        r :> _\n\n    let Pairwise (e: IEvent<_,_>) : IEvent<_> =\n        let buf = ref None\n        let ev  = Event.New ()\n        e.Add (fun x ->\n            match buf.Value with\n            | None ->\n                buf := Some x\n            | Some old ->\n                buf := Some x\n                ev.Trigger(old, x))\n        ev :> _\n\n    let Partition f e =\n        (Event.filter f e, Event.filter (f >> not) e)\n\n    let Scan fold seed e =\n        let state = ref seed\n        let f value =\n            state := fold !state value\n            !state\n        Event.map f e\n\n    let Split (f: 'T -> Choice<'U1,'U2>) (e: IEvent<'Del,'T>) =\n        (\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _                 -> None),\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _                 -> None)\n        )\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Threading\n\n[<Proxy(typeof<AsyncReplyChannel<_>>)>]\ntype private ChannelProxy<'T> =\n    [<Inline \"$this($res)\">]\n    member this.Reply(res: 'T) = X<unit>\n\n[<Proxy(typeof<MailboxProcessor<_>>)>]\n[<Name \"MailboxProcessor\">]\ntype private MailboxProcessorProxy<'T> (initial, ?token: CancellationToken) =\n    let mutable started = false\n    let errorEvent = Event<exn>()\n    let mailbox = LinkedList<'T>()\n    let mutable savedCont = None\n\n    let startAsync a =\n        Async.Start(a, ?cancellationToken = token)\n\n    let resume() =\n        match savedCont with\n        | None -> ()\n        | Some c ->\n            savedCont <- None\n            c |> startAsync\n\n    do  match token with\n        | Some ct -> \n            ct.Register(fun () -> resume()) |> ignore\n        | None -> ()\n\n    let dequeue() =\n        let f = mailbox.First.Value\n        mailbox.RemoveFirst()\n        f\n\n    [<CLIEvent>]\n    member this.Error = errorEvent.Publish\n\n    member val DefaultTimeout = -1 with get, set    \n\n    member this.Start() =\n        if started then\n            failwith \"The MailboxProcessor has already been started.\"\n        else\n            started <- true\n            async {\n                try do! initial (As<MailboxProcessor<'T>> this)\n                with err -> errorEvent.Trigger err\n            } |> startAsync\n\n    static member Start(initial, ?token: CancellationToken) =\n        let mb = new MailboxProcessor<'T>(initial, ?cancellationToken = token)\n        mb.Start()\n        mb\n\n    [<Inline>]\n    member this.Post(msg: 'T) =\n        mailbox.AddLast msg |> ignore\n        resume()\n\n    member this.TryReceive(?timeout: int) =        \n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if mailbox.First = null then\n                if timeout < 0 then\n                    savedCont <- Some <| async { dequeue() |> Some |> ok }\n                else  \n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout \n                    savedCont <- Some <| async { \n                        if !waiting then do\n                            waiting := false  \n                            JS.ClearTimeout pending\n                            dequeue() |> Some |> ok \n                    }\n            else dequeue() |> Some |> ok\n\n    member this.Receive(?timeout: int) =\n        async {\n            let! x = this.TryReceive(?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n                              \n    member this.CurrentQueueLength = mailbox.Count\n\n    member this.PostAndTryAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R option> =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if timeout < 0 then\n                As (Some >> ok) |> msgf |> this.Post\n            else\n                let waiting = ref true\n                As (fun res ->\n                    if !waiting then\n                        waiting := false\n                        ok (Some res)\n                ) |> msgf |> this.Post\n                JS.SetTimeout (fun () ->\n                    if !waiting then\n                        waiting := false\n                        ok None        \n                ) timeout |> ignore               \n\n    member this.PostAndAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R> =\n        async {\n            let! x = this.PostAndTryAsyncReply(msgf, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n\n    member this.TryScan(scanner, ?timeout: int) =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        async {\n            let scanInbox() =\n                let mutable m = mailbox.First\n                let mutable found = None\n                while m <> null do \n                    match scanner m.Value with\n                    | None ->\n                        m <- m.Next\n                    | _ as a ->\n                        mailbox.Remove m\n                        m <- null\n                        found <- a\n                found\n            match scanInbox() with\n            | Some found -> \n                let! res = found\n                return Some res\n            | _ -> return! Async.FromContinuations <| fun (ok, _, _) -> \n                if timeout < 0 then\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                ok (Some res)\n                        }\n                    scanNext()\n                else\n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                if !waiting then do\n                                    waiting := false\n                                    JS.ClearTimeout pending\n                                    ok (Some res)\n                        }\n                    scanNext()\n        }\n        \n    member this.Scan(scanner, ?timeout: int) =\n        async {\n            let! x = this.TryScan(scanner, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n"],
"names": [],
"mappings": "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"
}
