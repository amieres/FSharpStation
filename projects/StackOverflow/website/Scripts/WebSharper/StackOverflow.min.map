{
"version": 3,
"sourceRoot": "Source",
"sources": ["StackOverflow/StackOverflow.fs"],
"sourcesContent": ["#nowarn \"52\"\n////-d:FSS_SERVER -d:FSharpStation1551903608592 -d:WEBSHARPER\n////#cd @\"..\\projects\\StackOverflow\\src\"\n//#I @\"..\\packages\\WebSharper\\lib\\net461\"\n//#I @\"..\\packages\\WebSharper.UI\\lib\\net461\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n//#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n//#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n//#r @\"..\\packages\\FSharp.Data\\lib\\net45\\FSharp.Data.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n//#r @\"..\\..\\LayoutEngine\\bin\\LayoutEngine.dll\"\n//#r @\"..\\packages\\other\\FSharp.Data.SqlClient\\lib\\net40\\FSharp.Data.SqlClient.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Data.dll\"\n//#r @\"..\\packages\\Owin\\lib\\net40\\Owin.dll\"\n//#r @\"..\\packages\\Microsoft.Owin\\lib\\net451\\Microsoft.Owin.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.Hosting\\lib\\net451\\Microsoft.Owin.Hosting.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.Host.HttpListener\\lib\\net451\\Microsoft.Owin.Host.HttpListener.dll\"\n//#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\WebSharper.Owin.dll\"\n//#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\HttpMultipartParser.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.StaticFiles\\lib\\net451\\Microsoft.Owin.StaticFiles.dll\"\n//#r @\"..\\packages\\Microsoft.Owin.FileSystems\\lib\\net451\\Microsoft.Owin.FileSystems.dll\"\n//#nowarn \"52\"\n/// Root namespace for all code\n//#define FSharpStation1551903608592\n#if INTERACTIVE\nmodule FsRoot   =\n#else\nnamespace FsRoot\n#endif\n\n    #if WEBSHARPER\n    //#define NOFRAMEWORK --noframework\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\"\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n    \n    //#I @\"..\\packages\\WebSharper\\lib\\net461\"\n    //#I @\"..\\packages\\WebSharper.UI\\lib\\net461\"\n    \n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n    //#r @\"..\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"..\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n    \n    open WebSharper\n    open WebSharper.JavaScript\n    open WebSharper.UI\n    open WebSharper.UI.Client\n    type on   = WebSharper.UI.Html.on\n    type attr = WebSharper.UI.Html.attr\n    #else\n    /// dummy WebSharper definition in order to avoid having to use #if WEBSHARPER all the time\n    module WebSharper =\n        type RpcAttribute() =\n            let a = 1\n        type JavaScriptAttribute(translate:bool) =\n            let a = 1\n            new() = JavaScriptAttribute true\n        type InlineAttribute(code:string) =\n            let a = 1\n            new() = InlineAttribute \"\"\n        type DirectAttribute(code:string) =\n            let a = 1\n    \n    open WebSharper\n    \n    #endif\n    \n        /// Essentials that can be converted to JavaScript with WebSharper\n        [< JavaScript ; AutoOpen >]\n        module Library =\n            let Error = Result.Error\n            /// call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |> tee (printfn \"value = %d\") |> doSomethingElse\n            let [<Inline>] inline tee f v = f v ; v\n            \n            /// tee: call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |!> printfn \"value = %d\" |> doSomethingElse\n            let [<Inline>] inline  (|>!) v f   = f v ; v\n            let [<Inline>] inline  (>>!) g f   = g >> fun v -> f v ; v\n            \n            let inline print v = \n                match box v with\n                | :? string as s -> printfn \"%s\" s\n                | __             -> printfn \"%A\" v\n            \n            /// Extensible type for error messages, warnings and exceptions\n            type ResultMessage<'M> =\n                | NoMsg\n                | ErrorMsg  of string\n                | Warning   of string\n                | Info      of string\n                | Message   of 'M\n                | ExceptMsg of string * string\n                | RMessages of ResultMessage<'M> []\n                with \n                override msg.ToString() =\n                    match msg with\n                    | NoMsg          ->  \"\"\n                    | ErrorMsg  m    ->  m      |> sprintf \"Error    : %s\"\n                    | Warning   m    ->  m      |> sprintf \"Warning  : %s\"\n                    | Info      m    ->  m\n                    | Message   m    ->  m      |> sprintf \"%O\"\n                    | ExceptMsg(m,p) -> (m, p) ||> sprintf \"Exception: %s, %s\"\n                    | RMessages ms   ->  ms     |> Seq.filter (function NoMsg -> false |_-> true) |> Seq.map (fun m -> m.ToString()) |> String.concat \"\\n\"\n            \n            [< AutoOpen >]\n            module ResultMessageHelpers =\n                let inline errorMsgf fmt = Printf.ksprintf ErrorMsg fmt\n                let inline warningf  fmt = Printf.ksprintf Warning  fmt\n                let inline infof     fmt = Printf.ksprintf Info     fmt\n            \n            module ResultMessage =\n            \n                let inline noMsg    msg = msg |> function NoMsg -> true |_-> false\n                let inline exclnoMsg ms = ms |> Seq.filter (noMsg >> not)\n                /// converts Messages to other type of ResultMessage\n                let rec bindMessage f msg = \n                    match msg with\n                    | NoMsg          ->  NoMsg\n                    | Message   m    ->  f         m\n                    | ErrorMsg  m    ->  ErrorMsg  m\n                    | Info      m    ->  Info      m\n                    | Warning   m    ->  Warning   m\n                    | ExceptMsg(m,p) ->  ExceptMsg(m,p)\n                    | RMessages ms   ->  ms     |> Array.map (bindMessage f) |> RMessages\n            \n                /// a Message is converted to ErrorMsg\n                let freeMessageF f msg = msg |> bindMessage f\n                /// a Message is converted to ErrorMsg\n                let freeMessage    msg = msg |> freeMessageF (sprintf \"%O\" >> ErrorMsg)\n                /// a Message is converted to Warning\n                let freeMessageW   msg = msg |> freeMessageF (sprintf \"%O\" >> Warning )\n                /// a Message is converted to Info\n                let freeMessageI   msg = msg |> freeMessageF (sprintf \"%O\" >> Info    )\n            \n                let rec isInfoF f msg =\n                    match msg with\n                    | Info      _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (isInfoF f)\n                    | _              ->  false\n                /// a Message is not considered Info\n                let isInfo  msg = msg |> isInfoF (fun _ -> false)\n                /// a Message is considered Info\n                let isInfoI msg = msg |> isInfoF (fun _ -> true )\n            \n                let rec isWarningOrInfoF f msg =\n                    match msg with\n                    | Warning   _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (fun m -> isWarningOrInfoF f m || isInfoF f m)\n                    | _              ->  false\n                /// a Message is not considered a Warning\n                let isWarningOrInfo  msg = msg |> isWarningOrInfoF (fun _ -> false)\n                /// a Message is considered a Warning\n                let isWarningOrInfoW msg = msg |> isWarningOrInfoF (fun _ -> true )\n            \n                let rec isFatalF f msg =\n                    match msg with\n                    | NoMsg\n                    | Info      _    \n                    | Warning   _    ->  false\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> Seq.exists (isFatalF f)\n                    | _              ->  true\n                    //|>! printfn \"%A = %A\" msg\n                /// a Message is considered fatal\n                let isFatal  msg = msg |> isFatalF (fun _ -> true )\n                /// a Message is not considered fatal\n                let isFatalW msg = msg |> isFatalF (fun _ -> false)\n            \n                let rec countF f msg =\n                    match msg with\n                    | NoMsg          ->  0, 0, 0\n                    | Info      _    ->  0, 0, 1\n                    | Warning   _    ->  0, 1, 0\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.map (countF f) |> Seq.fold (fun (f, w, i) (fm, wm, im) -> f + fm, w + wm, i + im) (0, 0, 0)\n                    | _              ->  1, 0, 0\n            \n                /// a Message is considered an error\n                let count  msg = msg |> countF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let countW msg = msg |> countF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let countI msg = msg |> countF (fun _ -> 0, 0, 1)\n                \n                let addMsg a b =\n                    match a, b with\n                    | NoMsg        , c\n                    | c            , NoMsg         ->  c\n                    | RMessages mas, RMessages mbs ->  Array.append    mas      mbs   |> RMessages\n                    |           ma , RMessages mbs ->  Array.append [| ma |]    mbs   |> RMessages\n                    | RMessages mas,           mb  ->  Array.append    mas   [| mb |] |> RMessages\n                    |           ma ,           mb  ->               [| ma   ;   mb |] |> RMessages\n            \n                let reduceMsgs ms = (NoMsg, ms) ||> Seq.fold addMsg\n            \n                let summaryF f msg =\n                    match countF f msg with\n                    | 0, 0, _\n                    | 1, 0, 0\n                    | 0, 1, 0 -> \"\"\n                    | e, 0, _ -> sprintf \"Errors   : %d\\n\" e\n                    | 0, w, _ -> sprintf \"Warnings : %d\\n\" w\n                    | e, w, _ -> sprintf \"Errors   : %d, Warnings: %d\\n\" e w\n            \n                /// returns a string with a count of errors and warnings, if more than one\n                let summarizedF f msg = [ msg.ToString() ; summaryF f msg ] |> Seq.filter ((<>) \"\") |> String.concat \"\\n\"\n                /// a Message is considered an error\n                let summarized  msg = msg |> summarizedF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let summarizedW msg = msg |> summarizedF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let summarizedI msg = msg |> summarizedF (fun _ -> 0, 0, 1)\n                \n            module Memoize =\n            \n                /// returns 3 functions:\n                ///    checkO  : ('p->'v option) \n                ///    getOrAdd: ('p->('p->'v)->'v) \n                ///    clear   : (unit->unit)\n                [<Inline>]\n                let getStoreWithDict (cache: System.Collections.Generic.Dictionary<_, _>) =\n                    let checkO v     = let mutable res = Unchecked.defaultof<_>\n                                       let ok          = cache.TryGetValue(v, &res)\n                                       if  ok then Some res else None\n                    let store  v res = cache.[v] <- res\n                                       res\n                    let getOrAdd p f = checkO p |> Option.defaultWith (fun () -> f p |> store p )\n                    (checkO, getOrAdd), cache.Clear\n            \n                /// creates a Dictionary to store memoized values\n                /// returns 3 functions:\n                ///    checkO  : ('p->'v option) \n                ///    getOrAdd: ('p->('p->'v)->'v) \n                ///    clear   : (unit->unit)\n                [<Inline>]\n                let getStore() = getStoreWithDict (System.Collections.Generic.Dictionary<_, _>() )\n            \n                /// Memoizes function f using the provided cache\n                /// getCache() returns 1 function:\n                ///    getOrAdd: ('p->('p->'v)->'v) \n                [< Inline >]\n                let memoizeStore (getOrAdd:('key -> ('key -> 'value) -> 'value) ) f =\n                    fun p -> getOrAdd p f\n            \n            \n                /// Memoizes the function f using a Dictionary\n                /// Returns the memoized function and a clear() function\n                /// The dictionary can be reset using the clear() function\n                [< Inline >]\n                let memoizeResetable f =\n                    let (check, getOrAdd), clear = getStore()\n                    let memoF = memoizeStore getOrAdd f\n                    memoF, clear\n            \n                /// Memoizes the function f using the provided Dictionary\n                [<Inline>]\n                let memoizeWithDict dict f =\n                    let (check, getOrAdd), clear = getStoreWithDict dict\n                    let memoF = memoizeStore getOrAdd f\n                    memoF\n            \n                /// Memoizes the function f and returns Dictionary\n                [<Inline>]\n                let memoizeDict f =\n                    let dict = System.Collections.Generic.Dictionary<_, _>() \n                    let (check, getOrAdd), clear = getStoreWithDict dict\n                    let memoF = memoizeStore getOrAdd f\n                    memoF, dict\n            \n                /// Memoizes the function f using a Dictionary\n                [<Inline>]\n                let memoize f = memoizeResetable f |> fst\n            \n            \n            /// returns a function that delays its execution\n            /// runs only once even if multiple calls happen before the delay\n            let delayed delay doF =\n                let cancellationTokenSourceO = ref None\n                fun parm -> \n                    let asy = async {\n                        do! Async.Sleep delay\n                        doF parm\n                    } \n                    !cancellationTokenSourceO |> Option.iter (fun (tokenSource:System.Threading.CancellationTokenSource) -> tokenSource.Cancel())\n                    cancellationTokenSourceO := Some <| new System.Threading.CancellationTokenSource()\n                    Async.Start(asy, cancellationToken = (!cancellationTokenSourceO).Value.Token)\n            \n            \n            [< AutoOpen >]\n            module Monads =\n                module Seq =    \n                    let rtn = Seq.singleton\n                    let insertO  vSO              = vSO |> Option.map(Seq.map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vSR:Result<_,_>) = vSR |> function | Error m -> rtn (Error m) | Ok v -> Seq.map Ok v\n                    let absorbO  vOS              = vOS |> Seq.choose id\n                    let absorbR  vOS              = vOS |> Seq.choose (function Ok v -> Some v |_-> None)\n                    let ofOption vO = \n                        match vO with\n                        | Some v -> Seq.singleton v\n                        | None   -> Seq.empty\n                \n                /// Extensions to Async\n                module Async =\n                    let [< Inline >] inline rtn   v    = async.Return v\n                    let [< Inline >] inline bind  f vA = async.Bind(  vA, f)\n                    let [< Inline >] inline map   f    = bind (f >> rtn)\n                    /// Executes f Synchronously\n                    [< Inline \"throw 'iterS cannot be used in JavaScript!'\" >] \n                    let inline iterS (f: 'a->unit) = map f >> Async.RunSynchronously\n                    /// Executes f Asynchronously\n                    let [< Inline >] inline iterA f             = map f >> Async.Start\n                    let apply fA vA = async {\n                        let! fChild = Async.StartChild fA\n                        let! vChild = Async.StartChild vA\n                        let! f = fChild\n                        let! v = vChild \n                        return f v \n                    }\n                    let sleepThen f milliseconds = async {\n                        do! Async.Sleep milliseconds\n                        return f()\n                    }\n                    let (>>=)                              v f = bind f v\n                    let traverseSeq             f           sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO  vAO                           = vAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vAR:Result<_,_>)              = vAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                \n                \n                module Result =\n                    open Result\n                \n                    let errorf fmt = Printf.ksprintf Error fmt\n                \n                    let freeMessage                r = r   |> function Ok v -> Ok v   | Error e -> ResultMessage.freeMessage e |> Error\n                    let rtn                          = Ok\n                    let join                       r = Result.bind id r\n                    let flatten                    r = Result.bind id r\n                    let toOption                   r = r   |> function Ok v -> Some v |       _ -> None\n                    let defaultWith              f r = r   |> function Ok v ->      v | Error e -> f e\n                    let defaultValue             d r = r   |> function Ok v ->      v | Error _ -> d\n                    let failIfTrue               m v = if     v then m |> Error  else Ok () \n                    let failIfFalse              m v = if not v then m |> Error  else Ok () \n                    /// bind version that protects against exceptions\n                    let bindP                 f    r = match r with\n                                                       | Ok    v -> try   f v\n                                                                    with  e -> ExceptMsg (e.Message, e.StackTrace) |> Error\n                                                       | Error e ->       e                                        |> Error\n                    /// map version that protects against exceptions\n                    let inline mapP           f    m = bindP (f >> rtn) m            \n                    let iter                  fE f r = r   |> mapP f |> defaultWith fE                                                 : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map Ok           |> Option.defaultWith (f >> Error)\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> Ok None)\n                    let absorbO               f  vOR = vOR |> bindP (ofOption f)\n                    let (>>=)                    r f = bind f r\n                    let traverseSeq           f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bindP f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let result = Builder()\n                    \n                    module Operators =\n                        let inline (|>>) v f   = mapP  f v\n                        let inline (>>=) v f   = bindP f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                        let result = result\n                \n                \n                /// Taken from Nick Palladino's https://github.com/palladin/Eff\n                [< AutoOpen >]\n                module Eff =\n                    open System\n                \n                    type Effect = abstract UnPack     : Lambda         -> Effect \n                    and  Lambda = abstract Invoke<'X> : ('X -> Effect) -> ('X -> Effect)\n                \n                    type Eff<'U, 'A when 'U :> Effect> = Eff of (('A -> Effect) -> Effect) \n                        with  member this.Cont = match this with Eff cont -> cont\n                \n                    type Done<'A>(v : 'A) =\n                        member self.Value = v\n                        interface Effect with member self.UnPack(_ : Lambda) : Effect = self :> _ //new Done<'A>(v) :> _\n                \n                    let inline rtn  v = Eff (fun k -> k v)\n                    let bind  (f: 'a -> Eff<'U, 'b>) (effA: Eff<'U, 'a>) : Eff<'U, 'b> = \n                                        Eff (fun k -> \n                                                let (Eff effKa) = effA\n                                                effKa (fun v -> \n                                                    let (Eff effKb) = f v\n                                                    effKb k\n                                                )\n                                            )\n                \n                    module Eff =\n                //        [< Inline \"$effect.FsRoot_Library_Monads_Eff_Effect$UnPack({FsRoot_Library_Monads_Eff_Lambda$Invoke:function(k) { return function(p) { return $loop(k(p)) }; }})\" >]\n                //        let unpack loop (effect:Effect) = effect.UnPack { new Lambda with member self.Invoke<'X> (k' : 'X -> Effect) =  k' >> loop }\n                \n                        type LambdaT(loop) =\n                            interface Lambda with\n                                member __.Invoke<'X> (k : 'X -> Effect) : ('X -> Effect) = k >> loop \n                        let unpack loop (effect:Effect) = effect.UnPack (new LambdaT(loop))\n                        let done' (v :  'A) : Effect                           = new Done<'A>(v) :> _ \n                        let return' v  = Eff( fun _ -> done' v )\n                        let run<'U, 'A when 'U :> Effect> (eff: Eff<'U, 'A>) : 'A =\n                            match eff.Cont done' with\n                            | :? Done<'A> as done' -> done'.Value\n                            | v                    -> failwithf \"Unhandled effect %A\" v\n                        let runResult<'U, 'A when 'U :> Effect> (eff: Eff<'U, 'A>) = \n                            try\n                                match eff.Cont done' with\n                                | :? Done<'A> as done' -> Ok done'.Value\n                                //| v                    -> box v |> unbox<NoOp<_>> |> fun noop -> noop.K () |> loop\n                                | v                    -> Error <| errorMsgf \"Unhandled effect %A expecting\" v //typedefof<'A>\n                            with e -> \n                                Error <| ResultMessage.ExceptMsg(e.Message, e.StackTrace)\n                \n                \n                    let inline map   f  m  = bind (f >> rtn) m\n                    let inline apply fR vR = fR |> bind (fun f -> map f vR)\n                    \n                    [< AutoOpen >]\n                    module Operators =\n                        let inline (<*>) f v   = apply f v\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                    \n                    let traverseSeq            f     sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                          Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq           sq = traverseSeq id sq\n                    \n                    let inline insertO    vvO               = vvO   |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let inline insertR   (vvR:Result<_,_>)  = vvR   |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let inline insertFst (fst, vEf)         = vEf   |> map (fun v -> fst, v)\n                    let inline insertSnd (vEf, snd)         = vEf   |> map (fun v -> v, snd)\n                    \n                    type EffBuilder() = \n                        member self.Zero      (                 ) = rtn ()\n                        member self.Return    (v   :         'A ) = rtn v\n                        member self.ReturnFrom(eff : Eff<'U, 'A>) = eff\n                        member self.Bind      (eff, f           ) = bind f eff\n                        member self.Combine (first : Eff<'U, unit>, second : Eff<'U, 'B>) : Eff<'U, 'B> =  self.Bind(first, fun () -> second)\n                        member self.Delay (f : unit -> Eff<'U, 'A>) : Eff<'U, 'A> =  Eff (fun k -> let (Eff cont) = f () in cont k)\n                    //    member inline __.Delay       f                  = f\n                        member __.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.TryWith   (body, handler     ) = Eff(fun k -> try body() |> function Eff(f) -> f k with e -> handler e |> function Eff(f) -> f k)\n                        member this.TryFinally(body, compensation) = Eff(fun k -> try body() |> function Eff(f) -> f k finally   compensation()           )\n                        member this.Using     (disposable, body  ) = //wrap(fun r -> using (disposable:#System.IDisposable) (fun u -> body u |> getFun <| r) )\n                                    let body' = fun () -> body disposable\n                                    this.TryFinally(body', fun () -> if disposable :> obj <> null then (disposable:#System.IDisposable).Dispose() )\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    fun () -> this.Delay(fun () -> body enum.Current)))\n                    \n                    \n                    let eff = new EffBuilder()\n                    \n                    module State = \n                        type State<'S> = inherit Effect\n                        type Put<  'S>(v : 'S, k : unit -> Effect) =\n                            member self.Value = v\n                            member self.K = k\n                            interface State<'S> with\n                                member self.UnPack(lambda : Lambda) : Effect = new Put<'S>(v, lambda.Invoke<unit> k) :> _\n                    \n                        type Get<  'S>(k : 'S -> Effect) =\n                            member self.K = k\n                            interface State<'S> with\n                                member self.UnPack(lambda : Lambda) : Effect = new Get<'S>(lambda.Invoke<'S> k) :> _\n                    \n                        let get<'U, 'S when 'U :> State<'S>> (    ) : Eff<'U, 'S  > = Eff (fun k -> new Get<'S>(k   ) :> _)\n                        let put<'U, 'S when 'U :> State<'S>> (s:'S) : Eff<'U, unit> = Eff (fun k -> new Put<'S>(s, k) :> _)\n                    \n                        let rec stateHandler<'U, 'S, 'A when 'U :> State<'S>> (state: 'S) (eff: Eff<'U, 'A>) : Eff<'U, 'S * 'A> = \n                            let rec loop (doneK:'S * 'A -> Effect) (state:'S) : Effect -> Effect = function\n                                | :? Done<'A> as done'  -> doneK (state, done'.Value)\n                                | :? Put< 'S> as put    -> put.K ()           |>             loop doneK put.Value\n                                | :? Get< 'S> as get    -> get.K state        |>             loop doneK state \n                                | effect                -> effect             |> Eff.unpack (loop doneK state)\n                            Eff (fun doneK              -> eff.Cont Eff.done' |>             loop doneK state)\n                    \n                        let rec refHandler<'U, 'S, 'A when 'U :> State<'S>> (state: 'S) (eff: Eff<'U,'A>) : Eff<'U, 'A> = \n                            let valueRef = ref state\n                            let rec loop : Effect -> Effect = function\n                                | :? Put< 'S> as put     -> valueRef := put.Value\n                                                            put.K ()           |>            loop \n                                | :? Get< 'S> as get     -> get.K !valueRef    |>            loop  \n                                | effect                 -> effect             |> Eff.unpack loop\n                            Eff (fun _                   -> eff.Cont Eff.done' |>            loop )\n                    \n                    \n                    module GenericType =\n                        open Microsoft.FSharp.Quotations\n                        open Microsoft.FSharp.Quotations.Patterns\n                    \n                    //    let ( |GenericType|_| ) =\n                    //        (* methodinfo for typedefof<_> *)\n                    //        let tdo = \n                    //            let (Call(None,t,[])) = <@ typedefof<_> @>\n                    //            t.GetGenericMethodDefinition()\n                    //        (* match type t against generic def g *)\n                    //        let rec tymatch t (g:Type) =\n                    //            if t = typeof<obj> then None\n                    //            elif g.IsInterface then\n                    //                let ints = if t.IsInterface then [|t|] else t.GetInterfaces()\n                    //                ints |> Seq.tryPick (fun t -> if (t.GetGenericTypeDefinition() = g) then Some(t.GetGenericArguments()) else None)\n                    //            elif t.IsGenericType && t.GetGenericTypeDefinition() = g then\n                    //                Some(t.GetGenericArguments())\n                    //            else\n                    //                tymatch (t.BaseType) g\n                    //        fun (e:Expr<Type>) (t:Type) ->\n                    //            match e with\n                    //            | Call(None,mi,[]) ->\n                    //                if (mi.GetGenericMethodDefinition() = tdo) then\n                    //                    let [|ty|] = mi.GetGenericArguments()\n                    //                    if ty.IsGenericType then\n                    //                        let tydef = ty.GetGenericTypeDefinition()\n                    //                        tymatch t tydef\n                    //                    else None\n                    //                else\n                    //                    None\n                    //            | _ -> None\n                    \n                    module Log = \n                        type Log<'S> = inherit Effect\n                    \n                        type LogEntry<'S>(v : 'S, k : unit -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Log<'S> with\n                                member self.UnPack(lambda : Lambda) : Effect = new LogEntry<'S>(v, lambda.Invoke<unit> k) :> _\n                    \n                        let log<'U, 'S when 'U :> Log<'S>> (s:'S) : Eff<'U, unit> = Eff (fun k -> new LogEntry<'S>(s, k) :> _)\n                        let logf fmt = Printf.ksprintf log<_, string> fmt\n                        \n                        open GenericType\n                    \n                        let rec pureLogHandler<'U, 'S, 'A when 'U :> Log<'S>> (eff: Eff<'U, 'A>) : Eff<'U, 'A * list<'S>> = \n                            let rec loop (s: list<'S>) (doneK:('A * list<'S>) -> Effect) : Effect -> Effect = function\n                                | :? Done<    'A> as done' -> doneK (done'.Value, s)\n                                | :? LogEntry<'S> as log   -> log.K ()           |>             loop (log.Value :: s) doneK \n                                | effect                   -> effect             |> Eff.unpack (loop s                doneK)\n                            Eff (fun doneK                 -> eff.Cont Eff.done' |>             loop []               doneK)\n                    \n                        let rec consoleLogHandler<'U, 'S, 'A when 'U :> Log<'S>> (eff: Eff<'U, 'A>) : Eff<'U, 'A> = \n                            let rec loop : Effect -> Effect = function\n                                | :? LogEntry<'S> as log     -> printfn \"Log: %A\" log.Value\n                                                                log.K ()           |>            loop\n                                | effect                     -> effect             |> Eff.unpack loop\n                            Eff (fun _                       -> eff.Cont Eff.done' |>            loop )\n                    \n                        let rec ignoreLogHandler<'U, 'S, 'A when 'U :> Log<'S>> (eff: Eff<'U, 'A>) : Eff<'U, 'A> = \n                            let rec loop : Effect -> Effect = function\n                                | :? LogEntry<'S> as log     -> log.K ()           |>            loop\n                                | effect                     -> effect             |> Eff.unpack loop\n                            Eff (fun _                       -> eff.Cont Eff.done' |>            loop )\n                    \n                    module Rsl = \n                        type Rsl<'M> = inherit Effect\n                    \n                        type Fail<    'M>(v : 'M, k : unit -> Effect) =\n                            member self.Value = v\n                            member self.K     = k\n                            interface Rsl<'M> with member self.UnPack(lambda : Lambda) : Effect = new Fail<    'M>(v, lambda.Invoke<unit> k) :> _\n                    \n                    \n                        let fail<'U, 'M when 'U :> Rsl<'M>> (s:'M) : Eff<'U, unit> = Eff (fun k -> new Fail<    'M>(s, k) :> _)\n                        let inline ofResult (res:Result<'a,'b>) : Eff<'c,'a> = eff {\n                            match res with\n                            | Ok    v   -> return v\n                            | Error msg -> let! m = fail msg\n                                           return box () |> unbox\n                        }\n                    \n                        \n                        let rec RslHandler<'U, 'M, 'A when 'U :> Rsl<'M>> (eff: Eff<'U, 'A>) : Eff<'U, _> = \n                            let rec loop (doneK:(Result<'A,'M>) -> Effect) : Effect -> Effect = function\n                                | :? Done<    'A> as done' -> doneK (Ok    done'.Value)\n                                | :? Fail<    'M> as fail  -> doneK (Error fail .Value)\n                                | effect                   -> effect             |> Eff.unpack (loop doneK)\n                            Eff (fun doneK                 -> eff.Cont Eff.done' |>             loop doneK)\n                    \n                        let inline absorbR     vvEf             = vvEf  |> bind ofResult\n                        let inline absorbO   f vOEf             = vOEf  |> map (Result.ofOption  f) |> absorbR\n                    \n                type ResultM<'v, 'm> = ResultM of Option<'v> * ResultMessage<'m>\n                \n                let inline OkM              v    = ResultM (Some v, NoMsg)\n                let inline OkMWithMsg       v m  = ResultM(Some v, m)\n                //let inline OkMWithMsgs      v ms = ms |> ResultMessage.reduceMsgs |> OkMWithMsg v\n                \n                let inline ErrorM             m  = ResultM (None  , m    )\n                //let inline ErrorMWithMsgs     ms = ms |> ResultMessage.reduceMsgs |> ErrorM\n                let (|OkM|ErrorM|)             r = match r with\n                                                    | ResultM(Some v, m) -> OkM   (v, m)\n                                                    | ResultM(None  , e) -> ErrorM e\n                module ResultM =\n                \n                    type CheckError<'T> = CheckErrorF of ('T -> bool)\n                    let checkError   () = CheckErrorF (fun _ -> true )\n                    let checkErrorW  () = CheckErrorF (fun _ -> false)\n                \n                    let inline rtn                 v = OkM v\n                    let inline rtnM                m = OkMWithMsg () m\n                    let inline rtnr               vR = vR  |> Result.map OkM          |> Result.defaultWith       ErrorM\n                    let freeMessage                r = r   |> function Ok v -> Ok v   | Error e -> ResultMessage.freeMessage e |> Error\n                    let inline toResult            r = match r with\n                                                       | ResultM(Some v, _) -> Ok     v\n                                                       | ResultM(None  , e) -> Error  e\n                    let inline toResultD           r = match r with\n                                                       | ResultM(Some v, m) -> Ok    (v, m)\n                                                       | ResultM(None  , e) -> Error  e\n                    let toOption                   r = r   |> function ResultM (v,_) -> v\n                    let defaultWith              f r = r   |> toResult |> Result.defaultWith   f\n                    let defaultValue             d r = r   |> toResult |> Result.defaultValue  d\n                    let map         f  (ResultM (v, m)) = ResultM (v |> Option.map f, m)\n                    let mapMessage  fM (ResultM (v, m)) = ResultM (v, fM m)\n                    let bind                  f    r = match r with\n                                                       | ResultM(Some v, m) -> f v |> mapMessage (ResultMessage.addMsg m)\n                                                       | ResultM(None  , e) -> ResultM(None  , e)\n                    /// bind version that protects against exceptions\n                    let bindP                 f    r = match r with\n                                                       | ResultM(Some v, m) -> try f v |> mapMessage (ResultMessage.addMsg m)\n                                                                               with  e -> ExceptMsg (e.Message, e.StackTrace) |> ErrorM\n                                                       | ResultM(None  , e) -> ResultM(None  , e)\n                    let bindM                 f    m = rtnM m |> bindP f\n                \n                    let check (CheckErrorF k) vR = vR |> function ResultM(Some _, m) when ResultMessage.isFatalF k m -> ErrorM m |_-> vR\n                \n                    /// map version that protects against exceptions\n                    let inline mapP           f    m = bindP (f >> rtn) m\n                    let iter                  fM f r = r   |> mapP f |> function | ResultM(Some (), m) -> () | ResultM(None, m) -> fM m  : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map OkM          |> Option.defaultWith (f >> ErrorM)\n                    let ofResult                  vR = vR  |> rtnr\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> OkM None)\n                    let absorbO               f  vOR = vOR |> bindP (ofOption f)\n                    let addMsg                  m  r = r |> mapMessage (ResultMessage.addMsg m)\n                    let failIfFatalMsgF         f  r = r |> function OkM (v, m) when ResultMessage.isFatalF f m -> ErrorM m |_-> r\n                    let failIfFatalMsg             r = r |> function OkM (v, m) when ResultMessage.isFatal    m -> ErrorM m |_-> r\n                    let failIfFatalMsgW            r = r |> function OkM (v, m) when ResultMessage.isFatalW   m -> ErrorM m |_-> r\n                    let (>>=)                    r f = bind f r\n                    let rec    traverseSeq    f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline __.Return          x       = rtn  x\n                        member inline __.ReturnFrom      x       =     (x:ResultM<_,_>)\n                        member inline __.ReturnFrom      x       =     (x:Result< _,_>)\n                        member inline __.ReturnFrom      x       = rtnM x\n                        member        __.Bind           (w , r ) = bindP  r w\n                        member        __.Bind           (w , r ) = bindM  r w\n                        member inline __.Zero           ()       = rtn ()\n                        member inline __.Delay           f       = f\n                        member inline __.Combine        (a, b)   = a |> bind b\n                        member inline __.Run             f       = OkM () |> bindP f\n                        member __.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member __.TryFinally(body, compensation) = try body() finally   compensation()\n                        member __.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member __.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    module Operators =\n                        let inline (|>>) v f   = mapP  f v\n                        let inline (>>=) v f   = bindP f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                \n                [< AutoOpen >]\n                module ResultMAutoOpen =\n                    open ResultM\n                    \n                    let resultM = Builder()\n                    \n                \n                \n                type AsyncResultM<'v, 'm> = Async<ResultM<'v, 'm>>\n                \n                /// A computation expression to build an Async<Result<'ok, 'error>> value\n                module AsyncResultM =\n                    let mapError fE v  = v |> Async.map (ResultM.mapMessage fE)\n                    let freeMessage v  = v |> Async.map  ResultM.freeMessage\n                \n                    let rtn         v   = async.Return(OkM v  )\n                    let rtnr        vR  = async.Return(ResultM.rtnr vR)\n                    let rtnR        vR  = async.Return    vR\n                    let rtnM        vM  = async.Return(ResultM.rtnM vM)\n                    let rtnrA       vrA = vrA |> Async.map    ResultM.ofResult\n                    let iterS  fE f vRA = Async.iterS (ResultM.iter fE f) vRA\n                    let iterA  fE f vRA = Async.iterA (ResultM.iter fE f) vRA\n                    let iterpS    f vRA = vRA |> iterS (ResultMessage.summarized >> print) f\n                    let iterpA    f vRA = vRA |> iterA (ResultMessage.summarized >> print) f\n                    let bind  (fRA:'a -> Async<ResultM<'b,'c>>)  (vRA: Async<ResultM<'a,'c>>) : Async<ResultM<'b,'c>>= async {\n                        try \n                            let!  vR = vRA\n                            match vR with\n                            | OkM   (v, m) -> return! fRA   v |> Async.map (ResultM.addMsg m)\n                            | ErrorM    m  -> return  ErrorM m\n                        with  e -> return ExceptMsg (e.Message, e.StackTrace) |> ErrorM\n                    }\n                    let inline bindr  f a  = rtnr   a |> bind f : AsyncResultM<_,_>\n                    let inline bindM  f a  = rtnM   a |> bind f : AsyncResultM<_,_>\n                    let inline bindrA f a  = rtnrA  a |> bind f : AsyncResultM<_,_>\n                    let inline bindR  f a  = rtnR   a |> bind f : AsyncResultM<_,_>\n                    let inline map    f m = bind  (f >> rtn) m            \n                    let rec whileLoop cond fRA =\n                        if   cond () \n                        then fRA  () |> bind (fun () -> whileLoop cond fRA)\n                        else rtn  ()\n                    let (>>=)                              v f = bind f v\n                    let rec    traverseSeq     f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO   vRAO                         = vRAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR ( vRAR:Result<_,_>)            = vRAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let absorbR   vRRA                         = vRRA |> Async.map (Result.bindP   id)\n                    let absorbO f vORA                         = vORA |> Async.map (Result.absorbO  f)\n                    type AsyncResultMBuilder() =\n                        member __.ReturnFrom vRA        : Async<ResultM<'v  , 'm>> =           vRA\n                        member __.ReturnFrom vR         : Async<ResultM<'v  , 'm>> = rtnr      vR\n                        member __.ReturnFrom vR         : Async<ResultM<unit, 'm>> = rtnM      vR\n                        member __.ReturnFrom vR         : Async<ResultM<'v  , 'm>> = rtnR      vR\n                        member __.ReturnFrom vR         : Async<ResultM<'v  , 'm>> = rtnrA     vR\n                        member __.Return     v          : Async<ResultM<'v  , 'm>> = rtn       v  \n                        member __.Zero       ()         : Async<ResultM<unit, 'm>> = rtn       () \n                        member __.Bind      (vRA,  fRA) : Async<ResultM<'b  , 'm>> = bind fRA  vRA\n                        member __.Bind       (w , r )                              = bindr   r w\n                        member __.Bind       (w , r )                              = bindM   r w\n                        member __.Bind       (w , r )                              = bindR   r w\n                        member __.Bind       (w , r )                              = bindrA  r w\n                        member __.Combine   (vRA,  fRA) : Async<ResultM<'b  , 'm>> = bind fRA  vRA\n                        member __.Combine   (vR ,  fRA) : Async<ResultM<'b  , 'm>> = bind fRA (vR  |> rtnR)\n                        member __.Delay            fRA                             = fRA\n                        member __.Run              fRA                             = rtn () |> bind fRA\n                        member __.TryWith   (fRA , hnd) : Async<ResultM<'a  , 'm>> = async { try return! fRA() with e -> return! hnd e  }\n                        member __.TryFinally(fRA , fn ) : Async<ResultM<'a  , 'm>> = async { try return! fRA() finally   fn  () }\n                        member __.Using(resource , fRA) : Async<ResultM<'a  , 'm>> = async.Using(resource,       fRA)\n                        member __.While   (guard , fRA) : Async<ResultM<unit, 'a>> = whileLoop guard fRA \n                        member th.For  (s: 'a seq, fRA) : Async<ResultM<unit, 'b>> = th.Using(s.GetEnumerator (), fun enum ->\n                                                                                        th.While(enum.MoveNext,\n                                                                                            th.Delay(fun () -> fRA enum.Current)))\n                \n                [<AutoOpen>]\n                module AsyncResultMAutoOpen =\n                    open AsyncResultM\n                \n                    let asyncResultM = AsyncResultMBuilder()\n                \n                    // Having Async<_> members as extensions gives them lower priority in\n                    // overload resolution between Async<_> and Async<Result<_,_>>.\n                    type AsyncResultMBuilder with\n                    member __.ReturnFrom (vA: Async<_>     ) : Async<ResultM<_,_>> =           Async.map OkM vA\n                    member __.Bind       (vA: Async<_>, fRA) : Async<ResultM<_,_>> = bind fRA (Async.map OkM vA)\n                    member __.Combine    (vA: Async<_>, fRA) : Async<ResultM<_,_>> = bind fRA (Async.map OkM vA)\n                \n            type System.String with\n                member this.Substring2(from, n) = \n                    if   n    <= 0           then \"\"\n                    elif from <  0           then this.Substring2(0, n + from)\n                    elif from >= this.Length then \"\"\n                    else this.Substring(from, min n (this.Length - from))\n                member this.Left             n  = if n < 0 \n                                                  then this.Substring2(0, this.Length + n)\n                                                  else this.Substring2(0, n              )\n                member this.Right            n  = this.Substring2(max 0 (this.Length - n), this.Length)\n            \n            module String =\n                let splitByChar (c: char) (s: string) = s.Split c\n                let splitInTwoO spl txt = \n                    let i = (txt:string).IndexOf (spl:string)\n                    if  i = -1 then None else\n                    (txt.Left(i), txt.Substring (i + spl.Length) )\n                    |> Some\n                let delimitedO  op cl txt =\n                    splitInTwoO op txt\n                    |> Option.bind(fun (bef, sec) ->\n                        splitInTwoO cl sec\n                        |> Option.map(fun (mid, aft) -> bef, mid, aft)\n                    )\n                let contains     sub  (whole: string) = whole.Contains sub\n                let trim                  (s: string) = s.Trim()\n                let append     (a: string)(b: string) =  a + b\n                let skipFirstLine (txt:string) = txt.IndexOf '\\n' |> fun i -> if i < 0 then \"\" else txt.[i + 1..]\n                let unindent (s:string) =\n                    let lines = s.Split '\\n'\n                    let n     = lines \n                                |> Seq.tryFind (fun l -> l.Trim() <> \"\")\n                                |> Option.defaultValue \"\"\n                                |> Seq.tryFindIndex ((<>) ' ') \n                                |> Option.defaultValue 0\n                    lines \n                    |> Seq.map    (fun l -> if l.Length <= n then \"\" else l.Substring n)\n                    |> Seq.filter (fun s -> s.StartsWith \"# 1 \" |> not)\n                let indent n (s:string) =\n                    s.Split '\\n'\n                    |> Seq.map ((+) (String.replicate n \" \"))\n                let unindentStr = unindent >> String.concat \"\\n\"\n                let indentStr i = indent i >> String.concat \"\\n\" \n                let skipLastLine =\n                       splitByChar '\\n' \n                    >> fun s -> s.[0 .. (max 0 (s.Length - 2)) ]\n                    >> String.concat \"\\n\"\n                let (|StartsWith|_|) (start:string) (s:string) = if s.StartsWith start then Some s.[start.Length..                          ] else None\n                let (|EndsWith  |_|) (ends :string) (s:string) = if s.EndsWith   ends  then Some s.[0           ..s.Length - ends.Length - 1] else None\n                \n            \n            ///    let ls = [ \"d1d\"; \"a\"; \"b\"; \"c\"; \"a3a\"; \"b2b\"; \"c1c\"]\n            ///    \n            ///    ls |> List.sortWith ( asc Seq.length)            |> print // [\"a\"; \"b\"; \"c\"; \"dd\"; \"aa\"; \"bb\"; \"cc\"]\n            ///    ls |> List.sortWith (desc Seq.length &> asc (Seq.tryItem 1) &> asc  id) |> print // [\"aa\"; \"bb\"; \"cc\"; \"dd\"; \"a\"; \"b\"; \"c\"]\n            ///    ls |> List.sortWith ( asc Seq.length &> desc id) |> print // [\"c\"; \"b\"; \"a\"; \"dd\"; \"cc\"; \"bb\"; \"aa\"]\n            module SortWith =\n                let asc   f    a b = compare (f a) (f b)\n                let desc  f    a b = compare (f b) (f a)\n                let (&>) c1 c2 a b = match c1 a b with 0 -> c2 a b | r -> r\n            \n            module ParseO =\n                let tryParseWith tryParseFunc = tryParseFunc >> function\n                        | true, v    -> Some v\n                        | false, _   -> None\n                \n                let parseDateO   = tryParseWith System.DateTime.TryParse\n                let parseIntO    = tryParseWith System.Int32   .TryParse\n                let parseSingleO = tryParseWith System.Single  .TryParse\n                let parseDoubleO = tryParseWith System.Double  .TryParse\n                let parseGuidO   = tryParseWith System.Guid    .TryParse\n                // etc.\n                \n                // active patterns for try-parsing strings\n                let (|Date  |_|) = parseDateO\n                let (|Int   |_|) = parseIntO\n                let (|Single|_|) = parseSingleO\n                let (|Double|_|) = parseDoubleO\n                let (|Guid  |_|) = parseGuidO\n                \n            module Serializer =\n                open System\n            \n                type JsonIntermediate = {\n                    tryFloat    : unit   ->  float                option\n                    tryInt      : unit   ->  int                  option\n                    tryString   : unit   ->  string               option\n                    tryBool     : unit   ->  bool                 option\n                    tryArray    : unit   -> (JsonIntermediate []) option\n                    tryField    : string ->  JsonIntermediate     option\n                    isObject    : unit   ->  bool\n                    isNull      : unit   ->  bool\n                }\n            \n                type SerS<'T> = ('T                 -> string   )        //      Serialization function\n                type SerD<'T> = (JsonIntermediate   -> 'T option)        //    deSerialization function\n                type Ser< 'T> = SerS<'T> * SerD<'T>                      // both Serialization functions\n            \n                let serialize (ser: Ser<_>) v = fst ser v\n                let (|Field|_|) field j = j.tryField field\n            \n                let [< Inline >] inline sprintU v = sprintf \"%A\"       v\n                let [< Inline >] inline sprintQ v = sprintf \"\\\"%A\\\"\"   v\n                let              inline sprintA v = String.concat \", \" v |> sprintf \"[%s]\"\n            \n                let toJsonString (v:string) =\n                    seq {\n                        yield '\"'\n                        if String.IsNullOrEmpty v |> not then\n                            for i = 0 to v.Length - 1 do\n                                let c = v.[i]\n                                let ci = int c\n                                if ci >= 0 && ci <= 7 || ci = 11 || ci >= 14 && ci <= 31 then\n                                    yield! sprintf \"\\\\u%04x\" ci\n                                else \n                                match c with\n                                | '\\b' -> yield! \"\\\\b\"\n                                | '\\t' -> yield! \"\\\\t\"\n                                | '\\n' -> yield! \"\\\\n\"\n                                | '\\f' -> yield! \"\\\\f\"\n                                | '\\r' -> yield! \"\\\\r\"\n                                | '\"'  -> yield! \"\\\\\\\"\"\n                                | '\\\\' -> yield! \"\\\\\\\\\"\n                                | _    -> yield c\n                        yield '\"'\n                    } |> Seq.toArray|> String\n            \n                let serString : Ser<string> = toJsonString , (fun j -> j.tryString() )\n                let serFloat  : Ser<float > = sprintU      , (fun j -> j.tryFloat () )\n                let serInt    : Ser<int   > = sprintU      , (fun j -> j.tryInt   () )\n                let serBool   : Ser<bool  > = sprintU      , (fun j -> j.tryBool  () )\n            \n                let [< Inline >] inline serId  (get: 'a -> System.Guid) (set:System.Guid -> 'a) (print: 'a->string) : Ser<'a> =\n                    let s               = System.Guid.Empty |> set |> print |> fun (s:string) -> s.Split ' ' |> Array.head\n                    let sQ              = sprintf \"%A\" s\n                    let serialize   gid = get gid |> string |> sprintf \"{%10s :%A}\" sQ\n                    let deserialize j   = j.tryField s \n                                          |> Option.bind (fun jf -> jf.tryString() ) \n                                          |> Option.bind ParseO.parseGuidO \n                                          |> Option.map  set\n                    serialize, deserialize\n            \n                let serField (name:string) (get:'D->'e) (set:'e->'D->'D) (serFuncs:Ser<'e>) : string * SerS<'D> * ('D -> SerD<'D>) = \n                    serFuncs |> fun (ser, deser) -> name, get >> ser, (fun rc j -> deser j |> Option.map (fun v -> set v rc) ) \n                    \n                let [< Inline >] serRecord init (fields: #seq<(string * SerS<'D> * ('D -> SerD<'D>))>) : Ser<'D> =\n                    if isNull (init :> obj) then failwith \"Initial record is null\"\n                    let serialize   dim = fields |> Seq.map  (fun     (n,  ser, _deser) -> sprintf \"%A: %s\" n (ser dim)) |> String.concat \", \" |> sprintf \"{%s}\"\n                    let deserialize j   = fields |> Seq.fold (fun dim (n, _ser,  deser) -> j.tryField n |> Option.bind (deser dim) |> Option.defaultValue dim)   init |> Some\n                    serialize, deserialize\n                \n                let serSeq (ser:Ser<'D>) : Ser<'D seq     > = (Seq   .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Seq.ofArray)\n                let serArr (ser:Ser<'D>) : Ser<'D []      > = (Array .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser))                          )\n                let serLst (ser:Ser<'D>) : Ser<'D list    > = (List  .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Seq.toList )\n                let serSet (ser:Ser<'D>) : Ser<Set<'D>    > = (Set   .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Set        )\n                let serOpt (ser:Ser<'D>) : Ser<'D option  > = (Option.map (fst ser) >> Option.defaultValue \"null\"              ), (fun j -> (if j.isNull() then None else              snd ser j)|> Some                  )\n                let serDup(serFst,serSnd): Ser<'a * 'b    > = (fun (f,s  ) -> sprintf \"[%s, %s]\" (fst serFst f) (fst serSnd s) ), (fun j -> j.tryArray () \n                                                                                                                                            |> function \n                                                                                                                                                | Some [| j1 ; j2 |] -> match snd serFst j1, snd serSnd j2 with\n                                                                                                                                                                        | Some f, Some s -> Some(f, s) |_->None\n                                                                                                                                                | _ -> None )\n                let serTrp(sF,sS,sT)      : Ser<'a *'b*'c > = (fun (f,s,t) -> sprintf \"[%s, %s, %s]\" (fst sF f) (fst sS s)  (fst sT t)) , (fun j -> j.tryArray () \n                                                                                                                                                    |> function \n                                                                                                                                                        | Some [| j1 ;j2; j3|]   -> match snd sF j1, snd sS j2, snd sT j3 with\n                                                                                                                                                                                    | Some f, Some s, Some t -> Some(f, s, t) |_-> None\n                                                                                                                                                        | _ -> None ) \n                let serMap serKey serElm : Ser<Map<'k, 'e>> =   serDup(serKey, serElm)\n                                                                |> serSeq \n                                                                |> (fun serKVPs -> (Seq.map (fun kvp -> kvp.Key, kvp.Value) >> fst serKVPs) , (snd serKVPs >> Option.map Map) )\n            \n            \n            [<System.Runtime.CompilerServices.Extension >]\n            type MailboxProcessorExt =\n                [<System.Runtime.CompilerServices.Extension ; Inline \"throw 'PostAndReply not available in JavaScript'\" >]\n                static member PostAndReply     (agent:MailboxProcessor<_>, msg, ?timeout) = agent.PostAndReply     ((fun reply -> reply, msg), ?timeout= timeout)\n                [<System.Runtime.CompilerServices.Extension>]\n                static member PostAndAsyncReply(agent:MailboxProcessor<_>, msg, ?timeout) = agent.PostAndAsyncReply((fun reply -> reply, msg), ?timeout= timeout)\n            //    [<System.Runtime.CompilerServices.Extension>]\n            ///    static member PostF(agent:MailboxProcessor<_>, f, ?timeout) = agent.Post(fun v -> async { return f v })\n            \n            module Mailbox =\n            \n                /// A simple Mailbox processor to serially process Async tasks\n                /// use:\n                ///      let logThisMsgA = Mailbox.iterA (printfn \"%A\") (fun msg -> async { printfn \"Log: %s\" msg } )\n                ///      logThisMsgA.Post \"message Async\"\n                ///      \n                let iterA hndl f =\n                    MailboxProcessor.Start(fun inbox ->\n                        async {\n                            while true do\n                                try       let!   msg = inbox.Receive()\n                                          do!  f msg\n                                with e -> hndl e\n                        }\n                    )\n                    \n                /// A simple Mailbox processor to serially process tasks\n                /// use:\n                ///      let logThisMsg = Mailbox.iter (printfn \"%A\") (printfn \"Log: %s\")\n                ///      logThisMsg.Post \"message\"\n                ///      \n                let iter hndl f = iterA hndl (fun msg -> async { f msg } )\n                \n                /// A simple Mailbox processor to serially and synchronously process tasks\n                /// use:\n                ///      let toUpperCaseA = Mailbox.callA (fun (msg:string) -> \n                ///                                async { return msg.ToUpper() } )\n                ///\n                ///      toUpperCaseA.PostAndReply(fun reply -> reply, \"message\") \n                ///      |> printfn \"%s\"\n                ///\n                ///      toUpperCaseA.PostAndReply \"message\"\n                ///      |> printfn \"%s\"\n                ///\n                ///      async {\n                ///          let! res = toUpperCaseA.PostAndAsyncReply(fun reply -> \n                ///                                                        reply, \"message\")\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///\n                ///      async {\n                ///          let! res = toUpperCaseA.PostAndAsyncReply \"message\"\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously    \n                ///      \n                let callA hndl f = iterA hndl (fun ((replyChannel: AsyncReplyChannel<_>), msg) -> async {\n                    let! r = f msg\n                    replyChannel.Reply r\n                })\n                \n                /// A simple Mailbox processor to serially and synchronously process tasks\n                /// use:\n                ///      let toUpperCase = Mailbox.call (fun (msg:string) -> msg.ToUpper() )\n                ///      \n                ///      toUpperCase.PostAndReply(fun reply -> reply, \"message\") \n                ///      |> printfn \"%s\"\n                ///      \n                ///      toUpperCase.PostAndReply \"message\"\n                ///      |> printfn \"%s\"\n                ///      \n                ///      async {\n                ///          let! res = toUpperCase.PostAndAsyncReply(fun reply -> \n                ///                                                       reply, \"message\")\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///      \n                ///      async {\n                ///          let! res = toUpperCase.PostAndAsyncReply \"message\"\n                ///          printfn \"Async: %s\" res\n                ///      } |> Async.RunSynchronously\n                ///      \n                let call hndl f = callA hndl (fun msg -> async { return f msg } )\n                \n                /// A Mailbox processor that maintains a state\n                let foldA hndl f initState =\n                    MailboxProcessor.Start(fun inbox ->\n                        let rec loop state : Async<unit> = async {\n                            try       let! msg      = inbox.Receive()\n                                      let! newState = f state msg\n                                      return! loop newState\n                            with e -> return! loop (hndl e state)\n                        }\n                        loop initState\n                    )\n            \n                /// A Mailbox processor that maintains a state\n                let fold hndl f initState = foldA hndl (fun state msg -> async { return f state msg } ) initState\n                \n                /// A Mailbox processor that maintains a state (pass an error handler not a folder function)\n                /// use: \n                ///      agent |> Mailbox.StateFull.apply (fun state -> state + 1)\n                ///      agent |> Mailbox.StateFull.getState\n                let stateFull hndl initState =\n                    MailboxProcessor.Start(fun inbox ->\n                        let rec loop state : Async<unit> = async {\n                            try       let! f        = inbox.Receive()\n                                      let! newState = f state\n                                      return! loop newState\n                            with e -> return! loop (hndl e state)\n                        }\n                        loop initState\n                    )\n                    \n                let defHandler ex st = print ex ; st\n                    \n                module StateFull =\n                    let getStateA     (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndAsyncReply(fun (reply:AsyncReplyChannel<_>) -> fun v -> async { reply.Reply v ; return v })\n                    let setState    v (agent: MailboxProcessor<'a->Async<'a>>) = agent.Post(fun _ -> async { return    v })\n                    let applyA      f (agent: MailboxProcessor<'a->Async<'a>>) = agent.Post(fun v -> async { return! f v })\n                    let apply       f (agent: MailboxProcessor<'a->Async<'a>>) = agent |> applyA (fun v -> async { return  f v })\n                    let applyReplyA f (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndAsyncReply(fun (reply:AsyncReplyChannel<'r>) -> \n                                                                                                fun v -> async {\n                                                                                                    let! st, r = f v\n                                                                                                    reply.Reply r\n                                                                                                    return st \n                                                                                                })\n                    let applyReply  f (agent: MailboxProcessor<'a->Async<'a>>) = agent |> applyReplyA (fun v -> async { return  f v })\n                    [< Inline \"throw 'getState not available in JavaScript'\" >]\n                    let getState      (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndReply     (fun (reply:AsyncReplyChannel<_>) -> fun v -> async { reply.Reply v ; return v })\n                    /// synchronous version pf applyReply\n                    [< Inline \"throw 'applyReplyS not available in JavaScript'\" >]\n                    let applyReplyS f (agent: MailboxProcessor<'a->Async<'a>>) = agent.PostAndReply(fun (reply:AsyncReplyChannel<'r>) -> \n                                                                                                fun v -> async {\n                                                                                                    let st, r = f v\n                                                                                                    reply.Reply r\n                                                                                                    return st \n                                                                                                })\n            \n        /// Essentials that cannot run in Javascript (WebSharper)\n        [< AutoOpen >]\n        module LibraryNoJS =\n            //#r @\"..\\packages\\FSharp.Data\\lib\\net45\\FSharp.Data.dll\"\n            module Serializer =\n                open Serializer\n                open FSharp.Data\n            \n                let rec getJsonIntermediate df di ds db da (j:JsonValue) : JsonIntermediate =\n                    let jsonInt = getJsonIntermediate df di ds db da\n                    {\n                        tryFloat    = fun () -> (match j with JsonValue.Float   v ->      v |> Some | JsonValue.Number v -> float v |> Some    |_-> None) |> Option.orElseWith df\n                        tryInt      = fun () -> (match j with JsonValue.Float   v -> int  v |> Some | JsonValue.Number v -> int   v |> Some    |_-> None) |> Option.orElseWith di\n                        tryString   = fun () -> (match j with JsonValue.String  v ->      v |> Some                                            |_-> None) |> Option.orElseWith ds\n                        tryBool     = fun () -> (match j with JsonValue.Boolean v ->      v |> Some                                            |_-> None) |> Option.orElseWith db\n                        tryArray    = fun () -> (match j with JsonValue.Array   v ->      v |> Array.map jsonInt |> Some                       |_-> None) |> Option.orElseWith (fun () -> da  jsonInt   )\n                        tryField    = fun fl -> j.TryGetProperty fl |> Option.map jsonInt                                                                 \n                        isObject    = fun () -> (match j with JsonValue.Record  _ ->       true |_-> false)\n                        isNull      = fun () -> (match j with JsonValue.Null      ->       true |_-> false)\n                    }\n            \n            \n                let deserialize df di ds db da (ser: Serializer.Ser<_>) js = \n                    JsonValue.TryParse js //|>! print\n                    |> Option.map  (getJsonIntermediate df di ds db da)\n                    |> Option.bind (snd ser)\n            \n                let tryDeserialize ser = \n                    deserialize\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        ser\n            \n                let deserializeWithDefs ser = \n                    deserialize\n                        (fun _   -> Some 0.0                          )\n                        (fun _   -> Some 0                            )\n                        (fun _   -> Some \"\"                           )\n                        (fun _   -> Some false                        )\n                        (fun _   -> Some [||]                         )\n                        ser\n            \n                let deserializeWithFail ser = \n                    deserialize\n                        (fun _   -> failwith  \"Error expecting float\"    )\n                        (fun _   -> failwith  \"Error expecting int\"      )\n                        (fun _   -> failwith  \"Error expecting string\"   )\n                        (fun _   -> failwith  \"Error expecting bool\"     )\n                        (fun _   -> failwith  \"Error expecting array\"    )\n                        ser\n            \n                open FSharp.Reflection\n            \n                let inline serObj ((ser, deser):Ser<'T>) : string * Ser<obj> = typedefof<'T>.FullName, (unbox >> ser, deser >> Option.map box)\n            \n                let serDU<'DU when 'DU : equality> (sers : (string * Ser<obj>) seq) =\n                    let cases  = FSharpType.GetUnionCases             typeof<'DU>\n                    let dCases =\n                        cases\n                        |> Array.map (fun case ->\n                            if case.GetFields().Length = 0 then\n                                let serC         _ = sprintf \"{%A:1}\" case.Name\n                                let deserC       _ = FSharpValue.MakeUnion(case, [||]) :?> 'DU |> Some \n                                case.Tag, (serC, deserC)\n                            else\n                                let sers2 =\n                                    case.GetFields() |> Array.map(fun fld ->\n                                        let tn = fld.PropertyType.FullName\n                                        sers \n                                        |> Seq.tryPick(fun (nm, ser) -> if nm = tn then Some ser else None)\n                                        |> Option.defaultWith (fun () -> \n                                            sers |> Seq.map fst |> String.concat \", \"\n                                            |> failwithf \"serDU: Could not find Ser<%s> for %s. Provided: %s\" tn typedefof<'DU>.FullName \n                                        )\n                                    ) \n                                let getValues      = box<'DU> >> FSharpValue.PreComputeUnionReader case \n                                let setValues      = FSharpValue.PreComputeUnionConstructor case >> unbox<'DU>\n                                let serC (v:'DU) =\n                                    Seq.zip (getValues v) sers2\n                                    |> Seq.map (fun (vi, seri) -> fst seri vi )\n                                    |> String.concat \", \"\n                                    |> sprintf \"{%A:[%s]}\" case.Name\n                                let deserC (j:JsonIntermediate) = \n                                    match j with \n                                    | Field case.Name j2 ->\n                                        match j2.tryArray () with\n                                        | None -> None\n                                        | Some js -> \n                                        Array.zip js sers2\n                                        |> Array.choose (fun (ji, seri) -> snd seri ji)\n                                        |> setValues\n                                        |> Some\n                                    |_-> None \n                                case.Tag, (serC, deserC)\n                        ) |> dict\n                    let readTag   = box<'DU> >> FSharpValue.PreComputeUnionTagReader typeof<'DU> >> fun i -> dCases.[i]\n                    let serDU   v = (readTag v |> fst) v\n                    let deserDU j =\n                        let case =  cases |> Seq.pick(fun case -> match j with Field case.Name _ -> Some case |_-> None)\n                        snd dCases.[case.Tag] j\n                    serDU, deserDU\n            \n                    \n            module Default =\n                open FSharp.Reflection\n            \n                let defaults vs = vs |> Seq.map (fun v -> v.GetType().FullName, v ) |> dict\n            \n                let defs = \n                    defaults [\n                        box 0\n                        box 0L\n                        box 0.\n                        box 0.F\n                        box \"\"\n                        box false\n                        box System.Guid.Empty\n                        box System.DateTime.MinValue\n                    ]\n            \n                let rec defaultValue defs (t:System.Type) : obj =\n                    match (defs:System.Collections.Generic.IDictionary<string, obj>).TryGetValue t.FullName with\n                    | true , v -> v\n                    | false, _ ->\n                    if t.IsArray then \n                        System.Array.CreateInstance(t.GetElementType(), 0) |> box\n                    else        \n                    let c = t.GetConstructor System.Type.EmptyTypes\n                    if  isNull c |> not then\n                        c.Invoke [||]\n                    elif FSharpType.IsRecord t then\n                        FSharpType.GetRecordFields t\n                        |> Array.map (fun fld -> fld.PropertyType )\n                        |> createArray (defaultValue defs)\n                        |> fun os -> FSharpValue.MakeRecord(t, os)\n                    elif FSharpType.IsTuple t then\n                        FSharpType.GetTupleElements t\n                        |> createArray (defaultValue defs)\n                        |> fun os -> FSharpValue.MakeTuple(os, t)\n                    elif FSharpType.IsUnion t then\n                        let case = FSharpType.GetUnionCases t |> Seq.head\n                        case.GetFields()\n                        |> Array.map (fun fld -> fld.PropertyType )\n                        |> createArray (defaultValue defs)\n                        |> fun os -> FSharpValue.MakeUnion(case, os)\n                    else failwithf \"Could no create default for %s\" t.FullName\n            \n                and createArray defs (ts : System.Type []) = ts |> Array.map defs\n            \n                let inline value<'T> : 'T = typeof<'T> |> defaultValue defs |> unbox\n            \n            \n    \n    //#cd @\"..\\projects\\StackOverflow\\src\"\n    \n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n    \n    //#define WEBSHARPER\n    \n    [< JavaScript >]\n    module StackOverflow =\n        //#r \"..\\..\\LayoutEngine\\bin\\LayoutEngine.dll\"\n        //#nowarn \"1178\" \"1182\" \"3180\" \"52\"\n        \n        [< AutoOpen >]\n        module Templating =\n            open WebSharper.UI.Templating\n            let [< Literal >] rootdir = @\"..\\website\"\n        \n            let [< Literal >] TemplatesFileName = rootdir + @\"\\Templates.html\"\n            type TemplateLib  = Template< TemplatesFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n        \n            let [< Literal >] LoginFileName = rootdir + @\"\\Login.html\"\n            type TemplateLogin  = Template< LoginFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n        \n            if IsClient then printfn \"%s\" TemplatesFileName\n         \n        //#r @\"..\\packages\\other\\FSharp.Data.SqlClient\\lib\\net40\\FSharp.Data.SqlClient.dll\"\n        //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Data.dll\"\n        \n        [< JavaScript false >]\n        module SQLServer =\n            open FSharp.Data\n            open FSharp.Data.SqlClient\n        \n            let [< Literal >] conn = @\"Data Source=abehome;Initial Catalog=CIPHERSpaceDB;UID=sa;PWD=memc52\"\n        \n            type EventDB = SqlProgrammabilityProvider<conn>\n            \n            let nuevoEvento tipo evento : AsyncResultM<_, unit> = asyncResultM {\n                let tbl = new EventDB.Prozper.Tables.EventStore()\n                let c = tbl.NewRow()\n                c.TypeOfEvent <- tipo\n                c.Event       <- evento\n                tbl.Rows.Add c\n                let n = tbl.Update()\n                if n <> 1 then do! errorMsgf \"New event was not added (%d).\" n\n                return c.EventSeq\n            }\n        \n            let leerEventos nevento : AsyncResultM<_, unit> = asyncResultM {\n                use  qry = new SqlCommandProvider<\"\"\"SELECT * FROM Prozper.EventStore WHERE EventSeq > @NumEvento ORDER BY EventSeq\"\"\", conn, ResultType = ResultType.Tuples>(conn)\n                let  r   = qry.Execute(nevento) |> Seq.toArray\n                return r\n            } \n        type IdAliado = IdAliado of string\n        \n        type TipoAliado =\n        | Master\n        | Regular\n        \n        type Pais =\n        | USA\n        | Venezuela \n        | Argentina\n        | OtroP of string\n            with \n                static member tryParse (s:string) = \n                    match s.Trim() with\n                    | \"\"               -> None    \n                    | \"USA\"            -> Some <| USA\n                    | \"Venezuela\"      -> Some <| Venezuela\n                    | \"Argentina\"      -> Some <| Argentina\n                    | s                -> Some <| OtroP s\n        \n        type Estado =\n        | Texas\n        | Florida\n        | OtroS of string\n            with \n                static member tryParse (s:string) = \n                    match s.Trim() with\n                    | \"\"               -> None    \n                    | \"Texas\"          -> Some <| Texas\n                    | \"Florida\"        -> Some <| Florida\n                    | s                -> Some <| OtroS s\n        \n        type Territorio =\n        | Estado of Estado\n        \n        type Emisor =\n        | Pais       of Pais\n        | Territorio of Territorio\n        \n        type Documento =\n        | Pasaporte        of string\n        | Cedula           of string\n        | LicenciaConducir of string\n        \n        type Identificacion = {\n            emisor    : Emisor\n            documento : Documento\n            emision   : System.DateTime\n            vence     : System.DateTime\n        }\n        \n        type Banco          = Banco of string\n        type NumeroCuenta   = NumeroCuenta of string\n        type RoutingNumber  = RoutingNumber of string\n        type TipoCuenta     = \n        | Ahorro\n        | Corriente\n        | Otra of string\n        type CuentaBancaria = {\n            banco   : Banco\n            tipo    : TipoCuenta\n            numero  : NumeroCuenta\n            routing : RoutingNumber\n        }\n        \n        type StatusAliado =\n        |   Activo\n        | Inactivo\n        \n        type ConceptoPago =\n        | PagoAfiliacion\n        | PagoComision\n        | Otro of string\n        \n        type Transaccion = {\n            fechaPago      : System.DateTime\n            ano            : int\n            periodo        : int\n            monto          : int\n            idAliado       : IdAliado\n            concepto       : ConceptoPago\n            transaccion    : string\n        }\n        \n        type TipoDireccion = \n        | Habitacion\n        | Oficina\n        | ServicioPostal\n        | Otro of string\n            with \n                static member tryParse (s:string) = \n                    match s.Trim() with\n                    | \"\"               -> None    \n                    | \"Habitacion\"     -> Some <| Habitacion\n                    | \"Oficina\"        -> Some <| Oficina\n                    | \"ServicioPostal\" -> Some <| ServicioPostal\n                    | s                -> Some <| Otro s\n        \n        type ZonaPostal = ZonaPostal of string\n        \n        type Direccion = {\n            tipoDireccion : TipoDireccion\n            linea1        : string\n            linea2        : string\n            ciudad        : string\n            estado        : Estado\n            pais          : Pais\n            zonaPostal    : ZonaPostal\n        }\n        \n        type CorreoElectronico = EMail    of string\n        type TipoTelefono =\n        | Movil\n        | Oficina\n        | Habitacion\n        | Voip\n            with \n                static member tryParse = function\n                    | \"Movil\"      -> Some Movil\n                    | \"Oficina\"    -> Some Oficina\n                    | \"Habitacion\" -> Some Habitacion\n                    | _            -> None    \n        \n        type Telefono          = {\n            tipoTelefono : TipoTelefono\n            codigoPais   : string\n            codigoArea   : string\n            numero       : string\n            mensajes     : bool\n        }\n        \n        type Contacto =\n        | Direccion         of Direccion\n        | CorreoElectronico of CorreoElectronico\n        | Telefono          of Telefono\n        | Mensajeria        of string\n        | PaginaWeb         of string\n        | SocialMedia       of string\n        \n        type Genero =\n        | Masculino\n        | Femenino\n        | Empresa\n            with \n                static member tryParse (s:string) = \n                    match s.Trim() with\n                    | \"Masculino\"      -> Some <| Masculino\n                    | \"Femenino\"       -> Some <| Femenino\n                    | \"Empresa\"        -> Some <| Empresa\n                    | _                -> None    \n        \n        type DatosPersonales = {\n            titulo          : string option\n            nombre1         : string\n            nombre2         : string\n            apellido1       : string\n            apellido2       : string\n            nacionalidad    : Pais\n            genero          : Genero\n            fechaNacimiento : System.DateTime\n            contactos       : Contacto[]\n        }\n        \n        type FormaPago =\n        | CuentaBancaria of CuentaBancaria\n        | TransferenciaElectronica of string\n        \n        type TipoMensaje = \n        | Alerta\n        | Informacion\n        | Saludo\n        \n        type Remitente =\n        | Prozper\n        | Aliado of IdAliado\n        | OtroR  of string\n        \n        type Mensaje ={\n            tipo      : TipoMensaje\n            leido     : System.DateTime option\n            fecha     : System.DateTime\n            texto     : string\n            remitente : Remitente\n        }\n        \n        type Aliado = {\n            id              : IdAliado\n            idPadreO        : IdAliado option\n            identificacion  : Identificacion []\n            datosPersonales : DatosPersonales\n            formasPago      : FormaPago []\n            transacciones   : Transaccion []\n            mensajes        : Mensaje     []\n            isInternal      : bool\n            status          : StatusAliado\n            tipo            : TipoAliado\n            fechaRegistro   : System.DateTime\n            fechaStatus     : System.DateTime\n            nReferidos      : int\n            nRefActivos     : int\n            nDescendientes  : int\n            nDescActivos    : int\n            comision        : int\n            nivel           : int\n        }\n        \n        type PremisasCalculo = {\n            comisionReferidosRegular     : int\n            comisionReferidosMaster      : int\n            comisionDescendientesMaster  : int\n            comisionDescendientesRegular : int\n            montoAliliacion              : int\n            numeroReferidosMaster        : int\n            diaCorte1                    : int\n            diaCorte2                    : int\n        }\n        \n        let premisasCalculo = {\n            comisionReferidosRegular     = 15\n            comisionReferidosMaster      = 25\n            comisionDescendientesMaster  = 25\n            comisionDescendientesRegular =  0\n            montoAliliacion              = 75\n            numeroReferidosMaster        = 31\n            diaCorte1                    = 15\n            diaCorte2                    = 22\n        }\n        \n        type Modelo = {\n            idAliado      : IdAliado\n            aliados       : Aliado []\n            anoActual     : int\n            periodoActual : int\n            premisas      : PremisasCalculo\n            nevento       : int64\n        }\n        \n        module Aliado =\n            open Eff\n            open Operators\n        \n            let periodoActualEf ()       =  State.get() |>> (fun modelo ->  modelo.anoActual, modelo.periodoActual     )\n            let aliadoEf        ()       =  State.get() >>= (fun modelo ->  modelo.aliados \n                                                                            |> Array.tryFind (fun al -> al.id = modelo.idAliado)\n                                                                            |> Result.ofOption (fun () -> sprintf \"Cannot find aliado %A\" modelo.idAliado )\n                                                                            |> Rsl.ofResult)\n        \n            let statusActual ano mes al  =\n                al.transacciones\n                |> Array.tryFind (fun t -> t.idAliado = al.id \n                                        && t.ano      = ano\n                                        && t.periodo  = mes\n                                        && t.concepto = PagoAfiliacion)\n                |> Option.map    (fun _ ->  Activo )\n                |> Option.defaultValue    Inactivo\n        \n            open System.Collections.Generic\n        \n            let premisas pre al =\n                let comRef, comDes = match al.tipo  with\n                                     | Regular -> pre.comisionReferidosRegular, pre.comisionDescendientesRegular\n                                     | Master  -> pre.comisionReferidosMaster , pre.comisionDescendientesMaster\n                match al.status with\n                | Activo -> comRef, comDes\n                | _      -> 0     , 0\n        \n            let comision pre al = \n                let comRef, comDes = premisas pre al\n                al.nRefActivos * comRef, al.nDescActivos * comDes\n        \n            type Buscar = {\n                hijosDe        : (IdAliado -> IdAliado [])\n                nivelDe        : (IdAliado option -> int)\n                aliado         : (IdAliado -> Aliado)\n                aliadoO        : (IdAliado -> Aliado option)\n                hijos          : (Aliado -> Aliado [])\n                descendientes  : (Aliado -> Aliado [])\n            }\n        \n            let busqueda aliados =\n                let padres               = aliados \n                                           |> Seq.map(fun al -> al.idPadreO, al.id) \n                                           |> Seq.groupBy fst \n                                           |> Seq.map(fun (pO, ch) -> pO, ch |> Seq.map snd |> Seq.toArray) |> Map\n                let aliadosMap           = aliados |> Seq.map (fun al -> al.id, al) |> Map\n                let aliadoO          id  = match aliadosMap.TryGetValue id with\n                                           | true, al -> Some al\n                                           | _        -> None\n                let aliado           id  = try aliadosMap.[id] with e -> failwithf \"buscarAliado failed: %A\" id\n                let hijosDe          idO = match padres.TryGetValue (Some idO) with\n                                           | true, hijos -> hijos\n                                           | _           -> [||]\n                let rec nivelDe      idO = idO |> Option.bind aliadoO |> Option.map (fun al -> 1 + nivelDe al.idPadreO) |> Option.defaultValue 0\n                let hijos             al = hijosDe al.id |> Array.choose aliadoO\n                let rec descendientes al =\n                    [|\n                        for h in hijos al do\n                            yield                      h\n                            yield! descendientes h\n                    |]\n                {\n                    hijosDe       = hijosDe       \n                    nivelDe       = nivelDe       \n                    aliado        = aliado        \n                    aliadoO       = aliadoO       \n                    hijos         = hijos         \n                    descendientes = descendientes \n                }\n        \n        \n            let actualizarAliados modelo =\n                let  buscar            = busqueda modelo.aliados\n                let pre                = modelo.premisas\n                let rec aliadoActualizado alid =\n                    let al             = buscar.aliado alid\n                    let hijos          = buscar.hijosDe al.id |> Seq.map aliadoActualizadoM |> Seq.cache\n                    let status         = al.status //statusActual modelo.anoActual modelo.periodoActual al\n                    let nReferidos     = hijos |> Seq.length\n                    let nRefActivos    = hijos |> Seq.filter (fun al -> al.status = Activo && al.tipo = Regular) |> Seq.length\n                    let nDescendientes = hijos |> Seq.sumBy  (fun al -> al.nDescendientes + al.nReferidos )\n                    let nDescActivos   = hijos |> Seq.sumBy  (fun al -> al.nDescActivos   + al.nRefActivos)\n                    let tipo           = if nRefActivos >= pre.numeroReferidosMaster then Master else Regular\n                    let nivel          = 1 + buscar.nivelDe al.idPadreO\n                    let al' =\n                        { al with\n                            status         = status\n                            tipo           = tipo\n                            nReferidos     = nReferidos    \n                            nRefActivos    = nRefActivos   \n                            nDescendientes = nDescendientes\n                            nDescActivos   = nDescActivos  \n                            fechaStatus    = System.DateTime()\n                            nivel          = nivel\n                        }\n                    let comRef, comDes = comision pre al'\n                    { al' with comision = comRef + comDes}\n                and aliadoActualizadoM = Memoize.memoize aliadoActualizado\n        \n                modelo.aliados \n                |> Seq.map (fun al -> al.id)\n                |> Seq.map aliadoActualizadoM\n                |> Seq.toArray\n        \n            //let actualizarModelEf () = eff {\n            //    let! modelo     = State.get()\n            //    do! State.put { modelo with aliados = actualizarAliados modelo }\n            //    ()\n            //}\n        \n        \n        type DataEvento =\n        | AgregarAliados of Aliado[]\n        | AgregarAliado  of Aliado\n        | RegistroNuevo  of DatosPersonales\n        \n        type Evento = {\n            nevento : int64\n            data    : DataEvento\n        }\n        \n        type Respuesta =\n        | ROk\n        | NuevoRegistro of string\n        \n        module Eventos =\n        \n            let addNewAliados (als1: Aliado []) (als2: Aliado []) : Aliado [] =\n                als1 |> Seq.filter(fun a -> als2 |> Seq.exists (fun b -> a.id = b.id ) |> not ) |> Seq.append als2 |> Seq.toArray\n        \n            let registroNuevo (datos:DatosPersonales) (modelo: Modelo) : ResultM<Modelo * Respuesta, unit> = resultM {\n                match   datos.contactos\n                        |> Seq.tryPick(function CorreoElectronico email -> Some email |_-> None ) with\n                | None        -> return! errorMsgf \"No se encontro Correo Electronico: %A\" datos |> ErrorM\n                | Some correo ->\n                if  modelo.aliados\n                    |> Seq.exists(fun al ->\n                        al.datosPersonales.contactos\n                        |> Seq.exists(function CorreoElectronico correo2 -> correo = correo2 |_-> false ) \n                    )       then return! errorMsgf \"Correo Electronico ya esta registrado: %A\" correo |> ErrorM\n                else\n                let now = System.DateTime.Now\n                let aliado = {\n                    datosPersonales = datos\n                    id              =  IdAliado <| System.Guid.NewGuid.ToString()\n                    idPadreO        =  None\n                    identificacion  =  [||]\n                    formasPago      =  [||]\n                    transacciones   =  [||]\n                    mensajes        =  [||]\n                    isInternal      =  false\n                    status          =  Inactivo\n                    tipo            =  Regular\n                    fechaRegistro   =  now\n                    fechaStatus     =  now\n                    nReferidos      =  0\n                    nRefActivos     =  0\n                    nDescendientes  =  0\n                    nDescActivos    =  0\n                    comision        =  0\n                    nivel           =  0\n                }\n                return\n                    { modelo with aliados = Array.append modelo.aliados [| aliado |] }\n                ,   [ datos.nombre1 ; datos.nombre2 ; datos.apellido1 ; datos.apellido2 ] \n                    |> String.concat \" \"\n                    |> NuevoRegistro  \n            }\n        \n            let actualizarEstado (evento: Evento) (modelo: Modelo) : ResultM<Modelo * Respuesta, unit> = resultM {\n                if modelo.nevento <> -1L && modelo.nevento + 1L <> evento.nevento then \n                    failwithf \"Evento fuera de secuencia: %d %d\" modelo.nevento evento.nevento\n                match evento.data with\n                | AgregarAliado  aliado  -> return  { modelo with aliados = addNewAliados [| aliado  |] modelo.aliados }, ROk\n                | AgregarAliados aliados -> return  { modelo with aliados = addNewAliados    aliados    modelo.aliados }, ROk\n                | RegistroNuevo  datos   -> return! modelo |> registroNuevo datos\n            }\n        \n        \n        [< JavaScript false >]\n        module Serializador =\n            open Serializer\n            open System\n            \n            let serDate : Ser<System.DateTime> = \n                (fun (d:System.DateTime ) -> d.ToString(\"u\") |> sprintf \"%A\"                )\n              , (fun (j:JsonIntermediate) -> j.tryString() |> Option.bind ParseO.parseDateO )\n        \n            let serIdAliado          = serDU<IdAliado         > [ serObj serString            ]    \n            let serTipoAliado        = serDU<TipoAliado       > [ serObj serString            ]    \n            let serPais              = serDU<Pais             > [ serObj serString            ]    \n            let serEstado            = serDU<Estado           > [ serObj serString            ]    \n            let serTerritorio        = serDU<Territorio       > [ serObj serEstado            ]   \n            let serEmisor            = serDU<Emisor           > [ serObj serPais\n                                                                  serObj serTerritorio        ]\n            let serDocumento         = serDU<Documento        > [ serObj serString            ]    \n            let serBanco             = serDU<Banco            > [ serObj serString            ]    \n            let serNumeroCuenta      = serDU<NumeroCuenta     > [ serObj serString            ]    \n            let serRoutingNumber     = serDU<RoutingNumber    > [ serObj serString            ]    \n            let serTipoCuenta        = serDU<TipoCuenta       > [ serObj serString            ]    \n            let serStatusAliado      = serDU<StatusAliado     > [ serObj serString            ]    \n            let serConceptoPago      = serDU<ConceptoPago     > [ serObj serString            ]    \n            let serTipoDireccion     = serDU<TipoDireccion    > [ serObj serString            ]    \n            let serZonaPostal        = serDU<ZonaPostal       > [ serObj serString            ]    \n            let serCorreoElectronico = serDU<CorreoElectronico> [ serObj serString            ]    \n            let serTipoTelefono      = serDU<TipoTelefono     > [ serObj serString            ]    \n            let serGenero            = serDU<Genero           > [ serObj serString            ]    \n            let serTipoMensaje       = serDU<TipoMensaje      > [ serObj serString            ]\n            let serIdentificacion : Ser<Identificacion> = \n                [|\n                    serEmisor    |> serField \"emisor\"    (fun s -> s.emisor    ) (fun v s -> { s with emisor    = v } )\n                    serDocumento |> serField \"documento\" (fun s -> s.documento ) (fun v s -> { s with documento = v } )\n                    serDate      |> serField \"emision\"   (fun s -> s.emision   ) (fun v s -> { s with emision   = v } )\n                    serDate      |> serField \"vence\"     (fun s -> s.vence     ) (fun v s -> { s with vence     = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serCuentaBancaria : Ser<CuentaBancaria> = \n                [|\n                    serBanco         |> serField \"banco\"   (fun s -> s.banco  ) (fun v s -> { s with banco   = v } )   \n                    serTipoCuenta    |> serField \"tipo\"    (fun s -> s.tipo   ) (fun v s -> { s with tipo    = v } )        \n                    serNumeroCuenta  |> serField \"numero\"  (fun s -> s.numero ) (fun v s -> { s with numero  = v } )          \n                    serRoutingNumber |> serField \"routing\" (fun s -> s.routing) (fun v s -> { s with routing = v } )           \n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serTransaccion : Ser<Transaccion> = \n                [|\n                    serDate          |> serField \"fechaPago\"   (fun s -> s.fechaPago  ) (fun v s -> { s with fechaPago   = v } ) \n                    serInt           |> serField \"ano\"         (fun s -> s.ano        ) (fun v s -> { s with ano         = v } )\n                    serInt           |> serField \"periodo\"     (fun s -> s.periodo    ) (fun v s -> { s with periodo     = v } )\n                    serInt           |> serField \"monto\"       (fun s -> s.monto      ) (fun v s -> { s with monto       = v } )\n                    serIdAliado      |> serField \"idAliado\"    (fun s -> s.idAliado   ) (fun v s -> { s with idAliado    = v } )     \n                    serConceptoPago  |> serField \"concepto\"    (fun s -> s.concepto   ) (fun v s -> { s with concepto    = v } )         \n                    serString        |> serField \"transaccion\" (fun s -> s.transaccion) (fun v s -> { s with transaccion = v } )   \n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serDireccion : Ser<Direccion> = \n                [|\n                    serTipoDireccion |> serField \"tipoDireccion\" (fun s -> s.tipoDireccion) (fun v s -> { s with tipoDireccion = v } )\n                    serString        |> serField \"linea1\"        (fun s -> s.linea1       ) (fun v s -> { s with linea1        = v } )\n                    serString        |> serField \"linea2\"        (fun s -> s.linea2       ) (fun v s -> { s with linea2        = v } )\n                    serString        |> serField \"ciudad\"        (fun s -> s.ciudad       ) (fun v s -> { s with ciudad        = v } )\n                    serPais          |> serField \"pais\"          (fun s -> s.pais         ) (fun v s -> { s with pais          = v } )\n                    serZonaPostal    |> serField \"zonaPostal\"    (fun s -> s.zonaPostal   ) (fun v s -> { s with zonaPostal    = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serTelefono : Ser<Telefono> =\n                [|\n                    serTipoTelefono |> serField \"tipoTelefono\" (fun s -> s.tipoTelefono) (fun v s -> { s with tipoTelefono = v } )\n                    serString       |> serField \"codigoPais\"   (fun s -> s.codigoPais  ) (fun v s -> { s with codigoPais   = v } )\n                    serString       |> serField \"codigoArea\"   (fun s -> s.codigoArea  ) (fun v s -> { s with codigoArea   = v } )\n                    serString       |> serField \"numero\"       (fun s -> s.numero      ) (fun v s -> { s with numero       = v } )\n                    serBool         |> serField \"mensajes\"     (fun s -> s.mensajes    ) (fun v s -> { s with mensajes     = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serContacto          = serDU<Contacto         > [ serObj serString     \n                                                                  serObj serTelefono\n                                                                  serObj serCorreoElectronico\n                                                                  serObj serDireccion         ]\n            let serFormaPago         = serDU<FormaPago        > [ serObj serString              \n                                                                  serObj serCuentaBancaria    ]\n            let serRemitente         = serDU<Remitente        > [ serObj serIdAliado\n                                                                  serObj serString            ]\n        \n            let serDatosPersonales : Ser<DatosPersonales> =\n                [|\n                    serString        |> serOpt  |> serField \"titulo\"          (fun s -> s.titulo         ) (fun v s -> { s with titulo          = v } )\n                    serString                   |> serField \"nombre1\"         (fun s -> s.nombre1        ) (fun v s -> { s with nombre1         = v } )\n                    serString                   |> serField \"nombre2\"         (fun s -> s.nombre2        ) (fun v s -> { s with nombre2         = v } )\n                    serString                   |> serField \"apellido1\"       (fun s -> s.apellido1      ) (fun v s -> { s with apellido1       = v } )\n                    serString                   |> serField \"apellido2\"       (fun s -> s.apellido2      ) (fun v s -> { s with apellido2       = v } )\n                    serPais                     |> serField \"nacionalidad\"    (fun s -> s.nacionalidad   ) (fun v s -> { s with nacionalidad    = v } )\n                    serGenero                   |> serField \"genero\"          (fun s -> s.genero         ) (fun v s -> { s with genero          = v } )\n                    serDate                     |> serField \"fechaNacimiento\" (fun s -> s.fechaNacimiento) (fun v s -> { s with fechaNacimiento = v } )\n                    serContacto      |> serArr  |> serField \"contactos\"       (fun s -> s.contactos      ) (fun v s -> { s with contactos       = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serMensaje : Ser<Mensaje> =\n                [|\n                    serTipoMensaje           |> serField \"tipo\"      (fun (s:Mensaje) -> s.tipo     ) (fun v s -> { s with tipo      = v } )\n                    serDate        |> serOpt |> serField \"leido\"     (fun (s:Mensaje) -> s.leido    ) (fun v s -> { s with leido     = v } )\n                    serDate                  |> serField \"fecha\"     (fun (s:Mensaje) -> s.fecha    ) (fun v s -> { s with fecha     = v } )\n                    serString                |> serField \"texto\"     (fun (s:Mensaje) -> s.texto    ) (fun v s -> { s with texto     = v } )\n                    serRemitente             |> serField \"remitente\" (fun (s:Mensaje) -> s.remitente) (fun v s -> { s with remitente = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serAliado : Ser<Aliado> =\n                [|\n                    serIdAliado                    |> serField \"id\"              (fun s -> s.id             ) (fun v s -> { s with id              = v } )\n                    serIdAliado         |> serOpt  |> serField \"idPadreO\"        (fun s -> s.idPadreO       ) (fun v s -> { s with idPadreO        = v } )\n                    serIdentificacion   |> serArr  |> serField \"identificacion\"  (fun s -> s.identificacion ) (fun v s -> { s with identificacion  = v } )\n                    serDatosPersonales             |> serField \"datosPersonales\" (fun s -> s.datosPersonales) (fun v s -> { s with datosPersonales = v } )\n                    serFormaPago        |> serArr  |> serField \"formasPago\"      (fun s -> s.formasPago     ) (fun v s -> { s with formasPago      = v } )\n                    serTransaccion      |> serArr  |> serField \"transacciones\"   (fun s -> s.transacciones  ) (fun v s -> { s with transacciones   = v } )\n                    serMensaje          |> serArr  |> serField \"mensajes\"        (fun s -> s.mensajes       ) (fun v s -> { s with mensajes        = v } )\n                    serBool                        |> serField \"isInternal\"      (fun s -> s.isInternal     ) (fun v s -> { s with isInternal      = v } )\n                    serStatusAliado                |> serField \"status\"          (fun s -> s.status         ) (fun v s -> { s with status          = v } )\n                    serTipoAliado                  |> serField \"tipo\"            (fun s -> s.tipo           ) (fun v s -> { s with tipo            = v } )\n                    serDate                        |> serField \"fechaRegistro\"   (fun s -> s.fechaRegistro  ) (fun v s -> { s with fechaRegistro   = v } )\n                    serDate                        |> serField \"fechaStatus\"     (fun s -> s.fechaStatus    ) (fun v s -> { s with fechaStatus     = v } )\n                    serInt                         |> serField \"nReferidos\"      (fun s -> s.nReferidos     ) (fun v s -> { s with nReferidos      = v } )\n                    serInt                         |> serField \"nRefActivos\"     (fun s -> s.nRefActivos    ) (fun v s -> { s with nRefActivos     = v } )\n                    serInt                         |> serField \"nDescendientes\"  (fun s -> s.nDescendientes ) (fun v s -> { s with nDescendientes  = v } )\n                    serInt                         |> serField \"nDescActivos\"    (fun s -> s.nDescActivos   ) (fun v s -> { s with nDescActivos    = v } )\n                    serInt                         |> serField \"comision\"        (fun s -> s.comision       ) (fun v s -> { s with comision        = v } )\n                    serInt                         |> serField \"nivel\"           (fun s -> s.nivel          ) (fun v s -> { s with nivel           = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serPremisasCalculo : Ser<PremisasCalculo> =\n                [|\n                    serInt  |> serField \"comisionReferidosRegular\"     (fun s -> s.comisionReferidosRegular    ) (fun v s -> { s with comisionReferidosRegular     = v } )\n                    serInt  |> serField \"comisionReferidosMaster\"      (fun s -> s.comisionReferidosMaster     ) (fun v s -> { s with comisionReferidosMaster      = v } )\n                    serInt  |> serField \"comisionDescendientesMaster\"  (fun s -> s.comisionDescendientesMaster ) (fun v s -> { s with comisionDescendientesMaster  = v } )\n                    serInt  |> serField \"comisionDescendientesRegular\" (fun s -> s.comisionDescendientesRegular) (fun v s -> { s with comisionDescendientesRegular = v } )\n                    serInt  |> serField \"montoAliliacion\"              (fun s -> s.montoAliliacion             ) (fun v s -> { s with montoAliliacion              = v } )\n                    serInt  |> serField \"numeroReferidosMaster\"        (fun s -> s.numeroReferidosMaster       ) (fun v s -> { s with numeroReferidosMaster        = v } )\n                    serInt  |> serField \"diaCorte1\"                    (fun s -> s.diaCorte1                   ) (fun v s -> { s with diaCorte1                    = v } )\n                    serInt  |> serField \"diaCorte2\"                    (fun s -> s.diaCorte2                   ) (fun v s -> { s with diaCorte2                    = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serModelo : Ser<Modelo> = \n                [|\n                    serIdAliado                   |> serField \"idAliado\"      (fun s -> s.idAliado      ) (fun v s -> { s with idAliado      = v } )\n                    serAliado           |> serArr |> serField \"aliados\"       (fun s -> s.aliados       ) (fun v s -> { s with aliados       = v } )\n                    serInt                        |> serField \"anoActual\"     (fun s -> s.anoActual     ) (fun v s -> { s with anoActual     = v } )\n                    serInt                        |> serField \"periodoActual\" (fun s -> s.periodoActual ) (fun v s -> { s with periodoActual = v } )\n                    serPremisasCalculo            |> serField \"premisas\"      (fun s -> s.premisas      ) (fun v s -> { s with premisas      = v } )\n                |] |> serRecord LibraryNoJS.Default.value<_>\n        \n            let serDataEvento = \n                serDU<DataEvento> [ \n                    serObj serAliado\n                    serObj (serArr serAliado)\n                    serObj serDatosPersonales\n                ]\n        [< JavaScript false >]\n        module EstadoActual =\n            \n            let agente = \n                {   aliados       = [||]\n                    idAliado      = IdAliado \"Prozper\"\n                    anoActual     = 1900\n                    periodoActual = 1\n                    premisas      = {\n                                        comisionReferidosRegular     = 15\n                                        comisionReferidosMaster      = 25\n                                        comisionDescendientesMaster  = 25\n                                        comisionDescendientesRegular =  0\n                                        montoAliliacion              = 75\n                                        numeroReferidosMaster        = 31\n                                        diaCorte1                    = 15\n                                        diaCorte2                    = 22\n                    }\n                    nevento       = -1L\n                }\n                |> Mailbox.stateFull (fun e -> print e; id) \n        \n            let actualizarModelo evento modelo =\n                let r = Eventos.actualizarEstado evento modelo\n                let m = r |> ResultM.map fst |> ResultM.defaultValue modelo\n                { m with nevento = evento.nevento }, r |> ResultM.map snd\n        \n            let procesarEvento evento  = agente |> Mailbox.StateFull.applyReply (actualizarModelo evento) \n            \n            let estado() = Mailbox.StateFull.getState agente\n        \n            type ContRespuesta = (ResultM<Respuesta,unit> -> unit) * (exn -> unit) * (System.OperationCanceledException -> unit)\n        \n            let leerEventos = \n                let eventosEspera = new System.Collections.Generic.Dictionary<int64, ContRespuesta>()\n                Mailbox.iter print (fun (respEventoO : (int64 * ContRespuesta) option) ->\n                    asyncResultM {\n                        respEventoO |> Option.iter (fun (esperaN, cnts) -> eventosEspera.Add(esperaN, cnts) )\n                        let! eventosJson = SQLServer.leerEventos (estado()).nevento\n                        for (nevento, _, data:string, _) in eventosJson do\n                            let cnt, cnte, cntc = \n                                match eventosEspera.TryGetValue nevento with\n                                | false, _    -> ResultM.iter print print, print, print\n                                | true , cnts -> cnts\n                            try \n                                match Serializer.deserializeWithDefs Serializador.serDataEvento data with\n                                | Some evento ->\n                                    let respM = procesarEvento \n                                                    {   nevento = nevento\n                                                        data    = evento\n                                                    } |> Async.RunSynchronously\n                                    cnt respM\n                                | None -> failwithf \"No se pudo deserializar el Evento: %A\" (nevento, data)\n                            with \n                            | :? System.OperationCanceledException as e -> cntc e\n                            |                                         e -> cnte e\n                        do!  Async.Sleep 50//00 \n                        return ()\n                    } |> AsyncResultM.iterpS id )\n        \n            async {\n                leerEventos.Post None\n                do! Async.Sleep 60000\n            } |> Async.Start\n        \n        \n        [< JavaScript false >]\n        module Rpc =\n        \n            let printResult operation arm = async {\n                let! rm = arm\n                printfn \"%s %A\" operation rm\n                return! arm\n            }\n        \n            let userIsAliado user al =\n                al.datosPersonales.apellido1 = user\n             || al.datosPersonales.nombre1   = user\n        \n            let checkUserPwd user password =\n                if user <> password then false else\n                if user = \"\"        then false else\n                if user = \"admin\"   then true  else\n                (EstadoActual.estado()).aliados |> Seq.exists (userIsAliado user)\n        \n            [< Rpc >]\n            let loginUser (user:string) (password:string) : AsyncResultM<unit, string> = \n                let ctx = Web.Remoting.GetContext()\n                asyncResultM {\n                    if checkUserPwd user password then\n                        do! ctx.UserSession.LoginUser user\n                } (**)|> printResult \"loginUser\"\n        \n            [< Rpc >]\n            let logoutUser ()  : AsyncResultM<unit, string> = \n                let ctx = Web.Remoting.GetContext()\n                asyncResultM {\n                    do! ctx.UserSession.Logout()\n                } (**)|> printResult \"logoutUser\"\n        \n            [< Rpc >]\n            let leerDataModelo() : AsyncResultM<Modelo, string> = \n                let  ctx  = Web.Remoting.GetContext()\n                asyncResultM {\n                    let! userO = ctx.UserSession.GetLoggedInUser()\n                    match userO with\n                    | None      ->  do! Error(ErrorMsg \"User not logged in.\")\n                                    return EstadoActual.estado()\n                    | Some user ->\n                    let aliados = EstadoActual.estado() |> Aliado.actualizarAliados\n                    let buscar = Aliado.busqueda aliados\n                    if user = \"admin\" then return { EstadoActual.estado() with aliados = aliados } else\n                    let al = aliados |> Seq.find (userIsAliado user)\n                    let subAliados = (if al.tipo = Master then buscar.descendientes else buscar.hijos) al\n                    return { EstadoActual.estado() with aliados = Array.append [| al |] subAliados }\n                }\n        \n            [< Rpc >]\n            let ejecutarEvento (evento:DataEvento) = asyncResultM {\n                let estado   = EstadoActual.estado()\n                let _, respR = EstadoActual.actualizarModelo { nevento = estado.nevento + 1L; data = evento } estado\n                let! resp = respR\n                let! eventoN = SQLServer.nuevoEvento (typedefof<DataEvento>.FullName) (fst Serializador.serDataEvento evento)\n                let! resp = Async.FromContinuations(fun (cnts:EstadoActual.ContRespuesta) ->\n                    Some (eventoN, cnts)\n                    |> EstadoActual.leerEventos.Post\n                )\n                return resp\n            }\n        \n            [< JavaScript >]\n            let iterA arm = AsyncResultM.iterA (ResultMessage.summarized >> JS.Alert) id arm\n        \n        [< JavaScript false >]\n        module Sample =\n            let data = \"\"\"\n        Alvarado, Rossana	Interview Group\n        Andreac	Interview Group\n        Bustamante, Patricia	Interview Group\n        Calderon, Ailyn	Interview Group\n        De Copello, Isbelia	Interview Group\n        Life Beyond Borders	Interview Group\n        Moya, Adelaida	Interview Group\n        Nava, Jeylin	Interview Group\n        Villarreal, Lola	Ocanto, Blas\n        Zapata, Martha Liliana	Ocanto, Blas\n        Ocanto, Blas	Interview Group\n        Rendiles, Geline	Interview Group\n        Abou Asaff, Amir	Segovia, Liseth\n        Alejandra Espinoza, Maria	Segovia, Liseth\n        Aleman, Robert	Segovia, Liseth\n        ., Mabelis	Barreto, Bianeys\n        Barreto, Bianeys	Segovia, Liseth\n        Bracho, Julio	Segovia, Liseth\n        Bukowitz, Silvia	Segovia, Liseth\n        Ciccolella, Enzo	Segovia, Liseth\n        Colmenares, Oscar	Segovia, Liseth\n        Cortese, Enza	Segovia, Liseth\n        Cristina Petrill, Maria	Segovia, Liseth\n        De Los Angeles Pache, Maria	Segovia, Liseth\n        Enrique Leal Jimenez, Walfredo	Segovia, Liseth\n        Fernanda Pirela, Maria	Esperanza Rubiano, Maria\n        Esperanza Rubiano, Maria	Segovia, Liseth\n        Espina, Marien	Segovia, Liseth\n        Espina, Sagrario	Segovia, Liseth\n        Estrada, Sorena	Segovia, Liseth\n        Fernanda Molero, Maria	Segovia, Liseth\n        Fernandez, Lidiana	Segovia, Liseth\n        Acosta, Francis	Garcia, Javier\n        Eduardo Garcia, Javier	Garcia, Javier\n        Orozco, David	Garcia, Javier\n        Virginia Mago Beaufo, Maria	Garcia, Javier\n        Garcia, Javier	Segovia, Liseth\n        Glenn, Estepfanny	Segovia, Liseth\n        Hans Rojas, Otto	Segovia, Liseth\n        Leonarduzzi, Gianluca	Segovia, Liseth\n        Martinez Noguera, Rossy	Segovia, Liseth\n        Molleda, Marilyn	Segovia, Liseth\n        Nardelli, Claudia	Molleda, Rosalyn\n        Urdaneta, Dayana	Molleda, Rosalyn\n        Villalobos, Andreus	Molleda, Rosalyn\n        Molleda, Rosalyn	Segovia, Liseth\n        Nayvely	Segovia, Liseth\n        Olivieri, Giuseppe	Segovia, Liseth\n        Pachano, Maria	Segovia, Liseth\n        Paez, Endrys	Segovia, Liseth\n        Paz, Misleny	Segovia, Liseth\n        Pedroza, Manuel	Segovia, Liseth\n        Perozo Romero, Liz	Segovia, Liseth\n        Pina, Yanetsy	Segovia, Liseth\n        Representaciones Continental Internacional 	Segovia, Liseth\n        Romero, Roman	Segovia, Liseth\n        Roo, Leonardo	Segovia, Liseth\n        Soto, Ileana	Segovia, Liseth\n        Suarez, Veronica	Segovia, Liseth\n        Tepeyac Travel C.a	Segovia, Liseth\n        Ucros, Luz	Segovia, Liseth\n        Valbuena, Hilda	Segovia, Liseth\n        Vasquez, Irvanis	Segovia, Liseth\n        Segovia, Liseth	Interview Group\n        A Menegaldo, Jose	V Boscan, Gretha\n        Adolfo Velasquez De, Gustavo	V Boscan, Gretha\n        Al Aaias, Feras	V Boscan, Gretha\n        America Beck	V Boscan, Gretha\n        Antunez, Victor	V Boscan, Gretha\n        Arraiz, Jenniffer	V Boscan, Gretha\n        Arribas, Francisco	V Boscan, Gretha\n        Aseca Internacional 	V Boscan, Gretha\n        Bastidas, Genesis	V Boscan, Gretha\n        Alfredo Ocando, Luis	Belloso, Linaura\n        Matos Villalobos, Sofia	Avila, Naivelin\n        Avila, Naivelin	Belloso, Linaura\n        Delgado, Rodolfo	Belloso, Linaura\n        Herrera, Omar	Belloso, Linaura\n        Martinez, Marielina	Belloso, Linaura\n        Montiel, Mercedes	Belloso, Linaura\n        Petit, Bianca	Belloso, Linaura\n        Romero, Ana	Belloso, Linaura\n        Belloso, Linaura	V Boscan, Gretha\n        Belloso, Lizbecth	V Boscan, Gretha\n        Boscan, Gretha	V Boscan, Gretha\n        Briceno, Guido	V Boscan, Gretha\n        Camacho, Clara	V Boscan, Gretha\n        Cecilia Araguainamo, Maria	V Boscan, Gretha\n        Cesar Tabares Ramire, Paulo	V Boscan, Gretha\n        Dagnino, Patricia	V Boscan, Gretha\n        David Rincon, Jose	V Boscan, Gretha\n        Garces, Militza	V Boscan, Gretha\n        Garcia, Andreina	V Boscan, Gretha\n        Gonzalez, Maria	V Boscan, Gretha\n        Guerrero, Karttier	V Boscan, Gretha\n        Bracho, Monica	Hernandez, Alejandro\n        Paz, Vanessa	Hernandez, Alejandro\n        Hernandez, Alejandro	V Boscan, Gretha\n        Hernandez, Valentina	V Boscan, Gretha\n        Inciarte, Martin	V Boscan, Gretha\n        Inciarte, Milagros	V Boscan, Gretha\n        Iragorry, Eduardo	V Boscan, Gretha\n        Jimenez, Graciela	V Boscan, Gretha\n        Jose Gonzalez, Maria	V Boscan, Gretha\n        Jose Negron Briceno, Egdo	V Boscan, Gretha\n        Leal, Edith	V Boscan, Gretha\n        Linares, Marcos	V Boscan, Gretha\n        Machado, Mairim	V Boscan, Gretha\n        Marina Sideregts, Luz	V Boscan, Gretha\n        Martinez, Edgar	V Boscan, Gretha\n        Martinez, Fernando	V Boscan, Gretha\n        Matos, Humberto	V Boscan, Gretha\n        Acosta, Patricia	Ocando, Ricardo\n        Leon, Andres	Ocando, Ricardo\n        Ocando, Andres	Ocando, Ricardo\n        Perez, Alirio	Ocando, Ricardo\n        Ocando, Ricardo	V Boscan, Gretha\n        Osorio Tudares, Elizabeth	V Boscan, Gretha\n        Ozuna, Marilen	V Boscan, Gretha\n        Alvarado Leal, Yuneira	Requena, Franklin\n        Andrea Avila, Maria	Requena, Franklin\n        Castellanos, Jorge	Requena, Franklin\n        Cruz, Ligmari	Requena, Franklin\n        Monroy, Cindy	Requena, Franklin\n        Sanchez, Anamaria	Requena, Franklin\n        Requena, Franklin	V Boscan, Gretha\n        Reyes, Gabriel	V Boscan, Gretha\n        Veneturismo C.a	Romero, Anasofia\n        Romero, Anasofia	V Boscan, Gretha\n        Socorro, Elena	V Boscan, Gretha\n        Soto, Gelinotte	V Boscan, Gretha\n        Urdaneta, Fernando	V Boscan, Gretha\n        Montiel, Maria	Zambrano, Aliana\n        Zambrano, Aliana	Velasquez, Daniel\n        Velasquez, Daniel	V Boscan, Gretha\n        Velasquez, Elizabeth	V Boscan, Gretha\n        Vicente Matos, Jose	V Boscan, Gretha\n        Xiomara Morillo, Yris	V Boscan, Gretha\n        Zerpa, Maiher	V Boscan, Gretha\n        V Boscan, Gretha	Interview Group\n        Interview Group	Prozper\n            \"\"\"\n        \n            let keys = \"\"\"\n        212 Universal Group\n        America Travel Inc.\n        Asegura International\n        Barreto, Cesar\n        Bianchi, Isabel\n        Bracho, Willian\n        Buloz Asesores De Se, Gamez\n        Caribbean Life\n        Caribbean Vacations By Cbinc\n        Castro, Lizber\n        Cma Global Partners\n        Crown Consulting Av\n        Crown Consulting Group\n        Dream Of Liberty Llc\n        Echeverria Seguros\n        Erasmus Travel Assistance\n        Everest International Group\n        Family Global Care\n        Global Axis 3000 Llc \n        Global Group\n        Global Latinoamerica\n        Global Solutions Services Llc\n        Globalsi\n        Guanchez, Kelly\n        Guatemala Best Assurance\n        Imna International Group\n        Inprofis Group\n        Interview Group\n        Itp Travel\n        Jaimes, ManuelDavid\n        Jose Jimenez M, Maria\n        Joubert, Johann\n        Leonardo Colmenares, Jose\n        Life And Health Global Group Lp\n        Manzini, Flor\n        Mas Ota\n        Melian, Jennifer\n        Orange Ta\n        Orange Travel Assist Co\n        Paez, Amaryllis\n        Paseo Vacations\n        Producers Financial Group \n        Protector Plan\n        Quorum Corretaje De Seguros\n        Rivas, Mireya\n        Silva, Vaneska\n        Stg Travel\n        Suarez, Margarita\n        Todo Seguros\n        Uno, AgenteDe Prueba\n        Unsiter\n        Vega Corp\n        Vitality Insurance\n        Weston Travel Services\n        Yv Travels\n        305 Venezuela\n        360 Travelers\n        360 Travelers\n        A Gonzalez R, JesÚs\n        A Ocando, Ricardo\n        A Rodriguez, Jesus\n        A. Gomez, Pedro\n        Abbate, Anibal\n        Abc Travel\n        Abilahoud, Luis\n        Abiros Corp.\n        Abp Advisors Llc\n        Advanced Financial Partners\n        Afredo Kretschmar Ri, Carlos\n        Agencia Macs - Mauricio Alfonso\n        Agencias Carlos Zapata\n        Aguiar, Milagros\n        Aguirre, Luisana\n        Alargentina\n        Alba Tours\n        Alberto Bello Quijad, Julio\n        Alejandra Arcay Corr, Maria\n        Alexis Torres, Yury\n        Alfonzo, Raquel\n        Alpe Viajes\n        Alse Group\n        Alvarado, Lisbeth\n        Alvarado, Rossana\n        Alvarez, Elimar\n        Alvarez, Luz\n        Alvarez, Manuel\n        Alzolay, Rossana\n        Amena Corp\n        Anais Delnardo International Group\n        Andina Tour Ltda.\n        Andrade, Mario\n        Andrade, Reinardo\n        Andreac\n        Andreina Lopez, Maria\n        Angelica Materan B., Ma.\n        Angelicam\n        Angulo, Fabiola\n        Antares Viajes Y Turismo \n        Antonieta Zapata Rot, Maria\n        Antonini, Victor\n        Antonio Joseph Furia, Jose\n        Antonio Urbina Ceden, Edgar\n        Aredondo Seguros\n        Arguinzones, Michell\n        Ariza, Hilda\n        Armando Garcia Perez, Adner\n        Arturo Osorio Torne, Noel\n        Aserfin Alliance\n        Asesores Profesionales Del Turismo\n        Asociacion De Golfistas Senior De Colombia\n        Av1\n        Av11\n        Av19\n        Av2\n        Av21\n        Av33\n        Av34\n        Av43 \n        Av44\n        Av56\n        Av59\n        Av69\n        Av70\n        Av75\n        Av78\n        Av81\n        Av82\n        Av83\n        Av90\n        Av94\n        Av98\n        Av99\n        Aves Tours Ltda\n        Azuaje, Daniel\n        Barcha Trails Ltda\n        Barrondo, Edurne\n        Bart Travel, Vip\n        Bautista, Ervis\n        Bautista, Valeria\n        Beacon Travel\n        Belisa Traveling\n        Benic, Yoris\n        Bethke, Hildegard\n        Bianchi Insurance Group\n        Blanco, Alberto\n        Blanco, Nadeska\n        Blasioli Tedeschi, Antonionicolas\n        Blaya Corredores De Seguros \n        Bolivia, Julio\n        Booking Assistance\n        Boos, Brent\n        Boscan O, Maribel\n        Boscan, Isabel\n        Boscan, Katherine\n        Boscan, Maribel\n        Botello, Marco\n        Bracamonte, Anais\n        Bravo Alvarez, JoseRafael\n        Briceno, Migdalia\n        Buen Viento &amp; Buena Mar\n        Buompatre, Judith\n        Bustamante, Patricia\n        C. Hadjian, Keny\n        C.a .asesores De Seguros Y Riesgos\n        Ca, Yo Soy Tu Asesor\n        Cabrera Mesa, Antoniojose\n        Calderon, Ailyn\n        Camacho Parra, Alexisabraham\n        Camacho, Victor\n        Capital Assurance\n        Caraballo, Miroslaba\n        Cardenas, Maribel\n        Caribbean Life No\n        Carlos Venegas, Juan\n        Carlosvgr\n        Carrion, Marlene\n        Casiero, Miguel\n        Centro De Cruceros Sas\n        Cerpa, Erika\n        Chang, Jean\n        Chim Lam, Gricel\n        Choconta, Maryory\n        Chuao Corp\n        Cobo, Adonai\n        Comparaonline Colombia\n        Consorcio Isic\n        Constanza Alvarado G, Ilse\n        Contreras, Karen\n        Coplan Salud\n        Corban, Daniella\n        Corona, Carlos\n        Coronado &amp; Corporation \n        Corp Travel Colombia S.a.s\n        Cristina Molina Caru, Yoseph\n        Cruceros Selectos Internacionales Bog\n        Cruceros Selectos Internacionales Sas\n        Cruzando Fronteras\n        Ctm - S.a.s\n        Cvecuador\n        D Rubio Blanco, Jessica\n        D&amp;f International\n        Daniel Aular Malave, Jorge\n        Dario Montes Sanchez, Ruben\n        Dary Duran Florez, Luz\n        Davila S., Judith\n        De Copello, Isbelia\n        De Vida, Pan\n        Del Nardo, Gracia\n        Del Pilar Camargo, Maria\n        Del Valle, Luathany\n        Deluxe Reps Sas\n        Diaz, Francia\n        Dominguez, Elainer\n        Doral Travel\n        Dreams Travel, Ca\n        Duxan&#039;s\n        E Diaz, Omaira\n        E Gonzalez S, Mercedes\n        Edval Seguros\n        Elias Flores Zerpa, Campo\n        Elvira Lucena Colmen, Maria\n        Enrique Gil Gutierre, Jorge\n        Enrique Villegas Jim, Gonzalo\n        Enterprise, Katsil\n        Entrenamiento Colombia\n        Envoys\n        Esis, Omer\n        Espino, Yajilke\n        Espinoza, Marlene\n        Estrada, Carmeneugenia\n        Eugenia Altuve Brice, Maria\n        Express Turismo &amp; Marketing\n        Extravaganza Viajes Y Turismo\n        Fenix Eventos Viajes Y Turismo\n        Fernandez, Virginia\n        Fernando Ortiz B., David\n        Filice, MariaTeresa\n        Florida Insurance Usa\n        Fontana, Maria\n        Fossi, Luis\n        Francia Chile\n        Franco, Pancho\n        Frascione, Enza\n        Fuenmayor, Eduardo\n        G&amp;b Corredores De Seguros\n        Gabriela Benezra, Maria\n        Gabriela Sanguinetti, Maria\n        Gannem, Omar\n        Garces Jaramillo, JoseJaime\n        Gaviria L., Liliana\n        Gcali\n        Gerencia Patrimonial\n        Gilberto Roche Marqu, Daniel\n        Global Advisors\n        Global De Seguros\n        Global Protection Advisers Ldt\n        Globalsi Barquisimeto\n        Globalsi Caracas\n        Globalsi Maracaibo\n        Globalsi Oriente\n        Globalsi Valencia\n        Godoy, Griset\n        Goldman, Mauricio\n        Gonzalez Coll, Francisco\n        Gonzalez, Jimmy\n        Gonzalez, Wissleyla\n        Graciela Alzuru, Maria\n        Gsc Asesoria Corporativa De Seguros\n        Guanchez Col, Kelly\n        Guanchez, Luis\n        Guateasistencias\n        Guerrero, Alianaamarilis\n        Gustavo Espinoza Bos, Pedro\n        Gutierrez Solano, Gerardo\n        Gutierrez, Margarita\n        Gutierrez, Nestor\n        Guzman G., Suleyma\n        Harmony Travels\n        Hc Seguros\n        Heras, Carlos\n        Hernandez Bozo, Iria\n        Hernandez Mederos, DouglasAntonio\n        Hernandez, Cesar\n        Herrera, Mauricio\n        Herrera, Veronica\n        Hidalgo, Gabriela\n        Horizons Insurance And Financial Services Inc\n        Hugo Morales Garcia, Victor\n        Hung, Azael\n        Idealtour Ltda\n        Indaloasesores C,a\n        Ines Luna, Maria\n        Integra Mayorista\n        Integral Group Solution Sas\n        Integro AsesorÍas Y Servicios\n        Inversiones Emenco Inc\n        Isaac Fernandez, Anamercedes\n        Isabel Bejarano, Maria\n        It Representaciones Turisticas\n        Javier Bracho, Eli\n        Jesus, Romero\n        Jimenez, Pedro\n        Jiron, Carlos\n        Jl Camejo Asesores De Seguros\n        Joania Tours\n        Jose Gomez Velasquez, Miguel\n        Jose Gonzalez, Gustavo\n        Jose Jimenez, Maria\n        Jose Torrealba Ramir, Wilmer\n        Jpg Associates\n        Kristina Antonorsi Asegurate\n        Kubler, Erika\n        Kugler, Mariluz\n        L&amp;m International\n        Lairet, Santos\n        Larrazabal, Andreina\n        Leader Life\n        Lechin Associates\n        Leon, Evencio\n        Lets Go Travel\n        Levip\n        Life Beyond Borders\n        Lillys Travel Assist\n        Lilue, Cynthia\n        Lodeiro De Dopazo, Susana\n        Lon, Martin\n        Lopez Corredor De Se, Gustavo\n        Lopez, Sherllys\n        Loreto, Jorge\n        Lugo, Julio\n        Luis Chambuco, Jose\n        Luis Della Sala, Jorge\n        Luis Pena Agencia\n        Luis Perez Pena, Pedro\n        M Anton R, Jindy\n        Madrugale.com\n        Magallanes, Ana\n        Malave, Yelitza\n        Manuela Goncalves, Maria\n        Maria Angarita C, Olga\n        Maribel Ortiz Perez, Fulvia\n        Marmol, Ninoska\n        Martinez De Oropeza, Yanna\n        Martinez, Eglee\n        Martinez, JoseRaul\n        Martinez, Rachel\n        Mata Asesores, Machado\n        Mata, Alejandro\n        Mater Dei\n        Medigases S.a.s\n        Medina, Luis\n        Megatiquete.com\n        Melo, Fridel\n        Melul, Salomon\n        Mena, Lisbeth\n        Meneses, Karina\n        Mikkelson &amp; Gomez\n        Milagros Pastran, Maria\n        Minaya, Luissana\n        Mjpp Vzla\n        Mjs &amp; Asociados\n        Mm Insurance \n        Molina Lovera, Rita\n        Molina, Hania\n        Molina, Janette\n        Morales, Mariela\n        Moya, Adelaida\n        Mujica, Velis\n        Mundial De Asistencias S.a.s\n        Mundial De Cruceros \n        Nava, Jeylin\n        Net Insurance Inc\n        Netbrokers\n        New Port Sas\n        Now Insured\n        Nunez Gonzalez, Isabel\n        NuÑez, Oscar\n        O&amp;j Agencia De Viaje Virtual \n        Ocanto, Blas\n        Olivares Gil, AngelicaMaria\n        Operando Viajes &amp; Turismo Ltda\n        Orangereps\n        Orangetravelcol\n        Ordaz, Douglas\n        Organizacion Park Way Viajes Y Turismo Sas\n        Ortiz Corredor De Se, Eduardo\n        Ospina Y., Elizabeth\n        Otaiza Ferrer, Phyllys\n        Pablo Hernandez Fons, Juan\n        Pacheco, Ivory\n        Padilla, Gustavo\n        Panama, Evelyn\n        Panamericana De Viajes\n        Paqarina Go Travel S.a.s\n        Paris Travel C.a\n        Pelaez, Adriana\n        Pena, Luis\n        Penuela, Natalia\n        Perez De Castillo, Eglee\n        Peru, Karla\n        Pina, Andreina\n        Pirela, Lara\n        Planchart, Celia\n        Planes Turisticos.com\n        Plazas, Sol\n        Polanco, Oswaldo\n        Prado, Marcel\n        Preferred International&amp;associates\n        Price Agencies\n        Prius Reinsurance Brokers, N. V.\n        Promotora Neptuno\n        Protector Plan Av\n        Quispe Vargas, Raul\n        Rada, Gabriela\n        Rahn, Kathleen\n        Ramirez Sanchez, Carlosarturo\n        Ramirez, Zuday\n        Ramos, Emil\n        Rangel, NaylethYoconda\n        Ranuarez, Griselda\n        Rendiles, Geline\n        Representur Ltda\n        Reserveya.com\n        Resguarda Usa\n        Reyes, Gladys\n        Reyes, Oswaldo\n        Rhino Travel Assist\n        Rivas, Merly\n        Rivero, Enania\n        Rodil Sojo, Rosa\n        Rodriguez Casado, Alonso\n        Rodriguez, Fernando\n        Rodriguez, Pavell\n        Rojas, Deisy\n        Rojas, R\n        Rojas, Ricardo\n        Rojask\n        Romano, Filomena\n        Romero Fajardo, Narmary\n        Ros Diaz, Cristina\n        Rosa Rodriguez, Maria\n        Rosa Segovia Seg.\n        Rosas, Monica\n        Rosmarca Corp\n        Rtravel\n        Rubio, German\n        Ruiz, Anamaria\n        Ruta Gay Colombia S.a.s\n        Saavedra Salcedo, Guillermo\n        Saez, Carladaniela\n        Sagarzazu Rodriguez, Carlosrafael\n        Salazar Vergel, Marlon\n        San Telmo Tours\n        Sanchez, Alirio\n        Sanchez, Williams\n        Santa Cruz, Elisa\n        Santana, Pablo\n        Sarmiento Polo, Juliana\n        Sat Mayorista\n        Segovia, Liseth\n        Segovia, Rosa\n        Segura Arias, Carolina\n        Seguros Chiapas\n        Siempreco\n        Sierra Barrios, Johan\n        Sigma International Insurance Brokers\n        Simon Hernandez Bozo, Luis\n        Simon Ricardo, Lic\n        Sira, Carlos\n        Smm - Col\n        Sol Travel Services\n        Solorzano, Simon\n        Soluciones Integrales Jtf\n        Spg Travel S.a.s\n        Stagno, Franchesca\n        Stella Maris Turismo\n        Stelluti, Enza\n        T Corrente, Claudia\n        Tarcisio Silva L, Darwin\n        Ten Assist, Ten Assist\n        The Gallery Travel \n        Tibari, Edmundo\n        Tickets And Travel\n        Tours Travel And Business Ltda\n        Travel Alliances\n        Travel Coach By Sa\n        Travel Link S.a.s\n        Treasure Viajes\n        Triana, Alvaro\n        Trip Ya, Orlando\n        Trujillo, Patricia\n        Tu Agente De Viajes Pzo\n        Tu Agente Online\n        Tudela, Andrea\n        Turishuila S.a.s\n        Turistas.com\n        Tutiquete Express\n        Umanchuk, Jorge\n        V Boscan, Gretha\n        Vacaciones Por El Mundo\n        Valderrama, Natalia\n        Valero, Yuraima\n        Valles, Luis\n        Vargas, Marbelys\n        Vasquez, Karla\n        Vc World Wide Group\n        Velazco, Justiniano\n        Velez Tours Sas\n        Velice Financial Services Ltd\n        Venesolution Corp.\n        Venezuela Travel Assist\n        Vespa, Luis\n        Viaja Seguro\n        Viajando Representaciones\n        Viajes Country S.a.s\n        Viajes Horizonte\n        Viajes Meridiano Ltda\n        Viajes Mora\n        Viajes Oneresglobe Ca\n        Viajes Y Eventos 360\n        Vialibre\n        Vieras, Mirtha\n        Villaroel, Ricardo\n        Villas Multiservices\n        Villegas, Angelo\n        Villegas, Enrique\n        Villegas, JulioCesar\n        Villegas, Mauricio\n        Wheeler, Linda\n        Yajure, Daniella\n        Yaniris Gil Centeno, Ennys\n        Yepez, Carlos\n        Yisbel Torres Rodrig, Oneida\n        Zambrano, Evelin\n        Zapata Rotundo, Carlosfrancisco\n        Zoturvenca\n        Zubillaga Jimenez, Antoniojose\n        ., Luzmary\n        ., Montezelba\n        A Menegaldo, Jose\n        Abetancourt Seguros\n        Abou Asaff, Amir\n        Acevedo, Rosangely\n        Acurero Mudafar, Elvis\n        Adolfo Velasquez De, Gustavo\n        Agencia, YouTravel\n        Aguilar, Julio\n        Aguilera, Patricia\n        Aguilera, Syl\n        Agutierrez Seguros\n        Al Aaias, Feras\n        Alacayo, Abigail\n        Alejandra Espinoza, Maria\n        Alejandra Tovar L., Maria\n        Aleman, Robert\n        Alfredo Matos, Jose\n        Aliendres Ortega, RicciVinicia\n        Almao, Marion\n        Almao, Vanessa\n        Alvarez, Margy\n        Amado, Douglas\n        Amador, Silvia\n        Ambato Travel\n        America Beck\n        Angel, Fuentes\n        Angelica PiÑero, Maria\n        Antonio Zuloaga Yane, Ramon\n        Antunez, Victor\n        Araujo, Rolando\n        Arc Seguros\n        Arce Gomez, DouglasEulises\n        Arguinzones, Alfredo\n        Arias, Douglas\n        Armas, Laura\n        Arraiz, Jenniffer\n        Arribas, Francisco\n        Arroyo, Xioeli\n        Artico Travel C.a \n        Arvelo, Haydi\n        Aseca Internacional \n        Aurelis, Zamora\n        Avilan, Marbelys\n        Avilan, Oswaldo\n        Avioteles\n        Awak, Georges\n        Aymerich \n        Baena, Andrea\n        Baena, Silvia\n        Bandres, Gloria\n        Barreto, Bianeys\n        Barrondo S., Maite\n        Bastidas, Genesis\n        Bello, Mariadela\n        Belloso, Linaura\n        Belloso, Lizbecth\n        Belmonte, JoseGabriel\n        Bermudez, Daniela\n        Bermudez, Ligia\n        Biztravel\n        Blanco G, Mili\n        Bonnefil L, Dominique\n        Borges Insurance Ser, Bermudez\n        Boscan, Gretha\n        Bracho, Julio\n        Brandt, Nerwill\n        Brea Borges, Irving\n        Briceno, Guido\n        BriceÑo, Lorena\n        Briceno, Marianela\n        Briceno, Maribel\n        Brito, Luis\n        Buchin Insurance\n        Bukowitz, Silvia\n        Bulhosen, Yaccutt\n        Burkert, Carmen\n        Calima, Over\n        Calvo, Luis\n        Camacho, Clara\n        Cantabriatur\n        Cantunez Seguros\n        Canualka Travel C.a\n        Capobianco, Maria\n        Caraballo, Mayerlin\n        Carballido, Diego\n        Cardona, Vivian\n        Carolina Mendoza, Haydee\n        Carrillo, Marlit\n        Carrillo, Yesica\n        Cartagena Travel &amp; Tours\n        Castaneda De Daniel., Ana\n        Castillo Travel\n        Castillo, Alexandra\n        Cecilia Araguainamo, Maria\n        Cedeno, Karina\n        Celi, JorgeL\n        Centeno, Daniela\n        Cesar Tabares Ramire, Paulo\n        Christianm\n        Ciccolella, Enzo\n        Clarity\n        Colmenares, Oscar\n        Colon Travel\n        Concepcion Hilders, Maria\n        Concord Travel\n        Contrataciones Turisticas\n        Contreras, Daisy\n        Coronado, Claudia\n        Coronel\n        Correa, Marianela\n        Cortese, Enza\n        Corti Guerrero, Carolina\n        Credondo Seguros\n        Cristina Pantoja\n        Cristina Petrill, Maria\n        Cundancin, Rubjuly\n        Dagnino, Patricia\n        Dao, Maria\n        David Rincon, Jose\n        De La Cruz, Sergio\n        De La Rosa, Silvia\n        De Los Angeles Pache, Maria\n        De Olival, Diana\n        De Oliveira, Maikel\n        De Paz, Sabrina\n        Delgado, Jessica\n        Diaz\n        Dib, Sheila\n        Digitravel\n        Dominguez, Monica\n        Duarte, David\n        Duque, Luz\n        Duran, MarcosAgoturismo\n        E, Maria\n        Ecua Explorer\n        Edg Mentors\n        Eduardom\n        Ee Seguros De Viaje\n        El Principito Travel &amp; Services C.a\n        Elatravel\n        Elena Lilue, Maria\n        Elena Villalobos Riv, Daisy\n        Enrique Leal Jimenez, Walfredo\n        Escalante, Annie\n        Escobar, Angela\n        Esperanza Rubiano, Maria\n        Espina, Marien\n        Espina, Sagrario\n        Espinoza, Lisbeth\n        Esther Andrade, Maria\n        Estrada, Sorena\n        Evasquez Seguros\n        Fantasy Vacations Club, C.a.\n        Febres, Jesus\n        Fernanda Molero, Maria\n        Fernandez, Frank\n        Fernandez, Leonel\n        Fernandez, Lidiana\n        Fernandez, Zoraida\n        Fernando Alizo, Luis\n        Ferrer, Kathie\n        Fineworld \n        Frias, Luis\n        Frivas Seguros\n        Gabriela Delgado, Maria\n        Galem Travel\n        Gallardo, Ana\n        Gamboa, Dubraska\n        Garces, Militza\n        Garcia, Andreina\n        Garcia, Antonio\n        Garcia, German\n        Garcia, Hermes\n        Garcia, Jaime\n        Garcia, Javier\n        Garcia, Luis\n        Garcia, Sebastian\n        Garcia, Yaribet\n        Garrido, Vaneska\n        Gelves, Adrian\n        Geronimo Perez, Luis\n        Gerstel, Irma\n        Ggonzalez Seguros\n        Gil, Ana\n        Ginestra, Noel\n        Glenn, Estepfanny\n        Gold Vip\n        Golden Tours\n        Goldman, David\n        Gonzalez, Adriana\n        Gonzalez, Auristela\n        Gonzalez, Carlos\n        Gonzalez, Maria\n        Gonzalez, Yaneth\n        Gregorio Silva Alvar, Jorge\n        Grima, Marjorie\n        Grupo Peru Viajes\n        Guerra, Auristela\n        Guerrero, Karttier\n        Hans Rojas, Otto\n        Hb Viajes\n        He, WenlianWen\n        Hernandez, Alejandro\n        Hernandez, Lourdes\n        Hernandez, Valentina\n        Hernandez, Wilkerman\n        Herrera, Bertha\n        Hilario Gomez, Luis\n        Hugo Santamaria Mila, Victor\n        Huncrisr\n        Hurtado, Domingo\n        Idarraga, Isabel\n        Iglesias, Miguel\n        Ilumina Travel\n        Imaginate Viajes\n        Inciarte, Martin\n        Inciarte, Milagros\n        Invierta Seguros Corp\n        Iragorry, Eduardo\n        Iriarte, Joselyn\n        Isasis, Emily\n        Iturbe, Carlos\n        Iventurella Seguros\n        Izaguirre, Alex\n        Jbarrington Seguros\n        Jcaceres Seguros\n        Jcastillo Seguros\n        Jcermeno Seguros\n        Jenny, Perozo\n        Jhernandez Seguros\n        Jimenez, Graciela\n        Jimenez, Moises\n        Jnc Tours\n        Jose Gonzalez, Maria\n        Jose Negron Briceno, Egdo\n        Landaeta, Sonia\n        Larez, Alcirelis\n        Lbg Insurance\n        Leal, Edith\n        Leben Insurance Brokers\n        Leon, Benny\n        Leonarduzzi, Gianluca\n        Lewisjime\n        Lgil Seguros\n        Linares, Marcos\n        Lmartinez Seguros\n        Lopez Zamora, Omar\n        Lopez, Belkis\n        Loyo, German\n        Lozano, Desire\n        Lozano, Marco\n        Lsanchez\n        Lsarmiento Seguros\n        Machado, Mairim\n        Manuel\n        Marbel Travel Assist\n        Maria, Suarez\n        Marielba\n        Marin Moncada, Nattaly\n        Marin, Sandra\n        Marina Sideregts, Luz\n        Maritere\n        Marliseth8aa\n        Marmol, Victor\n        Marquez Teran, Yolimar\n        Martin Fakes &amp; Asociados\n        Martin, Virginia\n        Martinez Noguera, Rossy\n        Martinez, Ambar\n        Martinez, Edgar\n        Martinez, Fernando\n        Martinez, Javier\n        Martinez, Yuly\n        Marve Renta Car\n        Marychinchilla\n        Marzo C, Damian\n        Massiani, Gustavo\n        Master One\n        Matilde Martin, Ester\n        Matos, Humberto\n        Maurera, Yanira\n        Mauricio, Luis\n        Maxi Tours\n        Maxi Travel Assist\n        Mcupare Seguros\n        Medina, Alexis\n        Medinas\n        Melean, Mariela\n        Mendez Corretaje\n        Mercys Tours Ca\n        Michelle Travel Assist\n        Migueltravel\n        Miki Travel\n        Millan, Yusbeth\n        Miranda, Alberto\n        Mk Agencia De Viaje\n        Mmarquez Seguros\n        Mmillan\n        Mmundarain Seguros\n        Molleda, Marilyn\n        Molleda, Rosalyn\n        Monica Travel\n        Montes, Carolina\n        Monteverde, Mercedes\n        Montoya, Patricia\n        Morales, Alexandra\n        Moraos, Anamercedes\n        Moreno Asesor De Vid, Luis\n        Mota, Luzmary\n        Mpacheco\n        Mujica, Damaris\n        Mujica, Gabriela\n        Mundirama\n        Mundo Viajes\n        Naser, Lilian\n        Nass, Carlos ReneVillasmil\n        Nayvely\n        Nc Ferrer Seguros\n        Newage Promotion\n        Nievesa Tours S.a.c \n        Noguera, Angela\n        Notaria\n        Nucete, Rafael\n        Nunez, Dulce\n        Nunez, Ninoska\n        Obrett Seguros\n        Ocando, Ricardo\n        Oceanic Travel\n        Odriozola, Nekane\n        Ojeda, Iranell\n        Okarinac\n        Olivieri, Giuseppe\n        Ordaz, Andreina\n        Oronoz, Yelitza\n        Orta, Ailiva\n        Osorio Tudares, Elizabeth\n        Osuna Lopez, Sergio\n        Ozuna, Marilen\n        Pachano, Maria\n        Padovan, Kathiuska\n        Paez, Endrys\n        Paez, Yasibit\n        Pages, Jaime\n        Palacios, Raquel\n        Palma, Carlos\n        Parraga, Rebeca\n        Pascal, Tibisay\n        Pasquale, Kenia\n        Paul Ginestra, Jean\n        Paula Esis, Maria\n        Paulina Travel Assist\n        Paz, Heliangelus\n        Paz, Josie\n        Paz, Misleny\n        Pedroza Casas, Alfredo\n        Pedroza, Manuel\n        Pelaez, Josandra\n        Peraza, Rebeca\n        Perez Von Seggern, Ernesto\n        Perez, Gustavo\n        Perez, Mariluz\n        Perez, Rebeca\n        Perez, Urquia\n        Perozo Romero, Liz\n        Perozo, Jenny\n        Pimentel, Isabel\n        Pina, Yanetsy\n        Pineda, Gledys GregoriaGutierrez\n        Platinium Travel Llc\n        Plaza, Isabela\n        Ponte, Asia\n        Portillo, Petra\n        Prieto, Adolfo\n        Princeturismo C.a.\n        Qsuarez\n        Quijada, Omary\n        Quintanar, Ana\n        Quovadis\n        Rada, Desiree\n        Rafael Gamus, Jose\n        Ramirez, Angela\n        Ramon Hernandez D, Orasil\n        Ramos\n        Rams Motors\n        Regueiro Ignasi, Andreina\n        Representaciones Continental Internacional \n        Requena, Franklin\n        Reyes, Gabriel\n        Reyna, Dubraska\n        Rincon, Milagros\n        Rios, Orangel\n        Rivas, Rebeca\n        Roble, Maria\n        Robledo, Raquel\n        Roblex Group\n        Rodriguez, Alvaro\n        Rodriguez, Eduardo\n        Rodriguez, Ernesto\n        Rodriguez, Jeannette\n        Rojas, Carlos\n        Rojas, Henry\n        Rojas, Jose\n        Rojas, Rosa\n        Rojas, Roxana\n        Roldan, Carolina\n        Romero Zaffaroni, Carlos\n        Romero, Adriannys\n        Romero, Anasofia\n        Romero, Roman\n        Rondon, Virginia\n        Roo, Leonardo\n        Rovero, Sandra\n        Roymar Viajes Y Turismo\n        Rubio, CristinaDe\n        Salamia, Lis\n        Salazar, Ana\n        Salazar, Gustavo\n        Salazar, Lissett\n        Salcedoc\n        Salinas, MariaAmericana\n        Salomon, Mauricio\n        Samantha Farias\n        Sanchez J, Ilcia\n        Sanchez, Felix\n        Sanchez, Juan\n        Sanchez, Karem\n        Sandra Del Valle Marin Int.\n        Sanguino, Gregori\n        Santa Paula Travel\n        Santos, RicardoYagual\n        Secura Group\n        Serrano, Gabriela\n        Shoda, Michelle\n        Sibada, Marianny\n        Siso, Susan\n        Skyline Tours\n        Socorro, Elena\n        Solano, Madeleine\n        Solutions Life\n        Soto, Gelinotte\n        Soto, Ileana\n        Stella Berlingeri, Maris\n        Suarez, Veronica\n        Sue, Rafael\n        Super Nice Renta Car\n        Tepeyac Travel C.a\n        Thamt\n        The Dream Maker\n        Time To Travel\n        Tinoco Y Asociados\n        Toro, Marisabel\n        Torres, MiguelA\n        Torres, RobertoGuarin\n        Tovar, Ismael\n        Tovar, Luirene\n        Travel Kruiz\n        Travel Live\n        Ucros, Luz\n        Ugarit\n        Urbina, JuanCarlos\n        Urdaneta, Fernando\n        Urdaneta, Tahiry\n        Valbuena, Hilda\n        Valderrama Rosales, Nelly\n        Vasquez, Irvanis\n        Velasquez, Daniel\n        Velasquez, Elizabeth\n        Venezia Travel\n        Viajes Royal Global\n        Viaxum Travel Peru\n        Vicente Matos, Jose\n        Villamizar, Jonathan\n        Villarreal, Lola\n        Villegas, Laura\n        Virginia Gonzalez, Maria\n        Wilkermanp\n        Xiomara Morillo, Yris\n        Y. Brandt, Nerwill\n        Yagual, ReynaAsesor\n        Yaisi\n        Yanes, Carmen\n        Yanira Linares Marti, Karem\n        Yelitzaoro\n        Yvelice Silva Aguirr, Josefina\n        Zadra, Juan\n        Zamora, Aureliz\n        Zapata, Martha Liliana\n        Zdelgado Seguros\n        Zerpa, Maiher\n        Zhen, Shengquan\n        Zulimart\n        , Nelson\n        ., Johana\n        ., Mabelis\n        ., Nuriluz\n        Acero, Nicolay\n        Acl Soluciones, C.a\n        Acosta, Francis\n        Acosta, Patricia\n        Aerotravel\n        Aeroworld Peru\n        Afreites Seguros\n        Agencia Esther Paez\n        Alfonzo, Laura\n        Alfredo Ocando, Luis\n        Alvarado Leal, Yuneira\n        Andrea Avila, Maria\n        Andreina Dominguez R, Samantha\n        Ann Shaw, Mery\n        Arianysa\n        Atencio, Carlos\n        Avila, Naivelin\n        Azuaje, Joselyn\n        Barillas, Morena\n        Bcd Travel - Turvisa Zona 10\n        Bello, Pablo\n        Beltran, Yolanda\n        Benitez, Benjamina\n        Black Miles\n        Bob Travel 1 Inc\n        Bonadies, Rafael\n        Boscan, Ada\n        Bracho, Monica\n        Briceno &amp; Asociados\n        Brivas Seguros\n        C. Morello, Carmen\n        Cabrera, Hector\n        Campos, Oskarina\n        Capo, Alonso\n        Caraco, Cristina\n        Carrero, Raul\n        Castellanos, Jorge\n        Castillejo, Andrew\n        Cedeno, Joseluis\n        Ceibal Tours\n        Cespinoza Seguros\n        Cianci, Assunta\n        City Travel\n        Cmoessati Seguros\n        Colina, Karina\n        Cordoba, Alejandro\n        CorporaciÓn Cyl 22\n        Costa Del Mar Travel And Services\n        Cruz, Ligmari\n        Da Costa, Mariela\n        Davila, Sandra\n        De Aguiar, Cesarina\n        De Los Angeles Baden, Maria\n        Delgado, Rodolfo\n        Devora&#039;s Travel\n        Diaz Otero &amp; Asociados\n        Dmendez Seguros\n        Eduardo Garcia, Javier\n        Erodriguez Seguros\n        Escalona, Carlos\n        Estrada, Andres\n        Exchange, Friendly\n        Express Tours\n        Falen Travel Agency\n        Felipe Rodriguez, Ramon\n        Fernanda Pirela, Maria\n        Fertur Travel\n        Galindez, Gilmerth\n        Gdemma Seguros\n        Gil, Dusady\n        Gmalave Seguros\n        Godoy, Gustavo\n        Gonzalez, Raul\n        Granes, Katty\n        Guatemala Nature\n        Gutierrez, Breddy\n        Gutierrez, Emiro\n        Halvarez Seguros\n        Hernandez, Andrea\n        Hernandez, Marisela\n        Hernandez, Miguel\n        Herrera, Omar\n        Ibarra, Eduardo\n        Inamet\n        Insurance Agency Llc, Svalencia\n        Jarace Seguros\n        Jbrea &amp; Asociados\n        Jimenez, Andreina\n        Jimenez, Leomary\n        JordoÑez Seguros\n        Jose Amado, Douglas\n        Jsalazar Seguros\n        Karina Rojas, Karla\n        Kenny Travel\n        La Nusta\n        Laneve, Rosa\n        Latin Spirit Travel\n        Leal, Alvaro\n        Leal, Anauris\n        Lebran \n        Leon, Andres\n        Lguzman Seguros\n        Lopez, Iscarel\n        Lopez, Lignery\n        Lores, Lis\n        Los Campitos Tours\n        Lpacheco\n        Machado, Carlos\n        Marquez, Angelica\n        Marquis, Oscar\n        Marte&#039;s Tax Services\n        Martinez, Cris\n        Martinez, Kisbel\n        Martinez, Marielina\n        Matos, Luis\n        Maxima Travel\n        Mendez, Deborah\n        Meneses, Laura\n        Merida Travel Services Llc\n        Mluces Seguros\n        Moncada, Carlos\n        Monroy, Cindy\n        Montiel, Mercedes\n        Montiel, Veronica\n        Morales, Mayra\n        Morales, Nilfida\n        Multidestinos\n        Mundo Turismo\n        Nancy´s Travel\n        Nardelli, Claudia\n        Natera, Zullyra\n        Netcomtravel\n        Norelikac\n        Noriega &amp; Asociados\n        Ocando, Andres\n        Ochoa, Cesar\n        Ochoa, Marianela\n        Orozco, David\n        Ortega, Erika\n        Ortega, Marianella\n        Pacheco, Mireya\n        Palacios, Anamaria\n        Paz, Vanessa\n        Perdomo, Yanny\n        Pereira &amp; Asociados\n        Perez, Alberto\n        Perez, Alirio\n        Petit, Bianca\n        Pinango, Olga\n        Ponce, Ericson\n        Prisko Tours\n        Punto Ecuador\n        Punto Multiservices\n        Quinones, Nataly\n        Regardiz, Eleumarys\n        Renatours\n        Renwick, Rafael\n        Reyes, Jolbelys\n        Rlengua\n        Rodriguez, Ángel\n        Rodriguez, Aura\n        Rodriguez, Katia\n        Rodriguez, Katiana\n        Rodriguez, Leonardo\n        Rojas, Morela\n        Romero, Ana\n        Romero, Sonia\n        Ronel Tours\n        Ruiz, Joe\n        Rumbos Tours\n        Salazar Alcala, Daniella\n        Salcedo, Carmenvictoria\n        Samara Tours\n        Sanchez &amp; Asociados\n        Sanchez, Anamaria\n        Sanchez, Jim\n        Seguros Krmaura\n        Seguros, Lrivera\n        Silva, Mariangela\n        Soles, Lorena\n        Suarez, Eoliberth\n        Suarez, Neyma\n        Surga, Jeannette\n        Surga, Yelizta\n        T&amp;h Multiservices\n        Tours Y Eventos Vip\n        Turismo Inkaiko\n        Urdaneta, Dayana\n        Utrera, Friendherlyn\n        Vanegash, Robinson\n        Vasquez, Cristobal\n        Velasquez, Santiago\n        Veneturismo C.a\n        Viajes Panamericana\n        Viajes Primavera\n        Viajesjf\n        Vicente Gonzalez Gar, Jose\n        Villalobos, Andreus\n        Villasmil, Ruthmary\n        Virginia Mago Beaufo, Maria\n        Viva Operador\n        Volare\n        Vuela Club\n        Wilsons Travel And Services\n        Zambrano, Aliana\n        Alejandra Figueira, Maria\n        Aracay Tours\n        Campitos Tours\n        Carolines Travel\n        Matos Villalobos, Sofia\n        Matos, Deyanira\n        Montiel, Maria\n        Pianezzola, Sandra\n        Pineda, Marianyeli\n        Rivero, Iskra\n        Ruta Carlucci, Guiseppe\n        Terrone Ruta, Nunzio\n        Visbal, Debora\n        Prozper\n        \"\"\"\n        \n            let statuss = \"\"\"\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        INACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        ACTIVO\n        \"\"\"\n        \n            let getLines = String.splitByChar '\\n'\n                        >> Seq.map String.trim\n                        >> Seq.filter ((<>) \"\")\n        \n            let statuses =\n                Seq.zip (getLines keys) (getLines statuss) |> Map\n        \n            let aliados =\n                getLines data\n                |> Seq.map (String.splitByChar '\\t')\n                |> Seq.map (fun p -> p.[0], Seq.last p)\n                |> Seq.map (fun (p1, p2) -> \n                    try statuses.[p1]\n                    with e -> printfn \"not found %A\" p1 ; \"INACTIVO\"\n                    , p1, p2)\n                |> Seq.map (fun (sta, p1, p2) ->\n                    let apellido, nombre, genero = \n                        match p1.Split ',' with\n                        | [| ap ; nm |] -> ap.Trim(), nm.Trim(), Femenino\n                        | _             -> \"\"       , p1.Trim(), Empresa\n                    {\n                        id              = IdAliado p1\n                        idPadreO        = IdAliado p2 |> Some\n                        identificacion  = [||]\n                        datosPersonales = {\n                                            titulo          = None\n                                            nombre1         = nombre\n                                            nombre2         = \"\"\n                                            apellido1       = apellido\n                                            apellido2       = \"\"\n                                            nacionalidad    = Venezuela\n                                            genero          = genero\n                                            fechaNacimiento = System.DateTime.Now\n                                            contactos       = [||]\n        \n                        }\n                        formasPago      = [||]\n                        transacciones   = [||]\n                        mensajes        = [||]\n                        isInternal      = false\n                        status          = if sta = \"ACTIVO\" then Activo else Inactivo\n                        tipo           = Regular\n                        fechaRegistro   = System.DateTime.Now\n                        fechaStatus     = System.DateTime.Now\n                        nReferidos      = 0\n                        nRefActivos     = 0\n                        nDescendientes  = 0\n                        nDescActivos    = 0\n                        comision        = 0\n                        nivel           = 0\n                    }\n                )\n        \n            let modelo = {\n                idAliado      = IdAliado \":\"\n                aliados       = aliados |> Seq.toArray\n                anoActual     = 2019\n                periodoActual = 1\n                premisas      = premisasCalculo\n                nevento       = -2L\n            }\n        \n            //Aliado.actualizarAliados modelo\n            //|> Seq.iter print\n        \n        \n        //#define NOFMK --noframework\n        module ModeloUI =\n            let modeloV = Var.Create {\n                idAliado      = IdAliado \":\"\n                aliados       = [||]\n                anoActual     = System.DateTime.Now.Year\n                periodoActual = System.DateTime.Now.Month\n                premisas      = premisasCalculo\n                nevento       = -2L\n            }\n        \n            let rec separate s parts =\n                match s with\n                | \"\" -> parts |> String.concat \",\"\n                | _  -> separate (s.Left -3) (s.Right 3 :: parts)\n        \n            let money (m:int) = \"$\" + separate (string m) []\n        \n            type EndPoint =\n            | [< EndPoint \"\" >] DefaultEP\n            |                   Content of string\n        \n            let endPointV = Var.Create DefaultEP\n        \n            open Sitelets.InferRouter\n            open FsRoot\n            module AF = AppFramework \n        \n            let contentVar = Var.Create \"ProzperLyt.mainContent\"\n        \n            if IsClient then\n                Router.Infer()\n                |> Router.InstallHashInto endPointV DefaultEP\n        \n                endPointV.View |> View.Map (\n                    function\n                    | DefaultEP          -> \"ProzperLyt.mainContent\"\n                    | Content     lyt    -> lyt)\n                |> View.Sink (fun lyt    -> \n                    if  contentVar.Value <> lyt then\n                        contentVar.Set      lyt\n                )\n        \n                contentVar.View |> View.Map (\n                    function\n                    | \"ProzperLyt.mainContent\"  -> DefaultEP\n                    | lyt                       -> Content lyt)\n                |> View.Sink (fun ep -> \n                    if  endPointV.Value <> ep then\n                        endPointV.Value <- ep\n                )\n        \n        module Telefono =\n        \n            let formaDoc (telV : Var<Telefono option>) = \n                \n                let forma = TemplateLib.Telefono().Create()\n        \n                telV.View \n                |> View.Sink (function\n                    | None     -> ()\n                    | Some tel -> \n                    forma.Vars.CodigoArea  .Set <| tel.codigoArea  \n                    forma.Vars.CodigoPais  .Set <| tel.codigoPais  \n                    forma.Vars.Telefono    .Set <| tel.numero    \n                    forma.Vars.TipoTelefono.Set <| sprintf \"%A\" tel.tipoTelefono\n                )\n                let requeridosW =\n                    V(  [   forma.Vars.CodigoPais  .V.Trim() = \"\" , \"CodigoPais\"\n                            forma.Vars.Telefono    .V.Trim() = \"\" , \"Telefono\"\n                            forma.Vars.TipoTelefono.V.Trim() = \"\" , \"TipoTelefono\"\n                        ]\n                        |> Seq.filter fst\n                        |> Seq.map    snd\n                    )\n                V (\n                    if not (Seq.isEmpty requeridosW.V)  then None else\n                    match forma.Vars.TipoTelefono.V.Trim() |> TipoTelefono.tryParse with\n                    | None      -> JS.Alert \"Error not caught: TipoTelefono\" ; None\n                    | Some tipo ->                \n                    Some {\n                        codigoArea   = forma.Vars.CodigoArea  .Value.Trim()\n                        codigoPais   = forma.Vars.CodigoPais  .Value.Trim()\n                        numero       = forma.Vars.Telefono    .Value.Trim()\n                        tipoTelefono = tipo\n                        mensajes     = false\n                    }\n                ) |> View.Sink (fun v -> if telV.Value <> v then telV.Set v)\n                requeridosW, forma.Doc\n        \n        module FormaRegistro =\n        \n            let mensajes      = Var.Create \"\"\n            let mensajeCorreo = Var.Create \"\"\n            let mostrar       = Var.Create false\n            let telefonoOV    = Var.Create None\n        \n            let formaDoc() =\n                let telReqsW, telefonoDoc = Telefono.formaDoc telefonoOV\n                let forma    = \n                    TemplateLib.FormaRegistro()\n                        .Mensajes(       if mostrar.V then mensajes     .V else \"\")\n                        .MensajeCorreo(  if mostrar.V then mensajeCorreo.V else \"\")\n                        .Telefono(       telefonoDoc                              )\n                        .Registrarse(fun ev ->\n                            mostrar.Set true\n                            let m =  mensajes.Value + \" \" + mensajeCorreo.Value\n                            if m.Trim() <> \"\" then JS.Alert m else \n                                match telefonoOV.Value\n                                    , ev.Vars.Estado         .Value |> Estado.tryParse \n                                    , ev.Vars.Pais           .Value |> Pais  .tryParse\n                                    , ev.Vars.Genero         .Value |> Genero.tryParse\n                                    , ev.Vars.FechaNacimiento.Value |> ParseO.parseDateO\n                                        with\n                                | Some telefono, Some estado, Some pais , Some genero, Some fecha ->\n                                    asyncResultM {\n                                        let correo          = EMail ev.Vars.Correo.Value \n                                        let direccion       = {\n                                            tipoDireccion   = TipoDireccion.Habitacion\n                                            linea1          = ev.Vars.Direccion1    .Value.Trim()\n                                            linea2          = ev.Vars.Direccion2    .Value.Trim()\n                                            ciudad          = ev.Vars.Ciudad        .Value.Trim()\n                                            estado          = estado\n                                            pais            = pais\n                                            zonaPostal      = ev.Vars.CodigoPostal  .Value.Trim() |> ZonaPostal\n                                        }\n                                        let datos           = {\n                                            titulo          = None\n                                            nombre1         = ev.Vars.Nombres       .Value.Trim().Split(' ').[0]\n                                            nombre2         = ev.Vars.Nombres       .Value.Trim().Split(' ').[1..] |> String.concat \" \"\n                                            apellido1       = ev.Vars.Apellidos     .Value.Trim().Split(' ').[0]\n                                            apellido2       = ev.Vars.Apellidos     .Value.Trim().Split(' ').[1..] |> String.concat \" \"\n                                            nacionalidad    = OtroP \"\"\n                                            genero          = genero\n                                            fechaNacimiento = fecha\n                                            contactos       = [|    CorreoElectronico correo\n                                                                    Telefono          telefono\n                                                                    Direccion         direccion \n                                                                |]\n                                        }\n                                        let! resp = RegistroNuevo datos |> Rpc.ejecutarEvento\n                                        sprintf \"%A\" resp|> JS.Alert\n                                    } |> AsyncResultM.iterA (ResultMessage.summarized >> JS.Alert) id\n                                | _ -> JS.Alert \"Error not caught FormaRegistro\"\n                        )\n                        .Create()\n                V(  [   forma.Vars.Nombres        .V.Trim() = \"\" , \"Nombres\"\n                        forma.Vars.Apellidos      .V.Trim() = \"\" , \"Apellidos\"\n                        forma.Vars.Direccion1     .V.Trim() = \"\" , \"Direccion1\"\n                        forma.Vars.CodigoPostal   .V.Trim() = \"\" , \"Codigo Postal\"\n                        forma.Vars.Ciudad         .V.Trim() = \"\" , \"Ciudad\"\n                        forma.Vars.Estado         .V.Trim() = \"\" , \"Estado\"\n                        forma.Vars.FechaNacimiento.V.Trim() = \"\" , \"Fecha de Nacimiento\"\n                        forma.Vars.Genero         .V.Trim() = \"\" , \"Genero\"\n                        forma.Vars.Correo         .V.Trim() = \"\" , \"Correo\"\n                        forma.Vars.ConfirmarCorreo.V.Trim() = \"\" , \"Confirmar Correo\"\n                    ]\n                    |> Seq.filter fst\n                    |> Seq.map    snd\n                    |> Seq.append telReqsW.V\n                    |> String.concat \", \"\n                    |> fun es -> if es <> \"\" then \"Campos requeridos: \" + es else \"\"\n                )   |> View.Sink mensajes.Set\n                V(  if forma.Vars.Correo.V.Trim() <> forma.Vars.ConfirmarCorreo.V.Trim() \n                    then \"El Correo Electronico no es el mismo\"\n                    else \"\"\n                )   |> View.Sink mensajeCorreo.Set\n                forma.Doc\n                    \n        module RenderAliados =\n            open SortWith\n        \n            let aliados() =\n                let expandidos = Var.Create None\n                let hijosDeO   = Var.Create None\n        \n                let hijosDe id = hijosDeO.Value |> Option.map (fun f -> f id) |> Option.defaultValue [||]\n        \n                let nombre dp = \n                    let titulo   = dp.titulo |> Option.map ((+) \" \") |> Option.defaultValue \"\"\n                    let apellido = if dp.apellido1 = \"\" then \"\" else dp.apellido1 + \", \"\n                    titulo + apellido + dp.nombre1 \n                let referidos al =\n                    if al.nReferidos = 0 then \"-\" else\n                    sprintf \"%d/%d\" al.nRefActivos al.nReferidos\n                let descendientes al =\n                    if al.nDescendientes = 0 then \"-\" else\n                    sprintf \"%d/%d\" al.nDescActivos al.nDescendientes\n                let comision v = if v = 0 then \"-\" else ModeloUI.money v \n                let expandido id =\n                    expandidos.View\n                    |> View.Map (fun exp -> \n                        if hijosDe id |> Seq.isEmpty then \"\" else\n                        if exp |> Option.map (Set.contains id) = Some true then \"Expandido\" else \"Colapsado\") \n                let expandir  id =\n                    if expandidos.Value |> Option.map (Set.contains id) = Some true then Set.remove else Set.add\n                        <| id \n                        <| (expandidos.Value |> Option.defaultValue Set.empty)\n                    |> Some\n                    |> expandidos.Set\n                let seleccionar id = \n                    { ModeloUI.modeloV.Value with idAliado = id }\n                    |> ModeloUI.modeloV.Set\n                let sortAliados als =\n                    let als = als |> Seq.sortWith (desc (fun al -> al.comision                       )\n                                                &>  asc (fun al -> al.status                         )\n                                                &> desc (fun al -> al.nRefActivos , al.nReferidos    )\n                                                &> desc (fun al -> al.nDescActivos, al.nDescendientes)\n                                                &>  asc (fun al -> nombre al.datosPersonales         ) )\n                    let buscar = Aliado.busqueda als\n                    hijosDeO.Set <| Some buscar.hijosDe\n                    let nivel = try als |> Seq.map (fun al -> al.nivel) |> Seq.min with _ -> 1\n                    let raiz = als |> Seq.filter (fun al -> al.nivel = nivel)\n                    if raiz |> Seq.isEmpty then\n                        expandidos.Set None\n                    elif expandidos.Value.IsNone then\n                        raiz |> Seq.map (fun al -> al.id) |> Set |> Some |> expandidos.Set\n                        raiz |> Seq.map (fun al -> al.id) |> Seq.tryHead |> Option.iter seleccionar\n                    let rec buscarExpandidos al = seq {\n                        yield al\n                        if expandidos.Value |> Option.map (Set.contains al.id) |> Option.defaultValue false then\n                            for hijo in buscar.hijos al do\n                                yield! buscarExpandidos hijo\n                    }\n                    seq {\n                        for al in raiz do\n                            yield! buscarExpandidos al\n                    }\n                \n                TemplateLib.TablaAliados()\n                    .TBody(\n                        V ModeloUI.modeloV.V.aliados\n                        |> View.Map2 (fun _ -> sortAliados) expandidos.View\n                        |> Doc.BindSeqCachedViewBy (fun al -> al.id) (fun alid alv ->\n                            TemplateLib.FilaAliado()\n                                .nombre(              nombre        alv.V.datosPersonales)\n                                .status(              sprintf \"%A\"  alv.V.status         )\n                                .tipo(                sprintf \"%A\"  alv.V.tipo           )\n                                .nivel(               string        alv.V.nivel          )\n                                .referidos(           referidos     alv.V                )\n                                .descendientes(       descendientes alv.V                )\n                                .comision(            comision      alv.V.comision       )\n                                .expandido(           expandido     alid                 )\n                                .expandir(   fun _ -> expandir      alid                 )\n                                .seleccionado( if alid = ModeloUI.modeloV.V.idAliado then \"seleccionado\" else \"\" )\n                                .seleccionar(fun _ -> seleccionar   alid                 )\n                                .Doc()\n                        )\n                    ).Doc()\n        module RenderAliado =\n        \n            let alvO = View.Do {\n                let! modelo = ModeloUI.modeloV.View\n                return modelo.aliados |> Seq.tryFind (fun al -> al.id = modelo.idAliado )\n            }\n        \n            let calculo() =\n        \n                let prem = V ModeloUI.modeloV.V.premisas\n        \n                let nombre dp = \n                    let titulo   = dp.titulo |> Option.map ((+) \" \") |> Option.defaultValue \"\"\n                    titulo + dp.nombre1 + \" \" + dp.apellido1\n                let comision v = if v = 0 then \"-\" else sprintf \"%5d$\" v\n                \n                let alvO = \n                    let aliados = V ModeloUI.modeloV.V.aliados\n                    let alid    = V ModeloUI.modeloV.V.idAliado\n                    V (Seq.tryFind (fun al -> al.id = alid.V) aliados.V)\n        \n                let calculoDoc (alv: View<Aliado>) =\n                    let comisionV = V (Aliado.comision prem.V alv.V)\n                    let premisasV = V (Aliado.premisas prem.V alv.V)\n                    TemplateLib.Calculo()\n                        .referidos(        sprintf \"%d\"    alv.V.nReferidos                    )\n                        .refActivos(       sprintf \"%d\"    alv.V.nRefActivos                   )\n                        .comReferido(      sprintf \"%d\"   (alv.V.nRefActivos )                 )\n                        .descendientes(    sprintf \"%d\"    alv.V.nDescendientes                )\n                        .desActivos(       sprintf \"%d\"    alv.V.nDescActivos                  )\n                        .comision(         ModeloUI.money (fst comisionV.V + snd comisionV.V ) )\n                        .comReferido(      ModeloUI.money (fst comisionV.V                   ) )\n                        .comDescendiente(  ModeloUI.money (snd comisionV.V                   ) )\n                        .porReferido(      ModeloUI.money (fst premisasV.V                   ) )\n                        .porDescendiente(  ModeloUI.money (snd premisasV.V                   ) )\n                        .Doc() \n        \n                alvO |> View.Map ( function\n                    | Some al -> V (Option.get alvO.V) |> calculoDoc\n                    | None    -> Doc.Empty\n                ) |> Doc.BindView id\n        \n            let aliado() =\n        \n                let nombre dp = \n                    let titulo   = dp.titulo |> Option.map ((+) \" \") |> Option.defaultValue \"\"\n                    titulo + dp.nombre1 + \" \" + dp.apellido1\n                let comision v = if v = 0 then \"-\" else sprintf \"%5d$\" v\n                \n                let aliadoDoc (alv: View<Aliado>) =\n                    TemplateLib.Aliado()\n                        .nombre(           nombre        alv.V.datosPersonales)\n                        .status(           sprintf \"%A\"  alv.V.status         )\n                        .tipo(             sprintf \"%A\"  alv.V.tipo           )\n                        .contacto(         sprintf \"%s@hotmail.com\"  alv.V.datosPersonales.apellido1)\n                        .Calculo(          calculo()                          )\n                        .Doc() \n        \n                alvO |> View.Map ( function\n                    | Some al -> V (Option.get alvO.V) |> aliadoDoc\n                    | None    -> Doc.Empty\n                ) |> Doc.BindView id\n        \n        \n        module MainProgram =\n            open Templating\n        \n            open FsRoot\n            module AF = AppFramework \n        \n            let layoutName = \"ProzperLyt\"\n        \n            let scrollToBottom (e:Dom.Element) (_:obj) = \n                async { \n                    do! Async.Sleep 100\n                    do  e.ScrollTop <- e.ScrollHeight\n                } |> Async.Start\n        \n        //    let mainLayout() =\n        //        TemplateLib.Layout()\n        //            .CalculationTable( tableCalculations()                  )\n        //            .FormulaDetail(    details          ()                  )\n        //            .DimsSelected(     dimsSelected     ()                  )\n        //            .DimensionTable(   tableDimensions  ()                  )\n        //            .GlobalText(       globalDefs       ()                  )\n        //            .Server(           model.server                         )\n        //            .Output(           model.outputMsgs                     )\n        //            .FSCode(           model.codeFS                         )\n        //            .Parser(           model.parserMsgs                     )\n        //            .Filename(         model.fileName                       )\n        //            .AddCalculation(   fun _ -> AddCalculation |> processor )\n        //            .AddTotal(         fun _ -> AddTotal       |> processor )\n        //            .NewDimension(     fun _ -> AddDimension   |> processor )\n        //            .SaveAs(           fun _ -> SaveLoad.saveAsFile()       )\n        //            .LoadFileChanged(  fun e -> SaveLoad.loadFile e.Target  )\n        //            .LoadFileClear(    fun e -> e.Target?value <- \"\"        )\n        //            .UpdateRules(      fun _ -> UpdateAlea.updateModel()    )        \n        //            .IndentIn(         fun _ -> model.selection.Value |> Option.map fst |> Option.iter (fun nid -> IndentNode(true , nid) |> processor) )\n        //            .IndentOut(        fun _ -> model.selection.Value |> Option.map fst |> Option.iter (fun nid -> IndentNode(false, nid) |> processor) )\n        //        //    .Reorder(          fun _ -> reorder()                                    )\n        //            .JumpRef(ParseFS.jumpToRef)\n        //            .OutputAfterRender(fun e -> model.outputMsgs.View |> View.Sink (scrollToBottom e))\n        //            .Doc()\n        \n            let mesToString =\n                function\n                |  1 -> \"Ene\"            \n                |  2 -> \"Feb\"            \n                |  3 -> \"Mar\"            \n                |  4 -> \"Abr\"            \n                |  5 -> \"May\"            \n                |  6 -> \"Jun\"            \n                |  7 -> \"Jul\"            \n                |  8 -> \"Ago\"            \n                |  9 -> \"Sep\"            \n                | 10 -> \"Oct\"            \n                | 11 -> \"Nov\"            \n                | 12 -> \"Dic\"\n                | _  -> \"---\"\n        \n            let logout () = \n                asyncResultM {\n                    do! Rpc.logoutUser()\n                    JS.Window.Location.Reload()\n                } |> Rpc.iterA \n        \n            let getContentDoc() =\n                ModeloUI.contentVar.View\n                |> View.Map(fun content ->\n                    LayoutEngine.splitName \"Prozper\" content\n                    ||> AF.tryGetDoc\n                    |>  Option.map (LayoutEngine.getDocFinal [])\n                    |>  Option.defaultWith (fun () -> sprintf \"Doc not found %s\" content |> LayoutEngine.errDoc)\n                )\n                |> Doc.EmbedView\n        \n            [< WebSharper.Sitelets.Website >]    \n            let mainProgram() =\n                let titleV     = Var.Create \"Prozper\"\n                let mesActualW = V (mesToString ModeloUI.modeloV.V.periodoActual )\n                let anoActualW = V (string      ModeloUI.modeloV.V.anoActual     )\n        \n                AF.addPlugIn {\n                    AF.plgName    = \"Prozper\"\n                    AF.plgVars    = [| AF.newVar  \"title\"        titleV\n                                       AF.newVar  \"contentVar\"   ModeloUI.contentVar\n                                    |]  \n                    AF.plgViews   = [| AF.newViw  \"mesActual\"          mesActualW\n                                       AF.newViw  \"anoActual\"          anoActualW\n                                    |]  \n                    AF.plgDocs    = [| AF.newDoc  \"Aliados\"        (lazy RenderAliados.aliados () )\n                                       AF.newDoc  \"Aliado\"         (lazy RenderAliado .aliado  () )\n                                       AF.newDoc  \"Calculo\"        (lazy RenderAliado .calculo () )\n                                       AF.newDoc  \"FormaRegistro\"  (lazy FormaRegistro.formaDoc() )\n                                       AF.newDoc  \"contentDoc\"     (lazy getContentDoc         () )\n                                    |]  \n                    AF.plgActions = [| AF.newAct  \"Logout\"      logout\n                                       //AF.newAct  \"RemoveSnippet\"   deleteSnippet       \n                                       //AF.newAct  \"IndentIn\"        <| fun () -> model.selection.Value |> Option.map fst |> Option.iter (fun nid -> IndentNode(true , nid) |> processor)\n                                       //AF.newAct  \"IndentOut\"       <| fun () -> model.selection.Value |> Option.map fst |> Option.iter (fun nid -> IndentNode(false, nid) |> processor)\n                                       //AF.newAct  \"AddProperty\"     RenderProperties.addProperty\n                                       //AF.newAct  \"RunFS\"           runFsCode\n                                       //AF.newAct  \"AbortFsi\"        FsiAgent.abortFsiExe\n                                       //AF.newAct  \"DisposeFsi\"      FsiAgent.disposeFsiExe\n                                       //AF.newActF \"LoadFile\"        <| AF.FunAct1 ((fun o -> unbox o |> LoadTextFile |> processor  ), \"FileElement\")\n                                       //AF.newActF  \"SaveAs\"          <| AF.FunAct1 ((fun o -> unbox o |> SaveTextFile |> processor  ), \"FileElement\")\n                                       //AF.newActF \"Import\"          <| AF.FunAct1 ((fun o -> unbox o |> Importer.importFile     ), \"FileElement\")\n                                       //AF.newActF \"JumpTo\"          <| AF.FunAct1 ((fun o -> unbox o |> JumpTo.jumpToRef        ), \"textarea\"   )\n                                       //AF.newActF \"ButtonClick\"     <| AF.FunAct1 ((fun o -> unbox o |> CustomAction.buttonClick), \"button\"     )\n                                       //AF.newActF \"ActionClick\"     <| AF.FunAct1 ((fun o -> unbox o |> CustomAction.actionClick), \"name\"       )\n                                       //AF.newAct  \"AddCalculation\"  (fun () -> AddCalculation |> processor)\n                                       //AF.newAct  \"AddTotal\"        (fun () -> AddTotal       |> processor)\n                                       //AF.newAct  \"AddDimension\"    (fun () -> AddDimension   |> processor)\n                                    |]\n                    AF.plgQueries = [|                                               \n                                    |]\n                }\n                match JS.Document.GetElementById(\"GlobalLayout\") with\n                | null ->\n                   \"\"\"\n                    menuEditor       horizontal  65       menuLogo                  editorMessages\n                    double           horizontal  0-50-100 AppFramework.AppFwkClient menuEditor\n                    menuLogo         vertical    350      logo                      menu\n                    logo             span       \"margin:0; color:gray; font-size: 55px; font-weight:530\" \"F# Station\"\n                    editorMessages   horizontal 10-83-100 editorButtons             messages\n                    messages         vertical   0-50-100  messagesLeft              messagesRight\n                    editorButtons    vertical -200 snippetsSnippet buttons\n                    buttons div      \"overflow: hidden; display: grid; grid-template-columns: 100%; grid-template-rows: repeat(15, calc(100% / 15)); bxackground-color: #eee; box-sizing: border-box; padding : 5px; grid-gap: 5px; margin-right: 21px\" btnSaveAs none x btnAddSnippet btnDeleteSnippet btnIndentIn btnIndentOut none x btnRunFS none x btnAbortFsi\n                    snippetsSnippet  vertical   0-20-100  snippets                  editorProperties\n                    snippets         horizontal 20        \"${FSharpStation.CurrentPath}\" FSharpStation.Snippets\n                    editorProperties vertical   0-100-100 snippet                   properties\n                    properties       div        \"\"        FSharpStation.Properties\n                    snippet          horizontal 35        Name                      FSharpStation.editor\n                    menu             span  \"\" btnLoad btnImport\n        \n                    btnSaveAs        button FSharpStation.SaveAs         \"class=btn ${FSharpStation.SaveNeeded}\" \"Save as...    \"\n                    btnAddDimension  button RuleEditor.AddDimension      \"\"                  \"Add Dimension \"\n                    btnDeleteSnippet button FSharpStation.RemoveSnippet  \"\"                  \"Delete Snippet\"\n                    btnIndentIn      button FSharpStation.IndentIn       \"\"                  \"Indent In  >> \"\n                    btnIndentOut     button FSharpStation.IndentOut      \"\"                  \"Indent Out << \"\n                    btnRunFS         button FSharpStation.RunFS          \"\"                  \"Run F#        \"\n                    btnAbortFsi      button FSharpStation.AbortFsi       \"\"                  \"Abort Fsi     \"\n        \n                    messagesLeft     wcomp-tabstrip                      \"\"                  Output FsCode\n                    messagesRight    wcomp-tabstrip                      \"\"                  Parser\n        \n                    Output           textarea  FSharpStation.Output      \"tabname=Output ; placeholder=Output messages ; spellcheck=false\" \n                    FsCode           textarea  FSharpStation.FsCode      \"tabname=F# Code; placeholder=F# Code         ; spellcheck=false\" \n                    Parser           textarea  FSharpStation.Parser      \"tabname=Parser ; placeholder=Parser messages; dblclick=${FSharpStation.JumpTo} ; spellcheck=false\" \n                    Name             Doc       InputLabel                \"\"     \"Name:\"        FSharpStation.SnippetName\n                    btnLoad          Doc       InputFile                 \"\"     \"Load File...\" FSharpStation.LoadFile  FileName\n                    btnImport        Doc       InputFile                 \"\"     \"Import...\"    FSharpStation.Import    \"\"\n                    FileName         div                                 \"class=form-control\"  FSharpStation.fileName\n                   \"\"\"\n                | e -> e.TextContent\n                |> LayoutEngine.newLyt layoutName\n                |> LayoutEngine.addLayout\n        \n                None\n                |> Option.defaultValue layoutName\n                |> AF.mainDocV.Set\n        \n                asyncResultM {\n                    let! data = Rpc.leerDataModelo()\n                    ModeloUI.modeloV.Set data\n                } |> Rpc.iterA\n        \n                TemplateLib()\n                    .MainContent( AF.getMainDoc.Value )\n                    .Bind()\n                titleV.View |> View.Sink (fun t -> JS.Document.Title <- t)\n                \n        //#r @\"..\\packages\\Owin\\lib\\net40\\Owin.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin\\lib\\net451\\Microsoft.Owin.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.Hosting\\lib\\net451\\Microsoft.Owin.Hosting.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.Host.HttpListener\\lib\\net451\\Microsoft.Owin.Host.HttpListener.dll\"\n        //#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\WebSharper.Owin.dll\"\n        //#r @\"..\\packages\\WebSharper.Owin\\lib\\net461\\HttpMultipartParser.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.StaticFiles\\lib\\net451\\Microsoft.Owin.StaticFiles.dll\"\n        //#r @\"..\\packages\\Microsoft.Owin.FileSystems\\lib\\net451\\Microsoft.Owin.FileSystems.dll\"\n        //#define FSS_SERVER\n        [< JavaScript false >]\n        module Server =\n            open global.Owin\n            open Microsoft.Owin.Hosting\n            open Microsoft.Owin.StaticFiles\n            open Microsoft.Owin.FileSystems\n            open WebSharper.Owin\n            open WebSharper.Sitelets\n            open WebSharper.UI.Server\n            open WebSharper.UI.Templating\n            open WebSharper.UI.Html\n        \n            type Data = { Usuario: string ;  Password:string }\n        \n            type EndPointServer =  | [< EndPoint \"/\" >] EP\n                                   | [< EndPoint \"POST /demo\" ; FormData >] DATA of Data\n        \n            let content (ctx:Context<EndPointServer>) (endpoint:EndPointServer) : Async<Content<EndPointServer>> =\n                printfn \"%A\" endpoint\n                match ctx.UserSession.GetLoggedInUser() |> Async.RunSynchronously with\n                | Some user ->\n                (**)printfn \"Serving Main page: %s\" user\n                    Content.Page(\n                        TemplateLib()\n                            .Initializer( Html.client <@  MainProgram.mainProgram(); Doc.TextNode \"Initialized\" @> )\n                            .Elt(keepUnfilled = true)\n                    )\n                | None ->\n                (**)printfn \"Serving Login page\"\n                    Content.Page(\n                        TemplateLogin()\n                            .Brand(\"Prozper\") \n                            .madeby(    \"CIPHERBsc\")\n                            .madebylink(\"cipherbsc.com\")\n                            .Login(fun e -> \n                                if e.Vars.Username.Value <> \"\" && e.Vars.Password.Value <> \"\" \n                                then asyncResultM {\n                                        do! Rpc.loginUser e.Vars.Username.Value e.Vars.Password.Value\n                                        JS.Window.Location.Reload()\n                                     } |> Rpc.iterA \n                            ) \n                            .Doc()\n                    )\n        \n            [< EntryPoint >]\n            let Main args =\n                //Sample.aliados |> Seq.iter (DataEvento.AgregarAliado >> Rpc.ejecutarEvento >> AsyncResultM.iterS print print)\n                printfn \"Usage: FSharpStation URL ROOT_DIRECTORY MaxMessageSize\"\n                let url           = args |> Seq.tryItem 0 |>                   Option.defaultValue \"http://localhost:9005/\"\n                let rootDirectory = args |> Seq.tryItem 1 |>                   Option.defaultValue @\"..\\website\"\n                let max           = args |> Seq.tryItem 2 |> Option.map int |> Option.defaultValue 1_000_000\n                //let epWebSocket = Endpoint.Create(url, \"/ws\", JsonEncoding.Readable)\n                //let broker = Broker.BrokerAgent epWebSocket\n                //Broker.BrokerAgent.FssWebSocketO <- Some broker\n                use server = WebApp.Start(url, fun appB ->\n                    appB\n                        .UseWebSharperRemoting(rootdir)\n                        .UseWebSharper(WebSharperOptions(ServerRootDirectory = rootdir\n                                                       , Sitelet             = (Some <| Application.MultiPage content)\n                                                       , BinDirectory        = \".\"\n                                                       , Debug               = true))\n                        .UseStaticFiles(StaticFileOptions(FileSystem = PhysicalFileSystem(rootDirectory)))\n                        //.UseWebSocket(  epWebSocket, broker.Start, maxMessageSize = max)\n                    |> ignore)\n                stdout.WriteLine(\"Listening on {0}, hit enter to finish\", url)\n                stdin.ReadLine() |> ignore\n                0\n        "],
"names": [],
"mappings": "03H,AA6H0B,IAAG,K,AAAA,C,AAAH,CAEiC,2EAAe,M,AAAA,E,AAAjC,IAAiC,G,AAAhC,C,AAFb,C,AAAH,IAAG,K,AAAA,C,AAAH,CAGiC,2EAAe,M,AAAA,E,AAAjC,IAAiC,G,AAAhC,C,AAHb,C,AAAH,IAAG,K,AAAA,C,AAIY,IAAC,G,AAJb,C,AAAH,IAAG,K,AAAA,C,AAAH,CAKiC,4DAAI,M,AAAA,E,AAAtB,IAAsB,G,AAArB,C,AALb,C,AAAH,IAAG,K,AAAA,C,AAAH,EAMyB,CAAQ,2FAAmB,O,AAAA,E,AAAtC,IAAsC,G,AAApC,G,AAAF,IAAsC,G,AAAjC,C,AANhB,C,AAAH,IAAG,K,AAAA,C,AAAH,UAO8G,IAAkB,C,AAAlB,OAAnC,QAA+B,C,AAA/B,UAAlD,oBAAY,EAAiC,K,AAAA,E,AAAA,C,AAAvD,IAAiH,G,AAA1D,C,AAAoC,C,AAAsB,C,AAP7H,C,AAAH,EAAG,6D,AAac,GAAgB,oBAAA,cAAA,EAAI,E,AAAA,E,AAAA,C,AAAQ,kC,AAD5B,GAAgB,oBAAA,cAAA,EAAO,E,AAAA,E,AAAA,C,AAAK,mC,AAD5B,GAAgB,oBAAA,cAAA,EAAQ,E,AAAA,E,AAAA,C,AAAI,qC,AA2GjC,cAAO,iBAAiB,CAAK,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAX,E,AAAY,C,AAA9B,EAA8B,C,AAAA,qC,AAFrC,cAAO,iBAAiB,CAAK,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAX,E,AAAY,C,AAA9B,EAA8B,C,AAAA,oC,AAFrC,cAAO,iBAAiB,CAAK,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAX,E,AAAY,C,AAA9B,EAA8B,C,AAAA,wC,AAFnC,UAA+D,IAAkB,C,AAAlB,UAAxB,mBAAa,EAAM,G,AAAN,EAAM,E,AAAA,C,AAAnB,YAArC,SAAA,EAAc,C,AAAA,C,AAAG,WAAS,EAAC,C,AAAC,EAAG,C,AAAA,E,AAAyB,C,AAAuB,C,AAAA,2C,AAT/F,SAAO,EAAC,C,AAAC,EAAG,C,AAAA,Q,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,CAAY,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,CAAY,E,AAAZ,GAAA,EAAY,G,AAAA,E,AAAA,C,AAAA,E,AAAZ,GAAA,EAAY,G,AAAA,E,AAAA,C,AAAA,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,C,AAAZ,CAAY,E,AAAZ,GAAA,EAAY,G,AAAA,E,AAAA,C,AAAA,E,AAAZ,IAAA,EAAY,G,AAAA,C,AAAZ,EAAY,G,AAAA,G,AAAA,C,AAAA,C,AAAZ,EAAY,G,AAAA,G,AAAZ,CAAY,E,AAAZ,GAAA,EAAY,G,AAAA,E,AAAA,G,AAAZ,IAAA,EAAY,G,AAAA,C,AAAZ,EAAY,G,AAAA,G,AAAA,C,AAAA,e,AAGL,EAAE,c,AACF,CAAQ,+EAAiB,M,AAAA,E,AAAzB,EAAyB,C,AAAE,c,AAC3B,CAAQ,+EAAiB,M,AAAA,E,AAAzB,EAAyB,C,AAAE,c,AAC3B,GAAQ,wGAA+B,S,AAAC,KAAC,G,AAAC,KAAC,C,AAAA,qC,AATxC,QAAgB,QAAe,C,AAAf,OAAe,C,AAAf,EAAe,C,AAAA,mC,AARzC,EAAI,K,AAAA,C,AAAJ,EAAI,C,AAAJ,EAAI,K,AAAA,C,AAAJ,EAAI,K,AAAA,C,AAAJ,EAAI,C,AAAJ,EAAI,K,AAAA,C,AAAJ,cAGJ,EAAa,G,AAAuC,Q,AAArC,EAAa,G,AAAiC,C,AAAe,E,AAHpE,C,AAAJ,cAGJ,EAAa,G,AAEuC,Q,AAAG,CAAG,EAAE,C,AAAG,C,AAAa,E,AALpE,C,AAAJ,EAAI,K,AAAA,C,AAAJ,EAAI,C,AAAJ,EAAI,K,AAAA,C,AAAJ,cAI0C,CAAG,EAAE,C,AAAG,Q,AAAvC,EAAa,G,AAAiC,C,AAAe,E,AAJpE,C,AAAJ,cAM+D,CAAlB,EAAE,C,AAAO,EAAE,C,AAAgB,E,AANpE,gC,AAHG,SAAO,iBAAY,CAAK,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAX,E,AAAY,C,AAAzB,EAAyB,C,AAAA,gC,AAFhC,SAAO,iBAAY,CAAK,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAX,E,AAAY,C,AAAzB,EAAyB,C,AAAA,+B,AAFhC,SAAO,iBAAY,CAAK,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAX,E,AAAY,C,AAAzB,EAAyB,C,AAAA,yD,AAJ2B,mBAAe,CAAe,EAAC,C,AAAhB,EAAE,G,AAAmB,C,AAAE,EAAC,C,AAAxB,EAAE,G,AAA2B,C,AAAE,EAAC,C,AAAhC,EAAE,G,AAAmC,C,AAAnC,E,AAAmC,S,AALtH,EAAG,K,AAAA,C,AAAH,CACe,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AADnB,C,AAAH,EAAG,K,AAAA,C,AAAH,CAEe,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAFnB,C,AAAH,EAAG,K,AAAA,C,AAAH,CAGe,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAHnB,C,AAAH,EAAG,K,AAAA,C,AAAH,GAIe,EAAG,G,AAAA,C,AAJf,C,AAAH,EAAG,K,AAAA,C,AAAH,+BAKwD,2CAAyE,Y,AAAzE,CAAiE,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AAAC,C,AAAzE,OAAtB,oBAAS,SAAA,EAAQ,C,AAAR,EAAQ,C,AAAA,E,AAAC,C,AAA/B,WAAS,C,AAAf,EAAkH,G,AAAhH,C,AAAmC,C,AAA6E,C,AAL9H,C,AAAH,CAMe,CAAC,C,AAAE,CAAC,C,AAAE,CAAC,C,AANnB,kC,AAHM,WAAO,kBAAc,KAAC,E,AAAU,C,AAAzB,EAAyB,C,AAAA,iC,AAFhC,WAAO,kBAAc,IAAC,E,AAAU,C,AAAzB,EAAyB,C,AAAA,qC,AATzC,EAAG,K,AAAA,C,AAAH,KAAG,C,AAAH,EAAG,K,AAAA,C,AAAH,KAAG,C,AAAH,EAAG,K,AAAA,C,AAAH,KAAG,C,AAAH,EAAG,K,AAAA,C,AAAH,GAIe,EAAG,G,AAAA,C,AAJf,C,AAAH,EAAG,K,AAAA,C,AAAH,UAKqB,oBAAY,WAAA,EAAU,C,AAAV,EAAU,C,AAAA,E,AAAA,C,AAA5B,EAA6B,G,AAAD,C,AALxC,C,AAAH,IAAG,0C,AAHc,mBAAO,kBAAsB,IAAC,E,AAAU,C,AAAjC,EAAiC,C,AAAA,yC,AAFxC,mBAAO,kBAAsB,KAAC,E,AAAU,C,AAAjC,EAAiC,C,AAAA,6C,AANzD,EAAG,K,AAAA,G,AAAH,EAAG,K,AAAA,C,AAAH,GAEe,EAAG,G,AAAA,C,AAFf,C,AAAH,EAAG,K,AAAA,E,AAAH,UAGkC,oBAAqB,mBAAiB,EAAC,C,AAAC,EAAC,C,AAAA,E,AAAI,UAAQ,EAAC,C,AAAC,EAAC,C,AAAA,E,AAAC,C,AAAtE,WAAS,C,AAAf,EAA4E,G,AAA1E,C,AAA0E,C,AAHxF,C,AAAA,iC,AAHK,UAAO,kBAAa,IAAC,E,AAAU,C,AAAxB,EAAwB,C,AAAA,gC,AAF/B,UAAO,kBAAa,KAAC,E,AAAU,C,AAAxB,EAAwB,C,AAAA,oC,AANvC,EAAG,K,AAAA,G,AAAH,EAAG,K,AAAA,C,AAAH,GAEe,EAAG,G,AAAA,C,AAFf,C,AAAH,EAAG,K,AAAA,E,AAAH,UAGkC,oBAAY,UAAA,EAAS,C,AAAT,EAAS,C,AAAA,E,AAAC,C,AAAnC,WAAS,C,AAAf,EAAyC,G,AAAvC,C,AAAuC,C,AAHrD,C,AAAA,6D,AAHiD,cAAA,EAAI,E,AAAA,S,AAAzC,gBAAO,GAAsB,4DAAI,M,AAAA,iC,AAAa,E,AAAvC,EAAuC,C,AAAA,6D,AAFT,cAAA,EAAO,E,AAAA,S,AAA5C,gBAAO,GAAsB,4DAAI,M,AAAA,iC,AAAa,E,AAAvC,EAAuC,C,AAAA,4D,AAFT,cAAA,EAAQ,E,AAAA,S,AAA7C,gBAAO,GAAsB,4DAAI,M,AAAA,iC,AAAa,E,AAAvC,EAAuC,C,AAAA,yC,AAF9C,cAAO,EAAa,C,AAAb,EAAa,C,AAAA,wC,AAVnC,EAAG,K,AAAA,C,AAAH,GAEe,EAAW,G,AAAA,C,AAFvB,C,AAAH,EAAG,K,AAAA,C,AAAH,cAGe,EAAW,G,AAAA,E,AAHvB,C,AAAH,EAAG,K,AAAA,C,AAAH,cAIe,EAAW,G,AAAA,E,AAJvB,C,AAAH,EAAG,K,AAAA,C,AAAH,cAKe,EAAW,G,AAAA,E,AALvB,C,AAAH,EAAG,K,AAAA,C,AAAH,cAMe,EAAc,G,AAAH,I,AAAX,EAAc,G,AAAD,E,AANzB,C,AAAH,EAAG,K,AAAA,C,AAAH,cAOsD,OAA7B,oBAAW,cAAA,EAAa,C,AAAb,EAAa,C,AAAA,E,AAAC,C,AAAnC,EAAgD,G,AAAb,C,AAAa,E,AAP5D,C,AAAH,OAAG,kD,AAHwC,CAAA,EAAG,S,AAA9B,UAAM,qCAAyB,C,AAAzB,EAAyB,C,AAAA,+B,AADxB,EAAiC,K,AAAA,kC,AA2LpD,EAAE,M,AAAA,C,AAAF,EAAE,C,AAAF,CACM,EAAe,G,AAAA,C,AADnB,iC,AAFoB,UAAO,oBAAY,EAAiC,K,AAAzB,C,AAAS,QAAA,EAAM,G,AAAA,C,AAAA,C,AAAM,IAAI,E,AAAC,C,AAA9C,EAA8C,C,AAAA,iC,AADrD,UAAO,IAAa,C,AAAb,EAAa,C,AAAA,iC,AADb,EAA0D,K,AAAlD,C,AAAR,OAAsD,mBAAA,QAAA,EAAE,C,AAAA,E,AAAA,C,AAAV,EAAY,G,AAAA,C,AAAlD,C,AAAR,UAA2B,UAAL,EAAa,G,AAAD,C,AAAA,C,AAA1B,oC,AADf,sBAAkB,OAAA,mBAAQ,QAAA,EAAI,C,AAAA,E,AAAA,C,AAAZ,KAAY,C,AAAA,C,AAAC,Q,AAAI,SAA6B,UAAI,IAAI,C,AAAA,M,AAAC,6F,AAmCH,QAAA,EAAE,C,AAAA,+C,AAApD,EAAsD,K,AAA9C,C,AAAR,QAA8C,EAAQ,G,AAAA,kC,AAA9C,C,AAAR,UAA2B,UAAL,EAAa,G,AAAD,C,AAAA,C,AAA1B,uD,AADO,QAAA,EAAI,C,AAAA,2C,AAA1B,sEAA2B,Q,AAAI,SAA6B,UAAI,IAAI,C,AAAA,M,AAAC,qC,AADrE,cAAY,IAAE,C,AAAC,EAAE,C,AAAA,8E,AAFb,QACJ,YAAe,uBADQ,0BAAA,GAAE,EAAI,C,AAAA,C,AAAM,oBAAS,0BAAA,EAAI,C,AAAM,oBAAS,UAAkB,iBAAR,EAAC,I,AAAC,EAAC,E,AAAQ,C,AAAA,E,AAAA,C,AAAC,E,AAAA,C,AAAC,E,AACjE,C,AAAE,SAAY,EAAE,C,AAAA,C,AAAG,UAAI,UAAU,C,AAAA,C,AAAC,wB,AAAQ,IAAU,Q,AADrD,oD,AADpB,QAAO,EAAC,I,AAAA,yC,AAJtB,IAAK,Q,AAAL,SAC3B,kBAAA,QAAI,SAAY,EAAY,C,AAAA,C,AAC5B,kBAAA,UAAO,IAAG,C,AAAA,E,AAAA,C,AADkB,E,AAAA,C,AADI,qC,AAPlB,IAAK,Q,AAAL,SACd,kBAAA,QAAc,cAAiB,EAAE,C,AAAnB,IAAmB,C,AAAA,C,AACjC,oBAAA,QAAc,cAAiB,EAAE,C,AAAnB,IAAmB,C,AAAA,C,AACjC,oBAAA,QAAS,EAAM,C,AACf,oBAAA,QAAS,EAAM,C,AACf,oBAAA,UAAO,GAAE,EAAC,C,AAAA,C,AAAA,E,AAAA,C,AAAA,E,AAAA,C,AAAA,E,AAAA,C,AAAA,E,AAAA,C,AAJuB,E,AAAA,C,AADd,mE,AAoEf,IAAI,O,AAAO,OAAA,EAAQ,C,AAAgB,C,AAAC,oBAChC,EAAI,O,AAAO,kBAAA,EAAa,W,AAAA,E,AAAA,C,AACpB,EAAI,O,AAAO,kBAAU,GAAK,EAAI,U,AAAQ,C,AAAA,E,AAAA,C,AAAC,C,AAAC,E,AAAA,C,AAAC,mD,AAN1C,IAAO,C,AAAM,QAAU,kBAAgB,GAAU,EAAK,C,AAAC,EAAI,C,AAAA,E,AAAC,C,AAArC,IAAqC,C,AAAA,C,AAC1D,OAAQ,S,AAFjB,GAGU,EAAK,C,AAAC,EAAI,C,AAAA,oC,AAL4D,EAAI,oE,AADvC,IAAM,U,AAAW,IAAc,uC,AAD/B,IAAM,mB,AAAW,GAAY,EAAC,C,AAAA,4B,AADlC,QAAS,EAAO,C,AAAP,QAAN,IAAE,C,AAAW,C,AAAA,kC,AADhB,QAAK,EAAC,C,AAAC,EAAC,C,AAAA,qC,AAFR,OAAM,+B,AADN,QAAa,EAAC,C,AAAC,EAAC,C,AAAA,8C,AAFhB,MAAK,EAAC,C,AAAA,kC,AADlD,gBAAO,qF,AA4BiB,MAAO,EAAC,C,AAAA,uD,AADR,0BAAA,GAAE,EAAC,C,AAAA,C,AAAK,EAAC,C,AAAA,6C,AADT,uBAAA,GAAE,EAAC,C,AAAA,C,AAAK,EAAC,C,AAAA,oD,AADT,QAAM,EAAC,C,AAAC,EAAC,C,AAAA,iD,AADT,OAAM,EAAC,C,AAAC,EAAC,C,AAAA,wF,AA3BH,cAAY,IAAE,C,AAAC,EAAE,C,AAAA,wC,AAFb,OACuD,IAAc,C,AAAd,YAA5C,uBADQ,0BAAA,GAAE,EAAI,C,AAAA,C,AAAM,oBAAS,0BAAA,EAAI,C,AAAM,oBAA2B,KAAG,C,AAArB,iBAAU,EAAC,I,AAAC,EAAC,E,AAAC,C,AAAO,E,AAAA,C,AAAC,E,AAAA,C,AAAC,E,AACjE,C,AAAE,SAAY,EAAE,C,AAAA,C,AAAG,MAAI,UAAU,C,AAAA,C,AAAmB,C,AADrD,oD,AADpB,QAAK,EAAC,C,AAAC,EAAC,C,AAAA,oC,AADR,QAAO,oBAAO,WAAA,EAAU,C,AAAV,EAAU,C,AAAA,E,AAAC,C,AAAlB,EAAkB,C,AAAA,oC,AADzB,sBAAkB,OAAA,mBAAI,QAAA,EAAI,C,AAAA,E,AAAA,C,AAAR,KAAQ,C,AAAA,C,AAAC,Q,AAAO,SAA6B,QAAG,IAAI,C,AAAA,M,AAAC,wC,AADvE,sBAAkB,QAAA,KAAE,C,AAAA,C,AAAA,Q,AAAc,wDAA+B,6B,AADjE,cAAgB,+CAAgC,C,AAAhC,EAAgC,C,AAAA,6B,AADhD,cAAiB,EAAc,C,AAAd,OAAV,EAAM,C,AAAN,EAAM,C,AAAkB,C,AAAA,iC,AAD/B,QAAO,mCAAQ,C,AAAE,EAAC,C,AAAA,8B,AALZ,EAAC,K,AAAA,Q,AAGwD,SAAK,C,AAAjD,EAAiD,G,AAAhD,C,AAHb,iB,AACY,GAAN,EACuD,G,AAD9C,C,AAAA,mB,AACyC,SAAK,C,AAA5C,cAAW,EAAC,Q,AAAQ,I,AAAE,EAAC,M,AAAW,E,AAAC,C,AAAS,wC,AAJjE,CAAI,EAAC,C,AAAW,SAAK,I,AAAA,C,AAAO,QAAG,IAAE,C,AAAA,uC,AAD7B,EAAC,C,AAAW,SAAK,I,AAAA,C,AAAO,QAAG,IAAE,C,AAAA,yC,AAD7B,EAAsC,K,AAA9B,C,AAAR,EAAQ,C,AAAc,EAAC,G,AAAf,wC,AADR,EAAwC,K,AAAhC,C,AAAR,GAAqC,EAAG,G,AAAA,C,AAAhC,C,AAAc,EAAC,G,AAAf,kC,AADR,EAAyC,K,AAAjC,C,AAAS,QAAA,EAAM,G,AAAA,C,AAAA,C,AAAc,IAAI,iC,AADhD,QAAY,IAAE,C,AAAC,EAAC,C,AAAA,8B,AADhB,QAAY,IAAE,C,AAAC,EAAC,C,AAAA,4B,AADhB,QAAA,EAAE,C,AAAA,qC,AADK,EAAyE,K,AAAjE,C,AAA4D,SAAK,C,AAApC,cAAA,EAAoC,G,AAAT,C,AAAA,C,AAAxD,C,AAAR,QAAiB,EAAI,G,AAAA,C,AAAb,gC,AAFjC,GAAgB,SAAK,C,AAAI,gD,AAsEP,IAAI,G,AAAA,2D,AAGf,IAAC,E,AAAA,+D,AACoB,IAAC,qD,AAFhC,IAAC,G,AAAD,EAAC,2F,AAoB6D,IAAI,K,AAAA,6F,AAF/D,IAAI,M,AAAJ,EAAI,6C,AAYH,CAAA,EAAG,a,AAAM,UAAK,C,AAAA,Q,AAAd,GAAc,Y,AAAA,C,AAAd,QACuB,EAAK,Y,AAAM,C,AADpB,C,AAGM,SAAK,C,AAAI,CAAA,YAAU,mGAA+B,C,AAAA,E,AAAzC,EAAyC,C,AAAE,C,AAH1D,mB,AAKpB,SAAK,C,AAAI,cAAwB,EAAC,Q,AAAQ,I,AAAE,EAAC,M,AAAW,E,AAAC,C,AAAA,iC,AAVvD,CAAA,EAAG,a,AAAM,UAAK,C,AAAA,Q,AAAd,GAAc,Y,AAAA,C,AACM,EAAK,Y,AADX,C,AAAd,CAE8B,sFAAqB,a,AAAA,E,AAA/B,EAA+B,C,AAFrC,oC,AAFP,cAAK,kBAAI,WAAW,EAAC,C,AAAX,E,AAAW,E,AAAE,kC,AADiB,UAAa,EAAC,C,AAAM,mC,AAD3C,EAAM,yC,AAAS,UAAY,EAAI,C,AAAC,C,AAAC,6B,AA2B1C,MAAO,EAAC,C,AAAA,uD,AADR,0BAAA,GAAE,EAAC,C,AAAA,C,AAAK,EAAC,C,AAAA,6C,AADT,uBAAA,GAAE,EAAC,C,AAAA,C,AAAK,EAAC,C,AAAA,oD,AADT,OAAM,EAAC,C,AAAC,EAAC,C,AAAA,iD,AADT,MAAM,EAAC,C,AAAC,EAAC,C,AAAA,mD,AADT,QAAM,EAAC,C,AAAC,EAAC,C,AAAA,sE,AAmC9B,IAAI,O,AAAO,OAAA,EAAQ,C,AAAgB,C,AAAC,oBAChC,EAAI,O,AAAO,kBAAA,EAAa,W,AAAA,E,AAAA,C,AACpB,kBAAU,EAAI,O,AAAO,kBAAU,GAAK,EAAI,U,AAAQ,C,AAAA,E,AAAA,C,AAAC,E,AAAA,C,AAAC,E,AAAA,C,AAAC,gC,AAJnD,IAAI,Y,AAAY,kBADM,GAAK,EAAU,C,AAAA,E,AAChB,C,AAAE,cAAa,WAAA,EAAiB,C,AAAI,IAAI,C,AAAA,C,AAAM,EAA0C,U,AAAA,E,AAAA,C,AADpG,qC,AAFwB,cAAI,wBAAuB,IAAsB,G,AAAA,C,AAAD,EAAC,C,AAAA,U,AAAW,IAAc,G,AAAA,E,AAAY,kC,AADtF,cAAI,wBAAuB,IAAsB,G,AAAA,C,AAAD,EAAC,C,AAAA,mB,AAAwB,GAAL,EAAC,C,AAA0B,G,AAAA,C,AAAD,EAAC,C,AAAA,G,AAAA,E,AAAC,mD,AAHlI,IAAO,C,AAAM,OAAU,kBAAgB,GAAU,EAAK,C,AAAC,EAAI,C,AAAA,E,AAAC,C,AAArC,IAAqC,C,AAAA,C,AAC1D,OAAQ,S,AAFjB,GAGU,EAAK,C,AAAC,EAAI,C,AAAA,6B,AANqC,cAAK,oBAAa,IAAU,G,AAAA,C,AAAgB,EAAC,C,AAAjB,E,AAAiB,E,AAAC,kC,AADxB,IAAI,M,AAAM,EAAK,C,AAAE,kBAAU,EAAM,E,AAAA,C,AAAC,+B,AADzE,OAAK,EAAC,C,AAAC,EAAG,C,AAAA,8C,AAFV,MAAI,EAAC,C,AAAA,0B,AADL,OAAM,kC,AADjD,gBAAU,gD,AA8BS,IAAC,E,AAAA,+B,AADG,IAAC,E,AAAA,+D,AAG8B,UAAY,IAAC,E,AAAA,C,AAAE,EAAM,yC,AAAc,IAAC,E,AAAA,C,AAAA,C,AAAM,wD,AAJlF,IAAC,G,AAAD,EAAC,C,AAAO,IAAC,G,AAAD,EAAC,gD,AAOJ,IAAC,E,AAAA,+D,AAEkC,UAAY,EAAM,yC,AAAY,IAAC,E,AAAA,C,AAAA,C,AAAM,qD,AAH7E,IAAC,G,AAAD,EAAC,iE,AAkBsB,GAImC,Y,AAJ3B,E,AACV,EAAQ,I,AAAI,EAAG,Y,AAAM,C,AACY,EAAI,C,AAArC,CAAA,EAAG,W,AAAK,C,AAFE,E,AAAR,GAImC,Y,AAJ3B,C,AAGuB,EAAI,C,AAArC,CAAA,EAAG,U,AAAI,EAAQ,G,AAAA,C,AAAA,C,AAHL,C,AAAR,SAIoB,EAAe,C,AAAf,EAAe,C,AAJ3B,K,AAD3B,CAAI,EAAK,C,AAAA,Q,AACxB,cAKK,kBAA4D,EAAI,C,AAArC,CAAA,EAAG,a,AAAM,UAAS,C,AAAA,C,AAAxC,E,AAA2D,E,AAAE,sE,AAdA,GAIW,Y,AAJH,C,AAAR,GACjC,CAAA,EAAK,C,AAAE,EAAK,Y,AAAM,C,AAAA,C,AADuB,C,AAAR,GAIW,Y,AAJH,E,AAAR,GAExC,CAAA,EAAG,W,AAAK,O,AAAqC,EAAG,Y,AAAM,I,AAFN,E,AAAR,GAIW,Y,AAJH,C,AAAR,SAGxC,CAAA,EAAG,U,AAAG,EAAK,C,AAAA,C,AAHqC,C,AAAR,SAIlB,kCAA6B,C,AAA7B,EAA6B,C,AAJH,S,AAA/E,cAKK,oBAA0B,SAAA,CAAA,EAAG,a,AAAM,UAAS,C,AAAA,C,AAAgC,E,AAAA,E,AAAC,6B,AARxB,cAAK,oBAAS,UAAY,EAAC,C,AAAE,EAAC,C,AAAM,E,AAAA,E,AAAC,2B,AADrC,cAAK,oBAAS,UAAY,EAAC,C,AAAS,E,AAAA,E,AAAC,kD,AA0D3E,IAAC,E,AAAA,+B,AADD,IAAC,E,AAAA,+D,AAG8B,UAAiB,IAAC,E,AAAA,C,AAAE,EAAM,yC,AAAc,IAAC,E,AAAA,C,AAAA,C,AAAM,wD,AAJpF,IAAC,G,AAAD,EAAC,C,AAAO,IAAC,G,AAAD,EAAC,6D,AA0BW,GAEuC,Y,AAF/B,C,AAC2B,EAAI,C,AAArC,CAAA,EAAG,W,AAAK,C,AADF,C,AAAR,SAEwB,EAAe,C,AAAf,EAAe,C,AAF/B,S,AAA1C,cAGK,kBAAgE,EAAI,C,AAArC,CAAA,EAAG,a,AAAM,UAAS,C,AAAA,C,AAA5C,E,AAA+D,E,AAAE,2D,AAVzC,GAGuC,Y,AAH/B,E,AAAR,CACU,0EAAS,2B,AAAA,E,AAAC,EAAG,Y,AAAJ,E,AACgB,EAAI,C,AAArC,CAAA,EAAG,W,AAAK,C,AAFF,E,AAAR,SAGwB,EAAe,C,AAAf,EAAe,C,AAH/B,S,AAA1C,cAIK,kBAAgE,EAAI,C,AAArC,CAAA,EAAG,a,AAAM,UAAS,C,AAAA,C,AAA5C,E,AAA+D,E,AAAE,qE,AAXO,GAGc,Y,AAHN,C,AAAR,GACzC,CAAA,EAAK,Y,AAAM,C,AAAE,EAAC,C,AAAA,C,AADmC,C,AAAR,GAGc,Y,AAHN,E,AAAR,GAEhD,CAAA,EAAG,W,AAAK,I,AAAgC,iBAAA,EAAG,Y,AAAM,I,AAAI,EAAC,E,AAAA,O,AAFE,E,AAAR,SAG1B,kCAAwC,C,AAAxC,EAAwC,C,AAHN,S,AAA1F,cAIK,oBAA6B,GAAuC,UAAE,I,AAAzC,CAAA,EAAG,a,AAAM,UAAS,C,AAAA,C,AAA2C,E,AAAA,E,AAAC,8B,AATrF,GAAgB,KAAG,C,AAAe,6B,AADW,cAAK,oBAAS,UAAiB,EAAC,C,AAAE,EAAC,C,AAAM,E,AAAA,E,AAAC,8C,AA8B9E,IAAC,E,AAAA,+B,AADD,IAAC,E,AAAA,+D,AAEiD,UAAiB,IAAC,E,AAAA,C,AAAE,EAAM,yC,AAAc,IAAC,E,AAAA,C,AAAA,C,AAAM,wD,AAHvG,IAAC,G,AAAD,EAAC,C,AAAO,IAAC,G,AAAD,EAAC,uC,AAuBoD,SAAO,C,AAA5C,MAAS,oBAAK,WAAA,EAAkB,C,AAAlB,EAAkB,C,AAAA,E,AAAC,C,AAAxB,EAAwB,C,AAAA,C,AAAW,iC,AAD5C,OAAS,UAAa,C,AAAb,EAAa,C,AAAA,uD,AANQ,GAGW,Y,AAHH,C,AAAR,GAC3B,QAAM,EAAK,Y,AAAM,C,AAAA,C,AADkB,C,AAAR,GAGW,Y,AAHH,C,AAAR,GAE3B,UAAM,EAAI,Y,AAAO,C,AAAA,C,AAFkB,C,AAAR,SAGZ,+BAAuB,C,AAAvB,EAAuB,C,AAHH,S,AAA5E,cAIK,oBAA6B,MAAA,CAAA,EAAG,a,AAAM,UAAS,C,AAAA,C,AAA0B,E,AAAA,E,AAAC,qC,AAb5B,OAAG,Q,AAAH,EAAG,O,AACtD,kBAAM,EAAG,K,AAAA,C,AAEM,EAAiB,M,AAAR,OAAT,EAAiB,G,AAAA,C,AAAA,C,AACjB,kBAAA,EAAsB,Q,AAAf,IAAe,C,AAAA,E,AAAA,C,AAH5B,C,AACM,EAAQ,Q,AAAR,EAAQ,G,AAAA,C,AADd,E,AAG4B,C,AAJiB,8B,AADG,cAAK,oBAAS,UAAiB,EAAC,C,AAAE,EAAC,C,AAAM,E,AAAA,E,AAAC,mF,AAzIjE,MAAS,mBAAc,CAAA,EAAC,C,AAAE,EAAG,C,AAAA,E,AAAC,C,AAArB,EAAqB,C,AAAA,sC,AAD9B,MAAS,mBAAc,CAAA,EAAG,C,AAAE,EAAC,C,AAAA,E,AAAC,C,AAArB,EAAqB,C,AAAA,iC,AADrB,EAAsD,K,AAA9C,C,AAAR,MAAkD,mBAAA,QAAA,EAAE,C,AAAA,E,AAAA,C,AAAN,EAAQ,G,AAAA,C,AAA9C,C,AAAR,MAA2B,UAAL,EAAa,G,AAAD,C,AAAA,C,AAA1B,oC,AADjB,sBAAoB,MAAA,mBAAI,QAAA,EAAI,C,AAAA,E,AAAA,C,AAAR,KAAQ,C,AAAA,C,AAAC,Q,AAAI,SAA6B,MAAI,IAAI,C,AAAA,M,AAAC,qC,AAF3E,cAAY,IAAE,C,AAAC,EAAE,C,AAAA,wC,AAFb,MACuD,IAAc,C,AAAd,YAA5C,uBADQ,0BAAA,GAAE,EAAI,C,AAAA,C,AAAM,oBAAS,0BAAA,EAAI,C,AAAM,oBAA2B,KAAG,C,AAArB,iBAAU,EAAC,I,AAAC,EAAC,E,AAAC,C,AAAO,E,AAAA,C,AAAC,E,AAAA,C,AAAC,E,AACjE,C,AAAE,SAAY,EAAE,C,AAAA,C,AAAG,MAAI,UAAU,C,AAAA,C,AAAmB,C,AADrD,kC,AAXjC,OAAM,oBAAe,MAAI,EAAC,C,AAAC,EAAE,C,AAAA,E,AAAC,C,AAAxB,EAAwB,C,AAAA,gC,AAD9B,OAAM,mCAAQ,C,AAAE,EAAC,C,AAAA,iC,AAhCtB,cAAK,oBACO,EAAW,G,AAAA,C,AACR,oBACC,GAAgB,EAAC,C,AAAN,G,AAAA,C,AACT,EAAC,C,AADQ,E,AACR,C,AAHI,E,AAId,E,AACJ,6B,AARL,cAAK,oBAAS,GAAE,EAAC,C,AAAA,E,AAAA,E,AAAC,mE,AAmS9B,IAAI,O,AAAO,OAAA,EAAQ,C,AAAgB,C,AAAC,oBAChC,EAAI,O,AAAO,kBAAA,EAAa,W,AAAA,E,AAAA,C,AACpB,EAAI,O,AAAO,kBAAU,GAAK,EAAI,U,AAAQ,C,AAAA,E,AAAA,C,AAAC,C,AAAC,E,AAAA,C,AAAC,mD,AAN1C,IAAO,C,AAAM,OAAU,kBAAgB,GAAU,EAAK,C,AAAC,EAAI,C,AAAA,E,AAAC,C,AAArC,IAAqC,C,AAAA,C,AAC1D,OAAQ,S,AAFjB,GAGU,EAAK,C,AAAC,EAAI,C,AAAA,oC,AAL0D,EAAI,oE,AADvC,IAAM,U,AAAW,IAAc,uC,AAD/B,IAAM,mB,AAAW,GAAY,EAAC,C,AAAA,4B,AADlC,QAAU,EAAO,C,AAAP,SAAO,C,AAAA,kC,AADjB,OAAK,EAAM,C,AAAN,EAAM,C,AAAA,qC,AAFX,OAAM,+B,AADN,QAAO,EAAC,C,AAAC,EAAC,C,AAAA,iC,AADV,QAAO,EAAC,C,AAAC,EAAC,C,AAAA,kC,AADV,OAAK,EAAC,C,AAAA,kE,AAHN,MAAK,EAAC,C,AAAA,kC,AADhD,gBAAO,gC,AA6BiB,MAAO,EAAC,C,AAAA,uD,AADR,0BAAA,GAAE,EAAC,C,AAAA,C,AAAK,EAAC,C,AAAA,6C,AADT,uBAAA,GAAE,EAAC,C,AAAA,C,AAAK,EAAC,C,AAAA,oD,AADT,QAAM,EAAC,C,AAAC,EAAC,C,AAAA,iD,AADT,OAAM,EAAC,C,AAAC,EAAC,C,AAAA,qC,AA5BH,cAAY,IAAE,C,AAAC,EAAE,C,AAAA,wC,AAFb,MACuD,IAAc,C,AAAd,YAA5C,uBADQ,0BAAA,GAAE,EAAI,C,AAAA,C,AAAM,oBAAS,0BAAA,EAAI,C,AAAM,oBAA2B,KAAG,C,AAArB,iBAAU,EAAC,I,AAAC,EAAC,E,AAAC,C,AAAO,E,AAAA,C,AAAC,E,AAAA,C,AAAC,E,AACjE,C,AAAE,SAAY,EAAE,C,AAAA,C,AAAG,MAAI,UAAU,C,AAAA,C,AAAmB,C,AADrD,oD,AADpB,OAAK,EAAC,C,AAAC,EAAC,C,AAAA,4C,AADM,MAAT,EAAsE,C,AAAnD,Q,AAAV,EAAU,K,AAAX,C,AAAiB,WAAzB,EAAsE,G,AAAA,G,AAAA,C,AAAnB,C,AAA1B,SAAzB,EAAsE,G,AAAA,G,AAAP,C,AAAZ,C,AAA1B,EAA0B,C,AAAnD,EAAQ,2C,AADC,MAAT,EAAsE,C,AAAnD,Q,AAAV,EAAU,K,AAAX,C,AAAiB,UAAzB,EAAsE,G,AAAA,G,AAAA,C,AAAnB,C,AAA1B,SAAzB,EAAsE,G,AAAA,G,AAAP,C,AAAZ,C,AAA1B,EAA0B,C,AAAnD,EAAQ,+C,AADC,MAAT,EAAsE,C,AAAnD,Q,AAAV,EAAU,K,AAAX,C,AAAiB,WAAuB,EAAC,C,AAAjD,EAAsE,G,AAAA,G,AAAnB,C,AAAA,C,AAA1B,SAAzB,EAAsE,G,AAAA,G,AAAP,C,AAAZ,C,AAA1B,EAA0B,C,AAAnD,EAAQ,mC,AADb,aAAK,oBAAY,SAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAC,C,AAAnC,EAAmC,C,AAAA,oC,AADxC,QAAO,oBAAO,WAAA,EAAU,C,AAAV,EAAU,C,AAAA,E,AAAC,C,AAAlB,EAAkB,C,AAAA,oC,AADzB,sBAAkB,MAAA,mBAAI,QAAA,EAAI,C,AAAA,E,AAAA,C,AAAR,KAAQ,C,AAAA,C,AAAC,Q,AAAO,SAA6B,QAAI,IAAI,C,AAAA,M,AAAC,kC,AADjE,MAAI,I,AAAA,wC,AADX,qCAAqB,Q,AAAa,uDAAgC,6B,AADlE,cAAgB,+CAAgC,C,AAAhC,EAAgC,C,AAAA,uC,AADhD,OAAO,EAAM,C,AAAN,EAAM,C,AAAA,C,AAAI,EAAuE,G,AAAA,M,AAA/D,C,AAAR,GAA2D,EAAI,G,AAAA,C,AAAvD,C,AAAR,MAAQ,iC,AADzB,QAAO,mCAAQ,C,AAAE,EAAC,C,AAAA,wC,AAH1C,CAA0B,GAAA,EAA+E,G,AAAA,kB,AAAvE,E,AAAyB,WAA3D,EAAa,G,AAAsE,C,AAAzD,EAA+E,G,AAApB,C,AAAA,C,AAA1B,SAAjC,EAA+E,G,AAAA,C,AAApB,C,AAA1B,EAA0B,C,AAA3D,EAAQ,kC,AAFV,QAAU,EAAO,C,AAAP,OAAL,EAAC,C,AAAW,C,AAAA,qC,AAJX,EAAC,G,AAAA,M,AAAA,O,AAAD,QAG0B,IAAI,I,AAAZ,EAAkB,G,AAAD,C,AAHlC,S,AACiB,EACwD,G,AAAA,Y,AADpD,aAAO,oBAAY,SAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAC,C,AAAnC,GAD7B,EAAC,G,AAEyE,G,AADjD,C,AAAuC,C,AAAA,mB,AACI,QAAM,C,AAA7C,cAAW,EAAC,Q,AAAQ,I,AAAE,EAAC,M,AAAW,E,AAAC,C,AAAU,0C,AAN1E,EAAC,G,AAAA,M,AAAA,C,AAAD,QAE0B,IAAI,I,AAAZ,EAAkB,G,AAAD,C,AAFlC,E,AAAD,GACkB,EAA0C,G,AAAA,C,AAA1C,aAAO,oBAAY,SAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAC,C,AAAnC,GADzB,EAAC,G,AAC2D,G,AAAvC,C,AAAuC,C,AAAA,C,AAD3D,sC,AADtB,QAAA,EAAc,G,AAAc,I,AAAE,GAA9B,EAAc,G,AAAoB,C,AAAA,C,AAApB,sC,AADd,SAA2B,GAA3B,EAAc,G,AAAc,C,AAAI,gCAAY,K,AAA5C,EAAc,G,AAAiC,C,AAAjC,yC,AADC,eAAmB,EAAsB,C,AAAlC,UAAQ,I,AAA0B,C,AAAA,wC,AADzC,cAAmB,EAAsB,C,AAAlC,UAAQ,I,AAA0B,C,AAAA,kC,AADlC,EAA2B,G,AAAA,mC,AAH5B,EAAC,G,AAAA,M,AAAA,C,AAAD,UAEkB,EAAQ,G,AAAA,C,AAFzB,C,AAAD,QACyB,CADzB,EAAC,G,AAC6B,G,AAAJ,C,AAAR,EAAY,G,AAAD,C,AAAA,C,AAD5B,kC,AAHD,EAAC,G,AAAA,M,AAAA,C,AAAD,UAEkB,EAAQ,G,AAAA,C,AAFzB,C,AAAD,QAAA,EAAC,G,AACyB,G,AAAA,C,AADzB,qC,AADA,EAAyE,K,AAAjE,C,AAA4D,SAAK,C,AAApC,cAAA,EAAoC,G,AAAT,C,AAAA,C,AAAxD,C,AAAR,QAAiB,EAAI,G,AAAA,C,AAAb,8B,AADf,cAAkC,QAA+B,C,AAA/B,OAA3B,OAAc,C,AAAd,EAAc,C,AAA4C,C,AAAA,8B,AADjE,aAAW,IAAE,C,AAAC,EAAC,C,AAAA,6B,AADf,QAAI,EAAC,C,AAAA,kC,AAFlB,QAAa,kBAAI,KAAC,E,AAAS,C,AAAC,iC,AAD5B,QAAa,kBAAI,IAAC,E,AAAQ,C,AAAE,oI,AAqJe,IAAE,O,AAAO,OAAA,EAAC,C,AAAiB,C,AAAE,oBAC1B,EAAE,O,AAAO,kBAAA,EAAa,W,AAAA,E,AAAA,C,AAClB,EAAE,O,AAAO,kBAAU,GAAI,EAAI,U,AAAQ,C,AAAA,E,AAAA,C,AAAC,C,AAAC,E,AAAA,C,AAAC,gC,AAH7C,YAAU,EAAK,C,AAAC,EAAG,C,AAAA,gC,AADnB,SAAY,EAAQ,C,AAAQ,EAAG,C,AAAC,wC,AADhC,IAAK,Q,AAAL,SAAQ,kBAAA,cAAA,SAAI,kBAAA,IAAa,E,AAAA,C,AAAd,C,AAAyB,WAAA,IAAM,E,AAAA,C,AAA/B,E,AAAA,C,AAAN,qC,AADL,IAAK,Q,AAAL,SAAQ,kBAAA,WAAA,SAAI,kBAAA,IAAa,E,AAAA,C,AAAd,C,AAAH,oBAAA,GAAwC,EAAC,C,AAAA,E,AAAA,C,AAAtC,E,AAAA,C,AAAN,2B,AADL,OAAU,EAAQ,C,AAAR,OAAQ,C,AAAA,6C,AAFlB,OAAK,EAAG,C,AAAS,MAAI,I,AAAA,C,AAAC,oC,AADtB,OAAK,EAAG,C,AAAE,EAAG,C,AAAA,+B,AADb,SAAQ,EAAC,C,AAAC,EAAC,C,AAAA,iC,AADX,QAAQ,EAAC,C,AAAC,EAAC,C,AAAA,iC,AADX,QAAQ,EAAC,C,AAAC,EAAC,C,AAAA,iC,AADX,QAAQ,EAAC,C,AAAC,EAAC,C,AAAA,iC,AADX,OAAK,EAAG,C,AAAE,EAAG,C,AAAA,0B,AADb,OAAY,8B,AADZ,MAAU,EAAC,C,AAAA,kC,AADX,QAAU,EAAE,C,AAAA,oC,AADZ,OAAU,EAAE,C,AAAA,oC,AADZ,OAAU,EAAE,C,AAAA,oC,AADZ,OAAU,EAAE,C,AAAA,oD,AAFxE,gBAAmB,uD,AADwC,UAAA,EAAiB,C,AAAjB,EAAiB,C,AAAA,+C,AAApC,4CAAqC,8E,AADrC,eAAmB,oBAAA,QAAA,IAAiB,C,AAAjB,EAAiB,C,AAAA,E,AAAA,mC,AAAC,iC,AAD7B,EAAsD,K,AAA9C,C,AAAR,MAAkD,mBAAA,QAAA,EAAE,C,AAAA,E,AAAA,C,AAAN,EAAQ,G,AAAA,C,AAA9C,C,AAAR,MAA2B,UAAL,EAAa,G,AAAD,C,AAAA,C,AAA1B,oC,AADhB,sBAAmB,MAAA,mBAAI,QAAA,EAAI,C,AAAA,E,AAAA,C,AAAR,KAAQ,C,AAAA,C,AAAC,Q,AAAI,SAA6B,MAAI,IAAI,C,AAAA,M,AAAC,qC,AADtE,cAAY,IAAE,C,AAAC,EAAE,C,AAAA,wC,AAFb,MACuD,IAAc,C,AAAd,YAA5C,uBADQ,0BAAA,GAAE,EAAI,C,AAAA,C,AAAM,oBAAS,0BAAA,EAAI,C,AAAM,oBAA2B,KAAG,C,AAArB,iBAAU,EAAC,I,AAAC,EAAC,E,AAAC,C,AAAO,E,AAAA,C,AAAC,E,AAAA,C,AAAC,E,AACjE,C,AAAE,SAAY,EAAE,C,AAAA,C,AAAG,MAAI,UAAU,C,AAAA,C,AAAmB,C,AADrD,oD,AADpB,OAAK,EAAC,C,AAAC,EAAC,C,AAAA,sC,AAH5C,IAAO,C,AACP,OAAW,kBAAgB,YAAU,EAAI,C,AAAC,EAAG,C,AAAA,E,AAAC,C,AAAnC,IAAmC,C,AAAA,C,AAC9C,OAAO,gC,AAJQ,OAAO,mCAAQ,C,AAAE,EAAC,C,AAAA,kC,AADjB,OAAY,EAAM,C,AAAN,OAAL,EAAC,C,AAAU,C,AAAA,mC,AADlB,OAAY,EAAM,C,AAAN,QAAL,EAAC,C,AAAU,C,AAAA,kC,AADlB,OAAY,EAAM,C,AAAN,OAAL,EAAC,C,AAAU,C,AAAA,kC,AADlB,OAAY,EAAM,C,AAAN,OAAL,EAAC,C,AAAU,C,AAAA,oC,AARwD,IAAK,Q,AAAL,SAC/F,kBAAA,WAAA,SACI,kBAAA,QAAW,EAAG,C,AACd,8CACgD,SAAA,EAAgB,C,AAAhB,EAAgB,C,AAAA,2C,AAA9D,MADI,EAAE,C,AACM,Q,AAAZ,EAAY,K,AADN,C,AAAF,UAEoB,SAFpB,EAAE,G,AAE0B,C,AAAA,C,AAF1B,E,AAAF,GAAA,EAAE,G,AAAA,G,AAAA,C,AACU,QAAQ,GADpB,EAAE,G,AAAA,G,AACyB,C,AAAA,kC,AAAgC,C,AAAnD,E,AACoB,C,AAHpB,E,AAAA,C,AADf,C,AAAH,oBAAA,UAKyD,QAAM,C,AAA7C,cAAW,EAAC,Q,AAAQ,I,AAAE,EAAC,M,AAAW,E,AAAC,C,AAAU,C,AAAA,E,AAAA,C,AAL5D,E,AAAA,C,AADiG,4C,AADxC,UAAA,EAAK,C,AAAA,E,AAA/C,QAAO,0CAA2C,C,AAA3C,EAA2C,C,AAA3C,EAA2C,C,AAAA,4C,AADR,UAAA,EAAK,C,AAAA,E,AAA/C,QAAO,0CAA2C,C,AAA3C,EAA2C,C,AAA3C,EAA2C,C,AAAA,8C,AADrC,OAAA,EAAiB,C,AAAjB,EAAiB,C,AAAjB,EAAiB,C,AAAA,wC,AAA9B,2DAAmC,6I,AAFnC,oDAAoC,8B,AADpC,UAAa,OAAa,EAAE,C,AAAA,C,AAAC,8B,AAD7B,UAAgB,EAAE,C,AAAA,8B,AADlB,UAAa,OAAa,EAAE,C,AAAA,C,AAAC,6B,AAD7B,UAAa,QAAI,EAAC,C,AAAA,C,AAAG,2E,AAFtB,uDAAmC,qD,AADnB,aAAA,EAAqB,C,AAArB,EAAqB,C,AAAA,+C,AAArC,4CAAsC,oG,AAyEM,OAAK,EAAG,C,AAAE,iDAAgB,C,AAAC,iG,AAD3B,OAAK,EAAG,C,AAAE,iDAAgB,C,AAAC,oG,AADjB,iDAAgB,4F,AAxKtD,EAAC,G,AAAA,M,AAAA,C,AAAD,QAEmB,EAAQ,G,AAAA,C,AAF1B,C,AAAD,QAC0B,CAD1B,EAAC,G,AAC8B,G,AAAJ,C,AAAR,EAAY,G,AAAD,C,AAAA,C,AAD7B,+B,AAFP,QAAS,IAAI,I,AAAI,EAAC,C,AAAK,sC,AAHvB,QAAQ,QAAK,EAAC,C,AAAA,I,AAAE,EAAC,C,AAAC,8B,AADlB,QAAS,QAAK,EAAC,C,AAAA,I,AAAE,OAAK,C,AAAC,uC,AAkON,YAAA,EAAC,C,AAAY,EAAI,C,AAAA,C,AAAO,QAAK,UAAA,EAAC,C,AAAE,QAAA,CAAC,C,AAAA,C,AAAa,QAAA,EAAC,O,AAAO,C,AAAG,EAAI,O,AAAO,C,AAAG,CAAC,C,AAAA,C,AAAC,C,AAAA,C,AAAM,IAAI,yC,AADnF,cAAA,EAAC,C,AAAY,EAAK,C,AAAA,C,AAAM,QAAK,UAAA,EAAC,C,AAAE,QAAA,EAAK,O,AAAO,C,AAAA,C,AAAA,IAAE,C,AAA2B,C,AAAA,C,AAAM,IAAI,sH,AALrH,WAAA,EAAQ,C,AAAR,EAAQ,C,AAAA,yB,AAAI,UAAA,IAAkB,C,AAAlB,EAAkB,C,AAAA,S,AAA9B,gCAA8B,0G,AAH5C,cAAA,EAAC,C,AAAD,CAAQ,IAAI,C,AAAA,G,AAAA,Q,AACT,QAAA,GAAc,aAAiB,EAAC,C,AAAC,GAAG,C,AAAA,C,AAA1B,oBAAA,EAA2B,C,AAA3B,EAA2B,E,AAAA,E,AAArC,EAAqC,C,AAAA,gD,AAX5B,cAAA,EAAC,C,AAAD,CAAQ,IAAI,C,AAAA,G,AAAA,K,AACZ,GAAA,gBAGG,mBAAmB,GAAO,G,AAAP,EAAO,E,AAAA,E,AAA1B,GAHH,WACG,oBAAsB,QAAA,EAAC,C,AAAO,G,AAAI,EAAE,E,AAAA,C,AAApC,EAAoC,C,AAAC,C,AACrC,SAAA,EAAsB,M,AAAA,E,AACK,C,AAC3B,SAAA,CAAqB,M,AAAA,S,AACpC,UAEG,mBAAqB,CAAuB,cAAvB,EAAC,C,AAAY,MAAM,C,AAAO,E,AAAC,C,AAAhD,OADA,oBAAwB,EAAC,O,AAAO,E,AAAI,EAAC,C,AAAM,EAAE,C,AAAM,EAAC,W,AAAW,EAAC,C,AAAA,E,AAAA,C,AAAhE,EAAgE,C,AAChB,C,AAAA,4C,AAVtB,EAAG,S,AAAS,IAAI,C,AAAA,Q,AAAgB,EAAC,C,AAAG,CAAC,C,AAAM,EAAE,C,AAAM,UAAA,EAAG,C,AAAE,QAAA,EAAC,C,AAAG,CAAC,C,AAAA,C,AAAA,IAAE,C,AAAC,qC,AADxD,EAAC,C,AAAG,EAAC,gC,AADN,QAAA,EAAC,C,AAAO,uC,AADR,EAAK,S,AAAU,EAAG,K,AAAA,2D,AALtD,gBAAY,EAAE,C,AAAC,EAAG,C,AAAA,Q,AACf,mCACC,GAAA,gBAAY,EAAE,C,AAAC,KAAG,C,AAAA,C,AACf,gCAA6B,CAAA,EAAG,C,AAAE,KAAG,C,AAAE,KAAG,C,AAAA,E,AAAC,G,AACjD,6C,AATQ,EAAG,S,AAAkB,EAAG,C,AAAQ,Q,AACrC,EAAC,G,AAAG,EAAE,C,AAAM,IAAI,C,AACpB,QACG,CADF,mBAAA,EAAG,C,AAAM,EAAC,C,AAAC,C,AAAE,EAAG,W,AAAY,EAAC,C,AAAG,EAAG,O,AAAO,C,AAAC,C,AACrC,C,AAAA,0C,AAL6B,cAAA,EAAC,C,AAAD,CAAQ,EAAC,C,AAAA,G,AAAA,mD,AA+CtB,GAAG,EAAC,C,AAAC,EAAC,C,AAAA,Q,AAAN,EAAM,G,AAAN,CAAM,C,AAAW,GAAG,EAAC,C,AAAC,EAAC,C,AAAA,C,AAAQ,EAAC,oC,AADtC,WAAS,GAAE,EAAC,C,AAAA,C,AAAG,GAAE,EAAC,C,AAAA,C,AAAC,mC,AADnB,WAAS,GAAE,EAAC,C,AAAA,C,AAAG,GAAE,EAAC,C,AAAA,C,AAAC,gpB,AAKQ,EAEpB,C,AADJ,QAAK,EAAC,C,AAAA,C,AACN,IAAI,S,AAFI,2CAEJ,4N,AAwG4D,CAAA,EAAG,E,AAAI,C,AAAE,EAAG,E,AAAM,C,AAAA,yB,AAA+C,WAAA,EAAG,C,AAAA,M,AAF5G,GAAA,SAAO,CAA5C,EAAM,C,AAAN,EAAM,C,AAA4C,C,AAAE,CAA7C,EAAM,C,AAAN,EAAM,C,AAA6C,C,AAAC,C,AACnB,SAAA,EAAM,G,AAAA,C,AAAN,EAAM,G,AAAA,C,AAAA,Q,AACU,EAAC,GAAA,oBAAA,OAAA,EAAsC,C,AAAtC,EAAsC,C,AAAA,E,AAAC,K,AAAQ,EAAO,G,AAAA,kC,AAAA,G,AAAK,GAAI,EAAO,G,AAAA,K,AAAI,oBAAA,gCAAc,E,AAAA,kC,AAAA,E,AAAC,qC,AAP/G,CAAC,mBAAK,IAAkB,4GAAc,S,AAAM,EAAE,I,AAAxC,EAAC,G,AAAyC,C,AAAA,G,AAAO,EAAE,I,AAAnD,EAAC,G,AAAoD,C,AAAA,G,AAAQ,EAAE,I,AAA/D,EAAC,G,AAAgE,C,AAAA,C,AAAhE,E,AAAiE,C,AAAK,yCAAS,EAAU,W,AAAG,Q,AACV,iBAAQ,G,AAAR,CAAA,GACG,EAAoB,G,AAEX,C,AAHZ,WAAA,EAAQ,C,AAAR,IAAQ,C,AAAA,E,AAAR,EAAQ,O,AAAA,G,AAAR,CAAQ,I,AAAR,IAAA,OACG,EAAoB,G,AAEX,C,AAHZ,CAGY,C,AAAA,C,AAHZ,OACG,EAAoB,G,AAEX,C,AAHZ,CAGY,C,AAAA,C,AAHZ,OACG,EAAoB,G,AAEX,C,AAHZ,CAGY,C,AAAA,M,AAHJ,C,AAAA,C,AAGI,E,AAFuB,GAAI,EAAE,I,AAAC,KAAE,C,AAAA,K,AAAM,EAAE,I,AAAC,KAAE,C,AAAA,K,AAAM,EAAE,I,AAAC,KAAE,C,AAAA,C,AAA/B,iBAA+B,G,AAA/B,iBAA+B,G,AAA/B,iBAA+B,G,AAA/B,IACJ,EAAM,G,AAD6B,C,AAC3B,EAAM,G,AADqB,C,AACnB,EAAM,G,AADa,M,AAAA,C,AAAA,C,AAAA,C,AAAA,C,AACT,QAAK,CAAA,KAAC,C,AAAE,KAAC,C,AAAE,KAAC,C,AAAA,C,AAAC,C,AAAM,IAAI,E,AADd,E,AAE1D,IAAI,E,AAAA,C,AAAE,kC,AATvG,CAAC,mBAAK,GAAkB,qFAAU,S,AAAM,EAAM,I,AAAxC,EAAC,G,AAAyC,C,AAAA,G,AAAO,EAAM,I,AAAvD,EAAC,G,AAAwD,C,AAAA,C,AAAxD,E,AAAyD,C,AAAK,sCAAS,EAAU,W,AAAG,Q,AACV,iBAAQ,G,AAAR,CAAA,GACG,EAAkB,G,AAET,C,AAHZ,WAAA,EAAQ,C,AAAR,IAAQ,C,AAAA,E,AAAR,EAAQ,O,AAAA,G,AAAR,CAAQ,I,AAAR,IAAA,OACG,EAAkB,G,AAET,C,AAHZ,CAGY,C,AAAA,C,AAHZ,OACG,EAAkB,G,AAET,C,AAHZ,CAGY,C,AAAA,M,AAHJ,C,AAAA,C,AAGI,E,AAFmB,GAAI,EAAM,I,AAAC,KAAE,C,AAAA,K,AAAM,EAAM,I,AAAC,KAAE,C,AAAA,C,AAA5B,iBAA4B,G,AAA5B,iBAA4B,G,AAA5B,IACJ,EAAM,G,AAD0B,C,AACxB,EAAM,G,AADkB,M,AAAA,C,AAAA,C,AAAA,C,AACd,QAAK,CAAA,KAAC,C,AAAE,KAAC,C,AAAA,C,AAAC,C,AAAK,IAAI,C,AADL,E,AAEnD,IAAI,E,AAAA,C,AAAE,gE,AALtE,SAAA,MAA0B,M,AAAA,K,AAArF,CAAA,EAAG,C,AAAH,EAAG,C,AAAA,O,AAA+B,EAAC,IAAA,GAAgB,EAAG,G,AAAA,C,AAAnB,oBAAA,gCAAoB,E,AAAA,kC,AAA8B,E,AAAkB,mBAAS,QAAI,EAAQ,S,AAAE,C,AAAM,IAAI,C,AAAuB,EAAG,I,AAAC,EAAC,C,AAAA,C,AAAQ,E,AAAA,C,AAAmB,4C,AAD/L,CAAA,EAAG,C,AAAH,EAAG,C,AAAA,O,AAA+B,EAAC,IAAA,GAAgB,EAAG,G,AAAA,C,AAAnB,oBAAA,6BAAA,EAAoB,C,AAApB,EAAoB,G,AAAA,E,AAAA,yC,AAAW,E,AAAqC,iCAAS,GAAA,EAAU,W,AAAG,M,AAAgB,GAAkB,EAAG,G,AAAA,C,AAArB,oBAAA,UAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAA,E,AAAlC,gCAAmC,C,AAAA,S,AAAI,sBAAW,WAAA,KAAG,C,AAAA,C,AAAA,E,AAAA,C,AAAS,4C,AAD/L,CAAA,EAAG,C,AAAH,EAAG,C,AAAA,O,AAA+B,EAAC,IAAA,GAAgB,EAAG,G,AAAA,C,AAAnB,oBAAA,OAAA,EAAoB,C,AAApB,EAAoB,C,AAAA,E,AAAA,yC,AAAW,E,AAAqC,iCAAS,GAAA,EAAU,W,AAAG,M,AAAgB,GAAkB,EAAG,G,AAAA,C,AAArB,oBAAA,UAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAA,E,AAAlC,gCAAmC,C,AAAA,S,AAAI,sCAAqB,E,AAAA,C,AAAE,4C,AAD/L,CAAA,EAAG,C,AAAH,EAAG,C,AAAA,O,AAA+B,EAAC,IAAA,GAAgB,EAAG,G,AAAA,C,AAAnB,oBAAA,OAAA,EAAoB,C,AAApB,EAAoB,C,AAAA,E,AAAA,yC,AAAW,E,AAAqC,6BAAS,EAAU,W,AAAG,K,AAAgB,GAAkB,EAAG,G,AAAA,C,AAArB,oBAAA,UAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAA,S,AAAlC,gCAAmC,E,AAAA,C,AAA2B,4C,AAD/L,CAAA,EAAG,C,AAAH,EAAG,C,AAAA,O,AAA+B,EAAC,IAAA,GAAgB,EAAG,G,AAAA,C,AAAnB,oBAAA,OAAA,EAAoB,C,AAApB,EAAoB,C,AAAA,E,AAAA,yC,AAAW,E,AAAqC,iCAAS,GAAA,EAAU,W,AAAG,M,AAAgB,GAAkB,EAAG,G,AAAA,C,AAArB,oBAAA,UAAA,EAAsB,C,AAAtB,EAAsB,C,AAAA,E,AAAA,E,AAAlC,gCAAmC,C,AAAA,S,AAAI,4BAAsB,E,AAAA,C,AAAC,6C,AATjJ,CACtB,EAAI,C,AAAE,gCAAU,C,AAAG,2CAAY,GAAM,EAAC,C,AAAA,Q,AAAI,sBAAqB,GAAI,KAAC,C,AAAC,EAAE,C,AAAA,C,AAAC,I,AAAA,C,AAD1C,8P,AAjBzD,QAAW,C,AAnBhB,SACI,kBAAA,UAAA,CAAM,IAAG,C,AAAA,C,AACT,SAAA,kBAAA,UAAG,CAA0B,iBAAL,EAAC,C,AAAO,C,AAC5B,WAAA,0BACY,EAAC,C,AAAE,EAAC,C,AAAC,I,AACA,EAAC,a,AAAA,Q,AACX,EAAE,E,AAAI,CAAC,E,AAAI,EAAE,E,AAAI,CAAC,E,AAAI,EAAE,G,AAAG,EAAE,E,AAAI,EAAE,E,AAAI,EAAE,E,AAAI,EAAE,E,AAAI,EAAE,C,AACpD,CAAe,sFAAS,M,AAAA,E,AAAjB,EAAiB,C,AAAG,C,AAEzB,EAAC,G,AAAD,QAAC,C,AAAD,KAAC,C,AAAD,EAAC,G,AAAD,QAAC,C,AAAD,KAAC,C,AAAD,EAAC,G,AAAD,IAAC,C,AAAD,KAAC,C,AAAD,EAAC,G,AAAD,QAAC,C,AAAD,KAAC,C,AAAD,EAAC,G,AAAD,IAAC,C,AAAD,KAAC,C,AAAD,EAAC,G,AAAD,IAAC,C,AAAD,MAAC,C,AAAD,EAAC,G,AAAD,IAAC,C,AAAD,MAAC,C,AAAD,CAQU,EAAC,C,AARV,E,AAQU,C,AAdrB,SAAQ,CAAC,C,AAAI,EAAC,O,AAAO,C,AAAG,CAAC,C,AAcJ,C,AAAA,C,AAfzB,EAAqC,C,AAgBrC,SAAA,iBAAA,CAAM,IAAG,C,AAAA,E,AAAA,C,AAAA,C,AADgB,E,AAAA,C,AAAA,C,AAhBhB,E,AAAA,C,AAkBZ,C,AAAwB,S,AAAA,oC,AAtBO,UAAc,IAAI,C,AAAC,EAAC,C,AAAA,Q,AAAY,qEAAM,M,AAAA,uC,AAJhD,EAAU,U,AAAC,EAAK,C,AAAA,wC,AADN,CAArB,EAAG,C,AAAH,EAAG,C,AAAqB,I,AAAC,EAAC,C,AAAvB,iD,AA8E0D,EAAK,mB,AAAoB,mBAAa,CAAA,EAAK,C,AAAE,EAAG,C,AAAA,E,AAAA,C,AAAa,EAAO,C,AAAC,uC,AAyHhF,cAAS,uBAAsB,IAAK,Q,AAAL,SAAQ,kBAAA,UAAQ,GAAE,EAAC,C,AAAA,C,AAAA,E,AAAA,C,AAAd,E,AAAiB,C,AAA5C,EAA4C,C,AAAA,wC,AANrD,EAAK,mB,AAAmB,2CACA,IAAK,Q,AAAL,SACL,kBAAA,QAAa,GAAE,EAAC,C,AAAA,C,AAChB,aAAA,EAAK,C,AAAL,EACS,G,AADI,mB,AAAb,EACS,G,AAAA,G,AAAA,C,AAFO,E,AAAA,C,AADN,I,AAIb,C,AALhB,IAKiB,C,AAAA,2B,AANjB,SAAS,uBAAiB,IAAK,Q,AAAL,SAAQ,kBAAA,UAAQ,GAAE,EAAC,C,AAAA,C,AAAA,E,AAAA,C,AAAd,E,AAAiB,C,AAAvC,EAAuC,C,AAAA,+C,AADrC,uBAAS,IAAK,Q,AAAL,SAAQ,kBAAA,GAAU,EAAC,C,AAAA,E,AAAA,C,AAAd,E,AAAgB,8D,AAD9B,qBAAS,IAAK,Q,AAAL,SAAQ,kBAAA,UAAU,EAAC,C,AAAA,E,AAAA,C,AAAd,E,AAAgB,gD,AADzC,EAAK,mB,AAAmB,2CAA6C,IAAK,Q,AAAL,SAAQ,WAAA,EAAK,C,AAAO,EAAC,mB,AAAU,EAAC,G,AAAA,C,AAA3B,I,AAA6B,C,AAAvG,IAAwG,C,AAAA,0C,AAH5I,EAAE,iD,AAV3B,SAAuB,uCACgB,IAAK,Q,AAAL,SAC/B,kBAAA,WAAA,SAAU,kBAAA,QAAgB,EAAK,S,AAAL,IAAe,C,AAAA,C,AAC/B,oBAAA,QAAgB,GAAE,EAAK,C,AAAA,C,AACvB,oBAAA,GAAa,EAAQ,C,AAAA,E,AAAA,C,AAAA,E,AAAA,C,AAFU,E,AAAA,C,AAAtC,C,AAAH,oBAAA,GAGwB,GAAK,EAAC,C,AAAC,EAAK,C,AAAA,C,AAAC,E,AAAA,C,AAHlC,E,AAAA,C,AADiC,S,AAAxC,GAMK,EAAS,C,AAAA,E,AAAA,C,AAPlB,IAQC,C,AAAA,oC,AAfuB,qCAA6B,IAAK,Q,AAAL,SAAQ,kBAAA,UAAO,GAAE,EAAK,C,AAAC,EAAG,C,AAAA,C,AAAA,E,AAAA,C,AAArB,G,AAA0B,EAAS,C,AAAA,qC,AAX7F,SAAuB,uCACgB,IAAK,Q,AAAL,SAC/B,kBAAA,WAAA,SAAU,kBAAA,QAAgB,EAAK,S,AAAL,IAAe,C,AAAA,C,AAC/B,oBAAA,QAAgB,GAAE,EAAK,C,AAAC,EAAG,C,AAAA,C,AAC3B,oBAAA,GAAa,EAAQ,C,AAAA,E,AAAA,C,AAAA,E,AAAA,C,AAFU,E,AAAA,C,AAAtC,C,AAAH,oBAAA,GAGwB,GAAK,EAAC,C,AAAC,EAAK,C,AAAA,C,AAAC,E,AAAA,C,AAHlC,E,AAAA,C,AADiC,S,AAAxC,GAMK,EAAS,C,AAAA,E,AAAA,C,AAPlB,IAQC,C,AAAA,iC,AAZa,QAAM,EAAI,C,AAAE,uBAAW,IAAK,Q,AAAL,SAAQ,kBAAA,UAAO,GAAE,EAAG,C,AAAA,C,AAAA,E,AAAA,C,AAAf,E,AAAiB,C,AAAE,kC,AA1B9C,QAAM,EAAI,C,AAAE,6BAAM,EAAY,G,AAAA,I,AAAZ,EAAY,G,AAAA,I,AAAiC,IAAK,Q,AAAL,SAC9E,kBAAA,QAAS,GAAE,EAAG,C,AAAA,C,AACd,aAAA,EAAY,C,AAAO,EAAC,oB,AAAA,C,AADN,E,AAAA,C,AADqE,E,AAGtF,C,AAAC,iC,AA3BgB,QAAM,EAAI,C,AAAE,uBAAW,IAAK,Q,AAAL,SAAQ,cAAE,EAAG,oB,AAAA,C,AAAR,E,AAAU,C,AAAE,kC,AAdtD,SAAuB,uBACnB,IAAK,Q,AAAL,SACI,kBAAA,SAAM,kBAAA,IAAI,E,AAAA,C,AAAV,SACI,kBAAA,WAAA,SAAU,kBAAA,QAAa,EAAK,S,AAAL,IAAe,C,AAAA,C,AAC5B,oBAAA,QAAK,GAAE,EAAG,C,AAAA,C,AAAV,kBAAA,eAAU,E,AAAA,C,AAAA,E,AAAA,C,AADkB,E,AAAA,C,AAAnC,C,AAAH,gBAEe,EAAC,oB,AAAA,C,AAFb,E,AAEa,C,AAHV,C,AAAA,E,AAAA,C,AADT,E,AAKJ,C,AANL,IAOC,C,AAAA,wD,AA1L6B,yBAAA,EAAI,E,AAAY,GAAI,CAAC,K,AAAE,EAAI,O,AAAO,C,AAAG,EAAC,6B,AAAC,E,AAAE,EAAI,O,AAAO,C,AAAC,6C,AAHlD,EAAC,C,AAAG,CAAC,C,AACH,yBAAA,EAAI,C,AAAY,CAAC,C,AAAE,EAAI,O,AAAO,C,AAAG,EAAC,C,AAAC,C,AACnC,yBAAA,EAAI,C,AAAY,CAAC,C,AAAE,EAAC,C,AAAe,wE,AANjE,EAAC,E,AAAO,CAAC,O,AAAgB,EAAE,S,AAC3B,EAAI,C,AAAI,CAAC,W,AAAgC,CAAC,I,AAAE,EAAC,C,AAAG,EAAI,c,AACpD,EAAI,E,AAAI,EAAI,O,AAAO,C,AAAM,EAAE,C,AAC3B,aAAA,EAAI,C,AAAW,EAAI,E,AAAE,GAAO,EAAI,O,AAAO,C,AAAG,EAAI,6B,AAAC,E,AAAC,0C,AA9gB1B,CAAI,IAAI,C,AAAA,Q,AACvC,0BAKK,EAAwB,G,AAAA,iB,AAA+E,KAAW,W,AAAS,C,AAC5H,EAAwB,I,AAAI,QAAA,YAAI,C,AAAkD,W,AACtE,GANF,IAAK,C,AAAL,SACN,kBAAA,QAAI,SAAY,EAAK,C,AAAA,C,AACrB,cAAI,EAAI,oB,AAAA,C,AADa,E,AAAA,C,AADV,E,AAMsB,QAAE,EAAwB,G,AAAA,G,AAAa,C,AAAA,G,AAAC,6B,AA/M3E,OAAA,EAAK,U,AAAA,E,AAAL,CACsB,6DAAI,2B,AAAA,E,AAAZ,EAAY,C,AADrB,O,AAAL,CAEsB,kEAAI,2B,AAAA,E,AAAZ,EAAY,C,AAFrB,iC,AAbH,QAAA,EAAY,C,AAAA,mT,AAivCV,QAAA,EAAC,C,AAAO,Q,AAAR,EAAQ,G,AAAR,EAAQ,C,AAAR,IAAQ,C,AAAR,EAAQ,G,AAAR,KAAQ,C,AAAR,QAEgB,KAAI,C,AAFZ,C,AAAR,EAAQ,G,AAAR,WAAQ,C,AAAR,QAGgB,WAAI,C,AAHZ,C,AAAR,EAAQ,G,AAAR,WAAQ,C,AAAR,QAIgB,WAAI,C,AAJZ,C,AAAR,QAKgB,QAAc,EAAC,C,AAAX,C,AALZ,mE,AAaR,QAAA,EAAC,C,AAAO,Q,AAAR,EAAQ,G,AAAR,EAAQ,C,AAAR,IAAQ,C,AAAR,EAAQ,G,AAAR,OAAQ,C,AAAR,QAEgB,OAAI,C,AAFZ,C,AAAR,EAAQ,G,AAAR,SAAQ,C,AAAR,QAGgB,SAAI,C,AAHZ,C,AAAR,QAIgB,QAAc,EAAC,C,AAAX,C,AAJZ,2e,AAiER,QAAA,EAAC,C,AAAO,Q,AAAR,EAAQ,G,AAAR,EAAQ,C,AAAR,IAAQ,C,AAAR,EAAQ,G,AAAR,YAAQ,C,AAAR,QAEgB,aAAI,C,AAFZ,C,AAAR,EAAQ,G,AAAR,SAAQ,C,AAAR,QAGgB,UAAI,C,AAHZ,C,AAAR,EAAQ,G,AAAR,gBAAQ,C,AAAR,QAIgB,iBAAI,C,AAJZ,C,AAAR,QAKgB,QAAa,EAAC,C,AAAV,C,AALZ,sO,AA0BO,oBAAA,EAIC,G,AAJD,OAAQ,C,AAAR,QACE,QAAK,C,AADC,C,AAAR,EAIC,G,AAJD,SAAQ,C,AAAR,QAEE,UAAO,C,AAFD,C,AAAR,EAIC,G,AAJD,YAAQ,C,AAAR,QAGE,aAAU,C,AAHJ,C,AAAR,IAAQ,E,AAIP,wM,AAwBhB,QAAA,EAAC,C,AAAO,Q,AAAR,EAAQ,G,AAAR,WAAQ,C,AAAR,QACgB,YAAI,C,AADZ,C,AAAR,EAAQ,G,AAAR,UAAQ,C,AAAR,QAEgB,WAAI,C,AAFZ,C,AAAR,EAAQ,G,AAAR,SAAQ,C,AAAR,QAGgB,UAAI,C,AAHZ,C,AAAR,IAAQ,6sC,AAyKO,EAAa,Q,AAAC,EAAI,C,AAAA,I,AACoC,QAAS,C,AAA/D,OAAwB,EAA0B,C,AAAlD,EAAc,S,AAAC,EAAK,G,AAAA,C,AAA8B,C,AAAA,C,AAAa,I,AAEtD,SAAU,I,AAAA,I,AACwD,SAAU,C,AAArF,UAAS,oBAAsB,EAAS,O,AAAA,M,AAAS,E,AAAI,EAAO,K,AAAA,M,AAAU,E,AAAC,C,AAA9D,EAA8D,C,AAAA,C,AAAc,I,AAMtG,OAAA,EASC,G,AAAA,C,AATD,EASC,S,AAAA,C,AATD,EASC,e,AAAA,C,AATD,EASC,gB,AAAA,C,AATD,EASC,W,AAAA,C,AATD,EASC,c,AAAA,C,AATD,EASC,S,AAAA,C,AATD,EASC,W,AAAA,C,AAjBgB,EAAS,O,AASC,C,AAJP,EAAW,E,AAAI,EAAyB,sB,AAAA,C,AAAM,QAAM,C,AAAM,SAAO,C,AAGrF,EASC,c,AAAA,C,AAFoB,CAAiB,C,AAJjB,EAAU,C,AACV,EAAW,C,AACX,SAVK,oBAAsB,EAAiB,e,AAAA,C,AAAG,EAAa,W,AAAA,E,AAAE,C,AAAzD,EAAyD,C,AAUhD,C,AACd,SAVK,oBAAsB,EAAe,a,AAAA,C,AAAK,EAAc,Y,AAAA,E,AAAC,C,AAAzD,EAAyD,C,AAUlD,C,AANjC,EASC,S,AAAA,C,AAXgB,CAAC,C,AAAG,EAAc,S,AAAC,EAAW,S,AAAA,C,AAAA,C,AAW9C,I,AACgB,YAAS,EAAG,C,AAAC,EAAG,C,AAAA,Q,AACrC,OAAA,EAAsC,G,AAAA,C,AAAtC,EAAsC,S,AAAA,C,AAAtC,EAAsC,e,AAAA,C,AAAtC,EAAsC,gB,AAAA,C,AAAtC,EAAsC,W,AAAA,C,AAAtC,EAAsC,c,AAAA,C,AAAtC,EAAsC,S,AAAA,C,AAAtC,EAAsC,W,AAAA,C,AAAtC,EAAsC,O,AAAA,C,AAAtC,EAAsC,K,AAAA,C,AAAtC,EAAsC,c,AAAA,C,AAAtC,EAAsC,Y,AAAA,C,AAAtC,EAAsC,W,AAAA,C,AAAtC,EAAsC,Y,AAAA,C,AAAtC,EAAsC,e,AAAA,C,AAAtC,EAAsC,a,AAAA,C,AADlC,EAAc,G,AACU,C,AADxB,EAAc,G,AACmB,C,AAArC,EAAsC,M,AAAA,C,AAAA,gQ,AAxBjB,YAAS,EAAc,Q,AAAA,C,AAAA,I,AACvB,EAAe,S,AAAA,I,AAwBf,wKAAiC,Q,AAKvD,QAAW,C,AAHd,OAEG,EAA0B,C,AAA1B,OADA,oBAAmB,EAAK,G,AAAA,E,AAAA,C,AAD3B,EAAc,Q,AACa,C,AACE,C,AAAA,C,AA7BlB,+D,AA5B2C,CAAA,EAAE,C,AAAuB,QAAW,C,AAAhC,OAAM,oBAAQ,EAAG,G,AAAA,E,AAAA,C,AAAX,EAAW,C,AAAA,C,AAAe,C,AAAA,gC,AAEzD,GAAA,IAAyB,E,AAAzB,EAAU,a,AAAa,EAAE,C,AAAzB,qDAAyB,C,AAAA,C,AAAzB,EAAyB,C,AAAA,S,AAAzB,EAAyB,G,AAAA,C,AACjB,QAAA,EAAO,G,AAAA,C,AAAA,C,AACP,IAAI,gC,AAEZ,GAAA,IAA6B,E,AAA7B,EAAM,a,AAAc,QAAK,EAAG,C,AAAA,C,AAA5B,qDAA6B,C,AAAA,C,AAA7B,EAA6B,C,AAAA,S,AAA7B,EAA6B,G,AAAA,C,AAClB,EAAK,G,AAAA,C,AACL,EAAI,gC,AACrB,GAAA,uBAA0B,C,AAAI,sBAAsB,CAAC,C,AAAG,GAAQ,KAAW,S,AAAA,C,AAAA,C,AAAC,S,AAAI,SAAA,CAAqB,M,AAAA,yB,AACrG,UAAiB,EAAoB,C,AAApB,GAAT,EAAK,G,AAAA,C,AAAwB,C,AAAA,yB,AAE5D,SAAA,SACI,kBAAA,WAAS,oBACL,UAAA,CAA2B,EAAC,C,AAAA,C,AAC5B,SAAA,kBAAA,GAAqB,EAAC,C,AAAA,E,AAAA,C,AAAA,C,AADM,E,AADf,C,AAAR,GAAM,EAAE,C,AAAA,C,AAES,E,AAAA,C,AAC5B,C,AAAA,K,AAnBqB,WAGoE,OAAjE,qCAA6D,C,AAA7D,WADA,oBAAY,EAAG,G,AAAA,E,AAAA,C,AAAf,OADA,mBAAkB,CAAA,EAAW,S,AAAA,C,AAAE,EAAK,G,AAAA,C,AAAA,E,AAAC,C,AAArC,EAAqC,C,AACtB,C,AAC8C,C,AAAO,C,AAAA,I,AACvE,WAA4C,OAAjC,mBAAmB,CAAA,EAAK,G,AAAA,C,AAAE,EAAE,C,AAAA,E,AAAC,C,AAA7B,EAA6B,C,AAAO,C,AAAA,Q,AACtE,OAgBgB,EAAO,C,AACP,EAAO,C,AACP,wBAfW,EAAU,U,AAAE,EAAE,C,AAAC,kB,AAAW,CAAU,gFAAyB,a,AAAA,E,AAAnC,EAAmC,C,AAAG,G,AAerE,C,AACN,EAAO,C,AACP,EAAK,C,AACL,EAAa,C,AArBV,yC,AAlBF,YAAS,EAAG,C,AAAC,EAAE,C,AAAA,O,AACpC,CAAA,EAAc,Y,AAAA,C,AADV,EAAc,G,AACK,C,AAAE,EAAe,a,AAAA,C,AADpC,EAAc,G,AAC+B,C,AAAA,yC,AATtB,EAAO,K,AAAA,K,AAAA,C,AAAP,CAEO,EAA2B,wB,AAAA,C,AAAG,EAA+B,4B,AAAA,C,AAF7D,C,AAAP,CACO,EAA4B,yB,AAAA,C,AAAE,EAAgC,6B,AAAA,C,AAD9D,Q,AAG5B,EAAS,O,AAAA,K,AAAA,C,AACH,CAJR,EAAc,G,AAIA,C,AAJd,EAAc,G,AAIQ,C,AAAA,C,AACd,CAAA,CAAC,C,AAAO,CAAC,C,AAAA,gD,AAhBrB,WACG,oBAAwB,UAAA,EAAU,S,AAAA,C,AAAG,EAAK,G,AAAA,C,AAAA,E,AAClB,EAAK,I,AAAA,G,AAAQ,EAAG,E,AAChB,EAAS,Q,AAAA,G,AAAI,EAAG,E,AAChB,EAAU,S,AAAA,M,AAAiB,E,AAAC,C,AAJvD,EAAgB,c,AAIuC,C,AAAA,oB,AACjC,QAAC,C,AAAa,Q,AACjC,SAAuB,UAAQ,M,AAAA,iC,AAZN,0BAAA,OAAW,C,AAAM,oBAGkB,UAAY,C,AAHf,WAEG,iBAA2B,CAAQ,8EAAuB,M,AAAA,E,AAAC,EAAe,S,AAAhB,C,AAAgB,E,AAAE,C,AAA5E,WADA,oBAAyB,UAAA,EAAK,G,AAAA,C,AAAG,EAAe,S,AAAA,C,AAAA,E,AAAC,C,AADpD,EAAc,Q,AACsC,C,AAC2B,C,AAAA,C,AAChE,E,AAAA,C,AAAC,wC,AAJhD,uBAAA,OAAW,C,AAAM,mBAAe,CAAA,EAAgB,U,AAAA,C,AAAE,EAAoB,c,AAAA,C,AAAA,E,AAAA,C,AAAM,kH,AAuKf,WAAO,Q,AAAP,EAAO,K,AAAP,EAAO,O,AAChG,kBAAA,EAAsE,S,AAAnE,EAAc,Q,AAAA,G,AAAI,EAAG,E,AAAI,EAAc,Q,AAAA,C,AAAG,CAAE,G,AAAI,EAAc,Q,AAAA,E,AAC7D,GAAU,wGAAkC,gB,AAAC,EAAc,Q,AAAA,G,AAAC,EAAc,Q,AAAA,E,AAA1E,EAA0E,O,AAAA,E,AAD9E,EAAsE,O,AAAA,C,AAAtE,EAAsE,O,AAEtE,qBAAM,EAAW,K,AAAA,Q,AAAX,EAAW,K,AAAA,C,AAEW,EAAiF,Q,AAAzE,CAAA,MAAA,EAAoE,S,AAAA,C,AAA5C,iBAAhC,EAAiF,G,AAAzB,C,AAAI,EAAc,Q,AAAA,C,AAAA,C,AAAlE,EAAoE,U,AAAA,C,AAApE,EAAoE,c,AAAA,C,AAApE,EAAoE,S,AAAA,C,AAApE,EAAoE,Q,AAAA,C,AAAA,C,AAAE,MAAG,C,AAAA,C,AAF5F,C,AAAX,EAAW,K,AAAA,C,AAGW,EAAqC,c,AAA7B,iBAAR,EAAqC,G,AAAA,C,AAAnB,EAAmB,C,AAAA,C,AAHhD,C,AACW,EAAiF,Q,AAAzE,CAAA,MAAA,EAAoE,S,AAAA,C,AAA5C,iBAAc,CAA9C,EAAiF,G,AAA1B,C,AAAI,C,AAAC,EAAc,Q,AAAA,C,AAAA,C,AAAlE,EAAoE,U,AAAA,C,AAApE,EAAoE,c,AAAA,C,AAApE,EAAoE,S,AAAA,C,AAApE,EAAoE,Q,AAAA,C,AAAA,C,AAAE,MAAG,C,AAAA,C,AAD5F,E,AAGgD,C,AALK,C,AAAA,E,AAAA,C,AAD0B,C,AAAA,8C,AAvCH,WAAO,Q,AAAP,EAAO,K,AAAP,EAAO,O,AACpG,2BAAQ,WACG,oBAAY,EAAwD,K,AAAhD,C,AAA4B,QAAA,EAAU,G,AAAA,C,AAAA,C,AAAM,IAAI,E,AAAA,C,AADvE,EAAe,U,AACwD,C,AAAE,Q,AADzE,iBACyE,E,AADzE,GAIR,EA+BoB,G,AAAA,C,AA/BhB,UACG,oBACC,UACG,oBAAW,EAAiE,K,AAAzD,E,AAA8B,UAAA,EAAM,C,AAAN,EAAgB,G,AAAA,C,AAAA,E,AAAW,C,AAD/E,EAAkB,gB,AAAU,U,AACmD,C,AAAE,E,AAAA,C,AAHrF,EAAc,Q,AAGuE,C,AACpF,C,AAAY,EAA8E,c,AAAN,QAAM,C,AAAtE,CAAA,YAAU,oGAA2C,C,AAAA,E,AAArD,EAAqD,C,AAAO,C,AAAU,C,AAAA,E,AAE3F,GAAM,QAAmB,C,AAqB7B,EAIoB,Q,AAHhB,CAAA,MAAA,EAAkE,S,AAAA,C,AAA7B,EAAc,Q,AAAA,Q,AAAC,CAAG,OAnBpC,QAAA,SAAY,UAAmB,C,AAAvB,C,AAAkC,C,AAC1C,IAAI,C,AACJ,EAAI,C,AAHL,EAAK,C,AAIJ,EAAI,C,AACJ,EAAI,C,AACJ,EAAI,C,AACJ,KAAK,C,AACL,UAAQ,C,AACR,SAAO,C,AACP,EAAG,C,AACH,EAAG,C,AACH,CAAC,C,AACD,CAAC,C,AACD,CAAC,C,AACD,CAAC,C,AACD,CAAC,C,AACD,CAAC,C,AAGyC,C,AAAG,C,AAAA,C,AAAhE,EAAkE,U,AAAA,C,AAAlE,EAAkE,c,AAAA,C,AAAlE,EAAkE,S,AAAA,C,AAAlE,EAAkE,Q,AAAA,C,AAAA,C,AAClE,QAEG,UADA,GAAiB,C,AAAjB,YADD,EAAa,Q,AAAA,C,AAAG,EAAa,Q,AAAA,C,AAAG,EAAe,U,AAAA,C,AAAG,EAAe,U,AAAA,E,AAC/C,C,AACJ,C,AAAA,C,AAAA,C,AAxBV,C,AAwBU,E,AAjCH,EAAyE,c,AAAN,QAAM,C,AAAjE,CAAA,YAAU,8FAAuC,C,AAAA,E,AAAjD,EAAiD,C,AAAM,C,AAAU,C,AADT,E,AAkC7D,C,AApCgF,C,AAAA,2C,AAFE,QAAW,C,AAAjH,UAAmF,EAAe,C,AAAf,UAA3E,mBAAoB,CAA8C,UAAtC,oBAAqB,UAAA,EAAI,G,AAAA,C,AAAG,EAAI,G,AAAA,C,AAAA,E,AAAA,C,AAAhC,EAAgC,C,AAAS,E,AAAA,C,AAArE,EAAqE,C,AAAqB,C,AAAA,C,AAAe,yC,AAiVrD,QAAA,EAAQ,C,AAAA,E,AAAxD,QAAoB,0CAAoC,C,AAAE,QAAE,C,AAAC,EAAG,C,AAAA,wK,AAsrF5D,GAAG,C,AAAG,YAAU,SAAO,EAAC,C,AAAA,C,AAAE,UAAE,C,AAAA,oD,AAJtC,EAAC,G,AAAD,EAAC,O,AACC,CAAS,wCAAA,UAAA,EAAiB,C,AAAjB,EAAiB,C,AAAA,K,AAAH,GAAG,C,AAAA,K,AAAA,e,AAChB,mBAAA,EAAC,C,AAAM,EAAE,C,AAAA,I,AAAG,iBAAA,oBAAA,EAAC,C,AAAO,CAAC,C,AAAA,I,AAAI,EAAK,E,AAAA,0G,AA0CpC,GAAA,SAA+B,E,AAA/B,GAAA,iBAAA,EAA+B,E,AAAA,C,AAA/B,EAA+B,E,AAAA,C,AAA/B,CAAA,CAAA,YAA+B,C,AAA/B,CAA+B,C,AAAA,C,AAA/B,CAAA,YAA+B,C,AAA/B,CAA+B,C,AAAA,C,AAA/B,CAAA,UAA+B,C,AAA/B,CAA+B,C,AAAA,C,AAA/B,CAAA,cAA+B,C,AAA/B,CAA+B,C,AAAA,C,AAAA,C,AAAA,E,AAA/B,GAAA,WAAA,EAA+B,G,AAAA,C,AAA/B,YAAA,EAA+B,G,AAAA,C,AAAA,C,AAAA,a,AAAA,C,AAAA,C,AAAA,U,AAGxC,uBAAW,iBAAQ,K,AAGlB,EAG4D,G,AAAA,C,AAH5D,EAAqB,M,AAArB,YAAqB,C,AAAM,K,AAAI,EAAc,W,AAAA,E,AAC7C,EAAqB,M,AAArB,YAAqB,C,AAAM,K,AAAI,EAAc,W,AAAA,E,AAC7C,EAAmB,M,AAAnB,UAAmB,C,AAAQ,K,AAAI,EAAU,O,AAAA,E,AACzC,EAAuB,M,AAAvB,cAAuB,C,AAAI,K,AAAI,CAAQ,0DAAI,M,AAAA,E,AAAC,EAAgB,a,AAAjB,C,AAAiB,I,AAC/D,C,AARD,EAAI,W,AAQH,K,AAEG,4DAAI,OAKG,oBAAW,EAAG,G,AAAA,E,AAAA,C,AAAd,UADA,oBAAW,EAAG,G,AAAA,E,AAAA,C,AAAd,YAJC,CAAA,QAAA,EAAyB,C,AAAO,G,AAAG,EAAE,C,AAAG,YAAY,C,AAAA,C,AACpD,CAAA,QAAA,EAAyB,C,AAAO,G,AAAG,EAAE,C,AAAG,UAAU,C,AAAA,C,AAClD,CAAA,QAAA,EAAyB,C,AAAO,G,AAAG,EAAE,C,AAAG,cAAc,C,AAAA,E,AAEzC,C,AACA,C,AAAA,K,AALb,EAAqB,M,AAArB,YAAqB,C,AAAA,Y,AACrB,EAAmB,M,AAAnB,UAAmB,C,AAAA,a,AACnB,EAAuB,M,AAAvB,cAAuB,C,AAAA,Y,AAI9B,S,AAaA,gBAAuB,WAAA,EAAI,M,AAAM,C,AAAI,EAAC,C,AAAA,C,AAAM,EAAI,K,AAAK,EAAC,C,AAAA,E,AAAC,C,AAAvD,wCAXE,CAAK,WAAY,EAAa,C,AAAA,C,AAAQ,IAAI,E,AACvC,GAAA,CAAoC,iBAAqB,E,AAAzD,QAAA,EAAyB,C,AAAO,C,AAAyB,C,AAAzD,iBAAyD,C,AAAzD,SAGD,GACc,QAAA,EAAqB,M,AAArB,YAAqB,C,AAAA,M,AAAQ,C,AAAO,C,AADlD,OAAL,EAMC,G,AAFsB,C,AAFJ,QAAA,EAAqB,M,AAArB,YAAqB,C,AAAA,M,AAAQ,C,AAAO,C,AADpC,EAAoC,C,AAEpC,QAAA,EAAmB,M,AAAnB,UAAmB,C,AAAA,M,AAAU,C,AAAO,C,AAEpC,KAAK,C,AACvB,E,AAT8D,E,AAAzD,QACkB,gCAAgC,M,AADO,C,AAAA,C,AAS9D,M,AATK,EAAuB,M,AAAvB,cAAuB,C,AAAA,Y,AAU2B,S,AAC5D,EAAW,C,AAAE,EAAK,U,AAAI,0C,AAgBD,2EAsCoD,QAAA,EAAQ,C,AAAA,E,AArCrE,YAAO,K,AAAK,IAAI,K,AACP,aAAQ,M,AAAM,C,AAAG,GAAG,C,AAAG,kBAAa,M,AAAM,C,AAChD,QAAA,EAAC,C,AAAO,G,AAAI,EAAE,C,AAAM,QAAS,EAAC,C,AAAA,E,AACvB,GAAA,eAAU,M,AAAM,I,AACiB,UAAe,C,AAAhD,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAe,C,AAAmB,I,AACf,UAAe,C,AAAhD,EAAO,K,AAAK,M,AAAZ,MAAY,C,AAAA,M,AAAiB,C,AAAmB,I,AACf,WAAe,C,AAAhD,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAe,C,AAAmB,K,AAChD,GAAA,EAAO,K,AAAgB,M,AAAvB,iBAAuB,C,AAAA,M,AAAM,E,AAAI,gBAAiB,K,AAAA,E,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,IAMW,EAAW,G,AAF4B,C,AAED,EAAU,G,AAFT,C,AAEd,EAAW,G,AAFG,C,AAE1B,EAAS,G,AAFiB,C,AAEtD,EAAa,G,AAFyC,M,AAAA,C,AAAA,C,AAAA,C,AAAA,C,AAAA,C,AAAA,uD,AA8B/C,0CAA4D,C,AAA5D,QAA4D,E,AAA5D,GA3BL,gBAAY,C,AAAZ,EAAY,K,AAAZ,EAAY,O,AACR,2BAAsB,QAAM,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAM,C,AAAA,I,AAC1B,OACA,aAAwB,C,AACxB,QAAA,EAAO,K,AAAW,M,AAAlB,YAAkB,C,AAAA,M,AAAU,C,AAAO,C,AACnC,QAAA,EAAO,K,AAAW,M,AAAlB,YAAkB,C,AAAA,M,AAAU,C,AAAO,C,AACnC,QAAA,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAc,C,AAAO,C,AACnC,EAAM,C,AACN,EAAI,C,AACJ,QAAuC,QAAvC,EAAO,K,AAAa,M,AAApB,cAAoB,C,AAAA,M,AAAQ,C,AAAqB,C,AAAA,C,AACtE,Q,AAeD,EAAqD,S,AAAzC,GAAA,QAAc,OAbJ,IAAI,C,AACJ,OAAA,cAAA,QAAA,EAAO,K,AAAQ,M,AAAf,SAAe,C,AAAA,M,AAAa,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,CAAC,C,AAAC,C,AAClD,UAAwD,GAAiB,C,AAAjB,SAAxD,cAAA,QAAA,EAAO,K,AAAQ,M,AAAf,SAAe,C,AAAA,M,AAAa,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,QAAA,CAAC,C,AAAA,C,AAAA,IAAE,C,AAAsB,C,AAAA,C,AACzE,OAAA,cAAA,QAAA,EAAO,K,AAAU,M,AAAjB,WAAiB,C,AAAA,M,AAAW,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,CAAC,C,AAAC,C,AAClD,UAAwD,GAAiB,C,AAAjB,SAAxD,cAAA,QAAA,EAAO,K,AAAU,M,AAAjB,WAAiB,C,AAAA,M,AAAW,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,QAAA,CAAC,C,AAAA,C,AAAA,IAAE,C,AAAsB,C,AAAA,C,AACzE,QAAM,EAAE,C,AAAA,C,AACR,EAAM,C,AACN,EAAK,C,AACL,CAAM,QAAkB,EAAM,C,AAAA,C,AACxB,QAAkB,EAAQ,C,AAAA,C,AAC1B,QAAkB,EAAS,C,AAAA,C,AAC7B,C,AAEK,C,AAAA,C,AAAI,0FAAA,EAAkB,E,AAAA,E,AACrD,qBAAA,CAAQ,2DAAI,M,AAAA,E,AAAZ,EAAY,C,AAAK,S,AAAjB,EAA4B,S,AAAA,C,AAfnB,E,AAemB,C,AA1BpB,C,AAAA,I,AA4BT,QAAS,gCAAgC,C,AAAA,G,AAAA,mD,AA7CpC,YAAkB,eAAU,C,AAAA,K,AAEpD,IAAA,GAAA,SAC+D,U,AAD/D,QAAA,UAC+D,mC,AAAvC,EAAS,C,AAAM,EAAe,C,AAAM,EAAE,G,AAAtC,YAAO,Y,AAAQ,aAAQ,a,AAAgB,C,AACA,U,AAF/D,QAAA,eAE+D,mC,AAAvC,EAAS,C,AAAM,EAAe,C,AAAM,EAAE,G,AAAtC,YAAO,Y,AAAQ,kBAAa,a,AAAW,C,AACA,U,AAH/D,QAAA,UAG+D,I,AAL/D,EAAqB,G,AAK0C,C,AAAA,C,AAyC1D,C,AA5CL,EA4CK,U,AA5CL,WAAA,EA4CK,E,AAAA,C,AA5CL,aA4CK,C,AA5CL,kBAAA,EA4CK,E,AAAA,E,AAAA,C,AA5CL,2EA0CqE,QAAA,EAAQ,C,AAAA,E,AArCrE,YAAO,K,AAAK,IAAI,K,AACP,aAAQ,M,AAAM,C,AAAG,GAAG,C,AAAG,kBAAa,M,AAAM,C,AAChD,QAAA,EAAC,C,AAAO,G,AAAI,EAAE,C,AAAM,QAAS,EAAC,C,AAAA,E,AACvB,GAAA,eAAU,M,AAAM,I,AACiB,UAAe,C,AAAhD,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAe,C,AAAmB,I,AACf,UAAe,C,AAAhD,EAAO,K,AAAK,M,AAAZ,MAAY,C,AAAA,M,AAAiB,C,AAAmB,I,AACf,WAAe,C,AAAhD,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAe,C,AAAmB,K,AAChD,GAAA,EAAO,K,AAAgB,M,AAAvB,iBAAuB,C,AAAA,M,AAAM,E,AAAI,gBAAiB,K,AAAA,E,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,iBAIkD,G,AAJlD,IAMW,EAAW,G,AAF4B,C,AAED,EAAU,G,AAFT,C,AAEd,EAAW,G,AAFG,C,AAE1B,EAAS,G,AAFiB,C,AAEtD,EAAa,G,AAFyC,M,AAAA,C,AAAA,C,AAAA,C,AAAA,C,AAAA,C,AAAA,uD,AA8B/C,0CAA4D,C,AAA5D,QAA4D,E,AAA5D,GA3BL,gBAAY,C,AAAZ,EAAY,K,AAAZ,EAAY,O,AACR,2BAAsB,QAAM,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAM,C,AAAA,I,AAC1B,OACA,aAAwB,C,AACxB,QAAA,EAAO,K,AAAW,M,AAAlB,YAAkB,C,AAAA,M,AAAU,C,AAAO,C,AACnC,QAAA,EAAO,K,AAAW,M,AAAlB,YAAkB,C,AAAA,M,AAAU,C,AAAO,C,AACnC,QAAA,EAAO,K,AAAO,M,AAAd,QAAc,C,AAAA,M,AAAc,C,AAAO,C,AACnC,EAAM,C,AACN,EAAI,C,AACJ,QAAuC,QAAvC,EAAO,K,AAAa,M,AAApB,cAAoB,C,AAAA,M,AAAQ,C,AAAqB,C,AAAA,C,AACtE,Q,AAeD,EAAqD,S,AAAzC,GAAA,QAAc,OAbJ,IAAI,C,AACJ,OAAA,cAAA,QAAA,EAAO,K,AAAQ,M,AAAf,SAAe,C,AAAA,M,AAAa,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,CAAC,C,AAAC,C,AAClD,UAAwD,GAAiB,C,AAAjB,SAAxD,cAAA,QAAA,EAAO,K,AAAQ,M,AAAf,SAAe,C,AAAA,M,AAAa,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,QAAA,CAAC,C,AAAA,C,AAAA,IAAE,C,AAAsB,C,AAAA,C,AACzE,OAAA,cAAA,QAAA,EAAO,K,AAAU,M,AAAjB,WAAiB,C,AAAA,M,AAAW,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,CAAC,C,AAAC,C,AAClD,UAAwD,GAAiB,C,AAAjB,SAAxD,cAAA,QAAA,EAAO,K,AAAU,M,AAAjB,WAAiB,C,AAAA,M,AAAW,C,AAAO,C,AAAnC,CAA0C,GAAG,C,AAAC,G,AAAA,C,AAAE,QAAA,CAAC,C,AAAA,C,AAAA,IAAE,C,AAAsB,C,AAAA,C,AACzE,QAAM,EAAE,C,AAAA,C,AACR,EAAM,C,AACN,EAAK,C,AACL,CAAM,QAAkB,EAAM,C,AAAA,C,AACxB,QAAkB,EAAQ,C,AAAA,C,AAC1B,QAAkB,EAAS,C,AAAA,C,AAC7B,C,AAEK,C,AAAA,C,AAAI,0FAAA,EAAkB,E,AAAA,E,AACrD,qBAAA,CAAQ,2DAAI,M,AAAA,E,AAAZ,EAAY,C,AAAK,S,AAAjB,EAA4B,S,AAAA,C,AAfnB,E,AAemB,C,AA1BpB,C,AAAA,I,AA4BT,QAAS,gCAAgC,C,AAAA,G,AACvD,C,AAAA,C,AAAA,G,AA5CL,GAAA,iBAAA,EA6Ca,E,AAAA,C,AA7Cb,EA6Ca,E,AAAA,C,AA7Cb,CAAA,CAAA,SA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,WA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,iBA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,QA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,QA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,iBA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,YA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,YA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,QA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,QA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,cA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AA7Cb,CAAA,MA6Ca,C,AA7Cb,CA6Ca,C,AAAA,C,AAAA,C,AAAA,E,AA7Cb,GAAA,WAAA,EA6Ca,G,AAAA,C,AA7Cb,iBAAA,EA6Ca,G,AAAA,C,AAAA,C,AAAA,a,AAAA,C,AAAA,C,AAAA,U,AAiBV,aAAU,aAAY,K,AAAZ,EAAY,C,AAAA,E,AAAA,C,AAAtB,0KAhBH,UAcG,IAAkB,C,AAAlB,UADA,EAAqB,C,AAArB,OADA,oBAAW,EAAG,G,AAAA,E,AAAA,C,AAAd,UADA,oBAAW,EAAG,G,AAAA,E,AAAA,C,AAAd,YAXC,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,SAAS,C,AAAA,C,AACpD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,WAAW,C,AAAA,C,AACtD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,YAAY,C,AAAA,C,AACvD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,eAAe,C,AAAA,C,AAC1D,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,QAAQ,C,AAAA,C,AACnD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,QAAQ,C,AAAA,C,AACnD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,qBAAqB,C,AAAA,C,AAChE,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,QAAQ,C,AAAA,C,AACnD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,QAAQ,C,AAAA,C,AACnD,CAAA,QAAA,EAA4B,C,AAAO,G,AAAG,EAAE,C,AAAG,kBAAkB,C,AAAA,E,AAEhD,C,AACA,C,AACO,C,AACH,C,AAAA,Q,AACL,EAAE,G,AAAI,EAAE,C,AAAM,qBAAqB,C,AAAG,EAAE,C,AAAM,EAAE,Q,AAf5D,EAAkB,M,AAAlB,SAAkB,C,AAAA,Y,AAClB,EAAoB,M,AAApB,WAAoB,C,AAAA,a,AACpB,EAAqB,M,AAArB,YAAqB,C,AAAA,a,AACrB,EAAuB,M,AAAvB,cAAuB,C,AAAA,a,AACvB,EAAiB,M,AAAjB,QAAiB,C,AAAA,a,AACjB,EAAiB,M,AAAjB,QAAiB,C,AAAA,a,AACjB,EAA0B,M,AAA1B,iBAA0B,C,AAAA,a,AAC1B,EAAiB,M,AAAjB,QAAiB,C,AAAA,a,AACjB,EAAiB,M,AAAjB,QAAiB,C,AAAA,a,AACjB,EAA0B,M,AAA1B,iBAA0B,C,AAAA,a,AAzD9B,EAAqB,G,AAAA,C,AAgEI,U,AAItB,aAAU,kBAAiB,K,AAAjB,EAAiB,C,AAAA,E,AAAA,C,AAA3B,+BAHA,QAAA,EAAmB,C,AAAO,G,AAAI,QAAA,EAA4B,C,AAAO,C,AAC/D,sCAAsC,C,AACtC,EAAE,G,AAFJ,EAAiB,M,AAAjB,QAAiB,C,AAAA,Y,AAAa,EAA0B,M,AAA1B,iBAA0B,C,AAAA,Y,AAG7B,S,AAClC,EAAK,mS,AA8EwB,WAAI,GAAmB,EAAI,C,AAAtB,E,AAAsB,6C,AAF3B,WAAI,GAAmB,EAAI,C,AAAtB,E,AAAsB,gF,AAnEvC,GAAA,EAAQ,M,AAAM,C,AAAI,4BAAuB,EAAE,E,AAAC,S,AAAI,SAAoB,EAAI,M,AAAA,kC,AAKrF,CAAA,IAFe,GAAA,EAAS,O,AAAA,C,AAAI,sBAAa,GAAM,C,AAAN,KAAM,C,AAAC,E,AAAI,SAAA,EAAsB,M,AAAA,G,AACxD,EAAY,U,AAAA,G,AAAG,EAAE,C,AAAM,EAAE,C,AAAM,EAAY,U,AAAA,C,AAAG,IAAI,C,AACnD,C,AAAG,EAAU,Q,AAAA,yB,AAE3B,EAAa,W,AAAA,G,AAAG,CAAC,C,AAAM,GAAG,C,AAC7B,GAAQ,0EAAO,S,AAAC,EAAc,Y,AAAA,G,AAAC,EAAa,W,AAAA,C,AAAA,yB,AAEzC,EAAiB,e,AAAA,G,AAAG,CAAC,C,AAAM,GAAG,C,AACjC,GAAQ,0EAAO,S,AAAC,EAAe,a,AAAA,G,AAAC,EAAiB,e,AAAA,C,AAAA,yB,AACjC,EAAC,G,AAAG,CAAC,C,AAAM,GAAG,C,AAAM,SAAe,EAAC,C,AAAA,yB,AAEpD,OACG,oBACkB,UAAW,C,AAAzB,GAAQ,EAAE,C,AAAA,C,AAAe,C,AAAM,EAAE,C,AACjC,UAAA,sBAAmB,KAAe,a,AAAA,C,AAAC,C,AAAG,QAAK,IAAI,C,AAAA,C,AAAA,C,AAAM,WAAW,C,AAAM,WAAW,E,AAAC,C,AAHzF,EAAU,W,AAG+E,C,AAAA,+B,AAMtF,EAAc,K,AAJjB,QAGG,CAHH,CAAG,WAAA,GAAA,EAAU,M,AAAM,C,AAAI,sBAAY,KAAe,a,AAAA,C,AAAC,E,AAAG,QAAK,IAAI,C,AAAA,C,AAAA,C,AAAM,wCAAA,EAAU,W,AAAA,I,AAAA,C,AAAM,wCAAA,EAAO,Q,AAAA,I,AAAA,E,AACrF,EAAE,C,AAAA,G,AACD,GAAA,EAAU,M,AAAM,K,AAAwB,kBAAS,C,AAA7B,iBAA6B,C,AAAA,E,AAClD,C,AAAA,C,AACU,gC,AAEjB,GAAE,YAAgB,M,AAAM,C,AAAxB,MAAyC,EAAE,C,AAA3C,EAA6C,Q,AAAA,C,AAA7C,EAA6C,U,AAAA,C,AAA7C,EAA6C,c,AAAA,C,AAA7C,EAA6C,S,AAAA,C,AAA7C,EAA6C,Q,AAAA,C,AAAA,E,AAC1C,YAAoB,K,AAApB,EAAoB,2F,AAEwB,EAAW,S,AAAA,yB,AACX,EAAS,O,AAAA,wB,AACT,CAAA,EAAc,Y,AAAA,C,AAAG,EAAa,W,AAAA,C,AAAA,wB,AAC9B,CAAA,EAAe,a,AAAA,C,AAAE,EAAiB,e,AAAA,C,AAAA,yB,AAClC,GAAO,EAAkB,gB,AAAA,C,AAAA,yB,AAU1C,SAC1B,kBAAA,UAAA,CAAM,EAAE,C,AAAA,C,AACR,SAAA,2BAAA,CAAG,IAAA,GAAA,EAAU,M,AAAM,C,AAAI,sBAAY,KAAkB,U,AAAL,EAAK,G,AAAA,E,AAAC,E,AAAI,SAAA,KAAyB,M,AAAA,E,AAC/E,WAAY,EAAe,C,AAAf,EAAY,O,AAAC,EAAE,C,AAAA,C,AACK,C,AAFpC,EAAwF,E,AAEpD,C,AAAA,C,AAH5B,E,AAAA,C,AAIX,M,AAnBS,IAAqB,IAAA,IAAA,IAAA,GAAA,sBAAA,EAAmD,C,AAAA,I,AAClD,qBAAA,EAAkD,C,AAAA,sD,AADnD,EACmD,mC,AADnD,EACmD,a,AAAA,K,AACnD,sBAAA,EAAmD,C,AAAA,sD,AAFnD,EAEmD,mC,AAFnD,EAEmD,a,AAAA,K,AACnD,sBAAA,EAAmD,C,AAAA,sD,AAHnD,EAGmD,mC,AAHnD,EAGmD,a,AAAA,K,AAClD,qBAAA,EAAkD,C,AAAA,sD,AAJnD,EAImD,mC,AAJnD,EAImD,a,AAAA,qC,AAJjE,EAImE,Y,AAJnE,EAImE,C,AAAA,K,AACvE,YAAgB,EAAG,C,AAAA,C,AAChC,EAAY,K,AAAI,QAAK,EAAc,Q,AAAA,C,AAAA,C,AAAA,Q,AACoB,MAAO,C,AAA9C,OAAO,oBAAmB,EAAQ,M,AAAA,E,AAAC,C,AAA5B,EAA4B,C,AAAA,C,AAAW,e,AAAW,CAAC,K,AAC/D,UAAO,oBAAsB,EAAQ,M,AAAA,G,AAAG,EAAK,E,AAAC,C,AAAvC,EAAuC,C,AAAA,C,AAC9C,UAAW,I,AAAA,C,AAClB,EAAU,K,AAAK,IAAI,C,AAAA,C,AAClB,EAAU,M,AAAM,M,AAAO,E,AAC4B,EAAc,K,AAAlE,QAA4C,WAAP,OAA7B,oBAAmB,EAAK,G,AAAA,E,AAAC,C,AAAzB,EAAyB,C,AAAO,C,AAAQ,C,AAAA,K,AACX,UAAW,C,AAAhD,OAAQ,oBAAmB,EAAK,G,AAAA,E,AAAC,C,AAAzB,EAAyB,C,AAAA,C,AAAe,0B,AAA2B,E,AAF/E,MAAiC,iB,AAU7B,kBAAA,WAAU,EAAI,C,AAAJ,EAAI,C,AACgB,E,AAAA,kD,AAQ1B,CAAA,IAAA,GAAA,CAAA,IAAA,GAQ0B,GAAc,EAAI,C,AAAA,C,AAR5C,SAC8D,U,AAD9D,QAAA,QAC8D,+B,AAApC,GAAc,EAAqB,gB,AAAA,C,AAAA,O,AAAC,C,AACA,U,AAF9D,QAAA,QAE8D,8B,AAApC,CAAQ,2DAAI,M,AAAA,E,AAAE,EAAY,O,AAAd,C,AAAc,O,AAAU,C,AACA,U,AAH9D,QAAA,MAG8D,8B,AAApC,CAAQ,2DAAI,M,AAAA,E,AAAE,EAAU,K,AAAZ,C,AAAY,O,AAAY,C,AACA,U,AAJ9D,QAAA,OAI8D,+B,AAApC,SAAc,EAAW,M,AAAA,C,AAAA,O,AAAW,C,AACA,U,AAL9D,QAAA,WAK8D,kB,AAAA,C,AACA,U,AAN9D,QAAA,eAM8D,kB,AAAA,C,AACA,U,AAP9D,QAAA,UAO8D,+B,AAApC,GAAc,EAAc,S,AAAA,C,AAAA,O,AAAQ,C,AACA,U,AAR9D,QAAA,WAQ8D,I,AAR9D,EAQ8D,C,AAAA,C,AAAA,E,AAR9D,EAS8D,U,AAT9D,WAAA,EAS8D,E,AAAA,C,AAT9D,UAS8D,C,AAT9D,kBAAA,EAS8D,E,AAAA,E,AAAA,C,AAT9D,WASqB,GAAmB,EAAI,C,AAAtB,E,AAAwC,C,AAAA,C,AAAA,W,AAT9D,QAAA,cAUsF,+B,AAAhE,UAAA,EAAI,C,AAAG,EAA2B,S,AAAA,C,AAAA,C,AAAM,cAAc,C,AAAM,EAAE,G,AAAvD,YAAgB,a,AAAyC,C,AACxB,C,AAX9D,EAW8D,U,AAX9D,WAAA,EAW8D,E,AAAA,C,AAX9D,aAW8D,C,AAX9D,kBAAA,EAW8D,E,AAAA,E,AAAA,C,AAX9D,WAWqB,GAAmB,EAAI,C,AAAtB,E,AAAwC,C,AAAA,C,AAAA,G,AAX9D,GAAA,iBAAA,EAYU,E,AAAA,C,AAZV,EAYU,E,AAAA,C,AAZV,EAYU,C,AAAA,E,AAZV,GAAA,WAAA,EAYU,G,AAAA,C,AAZV,cAAA,EAYU,G,AAAA,C,AAAA,C,AAAA,a,AAAA,C,AAAA,C,AAAA,W,AAAA,K,AAzEL,YAAW,IAAI,C,AAAA,I,AACf,YAAW,IAAI,C,AAAA,O,AAE5B,CAqDJ,IAAA,GAEQ,gBAEG,oBAAmC,EAAK,G,AAAA,E,AAc1C,C,AAdE,qDAcF,E,AAdE,GAFH,2BAAE,EAA0B,Q,AAAA,G,AAA1B,YAAgB,Y,AAAU,C,AACzB,QAAA,uBAAoB,GAAA,EAAW,C,AAAA,E,AAAC,C,AAAC,EAAU,W,AAAX,C,AAAhC,EAAgC,C,AAAA,E,AAelC,C,AAlBT,SAmBK,U,AAnBL,QAAA,OAmBK,I,AAnBL,EAmBK,C,AAAA,C,AAAA,G,AAnBL,GAAA,iBAAA,EAmBW,E,AAAA,C,AAnBX,EAmBW,E,AAAA,C,AAnBX,EAmBW,C,AAAA,E,AAnBX,GAAA,WAAA,EAmBW,G,AAAA,C,AAnBX,gBAAA,EAmBW,G,AAAA,C,AAAA,C,AAAA,a,AAAA,C,AAAA,C,AAAA,W,AAxEG,wD,AAuHV,CAAA,IADe,GAAA,EAAS,O,AAAA,C,AAAI,sBAAa,GAAM,C,AAAN,KAAM,C,AAAC,E,AAAI,SAAA,EAAsB,M,AAAA,E,AACjE,EAAU,Q,AAAA,C,AAAG,GAAG,C,AAAG,EAAY,U,AAAA,wC,AAIxC,CAAA,IAAA,GAKuB,YAAS,C,AALhC,SAC2D,U,AAD3D,QAAA,QAC2D,+B,AAApC,GAAc,EAAqB,gB,AAAA,C,AAAA,O,AAAC,C,AACA,U,AAF3D,QAAA,QAE2D,8B,AAApC,CAAQ,2DAAI,M,AAAA,E,AAAE,EAAY,O,AAAd,C,AAAc,O,AAAU,C,AACA,U,AAH3D,QAAA,MAG2D,8B,AAApC,CAAQ,2DAAI,M,AAAA,E,AAAE,EAAU,K,AAAZ,C,AAAY,O,AAAY,C,AACsB,U,AAJjF,QAAA,UAIiF,8B,AAA1D,CAAQ,4EAAgB,M,AAAA,E,AAAE,EAAqB,gB,AAAU,U,AAAjC,C,AAAiC,O,AAAC,C,AACtB,U,AAL3D,QAAA,SAK2D,I,AAL3D,EAK2D,C,AAAA,C,AAAA,G,AAL3D,GAAA,iBAAA,EAMU,E,AAAA,C,AANV,EAMU,E,AAAA,C,AANV,EAMU,C,AAAA,E,AANV,GAAA,WAAA,EAMU,G,AAAA,C,AANV,UAAA,EAMU,G,AAAA,C,AAAA,C,AAAA,a,AAAA,C,AAAA,C,AAAA,W,AAAA,S,AAZV,YAiBc,IAAE,C,AAAf,OAHG,oBAAW,EAEO,M,AAFC,C,AAAR,cAAQ,C,AACe,EAAS,C,AAAlC,2BAAc,EAAM,G,AAAA,G,AAAN,SAAI,C,AAAG,C,AADX,E,AAG1B,C,AAHO,SAGP,C,AAAmB,C,AAjBP,4E,AAtBO,0BAAgC,I,AAChC,0BAAgC,O,AAChD,CAAA,GAAA,SAC4E,U,AAD5E,QAAA,WAC4E,8B,AAArD,CAAQ,4DAAI,M,AAAA,E,AAAI,EAAgB,W,AAApB,C,AAAoB,O,AAAqB,C,AACA,U,AAF5E,QAAA,YAE4E,8B,AAArD,CAAQ,4DAAI,M,AAAA,E,AAAI,EAAiB,Y,AAArB,C,AAAqB,O,AAAoB,C,AACA,U,AAH5E,QAAA,aAG4E,8B,AAArD,CAAQ,4DAAI,M,AAAA,E,AAAI,EAAiB,Y,AAArB,C,AAAuB,O,AAAkB,C,AACA,U,AAJ5E,QAAA,eAI4E,8B,AAArD,CAAQ,4DAAI,M,AAAA,E,AAAI,EAAoB,e,AAAxB,C,AAAwB,O,AAAiB,C,AACA,U,AAL5E,QAAA,YAK4E,8B,AAArD,CAAQ,4DAAI,M,AAAA,E,AAAI,EAAkB,a,AAAtB,C,AAAsB,O,AAAmB,C,AACA,U,AAN5E,QAAA,UAM4E,+B,AAArD,SAAoB,EAAW,G,AAAA,C,AAAO,EAAW,G,AAAA,C,AAAE,O,AAAE,C,AACA,U,AAP5E,QAAA,aAO4E,+B,AAArD,SAAoB,EAAW,G,AAAA,C,AAAoB,O,AAAE,C,AACA,U,AAR5E,QAAA,iBAQ4E,+B,AAArD,SAAoB,EAAW,G,AAAA,C,AAAoB,O,AAAE,C,AACA,U,AAT5E,QAAA,aAS4E,+B,AAArD,SAAoB,EAAW,G,AAAA,C,AAAoB,O,AAAE,C,AACA,U,AAV5E,QAAA,iBAU4E,+B,AAArD,SAAoB,EAAW,G,AAAA,C,AAAoB,O,AAAE,C,AAClE,E,AAXV,GAAA,iBAAA,EAWU,E,AAAA,C,AAXV,EAWU,E,AAAA,C,AAXV,EAWU,C,AAAA,E,AAXV,GAAA,WAAA,EAWU,G,AAAA,C,AAXV,WAAA,EAWU,G,AAAA,C,AAAA,C,AAAA,a,AAAA,C,AAAA,C,AAAA,W,AAAA,K,AA1BH,2BAAE,EAA2B,S,AAAA,G,AAA3B,YAAgB,Y,AAAW,K,AAQhC,GAAU,2BAAE,EAA0B,Q,AAAA,G,AAA1B,YAAgB,Y,AAAU,C,AACtC,+BACD,WAAa,oBAAU,UAAA,EAAK,G,AAAA,C,AAAG,EAAM,C,AAAA,E,AAAA,C,AAAE,EAAS,C,AAAA,G,AADrC,2BAAE,EAA2B,S,AAAA,G,AAA3B,YAAgB,Y,AAAW,I,AAAnC,S,AAGR,YAmBc,IAAE,C,AAAf,OAHG,oBAAW,EAEO,M,AAFC,C,AAAR,cAAQ,C,AACe,EAAU,C,AAAnC,2BAAc,EAAM,G,AAAA,M,AAAC,C,AADX,E,AAG1B,C,AAHO,EAGP,C,AAAmB,C,AAnBc,wH,AAqHjB,YAAW,SAAS,C,AAAA,I,AACpB,2BAAG,eAAY,EAAgC,c,AAAA,C,AAAA,G,AAAhC,YAAgB,Y,AAAkB,I,AACjD,2BAAG,SAAY,EAA4B,U,AAAA,C,AAAA,G,AAA5B,YAAgB,Y,AAAkB,c,AAErD,OACO,SAAS,C,AACT,CAAG,UAAW,OAAO,C,AAAQ,EAAM,C,AAAA,C,AAChC,UAAW,YAAY,C,AAAG,eAAmB,C,AAAA,C,AAC9C,C,AACF,CAAG,UAAW,WAAW,C,AAAU,EAAU,C,AAAA,C,AAC1C,UAAW,WAAW,C,AAAU,EAAU,C,AAAA,C,AAC3C,C,AACF,CAAG,UAAW,SAAS,C,AAAS,UAAA,UAA6B,C,AAAA,C,AAAE,C,AAC5D,UAAW,QAAQ,C,AAAU,UAAA,SAA6B,C,AAAA,C,AAAE,C,AAC5D,UAAW,SAAS,C,AAAS,UAAA,UAA6B,C,AAAA,C,AAAE,C,AAC5D,UAAW,eAAe,C,AAAG,UAAA,WAA6B,C,AAAA,C,AAAE,C,AAC5D,UAAW,YAAY,C,AAAM,UAAA,gBAA6B,C,AAAA,C,AAAE,C,AAC7D,C,AACF,CAAG,UAAW,QAAQ,C,AAAM,WAAA,WAAM,E,AAAA,C,AAAA,C,AAiBhC,C,AACF,EACE,C,AACrB,gB,AACD,IAAM,GAAA,aAAW,gB,AAAgB,cAAc,C,AAAC,C,AAA1C,UAAA,EAA0C,C,AAA1C,IAA0C,C,AAAA,C,AAE7C,4pHAkCG,C,AACC,EAAC,Y,AAAY,E,AACjB,UAAA,eAA8B,C,AAA9B,EAA8B,C,AAAA,O,AAGjC,GAAA,IAAI,E,AACD,GAAA,eAA8B,kB,AAAA,C,AAAA,E,AAC9B,aAAe,K,AAAf,EAAe,Y,AAElB,GAAA,gBAAY,C,AAAZ,EAAY,K,AAAZ,EAAY,O,AACR,kBAAA,EAAgC,Q,AAApB,2FAAoB,C,AAChC,aAAA,YAAgB,K,AAAK,EAAI,S,AAAzB,EAAyB,S,AAAA,C,AADO,E,AAAA,C,AADxB,C,AAAA,O,AAKZ,GACkB,eAAa,I,AAAM,C,AADrC,SACuC,U,AADvC,QAAA,aACuC,I,AADvC,EACuC,C,AAAA,C,AAAA,K,AADvC,iBAAA,EAEW,E,AAAA,C,AAFX,EAEW,E,AAAA,C,AAFX,EAEW,C,AAAA,M,AAFX,WAAA,EAEW,G,AAAA,C,AAFX,sBAAA,EAEW,G,AAAA,C,AAAA,C,AAAA,S,AACI,aAAoB,aAAW,O,AAAU,EAAC,E,AAAC,C,AAA1D,EAAM,W,AAAoD,uC,AAhGvD,YAAa,C,AAPhB,OACG,8BACC,IAAA,GAAA,kBAAuB,SAAS,G,AAAC,EAAO,C,AAAA,C,AAAxC,aAAA,EACgB,G,AAAA,C,AADhB,EACgB,G,AAAA,C,AAAA,E,AACZ,sBAAY,eAAA,UAA2B,C,AAA3B,KAA2B,C,AAAA,C,AAAC,S,AACxC,SAAoE,SAAmB,C,AAAzD,CAAQ,8EAAkB,M,AAAA,E,AAA1B,EAA0B,C,AAAQ,C,AAAuB,M,AAAC,E,AAC/F,C,AAND,eAAmB,W,AAMlB,C,AAAA,C,AACe,+B,AAbhB,UAAA,GAAA,gBAAY,C,AAAZ,EAAY,K,AAAZ,EAAY,O,AACR,kBAAA,EAAoB,Q,AAAhB,sFAAgB,C,AACpB,WAAA,IAAS,S,AAAS,iB,AAAlB,EAA2B,S,AAAA,C,AADP,E,AAAA,C,AADZ,C,AAAA,E,AAGE,sC,AAnBd,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,CAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,EAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,EAAQ,C,AAAR,KAAQ,C,AAAR,EAaa,G,AAbb,EAAQ,C,AAAR,KAAQ,C,AAAR,KAAQ,4C,AAjCwB,UAI3B,GAHL,IAAK,C,AAAL,SACI,kBAAA,QAAI,SAAY,GAAG,C,AAAA,C,AACf,WAAA,EAAC,W,AAAc,EAAC,a,AAAa,mB,AAAA,C,AADd,E,AAAA,C,AADlB,E,AAGA,IAAW,C,AAJiB,oG,AA2Md,uBACA,EAAM,K,AAAS,M,AAAf,UAAe,C,AAAA,M,AAAM,G,AAAI,EAAE,E,AAAI,EAAM,K,AAAS,M,AAAf,UAAe,C,AAAA,M,AAAM,G,AAAI,EAAE,E,AACxD,UAAA,GAAA,gBAAY,C,AAAZ,EAAY,K,AAAZ,EAAY,O,AACT,kBAAA,EAA6D,Q,AAAzD,qFAAc,EAAM,K,AAAS,M,AAAf,UAAe,C,AAAA,M,AAAM,C,AAAC,EAAM,K,AAAS,M,AAAf,UAAe,C,AAAA,M,AAAM,E,AAAA,C,AAC7D,WAAA,IAAS,S,AAAS,iB,AAAlB,EAA2B,S,AAAA,C,AADkC,E,AAAA,C,AADpD,C,AAAA,E,AAGE,G,AAAA,qE,AAf+C,aAAa,2J,AAt0IjE,UAAA,IAAkB,C,AAAlB,EAAkB,C,AAAA,yB,AAGzC,gBAAA,IAAgB,C,AAAhB,EAAgB,C,AAAA,mC,AACP,SAAA,EAAC,C,AAAE,QAAA,CAAC,C,AAAA,C,AAAI,SAAC,GAAI,CAAC,K,AAAE,UAAA,EAAC,C,AAAO,C,AAAG,CAAC,6B,AAAC,E,AAAC,C,AAAE,yB,AACzC,UAAA,IAAkB,C,AAAlB,EAAkB,C,AAAA,S,AAziBX,mBAAA,CAAA,EAAa,C,AAAA,E,AAAA,W,AA4FV,WAAS,a,AAQL,UAAM,Q,AAiGb,WAAgB,Y,AAmOZ,WAAS,iB,AA0EJ,WAAqB,gB,AAkD1B,0CAA8B,kB,AAGzC,GAAA,gCACyC,iC,AACvB,gB,AAoBN,iBAAa,0BAAA,CAAwB,S,AAAxB,qDAAwB,E,AAAxB,EAAwB,G,AAAA,C,AAAA,c,AACrC,iBAAa,uBAAA,CAAwB,Q,AAAxB,iBAAA,EAAwB,C,AAAxB,qDAAwB,C,AAAA,C,AAAxB,EAAwB,G,AAAA,C,AAAA,iB,AACrC,iBAAa,0BAAA,CAAwB,S,AAAxB,YAAA,EAAwB,gC,AAAA,E,AAAxB,EAAwB,G,AAAA,C,AAAA,iB,AACrC,iBAAa,0BAAA,CAAwB,S,AAAxB,YAAA,EAAwB,gC,AAAA,E,AAAxB,EAAwB,G,AAAA,C,AAAA,e,AACrC,iBAAa,uBAAA,IAAwB,Q,AAAxB,YAAA,EAAwB,C,AAAxB,qDAAwB,C,AAAA,C,AAAxB,EAAwB,G,AAAA,C,AAAA,gB,AAIrC,gBAAU,e,AACV,eAAS,kB,AACT,kBAAY,kB,AACZ,kBAAY,gB,AACZ,gBAAU,c,AAiDC,CAAA,cAAY,C,AAAI,oBAAS,EAAW,Y,AAAE,E,AAAA,C,AAAE,a,AACxC,CAAA,mBAAA,8EAAO,E,AAAA,C,AAAS,oBAAS,EAAU,W,AAAG,E,AAAA,C,AAAE,W,AACxC,CAAA,mBAAA,8EAAO,E,AAAA,C,AAAS,oBAAS,EAAQ,S,AAAK,E,AAAA,C,AAAE,Y,AACxC,CAAA,mBAAA,8EAAO,E,AAAA,C,AAAS,oBAAS,EAAS,U,AAAI,E,AAAA,C,AAAE,Y,AA+V9C,aAAa,sB,AAEH,aAAO,C,AAAG,kBAAkB,kB,AAGhC,aAAO,C,AAAG,cAAc,G,AAGjC,6DAAI,2B,AAAA,E,AAAZ,6BAAY,sB,AAuPX,MACa,EAAE,C,AACF,EAAE,C,AACF,EAAE,C,AACD,CAAC,C,AACF,EAAE,C,AACF,EAAE,C,AACF,EAAE,C,AACF,EAAE,C,AACpC,Y,AAsoGiB,YAAW,MACL,QAAS,GAAG,C,AAAA,C,AACZ,EAAI,E,AACJ,GAAA,QAAmB,S,AAAnB,EAAwB,gB,AAAA,G,AACxB,GAAA,QAAmB,S,AAAnB,EAAyB,e,AAAA,E,AACzB,mBAAe,C,AACf,EAAG,C,AACtB,C,AAAA,c,AAae,YAAW,YAAS,C,AAAA,e,AAMnB,YAAW,wBAAwB,C,AAAA,I,AAGhD,MAAc,oB,AACX,cAA0C,C,AAA1C,YAA0C,C,AAA1C,EAA0C,U,AAM1C,gBACK,eAAU,M,AAAM,G,AAAI,EAAG,C,AACvB,eAAU,K,AAAU,EAAG,C,AAAA,E,AAC9B,C,AAHE,OAJe,oBACd,EAE2B,K,AAFnB,C,AAEgB,EAAG,G,AAFnB,C,AAAR,wBAAQ,E,AAEoB,C,AAHhC,cAAS,W,AAGuB,C,AAI/B,U,AAME,gBACK,WAAA,cAAS,M,AAAM,C,AAAI,EAAE,C,AAAA,C,AACrB,cAAS,K,AAAU,EAAE,C,AAAA,E,AAC5B,C,AAHE,OAJgB,oBACf,EAE0C,G,AAF1C,wBAAQ,C,AACuB,YAAS,C,AACT,QAAQ,EAAG,C,AAAA,E,AAAC,C,AAH/C,eAAU,W,AAGqC,C,AAI9C,c,AA0Ce,YAAW,EAAE,C,AAAA,kB,AACb,YAAW,EAAE,C,AAAA,Y,AACb,YAAW,KAAK,C,AAAA,e,AAChB,YAAW,IAAI,C,AAAA,U,AA4JxB,GAAA,WAAO,C,AACd,QACA,oBAAA,SAAO,WAAkB,oBAAuB,UAAA,EAAK,G,AAAA,C,AAAG,EAAe,S,AAAA,C,AAAA,E,AAAA,C,AAAhE,EAAc,Q,AAAkD,C,AAAE,C,AAAA,E,AAAA,C,AAD3D,YAAgB,W,AAAK,C,AAAA,gB,AAmEtB,YAAY,syE,AAvQb,QAAA,UAA+B,C,AAAA,yM,AA4CvC,QAAA,eA6Ca,C,AAAA,qH,AAoFjB,QAAA,cAmBW,C,AAAA,mH,AAdC,QAAA,YAYU,C,AAAA,kO,AAqDlB,QAAA,QAMU,C,AAAA,gH,AAhCV,QAAA,SAWU,C,AAAA,mB;"
}
