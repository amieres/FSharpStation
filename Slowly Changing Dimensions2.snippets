{"snippets": [{"snpId": {"SnippetId" :"bf864f3c-1370-42f2-ac8a-565a604892e8"}, "snpName": "", "snpContent": "#if INTERACTIVE\n//#I @\"../WebServer/bin\"\nmodule FSGlobal =\n#else\nnamespace FSharpStationNS\n#nowarn \"1182\"\n#endif\n", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpGeneration": 219}, {"snpId": {"SnippetId" :"edbbf11e-4698-4e33-af0c-135d5b21799b"}, "snpName": "Evaluate F# Code", "snpContent": "// Code to be evaluated using FSI: `Evaluate F#`", "snpParentIdO": {"SnippetId" :"bf864f3c-1370-42f2-ac8a-565a604892e8"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"7c4a82bc-58cd-48a7-bd7e-79de148a1cf0"}, "snpName": "Useful", "snpContent": "module Useful =", "snpParentIdO": {"SnippetId" :"edbbf11e-4698-4e33-af0c-135d5b21799b"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"c7e56d1e-aea8-483a-a99a-23b7e056de0d"}, "snpName": "", "snpContent": "let doSTA act =\n    let thread = System.Threading.Thread(System.Threading.ThreadStart act)\n    thread.SetApartmentState(System.Threading.ApartmentState.STA)\n    thread.Start()\n    \nlet sCopy       txt = \n    doSTA (fun () -> System.Windows.Forms.Clipboard.SetText txt)\n    sprintf \"Copied to clipboard: %s... (%d characters)\\n\\n\" <| txt.[..min (txt.Length - 1) 100 ] <| txt.Length \n    \nlet Copy        txt = \n    sCopy txt\n    |> printf \"%s\"\n    \nlet Paste f        = doSTA (fun () -> f System.Windows.Forms.Clipboard.GetText)   ", "snpParentIdO": {"SnippetId" :"7c4a82bc-58cd-48a7-bd7e-79de148a1cf0"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"16f618b6-0483-44dc-9c54-550f4f5b725d"}, "snpName": "type ActionBar", "snpContent": "open System\nopen System.Text\nopen System.Drawing\nopen System.Windows.Forms\nopen System.ComponentModel\n\ntype GrowLabel (maxHeight:int) =\n  inherit Label() \n  let mutable mGrowing  = false\n  do base.AutoSize     <- false\n  member this.resizeLabel() =\n    if mGrowing then () else\n    try \n      mGrowing <- true\n      let sz       = new Size(base.Width, Int32.MaxValue)\n      let sz2      = TextRenderer.MeasureText(base.Text, base.Font, sz, TextFormatFlags.WordBreak)\n      base.Height <- min sz2.Height maxHeight\n    finally\n      mGrowing <- false\n  override this.OnTextChanged( e) = \n    base.OnTextChanged e\n    this.resizeLabel()\n  override this.OnFontChanged( e) =\n    base.OnFontChanged e\n    this.resizeLabel()\n  override this.OnSizeChanged( e) =\n    base.OnSizeChanged e\n    this.resizeLabel()\n\ntype ActionBar(actions:(string * (unit -> string)) seq) =\n    let label1 = new GrowLabel (Text = \"\", Width = 300, maxHeight = 100)\n    let newButton (txt:string) act =\n        let width = 300\n        if txt.StartsWith \"---\" || txt.StartsWith \"===\" then\n            let lbl = new Label(Text = txt, Width = width)\n            lbl :> Control\n        else\n            let btn = new Button(Text = txt, Width = width)\n            btn.Click.Add act\n            btn :> Control\n    \n    let form = new Form(Text = \"Select Action:\", Width = 400, Height = 800)\n    let panel1 = new Panel(Dock = DockStyle.Fill)\n    do  actions \n        |> Seq.map (fun (txt, f) -> newButton txt (fun _ -> label1.Text <- sprintf \"Processing %s ...\" txt\n                                                            form.Refresh()\n                                                            label1.Text <- f() ))\n        |> Seq.append [ label1 :> Control ]\n        |> Seq.toArray\n        |> panel1.Controls.AddRange\n        let reposition () =\n            panel1.Controls\n            |> Seq.cast\n            |> Seq.fold (fun (height, width) (cts: Control) -> \n                cts.Left <- 20 \n                cts.Top  <- height + 5\n                (height + cts.Height + 5, (max width cts.Width)) ) (0, 0)\n            |> (fun (height, width) -> form.Height <- height + 50 ; form.Width <- width + 50)\n        reposition ()\n        label1.Resize.Add (fun _ -> reposition () )\n        panel1.DockPadding.All <- 10\n        form.Controls.Add(panel1)\n        form.Activated.AddHandler(System.EventHandler (fun _ _ -> form.TopMost <- true(*; form.TopMost <- false*) ))\n        async {\n          do Application.Run(form) \n        } |> Async.Start\n       ", "snpParentIdO": {"SnippetId" :"7c4a82bc-58cd-48a7-bd7e-79de148a1cf0"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpName": "SlowlyChangingDimensions", "snpContent": "//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\FSharp.Data.SqlClient\\lib\\net40\\FSharp.Data.SqlClient.dll\"\n\nmodule SlowlyChangingDimensions =", "snpParentIdO": {"SnippetId" :"edbbf11e-4698-4e33-af0c-135d5b21799b"}, "snpPredIds": [{"SnippetId" :"c7e56d1e-aea8-483a-a99a-23b7e056de0d"}], "snpProperties": [], "snpGeneration": 4}, {"snpId": {"SnippetId" :"62d0b48f-6f54-4fa2-a455-e1f288cfd0c8"}, "snpName": "Fields", "snpContent": "type TargetField =\n     | CURR_ASSIGNED_VEND\n     | ORIG_ASSIGNED_VEND\n     | ORIG_INV_NUM\n     | POST_DTE_KEY\n     | RECEIVABLE_CURR_BILLING_TO_DTE\n     | RECEIVABLE_CURR_DELINQ_DTE\n     | RECEIVABLE_CURR_DUE_DTE\n     | RECEIVABLE_CURR_ISSUE_DTE\n     | RECEIVABLE_CURR_TO_DTE\n     | RECEIVABLE_KEY\n     | RECEIVABLE_ORIG_BILLING_TO_DTE\n     | RECEIVABLE_ORIG_DELINQ_DTE\n     | RECEIVABLE_ORIG_DUE_DTE\n     | RECEIVABLE_ORIG_ISSUE_DTE\n     | RECEIVABLE_ORIG_TO_DTE\n     | TRANS_DTE_KEY\n     | VERS_BEG_DTE  \n     | VERS_END_DTE \n     | CURR_VERS_FLAG\n     | ITEM_KEY\n     | INCDT_KEY\n     | CUST_KEY\n     | CARRIER_KEY\n     | CARRIER_PROCEDURE_KEY\n     | COLL_PERSON_KEY\n     | EMP_KEY\n     | FIN_TRANS_TYPE_KEY\n     | DTE_KEY\n     | COH_ORG_KEY\n     | SYS_LOAD_KEY       \n     | ORIG_CUST_KEY      \n     | COLL_VEND_CONTR_KEY\n     | GL_COMBO_KEY \n     | GL_ACCT_ID\n     | FUND_ID\n     | FUND_CNTR_ID\n     | FUNC_AREA_ID\n     | ROW_CHG_RSN\n     | Nil\n\ntype FinTransViewField =\n     | INTRA_DAY_ORDER\n     | DEPT_LONG_NAME\n     | CONTR_ID\n     | CUST_PAR_ID\n     | CUST_PAR_NAME\n     | ADJ_FLAG\n     | ALLOC_TRANS_FLAG\n     | BILLED_FLAG\n     | BLK_NUM\n     | BOOT_SERIAL_NUM\n     | BUS_AREA_ID\n     | BUS_CONT_PERSON_NAME\n     | CARRIER_FIN_CLASS\n     | CARRIER_FIN_GRP\n     | CARRIER_GRP\n     | CARRIER_NAME\n     | CARRIER_PROCEDURE_BILL_CODE\n     | CARRIER_PROCEDURE_CODE\n     | CARRIER_PROCEDURE_DESCR\n     | CARRIER_PROCEDURE_SRC\n     | CARRIER_PROCEDURE_TYPE\n     | CARRIER_SRC\n     | COH_EMP_NUM\n     | COLL_PERSON_ID\n     | COLL_PERSON_NAME\n     | COLL_PERSON_TYPE\n     | CONFI_CUST_FLAG\n     | CUST_ADDR_LINE_1\n     | CUST_ADDR_LINE_2\n     | CUST_ADDR_LINE_3\n     | CUST_APT_LOT\n     | CUST_CITY\n     | CUST_CNTY\n     | CUST_CTRY\n     | CUST_EMAIL_ADDR\n     | CUST_FAX_NUM\n     | CUST_GIS_CITY\n     | CUST_GIS_LOCATR_NAME\n     | CUST_GIS_MATCH_SCORE\n     | CUST_GIS_PREFIX\n     | CUST_GIS_ST_NAME\n     | CUST_GIS_ST_NUM\n     | CUST_GIS_ST_PRETYPE\n     | CUST_GIS_ST_TYPE\n     | CUST_GIS_SUFF\n     | CUST_GIS_X\n     | CUST_GIS_Y\n     | CUST_GIS_ZIP\n     | CUST_ID\n     | CUST_IN_CITY_FLAG\n     | CUST_IS_VEND_FLAG\n     | CUST_NAME\n     | CUST_PAR_KEY\n     | CUST_PHN_NUM_1\n     | CUST_PHN_NUM_2\n     | CUST_PHN_NUM_3\n     | CUST_PREFIX\n     | CUST_SERV_LVL\n     | CUST_ST\n     | CUST_STATE\n     | CUST_ST_DIR\n     | CUST_ST_NAME\n     | CUST_ST_NUM\n     | CUST_ST_PRETYPE\n     | CUST_ST_TYPE\n     | CUST_SUFF\n     | CUST_TYPE\n     | CUST_ZIP_CODE\n     | CUST_ZIP_PLUS_4\n     | DEC_CUST_FLAG\n     | DERIVED_TRANS_FLAG\n     | DET_TRANS_CODE\n     | DET_TRANS_DESCR\n     | DIGITECH_ID\n     | DIGITECH_TRANS_TYPE\n     | DIGITECH_TRANS_TYPE_DET\n     | DEPT_NAME\n     | DIV_NAME\n     | DIV_LONG_NAME\n     | COH\n     | DL_ISSUE_STATE\n     | DL_NUM\n     | DTE\n     | EMP_NAME\n     | EMP_TYPE\n     | FED_TAX_ID\n     | FIRE_ALM_AGING_RST_FLAG\n     | FIRE_ORIG_ISSUE_DTE\n     | FUNC_AREA_ID\n     | FUND_CNTR_ID\n     | FUND_ID\n     | GL_ACCT_ID\n     | HCTO_AD_VAL_ID\n     | INCDT_ADDR_LINE_1\n     | INCDT_ADDR_LINE_2\n     | INCDT_ADDR_LINE_3\n     | INCDT_APT_LOT\n     | INCDT_CAT\n     | INCDT_CITY\n     | INCDT_CNTY\n     | INCDT_CTRY\n     | INCDT_DESCR\n     | INCDT_DTE\n     | INCDT_GIS_CITY\n     | INCDT_GIS_LOCATR_NAME\n     | INCDT_GIS_MATCH_SCORE\n     | INCDT_GIS_PREFIX\n     | INCDT_GIS_ST_NAME\n     | INCDT_GIS_ST_NUM\n     | INCDT_GIS_ST_PRETYPE\n     | INCDT_GIS_ST_TYPE\n     | INCDT_GIS_SUFF\n     | INCDT_GIS_X\n     | INCDT_GIS_Y\n     | INCDT_GIS_ZIP\n     | INCDT_IN_CITY_FLAG\n     | INCDT_PREFIX\n     | INCDT_SEQ_NUM\n     | INCDT_SERV_LVL\n     | INCDT_ST\n     | INCDT_STATE\n     | INCDT_ST_DIR\n     | INCDT_ST_NAME\n     | INCDT_ST_NUM\n     | INCDT_ST_PRETYPE\n     | INCDT_ST_TYPE\n     | INCDT_SUFF\n     | INCDT_TIME\n     | INCDT_TYPE\n     | INCDT_ZIP_CODE\n     | INCDT_ZIP_PLUS_4\n     | INTRA_FUND_TRANS_AMT\n     | INTRA_FUND_TRANS_FLAG\n     | INT_EXT_EMP_FLAG\n     | INV_NUM\n     | ITEM_ADDR_LINE_1\n     | ITEM_ADDR_LINE_2\n     | ITEM_ADDR_LINE_3\n     | ITEM_APT_LOT\n     | ITEM_CITY\n     | ITEM_CNTY\n     | ITEM_CTRY\n     | ITEM_DESCR\n     | ITEM_EXMPT_FLAG\n     | ITEM_GIS_CITY\n     | ITEM_GIS_LOCATR_NAME\n     | ITEM_GIS_MATCH_SCORE\n     | ITEM_GIS_PREFIX\n     | ITEM_GIS_ST_NAME\n     | ITEM_GIS_ST_NUM\n     | ITEM_GIS_ST_PRETYPE\n     | ITEM_GIS_ST_TYPE\n     | ITEM_GIS_SUFF\n     | ITEM_GIS_X\n     | ITEM_GIS_Y\n     | ITEM_GIS_ZIP\n     | ITEM_IN_CITY_FLAG\n     | ITEM_PREFIX\n     | ITEM_SERV_LVL\n     | ITEM_ST\n     | ITEM_STAT\n     | ITEM_STATE\n     | ITEM_STAT_CHG_DTE\n     | ITEM_ST_DIR\n     | ITEM_ST_NAME\n     | ITEM_ST_NUM\n     | ITEM_ST_PRETYPE\n     | ITEM_ST_TYPE\n     | ITEM_SUFF\n     | ITEM_TYPE\n     | ITEM_ZIP_CODE\n     | ITEM_ZIP_PLUS_4\n     | JV_CUST_FLAG\n     | LOAD_DTE\n     | LOAD_TIME\n     | MAN_TRANS_FLAG\n     | MEDICAID_PAYER_CODE\n     | MEDICARE_PAYER_CODE\n     | MSTR_TRANS_TYPE\n     | NAICS_DET_CODE\n     | NAICS_DET_NAME\n     | NAICS_DIV_CODE\n     | NAICS_DIV_NAME\n     | NAICS_INDY_CODE\n     | NAICS_INDY_GRP_CODE\n     | NAICS_INDY_GRP_NAME\n     | NAICS_INDY_NAME\n     | NAICS_MAJ_GRP_CODE\n     | NAICS_MAJ_GRP_NAME\n     | ORIG_BILL_NAME\n     | PAY_METH\n     | PERMIT_IS_CURR_AT_TIME_OF_INCDT_FLAG\n     | PMAM_ADJMT_TO\n     | PMAM_ADJMT_TYPE\n     | PMAM_ID\n     | POST_DTE\n     | PRKG_METER_NUM\n     | PRKG_METER_VIO_FLAG\n     | RECEIVABLE_1ST_PAY_DTE\n     | RECEIVABLE_EVER_TRANS_FLAG\n     | RECEIVABLE_FNL_PAY_DTE\n     | RECEIVABLE_LITIGATION_DTE\n     | RECEIVABLE_MSTR_STAT\n     | RECEIVABLE_MSTR_STAT_CHG_DTE\n     | RECEIVABLE_SETTLEMENT_DTE\n     | RECEIVABLE_STAT\n     | RECEIVABLE_STAT_CHG_DTE\n     | RECEIVABLE_VERS_BILLING_TO_DTE\n     | RECEIVABLE_VERS_DELINQ_DTE\n     | RECEIVABLE_VERS_DUE_DTE\n     | RECEIVABLE_VERS_ISSUE_DTE\n     | RECEIVABLE_VERS_TO_DTE\n     | REINSTATEMENT_DTE\n     | RM_EMP_MSTR_KEY\n     | RM_LOAD_DTE\n     | RM_LOAD_TIME\n     | RSN_INCDT_NOT_BILLED\n     | SAP_BUS_ID\n     | SIC_CODE\n     | SIC_DIV_CODE\n     | SIC_DIV_NAME\n     | SIC_INDY_GRP_CODE\n     | SIC_INDY_GRP_NAME\n     | SIC_MAJ_GRP_CODE\n     | SIC_MAJ_GRP_NAME\n     | SIC_NAME\n     | SMARTCM_IS_ADJMT\n     | SMARTCM_IS_FEE\n     | SMARTCM_IS_PAY\n     | SMARTCM_OTHER_CRITERIA\n     | SMART_CM_ID\n     | SRC_CARRIER_KEY\n     | SRC_CARRIER_PROCEDURE_KEY\n     | SRC_SYS\n     | SRC_SYS_ID\n     | SRC_SYS_MOD_DTE\n     | SRC_SYS_TRANS_ID\n     | STATE_CORP_CHTR_ID\n     | STATE_SALES_TAX_ID\n     | T2_ID\n     | T2_TRANS_MISC_ITEM_CODE\n     | T2_TRANS_MISC_ITEM_DESCR\n     | T2_TRANS_ORIG_OBJ_TYPE_ID\n     | T2_TRANS_PARSED_DESCR\n     | T2_TRANS_RSN\n     | T2_TRANS_SCENARIO\n     | T2_TRANS_TYPE_CODE\n     | T2_TRANS_TYPE_DESCR\n     | TOWING_CMPNY\n     | TRANS_AMT\n     | TRANS_CNT\n     | UNK_CUST_AT_BILL_FLAG\n     | VERS_ASSIGNED_VEND\n     | VIO_CODE\n     | EMS_INCDT   \n     | DISPATCH_NUM\n     | FLAG_DIM_INCDT_EMS_DET\n     | DEST_LOC\n     | EMS_INCDT_CAT\n     | ORIGIN_LOC\n     | TXP_SERV_LVL\n     | TXP_TYPE\n     | VEH\n     | FLAG_DIM_ITEM_BURG_ALM_PERMIT_DET\n     | ALLOWABLE_NO_CHRG_INCDTS\n     | ALM_MNT_CMPNY\n     | ALM_TYPE\n     | PERMIT_EXP_DTE\n     | PERMIT_ISSUE_DTE\n     | PERMIT_NAME\n     | PERMIT_NUM\n     | REG_HOLDER_FLAG\n     | SUSPD_PERMIT_DTE\n     | SUSPD_PERMIT_RSN\n     | TYPE_OF_ALM_SITE\n     | FLAG_DIM_ITEM_FIRE_ALM_PERMIT_DET\n     | ALM_INSTL_CMPNY\n     | ALM_INSTL_DTE\n     | ALM_REG_KEY\n     | APPLICTN_RECV_DTE\n     | CURR_FIRE_ALM_PERMIT_FLAG\n     | EXCL_TYPE\n     | FIRE_ALM_PERMIT_ACTV_FLAG\n     | FIRE_ALM_PERMIT_NUM\n     | FIRE_ALM_PURPOSE\n     | FLAG_DIM_ITEM_LICENSED_VEH_DET\n     | LICENSE_PLATE_EXP_MTH\n     | LICENSE_PLATE_EXP_YR\n     | LICENSE_PLATE_NUM\n     | LICENSE_PLATE_TYPE\n     | OWNER_IS_CUST_FLAG\n     | SRC_SYS_VEH_ID\n     | VEH_COLOR\n     | VEH_ID_NUM\n     | VEH_MAKE\n     | VEH_MODEL\n     | VEH_MODEL_YR\n     | VEH_OWNER_ID\n     | VEH_OWNER_NAME\n     | VEH_TYPE\n     | FLAG_DIM_ITEM_PT_DET\n     | PT_AGE\n     | PT_GNDR\n     | FLAG_DIM_ITEM_TAXABLE_PROP_DET\n     | APPRAISAL_DISTR_ACCT_NUM\n     | CAN\n     | CC_JURIS_CODE\n     | CC_JURIS_DESCR\n     | CITY_RFPD_JURIS_CODE\n     | CITY_RFPD_JURIS_DESCR\n     | CONFI_ACCT_FLAG\n     | MUNIC_UTIL_DISTR_CODE\n     | MUNIC_UTIL_DISTR_DESCR\n     | NUM_OF_ACRES\n     | OWNERSHIP_EFF_DTE\n     | PROP_CLASS_CODE\n     | PROP_CLASS_DESCR\n     | REND_PENALTY_JURIS_CODE\n     | REND_PENALTY_JURIS_DESCR\n     | SCHOOL_JURIS_CODE\n     | SCHOOL_JURIS_DESCR\n     | SUBSTANTIAL_ERR_PENALTY\n     | TAX_DEFERRAL_END_DTE\n     | TAX_DEFERRAL_START_DTE\n     | TAX_ROLL_CODE\n     | TAX_ROLL_DESCR\n     | TAXABLE_PROP_LGL_DESCR_1\n     | TAXABLE_PROP_LGL_DESCR_2\n     | TAXABLE_PROP_LGL_DESCR_3\n     | TAXABLE_PROP_LGL_DESCR_4\n     | TAXABLE_PROP_LGL_DESCR_5\n     | TAXABLE_PROP_ROLL_TYPE\n     | FLAG_DIM_ITEM_WTR_ACCT_DET\n     | CURR_WTR_ACCT_FLAG\n     | DELINQ_DTE\n     | LAST_CUST_CONN_DTE\n     | LAST_CUST_CUTOFF_DTE\n     | LAST_CUST_DISCONN_DTE\n     | LAST_METER_INSPECT_DTE\n     | OWNER_RENTER\n     | SEN_CITIZEN_FLAG\n     | VAC_FLAG\n     | WTR_ACCT_NUM_OF_UNITS\n     | WTR_ACCT_ORIG_USE_TYPE\n     | WTR_ACCT_PROP_USE_TYPE\n     | WTR_METER_NUM\n     | FLAG_DIM_RECEIVABLE_AD_VAL_RECEIVABLE_DET\n     | ``A#3307_ATTY_FEE_DTE``\n     | ``A#3308_ATTY_FEE_DTE``\n     | ``A#3348_ATTY_FEE_DTE``\n     | AD_VAL_ACCT_LVL_ID\n     | AD_VAL_DISABLED_FLAG\n     | AD_VAL_EFF_DTE_OF_OWNERSHIP\n     | AD_VAL_HOMESTEAD_FLAG\n     | AD_VAL_OVER_66_FLAG\n     | AD_VAL_TAX_DEFERRAL_END_DTE\n     | AD_VAL_TAX_DEFERRAL_START_DTE\n     | AD_VAL_VET_FLAG\n     | COLL_LAWSUIT_NUM\n     | COLL_LGL_COND\n     | HCAD_ACCT_STAT\n     | QTRLY_PAY_FLAG\n     | FLAG_DIM_RECEIVABLE_BOOT_TOW_DET\n     | RECEIVABLE_HAS_LTR_FLAG\n     | RECEIVABLE_HAS_NOTE_FLAG\n     | RECEIVABLE_HAS_PEND_LTR_FLAG\n     | RESOLVE_DESCR\n     | RESOLVE_DTE\n     | RESOLVE_RSN\n     | RESOLVED_BY\n     | FLAG_DIM_RECEIVABLE_EMS_RECEIVABLE_DET\n     | ACTV_CARRIER\n     | ACTV_CARRIER_FIN_CLASS\n     | ACTV_CARRIER_FIN_GRP\n     | BILLING_HOLD_FLAG\n     | SIG_FLAG\n     | FLAG_DIM_RECEIVABLE_FIRE_ALM_CIT_DET\n     | VOID_CODE\n     | VOID_DESCR\n     | WORK_STAT\n     | FLAG_DIM_RECEIVABLE_PRKG_CONTRA_DET\n     | ESC_CAND_FLAG\n     | ON_ADMIN_HOLD_FLAG\n     | UNDER_APPEAL_FLAG\n     | VOID_FLAG\n     | WRITE_OFF_FLAG\n     | Nil_\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"133131ac-9ee5-47b2-8047-351746ee9e10"}, "snpName": "FieldDecls", "snpContent": "let fieldDecl = [|\n    (\"3307_ATTY_FEE_DTE\", \"date\", 0)\n    (\"3308_ATTY_FEE_DTE\", \"date\", 0)\n    (\"3348_ATTY_FEE_DTE\", \"date\", 0)\n    (\"ACCT_GRP_DESCR\", \"varchar(30)\", 0)\n    (\"ACCT_GRP_ID\", \"varchar(4)\", 0)\n    (\"ACTV_CARRIER\", \"varchar(120)\", 0)\n    (\"ACTV_CARRIER_FIN_CLASS\", \"varchar(40)\", 0)\n    (\"ACTV_CARRIER_FIN_GRP\", \"varchar(40)\", 0)\n    (\"AD_VAL_ACCT_LVL_ID\", \"varchar(4)\", 1)\n    (\"AD_VAL_DISABLED_FLAG\", \"varchar(1)\", 0)\n    (\"AD_VAL_EFF_DTE_OF_OWNERSHIP\", \"date\", 0)\n    (\"AD_VAL_HOMESTEAD_FLAG\", \"varchar(1)\", 0)\n    (\"AD_VAL_OVER_66_FLAG\", \"varchar(1)\", 0)\n    (\"AD_VAL_TAX_DEFERRAL_END_DTE\", \"date\", 0)\n    (\"AD_VAL_TAX_DEFERRAL_START_DTE\", \"date\", 0)\n    (\"AD_VAL_VET_FLAG\", \"varchar(1)\", 0)\n    (\"ADDR_ID\", \"varchar(10)\", 0)\n    (\"ADJ_FLAG\", \"varchar(1)\", 0)\n    (\"ALLOC_TRANS_FLAG\", \"varchar(1)\", 0)\n    (\"ALLOWABLE_NO_CHRG_INCDTS\", \"int\", 0)\n    (\"ALM_INSTL_CMPNY\", \"varchar(50)\", 0)\n    (\"ALM_INSTL_DTE\", \"date\", 0)\n    (\"ALM_MNT_CMPNY\", \"varchar(50)\", 0)\n    (\"ALM_REG_KEY\", \"varchar(20)\", 0)\n    (\"ALM_TYPE\", \"varchar(2)\", 0)\n    (\"ALT_PAYEE_NUM\", \"varchar(10)\", 0)\n    (\"AM_PM\", \"varchar(2)\", 0)\n    (\"APPLICTN_RECV_DTE\", \"date\", 0)\n    (\"APPRAISAL_DISTR_ACCT_NUM\", \"varchar(16)\", 0)\n    (\"AUTH_GRP_ID\", \"varchar(10)\", 0)\n    (\"BAL_SHT_ACCT_FLAG\", \"varchar(1)\", 0)\n    (\"BAL_UPD_IND\", \"varchar(1)\", 0)\n    (\"BILLED_FLAG\", \"varchar(1)\", 0)\n    (\"BILLING_HOLD_FLAG\", \"varchar(1)\", 0)\n    (\"BLANK_BUD_PER_ALLOWED\", \"varchar(1)\", 0)\n    (\"BLK_NUM\", \"varchar(8)\", 0)\n    (\"BOOT_SERIAL_NUM\", \"varchar(32)\", 0)\n    (\"BUS_AREA_DESCR\", \"varchar(30)\", 0)\n    (\"BUS_AREA_FULL_NAME\", \"varchar(120)\", 0)\n    (\"BUS_AREA_ID\", \"varchar(4)\", 0)\n    (\"BUS_AREA_KEY\", \"int\", 0)\n    (\"BUS_CONT_PERSON_NAME\", \"varchar(40)\", 0)\n    (\"CAL_DAY_OF_MTH_NUM\", \"int\", 0)\n    (\"CAL_MTH\", \"varchar(15)\", 0)\n    (\"CAL_MTH_NUM\", \"int\", 0)\n    (\"CAL_PER\", \"varchar(20)\", 1)\n    (\"CAL_QTR\", \"varchar(15)\", 1)\n    (\"CAL_QTR_NUM\", \"int\", 0)\n    (\"CAL_WK_ENDING_SAT\", \"varchar(15)\", 0)\n    (\"CAL_YR\", \"int\", 0)\n    (\"CAN\", \"varchar(16)\", 1)\n    (\"CARRIER_FIN_CLASS\", \"varchar(40)\", 0)\n    (\"CARRIER_FIN_GRP\", \"varchar(40)\", 0)\n    (\"CARRIER_GRP\", \"varchar(40)\", 0)\n    (\"CARRIER_KEY\", \"int\", 0)\n    (\"CARRIER_NAME\", \"varchar(120)\", 0)\n    (\"CARRIER_PROCEDURE_BILL_CODE\", \"varchar(40)\", 0)\n    (\"CARRIER_PROCEDURE_CODE\", \"varchar(40)\", 0)\n    (\"CARRIER_PROCEDURE_DESCR\", \"varchar(120)\", 0)\n    (\"CARRIER_PROCEDURE_KEY\", \"int\", 0)\n    (\"CARRIER_PROCEDURE_SRC\", \"varchar(120)\", 0)\n    (\"CARRIER_PROCEDURE_TYPE\", \"varchar(40)\", 0)\n    (\"CARRIER_SRC\", \"varchar(120)\", 0)\n    (\"CC_JURIS_CODE\", \"varchar(13)\", 1)\n    (\"CC_JURIS_DESCR\", \"varchar(50)\", 0)\n    (\"CENTRAL_POSTING_BLK\", \"varchar(1)\", 0)\n    (\"CENTRALLY_IMPOSED_PURCH_BLK\", \"varchar(1)\", 0)\n    (\"CHGED_BY\", \"varchar(12)\", 0)\n    (\"CHGED_ON\", \"date\", 0)\n    (\"CHGED_ON_DTE\", \"date\", 0)\n    (\"CHRT_OF_ACCT_FULL_NAME\", \"varchar(120)\", 0)\n    (\"CHRT_OF_ACCT_ID\", \"varchar(4)\", 0)\n    (\"CHRT_OF_ACCT_NAME\", \"varchar(50)\", 0)\n    (\"CITY\", \"varchar(40)\", 0)\n    (\"CITY_BUS_DAY\", \"varchar(40)\", 1)\n    (\"CITY_HOL_FLAG\", \"varchar(1)\", 0)\n    (\"CITY_RFPD_JURIS_CODE\", \"varchar(13)\", 1)\n    (\"CITY_RFPD_JURIS_DESCR\", \"varchar(50)\", 0)\n    (\"CMPNY_CODE_ID\", \"varchar(4)\", 0)\n    (\"CMPNY_CODE_NAME\", \"varchar(25)\", 0)\n    (\"COH\", \"varchar(20)\", 1)\n    (\"COH_EMP_NUM\", \"varchar(8)\", 0)\n    (\"COH_ORG_KEY\", \"int\", 0)\n    (\"COLL_BID_NUM\", \"varchar(10)\", 0)\n    (\"COLL_LAWSUIT_NUM\", \"varchar(7)\", 0)\n    (\"COLL_LGL_COND\", \"varchar(100)\", 0)\n    (\"COLL_PERSON_ID\", \"varchar(20)\", 0)\n    (\"COLL_PERSON_KEY\", \"int\", 0)\n    (\"COLL_PERSON_NAME\", \"varchar(120)\", 0)\n    (\"COLL_PERSON_TYPE\", \"varchar(40)\", 0)\n    (\"COLL_VEND_CONTR_KEY\", \"int\", 0)\n    (\"CONFI_ACCT_FLAG\", \"varchar(2)\", 1)\n    (\"CONFI_CUST_FLAG\", \"varchar(1)\", 0)\n    (\"CONTR_DESCR\", \"varchar(1000)\", 1)\n    (\"CONTR_ID\", \"varchar(10)\", 0)\n    (\"CONTR_KEY\", \"int\", 0)\n    (\"CONTR_LIFE_PRIOD\", \"int\", 0)\n    (\"CONTR_PER_KEY\", \"int\", 0)\n    (\"CONTR_REV_STREAM\", \"varchar(50)\", 1)\n    (\"CONTR_YR\", \"varchar(15)\", 0)\n    (\"CONTR_YR_PER\", \"varchar(15)\", 0)\n    (\"CR_INFO_ID\", \"varchar(11)\", 0)\n    (\"CREATE_DTE\", \"date\", 0)\n    (\"CREATED_BY\", \"varchar(12)\", 0)\n    (\"CTRL_AREA_DESCR\", \"varchar(20)\", 0)\n    (\"CTRL_AREA_ID\", \"varchar(4)\", 0)\n    (\"CTRY_ID\", \"varchar(3)\", 0)\n    (\"CTRY_NAME\", \"varchar(15)\", 0)\n    (\"CURR_ASSIGNED_VEND\", \"varchar(120)\", 1)\n    (\"CURR_FIRE_ALM_PERMIT_FLAG\", \"varchar(1)\", 0)\n    (\"CURR_VERS_FLAG\", \"varchar(1)\", 0)\n    (\"CURR_WTR_ACCT_FLAG\", \"varchar(1)\", 0)\n    (\"CUST_ADDR_LINE_1\", \"varchar(200)\", 0)\n    (\"CUST_ADDR_LINE_2\", \"varchar(200)\", 0)\n    (\"CUST_ADDR_LINE_3\", \"varchar(200)\", 0)\n    (\"CUST_APT_LOT\", \"varchar(20)\", 0)\n    (\"CUST_CITY\", \"varchar(40)\", 1)\n    (\"CUST_CNTY\", \"varchar(20)\", 0)\n    (\"CUST_CTRY\", \"varchar(32)\", 1)\n    (\"CUST_EMAIL_ADDR\", \"varchar(100)\", 0)\n    (\"CUST_FAX_NUM\", \"varchar(15)\", 0)\n    (\"CUST_GIS_CITY\", \"varchar(20)\", 0)\n    (\"CUST_GIS_CMPLT_MATCH_ADDR\", \"varchar(200)\", 1)\n    (\"CUST_GIS_LAT\", \"varchar(38)\", 1)\n    (\"CUST_GIS_LOCATR_NAME\", \"varchar(40)\", 0)\n    (\"CUST_GIS_LONG\", \"varchar(38)\", 1)\n    (\"CUST_GIS_MATCH_SCORE\", \"varchar(10)\", 1)\n    (\"CUST_GIS_PREFIX\", \"varchar(12)\", 1)\n    (\"CUST_GIS_ST_NAME\", \"varchar(60)\", 1)\n    (\"CUST_GIS_ST_NUM\", \"varchar(12)\", 1)\n    (\"CUST_GIS_ST_PRETYPE\", \"varchar(40)\", 1)\n    (\"CUST_GIS_ST_TYPE\", \"varchar(40)\", 1)\n    (\"CUST_GIS_SUFF\", \"varchar(12)\", 1)\n    (\"CUST_GIS_X\", \"varchar(21)\", 1)\n    (\"CUST_GIS_Y\", \"varchar(17)\", 1)\n    (\"CUST_GIS_ZIP\", \"varchar(5)\", 0)\n    (\"CUST_ID\", \"varchar(120)\", 0)\n    (\"CUST_IN_CITY_FLAG\", \"varchar(1)\", 0)\n    (\"CUST_IS_VEND_FLAG\", \"varchar(1)\", 0)\n    (\"CUST_KEY\", \"int\", 0)\n    (\"CUST_NAME\", \"varchar(120)\", 0)\n    (\"CUST_PAR_ADDR_LINE_1\", \"varchar(200)\", 0)\n    (\"CUST_PAR_ADDR_LINE_2\", \"varchar(200)\", 0)\n    (\"CUST_PAR_ADDR_LINE_3\", \"varchar(200)\", 0)\n    (\"CUST_PAR_APT_LOT\", \"varchar(20)\", 0)\n    (\"CUST_PAR_CITY\", \"varchar(20)\", 0)\n    (\"CUST_PAR_CNTY\", \"varchar(20)\", 0)\n    (\"CUST_PAR_CTRY\", \"varchar(20)\", 0)\n    (\"CUST_PAR_GIS_CITY\", \"varchar(20)\", 0)\n    (\"CUST_PAR_GIS_LOCATR_NAME\", \"varchar(40)\", 0)\n    (\"CUST_PAR_GIS_MATCH_SCORE\", \"varchar(3)\", 1)\n    (\"CUST_PAR_GIS_PREFIX\", \"varchar(2)\", 0)\n    (\"CUST_PAR_GIS_ST_NAME\", \"varchar(35)\", 0)\n    (\"CUST_PAR_GIS_ST_NUM\", \"varchar(7)\", 0)\n    (\"CUST_PAR_GIS_ST_PRETYPE\", \"varchar(15)\", 0)\n    (\"CUST_PAR_GIS_ST_TYPE\", \"varchar(4)\", 0)\n    (\"CUST_PAR_GIS_SUFF\", \"varchar(2)\", 0)\n    (\"CUST_PAR_GIS_X\", \"varchar(17)\", 1)\n    (\"CUST_PAR_GIS_Y\", \"varchar(17)\", 1)\n    (\"CUST_PAR_GIS_ZIP\", \"varchar(5)\", 0)\n    (\"CUST_PAR_ID\", \"varchar(40)\", 0)\n    (\"CUST_PAR_IN_CITY_FLAG\", \"varchar(1)\", 0)\n    (\"CUST_PAR_KEY\", \"int\", 0)\n    (\"CUST_PAR_NAME\", \"varchar(40)\", 0)\n    (\"CUST_PAR_PREFIX\", \"varchar(2)\", 1)\n    (\"CUST_PAR_SERV_LVL\", \"varchar(40)\", 0)\n    (\"CUST_PAR_ST\", \"varchar(100)\", 0)\n    (\"CUST_PAR_ST_DIR\", \"varchar(4)\", 0)\n    (\"CUST_PAR_ST_NAME\", \"varchar(35)\", 0)\n    (\"CUST_PAR_ST_NUM\", \"varchar(7)\", 0)\n    (\"CUST_PAR_ST_PRETYPE\", \"varchar(15)\", 0)\n    (\"CUST_PAR_ST_TYPE\", \"varchar(4)\", 0)\n    (\"CUST_PAR_STATE\", \"varchar(25)\", 0)\n    (\"CUST_PAR_SUFF\", \"varchar(2)\", 0)\n    (\"CUST_PAR_ZIP_CODE\", \"varchar(6)\", 0)\n    (\"CUST_PAR_ZIP_PLUS_4\", \"varchar(11)\", 0)\n    (\"CUST_PHN_NUM_1\", \"varchar(20)\", 1)\n    (\"CUST_PHN_NUM_2\", \"varchar(20)\", 1)\n    (\"CUST_PHN_NUM_3\", \"varchar(20)\", 1)\n    (\"CUST_PREFIX\", \"varchar(2)\", 1)\n    (\"CUST_SERV_LVL\", \"varchar(40)\", 0)\n    (\"CUST_ST\", \"varchar(100)\", 0)\n    (\"CUST_ST_DIR\", \"varchar(4)\", 0)\n    (\"CUST_ST_NAME\", \"varchar(35)\", 0)\n    (\"CUST_ST_NUM\", \"varchar(7)\", 0)\n    (\"CUST_ST_PRETYPE\", \"varchar(15)\", 0)\n    (\"CUST_ST_TYPE\", \"varchar(4)\", 0)\n    (\"CUST_STATE\", \"varchar(25)\", 0)\n    (\"CUST_SUFF\", \"varchar(2)\", 0)\n    (\"CUST_TYPE\", \"varchar(13)\", 1)\n    (\"CUST_ZIP_CODE\", \"varchar(32)\", 1)\n    (\"CUST_ZIP_PLUS_4\", \"varchar(13)\", 1)\n    (\"DAY_OF_WK\", \"varchar(9)\", 0)\n    (\"DAY_OF_WK_NUM\", \"int\", 0)\n    (\"DEC_CUST_FLAG\", \"varchar(1)\", 0)\n    (\"DEL_FLAG\", \"varchar(1)\", 0)\n    (\"DELINQ_DTE\", \"date\", 0)\n    (\"DELIV_POLICY_FLAG\", \"varchar(1)\", 0)\n    (\"DEPT_LONG_NAME\", \"varchar(120)\", 1)\n    (\"DEPT_NAME\", \"varchar(30)\", 1)\n    (\"DERIVED_NODE_FLAG\", \"varchar(1)\", 0)\n    (\"DERIVED_PAR_CUST_FLAG\", \"varchar(1)\", 0)\n    (\"DERIVED_TRANS_FLAG\", \"varchar(1)\", 0)\n    (\"DEST_LOC\", \"varchar(120)\", 0)\n    (\"DET_TRANS_CODE\", \"varchar(20)\", 0)\n    (\"DET_TRANS_DESCR\", \"varchar(50)\", 0)\n    (\"DIGITECH_ID\", \"varchar(20)\", 1)\n    (\"DIGITECH_TRANS_TYPE\", \"varchar(40)\", 1)\n    (\"DIGITECH_TRANS_TYPE_DET\", \"varchar(120)\", 1)\n    (\"DISASTER_FLAG\", \"varchar(1)\", 0)\n    (\"DISPATCH_NUM\", \"varchar(40)\", 0)\n    (\"DISTR\", \"varchar(40)\", 0)\n    (\"DIV_LONG_NAME\", \"varchar(120)\", 1)\n    (\"DIV_NAME\", \"varchar(30)\", 1)\n    (\"DL_ISSUE_STATE\", \"varchar(20)\", 0)\n    (\"DL_NUM\", \"varchar(20)\", 0)\n    (\"DST_EX_MIN_FLAG\", \"varchar(1)\", 0)\n    (\"DTE\", \"date\", 0)\n    (\"DTE_FISC_PER_KEY\", \"int\", 0)\n    (\"DTE_KEY\", \"int\", 0)\n    (\"EMP_KEY\", \"int\", 0)\n    (\"EMP_NAME\", \"varchar(120)\", 0)\n    (\"EMP_TYPE\", \"varchar(40)\", 0)\n    (\"EMS_INCDT\", \"varchar(40)\", 0)\n    (\"EMS_INCDT_CAT\", \"varchar(120)\", 0)\n    (\"ENTRY_DTE\", \"date\", 0)\n    (\"ESC_CAND_FLAG\", \"varchar(1)\", 0)\n    (\"ETL_PROC_USED\", \"varchar(50)\", 0)\n    (\"EXCH_RATE_LOCAL\", \"numeric\", 0)\n    (\"EXCL_TYPE\", \"varchar(50)\", 0)\n    (\"EXP_DTE\", \"date\", 0)\n    (\"EXTRACT_DTE_TIME\", \"datetime\", 0)\n    (\"EXTRACT_PROC_USED\", \"varchar(50)\", 0)\n    (\"FAX\", \"varchar(40)\", 0)\n    (\"FED_FISC_PER\", \"varchar(15)\", 0)\n    (\"FED_FISC_PER_NUM\", \"int\", 0)\n    (\"FED_FISC_QTR\", \"varchar(15)\", 1)\n    (\"FED_FISC_QTR_NUM\", \"int\", 0)\n    (\"FED_FISC_YR\", \"varchar(15)\", 1)\n    (\"FED_TAX_ID\", \"varchar(40)\", 0)\n    (\"FG_FIN_TRANS_KEY\", \"int\", 0)\n    (\"FIN_MGMT_AREA\", \"varchar(4)\", 0)\n    (\"FIN_MGMT_AREA_DESCR\", \"varchar(25)\", 0)\n    (\"FIN_TRANS_TYPE_KEY\", \"int\", 0)\n    (\"FIRE_ALM_AGING_RST_FLAG\", \"varchar(1)\", 0)\n    (\"FIRE_ALM_PERMIT_ACTV_FLAG\", \"varchar(1)\", 0)\n    (\"FIRE_ALM_PERMIT_NUM\", \"varchar(20)\", 0)\n    (\"FIRE_ALM_PURPOSE\", \"varchar(50)\", 0)\n    (\"FIRE_ORIG_ISSUE_DTE\", \"date\", 0)\n    (\"FISC_PER\", \"varchar(15)\", 0)\n    (\"FISC_PER_ANNUAL_SORT_ORD\", \"int\", 0)\n    (\"FISC_PER_NUM\", \"int\", 0)\n    (\"FISC_QTR\", \"varchar(15)\", 0)\n    (\"FISC_QTR_NUM\", \"int\", 0)\n    (\"FISC_YR\", \"int\", 0)\n    (\"FISC_YR_VARIANT\", \"varchar(2)\", 0)\n    (\"FM_AUTH_GRP\", \"varchar(10)\", 0)\n    (\"FM_FINUSE\", \"varchar(16)\", 0)\n    (\"FM_SPONSER\", \"varchar(10)\", 0)\n    (\"FUNC_AREA_DESCR\", \"varchar(30)\", 0)\n    (\"FUNC_AREA_FULL_NAME\", \"varchar(120)\", 0)\n    (\"FUNC_AREA_ID\", \"varchar(16)\", 0)\n    (\"FUNC_AREA_KEY\", \"int\", 0)\n    (\"FUNC_THAT_WILL_BE_BLKED\", \"varchar(2)\", 1)\n    (\"FUND_BUD_PROF\", \"varchar(6)\", 0)\n    (\"FUND_CNTR_DESCR\", \"varchar(40)\", 0)\n    (\"FUND_CNTR_FULL_NAME\", \"varchar(120)\", 0)\n    (\"FUND_CNTR_ID\", \"varchar(16)\", 0)\n    (\"FUND_CNTR_KEY\", \"int\", 0)\n    (\"FUND_CNTR_NAME\", \"varchar(20)\", 0)\n    (\"FUND_DESCR\", \"varchar(40)\", 0)\n    (\"FUND_ID\", \"varchar(10)\", 0)\n    (\"FUND_KEY\", \"int\", 0)\n    (\"FUND_NAME\", \"varchar(20)\", 0)\n    (\"FUND_SUBSTR1\", \"varchar(10)\", 0)\n    (\"FUND_SUBSTR2\", \"varchar(10)\", 0)\n    (\"FUND_TYPE_DESCR\", \"varchar(35)\", 0)\n    (\"FUND_TYPE_ID\", \"varchar(6)\", 0)\n    (\"GL_ACCT_FULL_NAME\", \"varchar(120)\", 0)\n    (\"GL_ACCT_GRP\", \"varchar(4)\", 0)\n    (\"GL_ACCT_ID\", \"varchar(30)\", 0)\n    (\"GL_ACCT_KEY\", \"int\", 0)\n    (\"GL_ACCT_MSTR_DESCR\", \"varchar(64)\", 0)\n    (\"GL_COMBO_KEY\", \"int\", 0)\n    (\"GRP_ACCT_NUM\", \"varchar(10)\", 0)\n    (\"HCAD_ACCT_STAT\", \"varchar(100)\", 0)\n    (\"HCTO_AD_VAL_ID\", \"varchar(22)\", 1)\n    (\"HCTO_DET_TRANS_DESCR\", \"varchar(50)\", 1)\n    (\"HCTO_FISC_PER\", \"varchar(15)\", 0)\n    (\"HCTO_FISC_PER_NUM\", \"int\", 0)\n    (\"HCTO_FISC_QTR\", \"varchar(15)\", 1)\n    (\"HCTO_FISC_QTR_NUM\", \"int\", 0)\n    (\"HCTO_FISC_YR\", \"varchar(15)\", 1)\n    (\"HH\", \"varchar(2)\", 0)\n    (\"HIER_ID\", \"varchar(30)\", 0)\n    (\"HOL_DESCR\", \"varchar(40)\", 1)\n    (\"HOUSE_NUM\", \"varchar(10)\", 0)\n    (\"INCDT_ADDR_LINE_1\", \"varchar(200)\", 0)\n    (\"INCDT_ADDR_LINE_2\", \"varchar(200)\", 0)\n    (\"INCDT_ADDR_LINE_3\", \"varchar(200)\", 0)\n    (\"INCDT_APT_LOT\", \"varchar(20)\", 0)\n    (\"INCDT_CAT\", \"varchar(40)\", 0)\n    (\"INCDT_CITY\", \"varchar(20)\", 0)\n    (\"INCDT_CNTY\", \"varchar(20)\", 0)\n    (\"INCDT_CTRY\", \"varchar(20)\", 0)\n    (\"INCDT_DESCR\", \"varchar(40)\", 0)\n    (\"INCDT_DTE\", \"date\", 0)\n    (\"INCDT_GIS_CITY\", \"varchar(20)\", 0)\n    (\"INCDT_GIS_CMPLT_MATCH_ADDR\", \"varchar(200)\", 1)\n    (\"INCDT_GIS_LAT\", \"varchar(38)\", 1)\n    (\"INCDT_GIS_LOCATR_NAME\", \"varchar(40)\", 0)\n    (\"INCDT_GIS_LONG\", \"varchar(38)\", 1)\n    (\"INCDT_GIS_MATCH_SCORE\", \"varchar(10)\", 1)\n    (\"INCDT_GIS_PREFIX\", \"varchar(12)\", 1)\n    (\"INCDT_GIS_ST_NAME\", \"varchar(60)\", 1)\n    (\"INCDT_GIS_ST_NUM\", \"varchar(12)\", 1)\n    (\"INCDT_GIS_ST_PRETYPE\", \"varchar(40)\", 1)\n    (\"INCDT_GIS_ST_TYPE\", \"varchar(40)\", 1)\n    (\"INCDT_GIS_SUFF\", \"varchar(12)\", 1)\n    (\"INCDT_GIS_X\", \"varchar(21)\", 1)\n    (\"INCDT_GIS_Y\", \"varchar(17)\", 0)\n    (\"INCDT_GIS_ZIP\", \"varchar(5)\", 0)\n    (\"INCDT_IN_CITY_FLAG\", \"varchar(1)\", 0)\n    (\"INCDT_KEY\", \"int\", 0)\n    (\"INCDT_PREFIX\", \"varchar(2)\", 0)\n    (\"INCDT_SEQ_NUM\", \"varchar(10)\", 0)\n    (\"INCDT_SERV_LVL\", \"varchar(120)\", 0)\n    (\"INCDT_ST\", \"varchar(100)\", 0)\n    (\"INCDT_ST_DIR\", \"varchar(4)\", 0)\n    (\"INCDT_ST_NAME\", \"varchar(35)\", 0)\n    (\"INCDT_ST_NUM\", \"varchar(7)\", 0)\n    (\"INCDT_ST_PRETYPE\", \"varchar(15)\", 0)\n    (\"INCDT_ST_TYPE\", \"varchar(4)\", 0)\n    (\"INCDT_STATE\", \"varchar(25)\", 0)\n    (\"INCDT_SUFF\", \"varchar(2)\", 0)\n    (\"INCDT_TIME\", \"varchar(8)\", 0)\n    (\"INCDT_TYPE\", \"varchar(40)\", 0)\n    (\"INCDT_ZIP_CODE\", \"varchar(6)\", 0)\n    (\"INCDT_ZIP_PLUS_4\", \"varchar(11)\", 0)\n    (\"INDY_DESCR\", \"varchar(20)\", 0)\n    (\"INDY_ID\", \"varchar(4)\", 0)\n    (\"INT_EXT_EMP_FLAG\", \"varchar(1)\", 0)\n    (\"INTER_CMPNY_TERM02_NAME\", \"varchar(28)\", 0)\n    (\"INTRA_FUND_TRANS_AMT\", \"money\", 1)\n    (\"INTRA_FUND_TRANS_FLAG\", \"varchar(1)\", 0)\n    (\"INV_NUM\", \"varchar(40)\", 0)\n    (\"INVALID INPUT\", \"nvarchar(100)\", 1)\n    (\"INVALID INPUT ERROR DESCRIPTION\", \"nvarchar(1000)\", 1)\n    (\"ITEM_ADDR_LINE_1\", \"varchar(200)\", 0)\n    (\"ITEM_ADDR_LINE_2\", \"varchar(200)\", 0)\n    (\"ITEM_ADDR_LINE_3\", \"varchar(200)\", 0)\n    (\"ITEM_APT_LOT\", \"varchar(20)\", 0)\n    (\"ITEM_CITY\", \"varchar(20)\", 0)\n    (\"ITEM_CNTY\", \"varchar(20)\", 0)\n    (\"ITEM_CTRY\", \"varchar(20)\", 0)\n    (\"ITEM_DESCR\", \"varchar(255)\", 1)\n    (\"ITEM_EXMPT_FLAG\", \"varchar(1)\", 0)\n    (\"ITEM_GIS_CITY\", \"varchar(20)\", 0)\n    (\"ITEM_GIS_CMPLT_MATCH_ADDR\", \"varchar(200)\", 1)\n    (\"ITEM_GIS_LAT\", \"varchar(38)\", 1)\n    (\"ITEM_GIS_LOCATR_NAME\", \"varchar(40)\", 0)\n    (\"ITEM_GIS_LONG\", \"varchar(38)\", 1)\n    (\"ITEM_GIS_MATCH_SCORE\", \"varchar(10)\", 1)\n    (\"ITEM_GIS_PREFIX\", \"varchar(12)\", 1)\n    (\"ITEM_GIS_ST_NAME\", \"varchar(60)\", 1)\n    (\"ITEM_GIS_ST_NUM\", \"varchar(12)\", 1)\n    (\"ITEM_GIS_ST_PRETYPE\", \"varchar(40)\", 1)\n    (\"ITEM_GIS_ST_TYPE\", \"varchar(40)\", 1)\n    (\"ITEM_GIS_SUFF\", \"varchar(12)\", 1)\n    (\"ITEM_GIS_X\", \"varchar(21)\", 1)\n    (\"ITEM_GIS_Y\", \"varchar(17)\", 0)\n    (\"ITEM_GIS_ZIP\", \"varchar(5)\", 0)\n    (\"ITEM_IN_CITY_FLAG\", \"varchar(1)\", 0)\n    (\"ITEM_KEY\", \"int\", 0)\n    (\"ITEM_PREFIX\", \"varchar(2)\", 0)\n    (\"ITEM_SERV_LVL\", \"varchar(40)\", 0)\n    (\"ITEM_ST\", \"varchar(100)\", 0)\n    (\"ITEM_ST_DIR\", \"varchar(4)\", 0)\n    (\"ITEM_ST_NAME\", \"varchar(35)\", 0)\n    (\"ITEM_ST_NUM\", \"varchar(13)\", 1)\n    (\"ITEM_ST_PRETYPE\", \"varchar(15)\", 0)\n    (\"ITEM_ST_TYPE\", \"varchar(4)\", 0)\n    (\"ITEM_STAT\", \"varchar(40)\", 0)\n    (\"ITEM_STAT_CHG_DTE\", \"date\", 0)\n    (\"ITEM_STATE\", \"varchar(25)\", 0)\n    (\"ITEM_SUFF\", \"varchar(2)\", 0)\n    (\"ITEM_TYPE\", \"varchar(40)\", 0)\n    (\"ITEM_ZIP_CODE\", \"varchar(13)\", 1)\n    (\"ITEM_ZIP_PLUS_4\", \"varchar(11)\", 0)\n    (\"JV_CUST_FLAG\", \"varchar(1)\", 0)\n    (\"LANG_ID\", \"varchar(1)\", 0)\n    (\"LAST_CUST_CONN_DTE\", \"date\", 0)\n    (\"LAST_CUST_CUTOFF_DTE\", \"date\", 0)\n    (\"LAST_CUST_DISCONN_DTE\", \"date\", 0)\n    (\"LAST_METER_INSPECT_DTE\", \"date\", 0)\n    (\"LICENSE_PLATE_EXP_MTH\", \"varchar(3)\", 0)\n    (\"LICENSE_PLATE_EXP_YR\", \"varchar(4)\", 0)\n    (\"LICENSE_PLATE_NUM\", \"varchar(10)\", 0)\n    (\"LICENSE_PLATE_TYPE\", \"varchar(20)\", 0)\n    (\"LOAD_DTE\", \"date\", 0)\n    (\"LOAD_DTE_TIME\", \"date\", 0)\n    (\"LOAD_TIME\", \"varchar(8)\", 0)\n    (\"LOGICAL_SYS\", \"varchar(10)\", 0)\n    (\"MAN_TRANS_FLAG\", \"varchar(1)\", 0)\n    (\"MEDICAID_PAYER_CODE\", \"varchar(40)\", 0)\n    (\"MEDICARE_PAYER_CODE\", \"varchar(40)\", 0)\n    (\"MIN\", \"varchar(5)\", 0)\n    (\"MSTR_REC_CNTRL_DEL_BLK\", \"varchar(1)\", 0)\n    (\"MSTR_SUBDIV_ID\", \"varchar(10)\", 0)\n    (\"MSTR_TRANS_TYPE\", \"varchar(20)\", 0)\n    (\"MUNIC_UTIL_DISTR_CODE\", \"varchar(13)\", 1)\n    (\"MUNIC_UTIL_DISTR_DESCR\", \"varchar(50)\", 0)\n    (\"NAICS_DET_CODE\", \"varchar(6)\", 0)\n    (\"NAICS_DET_NAME\", \"varchar(40)\", 0)\n    (\"NAICS_DIV_CODE\", \"varchar(2)\", 0)\n    (\"NAICS_DIV_NAME\", \"varchar(40)\", 0)\n    (\"NAICS_INDY_CODE\", \"varchar(5)\", 0)\n    (\"NAICS_INDY_GRP_CODE\", \"varchar(4)\", 0)\n    (\"NAICS_INDY_GRP_NAME\", \"varchar(40)\", 0)\n    (\"NAICS_INDY_NAME\", \"varchar(40)\", 0)\n    (\"NAICS_MAJ_GRP_CODE\", \"varchar(3)\", 0)\n    (\"NAICS_MAJ_GRP_NAME\", \"varchar(40)\", 0)\n    (\"NODE_FLAG\", \"varchar(1)\", 0)\n    (\"NUM_OF_ACRES\", \"varchar(13)\", 1)\n    (\"ON_ADMIN_HOLD_FLAG\", \"varchar(1)\", 0)\n    (\"ONE_TIME_ACCT_DESCR\", \"varchar(5)\", 0)\n    (\"ORIG_ASSIGNED_VEND\", \"varchar(120)\", 1)\n    (\"ORIG_BILL_NAME\", \"varchar(120)\", 1)\n    (\"ORIG_CUST_KEY\", \"int\", 0)\n    (\"ORIG_INV_NUM\", \"varchar(40)\", 0)\n    (\"ORIGIN_LOC\", \"varchar(120)\", 0)\n    (\"OWNER_IS_CUST_FLAG\", \"varchar(1)\", 0)\n    (\"OWNER_RENTER\", \"varchar(1)\", 0)\n    (\"OWNERSHIP_EFF_DTE\", \"date\", 0)\n    (\"PAY_BLK\", \"varchar(1)\", 0)\n    (\"PAY_METH\", \"varchar(15)\", 0)\n    (\"PAYROLL_PER\", \"int\", 0)\n    (\"PER_END_DTE\", \"date\", 1)\n    (\"PERMIT_EXP_DTE\", \"date\", 0)\n    (\"PERMIT_IS_CURR_AT_TIME_OF_INCDT_FLAG\", \"varchar(1)\", 0)\n    (\"PERMIT_ISSUE_DTE\", \"date\", 0)\n    (\"PERMIT_NAME\", \"varchar(120)\", 0)\n    (\"PERMIT_NUM\", \"int\", 0)\n    (\"PERSON_IN_CHRG\", \"varchar(20)\", 0)\n    (\"PERSON_IN_CHRG_ID\", \"varchar(8)\", 0)\n    (\"PHN\", \"varchar(30)\", 0)\n    (\"PL_STMNT_ACCT_TYPE\", \"varchar(2)\", 0)\n    (\"PLANT_ID\", \"varchar(4)\", 0)\n    (\"PLANT_NAME\", \"varchar(30)\", 0)\n    (\"PMAM_ADJMT_TO\", \"varchar(20)\", 1)\n    (\"PMAM_ADJMT_TYPE\", \"varchar(50)\", 1)\n    (\"PMAM_ID\", \"varchar(20)\", 0)\n    (\"POST_DTE_KEY\", \"int\", 1)\n    (\"PRKG_METER_NUM\", \"varchar(8)\", 0)\n    (\"PRKG_METER_VIO_FLAG\", \"varchar(1)\", 0)\n    (\"PROP_CLASS_CODE\", \"varchar(13)\", 1)\n    (\"PROP_CLASS_DESCR\", \"varchar(50)\", 0)\n    (\"PT_AGE\", \"varchar(3)\", 0)\n    (\"PT_GNDR\", \"varchar(10)\", 0)\n    (\"QTRLY_PAY_FLAG\", \"varchar(1)\", 0)\n    (\"RECEIVABLE_1ST_PAY_DTE\", \"date\", 1)\n    (\"RECEIVABLE_CURR_BILLING_TO_DTE\", \"date\", 1)\n    (\"RECEIVABLE_CURR_DELINQ_DTE\", \"date\", 0)\n    (\"RECEIVABLE_CURR_DUE_DTE\", \"date\", 0)\n    (\"RECEIVABLE_CURR_ISSUE_DTE\", \"date\", 0)\n    (\"RECEIVABLE_CURR_TO_DTE\", \"date\", 1)\n    (\"RECEIVABLE_EVER_TRANS_FLAG\", \"varchar(1)\", 1)\n    (\"RECEIVABLE_FNL_PAY_DTE\", \"date\", 1)\n    (\"RECEIVABLE_HAS_LTR_FLAG\", \"varchar(1)\", 0)\n    (\"RECEIVABLE_HAS_NOTE_FLAG\", \"varchar(1)\", 0)\n    (\"RECEIVABLE_HAS_PEND_LTR_FLAG\", \"varchar(1)\", 0)\n    (\"RECEIVABLE_KEY\", \"int\", 0)\n    (\"RECEIVABLE_LITIGATION_DTE\", \"date\", 1)\n    (\"RECEIVABLE_MSTR_STAT\", \"varchar(40)\", 1)\n    (\"RECEIVABLE_MSTR_STAT_CHG_DTE\", \"date\", 1)\n    (\"RECEIVABLE_ORIG_BILLING_TO_DTE\", \"date\", 1)\n    (\"RECEIVABLE_ORIG_DELINQ_DTE\", \"date\", 1)\n    (\"RECEIVABLE_ORIG_DUE_DTE\", \"date\", 1)\n    (\"RECEIVABLE_ORIG_ISSUE_DTE\", \"date\", 1)\n    (\"RECEIVABLE_ORIG_TO_DTE\", \"date\", 1)\n    (\"RECEIVABLE_SETTLEMENT_DTE\", \"date\", 1)\n    (\"RECEIVABLE_STAT\", \"varchar(40)\", 0)\n    (\"RECEIVABLE_STAT_CHG_DTE\", \"date\", 0)\n    (\"RECEIVABLE_VERS_BILLING_TO_DTE\", \"date\", 0)\n    (\"RECEIVABLE_VERS_DELINQ_DTE\", \"date\", 0)\n    (\"RECEIVABLE_VERS_DUE_DTE\", \"date\", 0)\n    (\"RECEIVABLE_VERS_ISSUE_DTE\", \"date\", 0)\n    (\"RECEIVABLE_VERS_TO_DTE\", \"date\", 0)\n    (\"REG_HOLDER_FLAG\", \"varchar(1)\", 0)\n    (\"REGION_ID\", \"varchar(3)\", 0)\n    (\"REGION_NAME\", \"varchar(20)\", 0)\n    (\"REINSTATEMENT_DTE\", \"date\", 1)\n    (\"RELE_REAL_COVER_ELIG\", \"varchar(1)\", 0)\n    (\"REND_PENALTY_JURIS_CODE\", \"varchar(13)\", 1)\n    (\"REND_PENALTY_JURIS_DESCR\", \"varchar(50)\", 0)\n    (\"RESOLVE_DESCR\", \"varchar(128)\", 0)\n    (\"RESOLVE_DTE\", \"date\", 1)\n    (\"RESOLVE_RSN\", \"varchar(40)\", 1)\n    (\"RESOLVED_BY\", \"varchar(120)\", 0)\n    (\"REVERSAL_DTE\", \"date\", 0)\n    (\"RM_EMP_MSTR_KEY\", \"varchar(16)\", 1)\n    (\"RM_LOAD_DTE\", \"date\", 0)\n    (\"RM_LOAD_TIME\", \"varchar(8)\", 0)\n    (\"ROW_CHG_RSN\", \"varchar(100)\", 1)\n    (\"RSN_INCDT_NOT_BILLED\", \"varchar(40)\", 0)\n    (\"SAP_BUS_ID\", \"varchar(20)\", 0)\n    (\"SCHOOL_JURIS_CODE\", \"varchar(22)\", 1)\n    (\"SCHOOL_JURIS_DESCR\", \"varchar(50)\", 0)\n    (\"SCND_TEL_NUM\", \"varchar(16)\", 0)\n    (\"SEN_CITIZEN_FLAG\", \"varchar(1)\", 0)\n    (\"SIC_CODE\", \"varchar(8)\", 0)\n    (\"SIC_DIV_CODE\", \"varchar(20)\", 0)\n    (\"SIC_DIV_NAME\", \"varchar(40)\", 0)\n    (\"SIC_INDY_GRP_CODE\", \"varchar(3)\", 0)\n    (\"SIC_INDY_GRP_NAME\", \"varchar(40)\", 0)\n    (\"SIC_MAJ_GRP_CODE\", \"varchar(2)\", 0)\n    (\"SIC_MAJ_GRP_NAME\", \"varchar(40)\", 0)\n    (\"SIC_NAME\", \"varchar(40)\", 0)\n    (\"SIG_FLAG\", \"varchar(1)\", 0)\n    (\"SMART_CM_ID\", \"varchar(20)\", 0)\n    (\"SMARTCM_IS_ADJMT\", \"varchar(1)\", 1)\n    (\"SMARTCM_IS_FEE\", \"varchar(1)\", 1)\n    (\"SMARTCM_IS_PAY\", \"varchar(1)\", 1)\n    (\"SMARTCM_OTHER_CRITERIA\", \"varchar(50)\", 1)\n    (\"SRC_CARRIER_KEY\", \"varchar(40)\", 0)\n    (\"SRC_CARRIER_PROCEDURE_KEY\", \"varchar(40)\", 0)\n    (\"SRC_SYS\", \"varchar(40)\", 0)\n    (\"SRC_SYS_ID\", \"varchar(120)\", 0)\n    (\"SRC_SYS_MOD_DTE\", \"date\", 1)\n    (\"SRC_SYS_TRANS_ID\", \"varchar(40)\", 1)\n    (\"SRC_SYS_VEH_ID\", \"varchar(32)\", 1)\n    (\"ST\", \"varchar(60)\", 0)\n    (\"STATE_CORP_CHTR_ID\", \"varchar(20)\", 0)\n    (\"STATE_FISC_PER\", \"varchar(15)\", 0)\n    (\"STATE_FISC_PER_NUM\", \"int\", 0)\n    (\"STATE_FISC_QTR\", \"varchar(15)\", 1)\n    (\"STATE_FISC_QTR_NUM\", \"int\", 0)\n    (\"STATE_FISC_YR\", \"varchar(15)\", 1)\n    (\"STATE_SALES_TAX_ID\", \"varchar(20)\", 0)\n    (\"SUBSTANTIAL_ERR_PENALTY\", \"varchar(1)\", 0)\n    (\"SUSPD_PERMIT_DTE\", \"date\", 0)\n    (\"SUSPD_PERMIT_RSN\", \"varchar(50)\", 0)\n    (\"SYS_LOAD_KEY\", \"int\", 0)\n    (\"T2_ID\", \"varchar(20)\", 0)\n    (\"T2_TRANS_MISC_ITEM_CODE\", \"varchar(20)\", 0)\n    (\"T2_TRANS_MISC_ITEM_DESCR\", \"varchar(50)\", 0)\n    (\"T2_TRANS_ORIG_OBJ_TYPE_ID\", \"varchar(10)\", 0)\n    (\"T2_TRANS_PARSED_DESCR\", \"varchar(50)\", 0)\n    (\"T2_TRANS_RSN\", \"varchar(50)\", 0)\n    (\"T2_TRANS_SCENARIO\", \"varchar(50)\", 0)\n    (\"T2_TRANS_TYPE_CODE\", \"varchar(20)\", 0)\n    (\"T2_TRANS_TYPE_DESCR\", \"varchar(50)\", 0)\n    (\"TAX_DEFERRAL_END_DTE\", \"date\", 0)\n    (\"TAX_DEFERRAL_START_DTE\", \"date\", 0)\n    (\"TAX_NUM_1\", \"varchar(16)\", 0)\n    (\"TAX_NUM_2\", \"varchar(11)\", 0)\n    (\"TAX_ROLL_CODE\", \"varchar(13)\", 1)\n    (\"TAX_ROLL_DESCR\", \"varchar(50)\", 0)\n    (\"TAXABLE_PROP_LGL_DESCR_1\", \"varchar(40)\", 0)\n    (\"TAXABLE_PROP_LGL_DESCR_2\", \"varchar(40)\", 0)\n    (\"TAXABLE_PROP_LGL_DESCR_3\", \"varchar(40)\", 0)\n    (\"TAXABLE_PROP_LGL_DESCR_4\", \"varchar(40)\", 0)\n    (\"TAXABLE_PROP_LGL_DESCR_5\", \"varchar(40)\", 0)\n    (\"TAXABLE_PROP_ROLL_TYPE\", \"varchar(50)\", 0)\n    (\"TIME_KEY\", \"int\", 0)\n    (\"TOWING_CMPNY\", \"varchar(40)\", 0)\n    (\"TRADING_PRN_ID\", \"varchar(6)\", 0)\n    (\"TRADING_PRN_NAME\", \"varchar(30)\", 0)\n    (\"TRANS_AMT\", \"money\", 1)\n    (\"TRANS_CNT\", \"int\", 1)\n    (\"TRANS_DTE_KEY\", \"int\", 0)\n    (\"TXP_SERV_LVL\", \"varchar(120)\", 0)\n    (\"TXP_TYPE\", \"varchar(40)\", 0)\n    (\"TYPE_OF_ALM_SITE\", \"varchar(1)\", 0)\n    (\"UNDER_APPEAL_FLAG\", \"varchar(1)\", 0)\n    (\"UNIQ_VEND_NAME\", \"varchar(120)\", 1)\n    (\"UNK_CUST_AT_BILL_FLAG\", \"varchar(1)\", 1)\n    (\"VAC_FLAG\", \"varchar(1)\", 0)\n    (\"VALID_FROM_DTE\", \"date\", 0)\n    (\"VALID_TO_DTE\", \"date\", 0)\n    (\"VEH\", \"varchar(40)\", 0)\n    (\"VEH_COLOR\", \"varchar(40)\", 0)\n    (\"VEH_ID_NUM\", \"varchar(24)\", 0)\n    (\"VEH_MAKE\", \"varchar(40)\", 0)\n    (\"VEH_MODEL\", \"varchar(40)\", 0)\n    (\"VEH_MODEL_YR\", \"varchar(4)\", 0)\n    (\"VEH_OWNER_ID\", \"varchar(32)\", 0)\n    (\"VEH_OWNER_NAME\", \"varchar(120)\", 0)\n    (\"VEH_TYPE\", \"varchar(40)\", 0)\n    (\"VEND_BILLER_FLAG\", \"varchar(1)\", 1)\n    (\"VEND_COLLR_FLAG\", \"varchar(1)\", 1)\n    (\"VEND_CUST_ID\", \"varchar(10)\", 0)\n    (\"VEND_CUST_NAME\", \"varchar(40)\", 0)\n    (\"VEND_FULL_NAME\", \"varchar(120)\", 0)\n    (\"VEND_GRP_KEY\", \"varchar(10)\", 0)\n    (\"VEND_ID\", \"varchar(10)\", 0)\n    (\"VEND_KEY\", \"int\", 0)\n    (\"VEND_NAME\", \"varchar(40)\", 0)\n    (\"VEND_NAME_01\", \"varchar(40)\", 0)\n    (\"VEND_NAME_02\", \"varchar(40)\", 0)\n    (\"VEND_NAME_03\", \"varchar(40)\", 0)\n    (\"VEND_NAME_04\", \"varchar(40)\", 0)\n    (\"VERS_ASSIGNED_VEND\", \"varchar(120)\", 1)\n    (\"VERS_BEG_DTE\", \"date\", 0)\n    (\"VERS_END_DTE\", \"date\", 0)\n    (\"VIO_CODE\", \"varchar(20)\", 0)\n    (\"VOID_CODE\", \"varchar(10)\", 0)\n    (\"VOID_DESCR\", \"varchar(50)\", 0)\n    (\"VOID_FLAG\", \"varchar(1)\", 0)\n    (\"WK_IN_CAL_YR\", \"int\", 0)\n    (\"WKND_FLAG\", \"varchar(1)\", 0)\n    (\"WORK_STAT\", \"varchar(50)\", 0)\n    (\"WRITE_OFF_FLAG\", \"varchar(1)\", 0)\n    (\"WTR_ACCT_NUM_OF_UNITS\", \"int\", 0)\n    (\"WTR_ACCT_ORIG_USE_TYPE\", \"varchar(120)\", 0)\n    (\"WTR_ACCT_PROP_USE_TYPE\", \"varchar(120)\", 0)\n    (\"WTR_METER_NUM\", \"varchar(50)\", 0)\n    (\"ZIP\", \"varchar(10)\", 0) |]", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 12}, {"snpId": {"SnippetId" :"b67af98c-895c-4d9c-bee1-2c43359c6885"}, "snpName": "FieldDefaults", "snpContent": "let fieldDefault = [|\n    (\"LOAD_DTE\"                            , \"GETDATE()\"   )\n    (\"LOAD_TIME\"                           , \"CONVERT(VARCHAR(8),GETDATE(),108)\")\n    (\"VERS_ASSIGNED_VEND\"                  , \"'CoH'\")\n    (\"MEDICARE_PAYER_CODE\"                 , \"'(SYS) UNKNOWN'\")\n    (\"MEDICAID_PAYER_CODE\"                 , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_FIN_GRP\"                     , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_FIN_CLASS\"                   , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_GRP\"                         , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_NAME\"                        , \"'(SYS) UNKNOWN'\")\n    (\"SRC_CARRIER_CODE\"                    , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_PROCEDURE_CODE\"              , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_PROCEDURE_DESCR\"             , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_PROCEDURE_TYPE\"              , \"'(SYS) UNKNOWN'\")\n    (\"CARRIER_PROCEDURE_BILL_CODE\"         , \"'(SYS) UNKNOWN'\")\n    (\"VEH\"                                 , \"'(SYS) UNKNOWN'\")\n    (\"EMS_INCDT_CAT\"                       , \"'(SYS) UNKNOWN'\")\n    (\"ACTV_CARRIER_FIN_GRP\"                , \"'(SYS) UNKNOWN'\")\n    (\"ACTV_CARRIER_FIN_CLASS\"              , \"'(SYS) UNKNOWN'\")\n    (\"ACTV_CARRIER\"                        , \"'(SYS) UNKNOWN'\")\n    (\"NAICS_DET_CODE\"                      , \"'*'\")\n    (\"NAICS_DIV_CODE\"                      , \"'*'\")\n    (\"SIC_MAJ_GRP_CODE\"                    , \"'*'\")\n    (\"DEC_CUST_FLAG\"                       , \"'*'\")\n    (\"CUST_PREFIX\"                         , \"'*'\")\n    (\"CUST_SUFF\"                           , \"'*'\")\n    (\"CUST_GIS_PREFIX\"                     , \"'*'\")\n    (\"CUST_GIS_SUFF\"                       , \"'*'\")\n    (\"ALLOC_TRANS_FLAG\"                    , \"'*'\")\n    (\"SMARTCM_OTHER_CRITERIA\"              , \"'*'\")\n    (\"SMARTCM_IS_FEE\"                      , \"'*'\")\n    (\"SMARTCM_IS_ADJMT\"                    , \"'*'\")\n    (\"SMARTCM_IS_PAY\"                      , \"'*'\")\n    (\"PERMIT_IS_CURR_AT_TIME_OF_INCDT_FLAG\", \"'*'\")\n    (\"PRKG_METER_VIO_FLAG\"                 , \"'*'\")\n    (\"INCDT_PREFIX\"                        , \"'*'\")\n    (\"INCDT_SUFF\"                          , \"'*'\")\n    (\"INCDT_IN_CITY_FLAG\"                  , \"'*'\")\n    (\"INCDT_GIS_PREFIX\"                    , \"'*'\")\n    (\"INCDT_GIS_SUFF\"                      , \"'*'\")\n    (\"ITEM_EXMPT_FLAG\"                     , \"'*'\")\n    (\"ITEM_PREFIX\"                         , \"'*'\")\n    (\"ITEM_SUFF\"                           , \"'*'\")\n    (\"ITEM_GIS_PREFIX\"                     , \"'*'\")\n    (\"ITEM_GIS_SUFF\"                       , \"'*'\")\n    (\"FIRE_ALM_AGING_RST_FLAG\"             , \"'*'\")\n    (\"AD_VAL_VET_FLAG\"                     , \"'*'\")\n    (\"AD_VAL_DISABLED_FLAG\"                , \"'*'\")\n    (\"AD_VAL_OVER_66_FLAG\"                 , \"'*'\")\n    (\"AD_VAL_HOMESTEAD_FLAG\"               , \"'*'\")\n    (\"QTRLY_PAY_FLAG\"                      , \"'*'\")\n    (\"SRC_CARRIER_KEY\"                     , \"'***'\")\n    (\"SRC_CARRIER_PROCEDURE_KEY\"           , \"'***'\")\n    (\"COLL_PERSON_ID\"                      , \"'***'\")\n    (\"T2_ID\"                               , \"'***'\")\n    (\"PMAM_ID\"                             , \"'***'\")\n    (\"SMART_CM_ID\"                         , \"'***'\")\n    (\"HCTO_AD_VAL_ID\"                      , \"'***'\")\n    (\"COLL_PERSON_COH_EMP_NUM\"             , \"'***'\")\n    (\"CUST_EMAIL_ADDR\"                     , \"'***'\")\n    (\"CUST_PHN_NUM_1\"                      , \"'***'\")\n    (\"CUST_FAX_NUM\"                        , \"'***'\")\n    (\"FED_TAX_ID\"                          , \"'***'\")\n    (\"BUS_CONT_PERSON_NAME\"                , \"'***'\")\n    (\"STATE_CORP_CHTR_ID\"                  , \"'***'\")\n    (\"STATE_SALES_TAX_ID\"                  , \"'***'\")\n    (\"SAP_BUS_ID\"                          , \"'***'\")\n    (\"NAICS_INDY_CODE\"                     , \"'***'\")\n    (\"NAICS_INDY_GRP_CODE\"                 , \"'***'\")\n    (\"NAICS_MAJ_GRP_CODE\"                  , \"'***'\")\n    (\"SIC_INDY_GRP_CODE\"                   , \"'***'\")\n    (\"SIC_DIV_CODE\"                        , \"'***'\")\n    (\"DL_ISSUE_STATE\"                      , \"'***'\")\n    (\"DL_NUM\"                              , \"'***'\")\n    (\"CUST_ADDR_LINE_1\"                    , \"'***'\")\n    (\"CUST_ADDR_LINE_2\"                    , \"'***'\")\n    (\"CUST_ADDR_LINE_3\"                    , \"'***'\")\n    (\"CUST_ST_NUM\"                         , \"'***'\")\n    (\"CUST_ST_PRETYPE\"                     , \"'***'\")\n    (\"CUST_ST_NAME\"                        , \"'***'\")\n    (\"CUST_ST_TYPE\"                        , \"'***'\")\n    (\"CUST_SERV_LVL\"                       , \"'***'\")\n    (\"CUST_CITY\"                           , \"'***'\")\n    (\"CUST_STATE\"                          , \"'***'\")\n    (\"CUST_CTRY\"                           , \"'***'\")\n    (\"CUST_ST_DIR\"                         , \"'***'\")\n    (\"CUST_ST\"                             , \"'***'\")\n    (\"CUST_CNTY\"                           , \"'***'\")\n    (\"CUST_APT_LOT\"                        , \"'***'\")\n    (\"CUST_GIS_MATCH_SCORE\"                , \"'***'\")\n    (\"CUST_GIS_ST_NUM\"                     , \"'***'\")\n    (\"CUST_GIS_ST_PRETYPE\"                 , \"'***'\")\n    (\"CUST_GIS_ST_NAME\"                    , \"'***'\")\n    (\"CUST_GIS_ST_TYPE\"                    , \"'***'\")\n    (\"CUST_GIS_CITY\"                       , \"'***'\")\n    (\"CUST_GIS_ZIP\"                        , \"'***'\")\n    (\"CUST_GIS_X\"                          , \"'***'\")\n    (\"CUST_GIS_Y\"                          , \"'***'\")\n    (\"CUST_ZIP_CODE\"                       , \"'***'\")\n    (\"CUST_ZIP_PLUS_4\"                     , \"'***'\")\n    (\"CUST_GIS_LOCATR_NAME\"                , \"'***'\")\n    (\"SIC_CODE\"                            , \"'***'\")\n    (\"NAICS_DET_NAME\"                      , \"'***'\")\n    (\"NAICS_INDY_NAME\"                     , \"'***'\")\n    (\"NAICS_INDY_GRP_NAME\"                 , \"'***'\")\n    (\"NAICS_MAJ_GRP_NAME\"                  , \"'***'\")\n    (\"NAICS_DIV_NAME\"                      , \"'***'\")\n    (\"SIC_NAME\"                            , \"'***'\")\n    (\"SIC_INDY_GRP_NAME\"                   , \"'***'\")\n    (\"SIC_MAJ_GRP_NAME\"                    , \"'***'\")\n    (\"SIC_DIV_NAME\"                        , \"'***'\")\n    (\"CUST_PHN_NUM_2\"                      , \"'***'\")\n    (\"CUST_PHN_NUM_3\"                      , \"'***'\")\n    (\"CUST_PAR_ID\"                         , \"'***'\")\n    (\"CUST_PAR_NAME\"                       , \"'***'\")\n    (\"COH_EMP_NUM\"                         , \"'***'\")\n    (\"RM_LOAD_TIME\"                        , \"'***'\")\n    (\"RM_EMP_MSTR_KEY\"                     , \"'***'\")\n    (\"PAY_METH\"                            , \"'***'\")\n    (\"DET_TRANS_CODE\"                      , \"'***'\")\n    (\"T2_TRANS_TYPE_CODE\"                  , \"'***'\")\n    (\"T2_TRANS_TYPE_DESCR\"                 , \"'***'\")\n    (\"T2_TRANS_RSN\"                        , \"'***'\")\n    (\"T2_TRANS_PARSED_DESCR\"               , \"'***'\")\n    (\"T2_TRANS_MISC_ITEM_CODE\"             , \"'***'\")\n    (\"T2_TRANS_MISC_ITEM_DESCR\"            , \"'***'\")\n    (\"T2_TRANS_SCENARIO\"                   , \"'***'\")\n    (\"T2_TRANS_ORIG_OBJ_TYPE_ID\"           , \"'***'\")\n    (\"PMAM_ADJMT_TO\"                       , \"'***'\")\n    (\"PMAM_ADJMT_TYPE\"                     , \"'***'\")\n    (\"DIGITECH_TRANS_TYPE_DET\"             , \"'***'\")\n    (\"RSN_INCDT_NOT_BILLED\"                , \"'***'\")\n    (\"VIO_CODE\"                            , \"'***'\")\n    (\"TOWING_CMPNY\"                        , \"'***'\")\n    (\"BOOT_SERIAL_NUM\"                     , \"'***'\")\n    (\"PRKG_METER_NUM\"                      , \"'***'\")\n    (\"INCDT_SEQ_NUM\"                       , \"'***'\")\n    (\"INCDT_ADDR_LINE_1\"                   , \"'***'\")\n    (\"INCDT_ADDR_LINE_2\"                   , \"'***'\")\n    (\"INCDT_ADDR_LINE_3\"                   , \"'***'\")\n    (\"INCDT_ST_NUM\"                        , \"'***'\")\n    (\"INCDT_ST_PRETYPE\"                    , \"'***'\")\n    (\"INCDT_ST_NAME\"                       , \"'***'\")\n    (\"INCDT_ST_TYPE\"                       , \"'***'\")\n    (\"INCDT_SERV_LVL\"                      , \"'***'\")\n    (\"INCDT_CITY\"                          , \"'***'\")\n    (\"INCDT_STATE\"                         , \"'***'\")\n    (\"INCDT_CTRY\"                          , \"'***'\")\n    (\"INCDT_ST_DIR\"                        , \"'***'\")\n    (\"INCDT_ST\"                            , \"'***'\")\n    (\"INCDT_CNTY\"                          , \"'***'\")\n    (\"INCDT_APT_LOT\"                       , \"'***'\")\n    (\"INCDT_GIS_MATCH_SCORE\"               , \"'***'\")\n    (\"INCDT_GIS_ST_NUM\"                    , \"'***'\")\n    (\"INCDT_GIS_ST_PRETYPE\"                , \"'***'\")\n    (\"INCDT_GIS_ST_NAME\"                   , \"'***'\")\n    (\"INCDT_GIS_ST_TYPE\"                   , \"'***'\")\n    (\"INCDT_GIS_CITY\"                      , \"'***'\")\n    (\"INCDT_GIS_ZIP\"                       , \"'***'\")\n    (\"INCDT_GIS_X\"                         , \"'***'\")\n    (\"INCDT_GIS_Y\"                         , \"'***'\")\n    (\"INCDT_ZIP_CODE\"                      , \"'***'\")\n    (\"INCDT_ZIP_PLUS_4\"                    , \"'***'\")\n    (\"INCDT_GIS_LOCATR_NAME\"               , \"'***'\")\n    (\"BLK_NUM\"                             , \"'***'\")\n    (\"TXP_ID\"                              , \"'***'\")\n    (\"TXP_SERV_LVL\"                        , \"'***'\")\n    (\"TXP_TYPE\"                            , \"'***'\")\n    (\"ORIGIN_LOC\"                          , \"'***'\")\n    (\"DEST_LOC\"                            , \"'***'\")\n    (\"ITEM_STAT\"                           , \"'***'\")\n    (\"ITEM_ADDR_LINE_1\"                    , \"'***'\")\n    (\"ITEM_ADDR_LINE_2\"                    , \"'***'\")\n    (\"ITEM_ADDR_LINE_3\"                    , \"'***'\")\n    (\"ITEM_ST_NUM\"                         , \"'***'\")\n    (\"ITEM_ST_PRETYPE\"                     , \"'***'\")\n    (\"ITEM_ST_NAME\"                        , \"'***'\")\n    (\"ITEM_ST_TYPE\"                        , \"'***'\")\n    (\"ITEM_SERV_LVL\"                       , \"'***'\")\n    (\"ITEM_CITY\"                           , \"'***'\")\n    (\"ITEM_STATE\"                          , \"'***'\")\n    (\"ITEM_CTRY\"                           , \"'***'\")\n    (\"ITEM_ST_DIR\"                         , \"'***'\")\n    (\"ITEM_ST\"                             , \"'***'\")\n    (\"ITEM_CNTY\"                           , \"'***'\")\n    (\"ITEM_APT_LOT\"                        , \"'***'\")\n    (\"ITEM_GIS_MATCH_SCORE\"                , \"'***'\")\n    (\"ITEM_GIS_ST_NUM\"                     , \"'***'\")\n    (\"ITEM_GIS_ST_PRETYPE\"                 , \"'***'\")\n    (\"ITEM_GIS_ST_NAME\"                    , \"'***'\")\n    (\"ITEM_GIS_ST_TYPE\"                    , \"'***'\")\n    (\"ITEM_GIS_CITY\"                       , \"'***'\")\n    (\"ITEM_GIS_ZIP\"                        , \"'***'\")\n    (\"ITEM_GIS_X\"                          , \"'***'\")\n    (\"ITEM_GIS_Y\"                          , \"'***'\")\n    (\"ITEM_ZIP_CODE\"                       , \"'***'\")\n    (\"ITEM_ZIP_PLUS_4\"                     , \"'***'\")\n    (\"ITEM_GIS_LOCATR_NAME\"                , \"'***'\")\n    (\"HCAD_ACCT_STAT\"                      , \"'***'\")\n    (\"AD_VAL_ACCT_LVL_ID\"                  , \"'***'\")\n    (\"COLL_LGL_COND\"                       , \"'***'\")\n    (\"COLL_LAWSUIT_NUM\"                    , \"'***'\")\n    (\"GL_ACCT_ID\"                          , \"'0000247130'\")\n    (\"INCDT_TIME\"                          , \"'00:00:00'\")\n    (\"FUND_ID\"                             , \"'1000'\")\n    (\"EMS_INCDT\"                           , \"'***'\")\n    (\"DISPATCH_NUM\"                        , \"'100073'\")\n    (\"FUND_CNTR_ID\"                        , \"'1200030003'\")\n    (\"CONTR_ID\"                            , \"'4600012363'\")\n    (\"PT_AGE\"                              , \"'***'\")\n    (\"BUS_AREA_ID\"                         , \"'6400'\")\n    (\"RECEIVABLE_STAT\"                     , \"'ACTIVE'\")\n    (\"DET_TRANS_DESCR\"                     , \"'Base Amount Billed'\")\n    (\"MSTR_TRANS_TYPE\"                     , \"'Billed'\")\n    (\"CUST_NAME\"                           , \"'***'\")\n    (\"ORIG_BILL_NAME\"                      , \"'***'\")\n    (\"COLL_PERSON_TYPE\"                    , \"'COH Contractor'\")\n    (\"EMP_NAME\"                            , \"'***'\")\n    (\"ITEM_TYPE\"                           , \"'***'\")\n    (\"ITEM_DESCR\"                          , \"'***'\")\n    (\"INCDT_TYPE\"                          , \"'***'\")\n    (\"INCDT_CAT\"                           , \"'***'\")\n    (\"DIV_LONG_NAME\"                       , \"'***'\")\n    (\"INCDT_DESCR\"                         , \"'***'\")\n    (\"EMP_TYPE\"                            , \"'Employee'\")\n    (\"FUNC_AREA_ID\"                        , \"'GEGO-00-00000000'\")\n    (\"DEPT_LONG_NAME\"                      , \"'***'\")\n    (\"DEPT_NAME\"                           ,\"'***'\")\n    (\"DIV_NAME\"                            ,\"'***'\")\n    (\"COH\"                                 ,\"'City of Houston'\")\n    (\"CUST_TYPE\"                           , \"'Individual'\")\n    (\"PT_GNDR\"                             , \"'***'\")\n    (\"COLL_PERSON_NAME\"                    , \"'Employee'\")\n    (\"DIGITECH_ID\"                         , \"'***'\")\n    (\"CARRIER_SRC\"                         , \"'***'\")\n    (\"CARRIER_PROCEDURE_SRC\"               , \"'***'\")\n    (\"CUST_IS_VEND_FLAG\"                   , \"'N'\")\n    (\"JV_CUST_FLAG\"                        , \"'N'\")\n    (\"MAN_TRANS_FLAG\"                      , \"'N'\")\n    (\"DERIVED_TRANS_FLAG\"                  , \"'N'\")\n    (\"INTRA_FUND_TRANS_FLAG\"               , \"'N'\")\n    (\"ADJ_FLAG\"                            , \"'N'\")\n    (\"UNK_CUST_AT_BILL_FLAG\"               , \"'N'\")\n    (\"BILLING_HOLD_FLAG\"                   , \"'N'\")\n    (\"SIG_FLAG\"                            , \"'N'\")\n    (\"RECEIVABLE_MSTR_STAT\"                , \"'Open'\")\n    (\"DIGITECH_TRANS_TYPE\"                 , \"'PROCS'\")\n    (\"INT_EXT_EMP_FLAG\"                    , \"'Y'\")\n    (\"CONFI_CUST_FLAG\"                     , \"'Y'\")\n    (\"CUST_IN_CITY_FLAG\"                   , \"'Y'\")\n    (\"BILLED_FLAG\"                         , \"'Y'\")\n    (\"ITEM_IN_CITY_FLAG\"                   , \"'Y'\")\n    (\"RECEIVABLE_EVER_TRANS_FLAG\"          , \"'Y'\")\n    (\"CUST_PAR_KEY\"                        , \"1\")\n    (\"TRANS_CNT\"                           , \"1\")\n    (\"SRC_SYS_MOD_DTE\"                     , \"'1900-01-01'\")\n    (\"RM_LOAD_DTE\"                         , \"'1900-01-01'\")\n    (\"ITEM_STAT_CHG_DTE\"                   , \"'1900-01-01'\")\n    (\"RECEIVABLE_STAT_CHG_DTE\"             , \"'1900-01-01'\")\n    (\"FIRE_ORIG_ISSUE_DTE\"                 , \"'1900-01-01'\")\n    (\"RECEIVABLE_MSTR_STAT_CHG_DTE\"        , \"'1900-01-01'\")\n    (\"AD_VAL_TAX_DEFERRAL_START_DTE\"       , \"'1900-01-01'\")\n    (\"AD_VAL_TAX_DEFERRAL_END_DTE\"         , \"'1900-01-01'\")\n    (\"AD_VAL_EFF_DTE_OF_OWNERSHIP\"         , \"'1900-01-01'\")\n    (\"3348_ATTY_FEE_DTE\"                   , \"'1900-01-01'\")\n    (\"3308_ATTY_FEE_DTE\"                   , \"'1900-01-01'\")\n    (\"3307_ATTY_FEE_DTE\"                   , \"'1900-01-01'\")\n    (\"RECEIVABLE_VERS_DELINQ_DTE\"          , \"'1900-01-01'\")\n    (\"RECEIVABLE_VERS_DUE_DTE\"             , \"'1900-01-01'\")\n    (\"RECEIVABLE_VERS_TO_DTE\"              , \"'1900-01-01'\")\n    (\"RECEIVABLE_VERS_BILLING_TO_DTE\"      , \"'1900-01-01'\")\n    (\"INCDT_DTE\"                           , \"'1900-01-01'\")\n    (\"RECEIVABLE_VERS_ISSUE_DTE\"           , \"'1900-01-01'\")\n    (\"INTRA_FUND_TRANS_AMT\"                , \"NULL\"        )\n    (\"RECEIVABLE_1ST_PAY_DTE\"              , \"'1900-01-01'\")\n    (\"RECEIVABLE_FNL_PAY_DTE\"              , \"'1900-01-01'\")\n    (\"RECEIVABLE_LITIGATION_DTE\"           , \"'1900-01-01'\")\n    (\"RECEIVABLE_SETTLEMENT_DTE\"           , \"'1900-01-01'\")\n    (\"REINSTATEMENT_DTE\"                   , \"'1900-01-01'\")\n    (\"SRC_SYS_TRANS_ID\"                    , \"'***'\"       )\n\n    (\"ALLOWABLE_NO_CHRG_INCDTS\"            , \"0\"           )\n    (\"ALM_INSTL_CMPNY\"                     , \"'***'\"       )\n    (\"ALM_INSTL_DTE\"                       , \"'1900-01-01'\")\n    (\"ALM_MNT_CMPNY\"                       , \"'***'\"       )\n    (\"ALM_REG_KEY\"                         , \"'***'\"       )\n    (\"ALM_TYPE\"                            , \"'*'\"         )\n    (\"APPLICTN_RECV_DTE\"                   , \"'1900-01-01'\")\n    (\"APPRAISAL_DISTR_ACCT_NUM\"            , \"'***'\"       )\n    (\"CC_JURIS_DESCR\"                      , \"'***'\"       )\n    (\"CITY_RFPD_JURIS_DESCR\"               , \"'***'\"       )\n    (\"CURR_FIRE_ALM_PERMIT_FLAG\"           , \"'*'\"         )\n    (\"CURR_WTR_ACCT_FLAG\"                  , \"'*'\"         )\n    (\"CUST_ID\"                             , \"'***'\"       )\n    (\"DELINQ_DTE\"                          , \"'1900-01-01'\")\n    (\"DTE\"                                 , \"'1900-01-01'\")\n    (\"ESC_CAND_FLAG\"                       , \"'*'\"         )\n    (\"EXCL_TYPE\"                           , \"'***'\"       )\n    (\"FIRE_ALM_PERMIT_ACTV_FLAG\"           , \"'*'\"         )\n    (\"FIRE_ALM_PERMIT_NUM\"                 , \"'***'\"       )\n    (\"FIRE_ALM_PURPOSE\"                    , \"'***'\"       )\n    (\"INV_NUM\"                             , \"'***'\"       )\n    (\"LAST_CUST_CONN_DTE\"                  , \"'1900-01-01'\")\n    (\"LAST_CUST_CUTOFF_DTE\"                , \"'1900-01-01'\")\n    (\"LAST_CUST_DISCONN_DTE\"               , \"'1900-01-01'\")\n    (\"LAST_METER_INSPECT_DTE\"              , \"'1900-01-01'\")\n    (\"LICENSE_PLATE_EXP_MTH\"               , \"'***'\"       )\n    (\"LICENSE_PLATE_EXP_YR\"                , \"'***'\"       )\n    (\"LICENSE_PLATE_NUM\"                   , \"'***'\"       )\n    (\"LICENSE_PLATE_TYPE\"                  , \"'***'\"       )\n    (\"MUNIC_UTIL_DISTR_DESCR\"              , \"'***'\"       )\n    (\"ON_ADMIN_HOLD_FLAG\"                  , \"'*'\"         )\n    (\"OWNERSHIP_EFF_DTE\"                   , \"'1900-01-01'\")\n    (\"OWNER_IS_CUST_FLAG\"                  , \"'*'\"         )\n    (\"OWNER_RENTER\"                        , \"'*'\"         )\n    (\"PERMIT_EXP_DTE\"                      , \"'1900-01-01'\")\n    (\"PERMIT_ISSUE_DTE\"                    , \"'1900-01-01'\")\n    (\"PERMIT_NAME\"                         , \"'***'\"       )\n    (\"PERMIT_NUM\"                          , \"0\"           )\n    (\"PROP_CLASS_DESCR\"                    , \"'***'\"       )\n    (\"RECEIVABLE_HAS_LTR_FLAG\"             , \"'*'\"         )\n    (\"RECEIVABLE_HAS_NOTE_FLAG\"            , \"'*'\"         )\n    (\"RECEIVABLE_HAS_PEND_LTR_FLAG\"        , \"'*'\"         )\n    (\"REG_HOLDER_FLAG\"                     , \"'*'\"         )\n    (\"REND_PENALTY_JURIS_DESCR\"            , \"'***'\"       )\n    (\"RESOLVED_BY\"                         , \"'***'\"       )\n    (\"RESOLVE_DESCR\"                       , \"'***'\"       )\n    (\"SCHOOL_JURIS_DESCR\"                  , \"'***'\"       )\n    (\"SEN_CITIZEN_FLAG\"                    , \"'*'\"         )\n    (\"SRC_SYS\"                             , \"'***'\"       )\n    (\"SRC_SYS_ID\"                          , \"'***'\"       )\n    (\"SUBSTANTIAL_ERR_PENALTY\"             , \"'*'\"         )\n    (\"SUSPD_PERMIT_DTE\"                    , \"'1900-01-01'\")\n    (\"SUSPD_PERMIT_RSN\"                    , \"'***'\"       )\n    (\"TAXABLE_PROP_LGL_DESCR_1\"            , \"'***'\"       )\n    (\"TAXABLE_PROP_LGL_DESCR_2\"            , \"'***'\"       )\n    (\"TAXABLE_PROP_LGL_DESCR_3\"            , \"'***'\"       )\n    (\"TAXABLE_PROP_LGL_DESCR_4\"            , \"'***'\"       )\n    (\"TAXABLE_PROP_LGL_DESCR_5\"            , \"'***'\"       )\n    (\"TAXABLE_PROP_ROLL_TYPE\"              , \"'***'\"       )\n    (\"TAX_DEFERRAL_END_DTE\"                , \"'1900-01-01'\")\n    (\"TAX_DEFERRAL_START_DTE\"              , \"'1900-01-01'\")\n    (\"TAX_ROLL_DESCR\"                      , \"'***'\"       )\n    (\"TYPE_OF_ALM_SITE\"                    , \"'*'\"         )\n    (\"UNDER_APPEAL_FLAG\"                   , \"'*'\"         )\n    (\"VAC_FLAG\"                            , \"'*'\"         )\n    (\"VEH_COLOR\"                           , \"'***'\"       )\n    (\"VEH_ID_NUM\"                          , \"'***'\"       )\n    (\"VEH_MAKE\"                            , \"'***'\"       )\n    (\"VEH_MODEL\"                           , \"'***'\"       )\n    (\"VEH_MODEL_YR\"                        , \"'***'\"       )\n    (\"VEH_OWNER_ID\"                        , \"'***'\"       )\n    (\"VEH_OWNER_NAME\"                      , \"'***'\"       )\n    (\"VEH_TYPE\"                            , \"'***'\"       )\n    (\"VOID_CODE\"                           , \"'***'\"       )\n    (\"VOID_DESCR\"                          , \"'***'\"       )\n    (\"VOID_FLAG\"                           , \"'*'\"         )\n    (\"WORK_STAT\"                           , \"'***'\"       )\n    (\"WRITE_OFF_FLAG\"                      , \"'*'\"         )\n    (\"WTR_ACCT_NUM_OF_UNITS\"               , \"0\"           )\n    (\"WTR_ACCT_ORIG_USE_TYPE\"              , \"'***'\"       )\n    (\"WTR_ACCT_PROP_USE_TYPE\"              , \"'***'\"       )\n    (\"WTR_METER_NUM\"                       , \"'***'\"       )\n\n|]", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"0da8d01b-168f-4816-9895-99fb9f2e4a7b"}, "snpName": "SlowlyChangingDimensions", "snpContent": "#define SLOWLY_CHANGING_DIMENSIONS \nopen System.Text.RegularExpressions\nopen Microsoft.FSharp.Reflection\n\nlet padName: int -> string -> string =\n         fun len    name   -> name.PadRight len\n\nlet pad4 = padName 40\nlet pad2 = padName 20\n\nlet defaultValue v opt = match opt with\n                         | Some x -> x\n                         | None   -> v\n\nlet aNumeral (s : string) = if s.StartsWith \"A#\" then s.[2..] else s\n\nlet toString (x:'a) = \n    match FSharpValue.GetUnionFields(x, typeof<'a>) with\n    | case, _ -> case.Name\n    |> aNumeral\n\nlet fromString<'a> (s:string) =\n    match FSharpType.GetUnionCases typeof<'a> |> Array.filter (fun case -> case.Name = s) with\n    |[|case|] -> Some(FSharpValue.MakeUnion(case,[||]) :?> 'a)\n    |_ -> None\n\ntype sqlObjectType = | PROCEDURE | VIEW | TRIGGER\nwith\n     member this.Name      = toString this\n     member this.Condition = match    this with\n                             | PROCEDURE -> \"IN ( N'P', N'PC' )\"\n                             | VIEW      -> \"=    N'V' \"\n                             | TRIGGER   -> \"=    N'TR'\"\n\nlet sqlDropCreate: sqlObjectType -> string -> string =\n               fun sqlType          name   -> sprintf \"\"\"\nIF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'%s') AND type %s)\n    DROP %s %s;\nGO\n-- Machine-generated-code, DO NOT MODIFY HERE\n-- %s 'HPL', '2017-03-01'\nCREATE %s %s\n\"\"\"                                                name         sqlType.Condition \n                                                   sqlType.Name name \n                                                   name \n                                                   sqlType.Name name\n\n\nlet regexIdentifier = Regex @\"^[\\p{L}_][\\p{L}\\p{N}@$#_]{0,127}$|^\\[.+\\]$\"\n                                                \nlet isIdentifier: string -> bool =\n              fun txt    -> regexIdentifier.IsMatch txt\n\nlet nameS fName = \n    if isIdentifier fName \n    then fName \n    else sprintf \"[%s]\" fName\n\ntype TargetField\nwith\n     member this.Name = toString this\n\ntype FinTransViewField\nwith\n     member this.Name = toString this\n\ntype Field =\n    | SurrogateKey   of TargetField\n    | BusinessKey    of FinTransViewField\n    | SourceDate     of FinTransViewField\n    | IntraDayOrder  of  FinTransViewField\n    | SCD2BeginDate  of TargetField\n    | SCD2EndDate    of TargetField\n    | SCD2Current    of TargetField\n    | ChangeReason   of TargetField\n    | SCD2           of FinTransViewField * scd1:TargetField option * scd0:TargetField option /// Version  value\n    | SCD1           of FinTransViewField * scd0:TargetField option                           /// Current  value\n    | SCD0           of FinTransViewField                               /// SCD0 without accompanying SCD1 or 2\nwith member this.Name0 = \n        match this with\n        | SurrogateKey   tfield\n        | SCD2BeginDate  tfield\n        | SCD2EndDate    tfield\n        | ChangeReason   tfield\n        | SCD2Current    tfield        -> tfield.Name\n        | BusinessKey    sfield\n        | SourceDate     sfield\n        | IntraDayOrder  sfield\n        | SCD2          (sfield, _, _) \n        | SCD1          (sfield, _   ) \n        | SCD0           sfield        -> sfield.Name\n     member this.Name = this.Name0 |> nameS\n\nlet strOption: string -> string option =\n           fun txt    -> match txt.Trim() with\n                         | \"\" -> None\n                         | f  -> Some f\n\nlet tfldOption: TargetField -> TargetField option =\n            fun fld         -> match fld with | Nil  -> None | _ -> Some fld\n\nlet sfldOption: FinTransViewField -> FinTransViewField option =\n            fun fld         -> match fld with | Nil_ -> None | _ -> Some fld\n\nlet SurrogateKey  name           : Field =  name                   |> SurrogateKey \nlet BusinessKey   name           : Field =  name                   |> BusinessKey  \nlet SourceDate    name           : Field =  name                   |> SourceDate   \nlet IntraDayOrder name           : Field =  name                   |> IntraDayOrder   \nlet SCD2BeginDate name           : Field =  name                   |> SCD2BeginDate\nlet SCD2EndDate   name           : Field =  name                   |> SCD2EndDate  \nlet SCD2Current   name           : Field =  name                   |> SCD2Current  \nlet ChangeReason  name           : Field =  name                   |> ChangeReason  \nlet SCD0          name           : Field =  name                   |> SCD0         \nlet SCD1          name      scd0 : Field = (name, tfldOption scd0) |> SCD1         \nlet SCD2          name scd1 scd0 : Field = (name, tfldOption scd1                   \n                                                , tfldOption scd0) |> SCD2\n    \nlet fieldNames      :  Field -> string list =\n                   fun f     -> match f with \n                                | SCD2         (_, Some scd1, Some scd0) -> [ f.Name ; scd1.Name ; scd0.Name ]\n                                | SCD2         (_, _        , Some scd0) -> [ f.Name             ; scd0.Name ]\n                                | SCD1         (_,            Some scd0) -> [ f.Name             ; scd0.Name ]\n                                | _                                      -> [ f.Name                         ]\n\nlet fieldSource     :  Field -> string list =\n                   fun f     -> match f with \n                                | SurrogateKey  _\n                                | SCD2BeginDate _\n                                | SCD2EndDate   _\n                                | ChangeReason  _\n                                | SCD2Current   _            -> []\n                                | _                          -> [ f.Name ]\n\nlet fieldTarget    :  Field -> string list =\n                   fun f     -> match f with \n                                | SurrogateKey  tfield\n                                | SCD2BeginDate tfield\n                                | SCD2EndDate   tfield\n                                | ChangeReason  tfield\n                                | SCD2Current   tfield                   -> [ tfield.Name            ]\n                                | SCD2         (_, Some scd1, Some scd0) -> [ scd1  .Name ; scd0.Name]\n                                | SCD2         (_, _        , Some scd0) -> [               scd0.Name]\n                                | SCD1         (_,            Some scd0) -> [               scd0.Name]\n                                | _                                      -> []\n\nlet fieldAlias      :  Field -> string =\n                   fun f     -> match f with \n                                | SurrogateKey  _ -> \"SurrogateKey_ \"\n                                | BusinessKey   _ -> \"BusinessKey_  \"\n                                | SourceDate    _ -> \"SourceDate_   \"\n                                | IntraDayOrder _ -> \"IntraDayOrder_\"\n                                | SCD2BeginDate _ -> \"SourceDate_   \"\n                                | ChangeReason  _\n                                | SCD2Current   _ \n                                | SCD2EndDate   _ -> \"\" \n                                | _               -> f.Name\nlet fieldAliasValue :  Field -> string -> string = \n                   fun f        v      -> sprintf \"%s = %s\" (pad4 (fieldAlias f)) v\n\nlet fieldSelectTable:  Field -> string list =\n                   fun f     -> match f with \n                                | SurrogateKey  _ -> [ fieldAliasValue f f.Name ]\n                                | BusinessKey   _ -> [ fieldAliasValue f f.Name ]\n                                | SCD2BeginDate _ -> [ fieldAliasValue f f.Name ]\n                                | SourceDate    _ \n                                | IntraDayOrder _\n                                | ChangeReason  _\n                                | SCD2Current   _ \n                                | SCD2EndDate   _ -> [] \n                                | _               -> [ f.Name ]\n\nlet fieldSelectSource: (string -> string) -> Field -> string list =\n                   fun transform             f     ->\n                                match f with \n                                | SurrogateKey  _ -> [ fieldAliasValue f \"NULL\"  ]\n                                | BusinessKey   _ -> [ fieldAliasValue f f.Name ]\n                                | SourceDate    _ -> [ fieldAliasValue f f.Name ]\n                                | IntraDayOrder _\n                                | SCD2BeginDate _\n                                | ChangeReason  _\n                                | SCD2Current   _ \n                                | SCD2EndDate   _ -> []\n                                | _               -> [ transform f.Name ]\n\nlet fieldSelectTogether1: (string -> string) -> Field -> string list =\n                   fun    transform             f     ->\n                                match f with \n                                | SurrogateKey  _ -> [ fieldAlias f |> transform ]\n                                | BusinessKey   _ -> [ fieldAlias f              ]\n                                | SourceDate    _ -> [ fieldAlias f              ]\n                                | IntraDayOrder _\n                                | SCD2BeginDate _ \n                                | ChangeReason  _\n                                | SCD2Current   _ \n                                | SCD2EndDate   _ -> []\n                                | _               -> [ transform f.Name ]\n\nlet fieldInsert     :  Field -> string list =\n                   fun f     -> match f with \n                                | SourceDate    _ \n                                | IntraDayOrder _\n                                | SurrogateKey  _ -> []\n                                | _               -> fieldNames f\n\nlet fieldValues     :  Field -> string list =\n                   fun f     -> match f with \n                                | SourceDate    _ \n                                | IntraDayOrder _\n                                | SurrogateKey  _ -> []\n                                | _               -> fieldNames f |> List.map (sprintf \"S.%s\")\n\nlet fieldUpdate     :  Field -> string list =\n                   fun f     -> match f with \n                                | SourceDate    _ \n                                | IntraDayOrder _\n                                | BusinessKey   _\n                                | SurrogateKey  _ -> []\n                                | _               -> fieldNames f |> List.map (fun n -> sprintf \"T.%s = S.%s\" (pad4 n) n)\n\nlet fieldSCD2Equal   : Field -> string list =\n                   fun f     -> match f with \n                                | SCD2 _ -> [ sprintf \"S.%s = P.%s\" ( pad4 f.Name) f.Name ]\n                                | _      -> []\n                                \nlet fieldSCD2        : Field -> string list =\n                   fun f     -> match f with \n                                | SCD2 _             -> [ sprintf \"S.%s\" f.Name ]\n                                | _                  -> []\n\nlet fieldSCD0        : Field -> string list =\n                   fun f     -> match f with \n                                | SCD1(_,    Some scd0) \n                                | SCD2(_, _, Some scd0) -> [ sprintf \"%s = FIRST_VALUE(S.%s) OVER (PARTITION BY S.BusinessKey_ ORDER BY S.NRec_)\" (pad4 scd0.Name) f.Name ]\n                                | SCD0 _                -> [ sprintf \"%s = FIRST_VALUE(S.%s) OVER (PARTITION BY S.BusinessKey_ ORDER BY S.NRec_)\" (pad4 f.Name   ) f.Name ]\n                                | _                     -> []\n\nlet fieldSCD1        : Field -> string list =\n                   fun f     -> match f with \n                                | SCD2(_, Some scd1, _) -> [ sprintf \"%s = LAST_VALUE(S.%s ) OVER (PARTITION BY S.BusinessKey_ ORDER BY S.NRec_ ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\" (pad4 scd1.Name) f.Name ]\n                                | SCD1 _                -> [ sprintf \"%s = LAST_VALUE(S.%s ) OVER (PARTITION BY S.BusinessKey_ ORDER BY S.NRec_ ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\" (pad4 f.Name   ) f.Name ]\n                                | _                     -> []\n\ntype SQLTableView = {\n    db       : string option\n    schema   : string option\n    sqlObject: string\n    where    : string option\n    parms    : string option\n}\nwith member this.Reference   : string =\n                               match this.db, this.schema with\n                               | None   , None    -> sprintf \"%s\"\n                               | Some db, None    -> sprintf \"%s..%s\"   (nameS db)\n                               | Some db, Some sc -> sprintf \"%s.%s.%s\" (nameS db) (nameS sc)\n                               | None   , Some sc -> sprintf \"%s.%s\"               (nameS sc)\n                               <| nameS this.sqlObject\n     member this.Call        : string =\n                               match this.parms with\n                               | None    -> sprintf \"%s\"\n                               | Some ps -> fun r -> sprintf \"%s(%s)\" r ps\n                               <| this.Reference\n     member this.FromWhere   : string =\n                               match this.where with\n                               | None    -> sprintf \"%s\"\n                               | Some wh -> fun c -> sprintf \"%s WHERE %s \" c wh\n                               <| this.Call\n\n     static member New: string -> string ->  string  -> string -> string -> SQLTableView =\n                    fun db        schema     sobject    where     parms  -> {\n                                                                                db        = strOption db\n                                                                                schema    = strOption schema\n                                                                                sqlObject = sobject.Trim()\n                                                                                where     = strOption where \n                                                                                parms     = strOption parms\n                                                                            }\n\nlet indent : string  -> string =\n         fun content -> content.Split[| '\\n' |] |> String.concat \"\\n    \"\n\nlet indent2: string  -> string =\n         fun content -> \"    \" + (indent content)\n\ntype SQLWith = { \n    name   : string \n    content: string \n}\nwith override this.ToString()  = sprintf \"%s as (\\n%s\\n)\" this.name this.content\n     static member New: string -> string  -> SQLWith =\n                    fun name      content -> { name = name.Trim() ; content = indent2 content }\n\nlet sqlSelectP: string -> string -> string seq -> string =\n    fun         select    from      fields     -> \n        fields \n        |> String.concat \"\\n     , \"\n        |> sprintf \"%s %s\\n  FROM %s\" select <| from\n\nlet sqlSelect : string -> string seq -> string = sqlSelectP \"SELECT\"\nlet sqlSelectD: string -> string seq -> string = sqlSelectP \"SELECT Distinct\"\n\nlet sqlProcedure: string -> string  -> string  -> string=\n              fun name      parms      content -> \n                  sqlDropCreate PROCEDURE name\n                  |> sprintf \"%s %s\\n as \\n %s \\nGO\" <| parms <| content\n\nlet bSurrogateKey  = function | SurrogateKey  _ -> true | _ -> false\nlet bBusinessKey   = function | BusinessKey   _ -> true | _ -> false\nlet bSourceDate    = function | SourceDate    _ -> true | _ -> false\nlet bIntraDayOrder = function | IntraDayOrder _ -> true | _ -> false\nlet bSCD2BeginDate = function | SCD2BeginDate _ -> true | _ -> false\nlet bSCD2EndDate   = function | SCD2EndDate   _ -> true | _ -> false\nlet bChangeReason  = function | ChangeReason  _ -> true | _ -> false\nlet bSCD2Current   = function | SCD2Current   _ -> true | _ -> false\nlet bSCD2          = function | SCD2          _ -> true | _ -> false\n\ntype Dimension ( tableBase : SQLTableView\n               , source    : SQLTableView\n               , fields    : Field  seq\n               , snowflakes: string seq\n               , extra     : Printf.StringFormat<_>) =              \n     let isSnowflaked   = snowflakes |> Seq.isEmpty |> not\n     let countF filter  = fields |> Seq.filter filter |> Seq.length\n     let cSurrogateKey  = countF bSurrogateKey \n     let cBusinessKey   = countF bBusinessKey  \n     let cSourceDate    = countF bSourceDate   \n     let cIntraDayOrder = countF bIntraDayOrder\n     let cSCD2BeginDate = countF bSCD2BeginDate\n     let cSCD2EndDate   = countF bSCD2EndDate  \n     let cChangeReason  = countF bChangeReason  \n     let cSCD2Current   = countF bSCD2Current  \n     let cSCD2          = countF bSCD2\n     let table          = if isSnowflaked then { tableBase with sqlObject = \"SV_\" + tableBase.sqlObject } else tableBase\n     let duplicates     = fields |> Seq.collect fieldNames |> Seq.countBy (fun n -> n.Trim().ToUpper()) |> Seq.choose (fun (n, i) -> if i > 1 then sprintf \"Field %s appears more than once\" n |> Some else None) |> Seq.toList\n     let errors         = [\n                             if              cSurrogateKey  = 0 then yield \"A SurrogateKey  must be specified\"\n                             if              cBusinessKey   = 0 then yield \"A BusinessKey   must be specified\"\n                             if cSCD2 > 0 && cSourceDate    = 0 then yield \"A SourceDate    must be specified\"\n                             if cSCD2 > 0 && cIntraDayOrder = 0 then yield \"A IntraDayOrder must be specified\"\n                             if cSCD2 > 0 && cSCD2BeginDate = 0 then yield \"A SCD2BeginDate must be specified\"\n                             if cSCD2 > 0 && cSCD2EndDate   = 0 then yield \"A SCD2EndDate   must be specified\"\n                             if              cSurrogateKey  > 1 then yield \"Only 1 SurrogateKey  can be specified\"\n                             if              cBusinessKey   > 1 then yield \"Only 1 BusinessKey   can be specified\"\n                             if              cSourceDate    > 1 then yield \"Only 1 SourceDate    can be specified\"\n                             if              cIntraDayOrder > 1 then yield \"Only 1 IntraDayOrder can be specified\"\n                             if              cSCD2BeginDate > 1 then yield \"Only 1 SCD2BeginDate can be specified\"\n                             if              cSCD2EndDate   > 1 then yield \"Only 1 SCD2EndDate   can be specified\"\n                             if              cSCD2Current   > 1 then yield \"Only 1 SCD2Current   can be specified\"\n                             if              cChangeReason  > 1 then yield \"Only 1 ChangeReason  can be specified\"\n                             if cSCD2 = 0 && cSourceDate    = 1 then yield \"No SCD2 fields, SourceDate    cannot be specified\"\n                             if cSCD2 = 0 && cIntraDayOrder = 1 then yield \"No SCD2 fields, IntraDayOrder cannot be specified\"\n                             if cSCD2 = 0 && cSCD2BeginDate = 1 then yield \"No SCD2 fields, SCD2BeginDate cannot be specified\"\n                             if cSCD2 = 0 && cSCD2EndDate   = 1 then yield \"No SCD2 fields, SCD2EndDate   cannot be specified\"\n                             if cSCD2 = 0 && cSCD2Current   = 1 then yield \"No SCD2 fields, SCD2Current   cannot be specified\"\n                          ] @ duplicates\n     do if not errors.IsEmpty then failwith (errors |> String.concat \"\\n\")\n     let find  : (Field -> bool) -> string =\n             fun  ft             -> fields |> Seq.find ft |> fun f -> f.Name\n     let surrogateKey   = find bSurrogateKey\n     let businessKey    = find bBusinessKey\n     let sourceDateO    = if cSourceDate    = 1 then find bSourceDate    |> Some else None\n     let intraDayOrderO = if cIntraDayOrder = 1 then find bIntraDayOrder |> Some else None\n     let sCD2BeginDateO = if cSCD2BeginDate = 1 then find bSCD2BeginDate |> Some else None\n     let sCD2EndDateO   = if cSCD2EndDate   = 1 then find bSCD2EndDate   |> Some else None\n     let sCD2CurrentO   = if cSCD2Current   = 1 then find bSCD2Current   |> Some else None\n     let changeReasonO  = if cChangeReason  = 1 then find bChangeReason  |> Some else None \n     let procedureName  = sprintf \"GENERIC.SP_LOAD_%s\" table.sqlObject\n     let lastOfDay    n = sprintf \"%s = LAST_VALUE(%s) OVER (PARTITION BY %s, %s ORDER BY %s ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\" (pad4 n) n businessKey (sourceDateO |> Option.defaultValue \"\") (intraDayOrderO |> Option.defaultValue \"\")\n     let together1    n = sprintf \"%s = LAST_VALUE(%s) OVER (PARTITION BY BusinessKey_, SourceDate_ ORDER BY SurrogateKey_ ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\" (pad4 n) n \nwith\n     new(table, source, fields            ) = Dimension(table, source, fields, []        , \"%s\")\n     new(table, source, fields, snowflakes) = Dimension(table, source, fields, snowflakes, \"%s\")\n     member this.TableReference     = table    .Reference\n     member this.TableBase          = tableBase\n     member this.Fields: (Field -> string list) -> string seq =\n                     fun chooser                  -> fields |> Seq.sort |> Seq.collect chooser\n     member this.AllFields          = this.Fields <| fieldNames\n     member this.FinTransViewFields = this.Fields <| fieldSource\n     member this.TargetFields       = this.Fields <| fieldTarget\n     member this.Existing           = this.Fields <| fieldSelectTable\n     member this.Source             = this.Fields <| fieldSelectSource    (if cSCD2 > 0 then lastOfDay else id)\n     member this.Together1          = this.Fields <| fieldSelectTogether1 (if cSCD2 > 0 then together1 else id)\n     member this.Together2          = [\n                                        sprintf \"NRec_  = ROW_NUMBER() OVER (PARTITION BY BusinessKey_ ORDER BY %s)\" <| if cSCD2 > 0 then \"SourceDate_, ISNULL(SurrogateKey_, 2147483647)\" else \"ISNULL(SurrogateKey_, 2147483647)\"\n                                        \"*\"\n                                      ]\n     member this.NewRec             = if cSCD2 > 0 then \n                                          this.Fields fieldSCD2Equal\n                                          |> String.concat \"\\n                 AND \"  \n                                          |> sprintf \"NewRec_ = IIF (%s, 0, 1)\"\n                                       else          \"NewRec_ = IIF (P.BusinessKey_ is NULL                  , 1, 0) \"\n     member this.Ordered            = [\n                                        yield                    \"S.SurrogateKey_ \"\n                                        yield                    \"S.BusinessKey_  \"\n                                        yield                    \"S.NRec_         \"\n                                        yield                    this.NewRec      \n                                        if cSCD2 > 0 then yield  \"S.SourceDate_   \"\n                                        yield!                   this.Fields fieldSCD2\n                                        yield!                   this.Fields fieldSCD1\n                                        yield!                   this.Fields fieldSCD0\n                                      ]\n     member this.SCD2Records        = [\n                                        \"SCD2Record_ = SUM(NewRec_    ) OVER (PARTITION BY BusinessKey_ ORDER BY NRec_ ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)\"\n                                        \"NextDate_   = MAX(SourceDate_) OVER (PARTITION BY BusinessKey_ ORDER BY NRec_ ROWS BETWEEN CURRENT ROW AND 1 FOLLOWING)\"\n                                        \"LastRec_    = MAX(NRec_      ) OVER (PARTITION BY BusinessKey_)\"\n                                        \"*\"\n                                      ]\n     member this.VersBeg            = [\n                                        sCD2BeginDateO.Value |> pad4 |> sprintf \"%s = MIN(SourceDate_) OVER (PARTITION BY BusinessKey_, SCD2Record_)\"\n                                        sCD2EndDateO  .Value |> pad4 |> sprintf \"%s = DATEADD(d, -1, MAX(IIF(NRec_ = LastRec_, '9999-12-31', NextDate_)) OVER (PARTITION BY BusinessKey_, SCD2Record_))\"\n                                        \"*\"\n                                      ]\n     member this.RKeys              = [\n                                        if sCD2CurrentO.IsSome then \n                                           yield sCD2CurrentO.Value  |> pad4 |> sprintf \"%s = IIF(%s = '9999-12-30', 'Y', 'N')\"                       <| sCD2EndDateO.Value\n                                        yield    surrogateKey        |> pad4 |> sprintf \"%s = MAX(SurrogateKey_) OVER (PARTITION BY BusinessKey_ %s)\" <| if sCD2BeginDateO.IsSome  then  \", \" + sCD2BeginDateO.Value else \"\"\n                                        yield    businessKey         |> pad4 |> sprintf \"%s = BusinessKey_\"\n                                        if changeReasonO.IsSome then\n                                           yield changeReasonO.Value |> pad4 |> sprintf \"%s = '---'\"\n                                        yield    \"*\"\n                                      ]\n     member this.fromTogether2      = \"    Together2 S\n LEFT JOIN Together2 P ON P.BusinessKey_ = S.BusinessKey_\n                      AND P.NRec_        = S.NRec_ - 1\"\n     member this.Withs              =\n         [\n             yield    SQLWith.New \"Existing     \" <| sqlSelect  table .FromWhere              this.Existing \n             yield    SQLWith.New \"Source       \" <| sqlSelectD source.FromWhere              this.Source   \n             yield    SQLWith.New \"Together0    \" <| \"SELECT *  FROM Existing UNION ALL SELECT * FROM Source\"\n             yield    SQLWith.New \"Together1    \" <| sqlSelectD \"Together0\"                   this.Together1\n             yield    SQLWith.New \"Together2    \" <| sqlSelect  \"Together1          \"         this.Together2\n             yield    SQLWith.New \"Ordered      \" <| sqlSelect  this.fromTogether2            this.Ordered     \n             if cSCD2 > 0 then                                  \n                yield SQLWith.New \"SCD2Records  \" <| sqlSelect  \"Ordered            \"         this.SCD2Records \n                yield SQLWith.New \"VersBeg      \" <| sqlSelect  \"SCD2Records        \"         this.VersBeg     \n                yield SQLWith.New \"RKeys        \" <| sqlSelect  \"VersBeg            \"         this.RKeys     \n             else                                               \n                yield SQLWith.New \"RKeys        \" <| sqlSelect  \"Ordered            \"         this.RKeys     \n         ]\n     member this.LastWith           = this.Withs |> Seq.last\n     member this.SelectIntoTemp     = if isSnowflaked then sprintf \"    , NewSurrogateKey_ = NEXT VALUE FOR Seq_%s\\n\" this.TableBase.sqlObject else \"\"\n                                      |> sprintf \"SELECT * \\n%s   INTO #TEMP\\n  FROM %s \\n WHERE NewRec_ = 1\" <| this.LastWith.name                                       \n     member this.Insert             = this.Fields fieldInsert\n                                      |> String.concat \"\\n, \"\n                                      |> sprintf \"   INSERT(%s %s)\" (if isSnowflaked then sprintf \"%s\\n,\" surrogateKey  else \"\")\n                                      |> indent  |> indent\n     member this.Values             = this.Fields fieldValues\n                                      |> String.concat \"\\n, \"\n                                      |> sprintf \"   VALUES(%s %s)\\n\" (if isSnowflaked then \"NewSurrogateKey_\\n,\" else \"\")\n                                      |> indent  |> indent\n     member this.Update             = this.Fields fieldUpdate\n                                      |> String.concat \"\\n, \"\n                                      |> indent |> indent\n     member this.WhenNotMatched     = sprintf \"WHEN NOT MATCHED BY TARGET THEN\\n%s\\n%s\" \n                                      <| this.Insert            <| this.Values\n     member this.WhenMatched        = (fun f -> if f <> \"\" then sprintf \"WHEN MATCHED THEN\\nUPDATE SET %s\" f else f)\n                                      <| this.Update\n     member this.Merge              = sprintf \"MERGE %s AS T\\nUSING #TEMP AS S\\nON (T.%s = S.%s)\\n%s\\n%s;\" \n                                      <| this.TableReference \n                                      <| surrogateKey        <| surrogateKey\n                                      <| this.WhenNotMatched\n                                      <| this.WhenMatched\n     member this.Query              = this.Withs\n                                      |> List.map (fun w -> w.ToString())\n                                      |> String.concat \", \"\n                                      |> sprintf \"WITH %s\"\n                                      |> sprintf \"%s \\n%s; \\n%s\" <| this.SelectIntoTemp <| this.Merge\n     member this.Procedure          = this.Query\n                                      |> sprintf \"BEGIN\\n  EXEC GENERIC.Log @SOURCE, '%s', 'Started Merge', '';\\n  %s\\n END\\n\" procedureName\n                                      |> sqlProcedure procedureName \"@SOURCE VARCHAR(30), @CURRENT_DTE DATE = NULL\" \n     member this.ProcedureName      = procedureName\n     member this.SurrogateKey       = surrogateKey\n     member this.BusinessKey        = businessKey\n     member this.SourceDateO        = sourceDateO\n     member this.SCD2BeginDateO     = sCD2BeginDateO\n     member this.SCD2EndDateO       = sCD2EndDateO  \n     member this.TableName          = table.sqlObject\n     member this.Verification       = sCD2BeginDateO \n                                      |> Option.map (fun b ->\n                                            let e = sCD2EndDateO.Value\n                                            sprintf \" AND (D.%s BETWEEN X.%s AND X.%s  OR D.%s BETWEEN X.%s AND X.%s ) \" b b e  e b e\n                                         )\n                                      |> defaultValue \"\"\n                                      |> sprintf \"SELECT * \\n  FROM %s D \\n WHERE EXISTS(SELECT * \\n         FROM %s X \\n      WHERE X.%s <> D.%s AND X.%s = D.%s %s) \\n ORDER BY %s %s\" \n                                            table.Reference table.Reference\n                                            surrogateKey    surrogateKey    \n                                            businessKey     businessKey\n                                      <| businessKey <| \"\"\n     member this.Snowflakes         = snowflakes\n                                      \n                                    \ntype FactField = \n    | Fact   of FinTransViewField\n    | OField of TargetField * value: string\n\nlet OField: TargetField -> string -> FactField = \n        fun fld            value  -> (fld, value.Trim()) |> OField\n\n[< NoComparison >]\ntype DimRef =\n    | DimRef of Dimension * SurrogateKey: TargetField option * BusinesKey: FinTransViewField option\nwith\n     member this.Dim                = match this with                                      DimRef (dim, _   , _) -> dim\n     member this.FactSurrogateKey   = match this with | DimRef (dim, Some key, _) -> key.Name | DimRef (dim, None, _) -> dim.SurrogateKey\n     member this.FactBusinessKey    = match this with | DimRef (dim, _, Some key) -> key.Name | DimRef (dim, _, None) -> dim.BusinessKey\n     member this.FinTransViewFields = match this with | DimRef (dim, sKO, bKO) -> seq [ yield! bKO |> Option.map (fun f -> f.Name) |> Option.toList ; yield! dim.FinTransViewFields ]\n     member this.TargetFields       = match this with | DimRef (dim, sKO, bKO) -> seq [ yield! sKO |> Option.map (fun f -> f.Name) |> Option.toList ; yield! dim.TargetFields       ]\n     static member New dim                             = DimRef(dim, None             , None            )\n     static member New(dim, surrogateKey             ) = DimRef(dim, Some surrogateKey, None            )\n     static member New(dim, surrogateKey, businessKey) = DimRef(dim, Some surrogateKey, Some businessKey)\nlet dimension: Dimension -> TargetField -> FinTransViewField -> DimRef = \n           fun dim          surroK         businK      -> DimRef (dim, tfldOption surroK, sfldOption businK)\n\ntype FactTable( table  : SQLTableView\n              , source : SQLTableView\n              , dims   : DimRef    seq\n              , fields : FactField seq\n              , extra  : Printf.StringFormat<_>) =\n     let procedureName  = sprintf \"GENERIC.SP_LOAD_%s\" table.sqlObject\nwith \n     member this.TableName      = table.sqlObject\n     member this.ProcedureName  = procedureName\n     member this.SourceFields   = fields \n                                  |> Seq.map (function \n                                              | Fact f       -> f.Name\n                                              | OField(_, f) -> f\n                                             )\n                                  |> Seq.append (dims |> Seq.collect (function dimR -> dimR.FinTransViewFields))\n                                  |> Seq.distinct\n     member this.TargetFields   = fields \n                                  |> Seq.collect (function \n                                                  | Fact f       -> []\n                                                  | OField(f, _) -> [ f.Name ]\n                                                 )\n                                  |> Seq.append (dims |> Seq.collect (function dimR -> dimR.TargetFields))\n                                  |> Seq.distinct\n     member this.Keys           = dims |> Seq.mapi(fun i dim -> sprintf \"D%d.%s\" i dim.Dim.SurrogateKey)\n     member this.Joins          = dims \n                                  |> Seq.mapi(fun i dim -> \n                                                    dim.Dim.SourceDateO\n                                                    |> Option.map (fun v -> sprintf \" AND S.%s BETWEEN D%d.%s AND D%d.%s\" v i dim.Dim.SCD2BeginDateO.Value i dim.Dim.SCD2EndDateO.Value)\n                                                    |> defaultValue \"\"\n                                                    |> sprintf \"%s D%d ON D%d.%s = S.%s %s\" (pad2 dim.Dim.TableBase.Reference) i i (pad2 dim.Dim.BusinessKey) (pad2 dim.FactBusinessKey)\n                                             )\n                                  |> Seq.toList                                                                 \n     member this.From           = sprintf \"%s S\" source.FromWhere\n                                  :: this.Joins\n                                  |> String.concat \"\\n LEFT JOIN \"\n     member this.Query          = fields \n                                  |> Seq.map (function \n                                              | Fact   f     -> sprintf \"S.%s\"    f.Name\n                                              | OField(f, v) -> sprintf \"%s = %s\" (pad2 f.Name) v\n                                             )\n                                  |> Seq.append this.Keys \n                                  |> sqlSelect this.From\n     member this.InsertFields   = fields \n                                  |> Seq.map (function \n                                              | Fact f       -> f.Name\n                                              | OField(f, _) -> f.Name\n                                             )\n                                  |> Seq.append (dims |> Seq.map (fun dim -> dim.FactSurrogateKey))\n                                  |> String.concat \"\\n     , \"\n     member this.Insert         = sprintf \"INSERT INTO %s\\n      (%s)\\n%s\" table.Reference this.InsertFields this.Query\n                                  |> sprintf extra\n     member this.Procedure      = sqlProcedure procedureName \"@SOURCE VARCHAR(30), @FROM DATE = NULL, @TO DATE = NULL\" this.Insert\n\nlet print: string -> unit =\n       fun txt    -> printf \"\\n\\n%s\\n\\n\" txt\n\nlet FinTransViewFields: FactTable -> Dimension seq -> string seq =\n    fun                 fTable       dims          -> \n        fTable.SourceFields \n        |> Seq.append     (dims |> Seq.collect (fun dim -> dim.FinTransViewFields))\n        |> Seq.filter     isIdentifier\n        |> Seq.distinctBy (fun f -> f.ToUpper())\n        |> Seq.sort\n\nlet targetFields: FactTable -> Dimension seq -> string seq =\n    fun           fTable       dims          -> \n        fTable.TargetFields \n        |> Seq.append     (dims |> Seq.collect (fun dim -> dim.TargetFields))\n        |> Seq.filter     isIdentifier\n        |> Seq.distinctBy (fun f -> f.ToUpper())\n        |> Seq.sort\n\n\nlet getDecl: string -> (string * bool) option =\n         fun fname  -> fieldDecl\n                       |> Seq.choose (fun (name, typeDecl, nullable) -> if name = fname.ToUpper() then (typeDecl, nullable = 1) |> Some else None)\n                       |> Seq.tryHead\n\nlet getDefault: string -> string option =\n            fun fname  -> fieldDefault\n                          |> Array.tryPick (fun (name, value) -> if name = fname.ToUpper() then Some value else None)\n\nlet convert fName v =\n    getDecl fName \n    |> Option.map (fun (fType, nullable) -> fType.Trim())\n    |> Option.map (fun t ->\n        let conv = sprintf \"CONVERT(%s, %s)\" t v\n        match t with\n        | \"date\"   \n        | \"datetime\" -> sprintf \"IIF(ISDATE(%s) = 0, NULL, %s)\"  v\n        | \"int\"      -> sprintf \"IIF(ISNUMERIC(%s) = 0, 0, %s)\"  v\n        | _          -> sprintf \"%s\"\n        <| conv\n        ) \n    |> Option.defaultValue v\n\nlet applyDefault fName v =\n    getDecl fName \n    |> Option.bind (fun (fType, nullable) ->\n           if nullable then None\n           else getDefault fName\n           |> Option.map (sprintf \"ISNULL(%s, %s)\" v)\n    )\n    |> Option.defaultValue v\n\nlet equalField fName v =\n    fName\n    |> nameS\n    |> pad4 \n    |> sprintf \"%s = %s\"  <| v\n\ntype FinTransViewField\nwith \n    \n    member this.Convert      v = convert      this.Name v\n    member this.applyDefault v = applyDefault this.Name v\n    member this.equal        v = equalField   this.Name v\n    member this.DefaultO       = getDefault   this.Name\n\nlet cast: FinTransViewField -> string -> bool   -> string =\n      fun field                value     noConv ->    \n          value\n          |> (if noConv then id else field.Convert)\n          |> field.applyDefault \n          |> field.equal\n\ntype QueryField(target: FinTransViewField, value: string, doNotConvert: bool) =\n    let name = target.Name\nwith\n    member this.Entry = cast target value doNotConvert\n    member this.Name  = name\n    new(target: FinTransViewField, value: string) = QueryField(target, value, false)\n\nlet vwField: FinTransViewField -> string -> QueryField = \n         fun fld                  value  -> QueryField(fld, value.Trim())\n\n/// like vwField but does not CONVERT the value\n/// it is useful to avoid using ISDATE on date fields which is not allowed\nlet vwFldNC: FinTransViewField -> string -> QueryField = \n         fun fld                  value  -> QueryField(fld, value.Trim(), true)\n\nlet inline getUnionNames typ =\n    Microsoft.FSharp.Reflection.FSharpType.GetUnionCases typ\n    |> Seq.map (fun e -> e.Name |> aNumeral)\n    |> Seq.filter ((<>)\"Nil_\")\n    |> Seq.sort\n    |> Seq.toArray\n\nlet finTransViewFieldNames = getUnionNames typeof<FinTransViewField>\nlet targetFieldNames       = getUnionNames typeof<TargetField>\n\nlet missingFields: QueryField seq -> string[] =\n    fun            fields         -> \n        finTransViewFieldNames\n        |> Array.filter (fun e -> fields |> Seq.exists (fun f -> f.Name = e) |> not)\n\nlet allFields() = missingFields (seq[])\n                  |> Seq.sort\n                  |> String.concat \"\\n        , \"\n\nlet setDefault: string -> string =\n            fun field  -> getDefault    field \n                          |> Option.defaultValue \"(NULL)\" \n                          |> (if field = \"LOAD_DTE\" then id else convert    field)\n                          |> equalField field\n\ntype FactView(name: SQLTableView, source: SQLTableView, fields: QueryField seq) =\n    let fieldsCached = fields |> Seq.toArray\n    let getFieldValue fName =\n        fieldsCached \n        |> Array.tryFind      (fun q -> q.Name    = fName)\n        |> Option.map         (fun q -> q.Entry          )\n        |> Option.defaultWith (fun _ -> setDefault  fName)\nwith\n     member this.Name     = name.schema\n     member this.ViewName = name.Call\n     member this.Query    = \n         finTransViewFieldNames \n         |> Array.map  getFieldValue\n         |> String.concat \"\\n        , \"\n         |> sprintf \"SELECT %s\\n FROM %s;\\n\" <| source.FromWhere\n         |> sprintf \"%s\\n as %s; \\nGO\" (sqlDropCreate VIEW this.ViewName)\n\nlet missingDefaults() =\n    finTransViewFieldNames \n    |> Seq.map    (fun n -> n, getDecl n, getDefault n)\n    |> Seq.filter (fun (n, typeO, defO) -> \n         match typeO, defO with\n         | None               , _\n         | Some (_    , false), None -> true\n         | _                         -> false\n    )\n    |> Seq.map     (fun (n, typO, _) ->\n        (n, typO, \n            match typO with\n            | Some(\"int\"       , _) -> \"0\"\n            | Some(\"varchar(1)\", _)\n            | Some(\"varchar(2)\", _) -> \"'*'\"\n            | Some(\"date\"      , _) \n            | Some(\"datetime\"  , _) -> \"'1900-01-01'\"\n            | _                     -> \"'***'\"\n        )\n    )\n\nlet missingDecls () =\n    fieldDecl\n    |> Array.filter(fun (n, typ, nullable) -> Seq.exists ((=)n) finTransViewFieldNames |> not)\n    |> Array.filter(fun (n, typ, nullable) -> Seq.exists ((=)n) finTransViewFieldNames |> not)\n    \n\nlet inline str4 s = s |> sprintf \"%A\" |> pad4 \nlet inline str2 s = s |> sprintf \"%A\" |> pad2 \n\nlet mutable AllDimensions: Dimension  list = []\nlet mutable AllFactViews : FactView   list = []\nlet mutable AllFactTables: FactTable  list = []\n\ntype Dimension\nwith \n     static member New( tableBase : SQLTableView\n                      , source    : SQLTableView\n                      , fields    : Field  seq\n                      , snowflakes: string seq\n                      , extra     : Printf.StringFormat<_>) =\n          let dim = Dimension(tableBase, source, fields, snowflakes, extra)\n          AllDimensions <- List.append AllDimensions [ dim ]\n          dim\n     static member New(table, source, fields            ) = Dimension.New(table, source, fields, []        , \"%s\")\n     static member New(table, source, fields, snowflakes) = Dimension.New(table, source, fields, snowflakes, \"%s\")\n\ntype FactTable\nwith \n     static member New( table  : SQLTableView\n                      , source : SQLTableView\n                      , dims   : DimRef    seq\n                      , fields : FactField seq\n                      , extra  : Printf.StringFormat<_>) =\n          let ft = FactTable(table, source, dims, fields, extra)\n          AllFactTables <- List.append AllFactTables [ ft ]\n          ft\n\ntype FactView\nwith \n     static member New(name: SQLTableView, source: SQLTableView, fields: QueryField seq) =\n          let fv = FactView(name, source, fields)\n          AllFactViews <- List.append AllFactViews [ fv ]\n          fv\n\n(*          \n(*keep*)#load \"BetterFSI.fsx\"  // <<<==== Execute first in F# Interactive\nDo __SOURCE_FILE__ __LINE__ //\nDo __SOURCE_FILE__ __LINE__ //  missingDecls()    |> Seq.iter (printfn \"%A\")\nDo __SOURCE_FILE__ __LINE__ //  missingDefaults() |> Seq.iter (printfn \"%A\")\nDo __SOURCE_FILE__ __LINE__ //  missingDefaults() |> Seq.iter (fun (n, _, d) -> printfn \"(%s, %s)\" (str4 n) (str2 d))\nDo __SOURCE_FILE__ __LINE__ //  finTransViewFieldNames |> Seq.filter (fun a -> a.StartsWith \"A#\" ) |>\n*)\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [{"SnippetId" :"133131ac-9ee5-47b2-8047-351746ee9e10"}, {"SnippetId" :"62d0b48f-6f54-4fa2-a455-e1f288cfd0c8"}, {"SnippetId" :"b67af98c-895c-4d9c-bee1-2c43359c6885"}], "snpProperties": [], "snpGeneration": 9}, {"snpId": {"SnippetId" :"38aa569a-caf7-4c97-81c7-12ab6a9faec4"}, "snpName": "-------- READ ME --------", "snpContent": "\n\nTo update and regenerate views and procedures:\n\n- Make the required changes to the Views and dimension definitions below \n  and/or the Fields, FieldDecls and Defaults above\n- When ready to send to SQL Server, \n  click on \"Copy View\" or \"Copy Procedure\" button on the right side\n- After a while (ignore the first 'Done!') the query will appear in the Output pane and it will be in the Clipboard\n- Paste into SSMS and execute\n\nSnowFlaked dimensions.\nTo also update the snowflaked dimensions superviews make sure to check the box for \"SQLFetchFields & SnowFlakeViews\"\nA connection to the SQL Server is required for this option to work.\nThe connection string can be found in line 6.\n\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1518}, {"snpId": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpName": "", "snpContent": "module Views =\r\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [{"SnippetId" :"0da8d01b-168f-4816-9895-99fb9f2e4a7b"}, {"SnippetId" :"133131ac-9ee5-47b2-8047-351746ee9e10"}, {"SnippetId" :"62d0b48f-6f54-4fa2-a455-e1f288cfd0c8"}, {"SnippetId" :"b67af98c-895c-4d9c-bee1-2c43359c6885"}], "snpProperties": [["Copy View", "CodePresence.present <- Map.empty\n(FSGlobal.SlowlyChangingDimensions.AllFactViews |> Seq.find(fun st -> st.Name = Some \"${FSharpStation.SnippetName}\") ).Query\n|> fun s -> printfn \"%s\" s ; FSGlobal.Useful.sCopy s"], ["Buttons", "\"display: grid; grid-gap: 5px\"\n: h3 \"text-align: center;align-self: self-end;margin: 0px;\" \"${FSharpStation.SnippetName}:\"\nCopy View\n:div \"\"\n:li \"\" \"SQL view: ${FSharpStation.SnippetName}.VW_FG_FIN_TRANS2\"\n:li \"\" \"Click to copy to clipboard. Wait ... ignore first Done!\"\n:li \"font-weight:700\" \"Paste and execute into database: ARStaging\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n"]], "snpGeneration": 1676}, {"snpId": {"SnippetId" :"d2205189-f6a8-4e24-81b2-5b485d18f424"}, "snpName": "EMS_MSB", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"EMS_MSB\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"EMS_MSB\" \"FINTRANS\" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'EMS_MSB'                                                           \"\n                vwField SRC_SYS_ID                          \"'EMS_MSB-'+ CONVERT(VARCHAR, Account_No)                            \"\n\n                vwField INTRA_DAY_ORDER                     \"case Transaction_Type \n                                                              when 'Payment'          then 20              \n                                                              when 'Paid'             then 20             \n                                                              when 'Adjustment'       then 30         \n                                                              when 'Billed'           then 10                                                            \n                                                              when 'Turnback'         then 40                                                              \n                                                              when 'Turnover'         then 50                                                              \n                                                              end + IIF(TAG_STATUS='Closed', 2, 1)\"            \n\n                vwField BUS_AREA_ID                         \"'6400'                                                              \"\n// DIM_CARRIER                                                                                                                   \n                vwField CARRIER_SRC                         \"'EMS_MSB'                                                           \"\n// DIM_CARRIER PROCEDURE                                                                                                        \n                vwField CARRIER_PROCEDURE_SRC               \"'EMS_MSB'                                                           \"\n// DIM_COH_ORG                                                                                                                   \n                vwField DEPT_NAME                           \"'HFD'                                                               \"\n                vwField DEPT_LONG_NAME                      \"'Houston Fire Department'                                           \"\n                vwField DIV_NAME                            \"'EMS'                                                               \"\n                vwField DIV_LONG_NAME                       \"'Emergency Medical Services'                                        \"\n// DIM_COLL_PERSON                                                                                                               \n                vwField COLL_PERSON_ID                      \"'EMS_MSB-111'                                                       \"\n                vwField COLL_PERSON_NAME                    \"'EMS_MSB Employee'                                                  \"\n                vwField DIGITECH_ID                         \"'EMS_MSB generic'                                                   \"\n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"'4600012363'                                                        \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'EMS_MSB-'+ CONVERT(VARCHAR, Account_No)                            \"\n                vwField CUST_NAME                           \"Name                                                                \"\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"Transaction_Date                                                    \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'Employee'                                                          \"\n                vwField EMP_NAME                            \"'EMS_MSB '                                                          \"\n                vwField COH_EMP_NUM                         \"'EMS_MSB-111'                                                       \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"case Transaction_Type\t\n\t\t\t\t                                             when 'Payment'             then 'Paid' \n\t\t\t\t                                             when 'Adjustment'\t\t\tthen 'Adjustment'\n\t\t\t\t                                             when 'Turnback'\t\t\tthen 'Turnback'\n\t\t\t\t                                             when 'Turnover'\t\t\tthen 'Turnover'\n\t\t\t\t                                             else                            'Turnover'   end                      \"\n                vwField DET_TRANS_DESCR                     \"case Transaction_Type\t\n\t\t\t\t                                             when 'Payment'             then 'Base, City Portion Paid' \n\t\t\t\t                                             when 'Adjustment'\t\t\tthen 'Base Adjustment'\n\t\t\t\t                                             when 'Turnback'\t\t\tthen 'Base Amount Turnback'\n\t\t\t\t                                             when 'Turnover'\t\t\tthen 'Base Amount Turnover'\n\t\t\t\t                                             else                            'Base Amount Turnover'   end          \"\n                vwField DET_TRANS_CODE                      \"'EMS_MSB-' + Transaction_Type                                       \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"Account_No                                                          \"\n                vwField INCDT_DESCR                         \"'Emergency Transport'                                               \"\n                vwField INCDT_TYPE                          \"'EMS Transport'                                                     \"\n                vwField INCDT_CAT                           \"'EMS Transport'                                                     \"\n                vwFldNC INCDT_DTE                           \"Issue_Date                                                          \"\n// DIM INCDT EMS DET\n                vwField EMS_INCDT                           \"Account_No                                                          \"\n                vwField DISPATCH_NUM                        \"Account_No                                                          \"\n// DIM_ITEM                                                                                                                      \n                vwField ITEM_TYPE                           \"'EMS_MSB Patient'                                                   \"\n// DIM ITEM PT DET\n                vwField PT_GNDR                             \"PT_GNDR                                                             \"\n                vwField PT_AGE                              \"PT_AGE                                                              \"\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                     \"Tag                                                                 \"      \n                vwField RECEIVABLE_EVER_TRANS_FLAG          \"'Y'                                                                 \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE             \"IIF(DATEADD(year,1,Issue_Date) > Turnover_Date, Turnover_Date, DATEADD(year,1,Issue_Date))\"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE           \"Issue_Date                                                          \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE              \"Turnover_Date                                                       \"   \n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE          \"Turnover_Date                                                       \"   \n                vwField VERS_ASSIGNED_VEND                  \"'0000130521'                                                        \"   \n                vwField RECEIVABLE_MSTR_STAT                \"TAG_STATUS                                                          \"      \n                vwField ITEM_DESCR                          \"'EMS Patient'                                                       \"    \n                vwField ORIG_BILL_NAME                      \"Name                                                                \"     \n                vwFldNC RECEIVABLE_FNL_PAY_DTE              \"Final_Payment_Date                                                  \"\n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"Transaction_Amount                                                  \"      \n                vwFldNC POST_DTE                            \"Transaction_Date                                                    \"                               \n        ]\n)\n             \n(* \nopen SlowlyChangingDimensions\nprint EMS_MSBView.Query       \n*)\n\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 593}, {"snpId": {"SnippetId" :"a0f0e7d5-26ad-45cd-a8d9-8342bd14095f"}, "snpName": "SMARTCM", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"SMARTCM\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"SMARTCM\" \"FINTRANS   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'SMARTCM'                                                    \"\n                vwField SRC_SYS_ID                          \"'SMARTCM-' + SRC_SYS_ID                                      \"\n                                                                                                                     \n\n// DIM_CARRIER                                                                                                                  \n                vwField CARRIER_SRC                         \"'***'                                                         \"\n// DIM_CARRIER PROCEDURE                                                                                                       \n                vwField CARRIER_PROCEDURE_SRC               \"'***'                                                         \"\n// DIM_COH_ORG                                                                                                                  \n                vwField DEPT_NAME                           \"'HFD'                                                          \"\n                vwField DEPT_LONG_NAME                      \"'Houston Fire Department'                                      \"\n                vwField DIV_NAME                            \"'Prevention (LSB)'                                             \"\n                vwField DIV_LONG_NAME                       \"'Prevention (Life Safety Bureau)'                              \"\n// DIM_COLL_PERSON                                                                                                              \n                vwField COLL_PERSON_ID                      \"'SMARTCM-'+COH_EMP_NUM                                         \"\n                vwField COLL_PERSON_NAME                    \"EMP_NAME                                                       \"\n                vwField COLL_PERSON_TYPE                    \"'COH Employee'                                                 \"\n                \n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"CONTR_ID                                                        \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'SMARTCM-'+ CUST_ID                                             \"\n                vwField CUST_NAME                           \"CUST_NAME                                                       \"\n                vwField CUST_EMAIL_ADDR                     \"CUST_EMAIL_ADDR                                                 \"\n                vwField CUST_PHN_NUM_1                      \"CUST_PHN_NUM_1                                                  \"\n                vwField CUST_FAX_NUM                        \"CUST_FAX_NUM                                                    \"\n                vwField FED_TAX_ID                          \"FED_TAX_ID                                                      \"\n                vwField CUST_TYPE                           \"CUST_TYPE                                                       \"\n                vwField BUS_CONT_PERSON_NAME                \"BUS_CONT_PERSON_NAME                                            \"\n                vwField STATE_SALES_TAX_ID                  \"STATE_SALES_TAX_ID                                              \"\n                vwField DL_ISSUE_STATE                      \"DL_ISSUE_STATE                                                  \"\n                vwField DL_NUM                              \"DL_NUM                                                          \"\n                vwField CUST_ADDR_LINE_1                    \"CUST_ADDR_LINE_1                                                \"\n                vwField CUST_ADDR_LINE_2                    \"CUST_ADDR_LINE_2                                                \"\n                vwField CUST_ADDR_LINE_3                    \"CUST_ADDR_LINE_3                                                \"\n                vwField CUST_IN_CITY_FLAG                   \"IIF(CUST_CITY='HOUSTON','Y','N')                                \"\n                vwField CUST_CITY                           \"CUST_CITY                                                       \"\n                vwField CUST_STATE                          \"CUST_STATE                                                      \"\n                vwField CUST_ZIP_CODE                       \"CUST_ZIP_CODE                                                   \"\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"TRANS_DTE                                                       \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'COH Employee'                                                \"\n                vwField EMP_NAME                            \"EMP_NAME                                                      \"\n                vwField COH_EMP_NUM                         \"COH_EMP_NUM                                                    \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"MSTR_TRANS_TYPE                                                 \"\n                vwField DET_TRANS_DESCR                     \"DET_TRANS_DESCR                                                 \"\n                vwField SMARTCM_OTHER_CRITERIA              \"SMARTCM_OTHER_CRITERIA                                         \"\n                vwField SMARTCM_IS_FEE                      \"SMARTCM_IS_FEE                                                 \"\n                vwField SMARTCM_IS_ADJMT                    \"SMARTCM_IS_ADJMT                                               \"\n                vwField DET_TRANS_CODE                      \"DET_TRANS_CODE                                               \"\n                //vwField SMARTCM_IS_PAYMENT                  \"SMARTCM_IS_PAYMENT                                             \"\n\n\n// DIM INCDT    \n               // vwField REASON_INCDT_NOT_BILLED             \"REASON_INCDT_NOT_BILLED                                         \"\n                vwField BILLED_FLAG                         \"BILLED_FLAG                                                     \"\n                vwField INV_NUM                             \"INV_NUM                                                         \"\n                vwField PERMIT_IS_CURR_AT_TIME_OF_INCDT_FLAG\"PERMIT_IS_CURR_AT_TIME_OF_INCDT_FLAG                            \"\n                vwField INCDT_DESCR                         \"INCDT_DESCR                                                     \"\n                vwField VIO_CODE                            \"VIO_CODE                                                        \"\n                vwField INCDT_TYPE                          \"'False Fire Alarm'                                              \"\n                vwField INCDT_CAT                           \"'Fire'                                                          \"\n                vwFldNC INCDT_DTE                           \"INCDT_DTE                                                       \"\n                vwField INCDT_TIME                          \"INCDT_TIME                                                      \"\n                vwField INCDT_ADDR_LINE_1                   \"INCDT_ADDR_LINE_1                                               \"\n                vwField INCDT_ST_NUM                        \"INCDT_ST_NUM                                                    \"\n                vwField INCDT_ST_NAME                       \"INCDT_ST_NAME                                                   \"\n                vwField INCDT_ST_TYPE                       \"INCDT_ST_TYPE                                                   \"\n                vwField INCDT_IN_CITY_FLAG                  \"IIF(INCDT_CITY='HOUSTON','Y','N')                               \"\n                vwField INCDT_CITY                          \"INCDT_CITY                                                      \"\n                vwField INCDT_STATE                         \"INCDT_STATE                                                     \"\n                vwField INCDT_CTRY                          \"'USA'                                                           \"\n                vwField INCDT_CNTY                          \"INCDT_CNTY                                                      \"\n\n                vwField INCDT_ST_DIR                        \"INCDT_ST_DIR                                                   \"\n                vwField INCDT_ST                            \"INCDT_ST                                                       \"\n\n\n                vwField INCDT_ZIP_CODE                      \"INCDT_ZIP_CODE                                                  \"\n                vwField INCDT_APT_LOT                       \"INCDT_APT_LOT                                                   \"\n                vwField SRC_SYS_ID                          \"'SMARTCM'+SRC_SYS_ID                                            \"\n\n// DIM_ITEM    \n                vwField ITEM_TYPE                           \"'Fire Alarm Permit'\t                                         \"\n     //           vwField ITEM_ADDR_LINE_1                    \"ITEM_ADDR_LINE_1                                                \" \n     //           vwField ITEM_ST_NUM                         \"ITEM_ST_NUM                                                \"\n     //           vwField ITEM_ST_NAME                        \"ITEM_ST_NAME                                                \"\n     //           vwField ITEM_ST_TYPE                        \"ITEM_ST_TYPE                                                \"\n     //           vwField ITEM_CITY                           \"ITEM_CITY                                                       \"\n     //           vwField ITEM_IN_CITY_FLAG                   \"IIF(ITEM_CITY='HOUSTON','Y','N')                                \"\n\n\n     //           vwField ITEM_ST_DIR                         \"ITEM_ST_DIR                                                    \"                \n     //           vwField ITEM_ST                             \"ITEM_ST                                                        \" \n     //           vwField ITEM_APT_LOT                        \"ITEM_APT_LOT                                                   \"\n                \n                //DIM ITEM DET\n     //           vwField CURR_FIRE_ALM_PERMIT_FLAG           \"CURR_FIRE_ALM_PERMIT_FLAG                                      \"\n     //           vwField APPLICTN_RECV_DTE                   \"APPLICTN_RECV_DTE                                              \"\n     //           vwField EXCL_TYPE                           \"EXCL_TYPE                                                      \"\n     //           vwField ALLOWABLE_NO_CHRG_INCDTS            \"ALLOWABLE_NO_CHRG_INCDTS                                       \"\n     //           vwField PERMIT_ISSUE_DTE                    \"PERMIT_ISSUE_DTE                                               \"\n     //           vwField PERMIT_EXP_DTE                      \"PERMIT_EXP_DTE                                                 \"\n     //           vwField TYPE_OF_ALM_SITE                    \"TYPE_OF_ALM_SITE                                               \"\n     //           vwField FIRE_ALM_PURPOSE                    \"FIRE_ALM_PURPOSE                                               \"\n     //           vwField ALM_MNT_CMPNY                       \"ALM_MNT_CMPNY                                                  \"\n     //           vwField ALM_INSTL_CMPNY                     \"ALM_INSTL_CMPNY                                                \"\n     //           vwField ALM_INSTL_DTE                       \"ALM_INSTL_DTE                                                  \"\n     //           vwField FIRE_ALM_PERMIT_NUM                 \"FIRE_ALM_PERMIT_NUM                                            \"\n     //           vwField FIRE_ALM_PERMIT_ACTV_FLAG           \"FIRE_ALM_PERMIT_ACTV_FLAG                                      \"\n     //           vwField ALM_REG_KEY                         \"ALM_REG_KEY                                                    \"\n\n                \n     //           vwField ITEM_DESCR                          \"ITEM_DESCR                                                      \"\n\n\n\n\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                 \"RECEIVABLE_STAT                                                     \"\n                vwFldNC RECEIVABLE_STAT_CHG_DTE         \"RECEIVABLE_STAT_CHG_DTE                                             \"\n                vwField FIRE_ALM_AGING_RST_FLAG         \"FIRE_ALM_AGING_RST_FLAG                                             \"\n                vwField RECEIVABLE_EVER_TRANS_FLAG      \"RECEIVABLE_EVER_TRANS_FLAG                                          \"\n\n                vwField RECEIVABLE_MSTR_STAT            \"RECEIVABLE_MSTR_STAT                                                \"\n                vwFldNC RECEIVABLE_MSTR_STAT_CHG_DTE    \"RECEIVABLE_MSTR_STAT_CHG_DTE                                        \"\n                vwFldNC RECEIVABLE_1ST_PAY_DTE          \"RECEIVABLE_1ST_PAY_DTE                                              \"\n                vwFldNC RECEIVABLE_FNL_PAY_DTE          \"RECEIVABLE_FNL_PAY_DTE                                              \"\n                vwFldNC FIRE_ORIG_ISSUE_DTE             \"FIRE_ORIG_ISSUE_DTE                                                 \"\n\n\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE       \"RECEIVABLE_VERS_ISSUE_DTE                                           \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE          \"RECEIVABLE_VERS_TO_DTE                                              \"\n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE      \"RECEIVABLE_VERS_DELINQ_DTE                                          \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE         \"RECEIVABLE_VERS_DUE_DTE                                             \"\n\n                vwField VERS_ASSIGNED_VEND              \"VERS_ASSIGNED_VEND                                                  \"\n                vwField ORIG_BILL_NAME                  \"CUST_NAME                                                           \"\n                vwField UNK_CUST_AT_BILL_FLAG           \"UNK_CUST_AT_BILL_FLAG                                               \"\n                vwField RECEIVABLE_EVER_TRANS_FLAG      \"'Y'                                                                 \"\n                vwField ITEM_DESCR                      \"ITEM_DESCR                                                          \"\n                 \n              \n// Dim_Receivable_Det DIM_RECEIVABLE_FIRE_ALM_CIT_DET\n                vwField WORK_STAT                     \"WORK_STAT                                                           \"\n                vwField VOID_CODE                     \"VOID_CODE                                                           \"\n                vwField VOID_DESCR                    \"VOID_DESCR                                                          \"\n\n//Dim Business Area\n                vwField BUS_AREA_ID                     \"BUS_AREA_ID                                                         \"\n\n// Dim Functional Area\n                vwField FUNC_AREA_ID                    \"FUNC_AREA_ID                                                        \"\n// Dim Fund ID\n                vwField FUND_ID                         \"FUND_ID                                                             \"\n// Dim Fund Cntr ID\n                vwField FUND_CNTR_ID                    \"FUND_CNTR_ID                                                        \"\n// Dim GL Acct  \n                vwField GL_ACCT_ID                      \"GL_ACCT_ID                                                          \"\n\n// FG_FIN_TRANS\n                vwField TRANS_AMT                        \"TRANS_AMT\t                                                         \"      \n                vwField SRC_SYS_TRANS_ID                 \"'SMARTCM'                                                          \"      \n                \n                vwFldNC DTE                              \"TRANS_DTE                                                          \" \n                vwFldNC POST_DTE                         \"TRANS_DTE                                                          \"                               \n        ]\n)", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 772}, {"snpId": {"SnippetId" :"aff4ab7b-921e-4509-9f87-eb70e7bb86cb"}, "snpName": "PMAM", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"PMAM\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"PMAM\" \"FINTRANS   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'PMAM'                                                          \"\n                vwField SRC_SYS_ID                          \"'PMAM-' + SRC_SYS_ID                                            \"\n                                                                                                                     \n\n// DIM_CARRIER                                                                                                                  \n                vwField CARRIER_SRC                         \"'***'                                                           \"\n// DIM_CARRIER PROCEDURE                                                                                                       \n                vwField CARRIER_PROCEDURE_SRC               \"'***'                                                           \"\n// DIM_COH_ORG                                                                                                                  \n                vwField DEPT_NAME                           \"'ARA'                                                           \"\n                vwField DEPT_LONG_NAME                      \"'Administration & Regulatory Affairs'                           \"\n                vwField DIV_NAME                            \"'Regulatory Affairs'                                            \"\n                vwField DIV_LONG_NAME                       \"'Regulatory Affairs'                                            \"\n// DIM_COLL_PERSON                                                                                                              \n                vwField COLL_PERSON_ID                      \"'PMAM-***'                                                      \"\n                vwField COLL_PERSON_NAME                    \"'PMAM Employee'                                                 \"\n                vwField COLL_PERSON_TYPE                    \"'COH Contractor'                                                \"\n                \n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"CONTR_ID                                                        \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'PMAM-'+ CUST_ID                                                \"\n                vwField CONFI_CUST_FLAG                     \"'N'                                                             \"\n                vwField CUST_NAME                           \"CUST_NAME                                                       \"\n                vwField CUST_EMAIL_ADDR                     \"CUST_EMAIL_ADDR                                                 \"\n                vwField CUST_PHN_NUM_1                      \"CUST_PHN_NUM_1                                                  \"\n                vwField CUST_TYPE                           \"CUST_TYPE                                                       \"\n                vwField BUS_CONT_PERSON_NAME                \"BUS_CONT_PERSON_NAME                                            \"\n                vwField DL_NUM                              \"DL_NUM                                                          \"\n                vwField CUST_PHN_NUM_1                      \"CUST_PHN_NUM_1                                                  \"\n                vwField CUST_PHN_NUM_2                      \"CUST_PHN_NUM_2                                                  \"\n                vwField CUST_IS_VEND_FLAG                   \"'N'                                                             \"\n                vwField JV_CUST_FLAG                        \"'N'                                                             \"\n                vwField CUST_ADDR_LINE_1                    \"CUST_ADDR_LINE_1                                                \"\n                vwField CUST_IN_CITY_FLAG                   \"IIF(CUST_CITY='HOUSTON','Y','N')                                \"\n                vwField CUST_CITY                           \"CUST_CITY                                                       \"\n                vwField CUST_STATE                          \"CUST_STATE                                                      \"\n                vwField CUST_CTRY                           \"CUST_CTRY                                                       \"\n                vwField CUST_ZIP_CODE                       \"CUST_ZIP_CODE                                                   \"\n                vwField CUST_ZIP_PLUS_4                     \"CUST_ZIP_PLUS_4                                                 \"\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"TRANS_DTE                                                       \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'COH Contractor'                                                \"\n                vwField EMP_NAME                            \"'PMAM Employee'                                                 \"\n                vwField COH_EMP_NUM                         \"'PMAM-***'                                                      \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"MSTR_TRANS_TYPE                                                 \"\n                vwField DET_TRANS_DESCR                     \"DET_TRANS_DESCR                                                 \"\n                vwField DET_TRANS_CODE                      \"'PMAM-' + DET_TRANS_CODE                                        \"\n// DIM INCDT    \n                vwField BILLED_FLAG                         \"BILLED_FLAG                                                     \"\n                vwField INV_NUM                             \"INV_NUM                                                         \"\n                vwField INCDT_DESCR                         \"INCDT_DESCR                                                     \"\n                vwField INCDT_TYPE                          \"'Burglar Alarm'                                                 \"\n                vwField INCDT_CAT                           \"'Burglar Alarm'                                                 \"\n                vwFldNC INCDT_DTE                           \"INCDT_DTE                                                       \"\n                vwField INCDT_TIME                          \"INCDT_TIME                                                      \"\n                vwField INCDT_ADDR_LINE_1                   \"INCDT_ADDR_LINE_1                                               \"\n                vwField INCDT_IN_CITY_FLAG                  \"INCDT_IN_CITY_FLAG                                              \"\n                vwField INCDT_CITY                          \"INCDT_CITY                                                      \"\n                vwField INCDT_STATE                         \"INCDT_STATE                                                     \"\n                vwField INCDT_CTRY                          \"INCDT_CTRY                                                      \"\n                vwField INCDT_ZIP_CODE                      \"INCDT_ZIP_CODE                                                  \"\n                vwField INCDT_ZIP_PLUS_4                    \"INCDT_ZIP_PLUS_4                                                \"\n                vwField SRC_SYS_ID                          \"'PMAM'+SRC_SYS_ID                                               \"\n\n// DIM_ITEM    \n                vwField ITEM_TYPE                           \"'Burglar alarm'                                                  \"\n      //          vwField ITEM_STAT                           \"ITEM_STAT                                                       \"\n      //          vwField ITEM_ADDR_LINE_1                    \"ITEM_ADDR_LINE_1                                                \" \n     //           vwField ITEM_CITY                           \"ITEM_CITY                                                       \"\n    //            vwField ITEM_IN_CITY_FLAG                   \"ITEM_IN_CITY_FLAG                                               \"\n   //             vwField ITEM_STATE                          \"'Texas'                                                         \"\n   //             vwField ITEM_DESCR                          \"ITEM_DESCR                                                      \"\n  //              vwField ITEM_ZIP_CODE                       \"ITEM_ZIP_CODE                                                   \"\n  //              vwField ITEM_ZIP_PLUS_4                     \"ITEM_ZIP_PLUS_4                                                 \"\n                \n//DIM ITEM DET\n //               vwField REG_HOLDER_FLAG                     \"REG_HOLDER_FLAG                                                 \"\n //               vwField TYPE_OF_ALM_SITE                    \"TYPE_OF_ALM_SITE                                                \" \n //               vwField ALM_TYPE                            \"ALM_TYPE                                                        \"\n //               vwField ALM_MNT_CMPNY                       \"ALM_MNT_CMPNY                                                   \"\n //               vwField SUSPD_PERMIT_DTE                    \"SUSPD_PERMIT_DTE                                                \"\n //               vwField SUSPD_PERMIT_RSN                    \"SUSPD_PERMIT_RSN                                                \"\n //               vwField PERMIT_NUM                          \"PERMIT_NUM                                                     \"\n //               vwField PERMIT_NAME                         \"PERMIT_NAME                                                     \"\n //               vwField PERMIT_ISSUE_DTE                    \"SUSPD_PERMIT_RSN                                                \"\n  //              vwField PERMIT_EXP_DTE                      \"PERMIT_NUM                                                     \"\n\n\n\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                 \"RECEIVABLE_STAT                                                     \"\n                vwFldNC RECEIVABLE_STAT_CHG_DTE         \"RECEIVABLE_STAT_CHG_DTE                                             \"\n                vwField RECEIVABLE_MSTR_STAT            \"RECEIVABLE_MSTR_STAT                                                \"\n                vwFldNC RECEIVABLE_MSTR_STAT_CHG_DTE    \"RECEIVABLE_MSTR_STAT_CHG_DTE                                        \"\n                vwFldNC RECEIVABLE_1ST_PAY_DTE          \"RECEIVABLE_1ST_PAY_DTE                                              \"\n                vwFldNC RECEIVABLE_FNL_PAY_DTE          \"RECEIVABLE_FNL_PAY_DTE                                              \"\n\n\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE       \"RECEIVABLE_VERS_ISSUE_DTE                                           \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE          \"RECEIVABLE_VERS_TO_DTE                                              \"\n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE      \"RECEIVABLE_VERS_DELINQ_DTE                                          \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE         \"RECEIVABLE_VERS_DUE_DTE                                             \"\n\n                vwField VERS_ASSIGNED_VEND              \"VERS_ASSIGNED_VEND                                                  \"\n                vwField ORIG_BILL_NAME                  \"ORIG_BILL_NAME                                                      \"\n                vwField UNK_CUST_AT_BILL_FLAG           \"UNK_CUST_AT_BILL_FLAG                                               \"\n                vwField RECEIVABLE_EVER_TRANS_FLAG      \"'Y'                                                                 \"\n\n//Dim Business Area\n                vwField BUS_AREA_ID                   \"BUSINESS_AREA_ID                                                               \"\n\n// Dim Functional Area\n                vwField FUNC_AREA_ID                    \"FUNC_AREA_ID                                                   \"\n// Dim Fund ID\n                vwField FUND_ID                         \"FUND_ID                                                              \"\n// Dim Fund Cntr ID\n                vwField FUND_CNTR_ID                    \"FUND_CNTR_ID                                                              \"\n// Dim GL Acct  \n                vwField GL_ACCT_ID                      \"GL_ACCOUNT_ID                                                         \"\n\n// FG_FIN_TRANS\n                vwField TRANS_AMT                        \"TRANS_AMT\t                                                       \"      \n                vwField SRC_SYS_TRANS_ID                 \"'PMAM'                                                            \"      \n                \n                vwFldNC DTE                              \"TRANS_DTE                                                          \" \n                vwFldNC POST_DTE                         \"POST_DTE                                                          \"                               \n        ]\n)\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 773}, {"snpId": {"SnippetId" :"18b4e4e9-db44-4d32-b85a-8aa4df269f9f"}, "snpName": "T2", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"T2\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"T2\" \"VW_FG_FIN_TRANS_STEP0   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'T2'                                                          \"\n                vwField SRC_SYS_ID                          \"'T2-' + SRC_SYS_ID                                            \"\n                                                                                                                     \n\n// DIM_CARRIER                                                                                                                  \n                vwField CARRIER_SRC                         \"'***'                                                           \"\n// DIM_CARRIER PROCEDURE                                                                                                       \n                vwField CARRIER_PROCEDURE_SRC               \"'***'                                                           \"\n// DIM_COH_ORG                                                                                                                  \n                vwField DEPT_NAME                           \"'ARA'                                                           \"\n                vwField DEPT_LONG_NAME                      \"'Administration & Regulatory Affairs'                           \"\n                vwField DIV_NAME                            \"'Parking'                                                       \"\n                vwField DIV_LONG_NAME                       \"'Parking Management'                                            \"\n// DIM_COLL_PERSON                                                                                                              \n                vwField COLL_PERSON_ID                      \"'T2-***'                                                      \"\n                vwField COLL_PERSON_NAME                    \"'T2 Employee'                                                 \"\n                vwField COLL_PERSON_TYPE                    \"'COH Contractor'                                                \"\n                \n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"CONTR_ID                                                        \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'T2-'+ CUST_ID                                                \"\n                vwField CONFI_CUST_FLAG                     \"'N'                                                             \"\n                vwField CUST_NAME                           \"CUST_NAME                                                       \"\n                vwField CUST_EMAIL_ADDR                     \"CUST_EMAIL_ADDR                                                 \"\n                vwField CUST_PHN_NUM_1                      \"CUST_PHN_NUM_1                                                  \"\n                vwField CUST_TYPE                           \"CUST_TYPE                                                       \"\n                vwField CUST_PHN_NUM_1                      \"CUST_PHN_NUM_1                                                  \"\n                vwField CUST_PHN_NUM_2                      \"CUST_PHN_NUM_2                                                  \"\n                vwField CUST_IS_VEND_FLAG                   \"'N'                                                             \"\n                vwField CUST_ADDR_LINE_1                    \"CUST_ADDR_LINE_1                                                \"\n                vwField CUST_ADDR_LINE_2                    \"CUST_ADDR_LINE_2                                                \"\n                vwField CUST_IN_CITY_FLAG                   \"IIF(CUST_CITY='HOUSTON','Y','N')                                \"\n                vwField CUST_CITY                           \"CUST_CITY                                                       \"\n                vwField CUST_STATE                          \"CUST_STATE                                                      \"\n                vwField CUST_CTRY                           \"'USA'                                                           \"\n                vwField CUST_ZIP_CODE                       \"CUST_ZIP_CODE                                                   \"\n                vwField CUST_ZIP_PLUS_4                     \"CUST_ZIP_CODE                                                   \"\n// DIM_CUST_PAR                                                                                                                  \n\n// DIM EMP                                                                                                                       \n                vwField EMP_NAME                            \"EMP_NAME                                                        \"\n                vwField COH_EMP_NUM                         \"'T2-' +COH_EMP_NUM                                              \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"MSTR_TRANS_TYPE                                                 \"\n                vwField DET_TRANS_DESCR                     \"DET_TRANS_DESCR                                                 \"\n                vwField DET_TRANS_CODE                      \"'T2-' + DET_TRANS_CODE                                        \"\n// DIM INCDT    \n                vwField BILLED_FLAG                         \"BILLED_FLAG                                                     \"\n                vwField INV_NUM                             \"INV_NUM                                                         \"\n                vwField INCDT_DESCR                         \"INCDT_DESCR                                                     \"\n                vwField VIO_CODE                            \"VIO_CODE                                                        \"\n                vwField ADJ_FLAG                            \"ADJ_FLAG                                                        \"\n                vwField BOOT_SERIAL_NUM                     \"BOOT_SERIAL_NUM                                                 \"\n                vwField PRKG_METER_VIO_FLAG                 \"PRKG_METER_VIO_FLAG                                             \"\n                vwField PRKG_METER_NUM                      \"PRKG_METER_NUM                                                  \"\n                \n                \n                vwField INCDT_TYPE                          \"INCDT_TYPE                                                      \"\n                vwField INCDT_CAT                           \"'Parking'                                                 \"\n                vwFldNC INCDT_DTE                           \"INCDT_DTE                                                       \"\n                vwField INCDT_TIME                          \"INCDT_TIME                                                      \"\n                vwField INCDT_ADDR_LINE_1                   \"INCDT_ADDR_LINE_1                                               \"\n                vwField INCDT_ST_NAME                       \"INCDT_ST_NAME                                                   \"\n                vwField INCDT_ST                            \"INCDT_ST                                                      \"\n                vwField INCDT_ST                            \"INCDT_ST                                                      \"\n                vwField SRC_SYS_ID                          \"'T2'+SRC_SYS_ID                                               \"\n                vwField BLK_NUM                             \"BLK_NUM                                                       \"\n\n\n// DIM_ITEM    \n                vwField ITEM_TYPE                           \"'T2-Licensed vehicle'                                         \"\n      //          vwField ITEM_STAT                           \"ITEM_STAT                                                       \"\n      //          vwField ITEM_ADDR_LINE_1                    \"ITEM_ADDR_LINE_1                                                \" \n     //           vwField ITEM_CITY                           \"ITEM_CITY                                                       \"\n    //            vwField ITEM_IN_CITY_FLAG                   \"ITEM_IN_CITY_FLAG                                               \"\n   //             vwField ITEM_STATE                          \"'Texas'                                                         \"\n   //             vwField ITEM_DESCR                          \"ITEM_DESCR                                                      \"\n  //              vwField ITEM_ZIP_CODE                       \"ITEM_ZIP_CODE                                                   \"\n  //              vwField ITEM_ZIP_PLUS_4                     \"ITEM_ZIP_PLUS_4                                                 \"\n                \n//DIM ITEM DET\n //               vwField REG_HOLDER_FLAG                     \"REG_HOLDER_FLAG                                                 \"\n //               vwField TYPE_OF_ALM_SITE                    \"TYPE_OF_ALM_SITE                                                \" \n //               vwField ALM_TYPE                            \"ALM_TYPE                                                        \"\n //               vwField ALM_MNT_CMPNY                       \"ALM_MNT_CMPNY                                                   \"\n //               vwField SUSPD_PERMIT_DTE                    \"SUSPD_PERMIT_DTE                                                \"\n //               vwField SUSPD_PERMIT_RSN                    \"SUSPD_PERMIT_RSN                                                \"\n //               vwField PERMIT_NUM                          \"PERMIT_NUM                                                     \"\n //               vwField PERMIT_NAME                         \"PERMIT_NAME                                                     \"\n //               vwField PERMIT_ISSUE_DTE                    \"SUSPD_PERMIT_RSN                                                \"\n  //              vwField PERMIT_EXP_DTE                      \"PERMIT_NUM                                                     \"\n\n\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                 \"RECEIVABLE_STAT                                                     \"\n                vwFldNC RECEIVABLE_STAT_CHG_DTE         \"RECEIVABLE_STAT_CHG_DTE                                              \"\n                vwField RECEIVABLE_EVER_TRANS_FLAG      \"RECEIVABLE_EVER_TRANS_FLAG                                           \"\n                //vwField ORIG_INV_NUM                    \"ORIG_INV_NUM                                                        \"\n      \n                vwFldNC REINSTATEMENT_DTE               \"REINSTATEMENT_DTE                                                    \"\n                vwFldNC RECEIVABLE_LITIGATION_DTE       \"RECEIVABLE_LITIGATION_DTE                                            \"\n                \n                \n                \n                vwField RECEIVABLE_MSTR_STAT            \"RECEIVABLE_MSTR_STAT                                                \"\n                vwFldNC RECEIVABLE_MSTR_STAT_CHG_DTE    \"RECEIVABLE_MSTR_STAT_CHG_DTE                                        \"\n                vwFldNC RECEIVABLE_1ST_PAY_DTE          \"RECEIVABLE_1ST_PAY_DTE                                              \"\n                \n\n\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE       \"RECEIVABLE_VERS_ISSUE_DTE                                           \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE          \"RECEIVABLE_VERS_TO_DTE                                              \"\n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE      \"RECEIVABLE_VERS_DELINQ_DTE                                          \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE         \"RECEIVABLE_VERS_DUE_DTE                                             \"\n\n                vwField VERS_ASSIGNED_VEND              \"VERS_ASSIGNED_VEND                                                  \"\n                vwField ORIG_BILL_NAME                  \"ORIG_BILL_NAME                                                      \"\n                vwField ITEM_DESCR                      \"ITEM_DESCR                                                          \"\n                \n                vwField WRITE_OFF_FLAG                  \"WRITE_OFF_FLAG                                                      \"\n                vwField VOID_FLAG                       \"VOID_FLAG                                                           \"\n                vwField UNDER_APPEAL_FLAG               \"UNDER_APPEAL_FLAG                                                   \"\n                vwField ON_ADMIN_HOLD_FLAG              \"ON_ADMIN_HOLD_FLAG                                                  \"\n                vwField ESC_CAND_FLAG                   \"ESC_CAND_FLAG                                                       \"\n                vwField RECEIVABLE_HAS_LTR_FLAG         \"RECEIVABLE_HAS_LTR_FLAG                                             \"\n                vwField RECEIVABLE_HAS_NOTE_FLAG        \"RECEIVABLE_HAS_NOTE_FLAG                                            \"\n                vwField RECEIVABLE_HAS_PEND_LTR_FLAG    \"RECEIVABLE_HAS_PEND_LTR_FLAG                                        \"\n                vwFldNC RESOLVE_DTE                     \"RESOLVE_DTE                                                         \"\n                vwField RESOLVE_RSN                     \"RESOLVE_RSN                                                         \"\n                vwField RESOLVE_DESCR                   \"RESOLVE_DESCR                                                       \"\n                vwField RESOLVED_BY                     \"RESOLVED_BY                                                         \"                \n\n// FG_FIN_TRANS\n                vwField TRANS_AMT                        \"TRANS_AMT\t                                                       \"      \n                vwField SRC_SYS_TRANS_ID                 \"SRC_SYS_TRANS_ID                                                 \"      \n                vwField INTRA_FUND_TRANS_AMT             \"INTRA_FUND_TRANS_AMT                                             \"      \n                \n                vwFldNC DTE                              \"TRANS_DTE                                                        \" \n                vwFldNC POST_DTE                         \"TRANS_DTE                                                        \"                 \n\n        ]\n)", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 774}, {"snpId": {"SnippetId" :"79ff8549-d6f4-47cf-b0c0-efc9eaa6e813"}, "snpName": "HCTO", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"HCTO\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"HCTO\" \"FINTRANS   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'HCTO'                                                          \"\n                vwField SRC_SYS_ID                          \"'HCTO-' + SRC_SYS_ID                                            \"\n                                                                                                                     \n                vwField BUS_AREA_ID                         \"'9000'                                                          \"\n// DIM_CARRIER                                                                                                                  \n                vwField CARRIER_SRC                         \"'HCTO'                                                          \"\n// DIM_CARRIER PROCEDURE                                                                                                       \n                vwField CARRIER_PROCEDURE_SRC               \"'HCTO'                                                          \"\n// DIM_COH_ORG  \n                vwField DEPT_NAME                           \"'LGL'                                                           \"\n                vwField DEPT_LONG_NAME                      \"'Legal Department'                                              \"\n                vwField DIV_NAME                            \"'Treasury'                                                      \"\n                vwField DIV_LONG_NAME                       \"'Treasury'                                                      \"\n// DIM_COLL_PERSON                                                                                                              \n                vwField COLL_PERSON_ID                      \"'HCTO-111'                                                      \"\n                vwField COLL_PERSON_NAME                    \"'Harris County Employee'                                        \"\n                vwField DIGITECH_ID                         \"'HCTO generic'                                                  \"\n                vwField HCTO_AD_VAL_ID                      \"'Harris County Employee'                                        \"\n                vwField COLL_PERSON_TYPE                    \"'COH Contractor'                                                \"\n                \n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"'***-000001'                                                    \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'HCTO-'+ CAN                                                    \"\n                vwField CONFI_CUST_FLAG                     \"'N'                                                             \"\n                vwField CUST_NAME                           \"NAMELINE1                                                       \"\n                vwField CUST_IS_VEND_FLAG                   \"'N'                                                             \"\n                vwField JV_CUST_FLAG                        \"'N'                                                             \"\n                vwField CUST_ADDR_LINE_1                    \"NAMELINE2                                                       \"\n                vwField CUST_ADDR_LINE_2                    \"NAMELINE3                                                       \"\n                vwField CUST_ADDR_LINE_3                    \"NAMELINE4                                                       \"\n                vwField CUST_IN_CITY_FLAG                   \"IIF(CITY='HOUSTON','Y','N')                                     \"\n                vwField CUST_CITY                           \"CITY                                                            \"\n                vwField CUST_STATE                          \"STATE                                                           \"\n                vwField CUST_CTRY                           \"COUNTRY                                                         \"\n                vwField CUST_ZIP_CODE                       \"SUBSTRING(ZIPCODE,1,5)                                          \"\n                vwField CUST_ZIP_PLUS_4                     \"SUBSTRING(ZIPCODE,1,13)                                         \"\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"TRANS_DTE                                                       \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'COH Contractor'                                                \"\n                vwField EMP_NAME                            \"'Harris County Employee'                                        \"\n                vwField COH_EMP_NUM                         \"'HCTO-111'                                                      \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"MSTR_TRANS_TYPE                                             \"\n                vwField DET_TRANS_DESCR                     \"DET_TRANS_DESCR                                                 \"\n                vwField DET_TRANS_CODE                      \"'HCTO-' + MSTR_TRANS_TYPE                                       \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"SRC_SYS_ID                                                      \"\n                vwField INCDT_DESCR                         \"'Property ownership'                                            \"\n                vwField INCDT_TYPE                          \"'Property ownership'                                            \"\n                vwField INCDT_CAT                           \"'Property ownership'                                            \"\n                vwField INCDT_DTE                           \"'10/1/'+CONVERT(VARCHAR(4),YEAR)                       \"\n                vwField INCDT_ADDR_LINE_1                   \"CONVERT(VARCHAR,PNUMBER)+' '+PSTRNAME                           \"\n                vwField INCDT_ST_NUM                        \"PNUMBER                                                         \"\n                vwField INCDT_ST_NAME                       \"PSTRNAME                                                        \"\n                vwField INCDT_IN_CITY_FLAG                  \"'Y'                                                             \"\n                vwField INCDT_STATE                         \"'Texas'                                                         \"\n                vwField INCDT_CTRY                          \"'USA'                                                           \"\n                vwField INCDT_ZIP_CODE                      \"SUBSTRING(PZIP,1,5)                                             \"\n// DIM_ITEM                                                                                                                      \n                vwField ITEM_TYPE                           \"'Ad Valorem Property'                                           \"\n                vwField ITEM_ADDR_LINE_1                    \"CONVERT(VARCHAR,PNUMBER)+' '+PSTRNAME                           \" \n                vwField ITEM_ST_NUM                         \"CONVERT(VARCHAR(13),PNUMBER)                                    \"\n                vwField ITEM_ST_NAME                        \"PSTRNAME                                                        \"\n                vwField ITEM_IN_CITY_FLAG                   \"'Y'                                                             \"\n                vwField ITEM_STATE                          \"'Texas'                                                         \"\n                vwField ITEM_DESCR                          \"'Property ownership'                                            \"\n                vwField ITEM_ZIP_CODE                       \"SUBSTRING(PZIP,1,5)                                             \"\n// DIM ITEM DET\n                vwField FLAG_DIM_ITEM_TAXABLE_PROP_DET      \"1                                                               \"\n                vwField TAXABLE_PROP_ROLL_TYPE              \"'Roll Type'                                          \"            \n                vwField NUM_OF_ACRES                        \"LEGACRES                                                        \"\n                vwField PROP_CLASS_CODE                     \"PROPCLASS                         \" \n                vwField CITY_RFPD_JURIS_CODE                \"'61'        \" \n                vwField CONFI_ACCT_FLAG                     \"'N' \" \n                vwField TAX_DEFERRAL_START_DTE              \"TAXDEFSTRT                                                      \"\n                vwField TAX_DEFERRAL_END_DTE                \"TAXDEFEND                                                     \" \n                //vwField OWNERSHIP_EFF_DTE                   \"CONVERT(DATETIME,'1900-01-01 00:00:00.000') \" \n                vwField APPRAISAL_DISTR_ACCT_NUM            \"SUBSTRING(CAN,1,16) \" \n                vwField TAXABLE_PROP_LGL_DESCR_1            \"LEGAL1                                                          \"\n                vwField TAXABLE_PROP_LGL_DESCR_2            \"LEGAL2                                                          \"\n                vwField TAXABLE_PROP_LGL_DESCR_3            \"LEGAL3                                                          \"\n                vwField TAXABLE_PROP_LGL_DESCR_4            \"LEGAL4                                                          \"\n                vwField TAXABLE_PROP_LGL_DESCR_5            \"LEGAL5                                                          \"\n                vwField TAX_ROLL_CODE                       \"ROLL                                                            \"\n                vwField PROP_CLASS_DESCR                    \"Property_Description                                            \"\n                vwField CITY_RFPD_JURIS_DESCR               \"'HOUSTON, CITY OF'                                             \"\n                vwField TAX_ROLL_DESCR                      \"'Roll Type'                                         \"\n                vwField CAN                                 \"SUBSTRING(CAN,1,16) \"\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_EVER_TRANS_FLAG      \"'N'                                                                 \"\n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE      \"DELINQ_DTE                                                          \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE         \"DUEDATE                                                             \"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE       \"CONVERT(DATETIME,'10/1/'+CONVERT(VARCHAR(4), YEAR))                 \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE          \"CONVERT(DATETIME,'10/1/'+CONVERT(VARCHAR(4), YEAR))                 \"\n                vwField VERS_ASSIGNED_VEND              \"'0000113973'                                                        \"\n                vwField ORIG_BILL_NAME                  \"NAMELINE1                                                           \"\n                vwField UNK_CUST_AT_BILL_FLAG           \"'N'                                                                 \"\n// Dim_Receivable_Det DIM_RECEIVABLE_AD_VAL_RECEIVABLE_DET\n                vwField FLAG_DIM_RECEIVABLE_AD_VAL_RECEIVABLE_DET \"1\"\n                vwField AD_VAL_VET_FLAG                  \"VETERAN                                                            \"\n                vwField AD_VAL_DISABLED_FLAG             \"DISABLED                                                           \"\n                vwField AD_VAL_OVER_66_FLAG              \"OVER65                                                             \"\n                vwField AD_VAL_HOMESTEAD_FLAG            \"HOMESTEAD                                                          \"\n                vwField HCAD_ACCT_STAT                   \"CAN                                                                \"\n                vwField AD_VAL_TAX_DEFERRAL_START_DTE    \"TAXDEFSTRT                                                        \"\n                vwField AD_VAL_TAX_DEFERRAL_END_DTE      \"TAXDEFEND                                                         \"\n                vwFldNC ``A#3348_ATTY_FEE_DTE``          \"DATE_3348                                                         \"\n                vwFldNC ``A#3308_ATTY_FEE_DTE``          \"DATE_3308                                                         \"\n//              vwFldNC ``A#3307_ATTY_FEE_DTE``          \"DATE_3307                                                         \"\n//Dim Business Area\n                vwField BUS_AREA_ID                   \"'9000'                                                               \"\n\n// Dim Functional Area\n                vwField FUNC_AREA_ID                    \"'GEGO-00-00000000'                                                   \"\n// Dim Fund ID\n                vwField FUND_ID                         \"'1000'                                                               \"\n// Dim Fund Cntr ID\n                vwField FUND_CNTR_ID                    \"'1000'                                                               \"\n// Dim GL Acct  \n                vwField GL_ACCT_ID                      \"'0000428020'                                                         \"\n\n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"TRANS_AMT\t                                                       \"      \n                vwField SRC_SYS_TRANS_ID                    \"'HCTO'                                                            \"      \n              \n                vwFldNC POST_DTE                            \"TRANS_DTE                                                          \"                               \n        ]\n)\n\n(* \nopen SlowlyChangingDimensions\nprint HCTOView.Query \n*)", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 775}, {"snpId": {"SnippetId" :"a8351a4c-1fdb-4f57-8fca-8fed60008c36"}, "snpName": "HHD", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"HHD\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"HHD\" \"FINTRANS   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'HHD'                                                           \"\n                vwField SRC_SYS_ID                          \"'HHD-'+Document_Number                                          \"\n\n                vwField BUS_AREA_ID                         \"'3800'                                                          \"\n// DIM_CARRIER                                                                                                                   \n                vwField CARRIER_SRC                         \"'HHD'                                                           \"\n// DIM_CARRIER PROCEDURE                                                                                                        \n                vwField CARRIER_PROCEDURE_SRC               \"'HHD'                                                           \"\n// DIM_COH_ORG                                                                                                                   \n                vwField DEPT_NAME                           \"'HHD'                                                           \"\n                vwField DEPT_LONG_NAME                      \"'Health & Human Services'                                       \"\n                vwField DIV_NAME                            \"'HHD'                                                           \"\n                vwField DIV_LONG_NAME                       \"'Health & Human Services'                                       \"\n// DIM_COLL_PERSON                                                                                                               \n                vwField COLL_PERSON_ID                      \"'HHD-111'                                                       \"\n                vwField COLL_PERSON_NAME                    \"'HHD Employee'                                                  \"\n                vwField DIGITECH_ID                         \"'HHD generic'                                                   \"\n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"'***'                                                           \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'HHD-'+ CONVERT(VARCHAR, CUSTOMER)                              \"\n                vwField CUST_NAME                           \"Name_1                                                          \"\n                vwField CUST_ADDR_LINE_1                    \"Street                                                          \"\n                vwField CUST_CITY                           \"City                                                            \"\n                vwField CUST_STATE                          \"Region                                                            \"\n                vwField CUST_ZIP_CODE                       \"IIF(LEN(Postal_Code) = 0, '***', isnull(LEFT(Postal_Code, 5) ,'***'))           \"\n                vwField CUST_PHN_NUM_1                      \"IIF(LEN(Telephone_1) = 0,'***',Telephone_1)                     \"\n                vwField CUST_FAX_NUM                        \"IIF(LEN(Fax_Number) = 0,'***',Fax_Number)                     \"\n         \n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"Value_Date                                                      \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'Employee'                                                      \"\n                vwField EMP_NAME                            \"'HHD '                                                          \"\n                vwField COH_EMP_NUM                         \"'HHD-111'                                                       \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"Transaction_Type\t                                             \"\n                vwField DET_TRANS_DESCR                     \"Transaction_Desc\t                                             \"\n                vwField DET_TRANS_CODE                      \"'HHD-' + Transaction_Type                                       \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"'HHD-'+Document_Number                                          \"\n                vwFldNC INCDT_DTE                           \"Value_Date                                                          \"\n// DIM_ITEM                                                                                                                      \n                vwField ITEM_TYPE                           \"'HHD Transaction'                                                   \"\n                vwField ITEM_DESCR                          \"'HHD Transaction'                                                   \"    \n// DIM_RECEIVABLE\n//                vwField RECEIVABLE_STAT                     \"BLNGSTAT                                                            \"      \n                vwField RECEIVABLE_EVER_TRANS_FLAG          \"'N'                                                                 \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE             \"Due_date                                                            \"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE           \"Issue_date                                                          \"\n//                vwField RECEIVABLE_MSTR_STAT                \"ACCOUNTSTATUS                                                       \"      \n                vwField ORIG_BILL_NAME                      \"Name_1                                                            \"     \n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"Amount                                                            \"      \n                vwFldNC POST_DTE                            \"Value_Date                                                        \"                               \n        ]\n)\n(* \nopen SlowlyChangingDimensions\nprint HHDView.Query \n*)\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 776}, {"snpId": {"SnippetId" :"04f28553-8359-4ba0-9281-bc45839b844f"}, "snpName": "HPL", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"HPL\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"HPL\" \"FINTRANS\" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'HPL'                                                               \"\n                vwField SRC_SYS_ID                          \"INV_NUM                                                             \"\n                vwField INTRA_DAY_ORDER                     \"case Transaction_Type2 \n                                                              when 'Payment'          then 20              \n                                                              when 'Paid'             then 20             \n                                                              when 'Adjustment'       then 30         \n                                                              when 'Billed'           then 10                                                            \n                                                              when 'Turnback'         then 40                                                              \n                                                              when 'Turnover'         then 50                                                              \n                                                              end + IIF(PIF='Y', 2, 1)\"            \n\n                vwField BUS_AREA_ID                         \"'3400'                                                              \"\n// DIM_CARRIER                                                                                                                   \n                vwField CARRIER_SRC                         \"'HPL'                                                               \"\n// DIM_CARRIER PROCEDURE                                                                                                         \n                vwField CARRIER_PROCEDURE_SRC               \"'HPL'                                                               \"\n// DIM_COH_ORG                                                                                                                   \n                vwField DEPT_NAME                           \"'HPL'                                                               \"\n                vwField DEPT_LONG_NAME                      \"'Houston Public Library'                                            \"\n                vwField DIV_NAME                            \"'Library Material Services'                                            \"\n                vwField DIV_LONG_NAME                       \"'Library Material Services'                                         \"\n// DIM_COLL_PERSON                                                                                                               \n                vwField COLL_PERSON_ID                      \"'HPL-111'                                                           \"\n                vwField COLL_PERSON_NAME                    \"'HPL Employee'                                                      \"\n                vwField DIGITECH_ID                         \"'HPL generic'                                                       \"\n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"IIF(CollectionState2 > 0, '4600014067' , '***')                     \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"CUST_ID                                                             \"\n                vwField CUST_EMAIL_ADDR                     \"EMAIL                                                               \"\n                vwField CUST_PHN_NUM_1                      \"PHONE                                                               \"\n                vwField CUST_NAME                           \"Name                                                                \"\n                vwField CUST_TYPE                           \"PROFILE                                                             \"\n                vwField CUST_ADDR_LINE_1                    \"STREET                                                              \"\n                vwField CUST_ADDR_LINE_2                    \"APT_UNIT                                                            \"\n                vwField CUST_CITY                           \"CITY_STATE                                                          \"\n                vwField CUST_APT_LOT                        \"APT_UNIT                                                            \"\n                vwField CUST_ZIP_CODE                       \"LEFT(ZIP,5)                                                         \"\n                vwField CUST_ZIP_PLUS_4                     \"ZIP                                                                 \"\n// DIM_CUST_PAR                                                                                                                    \n                vwField CUST_PAR_ID                         \"IIF(LEN(CARE_OF) > 1, CUST_ID, '***')                               \"\n                vwField CUST_PAR_NAME                       \"IIF(LEN(CARE_OF) > 1, CARE_OF, '***')                               \"\n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"Transaction_Date2                                                   \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'Employee'                                                          \"\n                vwField EMP_NAME                            \"'HPL '                                                              \"\n                vwField COH_EMP_NUM                         \"'HPL-111'                                                           \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"Transaction_Type2                                                   \"\n                vwField DET_TRANS_DESCR                     \" case Transaction_Type2 \n                                                              when 'Payment'          then 'Base, City Portion Paid'              \n                                                              when 'Paid'             then 'Base, City Portion Paid'              \n                                                              when 'Adjustment'       then 'Base Adjustment'                 \n                                                              when 'Billed'           then 'Base Amount Billed'                                                                 \n                                                              when 'Turnback'         then 'Base Amount Turnback'                                                                 \n                                                              when 'Turnover'         then 'Base Amount Turnover'                                                                 \n                                                              end                                                                \"\n                vwField DET_TRANS_CODE                      \"'HPL-' + Transaction_Type2                                          \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"INV_NUM                                                             \"\n                vwField INCDT_DESCR                         \"'HPL Billed'                                                        \"\n                vwField INCDT_TYPE                          \"'Houston Public Library'                                            \"\n                vwField INCDT_CAT                           \"'Houston Public Library'                                            \"\n                vwFldNC INCDT_DTE                           \"Date_Billed                                                         \"\n// DIM_ITEM                                                                                                                      \n                vwField ITEM_TYPE                           \"ITEM_TYPE                                                           \"\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_EVER_TRANS_FLAG          \"IIF(CollectionState2 > 0, 'Y','N')                                  \"\n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE          \"DATEADD(day,30,Date_Billed)                                         \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE             \"DATEADD(day,30,Date_Billed)                                         \"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE           \"Date_Billed                                                         \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE              \"IIF(CollectionState2 > 0, TurnoverDate, '1900-01-01')               \"   \n                vwField VERS_ASSIGNED_VEND                  \"IIF(CollectionState2 > 0, '0000109958' , 'CoH')                     \"   \n                vwField RECEIVABLE_MSTR_STAT                \"IIF(PIF='Y','Close','Open')                                         \"      \n                vwFldNC RECEIVABLE_MSTR_STAT_CHG_DTE        \"IIF(PIF='Y',Transaction_Date2, '1900-01-01')                        \"    \n                vwField ITEM_DESCR                          \"'HPL Transaction'                                                   \"    \n                vwField ORIG_BILL_NAME                      \"Name                                                                \"     \n                vwFldNC RECEIVABLE_VERS_BILLING_TO_DTE      \"IIF(CollectionState2 > 0,TurnoverDate,'1900-01-01')                 \"   \n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"Transaction_Amount2                                                 \"      \n                vwFldNC POST_DTE                            \"Transaction_Date2                                                   \"                               \n        ]\n    )\n(*          \nopen SlowlyChangingDimensions\nprint HPLView.Query \n*)\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 777}, {"snpId": {"SnippetId" :"28e52d96-1900-4150-a99d-6f5ed15bd1df"}, "snpName": "MCD", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"MCD\" \"VW_FG_FIN_TRANS2       \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"MCD\" \"FINTRANS  \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'MCD'                                                               \"\n                vwField SRC_SYS_ID                          \"INV_NUM                                                             \"\n\n                vwField BUS_AREA_ID                         \"'1600'                                                              \"\n// DIM_CARRIER                                                                                                                   \n                vwField CARRIER_SRC                         \"'MCD'                                                               \"\n// DIM_CARRIER PROCEDURE                                                                                                         \n                vwField CARRIER_PROCEDURE_SRC               \"'MCD'                                                               \"\n// DIM_COH_ORG                                                                                                                   \n                vwField DEPT_NAME                           \"'MCD'                                                               \"\n                vwField DEPT_LONG_NAME                      \"'Municipal Courts'                                                  \"\n                vwField DIV_NAME                            \"'MCD'                                                               \"\n                vwField DIV_LONG_NAME                       \"'Municipal Courts'                                                  \"\n// DIM_COLL_PERSON                                                                                                               \n                vwField COLL_PERSON_ID                      \"'MCD-111'                                                           \"\n                vwField COLL_PERSON_NAME                    \"'MCD Employee'                                                      \"\n                vwField DIGITECH_ID                         \"'MCD generic'                                                       \"\n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"IIF(Vendor_ID LIKE 'INCOLL', '***', '0000100103')\" // this is needed to point to Linebarger when they have it\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"CUST_ID                                                             \"\n                vwField CUST_PHN_NUM_1                      \"ResPhone                                                            \"\n                vwField CUST_NAME                           \"DefLastName + ', ' + DefFirstName                                   \"\n                vwField DL_ISSUE_STATE                      \"DLState                                                             \"\n                vwField DL_NUM                              \"DLNbr                                                               \"\n                vwField CUST_ADDR_LINE_1                    \"BestAddLine1                                                        \"\n                vwField CUST_ADDR_LINE_2                    \"BestAddLine2                                                        \"\n                vwField CUST_CITY                           \"BestAddCity                                                         \"\n                vwField CUST_STATE                          \"BestAddState                                                        \"\n                vwField CUST_ZIP_CODE                       \"BestAddZip                                                          \"\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"Transaction_Date                                                    \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'Employee'                                                          \"\n                vwField EMP_NAME                            \"'MCD '                                                              \"\n                vwField COH_EMP_NUM                         \"'MCD-111'                                                           \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"IIF(Transaction_Type = 'Non-Monetary','Adjustment',Transaction_Type) \"\n                vwField DET_TRANS_DESCR                     \"Transaction_Desc                                                    \"\n                vwField DET_TRANS_CODE                      \"'MCD-' + Transaction_Type                                           \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"INV_NUM                                                             \"\n                vwField INCDT_DESCR                         \"ViolationDesc                                                       \"\n                vwField VIO_CODE                            \"ViolationCode                                                       \"\n                vwField ADJ_FLAG                            \"ADJUDICATED_STATUS                                                  \"\n                vwField INCDT_TYPE                          \"'Municipal Courts'                                                  \"\n                vwField INCDT_CAT                           \"'Municipal Courts'                                                  \"\n                vwFldNC INCDT_DTE                           \"ViolationDate                                                       \"\n                vwField INCDT_TIME                          \"ViolationTime                                                       \"\n                vwField INCDT_ADDR_LINE_1                   \"VioStreetName                                                       \"\n                vwField BLK_NUM                             \"VioStreetBlck                                                       \"\n// DIM_ITEM                                                                                                                      \n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                     \"ViolationStatus                                                     \"      \n                vwField RECEIVABLE_EVER_TRANS_FLAG          \"IIF(Vendor_ID LIKE 'INCOLL', 'N','Y')                               \"\n       // too complex resolve in source  vwField RECEIVABLE_VERS_DELINQ_DTE          \"IIF(V.Vendor_ID LIKE 'INCOLL',NULL ,R.Turnover_DTE)                               \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE             \"IIF(Turnover_DTE is null,DATEADD(day,60,Issue_DTE),Turnover_DTE) \"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE           \"Issue_DTE                                                           \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE              \"Turnover_DTE                                                        \"   \n                vwField VERS_ASSIGNED_VEND                  \"IIF(Vendor_ID LIKE 'INCOLL','CoH' , '0000106846')                   \"   \n                vwField RECEIVABLE_MSTR_STAT                \"IIF(ViolationStatus='CLOSED','Close','Open')                        \"      \n                vwFldNC RECEIVABLE_MSTR_STAT_CHG_DTE        \"STATUS_DATE                                                         \"    \n                vwField ITEM_DESCR                          \"'MCD Transaction'                                                   \"    \n                vwField ORIG_BILL_NAME                      \"DefLastName + ', ' + DefFirstName                                   \"     \n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"Transaction_Amount                                                  \"      \n                vwFldNC POST_DTE                            \"STATUS_DATE                                                         \"                               \n        ]\n)\n\n(* \nopen SlowlyChangingDimensions\nprint MCDView.Query\n*)\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 778}, {"snpId": {"SnippetId" :"3b47f651-d4ef-41db-90f3-ad67d1a4b6eb"}, "snpName": "PWE", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"PWE\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"PWE\" \"FINTRANS   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'PWE'                                                           \"\n                vwField SRC_SYS_ID                          \"INV_NUM                                                         \"\n\n                vwField BUS_AREA_ID                         \"'2000'                                                          \"\n// DIM_CARRIER                                                                                                                   \n                vwField CARRIER_SRC                         \"'PWE'                                                           \"\n// DIM_CARRIER PROCEDURE                                                                                                        \n                vwField CARRIER_PROCEDURE_SRC               \"'PWE'                                                           \"\n// DIM_COH_ORG  \n                vwField DEPT_NAME                           \"'PWE'                                                           \"\n                vwField DEPT_LONG_NAME                      \"'Public Works & Engineering'                                    \"\n                vwField DIV_LONG_NAME                       \"'Public Works & Engineering'                                    \"\n                vwField DIV_NAME                            \"'PWE'                                            \t\t\t\t \"\n// DIM_COLL_PERSON                                                                                                               \n                vwField COLL_PERSON_ID                      \"'PWE-111'                                                       \"\n                vwField COLL_PERSON_NAME                    \"'PWE Employee'                                                  \"\n                vwField DIGITECH_ID                         \"'PWE generic'                                                   \"\n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"'***'                                                           \"\n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'PWE-'+ CONVERT(VARCHAR, ACCOUNTNUMBER)                         \"\n                vwField CUST_NAME                           \"CUSTDESC1                                                       \"\n                vwField CUST_ADDR_LINE_1                    \"CONVERT(VARCHAR(10), STNO) + ' ' + CONVERT(VARCHAR(max), STNAME)\"\n                vwField CUST_CITY                           \"City                                                            \"\n                vwField CUST_ZIP_CODE                       \"IIF(LEN(ZIP) = 0, '***', isnull(LEFT(ZIP, 5) ,'***'))           \"\n                vwField CUST_TYPE                           \"ACCTCLASSDESC                                                   \"\n\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"Transaction_Date                                                      \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'Employee'                                                      \"\n                vwField EMP_NAME                            \"'PWE '                                                          \"\n                vwField COH_EMP_NUM                         \"'PWE-111'                                                       \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"Transaction_Type\t                                             \"\n                vwField DET_TRANS_DESCR                     \"case Transaction_Type\t\n\t\t\t\t                                             when 'Payment'             then 'Base, City Portion Paid' \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t when 'Paid'                then 'Base, City Portion Paid' \n\t\t\t\t                                             when 'Adjustment'\t\t\tthen 'Base Adjustment'\n\t\t\t\t                                             when 'Turnback'\t\t\tthen 'Base Amount Turnback'\n\t\t\t\t                                             when 'Turnover'\t\t\tthen 'Base Amount Turnover'\n\t\t\t\t                                             else                            'Base Amount Billed'   end          \"\n                vwField DET_TRANS_CODE                      \"'PWE-' + Transaction_Type                                       \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"INV_NUM                                                         \"\n                vwFldNC INCDT_DTE                           \"Issue_Date                                                          \"\n// DIM_ITEM                                                                                                                      \n                vwField ITEM_TYPE                           \"'PWE Transaction'                                                   \"\n                vwField ITEM_DESCR                          \"'PWE Transaction'                                                   \"    \n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                     \"BLNGSTAT                                                            \"      \n                vwField RECEIVABLE_EVER_TRANS_FLAG          \"'N'                                                                 \"\n                vwFldNC RECEIVABLE_VERS_DUE_DTE             \"ISNULL(Due_Date, DATEADD(day, 21, CONVERT(DATETIME, Issue_Date)))   \"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE           \"Issue_Date                                                          \"\n                vwField RECEIVABLE_MSTR_STAT                \"ACCOUNTSTATUS                                                       \"      \n                vwField ORIG_BILL_NAME                      \"CUSTDESC                                                            \"     \n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"Transaction_Amount                                                  \"      \n                vwFldNC POST_DTE                            \"Transaction_Date                                                          \"                               \n        ]\n)\n\n(* \nopen SlowlyChangingDimensions\nprint PWEView.Query\n*)\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 779}, {"snpId": {"SnippetId" :"1fc766b6-b1fa-43c0-ab4e-b77c73e16a43"}, "snpName": "DIGITECH", "snpContent": "FactView.New (\n        name   = SQLTableView.New \"\" \"DIGITECH\" \"VW_FG_FIN_TRANS2        \" \"\" \"\"\n      , source = SQLTableView.New \"\" \"DIGITECH\" \"FINTRANS   \" \"\" \"\"\n      , fields = [\n                vwField SRC_SYS                             \"'DIGITECH'                                                     \"\n                vwField SRC_SYS_ID                          \"'DIGITECH-'+SRC_SYS_ID                                         \"\n\n                vwField BUS_AREA_ID                         \"'6400'                                                          \"\n// DIM_CARRIER                                                                                                                   \n                vwField SRC_CARRIER_KEY                     \"SRC_CARRIER_KEY                                                 \"\n                vwField MEDICARE_PAYER_CODE                 \"MEDICARE_PAYER_CODE                                             \"\n                vwField MEDICAID_PAYER_CODE                 \"MEDICAID_PAYER_CODE                                             \"\n                vwField CARRIER_FIN_GRP                     \"CARRIER_FIN_GRP                                                 \"\n                vwField CARRIER_FIN_CLASS                   \"CARRIER_FIN_CLASS                                               \"\n                vwField CARRIER_GRP                         \"CARRIER_GRP                                                     \"\n                vwField CARRIER_NAME                        \"CARRIER_NAME                                                    \"\n                vwField CARRIER_SRC                         \"'Digitech'                                                      \"\n// DIM_CARRIER PROCEDURE                                                                                                        \n                vwField CARRIER_PROCEDURE_SRC               \"'Digitech'                                                      \"\n                vwField SRC_CARRIER_PROCEDURE_KEY           \"SRC_CARRIER_PROCEDURE_KEY                                       \"\n                vwField CARRIER_PROCEDURE_CODE              \"CARRIER_PROCEDURE_CODE                                          \"\n                vwField CARRIER_PROCEDURE_DESCR             \"CARRIER_PROCEDURE_DESCR                                         \"\n                vwField CARRIER_PROCEDURE_TYPE              \"CARRIER_PROCEDURE_TYPE                                          \"\n                vwField CARRIER_PROCEDURE_BILL_CODE         \"CARRIER_PROCEDURE_BILL_CODE                                     \"\n                \n// DIM_COH_ORG  \n                vwField DEPT_NAME                           \"'HFD'                                                           \"\n                vwField DEPT_LONG_NAME                      \"'Houston Fire Department'                                       \"\n                vwField DIV_NAME                            \"'EMS'                                            \t\t\t\t \"\n                vwField DIV_LONG_NAME                       \"'Emergency Medical Services'                                    \"\n// DIM_COLL_PERSON                                                                                                               \n                vwField COLL_PERSON_ID                      \"'DIGITECH-111'                                                  \"\n                vwField COLL_PERSON_NAME                    \"'Digitech employee'                                             \"\n                vwField DIGITECH_ID                         \"'Digitech generic'                                              \"\n                vwField COLL_PERSON_TYPE                    \"'COH Contractor'                                                \"\n// DIM_CONTR                                                                                                                     \n                vwField CONTR_ID                            \"'4600013179'                                                    \"           \n// DIM_CUST                                                                                                                      \n                vwField CUST_ID                             \"'Digitech-'+ CONVERT(VARCHAR, CUST_ID)                          \"\n                vwField CUST_NAME                           \"CUST_NAME                                                       \"\n                vwField CUST_TYPE                           \"'Individual'                                                    \"\n                vwFldNC SRC_SYS_MOD_DTE                     \"SRC_SYS_MOD_DTE                                                 \"\n\n\n// DIM_CUST_PAR                                                                                                                  \n// DIM DTE                                                                                                                       \n                vwFldNC DTE                                 \"DTE                                                             \"\n// DIM EMP                                                                                                                       \n                vwField EMP_TYPE                            \"'Employee'                                                      \"\n                vwField EMP_NAME                            \"'EMS Paramedic'                                                 \"\n                vwField COH_EMP_NUM                         \"'DIGITECH-111'                                                  \"\n// DIM_FIN_TRANS_TYPE                                                                                                            \n                vwField MSTR_TRANS_TYPE                     \"MSTR_TRANS_TYPE\t                                             \"\n                vwField DET_TRANS_DESCR                     \"DET_TRANS_DESCR                                                 \"\n                vwField DET_TRANS_CODE                      \"'DIGITECH-' + DET_TRANS_CODE                                    \"\n// DIM INCDT                                                                                                                     \n                vwField INV_NUM                             \"INV_NUM                                                         \"\n                vwField INCDT_DESCR                         \"'Emergency Transport'                                           \"\n                vwFldNC INCDT_DTE                           \"INCDT_DTE                                                       \"\n                vwField INCDT_TIME                          \"INCDT_TIME                                                      \"\n                vwField INCDT_TYPE                          \"'EMS Transport'                                                 \"\n                vwField INCDT_CAT                           \"'EMS Transport'                                                 \"\n                vwField INCDT_SERV_LVL                      \"INCDT_SERV_LVL                                                  \"\n// DIM INCDT EMS DET\n                vwField VEH                                 \"VEH                                                             \"\n                vwField EMS_INCDT                           \"EMS_INCDT                                                       \"\n                vwField DISPATCH_NUM                        \"DISPATCH_NUM                                                    \"\n                vwField EMS_INCDT_CAT                       \"EMS_INCDT_CAT                                                   \"                \n                vwField TXP_SERV_LVL                        \"TXP_SERV_LVL                                                    \"\n                vwField ORIGIN_LOC                          \"ORIGIN_LOC                                                      \"\n                vwField DEST_LOC                            \"DEST_LOC                                                        \"                \n\n// DIM_ITEM                                                                                                                      \n                vwField ITEM_TYPE                           \"'EMS Patient'                                                   \"\n\n// DIM_ITEM_PT_DET\n                vwField PT_GNDR                            \"PT_GNDR                                                          \"\n                vwField PT_AGE                             \"PT_AGE                                                           \"\n\n\n// DIM_RECEIVABLE\n                vwField RECEIVABLE_STAT                     \"RECEIVABLE_STAT                                                     \"  \n                //vwField ORIG_INV_NUM                        \"ORIG_INV_NUM                                                        \"\n                vwField RECEIVABLE_EVER_TRANS_FLAG          \"'Y'                                                                 \"\n                vwFldNC RECEIVABLE_VERS_DELINQ_DTE          \"RECEIVABLE_VERS_DELINQ_DTE                                          \"                \n                vwFldNC RECEIVABLE_VERS_DUE_DTE             \"RECEIVABLE_VERS_DUE_DTE                                             \"\n                vwFldNC RECEIVABLE_VERS_ISSUE_DTE           \"RECEIVABLE_VERS_ISSUE_DTE                                           \"\n                vwFldNC RECEIVABLE_VERS_TO_DTE              \"RECEIVABLE_VERS_TO_DTE                                              \"\n                vwField RECEIVABLE_MSTR_STAT                \"RECEIVABLE_MSTR_STAT                                                \"      \n                vwField ORIG_BILL_NAME                      \"ORIG_BILL_NAME                                                      \"     \n                vwField VERS_ASSIGNED_VEND                  \"VERS_ASSIGNED_VEND                                                  \" \n                vwField ITEM_DESCR                          \"'EMS Patient'                                                       \" \n                vwField UNK_CUST_AT_BILL_FLAG               \"'N'                                                                 \"  \n                vwFldNC RECEIVABLE_VERS_BILLING_TO_DTE      \"RECEIVABLE_VERS_BILLING_TO_DTE                                      \"\n                \n// DIM RECEIVABLE EMS RECEIVABLE DET\n\n                vwField BILLING_HOLD_FLAG                   \"BILLING_HOLD_FLAG                                                   \"     \n                vwField ACTV_CARRIER_FIN_GRP                \"ACTV_CARRIER_FIN_GRP                                                \" \n                vwField ACTV_CARRIER_FIN_CLASS              \"ACTV_CARRIER_FIN_CLASS                                              \" \n                vwField ACTV_CARRIER                        \"ACTV_CARRIER                                                        \"  \n                vwField SIG_FLAG                            \"SIG_FLAG                                                            \"\n                \n// FG_FIN_TRANS\n                vwField TRANS_AMT                           \"TRANS_AMT                                                          \"      \n                vwFldNC POST_DTE                            \"POST_DTE                                                           \"                               \n                vwField SRC_SYS_TRANS_ID                    \"SRC_SYS_TRANS_ID                                                   \"  \n        ]\n)\n\n(* \nopen SlowlyChangingDimensions\nprint PWEView.Query\n*)\n", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 780}, {"snpId": {"SnippetId" :"23ed6313-187b-4202-8345-cdf7fec17896"}, "snpName": "All Views", "snpContent": "let copyAllViews() =\r\n    AllFactViews  \r\n    |> Seq.map    (fun st -> st.Query)\r\n    |> String.concat \"\\n\\n\"\r\n    |> fun s -> printfn \"%s\" s ; Useful.sCopy s", "snpParentIdO": {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, "snpPredIds": [{"SnippetId" :"04f28553-8359-4ba0-9281-bc45839b844f"}, {"SnippetId" :"18b4e4e9-db44-4d32-b85a-8aa4df269f9f"}, {"SnippetId" :"1fc766b6-b1fa-43c0-ab4e-b77c73e16a43"}, {"SnippetId" :"28e52d96-1900-4150-a99d-6f5ed15bd1df"}, {"SnippetId" :"3b47f651-d4ef-41db-90f3-ad67d1a4b6eb"}, {"SnippetId" :"79ff8549-d6f4-47cf-b0c0-efc9eaa6e813"}, {"SnippetId" :"a0f0e7d5-26ad-45cd-a8d9-8342bd14095f"}, {"SnippetId" :"a8351a4c-1fdb-4f57-8fca-8fed60008c36"}, {"SnippetId" :"aff4ab7b-921e-4509-9f87-eb70e7bb86cb"}, {"SnippetId" :"d2205189-f6a8-4e24-81b2-5b485d18f424"}], "snpProperties": [["Buttons", "\"display: grid; grid-gap: 5px; grid-template-rows: 50px 50px \"\n: h3 \"text-align: center;align-self: self-end;margin: 0px;\" \"${FSharpStation.SnippetName}:\"\nCopy all Views\n:div \"\"\n:li \"\" \"SQL views: <Stream>.VW_FG_FIN_TRANS2\"\n:li \"\" \"Click to copy to clipboard. Wait ... ignore first Done!\"\n:li \"font-weight:700\" \"Paste and execute into database: ARStaging\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n\n\n"], ["Copy all Views", "CodePresence.present <- Map.empty\nFSGlobal.SlowlyChangingDimensions.Views.copyAllViews()"]], "snpGeneration": 1680}, {"snpId": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpName": "", "snpContent": "module Dimensions =\r\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [{"SnippetId" :"0da8d01b-168f-4816-9895-99fb9f2e4a7b"}, {"SnippetId" :"133131ac-9ee5-47b2-8047-351746ee9e10"}, {"SnippetId" :"62d0b48f-6f54-4fa2-a455-e1f288cfd0c8"}, {"SnippetId" :"b67af98c-895c-4d9c-bee1-2c43359c6885"}], "snpProperties": [["Buttons", "\"display: grid; grid-gap: 5px\"\n: h3 \"text-align: center;align-self: self-end;margin: 0px;\" \"${FSharpStation.SnippetName}:\"\nCopy Procedure\n:div \"\"\n:li \"\" \"SQL procedure: GENERIC.SP_LOAD_${FSharpStation.SnippetName}\"\n:li \"\" \"Click to copy to clipboard. Wait ... ignore first Done!\"\n:li \"font-weight:700\" \"Paste and execute into database: ARDatamart\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n"], ["Copy Procedure", "CodePresence.present <- Map.empty\n(FSGlobal.SlowlyChangingDimensions.AllDimensions |> Seq.find(fun dm -> dm.TableName = \"${FSharpStation.SnippetName}\") ).Procedure\n|> fun s -> printfn \"%s\" s ; FSGlobal.Useful.sCopy s"]], "snpGeneration": 1678}, {"snpId": {"SnippetId" :"96efc394-df97-4995-9643-b15f9475e16c"}, "snpName": "SV_DIM_RECEIVABLE", "snpContent": "let dimReceivable = \n    Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_RECEIVABLE        \" \"SRC_SYS_ID LIKE @SOURCE + '%'\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n      , snowflakes =\n                 [\n                    \"DIM_RECEIVABLE_AD_VAL_RECEIVABLE_DET\"\n                    \"DIM_RECEIVABLE_BOOT_TOW_DET\"\n                    \"DIM_RECEIVABLE_EMS_RECEIVABLE_DET\"\n                    \"DIM_RECEIVABLE_FIRE_ALM_CIT_DET\"\n                    \"DIM_RECEIVABLE_PRKG_CONTRA_DET\"\n                 ]\n      , fields = [\n                    BusinessKey    SRC_SYS_ID                     \n                    SourceDate     DTE\n                    IntraDayOrder  INTRA_DAY_ORDER\n                    ChangeReason   ROW_CHG_RSN\n                    \n                    SurrogateKey   RECEIVABLE_KEY                    \n                    SCD2BeginDate  VERS_BEG_DTE                       \n                    SCD2EndDate    VERS_END_DTE                       \n                    SCD2Current    CURR_VERS_FLAG           \n\n////////////                       SCD2                              SCD1                             SCD0        \n////////////                       ---------                         -------                          ------\n                    SCD2           RECEIVABLE_STAT                   Nil                              Nil\n                    SCD2           RECEIVABLE_STAT_CHG_DTE           Nil                              Nil\n                    SCD2           RECEIVABLE_VERS_ISSUE_DTE         RECEIVABLE_CURR_ISSUE_DTE        RECEIVABLE_ORIG_ISSUE_DTE            \n                    SCD2           RECEIVABLE_VERS_DUE_DTE           RECEIVABLE_CURR_DUE_DTE          RECEIVABLE_ORIG_DUE_DTE              \n                    SCD2           RECEIVABLE_VERS_DELINQ_DTE        RECEIVABLE_CURR_DELINQ_DTE       RECEIVABLE_ORIG_DELINQ_DTE           \n                    SCD2           RECEIVABLE_VERS_TO_DTE            RECEIVABLE_CURR_TO_DTE           RECEIVABLE_ORIG_TO_DTE               \n                    SCD2           RECEIVABLE_VERS_BILLING_TO_DTE    RECEIVABLE_CURR_BILLING_TO_DTE   RECEIVABLE_ORIG_BILLING_TO_DTE       \n                    SCD2           VERS_ASSIGNED_VEND                CURR_ASSIGNED_VEND               ORIG_ASSIGNED_VEND              \n                    SCD2           RECEIVABLE_MSTR_STAT              Nil                              Nil\n                    SCD2           RECEIVABLE_MSTR_STAT_CHG_DTE      Nil                              Nil\n\n////////////                       SCD1                              SCD0                    \n////////////                       ---------                         -------                        \n                    SCD1           INV_NUM                           ORIG_INV_NUM                   \n                    SCD1           RECEIVABLE_EVER_TRANS_FLAG        Nil\n                    SCD1           RECEIVABLE_LITIGATION_DTE         Nil\n                    SCD1           RECEIVABLE_FNL_PAY_DTE            Nil\n                    SCD1           RECEIVABLE_1ST_PAY_DTE            Nil\n                    SCD1           RECEIVABLE_SETTLEMENT_DTE         Nil\n                    SCD1           FIRE_ALM_AGING_RST_FLAG           Nil\n                    SCD1           REINSTATEMENT_DTE                 Nil\n                    SCD1           FIRE_ORIG_ISSUE_DTE               Nil\n                    SCD1           ITEM_DESCR                        Nil\n                    SCD1           ORIG_BILL_NAME                    Nil\n                    SCD1           UNK_CUST_AT_BILL_FLAG             Nil\n\n////////////                       SCD0                    \n////////////                       --------- \n                    SCD0           LOAD_DTE                        \n                    SCD0           LOAD_TIME              \n                    \n                    SCD1           FLAG_DIM_RECEIVABLE_AD_VAL_RECEIVABLE_DET  Nil\n                    SCD1           ``A#3307_ATTY_FEE_DTE``                    Nil\n                    SCD1           ``A#3308_ATTY_FEE_DTE``                    Nil\n                    SCD1           ``A#3348_ATTY_FEE_DTE``                    Nil\n                    SCD1           AD_VAL_ACCT_LVL_ID                         Nil\n                    SCD1           AD_VAL_DISABLED_FLAG                       Nil\n                    SCD1           AD_VAL_EFF_DTE_OF_OWNERSHIP                Nil\n                    SCD1           AD_VAL_HOMESTEAD_FLAG                      Nil\n                    SCD1           AD_VAL_OVER_66_FLAG                        Nil\n                    SCD1           AD_VAL_TAX_DEFERRAL_END_DTE                Nil\n                    SCD1           AD_VAL_TAX_DEFERRAL_START_DTE              Nil\n                    SCD1           AD_VAL_VET_FLAG                            Nil\n                    SCD1           COLL_LAWSUIT_NUM                           Nil\n                    SCD1           COLL_LGL_COND                              Nil\n                    SCD1           HCAD_ACCT_STAT                             Nil\n                    SCD1           QTRLY_PAY_FLAG                             Nil\n                    SCD1           FLAG_DIM_RECEIVABLE_BOOT_TOW_DET           Nil\n                    SCD1           RECEIVABLE_HAS_LTR_FLAG                    Nil\n                    SCD1           RECEIVABLE_HAS_NOTE_FLAG                   Nil\n                    SCD1           RECEIVABLE_HAS_PEND_LTR_FLAG               Nil\n                    SCD1           RESOLVE_DESCR                              Nil\n                    SCD1           RESOLVE_DTE                                Nil\n                    SCD1           RESOLVE_RSN                                Nil\n                    SCD1           RESOLVED_BY                                Nil\n                    SCD1           FLAG_DIM_RECEIVABLE_EMS_RECEIVABLE_DET     Nil\n                    SCD1           ACTV_CARRIER                               Nil\n                    SCD1           ACTV_CARRIER_FIN_CLASS                     Nil\n                    SCD1           ACTV_CARRIER_FIN_GRP                       Nil\n                    SCD1           BILLING_HOLD_FLAG                          Nil\n                    SCD1           SIG_FLAG                                   Nil\n                    SCD1           FLAG_DIM_RECEIVABLE_FIRE_ALM_CIT_DET       Nil\n                    SCD1           VOID_CODE                                  Nil\n                    SCD1           VOID_DESCR                                 Nil\n                    SCD1           WORK_STAT                                  Nil\n                    SCD1           FLAG_DIM_RECEIVABLE_PRKG_CONTRA_DET        Nil\n                    SCD1           ESC_CAND_FLAG                              Nil\n                    SCD1           ON_ADMIN_HOLD_FLAG                         Nil\n                    SCD1           UNDER_APPEAL_FLAG                          Nil\n                    SCD1           VOID_FLAG                                  Nil\n                    SCD1           WRITE_OFF_FLAG                             Nil\n                 ]\n    )\n\n(*\nopen SlowlyChangingDimensions\nprint dimReceivable.Procedure\nprint dimReceivable.Verification\n*)", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1264}, {"snpId": {"SnippetId" :"72108083-b588-4246-9978-6fff21e46351"}, "snpName": "SV_DIM_ITEM", "snpContent": "let dimItem =\n    Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_ITEM              \" \"\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n      , snowflakes = \n                 [\n                    \"DIM_ITEM_BURG_ALM_PERMIT_DET\"\n                    \"DIM_ITEM_FIRE_ALM_PERMIT_DET\"\n                    \"DIM_ITEM_LICENSED_VEH_DET\"\n                    \"DIM_ITEM_PT_DET\"\n                    \"DIM_ITEM_TAXABLE_PROP_DET\"\n                    \"DIM_ITEM_WTR_ACCT_DET\"\n                 ]\n      , fields = [\n                    BusinessKey    ITEM_TYPE                     \n                    SourceDate     DTE                           \n                    IntraDayOrder  INTRA_DAY_ORDER\n                    ChangeReason   ROW_CHG_RSN\n\n                    SurrogateKey   ITEM_KEY                        \n                    SCD2BeginDate  VERS_BEG_DTE                     \n                    SCD2EndDate    VERS_END_DTE                     \n                    SCD2Current    CURR_VERS_FLAG                \n                    SCD2           ITEM_STAT                        Nil                             Nil\n                    SCD2           ITEM_STAT_CHG_DTE                Nil                             Nil\n                    SCD1           ITEM_EXMPT_FLAG                  Nil\n                    SCD1           ITEM_ADDR_LINE_1                 Nil\n                    SCD1           ITEM_ADDR_LINE_2                 Nil\n                    SCD1           ITEM_ADDR_LINE_3                 Nil\n                    SCD1           ITEM_ST_NUM                      Nil\n                    SCD1           ITEM_PREFIX                      Nil\n                    SCD1           ITEM_ST_PRETYPE                  Nil\n                    SCD1           ITEM_ST_NAME                     Nil\n                    SCD1           ITEM_ST_TYPE                     Nil\n                    SCD1           ITEM_SUFF                        Nil\n                    SCD1           ITEM_SERV_LVL                    Nil\n                    SCD1           ITEM_IN_CITY_FLAG                Nil\n                    SCD1           ITEM_CITY                        Nil\n                    SCD1           ITEM_STATE                       Nil\n                    SCD1           ITEM_CTRY                        Nil\n                    SCD1           ITEM_ST_DIR                      Nil\n                    SCD1           ITEM_ST                          Nil\n                    SCD1           ITEM_CNTY                        Nil\n                    SCD1           ITEM_APT_LOT                     Nil\n                    SCD1           ITEM_GIS_MATCH_SCORE             Nil\n                    SCD1           ITEM_GIS_ST_NUM                  Nil\n                    SCD1           ITEM_GIS_PREFIX                  Nil\n                    SCD1           ITEM_GIS_ST_PRETYPE              Nil\n                    SCD1           ITEM_GIS_ST_NAME                 Nil\n                    SCD1           ITEM_GIS_ST_TYPE                 Nil\n                    SCD1           ITEM_GIS_SUFF                    Nil\n                    SCD1           ITEM_GIS_CITY                    Nil\n                    SCD1           ITEM_GIS_ZIP                     Nil\n                    SCD1           ITEM_GIS_X                       Nil\n                    SCD1           ITEM_GIS_Y                       Nil\n                    SCD1           ITEM_ZIP_CODE                    Nil\n                    SCD1           ITEM_ZIP_PLUS_4                  Nil\n                    SCD1           ITEM_GIS_LOCATR_NAME             Nil\n                    SCD0           LOAD_DTE                        \n                    SCD0           LOAD_TIME         \n                    \n                    SCD1           FLAG_DIM_ITEM_BURG_ALM_PERMIT_DET  Nil\n                    SCD1           ALLOWABLE_NO_CHRG_INCDTS           Nil\n                    SCD1           ALM_MNT_CMPNY                      Nil\n                    SCD1           ALM_TYPE                           Nil\n                    SCD1           PERMIT_EXP_DTE                     Nil\n                    SCD1           PERMIT_ISSUE_DTE                   Nil\n                    SCD1           PERMIT_NAME                        Nil\n                    SCD1           PERMIT_NUM                         Nil\n                    SCD1           REG_HOLDER_FLAG                    Nil\n                    SCD1           SUSPD_PERMIT_DTE                   Nil\n                    SCD1           SUSPD_PERMIT_RSN                   Nil\n                    SCD1           TYPE_OF_ALM_SITE                   Nil\n                    SCD1           FLAG_DIM_ITEM_FIRE_ALM_PERMIT_DET  Nil\n                    SCD1           ALM_INSTL_CMPNY                    Nil\n                    SCD1           ALM_INSTL_DTE                      Nil\n                    SCD1           ALM_REG_KEY                        Nil\n                    SCD1           APPLICTN_RECV_DTE                  Nil\n                    SCD1           CURR_FIRE_ALM_PERMIT_FLAG          Nil\n                    SCD1           EXCL_TYPE                          Nil\n                    SCD1           FIRE_ALM_PERMIT_ACTV_FLAG          Nil\n                    SCD1           FIRE_ALM_PERMIT_NUM                Nil\n                    SCD1           FIRE_ALM_PURPOSE                   Nil\n                    SCD1           FLAG_DIM_ITEM_LICENSED_VEH_DET     Nil\n                    SCD1           LICENSE_PLATE_EXP_MTH              Nil\n                    SCD1           LICENSE_PLATE_EXP_YR               Nil\n                    SCD1           LICENSE_PLATE_NUM                  Nil\n                    SCD1           LICENSE_PLATE_TYPE                 Nil\n                    SCD1           OWNER_IS_CUST_FLAG                 Nil\n                    SCD1           SRC_SYS_VEH_ID                     Nil\n                    SCD1           VEH_COLOR                          Nil\n                    SCD1           VEH_ID_NUM                         Nil\n                    SCD1           VEH_MAKE                           Nil\n                    SCD1           VEH_MODEL                          Nil\n                    SCD1           VEH_MODEL_YR                       Nil\n                    SCD1           VEH_OWNER_ID                       Nil\n                    SCD1           VEH_OWNER_NAME                     Nil\n                    SCD1           VEH_TYPE                           Nil\n                    SCD1           FLAG_DIM_ITEM_PT_DET               Nil\n                    SCD1           PT_AGE                             Nil\n                    SCD1           PT_GNDR                            Nil\n                    SCD1           FLAG_DIM_ITEM_TAXABLE_PROP_DET     Nil\n                    SCD1           APPRAISAL_DISTR_ACCT_NUM           Nil\n                    SCD1           CAN                                Nil\n                    SCD1           CC_JURIS_CODE                      Nil\n                    SCD1           CC_JURIS_DESCR                     Nil\n                    SCD1           CITY_RFPD_JURIS_CODE               Nil\n                    SCD1           CITY_RFPD_JURIS_DESCR              Nil\n                    SCD1           CONFI_ACCT_FLAG                    Nil\n                    SCD1           MUNIC_UTIL_DISTR_CODE              Nil\n                    SCD1           MUNIC_UTIL_DISTR_DESCR             Nil\n                    SCD1           NUM_OF_ACRES                       Nil\n                    SCD1           OWNERSHIP_EFF_DTE                  Nil\n                    SCD1           PROP_CLASS_CODE                    Nil\n                    SCD1           PROP_CLASS_DESCR                   Nil\n                    SCD1           REND_PENALTY_JURIS_CODE            Nil\n                    SCD1           REND_PENALTY_JURIS_DESCR           Nil\n                    SCD1           SCHOOL_JURIS_CODE                  Nil\n                    SCD1           SCHOOL_JURIS_DESCR                 Nil\n                    SCD1           SUBSTANTIAL_ERR_PENALTY            Nil\n                    SCD1           TAX_DEFERRAL_END_DTE               Nil\n                    SCD1           TAX_DEFERRAL_START_DTE             Nil\n                    SCD1           TAX_ROLL_CODE                      Nil\n                    SCD1           TAX_ROLL_DESCR                     Nil\n                    SCD1           TAXABLE_PROP_LGL_DESCR_1           Nil\n                    SCD1           TAXABLE_PROP_LGL_DESCR_2           Nil\n                    SCD1           TAXABLE_PROP_LGL_DESCR_3           Nil\n                    SCD1           TAXABLE_PROP_LGL_DESCR_4           Nil\n                    SCD1           TAXABLE_PROP_LGL_DESCR_5           Nil\n                    SCD1           TAXABLE_PROP_ROLL_TYPE             Nil\n                    SCD1           FLAG_DIM_ITEM_WTR_ACCT_DET         Nil\n                    SCD1           CURR_WTR_ACCT_FLAG                 Nil\n                    SCD1           DELINQ_DTE                         Nil\n                    SCD1           LAST_CUST_CONN_DTE                 Nil\n                    SCD1           LAST_CUST_CUTOFF_DTE               Nil\n                    SCD1           LAST_CUST_DISCONN_DTE              Nil\n                    SCD1           LAST_METER_INSPECT_DTE             Nil\n                    SCD1           OWNER_RENTER                       Nil\n                    SCD1           SEN_CITIZEN_FLAG                   Nil\n                    SCD1           VAC_FLAG                           Nil\n                    SCD1           WTR_ACCT_NUM_OF_UNITS              Nil\n                    SCD1           WTR_ACCT_ORIG_USE_TYPE             Nil\n                    SCD1           WTR_ACCT_PROP_USE_TYPE             Nil\n                    SCD1           WTR_METER_NUM                      Nil\n                 ]\n    )\n    \n(*\nopen SlowlyChangingDimensions\nprint dimItem.Procedure\nprint dimItem.Verification\n*)    ", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1265}, {"snpId": {"SnippetId" :"80a1bb44-c482-4a00-bf8a-63832322bad9"}, "snpName": "SV_DIM_INCDT", "snpContent": "let dimIncdt =\n    Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_INCDT             \" \"SRC_SYS_ID LIKE @SOURCE + '%'\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n      , snowflakes =\n                 [\n                    \"DIM_INCDT_EMS_DET\"\n                 ]\n      , fields = [\n                    BusinessKey    SRC_SYS_ID                          \n                    SourceDate     DTE                                 \n                    IntraDayOrder  INTRA_DAY_ORDER\n                    ChangeReason   ROW_CHG_RSN\n\n                    SurrogateKey   INCDT_KEY                              \n                    SCD2BeginDate  VERS_BEG_DTE                            \n                    SCD2EndDate    VERS_END_DTE                            \n                    SCD2Current    CURR_VERS_FLAG                      \n                    SCD2           ADJ_FLAG                              Nil Nil\n                    SCD1           BILLED_FLAG                           Nil\n                    SCD1           RSN_INCDT_NOT_BILLED                  Nil\n                    SCD1           INV_NUM                               Nil\n                    SCD1           PERMIT_IS_CURR_AT_TIME_OF_INCDT_FLAG  Nil\n                    SCD1           INCDT_DESCR                           Nil\n                    SCD1           VIO_CODE                              Nil\n                    SCD1           INCDT_TYPE                            Nil\n                    SCD1           INCDT_CAT                             Nil\n                    SCD1           TOWING_CMPNY                          Nil\n                    SCD1           BOOT_SERIAL_NUM                       Nil\n                    SCD1           PRKG_METER_VIO_FLAG                   Nil\n                    SCD1           PRKG_METER_NUM                        Nil\n                    SCD1           INCDT_SEQ_NUM                         Nil\n                    SCD1           INCDT_DTE                             Nil\n                    SCD1           INCDT_TIME                            Nil\n                    SCD1           INCDT_ADDR_LINE_1                     Nil\n                    SCD1           INCDT_ADDR_LINE_2                     Nil\n                    SCD1           INCDT_ADDR_LINE_3                     Nil\n                    SCD1           INCDT_ST_NUM                          Nil\n                    SCD1           INCDT_PREFIX                          Nil\n                    SCD1           INCDT_ST_PRETYPE                      Nil\n                    SCD1           INCDT_ST_NAME                         Nil\n                    SCD1           INCDT_ST_TYPE                         Nil\n                    SCD1           INCDT_SUFF                            Nil\n                    SCD1           INCDT_SERV_LVL                        Nil\n                    SCD1           INCDT_IN_CITY_FLAG                    Nil\n                    SCD1           INCDT_CITY                            Nil\n                    SCD1           INCDT_STATE                           Nil\n                    SCD1           INCDT_CTRY                            Nil\n                    SCD1           INCDT_ST_DIR                          Nil\n                    SCD1           INCDT_ST                              Nil\n                    SCD1           INCDT_CNTY                            Nil\n                    SCD1           INCDT_APT_LOT                         Nil\n                    SCD1           INCDT_GIS_MATCH_SCORE                 Nil\n                    SCD1           INCDT_GIS_ST_NUM                      Nil\n                    SCD1           INCDT_GIS_PREFIX                      Nil\n                    SCD1           INCDT_GIS_ST_PRETYPE                  Nil\n                    SCD1           INCDT_GIS_ST_NAME                     Nil\n                    SCD1           INCDT_GIS_ST_TYPE                     Nil\n                    SCD1           INCDT_GIS_SUFF                        Nil\n                    SCD1           INCDT_GIS_CITY                        Nil\n                    SCD1           INCDT_GIS_ZIP                         Nil\n                    SCD1           INCDT_GIS_X                           Nil\n                    SCD1           INCDT_GIS_Y                           Nil\n                    SCD1           INCDT_ZIP_CODE                        Nil\n                    SCD1           INCDT_ZIP_PLUS_4                      Nil\n                    SCD1           INCDT_GIS_LOCATR_NAME                 Nil\n                    SCD1           BLK_NUM                               Nil\n//                  SCD1           VEH                                   Nil\n//                  SCD1           EMS_INCDT                             Nil\n//                  SCD1           DISPATCH_NUM                          Nil\n//                  SCD1           EMS_INCDT_CAT                         Nil\n//                  SCD1           TXP_SERV_LVL                          Nil\n//                  SCD1           TXP_TYPE                              Nil\n//                  SCD1           ORIGIN_LOC                            Nil\n//                  SCD1           DEST_LOC                              Nil\n                    SCD0           LOAD_DTE                             \n                    SCD0           LOAD_TIME                            \n\n                    SCD1           FLAG_DIM_INCDT_EMS_DET                Nil\n                    SCD1           DEST_LOC                              Nil\n                    SCD1           DISPATCH_NUM                          Nil\n                    SCD1           EMS_INCDT                             Nil\n                    SCD1           EMS_INCDT_CAT                         Nil\n                    SCD1           ORIGIN_LOC                            Nil\n                    SCD1           TXP_SERV_LVL                          Nil\n                    SCD1           TXP_TYPE                              Nil\n                    SCD1           VEH                                   Nil\n                 ]\n    )\n    \n(*\nopen SlowlyChangingDimensions\nprint dimIncdt.Procedure\nprint dimIncdt.Verification\n*)    ", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1266}, {"snpId": {"SnippetId" :"81c54ba2-389b-4333-8e02-42004320dde0"}, "snpName": "DIM_CUST", "snpContent": "let dimCust = \n    Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_CUST              \" \"CUST_ID LIKE @SOURCE + '%'\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n      , fields = [\n                    BusinessKey    CUST_ID                                \n                    SourceDate     DTE                                       \n                    IntraDayOrder  INTRA_DAY_ORDER\n                    ChangeReason   ROW_CHG_RSN\n\n                    SurrogateKey   CUST_KEY                               \n                    SCD2BeginDate  VERS_BEG_DTE                            \n                    SCD2EndDate    VERS_END_DTE                            \n                    SCD2Current    CURR_VERS_FLAG                      \n                    SCD2           JV_CUST_FLAG                          Nil Nil\n                    SCD2           DEC_CUST_FLAG                         Nil Nil\n                    SCD1           CONFI_CUST_FLAG                       Nil\n                    SCD1           CUST_EMAIL_ADDR                       Nil\n                    SCD1           CUST_PHN_NUM_1                        Nil\n                    SCD1           CUST_FAX_NUM                          Nil\n                    SCD1           CUST_NAME                             Nil\n                    SCD1           FED_TAX_ID                            Nil\n                    SCD1           CUST_TYPE                             Nil\n                    SCD1           BUS_CONT_PERSON_NAME                  Nil\n                    SCD1           STATE_CORP_CHTR_ID                    Nil\n                    SCD1           STATE_SALES_TAX_ID                    Nil\n                    SCD1           CUST_IS_VEND_FLAG                     Nil\n                    SCD1           SAP_BUS_ID                            Nil\n                    SCD1           NAICS_DET_CODE                        Nil\n                    SCD1           NAICS_INDY_CODE                       Nil\n                    SCD1           NAICS_INDY_GRP_CODE                   Nil\n                    SCD1           NAICS_MAJ_GRP_CODE                    Nil\n                    SCD1           NAICS_DIV_CODE                        Nil\n                    SCD1           SIC_INDY_GRP_CODE                     Nil\n                    SCD1           SIC_MAJ_GRP_CODE                      Nil\n                    SCD1           SIC_DIV_CODE                          Nil\n                    SCD1           DL_ISSUE_STATE                        Nil\n                    SCD1           DL_NUM                                Nil\n                    SCD1           CUST_ADDR_LINE_1                      Nil\n                    SCD1           CUST_ADDR_LINE_2                      Nil\n                    SCD1           CUST_ADDR_LINE_3                      Nil\n                    SCD1           CUST_ST_NUM                           Nil\n                    SCD1           CUST_PREFIX                           Nil\n                    SCD1           CUST_ST_PRETYPE                       Nil\n                    SCD1           CUST_ST_NAME                          Nil\n                    SCD1           CUST_ST_TYPE                          Nil\n                    SCD1           CUST_SUFF                             Nil\n                    SCD1           CUST_SERV_LVL                         Nil\n                    SCD1           CUST_IN_CITY_FLAG                     Nil\n                    SCD1           CUST_CITY                             Nil\n                    SCD1           CUST_STATE                            Nil\n                    SCD1           CUST_CTRY                             Nil\n                    SCD1           CUST_ST_DIR                           Nil\n                    SCD1           CUST_ST                               Nil\n                    SCD1           CUST_CNTY                             Nil\n                    SCD1           CUST_APT_LOT                          Nil\n                    SCD1           CUST_GIS_MATCH_SCORE                  Nil\n                    SCD1           CUST_GIS_ST_NUM                       Nil\n                    SCD1           CUST_GIS_PREFIX                       Nil\n                    SCD1           CUST_GIS_ST_PRETYPE                   Nil\n                    SCD1           CUST_GIS_ST_NAME                      Nil\n                    SCD1           CUST_GIS_ST_TYPE                      Nil\n                    SCD1           CUST_GIS_SUFF                         Nil\n                    SCD1           CUST_GIS_CITY                         Nil\n                    SCD1           CUST_GIS_ZIP                          Nil\n                    SCD1           CUST_GIS_X                            Nil\n                    SCD1           CUST_GIS_Y                            Nil\n                    SCD1           CUST_ZIP_CODE                         Nil\n                    SCD1           CUST_ZIP_PLUS_4                       Nil\n                    SCD1           CUST_GIS_LOCATR_NAME                  Nil\n                    SCD1           CUST_PAR_KEY                          Nil\n                    SCD1           SIC_CODE                              Nil\n                    SCD1           NAICS_DET_NAME                        Nil\n                    SCD1           NAICS_INDY_NAME                       Nil\n                    SCD1           NAICS_INDY_GRP_NAME                   Nil\n                    SCD1           NAICS_MAJ_GRP_NAME                    Nil\n                    SCD1           NAICS_DIV_NAME                        Nil\n                    SCD1           SIC_NAME                              Nil\n                    SCD1           SIC_INDY_GRP_NAME                     Nil\n                    SCD1           SIC_MAJ_GRP_NAME                      Nil\n                    SCD1           SIC_DIV_NAME                          Nil\n                    SCD1           CUST_PHN_NUM_2                        Nil\n                    SCD1           CUST_PHN_NUM_3                        Nil\n                    SCD1           SRC_SYS_MOD_DTE                       Nil\n                    SCD0           LOAD_DTE                             \n                    SCD0           LOAD_TIME                            \n                 ]\n    )\n    \n(*\nopen SlowlyChangingDimensions\nprint dimCust.Procedure\nprint dimCust.Verification\n*)    ", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1164}, {"snpId": {"SnippetId" :"e193a2d8-54ab-4b99-a5cf-a6084db9fffb"}, "snpName": "DIM_FIN_TRANS_TYPE", "snpContent": "let dimFinTransType =\n    Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_FIN_TRANS_TYPE    \" \"DET_TRANS_CODE LIKE @SOURCE + '%'\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"                                 \" \"\"\n      , fields = [\n                    BusinessKey    DET_TRANS_CODE                               \n                    SurrogateKey   FIN_TRANS_TYPE_KEY                  \n                    SCD1           PAY_METH                              Nil\n                    SCD1           MAN_TRANS_FLAG                        Nil\n                    SCD1           DERIVED_TRANS_FLAG                    Nil\n                    SCD1           MSTR_TRANS_TYPE                       Nil\n                    SCD1           SRC_SYS                               Nil\n                    SCD1           ALLOC_TRANS_FLAG                      Nil\n                    SCD1           DET_TRANS_DESCR                       Nil\n                    SCD1           T2_TRANS_TYPE_CODE                    Nil\n                    SCD1           T2_TRANS_TYPE_DESCR                   Nil\n                    SCD1           T2_TRANS_RSN                          Nil\n                    SCD1           T2_TRANS_PARSED_DESCR                 Nil\n                    SCD1           T2_TRANS_MISC_ITEM_CODE               Nil\n                    SCD1           T2_TRANS_MISC_ITEM_DESCR              Nil\n                    SCD1           T2_TRANS_SCENARIO                     Nil\n                    SCD1           INTRA_FUND_TRANS_FLAG                 Nil\n                    SCD1           T2_TRANS_ORIG_OBJ_TYPE_ID             Nil\n                    SCD1           SMARTCM_OTHER_CRITERIA                Nil\n                    SCD1           SMARTCM_IS_FEE                        Nil\n                    SCD1           SMARTCM_IS_ADJMT                      Nil\n                    SCD1           SMARTCM_IS_PAY                        Nil\n                    SCD1           PMAM_ADJMT_TO                         Nil\n                    SCD1           PMAM_ADJMT_TYPE                       Nil\n                    SCD1           DIGITECH_TRANS_TYPE                   Nil\n                    SCD1           DIGITECH_TRANS_TYPE_DET               Nil\n                    SCD0           LOAD_DTE                             \n                    SCD0           LOAD_TIME                            \n                 ]\n    )\n\n(*\nopen SlowlyChangingDimensions\nprint dimFinTransType.Procedure\nprint dimFinTransType.Verification\n*)    ", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1226}, {"snpId": {"SnippetId" :"7e3c7382-100e-4212-b9be-02cd9f1cb2db"}, "snpName": "DIM_CARRIER", "snpContent": "Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_CARRIER           \" \"\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n      , fields = [\n                    BusinessKey    SRC_CARRIER_KEY                         \n                    SurrogateKey   CARRIER_KEY                            \n                    SCD1           MEDICARE_PAYER_CODE                   Nil\n                    SCD1           MEDICAID_PAYER_CODE                   Nil\n                    SCD1           CARRIER_FIN_GRP                       Nil\n                    SCD1           CARRIER_FIN_CLASS                     Nil\n                    SCD1           CARRIER_GRP                           Nil\n                    SCD1           CARRIER_NAME                          Nil\n                    SCD1           CARRIER_SRC                           Nil\n                    SCD0           LOAD_DTE                             \n                    SCD0           LOAD_TIME                            \n                 ]\n    )\n", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1093}, {"snpId": {"SnippetId" :"83efdc7d-7464-4d4e-a129-47e9c05601d4"}, "snpName": "DIM_CARRIER_PROCEDURE", "snpContent": "Dimension.New(\r\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_CARRIER_PROCEDURE \" \"\" \"\"\r\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\r\n      , fields = [\r\n                    BusinessKey    SRC_CARRIER_PROCEDURE_KEY                \r\n                    SurrogateKey   CARRIER_PROCEDURE_KEY                  \r\n                    SCD1           CARRIER_PROCEDURE_SRC                 Nil\r\n                    SCD1           CARRIER_PROCEDURE_CODE                Nil\r\n                    SCD1           CARRIER_PROCEDURE_DESCR               Nil\r\n                    SCD1           CARRIER_PROCEDURE_TYPE                Nil\r\n                    SCD1           CARRIER_PROCEDURE_BILL_CODE           Nil\r\n                    SCD0           LOAD_DTE                             \r\n                    SCD0           LOAD_TIME                            \r\n                 ]\r\n    )", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1090}, {"snpId": {"SnippetId" :"9aae1fe6-2d4d-460c-8944-1f413bd0e9d7"}, "snpName": "DIM_COLL_PERSON", "snpContent": "let dimCollPerson =\r\n    Dimension.New(\r\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_COLL_PERSON       \" \"COLL_PERSON_ID LIKE @SOURCE + '%'\" \"\"\r\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"                                 \" \"\"\r\n      , fields = [\r\n                    BusinessKey    COLL_PERSON_ID                           \r\n                    SurrogateKey   COLL_PERSON_KEY                        \r\n                    SCD1           T2_ID                                 Nil\r\n                    SCD1           PMAM_ID                               Nil\r\n                    SCD1           SMART_CM_ID                           Nil\r\n                    SCD1           HCTO_AD_VAL_ID                        Nil\r\n                    SCD1           COLL_PERSON_TYPE                      Nil\r\n                    SCD1           COLL_PERSON_NAME                      Nil\r\n                    SCD1           COH_EMP_NUM                           Nil\r\n                    SCD1           INT_EXT_EMP_FLAG                      Nil\r\n                    SCD1           DIGITECH_ID                           Nil\r\n                    SCD0           LOAD_DTE                             \r\n                    SCD0           LOAD_TIME                            \r\n                 ]\r\n    )", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1191}, {"snpId": {"SnippetId" :"98eb5001-c777-4d47-938c-266cc6391c62"}, "snpName": "DIM_EMP", "snpContent": "let dimEmp =\r\n    Dimension.New(\r\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_EMP               \" \"COH_EMP_NUM LIKE @SOURCE + '%'\" \"\"\r\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"                              \" \"\"\r\n      , fields = [\r\n                    BusinessKey    COH_EMP_NUM                                  \r\n                    SurrogateKey   EMP_KEY                                \r\n                    SCD1           EMP_TYPE                              Nil\r\n                    SCD1           EMP_NAME                              Nil\r\n                    SCD1           RM_LOAD_DTE                           Nil\r\n                    SCD1           RM_LOAD_TIME                          Nil\r\n                    SCD1           RM_EMP_MSTR_KEY                       Nil\r\n                    SCD0           LOAD_DTE                             \r\n                    SCD0           LOAD_TIME                            \r\n                 ]\r\n    )\r\n", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1207}, {"snpId": {"SnippetId" :"8ac0aab1-a418-4773-a56d-eececc3289f1"}, "snpName": "DIM_COH_ORG", "snpContent": "let dimCohOrg =\n    Dimension.New(\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_COH_ORG    \" \"\" \"\"\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n      , fields = [\n                    BusinessKey    DIV_LONG_NAME                               \n                    SurrogateKey   COH_ORG_KEY   \n                    SCD0           LOAD_DTE                             \n                    SCD0           LOAD_TIME                      \n                    SCD1           DEPT_NAME                             Nil\n                    SCD1           DEPT_LONG_NAME                        Nil\n                    SCD1           DIV_NAME                              Nil     \n                    SCD0           COH                                   \n                 ]\n    )\n\n(*\nopen SlowlyChangingDimensions\nprint dimFinTransType.Procedure\nprint dimFinTransType.Verification\n*) ", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 1414}, {"snpId": {"SnippetId" :"cc19987b-e091-48e3-979f-1f450daa32b7"}, "snpName": "All Dimensions", "snpContent": "\r\nlet copyAllProcedures() =\r\n    AllDimensions   \r\n    |> Seq.map    (fun dm -> dm.Procedure)\r\n    |> String.concat \"\\n\\n\"\r\n    |> fun s -> printfn \"%s\" s ; Useful.sCopy s\r\n\r\n", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [{"SnippetId" :"72108083-b588-4246-9978-6fff21e46351"}, {"SnippetId" :"7e3c7382-100e-4212-b9be-02cd9f1cb2db"}, {"SnippetId" :"80a1bb44-c482-4a00-bf8a-63832322bad9"}, {"SnippetId" :"81c54ba2-389b-4333-8e02-42004320dde0"}, {"SnippetId" :"83efdc7d-7464-4d4e-a129-47e9c05601d4"}, {"SnippetId" :"8ac0aab1-a418-4773-a56d-eececc3289f1"}, {"SnippetId" :"96efc394-df97-4995-9643-b15f9475e16c"}, {"SnippetId" :"98eb5001-c777-4d47-938c-266cc6391c62"}, {"SnippetId" :"9aae1fe6-2d4d-460c-8944-1f413bd0e9d7"}, {"SnippetId" :"e193a2d8-54ab-4b99-a5cf-a6084db9fffb"}], "snpProperties": [["Buttons", "\"display: grid; grid-gap: 5px\"\n: h3 \"text-align: center;align-self: self-end;margin: 0px;\" \"${FSharpStation.SnippetName}:\"\nCopy All Procedures\n:div \"\"\n:li \"\" \"SQL procedures: GENERIC.SP_LOAD_SV_DIM_<Dimension> GENERIC.SP_LOAD_DIM_<Dimension>\"\n:li \"\" \"Click to copy to clipboard. Wait ... ignore first Done!\"\n:li \"font-weight:700\" \"Paste and execute into database: ARDatamart\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n"], ["Copy All Procedures", "CodePresence.present <- Map.empty\nFSGlobal.SlowlyChangingDimensions.Dimensions.copyAllProcedures()"]], "snpGeneration": 1682}, {"snpId": {"SnippetId" :"3a93122c-6b2f-4547-89a8-056c56f01984"}, "snpName": "DIM_DTE", "snpContent": "let dimDte =\r\n    Dimension( // not Dimension.New no procedure for DIM_DTE\r\n        table  = SQLTableView.New \"         \" \"       \" \"DIM_DTE               \" \"\" \"\"\r\n      , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\r\n      , fields = [\r\n                    BusinessKey    DTE                                         \r\n                    SurrogateKey   DTE_KEY                               \r\n                 ]\r\n    )    ", "snpParentIdO": {"SnippetId" :"e92d574f-c4d0-4a21-8e98-4146a46fa036"}, "snpPredIds": [], "snpProperties": [["Buttons", ""]], "snpGeneration": 1412}, {"snpId": {"SnippetId" :"ca42551e-1781-4b7f-ba28-609caafa658c"}, "snpName": "FG_FIN_TRANS_INTER", "snpContent": "open Dimensions\nlet finTrans =\n    FactTable.New(\n               table  = SQLTableView.New \"         \" \"       \" \"FG_FIN_TRANS_INTER    \" \"\" \"\"\n             , source = SQLTableView.New \"         \" \"       \" \"FINTRANS              \" \"\" \"\"\n             , dims   = [ //        dimension       SurrogateKey    BusinessKey (if different)\n                          dimension dimCust         Nil              Nil_\n                          dimension dimReceivable   Nil              Nil_\n                          dimension dimItem         Nil              Nil_\n                          dimension dimIncdt        Nil              Nil_\n                        //dimension dimCarrier      Nil              Nil_\n                        //dimension dimProcedure    Nil              Nil_\n                          dimension dimCollPerson   Nil              Nil_\n                          dimension dimEmp          Nil              Nil_\n                          dimension dimFinTransType Nil              Nil_\n                          dimension dimCohOrg       Nil              Nil_\n                          dimension dimDte          TRANS_DTE_KEY    Nil_\n                          dimension dimDte          POST_DTE_KEY     POST_DTE\n                        ]\n             , fields = [\n                          OField  SYS_LOAD_KEY          \"(SELECT MAX(SYS_LOAD_KEY) FROM DIM_SYS_LOAD WHERE SRC_SYS = @SOURCE)\"\n                          OField  ORIG_CUST_KEY         \"D0.CUST_KEY     \"\n                          OField  COLL_VEND_CONTR_KEY   \"CON.CONTR_KEY   \"\n                          OField  GL_COMBO_KEY          \"1\"\n                          Fact    TRANS_CNT            \n                          Fact    TRANS_AMT            \n                          Fact    INTRA_FUND_TRANS_AMT \n                          Fact    LOAD_DTE             \n                          Fact    LOAD_TIME            \n                          Fact    SRC_SYS_TRANS_ID     \n                        ]\n             , extra  = \"\"\"\nBEGIN\n  EXEC GENERIC.Log @SOURCE, 'SP_LOAD_FG_FIN_TRANS', 'Started DELETE FG_FIN_TRANS_INTER', '';\n    DELETE S \n    FROM        FG_FIN_TRANS_INTER S \n    INNER JOIN  DIM_SYS_LOAD L ON L.SYS_LOAD_KEY = S.SYS_LOAD_KEY \n    INNER JOIN  DIM_DTE      D ON D.DTE_KEY      = S.TRANS_DTE_KEY\n    WHERE L.SRC_SYS = @SOURCE\n      AND D.DTE BETWEEN ISNULL(@FROM, '1000-01-01') AND ISNULL(@TO, '9999-12-31');\n    \n  EXEC GENERIC.Log @SOURCE, 'SP_LOAD_FG_FIN_TRANS', 'Started INSERT FG_FIN_TRANS_INTER', '';\n    %s\n LEFT JOIN  DIM_VEND             V ON V.VEND_ID               = S.VERS_ASSIGNED_VEND\n LEFT JOIN  DIM_CONTR          CON ON  CON.VEND_KEY           = V.VEND_KEY              AND S.DTE BETWEEN CON.VALID_FROM_DTE AND CON.VALID_TO_DTE\n                                  AND (CON.CONTR_REV_STREAM   = S.SRC_SYS                OR CON.CONTR_REV_STREAM   = '***'    ) \n\n  EXEC GENERIC.Log @SOURCE, 'SP_LOAD_FG_FIN_TRANS', 'FINISHED!!! INSERT FG_FIN_TRANS_INTER', '';\nEND\n             \"\"\"\n             )\n\n(*\nopen SlowlyChangingDimensions\nprint finTrans       .Procedure\n*)\n\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [{"SnippetId" :"3a93122c-6b2f-4547-89a8-056c56f01984"}, {"SnippetId" :"72108083-b588-4246-9978-6fff21e46351"}, {"SnippetId" :"7e3c7382-100e-4212-b9be-02cd9f1cb2db"}, {"SnippetId" :"80a1bb44-c482-4a00-bf8a-63832322bad9"}, {"SnippetId" :"81c54ba2-389b-4333-8e02-42004320dde0"}, {"SnippetId" :"83efdc7d-7464-4d4e-a129-47e9c05601d4"}, {"SnippetId" :"8ac0aab1-a418-4773-a56d-eececc3289f1"}, {"SnippetId" :"96efc394-df97-4995-9643-b15f9475e16c"}, {"SnippetId" :"98eb5001-c777-4d47-938c-266cc6391c62"}, {"SnippetId" :"9aae1fe6-2d4d-460c-8944-1f413bd0e9d7"}, {"SnippetId" :"e193a2d8-54ab-4b99-a5cf-a6084db9fffb"}], "snpProperties": [["Buttons", "\"display: grid; grid-gap: 5px\"\n: h3 \"text-align: center;align-self: self-end;margin: 0px;\" \"${FSharpStation.SnippetName}:\"\nCopy Procedure\n:div \"\"\n:li \"\" \"SQL procedure: GENERIC.SP_LOAD_${FSharpStation.SnippetName}\"\n:li \"\" \"Click to copy to clipboard. Wait ... ignore first Done!\"\n:li \"font-weight:700\" \"Paste and execute into database: ARDatamart\"\n:div \"\"\n:div \"\"\n:div \"\"\n:div \"\"\n"], ["Copy Procedure", "(FSGlobal.SlowlyChangingDimensions.AllFactTables |> Seq.find(fun ft -> ft.TableName = \"${FSharpStation.SnippetName}\") ).Procedure\n|> fun s -> printfn \"%s\" s ; FSGlobal.Useful.sCopy s"]], "snpGeneration": 1619}, {"snpId": {"SnippetId" :"db8ed4d6-4bee-407f-958e-250016275444"}, "snpName": "SQLFetchFields & SnowFlakeViews ", "snpContent": "#if SLOWLY_CHANGING_DIMENSIONS\n#define SQL_FETCH_FIELDS \nopen FSharp.Data\n\n[<Literal>]\n//let ConnectionString = @\"Data Source=ARStagingdb.HouTx.lcl;Initial Catalog=ARDatamart;UID=cipherbsc;PWD=123456\"\nlet ConnectionString = @\"Data Source=ARStagingdb.HouTx.lcl;Initial Catalog=ARDatamart;Integrated Security=True;\"\nlet columns = \n    lazy\n        use cmd = new SqlCommandProvider<\"\nWITH Columns as (\n    SELECT DISTINCT \n           ColumnName = ISNULL(UPPER(COLUMN_NAME), 'Nil')\n         , DataType   = ISNULL(DATA_TYPE + ISNULL('(' + CONVERT(VARCHAR(20), CHARACTER_MAXIMUM_LENGTH) + ')', ''), '')\n         , NULLABLE = IIF(ISNULL(IS_NULLABLE, '') = 'NO', 0, 1)\n         , NRec = ROW_NUMBER() OVER (PARTITION BY COLUMN_NAME ORDER BY TABLE_NAME)\n    FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME  LIKE 'DIM_%'\n       OR TABLE_NAME = 'FG_FIN_TRANS'\n)\nSELECT ColumnName, DataType, NULLABLE  \nFROM Columns WHERE NRec = 1\n\" , ConnectionString, ResultType = ResultType.Tuples>(ConnectionString)\n        cmd.Execute()\n\nlet defaults =\n    lazy\n        use cmd = new SqlCommandProvider<\"SELECT TOP 1 * FROM ARStaging.EMS_MSB.VW_FG_FIN_TRANS\" , ConnectionString, ResultType = ResultType.DataReader>(ConnectionString)\n        use rdr = cmd.Execute()\n        if rdr.Read() |> not then [||] else\n        [|\n            for i = 0 to rdr.FieldCount - 1 do\n                if rdr.IsDBNull i |> not then\n                    yield rdr.GetName i, rdr.GetValue i \n                                         |> sprintf \"%A\" \n                                         |> fun s -> if s.StartsWith \"\\\"\" \n                                                     then s.[1..s.Length-2] |> sprintf \"'%s'\" \n                                                     else s\n        |]\n\n\nlet writeFieldDecl () =\n    columns.Value\n    |> Seq.map (sprintf \"%A\") \n    |> String.concat \"\\n    \" \n    |> sprintf \"let fieldDecl = [|\\n    %s \\n|]\"\n    |> fun txt -> System.IO.File.WriteAllText(\"FieldDecl.fsx\", txt)\n\nlet writeFieldDefault_Source () =\n    defaults.Value\n    |> Seq.sortBy snd\n    |> Seq.map (sprintf \"%A\") \n    |> String.concat \"\\n    \" \n    |> sprintf \"let fieldDefault = [|\\n    %s \\n|]\"\n    |> fun txt -> System.IO.File.WriteAllText(\"FieldDefault source.fsx\", txt)\n\n[<Literal>]\nlet columnsQuery = \"\nWITH Columns as (\n    SELECT DISTINCT \n\t\t   TableName  = ISNULL(UPPER(TABLE_NAME), 'Nil')\n         , ColumnName = ISNULL(UPPER(COLUMN_NAME), 'Nil')\n         , DataType   = ISNULL(DATA_TYPE + ISNULL('(' + CONVERT(VARCHAR(20), CHARACTER_MAXIMUM_LENGTH) + ')', ''), '')\n         , NULLABLE = IIF(ISNULL(IS_NULLABLE, '') = 'NO', 0, 1)\n         , NRec = ROW_NUMBER() OVER (PARTITION BY COLUMN_NAME ORDER BY TABLE_NAME)\n    FROM INFORMATION_SCHEMA.COLUMNS\n    WHERE TABLE_NAME  LIKE 'DIM_%'\n       OR TABLE_NAME = 'FG_FIN_TRANS'\n)\nSELECT DISTINCT \n       TableName\n     , ColumnName\n  FROM Columns\n WHERE CHARINDEX('|' + TableName + '|', @tables) > 0\nORDER BY 1, 2   \n   \"\n\ntype Dimension with\n    member this.allColumns() =\n        use cmd = new SqlCommandProvider<columnsQuery , ConnectionString, ResultType = ResultType.Tuples>(ConnectionString)\n        cmd.Execute(this.Snowflakes |> String.concat \"|\" |> sprintf \"|%s|%s|\" this.TableBase.sqlObject)\n    member this.superView() =\n        if this.Snowflakes |> Seq.isEmpty then \"\" else\n        let columns    = this.allColumns()\n        let first      = this.TableBase.sqlObject\n        let snowflakes = this.Snowflakes |> Seq.sort\n        let flags      = snowflakes |> Seq.map (sprintf \"        FLAG_%s = 0\")\n        let from  = \n            snowflakes\n            |> Seq.map (fun j -> sprintf \"LEFT JOIN %s ON %s.%s = %s.%s\" j j this.SurrogateKey first this.SurrogateKey)\n            |> String.concat \"\\n\"\n            |> sprintf \"  FROM %s \\n%s\" first\n        let fieldList f fields = fields |> Seq.map f |> String.concat \",\\n\"\n        let view =\n            columns\n            |> Seq.distinctBy (fun (tb, cl) -> cl)\n            |> fieldList (fun (tb, cl) -> sprintf \"        %s.%s\" (nameS tb) (nameS cl))\n            |> sprintf \"%s,\\n%s\" (flags |> String.concat \",\\n\")\n            |> sprintf \"SELECT \\n%s\\n%s\" <| from\n            |> sprintf \"%sAS\\n%s;\\nGO\" (sqlDropCreate VIEW (sprintf \"GENERIC.%s\" this.TableName))\n        let fields table = columns |> Seq.filter (fst >> ((=) table))\n        let snowflakeCond table = \n            if table = first then \"\" else \n            sprintf \"IF (SELECT TOP 1 FLAG_%s FROM INSERTED) = 1 \\n\" table\n        let createTrigger command codes =\n            codes\n            |> String.concat \";\\n\"\n            |> sprintf \"  ON GENERIC.SV_%s\\nINSTEAD OF %s AS\\nBEGIN\\n%s\\nEND;\\nGO\" first command\n            |> sprintf \"%s\\n%s\" (sqlDropCreate TRIGGER (sprintf \"GENERIC.TR_%s_%s\" command first))\n        let insertTable table =\n            fields table\n            |> fieldList (fun (tb, cl) -> sprintf \"        %s\" (nameS cl))\n            |> (fun flds -> \n                sprintf \"%s  INSERT INTO %s (%s)\\n  SELECT %s \\n  FROM inserted\"\n                  (snowflakeCond table) table flds flds      \n               )\n        let updateTable table =\n            fields table\n            |> fieldList (fun (tb, cl) -> sprintf \"    %s = inserted.%s\" (nameS cl) (nameS cl))\n            |> sprintf \"%s  UPDATE T SET\\n%s\\n  FROM %s T, inserted  \\n  WHERE T.%s = inserted.%s;\"\n                 (snowflakeCond table)\n                 <| table <| this.SurrogateKey <| this.SurrogateKey \n        let tables = Seq.append [first] snowflakes\n        let insert = tables |> Seq.map insertTable |> createTrigger \"INSERT\"\n        let update = tables |> Seq.map updateTable |> createTrigger \"UPDATE\"\n        view + insert + update\n\nlet snowflakeFields (dim: Dimension) =\n    if dim.Snowflakes |> Seq.isEmpty then \"\" else\n    use cmd = new SqlCommandProvider<columnsQuery , ConnectionString, ResultType = ResultType.Tuples>(ConnectionString)\n    let columns = \n        cmd.Execute(dim.Snowflakes |> Seq.sort |> String.concat \"|\" |> sprintf \"|%s|%s|\" dim.TableName)\n        |> Seq.distinctBy (fun (tb, cl) -> cl)\n\n    dim.Snowflakes\n    |> Seq.collect\n         (fun t ->\n            Seq.append\n                [ sprintf \"FLAG_%s\" t ]\n                (columns |> Seq.filter(fun (tb, fl) -> tb = t) |> Seq.map snd)\n         )\n    |> String.concat \"\\n\"\n\nlet snowflakeMissingFields (dim: Dimension) =\n    dim.allColumns()\n    |> Seq.filter(fun (tb, fn) -> \n        (finTransViewFieldNames |> Seq.contains fn |> not)\n     && (targetFieldNames       |> Seq.contains fn |> not)\n    )\n\nlet wrongFields (dim: Dimension) =\n    dim.AllFields\n    |> Seq.filter (fun n -> dim.allColumns() |> Seq.exists (fun (tb, cl) -> cl = n) |> not)\n\n#endif\n\n(*          \nopen SlowlyChangingDimensions\nprint <| dimItem      .superView()\nprint <| dimIncdt     .superView()\nprint <| dimReceivable.superView()\n\ndo writeFieldDecl()\ndo writeFieldDefault_Source()\n\nprint <| snowflakeFields dimIncdt      \nprint <| snowflakeFields dimItem       \nprint <| snowflakeFields dimReceivable \n\ndimReceivable.allColumns()            |> Seq.toList |> printfn \"%A\" \nsnowflakeMissingFields dimItem        |> Seq.iter     (printfn \"%A\")  \nsnowflakeMissingFields dimIncdt       |> Seq.iter     (printfn \"%A\")  \nsnowflakeMissingFields dimReceivable  |> Seq.iter     (printfn \"%A\")  \nwrongFields dimItem        |> Seq.iter     (printfn \"%A\")  \nwrongFields dimIncdt       |> Seq.iter     (printfn \"%A\")  \nwrongFields dimReceivable  |> Seq.iter     (printfn \"%A\")  \nwrongFields dimCust        |> Seq.iter     (printfn \"%A\")\nwrongFields dimCarrier     |> Seq.iter     (printfn \"%A\")\nwrongFields dimProcedure   |> Seq.iter     (printfn \"%A\")\nwrongFields dimCollPerson  |> Seq.iter     (printfn \"%A\")\nwrongFields dimEmp         |> Seq.iter     (printfn \"%A\")\nwrongFields dimCohOrg      |> Seq.iter     (printfn \"%A\")\nwrongFields dimFinTransType|> Seq.iter     (printfn \"%A\")\n*)\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [{"SnippetId" :"0da8d01b-168f-4816-9895-99fb9f2e4a7b"}], "snpProperties": [], "snpGeneration": 1620}, {"snpId": {"SnippetId" :"daa2fd06-2419-40bf-a9af-7f9863420fa5"}, "snpName": "[old]Copy Views and Procedures ", "snpContent": "//// this is deprecated\n\n#if SLOWLY_CHANGING_DIMENSIONS\n\nlet bAllViews = \"Copy ALL views\", fun _ -> AllFactViews  |> Seq.map (fun st -> st.Query    ) |> String.concat \"\\n\\n\"          |> Useful.sCopy  \nlet bAllDims  = \"Copy ALL dims\" , fun _ -> AllDimensions |> Seq.map (fun dm -> dm.Procedure) |> String.concat \"\\n\\n\"          |> Useful.sCopy  \nlet bViews    = AllFactViews  |> Seq.map    (fun st -> st.ViewName      |> sprintf \"Copy %s\", (fun _ -> st.Query       |> Useful.sCopy )) |> Seq.toList\nlet bDims     = AllDimensions |> Seq.map    (fun dm -> dm.ProcedureName |> sprintf \"Copy %s\", (fun _ -> dm.Procedure   |> Useful.sCopy )) |> Seq.toList\nlet bfact     = AllFactTables |> Seq.map    (fun ft -> ft.ProcedureName |> sprintf \"Copy %s\", (fun _ -> ft.Procedure   |> Useful.sCopy )) |> Seq.toList\n#if SQL_FETCH_FIELDS\nlet bSuperVw  = AllDimensions |> Seq.filter (fun dm -> dm.Snowflakes |> Seq.isEmpty |> not) \n                              |> Seq.map    (fun dm -> dm.TableName  |> sprintf \"Copy %s SuperView\", (fun _ -> dm.superView() |> Useful.sCopy )) |> Seq.toList\n#endif                              \n\n\n[\n  if not bViews.IsEmpty then\n      yield ( \"===== For ARStaging Database ======\", fun _ -> \"---------------------\"  )\n  if bViews.Length > 1 then yield bAllViews\n  yield! bViews\n  if not AllDimensions.IsEmpty then\n      yield ( \"===== For ARDatamart Database =====\", fun _ -> \"---------------------\"  )\n  if bDims.Length  > 1 then yield bAllDims\n  yield! bDims\n  if not AllFactTables.IsEmpty then \n      yield ( \"------ Fact Tables -------\"         , fun _ -> \"---------------------\"  )\n      yield! bfact\n#if SQL_FETCH_FIELDS\n  if not bSuperVw.IsEmpty then\n      yield ( \"------ Super Views -------\"         , fun _ -> \"---------------------\"  )\n  yield! bSuperVw\n#endif                              \n]\n#else\n[]\n#endif\n|> (fun l -> if l.IsEmpty then [ \"=== Select in F# some Views and/or Dimensions ===\", fun _ -> \"Nothing selected\" ]  else l)\n|> Useful.ActionBar\n\n", "snpParentIdO": {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, "snpPredIds": [{"SnippetId" :"0da8d01b-168f-4816-9895-99fb9f2e4a7b"}, {"SnippetId" :"133131ac-9ee5-47b2-8047-351746ee9e10"}, {"SnippetId" :"16f618b6-0483-44dc-9c54-550f4f5b725d"}, {"SnippetId" :"1fc766b6-b1fa-43c0-ab4e-b77c73e16a43"}, {"SnippetId" :"28e52d96-1900-4150-a99d-6f5ed15bd1df"}, {"SnippetId" :"3b47f651-d4ef-41db-90f3-ad67d1a4b6eb"}, {"SnippetId" :"62d0b48f-6f54-4fa2-a455-e1f288cfd0c8"}, {"SnippetId" :"66a0107f-22a0-4825-a1d5-d36e1a44b5e3"}, {"SnippetId" :"79ff8549-d6f4-47cf-b0c0-efc9eaa6e813"}, {"SnippetId" :"7d6dcaac-d7f9-4eb6-9725-9c42b206324d"}, {"SnippetId" :"96efc394-df97-4995-9643-b15f9475e16c"}, {"SnippetId" :"b67af98c-895c-4d9c-bee1-2c43359c6885"}], "snpProperties": [], "snpGeneration": 1484}, {"snpId": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpName": "module Snippets =", "snpContent": "module Snippets =", "snpParentIdO": {"SnippetId" :"edbbf11e-4698-4e33-af0c-135d5b21799b"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"e620b2e0-e518-4992-86f3-bc9623015345"}, "snpName": "", "snpContent": "let private displayHtml html = \n  let url = Server.instance.Value.AddPage(html)\n  System.Diagnostics.Process.Start(url) |> ignore\n\nfsi.AddPrinter(fun (chart:XPlot.GoogleCharts.GoogleChart) ->\n  let ch = chart |> XPlot.GoogleCharts.Chart.WithSize (800, 600)\n  ch.GetHtml() |> displayHtml\n  \"(Google Chart)\")\n\nfsi.AddPrinter(fun (chart:XPlot.Plotly.PlotlyChart) ->\n  \"\"\"<!DOCTYPE html>\n  <html>\n  <head>\n      <title>Plotly Chart</title>\n      <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>\n  </head>\n  <body>\"\"\" + chart.GetInlineHtml() + \"</body></html>\" |> displayHtml", "snpParentIdO": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"1d18fdb5-2488-4ac9-813a-c96a66b9cd13"}, "snpName": "", "snpContent": "6 * 6\n|> printfn \"%A\"", "snpParentIdO": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"3d704638-8ba4-4bc8-b810-29e023a222fc"}, "snpName": "Stack Overflow", "snpContent": "let rec recursive i = 1 + recursive i\nrecursive 1", "snpParentIdO": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"bd716e89-0546-4d6b-8964-26473ddcd121"}, "snpName": "Calculate primes", "snpContent": "open System\nopen System.ComponentModel\nopen System.Windows.Forms\n\ntype BackgroundWorker with\n        member this.AsyncRunWorker (computation, argument : 'T, progressChangedHandler) : Async<'U> =\n            let workerAsync =\n                Async.FromContinuations (fun (cont, econt, ccont) ->\n                            let handler = new RunWorkerCompletedEventHandler (fun sender args ->          \n                                if args.Cancelled then\n                                    ccont (new OperationCanceledException()) \n                                elif args.Error <> null then\n                                    econt args.Error\n                                else\n                                    cont (args.Result :?> 'U))\n                            this.WorkerSupportsCancellation <- true;\n                            this.WorkerReportsProgress <- true\n                            this.DoWork.AddHandler(new DoWorkEventHandler(fun sender args ->\n                                args.Result <- computation(argument, this, args)))\n                            this.ProgressChanged.AddHandler(progressChangedHandler)\n                            this.RunWorkerCompleted.AddHandler(handler)\n                            this.RunWorkerAsync(argument)\n                        )\n\n            async { \n                use! holder = Async.OnCancel(fun _ -> this.CancelAsync())\n                return! workerAsync\n             }\n\nlet factorial number =\n    let rec fact number =\n        match number with\n        | value when value < 0I ->\n            raise (InvalidOperationException(sprintf \"Cannot compute the factorial of a negative number: %s.\" (value.ToString())))\n        | value when value > 2000I ->\n            raise (InvalidOperationException(sprintf \"Input too large: %s\" (value.ToString())))\n        | value when value = 0I -> 1I\n        | value when value = 1I -> 1I\n        | number -> number * fact (number - 1I)\n    fact number\n\n// Recursive isprime function.\nlet isprime number =\n    let rec check count =\n        count > number/2 || (number % count <> 0 && check (count + 1))\n    check 2\n\nlet isprimeBigInt number =\n    let rec check count =\n        count > number/2I || (number % count <> 0I && check (count + 1I))\n    check 2I\n\nlet computeNthPrime (number, worker: BackgroundWorker, eventArgs: DoWorkEventArgs) =\n     if (number < 1) then\n         invalidOp <| sprintf \"Invalid input for nth prime: %s.\" (number.ToString())\n     let mutable count = 0\n     let mutable num = 1I\n     let isDone = false\n     while (count < number && not eventArgs.Cancel ) do\n         if (worker.CancellationPending) then\n             eventArgs.Cancel <- true\n         else\n             let percentComplete = int ((float count) / (float number) * 100.0)\n             worker.ReportProgress(percentComplete, num.ToString())\n         num <- num + 1I\n         if (num < bigint System.Int32.MaxValue) then\n             while (not (isprime (int num))) do\n                 num <- num + 1I\n         else\n             while (not (isprimeBigInt num)) do\n                 num <- num + 1I\n         count <- count + 1\n     num\n         \nlet async1 (progressBar:ProgressBar) (label:Label) value =\n     let worker = new BackgroundWorker()\n     label.Text <- \"Computing...\"\n     let computation value = worker.AsyncRunWorker(computeNthPrime, value,\n                                                   (fun sender (eventArgs:ProgressChangedEventArgs) ->\n                                                       label.Text <- \"Scanning ... \" + eventArgs.UserState.ToString()\n                                                       progressBar.Value <- eventArgs.ProgressPercentage ))\n     Async.StartWithContinuations(\n         computation value,\n         (fun result -> label.Text <- sprintf \"Result: %s\" (result.ToString())),\n         (fun exn -> label.Text <- \"Operation failed with error:\" + exn.Message),\n         (fun _ -> label.Text <- \"Operation canceled.\"))\n\nlet form = new Form(Text = \"Test Form\", Width = 400, Height = 400)\nlet panel1 = new Panel(Dock = DockStyle.Fill)\npanel1.DockPadding.All <- 10\nlet spacing = 5\nlet button1 = new Button(Text = \"Start\")\nlet button2 = new Button(Text = \"Start Invalid\", Top = button1.Height + spacing)\nlet button3 = new Button(Text = \"Cancel\", Top = 2 * (button1.Height + spacing))\nlet updown1 = new System.Windows.Forms.NumericUpDown(Top = 3 * (button1.Height + spacing), \n                                                     Value = 20m,\n                                                     Minimum = 0m,\n                                                     Maximum = 1000000m)\nlet label1 = new Label (Text = \"\", Top = 4 * (button1.Height + spacing),\n                        Width = 300, Height = 2 * button1.Height)\nlet progressBar = new ProgressBar(Top = 6 * (button1.Height + spacing),\n                                  Width = 300)\npanel1.Controls.AddRange [| button1; button2; button3; updown1; label1; progressBar; |]\nform.Controls.Add(panel1)\nbutton1.Click.Add(fun args -> async1 progressBar label1 (int updown1.Value))\nbutton2.Click.Add(fun args -> async1 progressBar label1 (int (-updown1.Value)))\nbutton3.Click.Add(fun args -> Async.CancelDefaultToken())\nform.Activated.AddHandler(System.EventHandler (fun _ _ -> form.TopMost <- true(*; form.TopMost <- false*) ))\nasync {\n  do Application.Run(form) \n} |> Async.Start", "snpParentIdO": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"dc44bbe1-876a-4910-a39a-5d74bc2304ee"}, "snpName": "Form test", "snpContent": "open System\nopen System.ComponentModel\nopen System.Windows.Forms\n\nlet label1 = new Label (Text = \"\", Width = 300)\nlet newButton txt =\n    let btn = new Button(Text = txt)\n    btn.Click.Add (fun args -> label1.Text <- txt)\n    btn :> Control\n        \n\nlet spacing = 5\nlet button1 = newButton \"Start\"\nlet button2 = newButton \"Start Invalid\"\nlet button3 = newButton \"Cancel\"\nlet updown1 = new System.Windows.Forms.NumericUpDown(Value = 20m,\n                                                     Minimum = 0m,\n                                                     Maximum = 1000000m)\nlet progressBar = new ProgressBar(Width = 300)\n\nlet panel1 = new Panel(Dock = DockStyle.Fill)\n\n[| button1     :> Control\n   button2     :> Control\n   button3     :> Control\n   updown1     :> Control\n   label1      :> Control\n   progressBar :> Control\n|]\n|> Array.mapi (fun i cts -> cts.Top <- i * 25 ; cts)\n|> panel1.Controls.AddRange\npanel1.DockPadding.All <- 10\n//button1.Click.Add(fun args -> async1 progressBar label1 (int updown1.Value))\n//button2.Click.Add(fun args -> async1 progressBar label1 (int (-updown1.Value)))\n//button3.Click.Add(fun args -> Async.CancelDefaultToken())\nlet form = new Form(Text = \"Select Actions\", Width = 400, Height = 400)\nform.Controls.Add(panel1)\nform.Activated.AddHandler(System.EventHandler (fun _ _ -> form.TopMost <- true(*; form.TopMost <- false*) ))\nasync {\n  do Application.Run(form) \n} |> Async.Start", "snpParentIdO": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"d54a55c5-1462-4983-a966-4feb4cfccb2a"}, "snpName": "", "snpContent": "6 * 8\n//|> printfn \"result is: %A\"", "snpParentIdO": {"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpName": "WebSharper Code", "snpContent": "(*\n Code to be Compiled to Javascript and run in the browser\n using `Compile WebSharper` or `Run WebSharper`\n*)", "snpParentIdO": {"SnippetId" :"bf864f3c-1370-42f2-ac8a-565a604892e8"}, "snpPredIds": [{"SnippetId" :"66ab3e22-f5ed-4e75-966d-28394d24f3d7"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"60bffe71-edde-4971-8327-70b9f5c578bb"}, "snpName": "open WebSharper", "snpContent": "#define WEBSHARPER\n#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Web.dll\"\n#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n\n#r @\"WebSharper.Core.dll\"\n#r @\"WebSharper.Collections.dll\"\n#r @\"WebSharper.Main.dll\"\n#r @\"WebSharper.UI.Next.dll\"\n#r @\"WebSharper.JavaScript.dll\"\n#r @\"WebSharper.Web.dll\"\n#r @\"WebSharper.UI.Next.dll\"\n#r @\"WebSharper.Sitelets.dll\"\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI.Next\nopen WebSharper.UI.Next.Client\ntype on   = WebSharper.UI.Next.Html.on\ntype attr = WebSharper.UI.Next.Html.attr\n", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"495bce0a-4fb6-48fa-9158-c242d5965baa"}, "snpName": "", "snpContent": "#nowarn \"1182\"\n[<JavaScript>]\nmodule HtmlNode =\n", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [{"SnippetId" :"60bffe71-edde-4971-8327-70b9f5c578bb"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"0f5719f0-e95e-498d-ab88-f89ff1440e32"}, "snpName": "", "snpContent": "[<NoComparison>]\ntype Val<'a> =\n    | Constant  of 'a\n    | DynamicV  of IRef<'a>\n    | Dynamic   of View<'a>\n\nmodule Val =\n    \n    let mapV : ('a -> 'b) -> Val<'a> -> Val<'b> =\n        fun    f             va      ->\n            match va with\n            | Constant  a -> f a                   |> Constant\n            | Dynamic  wa -> wa      |> View.Map f |> Dynamic \n            | DynamicV va -> va.View |> View.Map f |> Dynamic \n\n    let iterV : ('a -> unit) -> Val<'a> -> unit = //f v = toView v |> View.Get f\n        fun     f               va      ->\n            match va with\n            | Constant  a ->          f  a                  \n            | Dynamic  wa -> View.Get f wa \n            | DynamicV va ->          f va.Value \n\n    let toView v =\n        match v with\n        | Constant  a -> View.Const a\n        | Dynamic  wa -> wa\n        | DynamicV va -> va.View\n\n    let bindV : ('a -> Val<'b>) -> Val<'a> -> Val<'b> =\n        fun     f                  v       -> \n            match v with\n            | Constant  a -> f a\n            | Dynamic  wa -> wa      |> View.Bind (f >> toView) |> Dynamic \n            | DynamicV va -> va.View |> View.Bind (f >> toView) |> Dynamic \n\n    let inline map2V f = // : ('a -> 'b -> 'c) -> Val<'a> -> Val<'b> -> Val<'c> =\n        //fun     f                ->\n        let inline swap f a b = f b a\n        let inline fv vb = bindV (swap (f >> mapV) vb)\n        swap fv\n\n    let inline map3V f3 v1 v2 v3    = map2V f3 v1 v2    |> map2V (|>) v3\n    let inline map4V f3 v1 v2 v3 v4 = map3V f3 v1 v2 v3 |> map2V (|>) v4\n    \n    let tagDoc: ('a -> Doc) -> Val<'a> -> Doc =\n        fun     tag            va      ->\n            match va with\n            | Constant  a -> tag   a\n            | Dynamic  wa -> wa      |> View.Map tag |> Doc.EmbedView\n            | DynamicV va -> va.View |> View.Map tag |> Doc.EmbedView\n\n    let tagElt: ('a -> Elt) -> Val<'a> -> Doc =\n        fun     tag            va     ->\n            match va with\n            | Constant  a -> tag   a :> Doc\n            | Dynamic  wa -> wa     |> View.Map tag |> Doc.EmbedView\n            | DynamicV va -> va.View |> View.Map tag |> Doc.EmbedView\n\n    let attrV att       va      =\n            match va with\n            | Constant  a -> Attr.Create  att   a\n            | Dynamic  wa -> Attr.Dynamic att  wa\n            | DynamicV va -> Attr.Dynamic att  va.View\n\n\n    type HelperType = HelperType with\n        static member inline (&>) (HelperType, a : string      ) = Constant  a\n        static member (&>) (HelperType, a : bool        ) = Constant  a\n        static member (&>) (HelperType, a : int         ) = Constant  a\n        static member (&>) (HelperType, a : float       ) = Constant  a\n        static member (&>) (HelperType, a : Doc         ) = Constant  a\n        static member (&>) (HelperType, va: Val<string> ) =          va\n        static member (&>) (HelperType, va: Val<bool  > ) =          va\n        static member (&>) (HelperType, va: Val<int   > ) =          va\n        static member (&>) (HelperType, va: Val<float > ) =          va\n        static member (&>) (HelperType, va: Val<Doc   > ) =          va\n        static member (&>) (HelperType, va: Val<_     > ) =          va\n        static member (&>) (HelperType, vr: IRef<_    > ) = DynamicV vr\n        static member (&>) (HelperType, vw: View<_    > ) = Dynamic  vw\n\n    [< Inline @\"(\n            typeof($v) == 'function' ? {$:2, $0:$v} // View\n            :   typeof($v) == 'object'\n                      ? typeof($v.$) != 'undefined' // Val\n                            ? $v \n                            : typeof($v.Id) == 'number' || typeof($v.i) == 'number' || typeof($v.RView == 'function')// Var\n                                 ? {$:1, $0:$v}\n                                 : typeof($v.docNode) != 'undefined'\n                                     ? {$:0, $0:$v} // Doc\n                                     : {$:2, $0:$v} // View?\n                      : {$:0, $0:$v}) // other\n                                     \" >]\n    let fixit0 v = Constant v\n    let fixit2 v = let result = fixit0 v\n                   result\n                   \n    [< Direct \"FSharpStationNS.HtmlNode.Val.fixit2($v)\" >]\n    //[< Inline >]\n    let inline fixit v = HelperType &> v\n\n    [< Inline >]\n    let inline bindIRef0 (f: 'a->IRef<'b>) (view: View<'a>) = \n        let contentVar = Var.Create Unchecked.defaultof<'b>\n        let changingIRefO : IRef<'b> option ref = ref None\n    \n        contentVar.View |> View.Sink (fun v -> !changingIRefO |> Option.iter (fun r -> if r.Value <> v then r.Value <- v))\n    \n        view |> View.Bind (fun cur ->\n            let r = f cur\n            changingIRefO    := Some r\n            contentVar.Value <- r.Value\n            r.View\n        ) |> View.Sink (fun v -> contentVar.Value <- v)\n        contentVar\n    \n    let inline toDoc       v           = toView      (fixit v ) |> Doc.EmbedView\n    [< Inline >]\n    let inline bindIRef f  v           = bindIRef0 f (fixit v   |> toView)\n    let inline iter     f  v           = iterV     f (fixit v )\n    let inline bind     f  v           = bindV     f (fixit v )\n    let inline map      f  v           = mapV      f (fixit v )\n    let inline map2     f  v1 v2       = map2V     f (fixit v1) (fixit v2)\n    let inline map3     f  v1 v2 v3    = map3V     f (fixit v1) (fixit v2) (fixit v3)\n    let inline map4     f  v1 v2 v3 v4 = map4V     f (fixit v1) (fixit v2) (fixit v3) (fixit v4)\n    let inline sink     f  v           = fixit v |> toView |> View.Sink f\n", "snpParentIdO": {"SnippetId" :"495bce0a-4fb6-48fa-9158-c242d5965baa"}, "snpPredIds": [{"SnippetId" :"60bffe71-edde-4971-8327-70b9f5c578bb"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"d9124644-0af6-4a7f-a711-ef76ca77f0de"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype HtmlNode =\n    | HtmlElement   of name: string * children: HtmlNode seq\n    | HtmlAttribute of name: string * value:    Val<string>\n    | HtmlText      of Val<string>\n    | HtmlEmpty\n    | SomeDoc       of Doc\n    | SomeAttr      of Attr\n    \nlet addClass    (classes:string) (add:string) = classes.Split ' ' |> Set.ofSeq |> Set.union  (Set.ofSeq <| add.Split ' ') |> String.concat \" \"\nlet removeClass (classes:string) (rem:string) = classes.Split ' ' |> Set.ofSeq |> Set.remove               rem            |> String.concat \" \"\n\nlet callAddClass = addClass \"a\" \"b\" // so that WebSharper.Collections.js is included\n\nlet inline chooseAttr node = \n    match node with\n    | HtmlAttribute (name, value   ) when name <> \"class\" && name <> \"style\" \n                                     -> Some <| Val.attrV name value\n    | SomeAttr             value     -> Some <|                value\n    | _                              -> None\n\nlet chooseThisAttr this node =\n    match node with\n    | HtmlAttribute (att, value) when att = this -> Some value\n    | _                                          -> None\n\nlet concat s a b = a + s + b\nlet groupAttr name sep children = \n    children \n    |> Seq.choose (chooseThisAttr name)\n    |> (fun ss -> if ss |> Seq.isEmpty \n                  then None \n                  else ss |> Seq.reduce (Val.map2 <| concat sep ) |> Val.attrV name |> Some)\n\nlet inline getAttrsFromSeq children =\n    children \n    |> Seq.choose chooseAttr\n    |> Seq.append (List.choose id [ children |> groupAttr \"class\" \" \" ; children |> groupAttr \"style\" \"; \" ])\n\nlet rec chooseNode node =\n    match node with\n    | HtmlElement(name, children) -> Some <| (Doc.Element name (getAttrsFromSeq children) (children |> Seq.choose chooseNode) :> Doc)\n    | HtmlText    vtext           -> Some <| Val.tagDoc WebSharper.UI.Next.Html.text vtext\n    | SomeDoc     doc             -> Some <| doc\n    | _                           -> None\n\nlet getAttrChildren attr =\n    Seq.tryPick (function \n                | HtmlAttribute(a, v) when a = attr -> Some v \n                | _                                 -> None)\n    >> Option.defaultValue (Constant \"\")\n\nlet mapHtmlElement f element =\n    match element with\n    | HtmlElement(name, children) -> f name  children\n    | _                           -> element\n\nlet getAttr attr element =\n    match element with\n    | HtmlElement(_, children) -> children\n    | _                        -> seq []\n    |> getAttrChildren attr\n\nlet getClass = getAttr \"class\"\nlet getStyle = getAttr \"style\"\n\nlet replaceAttribute att (children: HtmlNode seq) newVal =\n    HtmlAttribute(att, newVal)\n    :: (children\n        |> Seq.filter (function HtmlAttribute(old, _) when old = att -> false | _ -> true)\n        |> Seq.toList\n       )\n\nlet replaceAtt att node newVal = mapHtmlElement (fun n ch -> HtmlElement(n, replaceAttribute att ch newVal)) node\n\ntype HtmlNode with\n    member inline this.toDoc = \n        match this with\n        | HtmlAttribute _\n        | HtmlEmpty       -> Doc.Empty\n        | _               -> chooseNode this |> Option.defaultValue Doc.Empty\n    member inline   this.Class       clas = Val.fixit clas |> replaceAtt \"class\" this\n    member inline   this.AddChildren add  = mapHtmlElement (fun n ch -> HtmlElement(n, Seq.append add ch )) this\n\nlet renderDoc = chooseNode >> Option.defaultValue Doc.Empty\n    ", "snpParentIdO": {"SnippetId" :"495bce0a-4fb6-48fa-9158-c242d5965baa"}, "snpPredIds": [{"SnippetId" :"0f5719f0-e95e-498d-ab88-f89ff1440e32"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"c3755c07-1385-495d-bad7-a5b0fa54ac9b"}, "snpName": "", "snpContent": "let inline atr att v = Val.attrV  att (Val.fixit v)\nlet inline tag tag v = Val.tagDoc tag (Val.fixit v)\n\nlet inline _class       v = atr \"class\"       v\nlet inline _type        v = atr \"type\"        v\nlet inline _style       v = atr \"style\"       v\nlet inline _placeholder v = atr \"placeholder\" v\nlet inline textV        v = tag  Html.text    v\n\nlet inline htmlElement   name ch = HtmlElement  (name, ch           )\nlet inline htmlAttribute name v  = HtmlAttribute(name, Val.fixit v  )\nlet inline htmlText      txt     = HtmlText     (      Val.fixit txt)\nlet inline someElt       elt     = SomeDoc      (elt :> Doc         )    \n  \nlet inline ul          ch = htmlElement   \"ul\"          ch\nlet inline li          ch = htmlElement   \"li\"          ch\nlet inline br          ch = htmlElement   \"br\"          ch\nlet inline hr          ch = htmlElement   \"hr\"          ch\nlet inline h1          ch = htmlElement   \"h1\"          ch\nlet inline h2          ch = htmlElement   \"h2\"          ch\nlet inline h3          ch = htmlElement   \"h3\"          ch\nlet inline h4          ch = htmlElement   \"h4\"          ch\nlet inline h5          ch = htmlElement   \"h5\"          ch\nlet inline h6          ch = htmlElement   \"h6\"          ch\nlet inline div         ch = htmlElement   \"div\"         ch\nlet inline img         ch = htmlElement   \"img\"         ch\nlet inline span        ch = htmlElement   \"span\"        ch\nlet inline form        ch = htmlElement   \"form\"        ch\nlet inline table       ch = htmlElement   \"table\"       ch\nlet inline thead       ch = htmlElement   \"thead\"       ch\nlet inline th          ch = htmlElement   \"th\"          ch\nlet inline tr          ch = htmlElement   \"tr\"          ch\nlet inline td          ch = htmlElement   \"td\"          ch\nlet inline tbody       ch = htmlElement   \"tbody\"       ch\nlet inline label       ch = htmlElement   \"label\"       ch\nlet inline button      ch = htmlElement   \"button\"      ch\nlet inline script      sc = htmlElement   \"script\"      sc\nlet inline styleH      st = htmlElement   \"style\"       st\nlet inline fieldset    ch = htmlElement   \"fieldset\"    ch\nlet inline link        sc = htmlElement   \"link\"        sc\nlet inline iframe      at = htmlElement   \"iframe\"      at\n     \nlet inline href        v  = htmlAttribute \"href\"        v\nlet inline rel         v  = htmlAttribute \"rel\"         v\nlet inline src         v  = htmlAttribute \"src\"         v\nlet inline ``class``   v  = htmlAttribute \"class\"       v\nlet inline ``type``    v  = htmlAttribute \"type\"        v\nlet inline width       v  = htmlAttribute \"width\"       v\nlet inline title       v  = htmlAttribute \"title\"       v\nlet inline Id          v  = htmlAttribute \"id\"          v\nlet inline frameborder v  = htmlAttribute \"frameborder\" v\nlet inline spellcheck  v  = htmlAttribute \"spellcheck\"  v\nlet inline draggable   v  = htmlAttribute \"draggable\"   v\n\nlet inline classIf cls v = ``class`` <| Val.map (fun b -> if b then cls else \"\") (Val.fixit v)\n\nlet inline ``xclass`` v  = \n    match Val.fixit v with\n    | Constant c  -> Attr.Class        c       \n    | Dynamic  cw -> Attr.DynamicClass \"class_for_view_not_implemented\" cw      ((<>)\"\")\n    | DynamicV cv -> Attr.DynamicClass cv.Value                         cv.View ((<>)\"\")\n    |> SomeAttr\n\nlet style2pairs (ss:string) : (string * string) [] =\n    ss.Split(';') \n    |> Array.map   (fun s -> s.Split(':') ) \n    |> Array.filter(fun d -> d.Length = 2 )\n    |> Array.map   (fun d -> d.[0].Trim(), d.[1].Trim() )\n\nlet string2Styles = style2pairs >> Array.map (fun (n, v) -> Attr.Style n v |> SomeAttr)\n\nlet inline style     v  = htmlAttribute \"style\"    v\nlet inline style1  n v  = Val.fixit v |> Val.toView |> Attr.DynamicStyle n |> SomeAttr\n\nlet composeDoc elt dtl dtlVal = dtlVal |> Val.toView |> Doc.BindView (Seq.append dtl >> elt >> renderDoc) |> SomeDoc\n\nlet inline bindHElem hElem v  = Doc.BindView (hElem >> renderDoc)  (Val.toView <| Val.fixit v)            |> SomeDoc\n\n\nlet createIFrame f =\n    let cover = Var.Create true\n    div [ style           \"position: relative; overflow: hidden; height: 100%; width: 100%;\" \n          iframe \n            [ style       \"position: absolute; width:100%; height:100%;\"\n              frameborder \"0\"\n              SomeAttr <| on.afterRender f\n              SomeAttr <| on.mouseLeave (fun _ _ -> cover.Value <- true)\n            ]\n          div \n            [ style       \"position: absolute;\"\n              classIf     \"iframe-cover\" (Val.map id cover)               \n              SomeAttr <| on.mouseEnter (fun _ _ -> Input.Mouse.MousePressed \n                                                    |> View.Get (fun pressed -> if not pressed then cover.Value <- false))\n            ]          \n          styleH [ htmlText \".iframe-cover { top:0; left:0; right:0; bottom:0; background: blue; opacity: 0.04; z-index: 2; }\" ]\n        ]\n", "snpParentIdO": {"SnippetId" :"495bce0a-4fb6-48fa-9158-c242d5965baa"}, "snpPredIds": [{"SnippetId" :"d9124644-0af6-4a7f-a711-ef76ca77f0de"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"336d6f19-0c57-4af9-8716-1b3fbf6b112c"}, "snpName": "", "snpContent": "[< Inline >]\nlet inline storeVar<'T> storeName (var:IRef<_>) =\n    JS.Window.LocalStorage.GetItem storeName |> fun v -> if v <> null then           var.Value <- Json.Deserialize<'T> v\n    Val.sink (fun v -> JS.Window.LocalStorage.SetItem (storeName, Json.Serialize v)) var\n\n[< Inline \"\"\"(!$v)\"\"\">]\nlet isUndefined v = true", "snpParentIdO": {"SnippetId" :"495bce0a-4fb6-48fa-9158-c242d5965baa"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"1f1aa135-fd74-42cc-b9a5-87f380c113a9"}, "snpName": "LoadFiles", "snpContent": "[< Inline \"CIPHERSpaceLoadFiles($files, $cb)\" >]\nlet LoadFiles (files: string []) (cb: unit -> unit) : unit = X<_>", "snpParentIdO": {"SnippetId" :"495bce0a-4fb6-48fa-9158-c242d5965baa"}, "snpPredIds": [{"SnippetId" :"02d3bc50-4aa0-41ce-a37e-5b90a943481f"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"3709b431-1507-48ed-9487-dd49ce7be748"}, "snpName": "", "snpContent": "open HtmlNode", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [{"SnippetId" :"c3755c07-1385-495d-bad7-a5b0fa54ac9b"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpName": "", "snpContent": "[<JavaScript>]\nmodule Template =", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [{"SnippetId" :"11ecbe45-3d0c-4121-a8fd-7c126b96f4a3"}, {"SnippetId" :"3709b431-1507-48ed-9487-dd49ce7be748"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"8fb54777-3046-4aae-9282-33401a45c280"}, "snpName": "", "snpContent": "let container content = div <| [ ``class`` \"container\" ] @ content", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype Button = {\n    _class  : Val<string>\n    _type   : Val<string>\n    style   : Val<string>\n    text    : Val<string>\n    onClick : Dom.Element -> Dom.MouseEvent -> unit\n    disabled: Val<bool>\n    id      : string\n} with\n  static member inline New txt = \n      { _class   = Val.fixit \"btn\" \n        _type    = Val.fixit \"button\" \n        style    = Val.fixit \"\" \n        text     = Val.fixit txt\n        onClick  = fun _ _ -> ()\n        disabled = Val.fixit false\n        id       = \"\"\n      }\n  member        this.Render     =         \n    button [ ``type``  <| this._type\n             ``class`` <| this._class\n             Id        <| this.id  \n             style     <| this.style\n             SomeAttr  <| attr.disabledDynPred (View.Const \"\") (this.disabled |> Val.toView)\n             SomeAttr  <| on.click <@ this.onClick @>\n             HtmlText  <| this.text \n           ]\n  member inline this.Id          id   = { this with id       = id             }\n  member inline this.Class       clas = { this with _class   = Val.fixit clas }\n  member inline this.Type        typ  = { this with _type    = Val.fixit typ  }\n  member inline this.Style       sty  = { this with style    = Val.fixit sty  }\n  member inline this.Text        txt  = { this with text     = Val.fixit txt  }\n  member inline this.Disabled    dis  = { this with disabled = Val.fixit dis  }\n  member inline this.OnClick     f    = { this with onClick  = f              }", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype Input = {\n    _type       : Val<string>\n    _class      : Val<string>\n    style       : Val<string>\n    placeholder : Val<string>\n    id          : string\n    var         : IRef<string>\n    prefix      : HtmlNode\n    suffix      : HtmlNode\n    content     : Attr seq\n    prefixAdded : bool\n    suffixAdded : bool\n} with\n  static member  New(var) = { _class      = Val.fixit \"form-control\" \n                              _type       = Val.fixit \"text\" \n                              style       = Val.fixit \"\" \n                              placeholder = Val.fixit \"Enter text:\"\n                              id          = \"\"\n                              content     = []\n                              prefix      = HtmlEmpty\n                              prefixAdded = false\n                              suffix      = HtmlEmpty\n                              suffixAdded = false\n                              var         = var   \n                            }\n  static member  New(v)   = Input.New(Var.Create v)\n  member        this.Render    =         \n    let groupClass det = match det with HtmlText _  -> \"input-group-addon\" | _ -> \"input-group-btn\"\n    div [\n        if this.prefixAdded || this.suffixAdded then\n            yield ``class`` \"input-group\"\n        if this.prefixAdded then\n            yield  span     [ ``class`` <| groupClass this.prefix \n                              this.prefix       ]\n        yield Doc.Input ([_type            this._type\n                          _class           this._class\n                          _style           this.style\n                          attr.id          this.id  \n                          _placeholder     this.placeholder ] |> Seq.append this.content)\n                          this.var\n              :> Doc |> SomeDoc\n        if this.suffixAdded then\n            yield  span     [ ``class`` <| groupClass this.suffix \n                              this.suffix       ]\n      ]\n  member inline this.Class       clas = { this with _class      = Val.fixit clas                  }\n  member inline this.Type        typ  = { this with _type       = Val.fixit typ                   }\n  member inline this.Style       sty  = { this with style       = Val.fixit sty                   }\n  member inline this.Placeholder plc  = { this with placeholder = Val.fixit plc                   }\n  member inline this.Id          id   = { this with id          =       id                        }\n  member inline this.Content     c    = { this with content     =       c                         }\n  member inline this.Prefix      p    = { this with prefix      =       p    ; prefixAdded = true }\n  member inline this.Suffix      s    = { this with suffix      =       s    ; suffixAdded = true }\n  member inline this.SetVar      v    = { this with var         = v                               }\n  member inline this.Var              = this.var", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"c7841be7-5cd5-40f3-b91c-c107b487bc0c"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype Hoverable = {\n    hover      : IRef<bool>\n    content    : HtmlNode seq\n} with\n  static member  New   = \n    let hover      = Var.Create false\n    { \n        hover      = hover     \n        content    = []\n    }\n  static member  Demo  = \n    let hover      = Var.Create false\n    { \n        hover      = hover     \n        content    = [ style \"flex-flow: column;\"\n                     ]\n    }\n  member        this.Render          =\n    [ classIf \"hovering\" this.hover\n      SomeAttr <| on.mouseEnter (fun _ _ -> this.hover.Value <- true )\n      SomeAttr <| on.mouseLeave (fun _ _ -> this.hover.Value <- false)\n    ] \n    |> Seq.append  this.content\n    |> div\n  member inline this.Content    c = { this with content    =       c }\n", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"0a11766b-f227-4b38-88a3-919d964387bf"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype Panel = {\n    _class   : Val<string>\n    _style   : Val<string>\n    title    : Val<string>\n    header   : HtmlNode seq\n    content  : HtmlNode seq\n    disabled : Val<bool>\n} with\n  static member  New   = { _class   = Val.fixit <| \"panel panel-default shadow\"\n                           _style   = Val.fixit <| \"text-align:center\" \n                           title    = Val.fixit <| \"Panel\"        \n                           header   =          [ htmlText \"Some text\"    ] \n                           content  =          [ htmlText \"Some Content\" ] \n                           disabled = Val.fixit <| Var.Create false\n                         }\n  member        this.Render          =  \n    fieldset [ SomeAttr <| attr.disabledDynPred (View.Const \"\")  (this.disabled |> Val.toView)\n               div [ ``class`` this._class\n                     div (Seq.append\n                              [ ``class`` \"panel-heading\"\n                                label [ ``class``  \"panel-title text-center\" ; htmlText this.title ]\n                              ]\n                              this.header)\n\n                     div (Seq.append\n                              [ ``class`` \"panel-body\"\n                                style     this._style \n                              ]\n                              this.content)\n                   ] \n             ]\n  member inline this.Class       clas = { this with _class   = Val.fixit clas                                        }\n  member inline this.Style       sty  = { this with _style   = Val.fixit sty                                         }\n  member inline this.Title       txt  = { this with title    = Val.fixit txt                                         }\n  member inline this.Header      h    = { this with header   =       h                                           }\n  member inline this.Content     c    = { this with content  =       c                                           }\n  member inline this.Disabled    dis  = { this with disabled =       dis                                         }\n", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [{"SnippetId" :"081bac32-e739-4124-87eb-eb7d6f2220bc"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"3234a0bf-4541-4f2c-8bbf-b5ab3a0e415b"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype TextArea = {\n    _class      : Val<string>\n    placeholder : Val<string>\n    title       : Val<string>\n    spellcheck  : Val<bool>\n    id          : string\n    var         : IRef<string>\n} with\n  static member  New(var) = { _class      = Val.fixit \"form-control\"\n                              placeholder = Val.fixit \"Enter text:\"\n                              title       = Val.fixit \"\"\n                              spellcheck  = Val.fixit false\n                              id          = \"\"\n                              var         = var \n                            }\n  static member  New(v)   = TextArea.New(Var.Create v)\n  member        this.Render    =    \n    someElt \n    <| Doc.InputArea\n        [ \n          _class              this._class\n          attr.id             this.id  \n          atr \"spellcheck\" <| Val.map (fun spl -> if spl then \"true\" else \"false\") this.spellcheck\n          atr \"title\"         this.title\n          _placeholder        this.placeholder \n        ]\n        this.var\n  member inline this.Class       clas = { this with _class      = Val.fixit clas }\n  member inline this.Placeholder plc  = { this with placeholder = Val.fixit plc  }\n  member inline this.Title       ttl  = { this with title       = Val.fixit ttl  }\n  member inline this.Spellcheck  spl  = { this with spellcheck  = spl            }\n  member inline this.Id          id   = { this with id          = id             }\n  member inline this.SetVar      v    = { this with var         = v              }\n  member inline this.Var              = this.var\n  ", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"4180353c-9dc5-438d-862d-851539b02075"}, "snpName": "", "snpContent": "let codeMirrorIncludes =\n   [| \"/EPFileX/codemirror/scripts/codemirror/codemirror.js\"             \n//      \"/EPFileX/codemirror/scripts/intellisense.js\"                      \n//      \"/EPFileX/codemirror/scripts/codemirror/codemirror-intellisense.js\"\n//      \"/EPFileX/codemirror/scripts/codemirror/codemirror-compiler.js\"    \n      \"/EPFileX/codemirror/scripts/codemirror/mode/fsharp.js\"            \n      \"/EPFileX/codemirror/scripts/addon/search/searchcursor.js\"          \n      \"/EPFileX/codemirror/scripts/addon/search/search.js\"          \n      \"/EPFileX/codemirror/scripts/addon/search/jump-to-line.js\"          \n      \"/EPFileX/codemirror/scripts/addon/dialog/dialog.js\"          \n      \"/EPFileX/codemirror/scripts/addon/edit/matchbrackets.js\"          \n      \"/EPFileX/codemirror/scripts/addon/selection/active-line.js\"       \n      \"/EPFileX/codemirror/scripts/addon/display/fullscreen.js\"          \n//      \"/EPFileX/codemirror/scripts/codemirror/mode/markdown.js\"                 \n   |]", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"b03ba35c-a03c-4bbe-a373-1ce551524e56"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype CodeMirror = {\n    _class      : Val<string>\n    id          : string\n    var         : IRef<string>\n    onChange    : (unit -> unit)\n} with\n\n  [< Inline \"CodeMirror($elt, {\n\t    theme        : 'rubyblue'\n\t  , lineNumbers  : true\n\t  , matchBrackets: true\n      , extraKeys    : {\n\t\t    Tab  : function (cm) { cm.replaceSelection('    ', 'end'); }\n\t\t  , 'F11': function (cm) { cm.setOption('fullScreen', !cm.getOption('fullScreen')); }\n        }\n})\"    >]\n  static member SetupEditor elt                               : CodeMirror = X<_>\n  [< Inline \"$this.getValue()\"              >]\n  member this.GetValue()                                      : string     = X<_>\n  [< Inline \"$this.setValue($v)\"            >]\n  member this.SetValue (v:string)                             : unit       = X<_>\n  [< Inline \"$this.getDoc().clearHistory()\" >]\n  member this.ClearHistory()                                  : unit       = X<_>\n  [< Inline \"$this.on($event, $f)\"          >]\n  member this.On(event: string, f:(CodeMirror * obj) -> unit) : unit     = X<_>\n\n  static member  New(var) = \n      { _class   = Val.fixit \"\" \n        id       = \"\"\n        var      = var \n        onChange = ignore\n      }\n  static member  New(v)   = CodeMirror.New(Var.Create v)\n  member        this.Render    =\n    div [ \n          ``class``            this._class\n          SomeAttr <| attr.id  this.id \n          style \"position: relative; height: 300px\"\n          div [\n                style \"height: 100%; width: 100%; position: absolute;\"\n                SomeAttr <| on.afterRender (fun el ->\n                  LoadFiles codeMirrorIncludes\n                    (fun () ->                       \n                       let editor = CodeMirror.SetupEditor el\n                       editor.On(\"change\", fun (cm, change) -> \n                           let v = editor.GetValue() \n                           if this.var.Value <> v then this.var.Value <- v; this.onChange() )\n                       this.var.View |> View.Sink (fun v -> if editor.GetValue() <> v then editor.SetValue v ; editor.ClearHistory())\n                    )\n                )    \n              ]\n          link [ href \"/EPFileX/codemirror/content/editor.css\"                   ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/content/codemirror.css\"               ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/content/theme/rubyblue.css\"           ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/scripts/addon/display/fullscreen.css\" ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n          link [ href \"/EPFileX/codemirror/scripts/addon/dialog/dialog.css\"      ; ``type`` \"text/css\" ; rel \"stylesheet\" ]\n     ]\n  member inline this.Class    clas = { this with _class    = Val.fixit clas }\n  member inline this.Id       id   = { this with id        =       id       }\n  member inline this.SetVar   v    = { this with var       = v              }\n  member inline this.OnChange f    = { this with onChange  = f              }\n  member inline this.Var           = this.var\n", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [{"SnippetId" :"1f1aa135-fd74-42cc-b9a5-87f380c113a9"}, {"SnippetId" :"4180353c-9dc5-438d-862d-851539b02075"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"70030378-692d-431d-bed9-c839a7f95798"}, "snpName": "", "snpContent": "[<NoComparison ; NoEquality>]\ntype SplitterBar = {\n    value            : IRef<float>\n    min              : Val<float>\n    max              : Val<float>\n    vertical         : Val<bool>\n    node             : HtmlNode\n    after            : bool\n    mutable dragging : bool\n    mutable startVer : bool \n    mutable startP   : float \n    mutable start    : float \n    mutable size     : float \n    mutable domElem  : Dom.Element option\n}\nwith\n    static member New(var) = \n        {\n            value    = var\n            min      = Val.fixit  10.0\n            max      = Val.fixit  75.0\n            vertical = Val.fixit  true  \n            node     = div [ ``class`` \"Splitter\" ]\n            after    = true\n            dragging = false\n            startVer = true\n            startP   = 0.0\n            start    = 0.0\n            size     = 0.0\n            domElem  = None\n        }\n    static member New(value)    = SplitterBar.New(Var.Create value)\n    member        this.Var      = this.value\n    member        this.GetValue = this.value |> Val.map2 max this.min |> Val.map2 min this.max\n    member        this.Render   =\n        let mouseCoord (ev: Dom.MouseEvent) = if this.startVer then float ev.ClientX else float ev.ClientY\n        let size () : float =\n            match this.domElem with\n            | None    -> 100.0\n            | Some el -> \n             el.ParentElement.GetBoundingClientRect() \n             |> fun r -> \n                 match this.startVer, this.after with\n                 | true , true  ->  r.Width  \n                 | true , false -> -r.Width \n                 | false, true  ->  r.Height\n                 | false, false -> -r.Height\n        let drag (ev: Dom.Event) =\n            ev :?> Dom.MouseEvent\n            |> mouseCoord\n            |> fun m   -> (m - this.start) * 100.0 / this.size + this.startP\n            |> fun v   -> this.value.Value <- v // ; JS.Inline(\"console.log($0)\", this)\n           \n        let rec finishDragging (_: Dom.Event) =\n            if this.dragging then\n                this.dragging <- false\n                JS.Window.RemoveEventListener(\"mousemove\", drag          , false) \n                JS.Window.RemoveEventListener(\"mouseup\"  , finishDragging, false) \n                //printfn \"mouseup\"\n        let startDragging _ (ev: Dom.MouseEvent) =\n            if not this.dragging then\n                Val.map2 (fun startP dirV ->\n                    this.dragging <- true\n                    this.startVer <- dirV\n                    this.startP   <- startP\n                    this.start    <- mouseCoord ev\n                    this.size     <- size()\n                    JS.Window.AddEventListener(\"mousemove\", drag          , false) \n                    JS.Window.AddEventListener(\"mouseup\"  , finishDragging, false) \n                    ev.PreventDefault()\n                ) this.GetValue this.vertical\n                |> Val.iter id\n        this.node\n          .AddChildren [\n            SomeAttr <| on.mouseDown startDragging\n            SomeAttr <| on.afterRender (fun el -> this.domElem <- Some el)\n          ]  \n    member inline this.Value       v = this.value.Value    <- v    ; this\n    member inline this.Node     node = { this with node         = node                        }\n    member inline this.Min         v = { this with min          = Val.fixit v                 }\n    member inline this.Max         v = { this with max          = Val.fixit v                 }\n    member inline this.Vertical    v = { this with vertical     = Val.fixit v                 }\n    member inline this.Horizontal  v = { this with vertical     = Val.fixit v |> Val.map not  }\n    member inline this.Vertical   () = { this with vertical     = Val.fixit true              }\n    member inline this.Horizontal () = { this with vertical     = Val.fixit false             }\n    member inline this.Before        = { this with after        =           false             }\n    member inline this.After         = { this with after        =           true              }\n    ", "snpParentIdO": {"SnippetId" :"e9ac2d66-474a-46a6-95fa-d369e6d703d1"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpName": "module RunCode =", "snpContent": "[<JavaScript>]\nmodule RunCode =", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [{"SnippetId" :"1095ae38-19fc-4195-840c-c368a3a486c4"}, {"SnippetId" :"3709b431-1507-48ed-9487-dd49ce7be748"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"79f8f6c6-d1f5-4593-9775-60ba2863e94d"}, "snpName": "", "snpContent": "#r @\"ZafirTranspiler.dll\"\nmodule EditorRpc =\n    let callRPC asy callback =\n        Async.StartWithContinuations(asy, callback, (fun e -> JS.Alert(e.ToString()) ), fun c -> JS.Alert(c.ToString()))\n\n    let checkSource  callback          source = CIPHERPrototype.Editor.checkSource  source          |> callRPC <| callback\n    let methods      callback line col source = CIPHERPrototype.Editor.methods      source line col |> callRPC <| callback\n    let declarations callback line col source = CIPHERPrototype.Editor.declarations source line col |> callRPC <| callback\n    let translate    callback minified source = CIPHERPrototype.Editor.translate    source minified |> callRPC <| callback\n    let evaluate     callback          source = CIPHERPrototype.Editor.evaluate     source          |> callRPC <| callback\n\nlet completeJS js = \n  \"\"\"\n    CIPHERSpaceLoadFileGlobalFileRef = null;\n    CIPHERSpaceLoadFile = function (filename, callback) {\n        if (filename.slice(-3) == \".js\" || filename.slice(-4) == \".fsx\" || filename.slice(-3) == \".fs\") { //if filename is a external JavaScript file\n            var fileRef = null;\n            var pre = document.querySelector('script[src=\"' + filename + '\"]')\n            if (!pre) {\n                fileRef = document.createElement('script')\n                fileRef.setAttribute(\"type\", \"text/javascript\")\n                fileRef.setAttribute(\"src\", filename)\n            }\n            else callback();\n        }\n        else if (filename.slice(-4) == \".css\") { //if filename is an external CSS file\n            var pre = document.querySelector('script[src=\"' + filename + '\"]')\n            if (!pre) {\n                fileRef = document.createElement(\"link\")\n                fileRef.setAttribute(\"rel\", \"stylesheet\")\n                fileRef.setAttribute(\"type\", \"text/css\")\n                fileRef.setAttribute(\"href\", filename)\n            }\n            else callback();\n        }\n        else if (filename.slice(-5) == \".html\") { //if filename is an external HTML file\n            var pre = document.querySelector('script[src=\"' + filename + '\"]')\n            if (!pre) {\n                fileRef = document.createElement(\"link\")\n                fileRef.setAttribute(\"rel\", \"import\")\n                fileRef.setAttribute(\"type\", \"text/html\")\n                fileRef.setAttribute(\"href\", filename)\n            }\n            else callback();\n        }\n        if (!!fileRef) {\n            CIPHERSpaceLoadFileGlobalFileRef = fileRef;\n\t\t\tfileRef.onload = function () { fileRef.onload = null;  callback(); }\n            document.getElementsByTagName(\"head\")[0].appendChild(fileRef);\n        }\n    }\n    CIPHERSpaceLoadFiles = function (files, callback) {\n        var newCallback = callback\n        if (!!CIPHERSpaceLoadFileGlobalFileRef && !!(CIPHERSpaceLoadFileGlobalFileRef.onload)) {\n            var oldCallback = CIPHERSpaceLoadFileGlobalFileRef.onload;\n            CIPHERSpaceLoadFileGlobalFileRef.onload = null;\n            newCallback = function () {\n                callback();\n                oldCallback();\n            }\n        }\n        var i = 0;\n        loadNext = function () {\n            if (i < files.length) {\n                var file = files[i];\n                i++;\n                CIPHERSpaceLoadFile(file, loadNext);\n            }\n            else newCallback();\n        };\n        loadNext();\n\t}\n    CIPHERSpaceLoadFiles(['https://code.jquery.com/jquery-3.1.1.min.js'], function() {}); \n\tCIPHERSpaceLoadFilesDoAfter = function (callback) {\n\t\tvar newCallback = callback\n\t\tif (!!CIPHERSpaceLoadFileGlobalFileRef) {\n\t\t\tif (!!(CIPHERSpaceLoadFileGlobalFileRef.onload)) {\n\t\t\t\tvar oldCallback = CIPHERSpaceLoadFileGlobalFileRef.onload;\n\t\t\t\tCIPHERSpaceLoadFileGlobalFileRef.onload = null;\n\t\t\t\tnewCallback = function () {\n\t\t\t\t\toldCallback();\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse CIPHERSpaceLoadFileGlobalFileRef = {};\n\t\tCIPHERSpaceLoadFileGlobalFileRef.onload = newCallback;\n\t}\n\nCIPHERSpaceLoadFilesDoAfter(function() { \n  if (typeof IntelliFactory !=='undefined')\n    IntelliFactory.Runtime.Start();\n  for (key in window) { \n    if (key.startsWith(\"StartupCode$\")) \n      try { window[key].$cctor(); } catch (e) {} \n  } \n})\n                 \"\"\" + js\n\nlet compile fThen fFail code =\n    EditorRpc.translate \n        <| (fun (jsO, msgs) ->\n             jsO\n             |> Option.map completeJS\n             |> function\n             | Some js -> fThen  msgs   js\n             | None    -> fFail  msgs\n            )\n        <| false <| code\n", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"3038cd62-093c-4385-aa9b-799297bd379c"}, {"SnippetId" :"60bffe71-edde-4971-8327-70b9f5c578bb"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"f2571ac9-37ec-4d7c-9ead-9e5f79ae1be1"}, "snpName": "", "snpContent": "type RunNode(nodeName, ?clearNode: bool) =\n  let bClearNode    = defaultArg clearNode true\n  let createBaseNode () =\n      let el = JS.Document.CreateElement \"div\"\n      el.SetAttribute(\"id\", nodeName)\n      JS.Document.Body.AppendChild el |> ignore\n      el\n  let baseNode = \n      match JS.Document.GetElementById nodeName with\n      | null -> createBaseNode()\n      | node -> node\n  let runNode =\n      match baseNode.ShadowRoot with\n      | null -> let e = JS.Document.CreateElement \"div\"\n                baseNode.AttachShadow(Dom.ShadowRootInit(Dom.ShadowRootMode.Open)).AppendChild e |> ignore\n                e?style <- \"height: 100%; width: 100%;\"\n                e\n      | root -> root.FirstChild :?> Dom.Element\n  do if bClearNode then runNode.InnerHTML <- \"\"\nwith\n  new(?clearNode: bool) = RunNode(\"TestNode\", defaultArg clearNode true)\n  member this.RunNode   = runNode", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"081bac32-e739-4124-87eb-eb7d6f2220bc"}, "snpName": "AddBootstrap", "snpContent": "  member this.AddBootstrap =\n    JS.Document.CreateElement \"div\"\n    |> fun el -> \n        el.InnerHTML <- \n            @\"<script src='http://code.jquery.com/jquery-3.1.1.min.js' type='text/javascript' charset='UTF-8'></script>\n            <script src='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js' type='text/javascript' charset='UTF-8'></script>\n            <link type='text/css' rel='stylesheet' href='http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css'>\n            <link type='text/css' rel='stylesheet' href='/EPFileX/css/main.css'>\n            \"\n        runNode.AppendChild el |> ignore\n    this", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"f2571ac9-37ec-4d7c-9ead-9e5f79ae1be1"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"c110a9c9-bc3b-4be7-8e5d-f43cc75f93ed"}, "snpName": "RunDoc", "snpContent": "  member inline this.RunDoc  doc  = doc  :> Doc       |> Doc.Run this.RunNode", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"aba6c516-0ac9-4abe-95a2-7257d077e338"}, {"SnippetId" :"f2571ac9-37ec-4d7c-9ead-9e5f79ae1be1"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"3038cd62-093c-4385-aa9b-799297bd379c"}, "snpName": "RunHtml", "snpContent": "  member inline this.RunHtml node = node |> renderDoc |> this.RunDoc", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"c110a9c9-bc3b-4be7-8e5d-f43cc75f93ed"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"456562f7-0757-4431-9aeb-d58b050cecf7"}, "snpName": "RunHtmlPlusFree", "snpContent": "  member        this.RunHtmlPlusFree node =\n    let freeHtml    = Var.Create \"\"\n    let freeCSS     = Var.Create \"\"\n    let freeFS      = Var.Create \"\"\n    let freeJS      = Var.Create \"\"\n    let freeMsgs    = Var.Create \"\"\n    let sendMsg msg = \n        freeMsgs.Value  <- \n            match freeMsgs.Value, msg with\n            | null, m \n            | \"\"  , m\n            | m   , null\n            | m   , \"\"   -> m\n            | m1  , m2   -> m1 + \"\\n\" + m2\n    let runJS () =\n        sendMsg \"Running JavaScript...\"\n        try JS.Eval(freeJS.Value) |> (fun v -> sendMsg \"Done!\"; v.ToString())\n        with e -> sendMsg \"Failed!\"; e.ToString()\n        |> sendMsg\n    let runFS () =\n        freeMsgs.Value <- \"Compiling to JavaScript...\"\n        freeJS.Value   <- \"\"\n        compile (fun msgs js -> freeJS.Value <- js ; runJS() ) sendMsg freeFS.Value\n    div [ style \"height: 100%\"\n          node\n          Template.Button.New(\"Eval F#\").Style(\"vertical-align:top\").OnClick(fun _ _ -> runFS()                        ).Render  \n          someElt <| Doc.InputArea [ attr.placeholder \"F#:\"         ; attr.title \"Add F# code and invoke with Eval F#\" ] freeFS\n          someElt <| Doc.InputArea [ attr.placeholder \"HTML:\"       ; attr.title \"Enter HTML tags and text\"            ] freeHtml \n          someElt <| Doc.InputArea [ attr.placeholder \"CSS:\"        ; attr.title \"Test your CSS styles dynamically\"    ] freeCSS \n          someElt <| Doc.InputArea [ attr.placeholder \"JavaScript:\" ; attr.title \"Add JS code and invoke with Eval JS\" ] freeJS\n          Template.Button.New(\"Eval JS\").Style(\"vertical-align:top\").OnClick(fun _ _ -> freeMsgs.Value <- \"\" ; runJS() ).Render  \n          someElt <| Doc.InputArea [ attr.placeholder \"Output:\"     ; attr.title \"Messages\"                            ] freeMsgs\n          SomeDoc <| tag Doc.Verbatim (Val.map2 (sprintf \"%s<style>%s</style>\") freeHtml freeCSS)\n    ]\n    |> this.RunHtml", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"3038cd62-093c-4385-aa9b-799297bd379c"}, {"SnippetId" :"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"}, {"SnippetId" :"79f8f6c6-d1f5-4593-9775-60ba2863e94d"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"bf400a85-8264-4540-9381-f3be0c968c94"}, "snpName": "ShowHtmlResult", "snpContent": "  member inline this.ShowHtmlResult res =\n    this.AddBootstrap |> ignore\n    div [ ``class`` \"container\"\n          Template.Panel.New\n            .Title(\"Result:\")\n            .Header([])\n            .Content([ h3 res ; style \"font-family:monospace;\" ])\n            .Render\n     ] |> this.RunHtml\n  member inline this.ShowHtmlResult res = this.ShowHtmlResult [res]\n", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"081bac32-e739-4124-87eb-eb7d6f2220bc"}, {"SnippetId" :"0a11766b-f227-4b38-88a3-919d964387bf"}, {"SnippetId" :"3038cd62-093c-4385-aa9b-799297bd379c"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"c47adc01-4550-4830-8df5-e1ebedaee7d0"}, "snpName": "ShowResult", "snpContent": "  member inline this.ShowResult res = htmlText (sprintf \"%A\" res) |> this.ShowHtmlResult\n", "snpParentIdO": {"SnippetId" :"e2ca8cb1-fb1e-4793-855f-55e3ca07b8f5"}, "snpPredIds": [{"SnippetId" :"bf400a85-8264-4540-9381-f3be0c968c94"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpName": "", "snpContent": "[<JavaScript>]\nmodule FSharpStation =\n", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [{"SnippetId" :"336d6f19-0c57-4af9-8716-1b3fbf6b112c"}, {"SnippetId" :"3709b431-1507-48ed-9487-dd49ce7be748"}, {"SnippetId" :"60bffe71-edde-4971-8327-70b9f5c578bb"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"2deb54e7-009e-4297-b2bc-1c86d04203a4"}, "snpName": "", "snpContent": "type CodeSnippetId = CodeSnippetId of System.Guid        \nwith static member New = CodeSnippetId <| System.Guid.NewGuid()\n\nlet snippetName name (content: string) =\n    if name <> \"\" then name else \n    content.Split([| '\\n' |], System.StringSplitOptions.RemoveEmptyEntries)\n    |> Seq.map    (fun l -> l.Trim())\n    |> Seq.filter (fun l -> not (l.StartsWith(\"#\") || l.StartsWith(\"[<\") || l.StartsWith(\"//\")))\n    |> Seq.tryHead\n    |> Option.defaultValue \"<empty>\"\n\ntype CodeSnippet = {\n    name         : string\n    content      : string\n    parent       : CodeSnippetId option\n    predecessors : CodeSnippetId list\n    companions   : CodeSnippetId list\n    id           : CodeSnippetId\n    expanded     : bool\n} with\n    member this.Name = snippetName this.name this.content\n\nlet codeSnippetsStorage = WebSharper.UI.Next.Storage.LocalStorage \"CodeSnippets\" Serializer.Typed<CodeSnippet>\nlet codeSnippets        = ListModel.CreateWithStorage<CodeSnippetId, CodeSnippet> (fun s -> s.id) codeSnippetsStorage\n//    let codeSnippets        = ListModel.Create<CodeSnippetId, CodeSnippet> (fun s -> s.id) []\n\nlet tryPickI f s = s |> Seq.indexed |> Seq.filter f |> Seq.tryHead\n\ntype CodeSnippet \n    with\n    static member PickIO id = codeSnippets.Value |> tryPickI (fun (_, snp) -> snp.id = id)\n    static member FetchO id = codeSnippets.TryFindByKey id\n    static member FetchL id = CodeSnippet.FetchO id |> Option.toList\n    static member New(            pred    , cnt) = CodeSnippet.New(\"\", None   , pred, [], cnt)\n    static member New(        pa, pred    , cnt) = CodeSnippet.New(\"\", Some pa, pred, [], cnt)\n    static member New(        pa,           cnt) = CodeSnippet.New(\"\", Some pa, []  , [], cnt)\n    static member New(                      cnt) = CodeSnippet.New(\"\", None   , []  , [], cnt)\n    static member New(    nm, pa, pred, co, cnt) = CodeSnippet.New(codeSnippets.Length, nm, pa, pred, co, cnt)\n    static member New(od, nm, pa, pred, co, cnt) =\n        let newS =\n            {\n                name         = nm\n                content      = cnt\n                parent       = pa\n                predecessors = pred\n                companions   = co\n                id           = CodeSnippetId.New\n                expanded     = true\n            }\n        match od, codeSnippets.Length with\n        | _, 0            -> codeSnippets.Append newS\n        | 0, _            -> codeSnippets.Set <| Seq.append [| newS |] codeSnippets.Value\n        | i, n when i < n -> codeSnippets.Value \n                                |> Seq.toArray\n                                |> Array.splitAt od\n                                |> fun (fst, snd) -> Array.append fst <| Array.append [| newS |] snd\n                                |> codeSnippets.Set \n        | _, _            -> codeSnippets.Append newS\n        newS\n    member this.UniquePredecesors() =\n        let rec preds (ins : CodeSnippetId list) outs : CodeSnippetId list =\n            match ins with\n            | []         -> outs\n            | hd :: rest -> List.collect id [ rest ; hd |> CodeSnippet.FetchL |> List.collect (fun s -> s.parent |> Option.toList |> List.append <| s.predecessors) ]\n                            |> preds <| if outs |> Seq.contains hd then outs else hd::outs\n        preds [ this.id ] []\n    member this.Level() =\n        let rec level snp out = \n            snp.parent\n            |> Option.bind CodeSnippet.FetchO\n            |> Option.map (fun p -> level p <| out + 1) \n            |> Option.defaultValue out\n        level this 0\n    member this.NameSanitized =\n        //let illegal = System.IO.Path.GetInvalidFileNameChars()\n        let illegal = [|'\"'   ; '<'   ; '>'   ; '|'   ; '\\000'; '\\001'; '\\002'; '\\003'; '\\004'; '\\005'; '\\006';\n                        '\\007'; '\\b'  ; '\\009'; '\\010'; '\\011'; '\\012'; '\\013'; '\\014'; '\\015';\n                        '\\016'; '\\017'; '\\018'; '\\019'; '\\020'; '\\021'; '\\022'; '\\023'; '\\024';\n                        '\\025'; '\\026'; '\\027'; '\\028'; '\\029'; '\\030'; '\\031'; ':'   ; '*'   ; '?';\n                        '\\\\'  ; '/'|]\n        this.Name\n        |> String.filter (fun c -> not <| Array.contains c illegal)\n        |> (fun c -> \"F# \" + c + \".fsx\")\n    member this.ContentIndented() =\n        let lvl = this.Level()\n        if lvl = 0 || lvl = 1 then this.content \n        else this.content.Split('\\n')\n                |> Array.map (fun l -> if l.StartsWith \"#\" then l else  (String.replicate lvl \"  \") + l)\n                |> String.concat \"\\n\"\n        |> sprintf \"# 1 @\\\"%s %s\\\"\\n%s\" (if lvl = 0 || lvl = 1 then \"\" else sprintf\"(%d)\" (lvl * 2)) this.NameSanitized\n    member this.Code() =\n        let preds = this.UniquePredecesors() |> Seq.toArray\n        codeSnippets.Value\n        |> Seq.filter (fun snp -> preds |> Array.contains snp.id)\n        |> Seq.map    (fun snp -> snp.ContentIndented()         )\n        |> String.concat \"\\n\"\n    member this.IsDescendantOf antId =\n        let rec isDescendantOf snp =\n            match snp.parent with\n            | None       -> false\n            | Some parId ->\n            if parId = antId then true else\n            CodeSnippet.FetchO parId\n            |> Option.map isDescendantOf\n            |> Option.defaultValue false\n        isDescendantOf this\n", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"987560b0-1fe6-4835-ad99-aed93db7da1a"}, "snpName": "currentCodeSnippetId", "snpContent": "let missingVar  = Var.Create \"\"\nlet missing find lens k =\n    match find k with\n    | Some _ -> lens k\n    | None   -> missingVar.Lens (fun _ -> \"\") (fun _ _ -> \"\")\n    \nlet currentCodeSnippetId  = Var.Create <| CodeSnippetId.New\n\n[< Inline >]\nlet inline storeVarCodeEditor name = storeVar <| \"CodeEditor.\" + name\nstoreVarCodeEditor \"currentCodeSnippetId\" currentCodeSnippetId\n\nlet refresh       = Var.Create()\nlet refreshView b = refresh.Value <- b\n\nlet currentCodeSnippetO = Val.map2 (fun k () -> codeSnippets.TryFindByKey k) currentCodeSnippetId refresh\n\nlet curSnippetNameOf k = missing codeSnippets.TryFindByKey <| codeSnippets.LensInto (fun s -> s.Name   ) (fun s n -> { s with name    = n }) <| k\nlet curSnippetCodeOf k = missing codeSnippets.TryFindByKey <| codeSnippets.LensInto (fun s -> s.content) (fun s n -> { s with content = n }) <| k\n    \ntype Position =\n    | Below\n    | Right\n    | Tab\n    | NewBrowser\n    \nlet positionTxt v =\n    match v with\n    | Below      -> \"Below\"\n    | Right      -> \"Right\"\n    | Tab        -> \"In Tab\"\n    | NewBrowser -> \"New Browser\"\n    \nlet position = Var.Create Below\nstoreVarCodeEditor \"position\" position\n\nlet directionVertical    = \n    Val.map (fun pos -> \n        match pos with\n        | Right -> true\n        | _     -> false\n    ) position\n    \n    ", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"2deb54e7-009e-4297-b2bc-1c86d04203a4"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"07e477d3-fb6e-4c83-bb89-b4b2cce55d7b"}, "snpName": "CodeEditorMain", "snpContent": "let noSelection cur = CodeSnippet.FetchO cur = None\nlet noSelectionVal  = Val.map noSelection currentCodeSnippetId\n\nlet dirty    = Var.Create false \nlet codeFS   = Var.Create \"\"\nlet codeJS   = Var.Create \"\"\nlet codeMsgs = Var.Create \"\"\n\nstoreVarCodeEditor \"dirty\" dirty\n\nlet sendMsg msg =\n    if isUndefined msg then () else\n    codeMsgs.Value  <- \n        match codeMsgs.Value, msg.ToString() with\n        | null, m \n        | \"\"  , m\n        | m   , null\n        | m   , \"\"   -> m\n        | m1  , m2   -> m1 + \"\\n\" + m2\n\ndo Val.sink (fun m -> \n    JS.Window.Onbeforeunload <- \n        if m then System.Action<Dom.Event>(fun (e:Dom.Event) -> e?returnValue  <- \"Changes you made may not be saved.\")\n        else null\n    ) dirty \n\nlet setDirty() = dirty.Value <- true\nlet setClean() = dirty.Value <- false\n\nlet getFSCode () =\n    CodeSnippet.FetchO currentCodeSnippetId.Value \n    |> Option.iter (fun snp -> codeFS.Value <- snp.Code())\n\nlet evalIFrameJS success failure js =\n    createIFrame (fun frame ->\n        try\n             let window   = frame?contentWindow\n             let eval   s = JS.Apply window \"eval\" [| s |]\n             eval js           |> success\n        with e -> e.ToString() |> failure\n    )\n    |> RunCode.RunNode().RunHtml\n\nlet evalWindowJS success failure js =\n    let window       = JS.Apply JS.Window \"open\" [| JS.Window.Location.Origin + \"/Main.html\" |]\n    match window with\n    | null -> failure \"could not open new browser. Popup blocker may be active.\"\n    | _    ->\n    600 \n    |> JS.SetTimeout (fun () -> \n        try\n             let eval   s = JS.Apply window   \"eval\" [| s |]\n             //printfn \"Evaluating...\"\n             JS.Apply window   \"focus\" [|  |]\n             eval js           |> success\n        with e -> e.ToString() |> failure)\n    |> ignore\n                               \nlet runJS msgs js =\n    sendMsg \"Running JavaScript...\"\n    match position.Value with\n    | NewBrowser -> evalWindowJS\n    | _          -> evalIFrameJS\n    <| (fun res  -> sendMsg \"Done!\"   ; sendMsg res ; sendMsg msgs) \n    <| (fun res  -> sendMsg \"Failed!\" ; sendMsg res ; sendMsg msgs)\n    <| js\n\nlet processSnippet msg processCode =\n    CodeSnippet.FetchO currentCodeSnippetId.Value \n    |> Option.iter (fun snp -> \n        codeMsgs.Value <- msg\n        codeJS.Value   <- \"\"\n        let code = snp.Code()\n        codeFS.Value   <- code\n        processCode       code\n    )\n\nlet compileSnippet fThen fFail = \n    processSnippet \"Compiling to JavaScript...\" (RunCode.compile (fun msgs js -> codeJS.Value <- js ; fThen msgs js) fFail)\n\nlet compileRun  () = compileSnippet runJS                                               sendMsg\nlet justCompile () = compileSnippet (fun msgs _ -> sendMsg \"Compiled!\" ; sendMsg msgs)  sendMsg\nlet evaluateFS  () = \n    processSnippet \"Evaluating F# code...\" \n        (RunCode.EditorRpc.evaluate \n          (function \n           | None    , \"\"\n           | Some \"\" , \"\"   -> \"Done!\"\n           | None    , msgs -> msgs\n           | Some out, \"\"   ->               out\n           | Some out, msgs -> msgs + \"\\n\" + out\n           >> sendMsg))\n\nlet reorderSnippet toId fromId =\n    let trySnippet id = tryPickI (fun (_, snp) -> snp.id = id) \n    let moving, others = codeSnippets.Value |> Seq.toArray |> Array.partition (fun snp -> snp.id = fromId || snp.IsDescendantOf fromId)\n    match trySnippet fromId moving, trySnippet toId others with\n    | Some(_, snp), Some(ti, tsn) ->\n        [| others.[0..ti - 1] ; moving ; others.[ti..] |]\n        |> Array.collect id\n        |> codeSnippets.Set\n        codeSnippets.UpdateBy (fun c -> Some { c with parent = tsn.parent }) snp.id\n    | _ -> ()\n    setDirty()\n    refreshView()\n\nlet indentCodeIn () =\n    CodeSnippet.PickIO currentCodeSnippetId.Value\n    |> Option.iter (fun (j, snp) ->\n        let rec doPriorUntil f i =\n            if i < 0 then () else\n            if codeSnippets.Value |> Seq.item i |> f then () else\n            doPriorUntil f (i - 1)\n        j - 1 |> doPriorUntil (fun pri ->\n            if pri.parent = snp.parent \n            then codeSnippets.UpdateBy (fun c -> Some { c with parent = Some pri.id }) snp.id\n                 true\n            else false\n        )\n        setDirty()\n        refreshView()\n    )\n\nlet indentCodeOut () =\n    CodeSnippet.FetchO currentCodeSnippetId.Value\n    |> Option.iter (fun snp ->\n        let newP = snp.parent\n                   |> Option.bind CodeSnippet.FetchO\n                   |> Option.bind (fun p -> p.parent)\n        codeSnippets.UpdateBy (fun c -> Some { c with parent = newP }) snp.id\n        setDirty()\n        refreshView()\n    )\n\nlet mutable draggedId   = CodeSnippetId.New\n\n", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"79f8f6c6-d1f5-4593-9775-60ba2863e94d"}, {"SnippetId" :"987560b0-1fe6-4835-ad99-aed93db7da1a"}, {"SnippetId" :"a28fe808-236e-4b7e-9509-51ebe21e35fc"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"93f32df7-da8b-472f-8bad-e82cc58ec52b"}, "snpName": "let listEntry code =", "snpContent": "let isDirectPredecessor pre curO =\n    curO\n    |> Option.map (fun snp -> snp.predecessors |> List.contains pre)\n    |> Option.defaultValue false\n\nlet curPredecessors =\n    Val.map (   Option.map          (fun (snp:CodeSnippet) -> snp.UniquePredecesors())\n              >> Option.defaultValue [])  currentCodeSnippetO  \n\nlet isIndirectPredecessor pre predecessors = predecessors |> List.contains pre\n    \nlet togglePredecessorForCur (pre:CodeSnippet) curO =\n    curO |> Option.iter (fun cur ->\n        if cur = pre || isIndirectPredecessor cur.id (pre.UniquePredecesors()) then () else\n        let preds = \n            if cur.predecessors |> List.contains pre.id\n            then List.filter ((<>) pre.id)\n            else fun l -> pre.id :: l\n            <| cur.predecessors\n        codeSnippets.UpdateBy  (fun c -> Some { c with predecessors = preds }) cur.id\n        setDirty()\n        refreshView()\n    )\n\nlet toggleExpanded snp =\n    codeSnippets.UpdateBy  (fun c -> Some { c with expanded = not c.expanded }) snp.id\n    refreshView()\n\nlet listEntry isParent isExpanded code =\n    Template.Hoverable.New\n        .Content( [ \n                    ``class`` \"code-editor-list-tile\"\n                    classIf   \"selected\"              <| Val.map ((=)                   code.id) currentCodeSnippetId\n                    classIf   \"direct-predecessor\"    <| Val.map (isDirectPredecessor   code.id) currentCodeSnippetO\n                    classIf   \"indirect-predecessor\"  <| Val.map (isIndirectPredecessor code.id) curPredecessors\n                    draggable \"true\"\n                    SomeAttr <| on.dragOver(fun _ ev -> ev.PreventDefault()                                              )\n                    SomeAttr <| on.drag    (fun _ _  ->                                              draggedId <- code.id)\n                    SomeAttr <| on.drop    (fun _ ev -> ev.PreventDefault() ; reorderSnippet code.id draggedId           )\n                    span    [ ``class`` \"node\"\n                              classIf   \"parent\"   isParent\n                              classIf   \"expanded\" isExpanded\n                              SomeAttr <| on.click(fun _ _ -> if isParent then toggleExpanded code)\n                              title    <| if isParent then (if isExpanded then \"collapse\" else \"expand\") else \"\"\n                              htmlText <| if isParent then (if isExpanded then \"v\"        else \">\"     ) else \"\"\n                            ]\n                    div     [ ``class`` \"code-editor-list-text\"\n                              style1 \"text-indent\" (sprintf \"%dem\" <| code.Level())\n                              htmlText <| Val.map2 snippetName (curSnippetNameOf code.id) (curSnippetCodeOf code.id)\n                              SomeAttr <| on.click (fun _ _ -> currentCodeSnippetId.Value <- code.id)\n                            ]\n                    span    [ ``class``   \"predecessor\"\n                              title       \"toggle predecessor\"\n                              SomeAttr <| on.click(fun _ _ -> Val.iter (togglePredecessorForCur code) currentCodeSnippetO)\n                              htmlText    \"X\"\n                            ]\n                    ])\n        .Render\n\nlet listEntries snps =\n    snps\n    |> Seq.indexed\n    |> Seq.mapFold (fun expanded (i, snp) ->\n        if snp.parent |> Option.map (fun p -> Set.contains p expanded) |> Option.defaultValue true then \n            let isParent    = codeSnippets |> Seq.tryItem (i + 1) |> Option.map (fun nxt -> nxt.parent = Some snp.id) |> Option.defaultValue false\n            let isExpanded  = isParent && snp.expanded\n            (listEntry isParent isExpanded snp |> Some, if isExpanded then Set.add snp.id expanded else expanded)\n        else  (None, expanded)\n    )  (Set [])\n    |> fst\n    |> Seq.choose (Option.map renderDoc)\n    |> Doc.Concat", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"07e477d3-fb6e-4c83-bb89-b4b2cce55d7b"}, {"SnippetId" :"c7841be7-5cd5-40f3-b91c-c107b487bc0c"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"60191ea0-da20-4fbf-96b8-3871338a66d8"}, "snpName": "", "snpContent": "let addCode () =\n    CodeSnippet.PickIO currentCodeSnippetId.Value\n    |> Option.map (fun (i, snp) -> CodeSnippet.New(i + 1, \"\", snp.parent, [], [], \"\"))\n    |> Option.defaultWith (fun _ -> CodeSnippet.New \"\")\n    |> fun n -> currentCodeSnippetId.Value <- n.id\n    setDirty()\n    refreshView()\n\n\nlet deleteCode () =\n    CodeSnippet.FetchO currentCodeSnippetId.Value\n    |> Option.iter (fun snp -> \n        if JS.Confirm (sprintf \"Do you want to delete %s?\" snp.Name) then\n            currentCodeSnippetId.Value <- CodeSnippetId.New\n            codeSnippets.Remove snp\n            setDirty()\n            refreshView()\n    )\n    \nlet justFileName (f:string) = f.Split [| '/' ; '\\\\' |] |> Seq.last\n\nlet fileName  = Var.Create \"\"\nlet emptyFile = Val.map (fun v -> v = \"\") fileName\n\nlet loadTextFile element (f: string -> unit) =\n    let files = element |> FileList.OfElement \n    if files.Length > 0 then\n        let  reader  = TextFileReader()\n        reader.Onload <- (fun e -> f e.Target?result)\n        reader.ReadAsText files.[0] \n\nlet fileInputElementId = \"CodeEditorFileSel\"\nlet loadFile (e: Dom.Element) =\n    if (not dirty.Value) || JS.Confirm \"Changes have not been saved, do you really want to load?\" then    \n      loadTextFile ((e.GetRootNode().FirstChild :?> Dom.Element).QuerySelector(\"#\" + fileInputElementId))\n        (fun txt ->\n            try\n                txt\n                |> Json.Deserialize<CodeSnippet[]>\n                |> codeSnippets.Set\n                setClean()\n                refreshView()\n            with e -> JS.Alert <| e.ToString()\n        )\n\n[< Inline \"saveAs(new Blob([$txt], {type: 'text/plain;charset=utf-8'}), $name)\" >]\nlet saveAs (txt:string) (name:string) = ()\n\nlet downloadFile() =\n    codeSnippets.Value\n        |> Seq.toArray\n        |> Json.Serialize\n        |> saveAs <| match justFileName fileName.Value with | \"\" -> \"snippets.fsjson\" | fname -> fname\n    setClean()\n\nlet loadFileElement =\n    Template.Input.New(fileName.Lens justFileName (fun prev n -> prev) )\n        .Prefix( label [ ``class`` \"btn btn-primary\" ; htmlText \"Load File...\" \n                         Template.Input.New(fileName)\n                                 .Type(\"file\")\n                                 .Style(\"display: none\")\n                                 .Content([ on.change (fun el _ -> loadFile el   )\n                                            on.click  (fun el _ -> el?value <- \"\")\n                                          ])\n                                 .Id(fileInputElementId)\n                                 .Render \n                        ]\n                )\n\nlet Do f = (fun _ _ -> f())", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"07e477d3-fb6e-4c83-bb89-b4b2cce55d7b"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"fa5b4506-b26d-4387-8e04-ac7a5a90861a"}, "snpName": "let styleEditor =", "snpContent": "let splitterV1 =\n    Template.SplitterBar.New(20.0)\n      .Node(div [ ``class`` \"sliderv\"\n                  style \"width : 5px; grid-column: 2  ; grid-row: 2/4; margin-left: -7px; border: 0px; padding: 0px;\" ])\n\nlet splitterV2 =\n    Template.SplitterBar.New(50.0).Max(Val.map ((-) 92.0) splitterV1.GetValue)\n      .Node(div [ ``class`` \"sliderv\"\n                  style \"width : 5px; grid-column: 3  ; grid-row: 3  ; margin-left: -7px; border: 0px; padding: 0px;\" ])\n      \nlet splitterH3 =\n    Template.SplitterBar.New(17.0).Horizontal().Before\n      .Node(div [ ``class`` \"sliderh\"\n                  style \"height: 5px; grid-column: 2/4; grid-row: 3  ; margin-top : -7px; border: 0px; padding: 0px;\" ])\n\nstoreVarCodeEditor \"splitterV1\" splitterV1.Var\nstoreVarCodeEditor \"splitterV2\" splitterV2.Var\nstoreVarCodeEditor \"splitterH3\" splitterH3.Var\n\nlet styleEditorF sp1 sp2 sp3 =\n    sprintf \"\"\"\ndiv textarea {\nfont-family: monospace;\n}\n.code-editor-list-tile {\nwhite-space: nowrap; \nborder-style: solid none none;\nborder-color: white;\nborder-width: 1px;\nbackground-color: #D8D8D8;\ndisplay: flex;\n}\n.code-editor-list-text{\npadding: 1px 10px 1px 5px;\noverflow:hidden;\ntext-overflow: ellipsis;\nwhite-space: nowrap;\nflex: 1;\n}\n\n.code-editor-list-tile.direct-predecessor {\nfont-weight: bold;\n}\n.code-editor-list-tile.indirect-predecessor {\ncolor: blue;\n}\n.code-editor-list-tile.selected {\nbackground-color: #77F;\ncolor: white;\n}\n.code-editor-list-tile.hovering {\nbackground: lightgray;\n}\n.code-editor-list-tile.hovering.selected {\nbackground:  blue;\n}\n.code-editor-list-tile>.predecessor {\nfont-weight: bold;\nborder-style: inset;\nborder-width: 1px;\ntext-align: center;\ncolor: transparent;\n}\n.code-editor-list-tile.direct-predecessor>.predecessor {\ncolor: blue;\n}\n\n\n.CodeEditor {\n    display: grid;\n    grid-template-columns: %f%% %f%% minmax(0px, 97%%);\n    grid-template-rows: 4%% minmax(0px, 96%%) %f%% 10%%;\n    grid-template-areas:\n    \"header0 header   header\"\n    \"sidebar content1 content1\"\n    \"sidebar content2 content3\"\n    \"footer  footer   footer2\";\n    color: #333;\n    height: 100%%;\n    grid-gap: 9px;\n    padding : 9px;\n}\n\n.CodeEditor > :nth-child(2){  grid-area: header  ; overflow: hidden;               }\n#Snippets                  {  grid-area: sidebar ; overflow: auto  ;               }\n#Code                      {  grid-area: content1; overflow: auto  ;               }\n#Output                    {  grid-area: content2; overflow: auto  ; resize: none; }\n#JScript                   {  grid-area: content3; overflow: auto  ; resize: none; }\n#AllCode                   {  grid-area: footer2 ; overflow: auto                  }\n#Buttons                   {  grid-area: footer  ;                                 }\n\n\n#Buttons { \n        display: grid;\n        grid-template-columns: repeat(8, 12.1%%);\n        bxackground-color: #eee;\n        padding : 5px;\n        grid-gap: 5px;\n}\n\n#Buttons > div       { grid-column: 4/6 }\n\n.CodeMirror {\n    height: 100%%;\n}\n\n.sliderv {\n    background-color: #eef;\n    cursor: col-resize;\n}\n.sliderh {\n    background-color: #eef;\n    cursor: row-resize;   \n}\n.node {\n    background-color:white; \n    width: 2ch; \n    color: #A03; \n    font-weight:bold; \n    text-align: center;\n    font-family: arial;\n}\n\n    \"\"\" sp1 sp2 sp3\n        \nlet styleEditor = htmlText <| Val.map3 styleEditorF splitterV1.GetValue splitterV2.GetValue splitterH3.GetValue\n", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"70030378-692d-431d-bed9-c839a7f95798"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"75c3d033-99b5-409f-8ecb-cd9bd8b101ab"}, "snpName": "", "snpContent": "let CodeEditor() =\n  div [ ``class`` \"CodeEditor\"\n        div [ Id \"Snippets\"\n              codeSnippets.View\n              |> View.SnapshotOn codeSnippets.Value refresh.View\n              |> View.Map listEntries\n              |> Doc.BindView id |> SomeDoc\n            ]                     \n        Template.Input     .New(Val.bindIRef curSnippetNameOf currentCodeSnippetId).Prefix(htmlText \"name:\")                     .Render\n        Template.CodeMirror.New(Val.bindIRef curSnippetCodeOf currentCodeSnippetId).OnChange(setDirty ).Id(\"Code\"   )            .Render.AddChildren([style1 \"height\" \"100%\"])\n        Template.TextArea  .New(codeMsgs).Placeholder(\"Output:\"    ).Title(\"Messages\"                 ).Id(\"Output\" )            .Render\n        Template.TextArea  .New(codeFS  ).Placeholder(\"F# code:\"   ).Title(\"F# code assembled\"        ).Id(\"AllCode\")            .Render\n        Template.TextArea  .New(codeJS  ).Placeholder(\"Javascript:\").Title(\"JavaScript code generated\").Id(\"JScript\")            .Render\n        div [ Id \"Buttons\"\n              Template.Button.New(\"Add code\"              ).Class(\"btn btn-xs\"     ).OnClick(Do addCode      )                          .Render\n              Template.Button.New(\"<<\"                    ).Class(\"btn btn-xs\"     ).OnClick(Do indentCodeOut).Disabled(noSelectionVal) .Render\n              Template.Button.New(\">>\"                    ).Class(\"btn btn-xs\"     ).OnClick(Do indentCodeIn ).Disabled(noSelectionVal) .Render\n              loadFileElement                                                                                                           .Render\n              span []       \n              Template.Button.New(\"Evaluate F# (FSI)\"     ).Class(\"btn btn-xs\"     ).OnClick(Do evaluateFS   ).Disabled(noSelectionVal) .Render\n              Template.Button.New(\"Get F# code ==>\"       ).Class(\"btn btn-xs\"     ).OnClick(Do getFSCode    ).Disabled(noSelectionVal) .Render\n       \n              Template.Button.New(\"Delete code\"           ).Class(\"btn btn-xs\"     ).OnClick(Do deleteCode   ).Disabled(noSelectionVal) .Render\n              span []       \n              span []       \n              Template.Button.New(\"Save as...\"            ).Class(\"btn            \").OnClick(Do downloadFile )                          .Render.AddChildren([classIf \"btn-primary\" dirty])\n              span []\n              Template.Button.New(\"Compile WebSharper\"    ).Class(\"btn btn-xs\"     ).OnClick(Do justCompile  ).Disabled(noSelectionVal) .Render\n              Template.Button.New(\"Run WebSharper in ...\" ).Class(\"btn btn-xs\").OnClick(Do compileRun ).Disabled(noSelectionVal) .Render\n              Doc.Select [ attr.id \"Position\" ] positionTxt [ Below ; Right ; NewBrowser ] position |> someElt\n            ]\n        script [ src \"/EPFileX/FileSaver/FileSaver.js\" ; ``type`` \"text/javascript\" ] \n        styleH [ styleEditor                                                        ]\n        splitterV1                                                                                                               .Render\n        splitterV2                                                                                                               .Render\n        splitterH3                                                                                                               .Render\n     ]\n", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}, {"SnippetId" :"3234a0bf-4541-4f2c-8bbf-b5ab3a0e415b"}, {"SnippetId" :"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"}, {"SnippetId" :"60191ea0-da20-4fbf-96b8-3871338a66d8"}, {"SnippetId" :"93f32df7-da8b-472f-8bad-e82cc58ec52b"}, {"SnippetId" :"b03ba35c-a03c-4bbe-a373-1ce551524e56"}, {"SnippetId" :"b417f7b1-5e53-4c51-a23f-6f2c8c5a77b7"}, {"SnippetId" :"fa5b4506-b26d-4387-8e04-ac7a5a90861a"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"07f11803-2084-4a0a-9066-a43fd11be1c7"}, "snpName": "CodeEditor page", "snpContent": "\n\nlet style1h = \"height : 5px; grid-column: 1/2  ; grid-row   : 2/3; margin-top : -7px; border: 0px; padding: 0px; background-color: #eef; cursor: row-resize\"\nlet style2h = \"height : 5px; grid-column: 1/2  ; grid-row   : 3/4; margin-top : -7px; border: 0px; padding: 0px; background-color: #eef; cursor: row-resize\"\nlet style1v = \"width  : 5px; grid-row   : 1/2  ; grid-column: 2/3; margin-left: -7px; border: 0px; padding: 0px; background-color: #eef; cursor: col-resize\"\nlet style2v = \"width  : 5px; grid-row   : 1/2  ; grid-column: 3/4; margin-left: -7px; border: 0px; padding: 0px; background-color: #eef; cursor: col-resize\"\n\nlet horizontalSplit : Printf.StringFormat<_> = \"\"\"\nbody {\n    display              : grid;\n    grid-template-rows   : %f%% %f%% %f%%;\n    grid-template-columns: 100%%;\n    grid-gap             :   9px;   \n    height               : 100vh;\n    overflow             : hidden;\n}\n\n#CodeEditor              { grid-row   : 2; overflow: hidden; }\n#TestNode                { grid-row   : 3; overflow: auto  ; }\nbody > div:first-of-type { grid-row   : 1; overflow: hidden; }\nbody > div               { grid-column: 1;                   }\n                               \"\"\"\nlet verticalSplit : Printf.StringFormat<_> = \"\"\"\nbody {\n    display              : grid;\n    grid-template-columns: %f%% %f%% %f%%;\n    grid-template-rows   : 100%%;\n    grid-gap             :   9px;   \n    height               : 100vh;\n    overflow             : hidden;\n}\n\n#CodeEditor              { grid-column: 2; overflow: hidden; }\n#TestNode                { grid-column: 3; overflow: auto  ; }\nbody > div:first-of-type { grid-column: 1; overflow: hidden; }\nbody > div               { grid-row   : 1;                   }\n                               \"\"\"\n\nlet style1 =\n    directionVertical\n    |> Val.map (fun dir ->\n        if dir then style1v\n        else        style1h)\n\nlet style2 = \n    directionVertical\n    |> Val.map (fun dir ->\n        if dir then style2v\n        else        style2h)\n\nlet styleSplit  = \n    directionVertical\n    |> Val.map (fun dir ->\n        if dir then verticalSplit\n        else        horizontalSplit)\n\n\nlet splitterMain1 =\n    Template.SplitterBar.New( 0.0).Vertical(directionVertical).Min( 0.0).Max(35.0)\n      .Node(div [ style style1 ])\n\nlet splitterMain2 =\n    Template.SplitterBar.New(24.0).Vertical(directionVertical).Min( 0.5).Max(Val.map (fun pos -> if pos = NewBrowser then 0.1 else 50.0) position).Before\n      .Node(div [ style style2 ])\n\nstoreVarCodeEditor \"splitterMain1\" splitterMain1.Var\nstoreVarCodeEditor \"splitterMain2\" splitterMain2.Var\n\nlet pageStyle =\n    Val.map3 (fun fmt v1 v2 -> \n        sprintf fmt v1 (98.0 - v1 - v2) v2) \n        styleSplit splitterMain1.GetValue splitterMain2.GetValue\n        \nlet addNodeById name (node:HtmlNode) =\n    match JS       .Document.GetElementById   name with\n    | null -> JS   .Document.CreateElement    \"div\"\n              |> JS.Document.Body.AppendChild :?> Dom.Element\n    | node -> node\n    |> fun el -> \n        Doc.RunReplace el (node.AddChildren [ Id name ] |> renderDoc)  \n        \nRunCode.RunNode(\"CodeEditor\").AddBootstrap.RunHtml <| CodeEditor()\naddNodeById \"pageStyle\"                            <| styleH [ htmlText pageStyle ]\naddNodeById \"splitterMain1\"                        <| splitterMain1.Render\naddNodeById \"splitterMain2\"                        <| splitterMain2.Render\n          ", "snpParentIdO": {"SnippetId" :"c2188026-a06a-4963-a95a-93075e5f5b6e"}, "snpPredIds": [{"SnippetId" :"081bac32-e739-4124-87eb-eb7d6f2220bc"}, {"SnippetId" :"456562f7-0757-4431-9aeb-d58b050cecf7"}, {"SnippetId" :"75c3d033-99b5-409f-8ecb-cd9bd8b101ab"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpName": "", "snpContent": "[< JavaScript >]\nmodule Snippets =", "snpParentIdO": {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, "snpPredIds": [{"SnippetId" :"456562f7-0757-4431-9aeb-d58b050cecf7"}, {"SnippetId" :"c47adc01-4550-4830-8df5-e1ebedaee7d0"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"0a1fa320-b731-473a-93e2-dae49cc296f7"}, "snpName": "Demo Button", "snpContent": "\nTemplate.Button\n   .New(    \"Press me!\"                         )\n   .OnClick(fun _ _ -> JS.Alert \"Button pressed\")\n   .Style(  \"font-size: 48px\"                   )\n   .Render\n|> RunCode.RunNode().RunHtmlPlusFree\n   \n", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"f3a7ead2-49e1-4ff4-b96e-6fe699a1c8a9"}, "snpName": "Demo Input", "snpContent": "let inp = Template.Input.New(\"Type something...\")\n\nlet inline h1 ch = htmlElement \"h1\" ch\n\nh3 [\n  inp.Render\n  htmlText inp.Var\n  htmlElement \"h2\" [ htmlText inp.Var ]\n  h1 [ htmlText inp.Var ]\n]\n|> RunCode.RunNode().RunHtmlPlusFree", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"f2cc3e92-5e61-47b2-982b-40f5c5784e6a"}, "snpName": "Demo Code", "snpContent": "let code = Template.CodeMirror.New(\"Type something...\")\ndiv [ h1 [ htmlText code.Var ]\n      code.Render\n]\n|> RunCode.RunNode().RunHtmlPlusFree", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"b03ba35c-a03c-4bbe-a373-1ce551524e56"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"0aa90429-4e7c-42eb-b108-3dd70e710bf1"}, "snpName": "Demo SplitterBar", "snpContent": "let styleT   p =\n  p |> sprintf \"\"\"\n.SplitterArea {\n    display: grid;\n    grid-template-columns: %f%% auto;\n    grid-template-areas:   \"left right\";\n    background-color: #41414d;\n    color: #444;\n    height: 50px;\n    grid-gap: 9px;\n    padding : 9px;\n}\n\n.SplitterArea > :nth-child(1){  grid-area: left  ; overflow: hidden; background-color: lightgreen; }\n.SplitterArea > :nth-child(2){  grid-area: right ; overflow: hidden; background-color: lightblue ; }\n\n.Splitter { \n    grid-column     :    2      ;\n    grid-row        :  1/2      ;\n    width           :    5px    ; \n    margin-left     : -7.5px    ; \n    border          :    0px    ; \n    padding         :    0px    ;\n    cursor          : col-resize;\n  \tbackground-color: #eef      ; \n}   \"\"\"\n\nlet min        = Template.Input.New(\"25.0\").Prefix(htmlText \"Min:  \")\nlet max        = Template.Input.New(\"75.0\").Prefix(htmlText \"Max:  \")\nlet value      = Template.Input.New(\"40.0\").Prefix(htmlText \"Value:\")\nlet splitter   = Template.SplitterBar.New\n                     .Min(Val.map float min.Var)\n                     .Max(Val.map float max.Var)\n                     .Var(value.Var.Lens (fun s -> float s) (fun prev f -> sprintf \"%f\" <| (f * 10. |> Math.Round |> float ) / 10. ) )\n\nlet bar =\n    div [\n      ``class`` \"SplitterArea\"\n      div    [ htmlText <| Val.map (             sprintf \"LEFT  %f\")  splitter.GetValue ]\n      div    [ htmlText <| Val.map (((-)100.) >>(sprintf \"RIGHT %f\")) splitter.GetValue ]\n      styleH [ htmlText <| Val.map styleT                             splitter.GetValue ]\n      splitter.Render\n    ]\n    \ndiv [\n  bar\n  min  .Render\n  max  .Render\n  value.Render\n]\n|> RunCode.RunNode().AddBootstrap.RunHtmlPlusFree", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}, {"SnippetId" :"70030378-692d-431d-bed9-c839a7f95798"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"a54701f2-1d68-4997-a1ea-62deaeb73e1b"}, "snpName": "", "snpContent": "let snippetName0 (content: string) =\n    content.Split([| '\\n' |], System.StringSplitOptions.RemoveEmptyEntries)\n    |> Seq.map    (fun l -> l.Trim())\n    |> Seq.filter (fun l -> not (l.StartsWith(\"#\") || l.StartsWith(\"[<\")))\n    |> Seq.tryHead\n    |> Option.defaultValue \"<empty>\"\n\n[\n  \"\"\"#if INTERACTIVE\n  #I @\"../WebServer/bin\"\n  #else\n  namespace TestFS\n  #endif\n  #nowarn \"1182\"\n  \"\"\"    \n  |> snippetName0    \n  \"[< hjhj >]\n    let name = \n  \" \n  |> snippetName0\n]\n|> Seq.map (htmlText >> List.singleton >> li)\n|> ul\n|> RunCode.RunNode().ShowHtmlResult", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"4dc58ba1-75d1-4c96-9641-235ee7d8c2c2"}, "snpName": "Test mouse", "snpContent": "//Template.Button.New(\"Run JS\").Style(\"vertical-align:top\").OnClick(fun _ _ -> JS.Eval(\"alert('hello')\") |> ignore).Render\n//|> getStyle\n//|> sprintf \"%A\"\n//|> RunCode.RunNode().ShowResult\nlet panel1 res =\n    Template.Panel.New\n      .Title(Val.map (fun pressed -> if pressed then \"PRESSED\" else \"---\") Input.Mouse.MousePressed)\n      .Header([])\n      .Content([ h3 [ htmlText <| sprintf \"%A\" res ; style \"font-family:monospace;\"] ])\n      .Render\n\n\ndiv [ ``class`` \"container\"\n      panel1 <| 7 * 7\n      div [ ``class`` \"container\"\n            div [ ``class`` \"container\"\n                  panel1 <| 7 * 8\n\n                ]\n          ]\n    ]\n|> RunCode.RunNode().AddBootstrap.RunHtml\n     ", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"5e1dd5fc-a27c-4b0d-821a-06cc8a27bb82"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"74b8570e-dcd4-4dff-87a5-cd7ec96b8527"}, "snpName": "", "snpContent": "[1..10] |> Seq.take 5 |> Seq.toArray\n|> RunCode.RunNode().ShowResult", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"38b21610-7350-4676-993b-88fea844314f"}, "snpName": "", "snpContent": "type Position =\n    | Below\n    | Right\n    | Tab\n    | NewBrowser\n    \nlet positionTxt v =\n    match v with\n    | Below      -> \"Below\"\n    | Right      -> \"Right\"\n    | Tab        -> \"In Tab\"\n    | NewBrowser -> \"New Browser\" \n\nlet position = Var.Create Below \n\nlet inp = Template.Input.New(position.Lens positionTxt (fun prev s -> \n    match s with\n    | \"Below\"        -> Below     \n    | \"Right\"        -> Right     \n    | \"In Tab\"       -> Tab       \n    | \"New Browser\"  -> NewBrowser\n    | _              -> prev\n    ) )\n\ndiv [\n  inp.Render\n  Doc.Select [] positionTxt [ Below ; Right ; Tab ; NewBrowser ] position |> someElt\n]\n|> RunCode.RunNode().RunHtml\n    ", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"7754c074-862e-4550-9d61-ea837adf6d85"}, "snpName": "Regex Pattern matching", "snpContent": "// from: https://github.com/intellifactory/websharper/blob/master/docs/ECMA-262.md\nlet str    = new String(\"Bob likes pineapples.\")\nlet regex  = new RegExp(@\"^\\w+\") // matches the first word\nlet newstr = str.Replace(regex,\"Alice\")\n\nlet (|REGEX|_|) (expr: string) (value: string) =\n    if value = null then None else\n    match String(value).Match expr with\n    | [| m ; _ |]  -> Some m\n    | _            -> None\n    \n    \nlet duple a b = a, b\nlet txt = @\"(6) casa\"\nlet rex = @\"(\\d+)\"\n    \n[ \"JavaScript RegExp:\"\n  sprintf \"String(%A).Match  %A: %A\" txt rex <| String(txt).Match rex\n  sprintf \"Active pattern: %A\" <|\n      match txt with\n      | REGEX rex m -> m\n      | _           -> \"<no match>\"\n]\n//|> List.map  (fun t -> div [ htmlText t ] )\n//|> fun lst -> List.Cons (style \"text-align: left\", lst)  // two different styles\n|> List.map  (htmlText >> List.singleton >> div )\n|> (duple (style \"text-align: left\") >> List.Cons) \n|> RunCode.RunNode().ShowHtmlResult", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"ee8fe0d0-14ad-4ae8-bd77-e0918817d67e"}, "snpName": "Load File", "snpContent": "let fileName = Var.Create \"\"\nlet justFileName (f:string) = f.Split [| '/' ; '\\\\' |] |> Seq.last\n\nTemplate.Input \n    .New(fileName.Lens justFileName (fun prev n -> prev) )\n    .Prefix(\n        label [ \n            ``class`` \"btn btn-primary\" \n            htmlText \"Browse...\" \n            Template.Input.New(fileName).Type(\"file\").Style(\"display: none\")\n              .Content([ on.change (fun el _ -> JS.Alert \"loading \" ) ]) \n              .Render \n        ])\n    .Render\n|> RunCode.RunNode().ShowHtmlResult", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"3d8bf6d2-a66b-4f18-aa83-8e74836e38e4"}, "snpName": "Storage", "snpContent": "let min        = Template.Input.New(\"25.0\").Prefix(htmlText \"Min:  \")\nlet max        = Template.Input.New(\"75.0\").Prefix(htmlText \"Max:  \")\nlet value      = Template.Input.New(\"40.0\").Prefix(htmlText \"Value:\")\n\nlet settingsStorage = JS.Window.LocalStorage\n\nsettingsStorage.GetItem \"CodeEditor.min\"   |> fun v -> if v <> null then min  .Var.Value <- v\nsettingsStorage.GetItem \"CodeEditor.max\"   |> fun v -> if v <> null then max  .Var.Value <- v\nsettingsStorage.GetItem \"CodeEditor.value\" |> fun v -> if v <> null then value.Var.Value <- v\n\nVal.sink (fun v -> settingsStorage.SetItem (\"CodeEditor.min\"  , v)) min  .Var\nVal.sink (fun v -> settingsStorage.SetItem (\"CodeEditor.max\"  , v)) max  .Var\nVal.sink (fun v -> settingsStorage.SetItem (\"CodeEditor.value\", v)) value.Var\n\nlet styleT   p =\n  p |> sprintf \"\"\"\n.SplitterArea {\n    display: grid;\n    grid-template-columns: %f%% auto;\n    grid-template-areas:   \"left right\";\n    background-color: #41414d;\n    color: #444;\n    height: 50px;\n    grid-gap: 9px;\n    padding : 9px;\n}\n\n.SplitterArea > :nth-child(1){  grid-area: left  ; overflow: hidden; background-color: lightgreen; }\n.SplitterArea > :nth-child(2){  grid-area: right ; overflow: hidden; background-color: lightblue ; }\n\n.Splitter { \n    grid-column     :    2      ;\n    grid-row        :  1/2      ;\n    width           :    5px    ; \n    margin-left     : -7.5px    ; \n    border          :    0px    ; \n    padding         :    0px    ;\n    cursor          : col-resize;\n  \tbackground-color: #eef      ; \n}   \"\"\"\n\nlet splitter   = Template.SplitterBar.New\n                     .Min(Val.map float min.Var)\n                     .Max(Val.map float max.Var)\n                     .Var(value.Var.Lens (fun s -> float s) (fun prev f -> sprintf \"%f\" <| (f * 10. |> Math.Round |> float ) / 10. ) )\n\nlet bar =\n    div [\n      ``class`` \"SplitterArea\"\n      div    [ htmlText <| Val.map (             sprintf \"LEFT  %f\")  splitter.GetValue ]\n      div    [ htmlText <| Val.map (((-)100.) >>(sprintf \"RIGHT %f\")) splitter.GetValue ]\n      styleH [ htmlText <| Val.map styleT                             splitter.GetValue ]\n      splitter.Render\n    ]\n    \ndiv [\n  bar\n  min  .Render\n  max  .Render\n  value.Render\n]\n|> RunCode.RunNode().AddBootstrap.RunHtmlPlusFree", "snpParentIdO": {"SnippetId" :"0268626d-d502-4981-a917-df659db5c0b6"}, "snpPredIds": [{"SnippetId" :"29c4d6ae-2bb7-457a-ba64-fcb7cce96a30"}, {"SnippetId" :"70030378-692d-431d-bed9-c839a7f95798"}], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"bc0d0abf-9c94-48bb-b46e-92e5d539b172"}, "snpName": "", "snpContent": "READ ME!\n\n- Organize your code by snippets, keep them all in one place, have them ready to use for small and big projects\n- Run it immediately with almost zero scaffolding\n- Produce JavaScript using Websharper and run it in your browser immediately\n- Use dependencies to assemble your solution\n- Dependencies are equivalent to `#load \"<file.fsx>\"` or include directives\n- Evaluate F# does not return the last value calculated, only what is printed to the output\n", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}, {"snpId": {"SnippetId" :"b4b48226-deb9-44da-98de-e2bf5b7cd889"}, "snpName": "", "snpContent": "\nPENDING:\n- Implement command start: webserver + editor\n- Create splitter template\n- Flush MailBoxProcessor if 5 messages are waiting / or add a button for the same \n- Intellisense\n    - Autocompletion\n    - Code tips\n    - Error highlight\n\n- Change the title and icon so that it says F# Station\n\n- Have non indenting nested elements just for folder organization    \n    - it could be a flag in the name/code\n    - it could be an external attribute, like MIME type/subtype \n    - it could be related to the other type of content considered for the future\n        - Allow non text entries: like images, documents, links(text?) and other resources, maybe using 64 encoding\n        - Allow other modes for some entries: MarkDown, html, etc. \n        - That way different type of content could be integrated into code with different techniques for merging: css, html, javascript, c#, MarkDown and others\n        - Also it could be used as input for some code (although not too clear on how to do this, it may require serving the data as a web file)\n            - To store it in server it would make sense to split the snippets as entry in a DB so the server would not need to read a whole file\n              just to serve a snippet\n            - Some snippet could be generated from others: for instance as js from F#, the snippet maintains the dependence and could also maintain the ages\n              and know when a snippet needs to be regenerated.\n- Create website load/upload/invoke/precompiled code\n- The editor could have dual mode: server DB and local file\n    - For a website definition it would need to track read/write access to snippets\n\n- Eliminate fixit2 hack hardcoded namespace dependency\n\n- Implement Tab(s) & Application deployment including configurable editor(s)\n- Block non local use of Evaluate F# (unless logged in and with permission)\n- add HTTPS\n- add # routing to get to specific snippets\n- Give it a web site look\n\nERROR:\n\nSOLVED:\n- Think how to mix WebSharper and no WebSharper code without duplicating: they can be shared and use #define WEBSHARPER to add [< JavaScript >]\n- Get rid of undefined message when running JS and maybe show possible result value\n- Get rid of no output warning when Evaluating FS and say Done!\n- Store last state in local storage:  splitter position/ execute/ file name/ dirty state\n- Create non-Javascript invocation (pure .Net F#) version for only local use.\n- Capture Asynchronous exceptions\n- Detect dirty state and not allow Load/close before saving\n    - Download ( Save as ...) with automatic extension\n- make Choose File and Load one action and one button\n- Limit undo to the current field\n- Error:\nCompiling...\nRunning...\nFailed!\nTypeError: Cannot read property 'appendChild' of undefined  // it was due to the busy CPU taking longer than 300ms to load. Changed to 600ms.", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpGeneration": 3}], "generation": 1620, "collapsed": [{"SnippetId" :"4b9d8a3e-9910-4c51-8c34-f29782866424"}, {"SnippetId" :"7479dc9d-94cd-4762-a1b8-cf6e09436c3f"}, {"SnippetId" :"7c4a82bc-58cd-48a7-bd7e-79de148a1cf0"}]}