<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>WebSharper.Web</name></assembly>
<members>
<member name="F:WebSharper.ClientSideJson.OptionalFieldKind.ErasedOption">
<summary>
 The field has type Optional&lt;&apos;T&gt;
</summary>
</member>
<member name="F:WebSharper.ClientSideJson.OptionalFieldKind.MarkedOption">
<summary>
 The field has type option&lt;&apos;T&gt; and is marked [&lt;OptionalField&gt;]
</summary>
</member>
<member name="F:WebSharper.ClientSideJson.OptionalFieldKind.NormalOption">
<summary>
 The field has type option&lt;&apos;T&gt;
</summary>
</member>
<member name="F:WebSharper.ClientSideJson.OptionalFieldKind.NotOption">
<summary>
 The field doesn&apos;t have type option&lt;&apos;T&gt;
</summary>
</member>
<member name="M:WebSharper.ClientSideJson.Macro.Internals.getEncoding(System.String,System.Boolean,WebSharper.ClientSideJson.Macro.Parameters,WebSharper.Core.AST.Type)">
<summary>
 Returns None if MacroNeedsResolvedTypeArg.
</summary>
</member>
<member name="M:WebSharper.WebExtensions.ClientSide``1(Microsoft.FSharp.Quotations.FSharpExpr{``0})">
<summary>
 Embed the given client-side control body in a server-side control.
 The client-side control body must be an implicit or explicit quotation expression.
 It can capture local variables, of the same types which are serializable by WebSharper as RPC results.
</summary>
</member>
<member name="P:WebSharper.Web.IUserSession.IsAvailable">
<summary>
 Check whether user sessions are currently available.
</summary>
</member>
<member name="M:WebSharper.Web.IUserSession.Logout">
<summary>
 Log out the current user.
</summary>
</member>
<member name="M:WebSharper.Web.IUserSession.LoginUser(System.String,System.TimeSpan)">
<summary>
 Log in the given user.
 Persist the login across browser sessions for the given amount of time.
</summary>
</member>
<member name="M:WebSharper.Web.IUserSession.LoginUser(System.String,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Log in the given user.
 Set `persistent` to true to persist the login indefinitely across browser sessions.
</summary>
</member>
<member name="M:WebSharper.Web.IUserSession.GetLoggedInUser">
<summary>
 Retrieve the currently logged in user.
</summary>
</member>
<member name="T:WebSharper.Web.IUserSession">
<summary>
 Manages user sessions in a web application.
</summary>
</member>
<member name="F:WebSharper.Web.Context.IsDebug@">
<summary>
 Get or set whether the application is running in debug mode.
</summary>
</member>
<member name="F:WebSharper.Web.Context.GetSetting@">
<summary>
 Get or set runtime configuration settings.
</summary>
</member>
<member name="P:WebSharper.Web.Context.IsDebug(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Boolean})">
<summary>
 Get or set whether the application is running in debug mode.
</summary>
</member>
<member name="P:WebSharper.Web.Context.GetSetting(Microsoft.FSharp.Core.FSharpFunc{System.String,Microsoft.FSharp.Core.FSharpOption{System.String}})">
<summary>
 Get or set runtime configuration settings.
</summary>
</member>
<member name="P:WebSharper.Web.Context.UserSession">
<summary>
 Manage user login sessions.
</summary>
</member>
<member name="P:WebSharper.Web.Context.RootFolder">
<summary>
 The full path to the application&apos;s root folder.
</summary>
</member>
<member name="P:WebSharper.Web.Context.ResourceContext">
<summary>
 WebSharper resource rendering context required for resources.
</summary>
</member>
<member name="P:WebSharper.Web.Context.RequestUri">
<summary>
 The URI of the web request.
</summary>
</member>
<member name="P:WebSharper.Web.Context.Metadata">
<summary>
 WebSharper metadata required for serializing controls.
</summary>
</member>
<member name="P:WebSharper.Web.Context.Json">
<summary>
 The typed JSON provider for interacting with the client.
</summary>
</member>
<member name="P:WebSharper.Web.Context.IsDebug">
<summary>
 Get or set whether the application is running in debug mode.
</summary>
</member>
<member name="P:WebSharper.Web.Context.GetSetting">
<summary>
 Get or set runtime configuration settings.
</summary>
</member>
<member name="P:WebSharper.Web.Context.Environment">
<summary>
 Environment-specific information (e.g. the ASP.NET or OWIN context)
</summary>
</member>
<member name="P:WebSharper.Web.Context.Dependencies">
<summary>
 WebSharper code dependency graph required for looking up resources.
</summary>
</member>
<member name="P:WebSharper.Web.Context.ApplicationPath">
<summary>
 Virtual application root path on the server.
</summary>
</member>
<member name="M:WebSharper.Web.Context.ResolveUrl(System.String)">
<summary>
 Generates a URL respecting the application path.
</summary>
</member>
<member name="T:WebSharper.Web.Context">
<summary>
 Provides context about the web request being replied to.
</summary>
</member>
<member name="T:WebSharper.Web.FSharpInlineControl">
<summary>
 Implements a web control based on a quotation-wrapped top-level body.
 Use the function ClientSide or ctx.ClientSide to create an InlineControl.
</summary>
</member>
<member name="T:WebSharper.Web.Control">
<summary>
 A base class for defining custom ASP.NET controls. Inherit from this class,
 override the Body property and use the new class as a Server ASP.NET
 control in your application.
</summary>
</member>
<member name="T:WebSharper.Web.Require`1">
<summary>
 A server-side control that adds a runtime dependency on a given resource.
</summary>
</member>
<member name="T:WebSharper.Web.Require">
<summary>
 A server-side control that adds a runtime dependency on a given resource.
</summary>
</member>
<member name="M:WebSharper.Web.RemotingExtensions.Server.HandleRequest(WebSharper.Core.Remoting.Server,WebSharper.Core.Remoting.Request,WebSharper.Web.Context)">
<summary>
 Handle a request with the given web context.
</summary>
</member>
<member name="M:WebSharper.Web.Remoting.GetContext">
<summary>
 Retrieve the current web context in an Rpc function.
 Using an AsyncLocal value, it is unique request handling asynchronous flow.
</summary>
</member>
<member name="M:WebSharper.Web.Remoting.DisableCsrfProtection">
<summary>
 Disable Cross-Site Request Forgery protection on RPC calls.
 It is enabled by default.
</summary>
</member>
<member name="M:WebSharper.Web.Remoting.EnableCsrfProtection">
<summary>
 Enable Cross-Site Request Forgery protection on RPC calls.
 It is enabled by default.
</summary>
</member>
<member name="M:WebSharper.Web.Remoting.RemoveAllowedOrigin(System.String)">
<summary>
 Remove an HTTP origin that is allowed to perform RPC calls to this application.
 Does nothing if this origin wasn&apos;t allowed.
 The format is: &quot;http://mydomain.com&quot;
</summary>
</member>
<member name="M:WebSharper.Web.Remoting.AddAllowedOrigin(System.String)">
<summary>
 Add an HTTP origin that is allowed to perform RPC calls to this application.
 Does nothing if this origin was already allowed.
 The format is: &quot;http://mydomain.com&quot;
</summary>
</member>
<member name="M:WebSharper.Web.Remoting.SetAllowedOrigins(System.Collections.Generic.IEnumerable{System.String})">
<summary>
 Set the HTTP origins that are allowed to perform RPC calls to this application.
 The format is: &quot;http://mydomain.com&quot;
</summary>
</member>
</members>
</doc>
