{"snippets": [{"snpId": {"SnippetId" :"0c368c5f-275f-43ac-bc76-dd2d21860dc0"}, "snpName": "F# meets WASM", "snpContent": "[ \"World\" ; \"F#\" ; \"WASM\"]\r\n|> Seq.iter (printfn \"Hello %s!\")", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [["Explanation", "##### Adventures trying to compile F# using WASM.\r\n\r\nThis is a test bed for compiling, translating and running F# code using WASM.\r\n\r\nWASM gets loaded into a WebWorker. You have 2 options:\r\n\r\n- Interp: everything runs interpreted. Faster loads, smaller footprint.\r\n- AOTInterp: The compiler runs compiled (2x to 10x faster). Huge footprint (130MB). Memory hog (1.6GB)\r\nIn some cases performs better on FireFox.\r\n\r\nFor running F# code you have 3 options:\r\n- FSI: use F# interactive, fast compilation.\r\n- Compile & Run :  generates an executable. Runs interpreted.\r\n- Translate & Run JS: translates fast & runs fast. JS runs faster on Chrome.\r\n\r\nTHE FIRST TIME COMPILING/TRANSLATING WILL BE VERY SLOW because several \r\nparts and pieces \r\nare being initialized and only need to happen once.\r\n\r\nType your typical **Hello World** program below and try it.\r\nAlso check other samples on the left:\r\n"]], "snpModified": 1570182854032}, {"snpId": {"SnippetId" :"ebf3dbac-4c61-4885-a853-f8dd6e6d1e70"}, "snpName": "Arithmetic", "snpContent": "((68. - 32.) * 5. / 9.  // fahrenheit to celsius\r\n ,\r\n 20. * 9. / 5. + 32.)    // celsius to fahrenheit\r\n|> printfn \"res = %A\"\r\n", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1613944020940}, {"snpId": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpName": "Library", "snpContent": "", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1614189861031}, {"snpId": {"SnippetId" :"f797c6df-f415-4c3b-8954-f992ac05e7f3"}, "snpName": "print & tee operator", "snpContent": "let (|>!) v f = f v ; v\r\nlet (>>!) g f = g >> fun v -> f v ; v\r\nlet print v   = \r\n    match box v with\r\n    | :? string as s -> printfn \"%s\" s\r\n    | __             -> printfn \"%A\" v\r\n\r\n        ", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614190430123}, {"snpId": {"SnippetId" :"862ce3b9-c3af-479a-a029-5efc9508c1b3"}, "snpName": "String", "snpContent": "type System.String with\r\n    member this.Substring2(from, n) = \r\n        if   n    <= 0           then \"\"\r\n        elif from >= this.Length then \"\"\r\n        elif from <  0           then this.Substring2(0, n + from)\r\n        else this.Substring(from, min n (this.Length - from))\r\n    member this.Left             n  = if n < 0 \r\n                                      then this.Substring2(0, this.Length + n)\r\n                                      else this.Substring2(0, n              )\r\n    member this.Right            n  = this.Substring2(max 0 (this.Length - n), this.Length)\r\n    //member this.toUnderscore        = this |> Seq.mapi(fun i c -> if i > 0 && System.Char.IsUpper(c) then [ '_' ; c ] else [ c ])  |> Seq.collect id |> Seq.toArray |> System.String\r\n\r\n#if WEBSHARPER\r\n//[< WebSharper.Proxy (typeof<string>) ; WebSharper.JavaScript>]\r\n//type StringProxy() =\r\n//    member this.Split(c:char, ?opts:System.StringSplitOptions) = this.Split([| c |], opts)\r\n#endif\r\n\r\nmodule String =\r\n    let splitByChar (c: char) (s: string) = s.Split [| c |]\r\n    let splitInTwoO spl txt = \r\n        let i = (txt:string).IndexOf (spl:string)\r\n        if  i = -1 then None else\r\n        (txt.Left(i), txt.Substring (i + spl.Length) )\r\n        |> Some\r\n    let delimitedO  op cl txt =\r\n        splitInTwoO op txt\r\n        |> Option.bind(fun (bef, sec) ->\r\n            splitInTwoO cl sec\r\n            |> Option.map(fun (mid, aft) -> bef, mid, aft)\r\n        )\r\n    let contains (sub:string)  (whole: string) = whole.Contains sub\r\n    let trim                  (s: string) = s.Trim()\r\n    let left  n (s:string) = s.Left  n\r\n    let right n (s:string) = s.Right n\r\n    let append     (a: string)(b: string) =  a + b\r\n    let skipFirstLine (txt:string) = txt.IndexOf '\\n' |> fun i -> if i < 0 then \"\" else txt.[i + 1..]\r\n    let unindent (s:string) =\r\n        let lines = s.Split [| '\\n' |]\r\n        let n     = lines \r\n                    |> Seq.tryFind (fun l -> l.Trim() <> \"\")\r\n                    |> Option.defaultValue \"\"\r\n                    |> Seq.tryFindIndex ((<>) ' ') \r\n                    |> Option.defaultValue 0\r\n        lines \r\n        |> Seq.map    (fun l -> if l.Length <= n then \"\" else l.Substring n)\r\n        |> Seq.filter (fun s -> s.StartsWith \"# 1 \" |> not)\r\n    let indent n (s:string) =\r\n        s.Split [| '\\n' |]\r\n        |> Seq.map ((+) (String.replicate n \" \"))\r\n    let unindentStr = unindent >> String.concat \"\\n\"\r\n    let indentStr i = indent i >> String.concat \"\\n\" \r\n    let skipLastLine =\r\n           splitByChar '\\n' \r\n        >> fun s -> s.[0 .. (max 0 (s.Length - 2)) ]\r\n        >> String.concat \"\\n\"\r\n    let (|StartsWith|_|) (start:string) (s:string) = if s.StartsWith start then Some s.[start.Length..                          ] else None\r\n    let (|EndsWith  |_|) (ends :string) (s:string) = if s.EndsWith   ends  then Some s.[0           ..s.Length - ends.Length - 1] else None\r\n    let (|WhiteSpace|_|) (s:string) = if s |> Seq.exists (System.Char.IsWhiteSpace >> not) then None else Some()\r\n    \r\n    let thousands n =\r\n        let v = (if n < 0 then -n else n).ToString()\r\n        let r = v.Length % 3 \r\n        let s = if r = 0 then 3 else r\r\n        [   yield v.[0.. s - 1]\r\n            for i in 0..(v.Length - s)/ 3 - 1 do\r\n                yield v.[i * 3 + s .. i * 3 + s + 2]\r\n        ] \r\n        |> String.concat \",\"\r\n        |> fun s -> if n < 0 then \"-\" + s else s\r\n\r\n", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614431912675}, {"snpId": {"SnippetId" :"d01d137e-ecdf-41f3-8b75-12cf3eb6a0da"}, "snpName": "Seq", "snpContent": "module Seq =    \r\n    let rtn = Seq.singleton\r\n    let insertO  vSO              = vSO |> Option.map(Seq.map Some) |> Option.defaultWith(fun () -> rtn None)\r\n    let insertR (vSR:Result<_,_>) = vSR |> function | Error m -> rtn (Error m) | Ok v -> Seq.map Ok v\r\n    let absorbO  vOS              = vOS |> Seq.choose id\r\n    let absorbR  vOS              = vOS |> Seq.choose (function Ok v -> Some v |_-> None)\r\n    let ofOption vO = \r\n        match vO with\r\n        | Some v -> Seq.singleton v\r\n        | None   -> Seq.empty    \r\n\r\n    type SplitByOption = Exclude | IncludeFirst | IncludeSecond\r\n\r\n    let splitBy (f: 'a -> bool) opt (s: 'a seq) = //: 'a seq seq =\r\n        (0, s)\r\n        ||> Seq.mapFold(fun i a -> \r\n            match f a with\r\n            | false         -> Some(a, i    ), i\r\n            | true          ->\r\n            (match opt with\r\n            | Exclude       -> None          \r\n            | IncludeFirst  -> Some(a, i    )\r\n            | IncludeSecond -> Some(a, i + 1) \r\n            ), i + 1\r\n        )\r\n        |> fst\r\n        |> Seq.choose   id\r\n        |> Seq.groupBy snd\r\n        |> Seq.map    (snd >> Seq.map fst)\r\n", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614432886583}, {"snpId": {"SnippetId" :"49a91d29-b98f-4c7d-8d28-0264e3157a05"}, "snpName": "ParseO", "snpContent": "module ParseO =\r\n    let tryParseWith tryParseFunc = tryParseFunc >> function\r\n            | true, v    -> Some v\r\n            | false, _   -> None\r\n\r\n\r\n    /// Javascript adds time zone information when parsing a date and that can change the result\r\n    let parseDateO2  : string -> _ = (fun s -> s + \"T00:00:00\") >> tryParseWith System.DateTime.TryParse\r\n    let parseDateO   : string -> _ = tryParseWith System.DateTime.TryParse\r\n    let parseIntO    : string -> _ = tryParseWith System.Int32   .TryParse\r\n    let parseInt64O  : string -> _ = tryParseWith System.Int64   .TryParse\r\n    let parseSingleO : string -> _ = tryParseWith System.Single  .TryParse\r\n    let parseDoubleO : string -> _ = tryParseWith System.Double  .TryParse\r\n    let parseGuidO   : string -> _ = tryParseWith System.Guid    .TryParse\r\n    // etc.\r\n    \r\n    // active patterns for try-parsing strings\r\n    let (|Date  |_|) = parseDateO\r\n    let (|Int   |_|) = parseIntO\r\n    let (|Int64 |_|) = parseInt64O\r\n    let (|Single|_|) = parseSingleO\r\n    let (|Double|_|) = parseDoubleO\r\n    let (|Guid  |_|) = parseGuidO\r\n    ", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614189924580}, {"snpId": {"SnippetId" :"1671b44d-75a4-40f1-b58c-01bd5602c442"}, "snpName": "TimeIt", "snpContent": "#if WEBSHARPER\r\nopen WebSharper\r\n\r\n[< Inline \"(function (n) { return n.getFullYear() + '-' + ('0'+(n.getMonth()+1)).slice(-2) + '-' +  ('0'+n.getDate()).slice(-2) + ' '+('0'+n.getHours()).slice(-2)+ ':'+('0'+n.getMinutes()).slice(-2)+ ':'+('0'+n.getSeconds()).slice(-2)+ ':'+('00'+n.getMilliseconds()).slice(-3) })(new Date(Date.now()))\" >]\r\n#endif\r\nlet nowStamp() = \r\n    let t = System.DateTime.UtcNow // in two steps to avoid Warning: The value has been copied to ensure the original is not mutated\r\n    t.ToString(\"yyyy-MM-dd HH:mm:ss.fff\", System.Globalization.CultureInfo.InvariantCulture)\r\n\r\nlet inline TimeIt n f p =\r\n    printfn \"%s Starting %s\" (nowStamp()) n\r\n    let start = System.DateTime.UtcNow.Ticks\r\n    let r = f p\r\n    let elapsedSpan = new System.TimeSpan(System.DateTime.UtcNow.Ticks - start)\r\n    printfn \"%s Finished %s %0d:%02d:%02d.%03d\" (nowStamp()) n (int elapsedSpan.TotalHours) elapsedSpan.Minutes elapsedSpan.Seconds elapsedSpan.Milliseconds\r\n    r\r\n\r\n", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614189880062}, {"snpId": {"SnippetId" :"236e9139-b80a-408d-bc6d-8f0dd57e8b8c"}, "snpName": "Memoize", "snpContent": "module Memoize =\r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let getStoreWithDict (cache: System.Collections.Generic.Dictionary<_, _>) =\r\n        let checkO v     = let mutable res = Unchecked.defaultof<_>\r\n                           let ok          = cache.TryGetValue(v, &res)\r\n                           if  ok then Some res else None\r\n        let store  v res = cache.[v] <- res\r\n                           res\r\n        let getOrAdd p f = checkO p |> Option.defaultWith (fun () -> f p |> store p )\r\n        (checkO, getOrAdd), cache.Clear\r\n\r\n    /// creates a Dictionary to store memoized values\r\n    /// returns 3 functions:\r\n    ///    checkO  : ('p->'v option) \r\n    ///    getOrAdd: ('p->('p->'v)->'v) \r\n    ///    clear   : (unit->unit)\r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let getStore() = getStoreWithDict (System.Collections.Generic.Dictionary<_, _>() )\r\n\r\n    /// Memoizes function f using the provided cache\r\n    /// getCache() returns 1 function:\r\n    ///    getOrAdd: ('p->('p->'v)->'v) \r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let memoizeStore (getOrAdd:('key -> ('key -> 'value) -> 'value) ) f =\r\n        fun p -> getOrAdd p f\r\n\r\n\r\n    /// Memoizes the function f using a Dictionary\r\n    /// Returns the memoized function and a clear() function\r\n    /// The dictionary can be reset using the clear() function\r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let memoizeResetable f =\r\n        let (_check, getOrAdd), clear = getStore()\r\n        let memoF = memoizeStore getOrAdd f\r\n        memoF, clear\r\n\r\n    /// Memoizes the function f using the provided Dictionary\r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let memoizeWithDict dict f =\r\n        let (_check, getOrAdd), _clear = getStoreWithDict dict\r\n        let memoF = memoizeStore getOrAdd f\r\n        memoF\r\n\r\n    /// Memoizes the function f and returns Dictionary\r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let memoizeDict f =\r\n        let dict = System.Collections.Generic.Dictionary<_, _>() \r\n        let (_check, getOrAdd), _clear = getStoreWithDict dict\r\n        let memoF = memoizeStore getOrAdd f\r\n        memoF, dict\r\n\r\n    /// Memoizes the function f using a Dictionary\r\n#if WEBSHARPER\r\n    [< WebSharper.Inline >]\r\n#endif\r\n    let memoize f = memoizeResetable f |> fst\r\n\r\n", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613865814465}, {"snpId": {"SnippetId" :"e266d5df-ae47-4e8f-9996-6aff6239163d"}, "snpName": "Regex", "snpContent": "module Regex =\r\n\r\n    type uint = uint32\r\n\r\n    module Types =\r\n\r\n        type Mode =\r\n            | CaseInsensitive\r\n            | Multiline\r\n            | ExplicitCapture\r\n            | IgnoreUnescapedWhiteSpace\r\n\r\n        type GroupReference =\r\n            | Positional    of int\r\n            | Named         of string\r\n\r\n        type Regex =\r\n            // SIMPLE\r\n            | Literal       of string\r\n            | LiteralRegex  of string\r\n\r\n            // Special chars\r\n            | AnyChar\r\n            | Bell\r\n            | Backspace\r\n            | Tab\r\n            | VerticalTab\r\n            | CarriageReturn\r\n            | NewLine\r\n            | Escaped\r\n            | Octal         of uint\r\n            | Hexadecimal   of uint\r\n            | ASCII         of uint\r\n\r\n            // Anchors\r\n            | Start\r\n            | StartOfLine\r\n            | End\r\n            | EndOfLine\r\n            | Boundary\r\n            | NotBoundary\r\n            | AfterMatch\r\n\r\n            // CHAR CLASSES\r\n            | OneOf             of char list\r\n            | OneOfEscaped      of string\r\n            | InRange           of char * char\r\n            | InUnicodeBlock    of string\r\n            | LetterOrDigit\r\n            | WhitespaceChar\r\n            | Digit\r\n\r\n            | NotOneOf          of char list\r\n            | NotOneOfEscaped   of string\r\n            | NotInRange        of char * char\r\n            | NotInUnicodeBlock of string\r\n            | NotLetterOrDigit\r\n            | NotWhitespaceChar\r\n            | NotDigit\r\n\r\n            // GROUPS\r\n\r\n            // Capturing\r\n            | Capturing               of          Regex\r\n            | CapturingWithName       of string * Regex\r\n            | ReferenceTo             of GroupReference\r\n            // Non capturing\r\n            | Grouping                of Regex\r\n            | NonBacktrackingGrouping of Regex\r\n            // Options\r\n            | WithOptions of Mode list * Regex\r\n            // Lookaround\r\n            | LookingAheadFor         of Regex\r\n            | LookingAheadAgainst     of Regex\r\n            | LookingBehindFor        of Regex\r\n            | NotLookingBehindAgainst of Regex\r\n            // Balancing\r\n            | UnCapturing of GroupReference * Regex // Balancing while omitting first arg\r\n            | Balancing of string * GroupReference * Regex\r\n\r\n            // Combination\r\n            | Either   of Regex list\r\n            | Sequence of Regex list\r\n\r\n            // Ternaries\r\n            | If      of          Regex * Regex * Regex\r\n            | IfGroup of GroupReference * Regex * Regex\r\n\r\n            // QUANTIFICATION\r\n            | OneTimeOrNone         of               Regex\r\n            | MoreThanOnce          of               Regex\r\n            | ManyTimesOrNone       of               Regex\r\n            | Exactly               of uint *        Regex\r\n            | AtLeast               of uint *        Regex\r\n            | Between               of uint * uint * Regex\r\n\r\n            | OneTimeOrNoneLazily   of               Regex\r\n            | MoreThanOnceLazily    of               Regex\r\n            | ManyTimesOrNoneLazily of               Regex\r\n            | ExactlyLazily         of uint *        Regex\r\n            | AtLeastLazily         of uint *        Regex\r\n            | BetweenLazily         of uint * uint * Regex\r\n            with\r\n                static member (+) (first, second) =\r\n                    match first, second with\r\n                    | (Sequence list1, Sequence list2) -> Sequence(list1 @ list2)\r\n                    | (Sequence list1, secondRegex) -> Sequence(list1 @ [secondRegex])\r\n                    | (firstRegex, Sequence list2) -> Sequence(firstRegex :: list2)\r\n                    | (firstRegex, secondRegex) -> Sequence([firstRegex; secondRegex])\r\n                static member (+) (first, second) =         first + Literal second\r\n                static member (+) (first, second) = Literal first +         second\r\n\r\n                static member (/) (first, second) =\r\n                    match first, second with\r\n                    | (Either list1, Either list2) -> Either(list1 @ list2)\r\n                    | (Either list, regex) -> Either(list @ [regex])\r\n                    | (regex, Either list) -> Either(regex :: list)\r\n                    | (firstRegex, secondRegex) -> Either([firstRegex; secondRegex])\r\n                static member (/) (first:Regex, second      ) =         first / Literal second\r\n                static member (/) (first      , second:Regex) = Literal first /         second\r\n\r\n\r\n    module Functions =\r\n\r\n        open System.Text\r\n        open Types\r\n\r\n        // Evaluation\r\n\r\n#if WEBSHARPER\r\n        [< WebSharper.Inline @\"$s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\" >]\r\n#endif\r\n        let escape s = (RegularExpressions.Regex.Escape s).Replace(\"]\", \"\\]\")\r\n\r\n        let modeChar = function\r\n            | CaseInsensitive -> 'i'\r\n            | Multiline -> 'm'\r\n            | ExplicitCapture -> 'n'\r\n            | IgnoreUnescapedWhiteSpace -> 'x'\r\n\r\n        let referenceString = function\r\n            | Positional number -> number |> string |> escape\r\n            | Named      string -> string           |> escape\r\n\r\n        let quantifiable regex =\r\n            match regex with\r\n            | Sequence _ | Either _ -> Grouping regex\r\n            | _ -> regex\r\n\r\n        let rec evaluate = function\r\n            | Literal string  -> escape string\r\n            | LiteralRegex rx -> rx\r\n            \r\n            | AnyChar         -> @\".\"\r\n            | Bell            -> @\"\\a\"\r\n            | Backspace       -> @\"\\b\"\r\n            | Tab             -> @\"\\t\"\r\n            | VerticalTab     -> @\"\\v\"\r\n            | CarriageReturn  -> @\"\\r\"\r\n            | NewLine         -> @\"\\n\"\r\n            | Escaped         -> @\"\\e\"\r\n            | Octal oct       -> sprintf @\"\\%s\"  (string oct  )\r\n            | Hexadecimal hex -> sprintf @\"\\x%s\" (string hex  )\r\n            | ASCII ascii     -> sprintf @\"\\u%s\" (string ascii)\r\n\r\n            // Anchors\r\n            | Start         -> @\"\\A\"\r\n            | StartOfLine   -> @\"^\"\r\n            | End           -> @\"\\z\"\r\n            | EndOfLine     -> @\"$\"\r\n            | Boundary      -> @\"\\b\"\r\n            | NotBoundary   -> @\"\\B\"\r\n            | AfterMatch    -> @\"\\G\"\r\n\r\n            // CHAR CLASSES\r\n            | OneOf chars          ->\r\n                                      let string = new string(chars |> List.toArray) |> escape\r\n                                      sprintf @\"[%s]\" string\r\n            | OneOfEscaped  string -> sprintf @\"[%s]\" string\r\n            | InRange (first,last) -> sprintf @\"[%s-%s]\" (string first |> escape) (string last |> escape)\r\n            | InUnicodeBlock block -> sprintf @\"\\p{{%s}}\" (block)\r\n            | LetterOrDigit        -> @\"\\w\"\r\n            | WhitespaceChar       -> @\"\\s\"\r\n            | Digit                -> @\"\\d\"\r\n\r\n            | NotOneOf chars           ->\r\n                                          let string = new string(chars |> List.toArray) |> escape\r\n                                          sprintf @\"[^%s]\" (string)\r\n            | NotOneOfEscaped   string -> sprintf @\"[^%s]\" string\r\n            | NotInRange (first, last) -> sprintf @\"[^%s-%s]\" (string first |> escape) (string last |> escape)\r\n            | NotInUnicodeBlock block  -> sprintf @\"\\P{{%s}}\" (block)\r\n            | NotLetterOrDigit         -> @\"\\W\"\r\n            | NotWhitespaceChar        -> @\"\\S\"\r\n            | NotDigit                 -> @\"\\D\"\r\n\r\n            // Capturing\r\n            | Capturing                regex  -> sprintf @\"(%s)\" (regex |> evaluate)\r\n            | CapturingWithName (name, regex) -> sprintf @\"(?<%s>%s)\" (name) (regex |> evaluate)\r\n            | ReferenceTo reference ->\r\n                match reference with\r\n                | Positional number -> sprintf @\"\\%s\" (number |> string |> escape)\r\n                | Named string -> sprintf @\"\\k<%s>\" (string |> escape)\r\n            // Non capturing\r\n            | Grouping regex -> sprintf @\"(?:%s)\" (regex |> evaluate)\r\n            | NonBacktrackingGrouping regex -> sprintf @\"(?>%s)\" (regex |> evaluate)\r\n            // Options\r\n            | WithOptions (modes, regex) ->\r\n                let modeList = modes |> List.map (modeChar>>string) |> String.concat \"\"\r\n                sprintf @\"(?%s:%s)\" (modeList) (regex |> evaluate)\r\n            // Lookaround\r\n            | LookingAheadFor regex -> sprintf @\"(?=%s)\" (regex |> evaluate)\r\n            | LookingAheadAgainst regex -> sprintf @\"(?!%s)\" (regex |> evaluate)\r\n            | LookingBehindFor regex -> sprintf @\"(?<=%s)\" (regex |> evaluate)\r\n            | NotLookingBehindAgainst regex -> sprintf @\"(?<!%s)\" (regex |> evaluate)\r\n\r\n            // Balancing\r\n            | UnCapturing        (reference, regex) -> sprintf @\"(?<-%s>%s)\" (reference |>referenceString) (regex |> evaluate)\r\n            | Balancing (newName, reference, regex) -> sprintf @\"(?<%s-%s>%s)\" (newName |> escape) (reference |>referenceString) (regex |> evaluate)\r\n\r\n            // Combination\r\n            | Either   regexs -> regexs |> List.map evaluate |> String.concat \"|\"\r\n            | Sequence regexs -> regexs |> List.map evaluate |> String.concat \"\"\r\n\r\n            // Ternaries\r\n            | If      (condition,yes,no) -> sprintf @\"(?(%s)%s|%s)\" (condition |> evaluate) (yes |> evaluate) (no |> evaluate)\r\n            | IfGroup (reference,yes,no) -> sprintf @\"(?(%s)%s|%s)\" (reference |> referenceString) (yes |> evaluate) (no |> evaluate)\r\n\r\n            // QUANTIFICATION\r\n            | OneTimeOrNone          regex  -> sprintf @\"%s?\"          (regex |> quantifiable |> evaluate)\r\n            | MoreThanOnce           regex  -> sprintf @\"%s+\"          (regex |> quantifiable |> evaluate)\r\n            | ManyTimesOrNone        regex  -> sprintf @\"%s*\"          (regex |> quantifiable |> evaluate)\r\n            | Exactly       (amount ,regex) -> sprintf @\"%s{%s}\"       (regex |> quantifiable |> evaluate) (string amount)\r\n            | AtLeast       (amount ,regex) -> sprintf @\"%s{%s,}\"      (regex |> quantifiable |> evaluate) (string amount)\r\n            | Between       (min,max,regex) -> sprintf @\"%s{%s,%s}\"    (regex |> quantifiable |> evaluate) (string min) (string max)\r\n\r\n            | OneTimeOrNoneLazily    regex  -> sprintf @\"%s??\"         (regex |> quantifiable |> evaluate)\r\n            | MoreThanOnceLazily     regex  -> sprintf @\"%s+?\"         (regex |> quantifiable |> evaluate)\r\n            | ManyTimesOrNoneLazily  regex  -> sprintf @\"%s*?\"         (regex |> quantifiable |> evaluate)\r\n            | ExactlyLazily (amount, regex) -> sprintf @\"%s{%s}?\"      (regex |> quantifiable |> evaluate) (string amount)\r\n            | AtLeastLazily (amount, regex) -> sprintf @\"%s{%s,}?\"     (regex |> quantifiable |> evaluate) (string amount)\r\n            | BetweenLazily (min,max,regex) -> sprintf @\"%s{%s,%s}?\"   (regex |> quantifiable |> evaluate) (string min) (string max)\r\n\r\n        let evaluatememo = Memoize.memoize evaluate\r\n\r\n        let (|Regex|_|) pattern input =\r\n            if input = null then None else\r\n            try \r\n                let patt = evaluatememo pattern\r\n#if WEBSHARPER\r\n                if WebSharper.Pervasives.IsClient then\r\n                    match WebSharper.JavaScript.String(input).Match(WebSharper.JavaScript.RegExp(patt, \"\")) with\r\n                    | null         -> None\r\n                    | [| |]        -> None\r\n                    | m            -> Some (Seq.tail m |> Seq.toList)\r\n                else\r\n#endif                \r\n                let m = RegularExpressions.Regex.Match(input, patt)\r\n                if m.Success then Some(List.tail [ for g in m.Groups -> g.Value ])\r\n                else None\r\n            with e -> None\r\n\r\n        let (|Regexs|) pattern input =\r\n            if input = null then [| |] else\r\n            try \r\n                let patt = evaluatememo pattern\r\n#if WEBSHARPER\r\n                if WebSharper.Pervasives.IsClient then\r\n                    match WebSharper.JavaScript.String(input).Match(WebSharper.JavaScript.RegExp(patt, \"g\")) with\r\n                    | null         -> [| |]\r\n                    | [| |]        -> [| |]\r\n                    | m            -> m |> Array.map List.singleton // not correctly implemented, should do a Regex for each\r\n                else\r\n#endif                \r\n                let ms = RegularExpressions.Regex.Matches(input, patt)\r\n                [| for m in ms do yield (List.tail [ for g in m.Groups -> g.Value ]) |] \r\n            with e -> [| |]\r\n\r\n", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [{"SnippetId" :"236e9139-b80a-408d-bc6d-8f0dd57e8b8c"}], "snpProperties": [], "snpModified": 1614431147284}, {"snpId": {"SnippetId" :"6468e983-68d9-4bf9-b99f-f67214e320fe"}, "snpName": "Bitwise52bit", "snpContent": "module Bitwise52bit =\r\n    let bitwise52bit       = 1000000000000L &&& 1000000000000L = 1000000000000L\r\n    let div31bit           = 2147483648L\r\n    let inline maskLower v = (div31bit - 1L) &&& v\r\n\r\n\r\n//    let And =\r\n\r\n    let And0 (a:int64) (b:int64) =\r\n        if a > 0L && b > 0L && a < div31bit && b < div31bit then a &&& b else\r\n        (((a / div31bit) &&& (b / div31bit)) * div31bit)\r\n        + (maskLower a &&& maskLower b )\r\n\r\n    let Or0 (a:int64) (b:int64) =\r\n        if a > 0L && b > 0L && a < div31bit && b < div31bit then a ||| b else\r\n        (((a / div31bit) ||| (b / div31bit)) * div31bit)\r\n        + (maskLower a ||| maskLower b )\r\n\r\n    let Xor0 (a:int64) (b:int64) = \r\n        if a > 0L && b > 0L && a < div31bit && b < div31bit then a ^^^ b else\r\n        (((a / div31bit) ^^^ (b / div31bit)) * div31bit)\r\n        + (maskLower a   ^^^ maskLower b )\r\n\r\n    let And : int64 -> int64 -> int64 = \r\n        if bitwise52bit then \r\n            (fun (a:int64) (b:int64) -> a &&& b)\r\n        else And0\r\n\r\n    let Or : int64 -> int64 -> int64 = \r\n        if bitwise52bit then \r\n            (fun (a:int64) (b:int64) -> a ||| b)\r\n        else Or0\r\n\r\n    let Xor : int64 -> int64 -> int64 = \r\n        if bitwise52bit then \r\n            (fun (a:int64) (b:int64) -> a ^^^ b)\r\n        else Xor0\r\n\r\n    let verifyBitWise52() =\r\n        bitwise52bit \r\n        , And0 1000000000000L 1000000000000L = 1000000000000L\r\n        , Or0  1000000000000L  100000000000L = 1098923898880L\r\n        , Xor0  100000000000L 1110000000000L = 1190667564032L\r\n\r\n    //verifyBitWise52() |> printfn \"%A\"", "snpParentIdO": {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614457684799}, {"snpId": {"SnippetId" :"ac14f1f3-d220-4669-9c70-a33117a7ccf7"}, "snpName": "Fibonacci", "snpContent": "let rec fibo = function\n    | 0 | 1 -> 1\n    | n -> fibo (n - 2) + fibo (n - 1)\n\nlet printFibo n = printfn \"fibo(%d) = %i\" n (fibo n)\n\nlet doFibos args =\n    args\n    |> Array.choose ParseO.parseIntO\n    |> Array.iter   printFibo\n\n\"data 1 10 20 30 40\".Split [|' '|] \n|> TimeIt \"doFibos\" doFibos\n", "snpParentIdO": null, "snpPredIds": [{"SnippetId" :"1671b44d-75a4-40f1-b58c-01bd5602c442"}, {"SnippetId" :"49a91d29-b98f-4c7d-8d28-0264e3157a05"}], "snpProperties": [["Explanation", "This one shows how slow interpreted .Net can be:\r\n\r\n| | |\r\n|----------|-------------|\r\n| **Run** (before)    | `Finished doFibos 0:01:51.502` |\r\n| **Run**    | `Finished doFibos 0:00:33.664` |\r\n| **Run JS** | `Finished doFibos 0:00:02.816` |\r\n| native | `Finished doFibos 0:00:01.201` |\r\n<br>\r\n\r\nNOTE: Even on AOTInterp mode, compiled code runs interpreted so expect it to be slow."]], "snpModified": 1584392743467}, {"snpId": {"SnippetId" :"41acae2a-1310-4ab4-8ff0-bd4160a79c98"}, "snpName": "Fibonacci memoized", "snpContent": "//open Microsoft.FSharp.Core.Operators.Checked <- to check overflow\r\n\r\nlet rec fibo = function\r\n    | 0L | 1L -> 1L\r\n    | n -> fiboM (n - 2L) + fiboM (n - 1L)\r\n\r\nand fiboM = Memoize.memoize fibo \r\n\r\nlet printFibo n = printfn \"fibo(%d) = %d\" n (fibo n)\r\n\r\nlet doFibos args =\r\n    args\r\n    |> Array.choose ParseO.parseInt64O\r\n    |> Array.iter   printFibo\r\n\r\n\"data 1 10 20 30 78 92 1000\".Split [|' '|] \r\n|> TimeIt \"doFibos\" doFibos\r\n", "snpParentIdO": null, "snpPredIds": [{"SnippetId" :"1671b44d-75a4-40f1-b58c-01bd5602c442"}, {"SnippetId" :"236e9139-b80a-408d-bc6d-8f0dd57e8b8c"}, {"SnippetId" :"49a91d29-b98f-4c7d-8d28-0264e3157a05"}], "snpProperties": [["Explanation", "When memoized fibo becomes very fast!\r\n\r\n- Regular_ `fibos` with `1 10 20 30 40` takes less about 3 seconds\r\n- Regular_ `fibos` with `1 10 20 30 45` takes less about 40 seconds\r\n- Memoized `fibos` with `1 10 20 30 1000` takes only a few milliseconds\r\n\r\n#### Note:\r\n\r\n- **FSI** shows that\r\nfibo(92) = -6246583658587674878, that is of course wrong. By default \r\narithmetic operators do not check for overflow. (see commented line)\r\n- **Run JS** shows fibo(78) = 14472334024676220, close but \r\nwrong (correct is 14472334024676221). JavaScript uses 64 bits floating point notation\r\nwhich has precision for 52 bits.\r\n\r\nCheck **bigint** implementation for correct values.\r\n\r\n\r\n"]], "snpModified": 1613258683615}, {"snpId": {"SnippetId" :"ce2492d8-8656-4f4c-92bf-cabda22467de"}, "snpName": "Fibonacci bigint", "snpContent": "open System.Numerics\r\n\r\nlet rec fibo = function\r\n    | n when n <= (bigint 1) -> bigint 1\r\n    | n -> fiboM (n - bigint 2) + fiboM (n - bigint 1)\r\n\r\nand fiboM = Memoize.memoize fibo \r\n\r\nlet printFibo (n:int) = printfn \"fibo(%d) = %A\" n (fibo (bigint n) )\r\n\r\nlet doFibos args =\r\n    args\r\n    |> Array.choose ParseO.parseIntO\r\n    |> Array.iter   printFibo\r\n\r\n\"data 1 10 20 30 78 92 1000\".Split [|' '|] \r\n|> TimeIt \"doFibos\" doFibos\r\n", "snpParentIdO": null, "snpPredIds": [{"SnippetId" :"1671b44d-75a4-40f1-b58c-01bd5602c442"}, {"SnippetId" :"236e9139-b80a-408d-bc6d-8f0dd57e8b8c"}, {"SnippetId" :"49a91d29-b98f-4c7d-8d28-0264e3157a05"}], "snpProperties": [], "snpModified": 1614556312765}, {"snpId": {"SnippetId" :"a2ffc7f6-f86e-46bb-8882-29d97b3fd4f9"}, "snpName": "Advent of Code 2018", "snpContent": "", "snpParentIdO": null, "snpPredIds": [{"SnippetId" :"f797c6df-f415-4c3b-8954-f992ac05e7f3"}], "snpProperties": [["Explanation", "Just some code from the [Advent of code 2018](https://adventofcode.com/2018/day/1)"]], "snpModified": 1570183121660}, {"snpId": {"SnippetId" :"b7ddad62-84cf-4a16-96f3-96150595f711"}, "snpName": "Inputs", "snpContent": "", "snpParentIdO": {"SnippetId" :"a2ffc7f6-f86e-46bb-8882-29d97b3fd4f9"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614449271823}, {"snpId": {"SnippetId" :"36188330-ff74-4951-9bc2-f34015a96fbc"}, "snpName": "Day 1 Input", "snpContent": "let input1 = [|\r\n    +3\r\n    +15\r\n    -1\r\n    -18\r\n    +3\r\n    -10\r\n    +3\r\n    +10\r\n    -8\r\n    -20\r\n    +13\r\n    +11\r\n    -21\r\n    -10\r\n    -16\r\n    -2\r\n    -6\r\n    +19\r\n    -8\r\n    +12\r\n    -13\r\n    +4\r\n    -9\r\n    -20\r\n    +12\r\n    +15\r\n    -17\r\n    -18\r\n    +11\r\n    -17\r\n    -9\r\n    -12\r\n    -9\r\n    +3\r\n    +9\r\n    -6\r\n    +18\r\n    +16\r\n    +9\r\n    -11\r\n    -1\r\n    +8\r\n    -20\r\n    +17\r\n    -3\r\n    -16\r\n    -7\r\n    +10\r\n    +6\r\n    +3\r\n    +15\r\n    +3\r\n    -2\r\n    +9\r\n    -8\r\n    -6\r\n    +11\r\n    +5\r\n    +24\r\n    +10\r\n    +4\r\n    -8\r\n    +2\r\n    +13\r\n    -16\r\n    +13\r\n    -16\r\n    +11\r\n    +7\r\n    -9\r\n    -13\r\n    -12\r\n    +17\r\n    -4\r\n    -5\r\n    -1\r\n    +16\r\n    +22\r\n    +8\r\n    +12\r\n    +9\r\n    +2\r\n    -3\r\n    -5\r\n    +12\r\n    +4\r\n    +4\r\n    +8\r\n    +18\r\n    +9\r\n    -14\r\n    -11\r\n    -5\r\n    -11\r\n    +15\r\n    -18\r\n    -7\r\n    -12\r\n    +1\r\n    +5\r\n    -18\r\n    +14\r\n    -13\r\n    -10\r\n    +17\r\n    +8\r\n    +11\r\n    -12\r\n    +20\r\n    -16\r\n    +22\r\n    +5\r\n    +1\r\n    -9\r\n    +16\r\n    +13\r\n    +6\r\n    +5\r\n    +7\r\n    -4\r\n    -4\r\n    -7\r\n    +16\r\n    +4\r\n    -1\r\n    -15\r\n    -11\r\n    +19\r\n    +9\r\n    +17\r\n    -15\r\n    +21\r\n    -7\r\n    +4\r\n    -16\r\n    -3\r\n    -9\r\n    +4\r\n    +11\r\n    +12\r\n    +11\r\n    +7\r\n    +12\r\n    +14\r\n    -6\r\n    -1\r\n    -18\r\n    -3\r\n    -13\r\n    +4\r\n    +10\r\n    -15\r\n    -10\r\n    -8\r\n    +15\r\n    +15\r\n    +19\r\n    +16\r\n    -3\r\n    -14\r\n    +13\r\n    +16\r\n    +1\r\n    +10\r\n    +9\r\n    +7\r\n    -11\r\n    -19\r\n    +2\r\n    -3\r\n    +10\r\n    -2\r\n    +13\r\n    -19\r\n    -7\r\n    +3\r\n    +18\r\n    +1\r\n    +9\r\n    +2\r\n    +12\r\n    -13\r\n    -9\r\n    -7\r\n    -15\r\n    -18\r\n    -6\r\n    -1\r\n    -8\r\n    -12\r\n    +19\r\n    -1\r\n    -14\r\n    -6\r\n    -16\r\n    -4\r\n    +1\r\n    +4\r\n    -22\r\n    -19\r\n    -2\r\n    +4\r\n    +18\r\n    -8\r\n    -19\r\n    -16\r\n    +6\r\n    +16\r\n    -7\r\n    +4\r\n    +8\r\n    -20\r\n    -11\r\n    -11\r\n    +20\r\n    +15\r\n    +19\r\n    +30\r\n    +19\r\n    +19\r\n    -11\r\n    -18\r\n    +4\r\n    +1\r\n    +21\r\n    -9\r\n    -9\r\n    +12\r\n    +18\r\n    -1\r\n    -6\r\n    +12\r\n    +16\r\n    +12\r\n    +3\r\n    +1\r\n    -9\r\n    -15\r\n    -15\r\n    -1\r\n    -1\r\n    -18\r\n    -32\r\n    -11\r\n    -17\r\n    -20\r\n    +4\r\n    +14\r\n    -1\r\n    +16\r\n    +20\r\n    +53\r\n    +19\r\n    +16\r\n    +14\r\n    +14\r\n    +6\r\n    -8\r\n    +14\r\n    -17\r\n    -5\r\n    +3\r\n    +14\r\n    -3\r\n    -15\r\n    -10\r\n    -19\r\n    +17\r\n    +3\r\n    +17\r\n    +5\r\n    +14\r\n    -7\r\n    +5\r\n    +14\r\n    +18\r\n    -2\r\n    -19\r\n    +8\r\n    +10\r\n    +15\r\n    -6\r\n    +13\r\n    -11\r\n    +19\r\n    +10\r\n    -15\r\n    -15\r\n    +2\r\n    -4\r\n    -3\r\n    +11\r\n    +2\r\n    +18\r\n    +3\r\n    +17\r\n    +9\r\n    -16\r\n    -8\r\n    +6\r\n    +15\r\n    -11\r\n    -3\r\n    +20\r\n    -1\r\n    +12\r\n    +1\r\n    +8\r\n    +11\r\n    -8\r\n    +6\r\n    +7\r\n    +17\r\n    -12\r\n    +13\r\n    -8\r\n    +16\r\n    +15\r\n    -8\r\n    -12\r\n    +7\r\n    -12\r\n    -18\r\n    +5\r\n    +5\r\n    +7\r\n    -8\r\n    +6\r\n    -4\r\n    -15\r\n    +17\r\n    -15\r\n    -10\r\n    -1\r\n    +17\r\n    +18\r\n    -21\r\n    -19\r\n    -9\r\n    +19\r\n    +16\r\n    +18\r\n    -5\r\n    -15\r\n    +19\r\n    -11\r\n    +10\r\n    +9\r\n    -1\r\n    +4\r\n    +4\r\n    +9\r\n    -5\r\n    +20\r\n    +4\r\n    -18\r\n    +17\r\n    +12\r\n    -18\r\n    +14\r\n    -21\r\n    -15\r\n    -5\r\n    -18\r\n    -17\r\n    -19\r\n    +11\r\n    +12\r\n    -20\r\n    -19\r\n    +12\r\n    -9\r\n    +8\r\n    -1\r\n    -22\r\n    +4\r\n    +15\r\n    +14\r\n    +9\r\n    -10\r\n    -26\r\n    -22\r\n    -10\r\n    +7\r\n    +9\r\n    -1\r\n    -16\r\n    -21\r\n    -18\r\n    +8\r\n    +6\r\n    +18\r\n    +1\r\n    +5\r\n    +11\r\n    +18\r\n    +6\r\n    +20\r\n    -7\r\n    -10\r\n    -5\r\n    +33\r\n    -21\r\n    -8\r\n    -13\r\n    -5\r\n    +7\r\n    +1\r\n    -7\r\n    -39\r\n    -14\r\n    -12\r\n    +16\r\n    -14\r\n    -15\r\n    +4\r\n    +2\r\n    +12\r\n    -11\r\n    +16\r\n    +8\r\n    +15\r\n    -1\r\n    +21\r\n    -5\r\n    +13\r\n    -18\r\n    -7\r\n    +2\r\n    -15\r\n    +19\r\n    +8\r\n    +26\r\n    -24\r\n    +37\r\n    +59\r\n    +21\r\n    -19\r\n    +18\r\n    +6\r\n    -11\r\n    +15\r\n    -2\r\n    +5\r\n    -2\r\n    +20\r\n    +8\r\n    +2\r\n    -7\r\n    +18\r\n    -8\r\n    -1\r\n    -8\r\n    +3\r\n    +17\r\n    +12\r\n    +18\r\n    +2\r\n    -8\r\n    +3\r\n    +40\r\n    +3\r\n    +21\r\n    +5\r\n    -1\r\n    +15\r\n    +2\r\n    +16\r\n    -50\r\n    +15\r\n    +5\r\n    +21\r\n    -31\r\n    -17\r\n    -15\r\n    -10\r\n    -9\r\n    -2\r\n    -18\r\n    -14\r\n    +7\r\n    -14\r\n    +6\r\n    -20\r\n    -8\r\n    +13\r\n    -27\r\n    +8\r\n    +2\r\n    -16\r\n    +3\r\n    -7\r\n    -6\r\n    +23\r\n    +31\r\n    +52\r\n    -6\r\n    -1\r\n    +2\r\n    -54\r\n    -42\r\n    -6\r\n    +18\r\n    +2\r\n    +1\r\n    -29\r\n    +36\r\n    -42\r\n    +7\r\n    -146\r\n    -2\r\n    -14\r\n    -13\r\n    +19\r\n    -8\r\n    +19\r\n    -15\r\n    -18\r\n    -4\r\n    -18\r\n    -1\r\n    +2\r\n    -3\r\n    +11\r\n    -16\r\n    -23\r\n    -9\r\n    -30\r\n    -31\r\n    +58\r\n    +18\r\n    -19\r\n    +45\r\n    +11\r\n    +14\r\n    -16\r\n    +19\r\n    -10\r\n    +17\r\n    +12\r\n    -2\r\n    -8\r\n    +19\r\n    -50\r\n    +8\r\n    -114\r\n    -40\r\n    -62\r\n    -153\r\n    -60\r\n    +12\r\n    -23\r\n    -40\r\n    -87\r\n    +377\r\n    -79652\r\n    -12\r\n    +1\r\n    -9\r\n    -5\r\n    -12\r\n    -14\r\n    +9\r\n    -3\r\n    -2\r\n    +8\r\n    -15\r\n    -18\r\n    +19\r\n    -6\r\n    +4\r\n    -14\r\n    -2\r\n    -18\r\n    -19\r\n    -8\r\n    +2\r\n    +11\r\n    -19\r\n    -11\r\n    +5\r\n    -3\r\n    +4\r\n    +1\r\n    -3\r\n    +9\r\n    +7\r\n    +15\r\n    -9\r\n    -2\r\n    -6\r\n    +3\r\n    +2\r\n    +10\r\n    +9\r\n    +3\r\n    -5\r\n    -4\r\n    +12\r\n    +15\r\n    -6\r\n    -11\r\n    -9\r\n    -15\r\n    +9\r\n    -19\r\n    -15\r\n    +4\r\n    +7\r\n    +7\r\n    -16\r\n    +15\r\n    -4\r\n    -19\r\n    -8\r\n    -11\r\n    -18\r\n    -14\r\n    -18\r\n    -16\r\n    +5\r\n    +5\r\n    +12\r\n    -9\r\n    -16\r\n    +2\r\n    -6\r\n    -2\r\n    +20\r\n    -13\r\n    -9\r\n    -16\r\n    +4\r\n    -1\r\n    +2\r\n    -3\r\n    -17\r\n    -2\r\n    -11\r\n    +1\r\n    +6\r\n    +17\r\n    -4\r\n    -15\r\n    -3\r\n    -19\r\n    +6\r\n    -16\r\n    -18\r\n    -6\r\n    +2\r\n    +12\r\n    -9\r\n    +6\r\n    +7\r\n    -6\r\n    +7\r\n    -9\r\n    -18\r\n    -3\r\n    +10\r\n    -17\r\n    +11\r\n    +16\r\n    +16\r\n    +6\r\n    +13\r\n    -17\r\n    +2\r\n    +3\r\n    +17\r\n    -10\r\n    +8\r\n    -1\r\n    -9\r\n    -15\r\n    +11\r\n    +2\r\n    -14\r\n    +7\r\n    -12\r\n    -19\r\n    -3\r\n    -7\r\n    -7\r\n    -15\r\n    -17\r\n    +5\r\n    +3\r\n    +14\r\n    +6\r\n    -5\r\n    +17\r\n    -9\r\n    -5\r\n    +1\r\n    -8\r\n    -13\r\n    +7\r\n    +17\r\n    -12\r\n    -14\r\n    -18\r\n    +10\r\n    +16\r\n    -3\r\n    -19\r\n    +7\r\n    +14\r\n    +14\r\n    +11\r\n    -1\r\n    +18\r\n    -16\r\n    -4\r\n    +10\r\n    -14\r\n    +9\r\n    -17\r\n    -1\r\n    +4\r\n    -14\r\n    -16\r\n    +1\r\n    -14\r\n    -7\r\n    +1\r\n    +7\r\n    -11\r\n    -4\r\n    -14\r\n    +19\r\n    -11\r\n    +8\r\n    +14\r\n    +8\r\n    -15\r\n    -18\r\n    +2\r\n    -17\r\n    -19\r\n    +13\r\n    +3\r\n    +6\r\n    +8\r\n    -10\r\n    +7\r\n    -3\r\n    -9\r\n    +8\r\n    +12\r\n    -4\r\n    +15\r\n    +7\r\n    +10\r\n    +11\r\n    -10\r\n    -20\r\n    -16\r\n    +11\r\n    -1\r\n    -21\r\n    -13\r\n    -19\r\n    -15\r\n    -15\r\n    -7\r\n    +10\r\n    +19\r\n    -17\r\n    -6\r\n    -10\r\n    -13\r\n    +12\r\n    -18\r\n    +16\r\n    +10\r\n    -13\r\n    +12\r\n    -1\r\n    +12\r\n    +12\r\n    +10\r\n    +16\r\n    -18\r\n    -5\r\n    -10\r\n    -13\r\n    -7\r\n    +19\r\n    +14\r\n    +18\r\n    -2\r\n    -4\r\n    -13\r\n    +14\r\n    +18\r\n    -7\r\n    +11\r\n    -13\r\n    -21\r\n    -12\r\n    +14\r\n    +16\r\n    +7\r\n    -19\r\n    +16\r\n    +7\r\n    +2\r\n    -5\r\n    +1\r\n    +19\r\n    +16\r\n    +14\r\n    +9\r\n    +12\r\n    +14\r\n    -8\r\n    -28\r\n    +13\r\n    +11\r\n    +13\r\n    -17\r\n    -21\r\n    +15\r\n    -37\r\n    -11\r\n    +19\r\n    +1\r\n    +8\r\n    +12\r\n    -1\r\n    -27\r\n    -21\r\n    -19\r\n    -21\r\n    +15\r\n    -24\r\n    -7\r\n    -11\r\n    -17\r\n    -15\r\n    -11\r\n    -11\r\n    +8\r\n    -9\r\n    -9\r\n    -4\r\n    -6\r\n    +15\r\n    -10\r\n    -3\r\n    +19\r\n    +9\r\n    +8\r\n    +6\r\n    +11\r\n    -4\r\n    -14\r\n    -1\r\n    +3\r\n    -15\r\n    +17\r\n    +18\r\n    -10\r\n    -22\r\n    -15\r\n    +14\r\n    +6\r\n    -14\r\n    -11\r\n    +4\r\n    -18\r\n    +5\r\n    -16\r\n    -9\r\n    -13\r\n    +14\r\n    +3\r\n    +9\r\n    +17\r\n    -9\r\n    +22\r\n    -12\r\n    -8\r\n    -5\r\n    -1\r\n    -6\r\n    -6\r\n    -19\r\n    +17\r\n    +9\r\n    +28\r\n    +20\r\n    +14\r\n    +11\r\n    +6\r\n    +7\r\n    -2\r\n    +17\r\n    +17\r\n    -12\r\n    +7\r\n    +21\r\n    -2\r\n    -4\r\n    +10\r\n    +2\r\n    +12\r\n    -19\r\n    -22\r\n    -8\r\n    -20\r\n    +25\r\n    -17\r\n    -15\r\n    -8\r\n    -1\r\n    +13\r\n    -15\r\n    +16\r\n    +15\r\n    +19\r\n    -128\r\n    -4\r\n    -16\r\n    -4\r\n    +13\r\n    -10\r\n    +20\r\n    -16\r\n    -13\r\n    +15\r\n    +9\r\n    +1\r\n    -11\r\n    -16\r\n    +13\r\n    +1\r\n    +15\r\n    +1\r\n    -31\r\n    +11\r\n    -53\r\n    -11\r\n    -9\r\n    -16\r\n    -11\r\n    +7\r\n    +6\r\n    +13\r\n    +6\r\n    -12\r\n    -3\r\n    +16\r\n    +2\r\n    -5\r\n    +7\r\n    -16\r\n    +17\r\n    -13\r\n    -9\r\n    +15\r\n    -3\r\n    +13\r\n    +8\r\n    +5\r\n    -8\r\n    -1\r\n    -5\r\n    -21\r\n    +25\r\n    +23\r\n    +12\r\n    +1\r\n    -2\r\n    +7\r\n    -25\r\n    -51\r\n    -5\r\n    +4\r\n    +14\r\n    -8\r\n    +4\r\n    +11\r\n    -5\r\n    -21\r\n    -14\r\n    +9\r\n    +8\r\n    -13\r\n    +4\r\n    +80915\r\n|]\r\n", "snpParentIdO": {"SnippetId" :"b7ddad62-84cf-4a16-96f3-96150595f711"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614448339461}, {"snpId": {"SnippetId" :"7f4b262a-68d3-485a-82de-21a51f2710c6"}, "snpName": "Day 10 Input", "snpContent": "let input10 =\r\n    [|\r\n    ( 11063,  22004), (-1, -2)\r\n    ( 32870, -21613), (-3,  2)\r\n    ( 43767,  22003), (-4, -2)\r\n    ( 32865, -10705), (-3,  1)\r\n    ( 21984, -43419), (-2,  4)\r\n    ( 43775,  11100), (-4, -1)\r\n    ( 43770, -43425), (-4,  4)\r\n    ( 32881,  22004), (-3, -2)\r\n    ( 32899,  11102), (-3, -1)\r\n    ( 43764,  11098), (-4, -1)\r\n    ( 43805,  32912), (-4, -3)\r\n    ( 54680, -32516), (-5,  3)\r\n    ( 32851,  11107), (-3, -1)\r\n    ( 54696,  22012), (-5, -2)\r\n    ( 43794,  43816), (-4, -4)\r\n    (-54388, -43427), ( 5,  4)\r\n    (-43465,  43815), ( 4, -4)\r\n    ( 11036,  32916), (-1, -3)\r\n    ( 43798,  54726), (-4, -5)\r\n    (-10722,  54727), ( 1, -5)\r\n    ( 32897, -54331), (-3,  5)\r\n    ( 11043, -32520), (-1,  3)\r\n    ( 32868, -10706), (-3,  1)\r\n    (-10760,  54718), ( 1, -5)\r\n    (-43449, -21611), ( 4,  2)\r\n    ( 43751,  11105), (-4, -1)\r\n    (-21625,  43817), ( 2, -4)\r\n    ( 54685,  54723), (-5, -5)\r\n    ( 54711, -43418), (-5,  4)\r\n    (-54375,  32914), ( 5, -3)\r\n    ( 21939,  32908), (-2, -3)\r\n    (-43477, -10703), ( 4,  1)\r\n    ( 54699,  22012), (-5, -2)\r\n    (-54372,  43819), ( 5, -4)\r\n    ( 32841, -21609), (-3,  2)\r\n    (-32533,  43816), ( 3, -4)\r\n    (-54399,  54722), ( 5, -5)\r\n    (-21649, -21613), ( 2,  2)\r\n    ( 43767,  11107), (-4, -1)\r\n    (-21636,  11106), ( 2, -1)\r\n    ( 21964, -10705), (-2,  1)\r\n    ( 54663, -10712), (-5,  1)\r\n    ( 32865,  43818), (-3, -4)\r\n    ( 21992,  22009), (-2, -2)\r\n    ( 32881, -54331), (-3,  5)\r\n    (-32553, -32516), ( 3,  3)\r\n    (-54381,  54723), ( 5, -5)\r\n    (-32572,  32908), ( 3, -3)\r\n    ( 43764, -54327), (-4,  5)\r\n    (-43482, -32519), ( 4,  3)\r\n    (-43494, -54325), ( 4,  5)\r\n    ( 11060, -21612), (-1,  2)\r\n    (-54350, -10707), ( 5,  1)\r\n    (-32568,  54719), ( 3, -5)\r\n    (-43458,  11104), ( 4, -1)\r\n    (-32548, -54328), ( 3,  5)\r\n    (-32589,  54725), ( 3, -5)\r\n    ( 43786,  32911), (-4, -3)\r\n    ( 21940, -32521), (-2,  3)\r\n    ( 32860, -54323), (-3,  5)\r\n    (-54363, -21610), ( 5,  2)\r\n    ( 32846,  54720), (-3, -5)\r\n    (-54396, -32517), ( 5,  3)\r\n    (-32560,  22006), ( 3, -2)\r\n    (-32549, -10706), ( 3,  1)\r\n    ( 54711, -21613), (-5,  2)\r\n    (-21676, -10704), ( 2,  1)\r\n    ( 32878,  11099), (-3, -1)\r\n    ( 32886, -10710), (-3,  1)\r\n    (-21628,  54719), ( 2, -5)\r\n    ( 43802,  54723), (-4, -5)\r\n    (-43485, -21608), ( 4,  2)\r\n    (-10719, -10703), ( 1,  1)\r\n    ( 11043, -21617), (-1,  2)\r\n    (-54343, -54328), ( 5,  5)\r\n    (-10746, -21614), ( 1,  2)\r\n    (-54399, -54326), ( 5,  5)\r\n    ( 43794,  32913), (-4, -3)\r\n    ( 21984, -32519), (-2,  3)\r\n    ( 43770,  43813), (-4, -4)\r\n    ( 32878, -21616), (-3,  2)\r\n    ( 21965, -43424), (-2,  4)\r\n    (-10746, -32519), ( 1,  3)\r\n    ( 11088, -54328), (-1,  5)\r\n    (-32541, -10710), ( 3,  1)\r\n    ( 32873, -10703), (-3,  1)\r\n    ( 32846, -10706), (-3,  1)\r\n    ( 11087,  32916), (-1, -3)\r\n    ( 54667, -21610), (-5,  2)\r\n    ( 21984, -10707), (-2,  1)\r\n    ( 11065, -10708), (-1,  1)\r\n    ( 54708, -54332), (-5,  5)\r\n    (-54362, -43418), ( 5,  4)\r\n    (-32549,  11106), ( 3, -1)\r\n    ( 54684, -10705), (-5,  1)\r\n    (-54347, -54331), ( 5,  5)\r\n    ( 43765, -21613), (-4,  2)\r\n    ( 11082,  54725), (-1, -5)\r\n    ( 11050, -10703), (-1,  1)\r\n    ( 21948, -32514), (-2,  3)\r\n    (-21648, -32519), ( 2,  3)\r\n    (-43474,  54727), ( 4, -5)\r\n    (-54343, -43418), ( 5,  4)\r\n    ( 11031, -43425), (-1,  4)\r\n    ( 11076,  32909), (-1, -3)\r\n    ( 11059, -54325), (-1,  5)\r\n    (-43493, -54327), ( 4,  5)\r\n    ( 54694, -32518), (-5,  3)\r\n    (-54391, -54324), ( 5,  5)\r\n    (-21660, -32521), ( 2,  3)\r\n    ( 54699, -10706), (-5,  1)\r\n    (-54383,  11106), ( 5, -1)\r\n    (-10755,  54723), ( 1, -5)\r\n    (-10720, -21608), ( 1,  2)\r\n    (-21631, -54332), ( 2,  5)\r\n    (-54378,  32910), ( 5, -3)\r\n    (-10759, -10712), ( 1,  1)\r\n    ( 43786, -32519), (-4,  3)\r\n    (-32570,  54718), ( 3, -5)\r\n    (-32540, -43423), ( 3,  4)\r\n    (-21632, -21616), ( 2,  2)\r\n    (-10718, -32522), ( 1,  3)\r\n    ( 11060,  11103), (-1, -1)\r\n    (-43446, -43427), ( 4,  4)\r\n    (-21660,  43820), ( 2, -4)\r\n    ( 43773, -43422), (-4,  4)\r\n    (-10735,  22007), ( 1, -2)\r\n    ( 32846,  43820), (-3, -4)\r\n    (-10779,  54720), ( 1, -5)\r\n    (-54394, -43423), ( 5,  4)\r\n    (-10747,  32917), ( 1, -3)\r\n    (-10755,  32917), ( 1, -3)\r\n    ( 54680, -32515), (-5,  3)\r\n    ( 11079,  32916), (-1, -3)\r\n    ( 43803,  54727), (-4, -5)\r\n    ( 11082,  32915), (-1, -3)\r\n    ( 54710,  32908), (-5, -3)\r\n    ( 54652, -10711), (-5,  1)\r\n    (-10750,  22012), ( 1, -2)\r\n    ( 43758,  32909), (-4, -3)\r\n    (-10759,  54721), ( 1, -5)\r\n    (-32541,  11105), ( 3, -1)\r\n    (-54349,  54724), ( 5, -5)\r\n    (-43442, -54331), ( 4,  5)\r\n    (-32577, -32519), ( 3,  3)\r\n    (-54399, -21611), ( 5,  2)\r\n    ( 21952, -21617), (-2,  2)\r\n    ( 11087, -10710), (-1,  1)\r\n    ( 21994, -54323), (-2,  5)\r\n    ( 11076, -21614), (-1,  2)\r\n    ( 11064, -32515), (-1,  3)\r\n    (-43476,  11107), ( 4, -1)\r\n    ( 32869, -32514), (-3,  3)\r\n    ( 11036,  32911), (-1, -3)\r\n    (-32541,  43819), ( 3, -4)\r\n    (-10767,  43815), ( 1, -4)\r\n    ( 43746,  22008), (-4, -2)\r\n    (-10775,  11103), ( 1, -1)\r\n    (-32585, -32521), ( 3,  3)\r\n    (-54359,  32916), ( 5, -3)\r\n    ( 54652,  11099), (-5, -1)\r\n    (-32549, -54323), ( 3,  5)\r\n    ( 43775, -10703), (-4,  1)\r\n    ( 32877, -54326), (-3,  5)\r\n    ( 11036, -43422), (-1,  4)\r\n    ( 54702,  22010), (-5, -2)\r\n    ( 32867,  43816), (-3, -4)\r\n    ( 43772,  22007), (-4, -2)\r\n    (-10742,  54719), ( 1, -5)\r\n    ( 54696, -10712), (-5,  1)\r\n    ( 11071, -21613), (-1,  2)\r\n    ( 43797,  54720), (-4, -5)\r\n    ( 21965, -32514), (-2,  3)\r\n    ( 54691,  54725), (-5, -5)\r\n    ( 21965,  22010), (-2, -2)\r\n    (-10723,  43821), ( 1, -4)\r\n    ( 54672,  43814), (-5, -4)\r\n    ( 43775,  54726), (-4, -5)\r\n    (-54351, -10707), ( 5,  1)\r\n    ( 21976, -10703), (-2,  1)\r\n    (-43474, -43424), ( 4,  4)\r\n    (-43489,  11101), ( 4, -1)\r\n    (-10755, -32513), ( 1,  3)\r\n    (-54362,  32916), ( 5, -3)\r\n    (-21655, -43424), ( 2,  4)\r\n    ( 43791, -32513), (-4,  3)\r\n    ( 21960,  22009), (-2, -2)\r\n    (-54351,  11102), ( 5, -1)\r\n    ( 54707, -32514), (-5,  3)\r\n    ( 21985, -32517), (-2,  3)\r\n    ( 32862,  11100), (-3, -1)\r\n    ( 32874,  32914), (-3, -3)\r\n    (-21636, -54332), ( 2,  5)\r\n    ( 21961,  54720), (-2, -5)\r\n    (-54394, -43423), ( 5,  4)\r\n    ( 21948, -21616), (-2,  2)\r\n    (-32584, -21614), ( 3,  2)\r\n    ( 32886,  22008), (-3, -2)\r\n    (-21627, -32522), ( 2,  3)\r\n    (-43460, -32517), ( 4,  3)\r\n    ( 54696, -32519), (-5,  3)\r\n    (-32560, -32522), ( 3,  3)\r\n    (-32578,  54718), ( 3, -5)\r\n    (-54399,  54723), ( 5, -5)\r\n    (-43470,  22003), ( 4, -2)\r\n    ( 11036,  11104), (-1, -1)\r\n    (-10760, -43427), ( 1,  4)\r\n    (-54387, -21611), ( 5,  2)\r\n    (-32530, -21608), ( 3,  2)\r\n    ( 43799,  32908), (-4, -3)\r\n    (-10763, -32513), ( 1,  3)\r\n    (-54378,  43813), ( 5, -4)\r\n    (-54394, -54325), ( 5,  5)\r\n    ( 43796, -21611), (-4,  2)\r\n    ( 54675,  54725), (-5, -5)\r\n    (-32589, -32513), ( 3,  3)\r\n    (-21684, -54330), ( 2,  5)\r\n    ( 43780, -10708), (-4,  1)\r\n    (-43449, -54329), ( 4,  5)\r\n    (-54343,  43819), ( 5, -4)\r\n    ( 32898,  54722), (-3, -5)\r\n    ( 21976, -21612), (-2,  2)\r\n    ( 54668,  54718), (-5, -5)\r\n    ( 11044, -10712), (-1,  1)\r\n    ( 11063, -32522), (-1,  3)\r\n    ( 11071, -43423), (-1,  4)\r\n    ( 54704,  54727), (-5, -5)\r\n    ( 54651,  11101), (-5, -1)\r\n    ( 54656, -43418), (-5,  4)\r\n    ( 54696, -10711), (-5,  1)\r\n    ( 32899,  54718), (-3, -5)\r\n    (-21672, -54328), ( 2,  5)\r\n    ( 54684,  32910), (-5, -3)\r\n    (-54367,  11099), ( 5, -1)\r\n    ( 11075,  11102), (-1, -1)\r\n    (-32554,  22008), ( 3, -2)\r\n    ( 54712, -10703), (-5,  1)\r\n    (-10743,  11100), ( 1, -1)\r\n    ( 11076,  43820), (-1, -4)\r\n    ( 32881, -43427), (-3,  4)\r\n    (-32577, -43426), ( 3,  4)\r\n    ( 32870,  54727), (-3, -5)\r\n    (-32536,  43822), ( 3, -4)\r\n    (-32573,  22012), ( 3, -2)\r\n    ( 32873, -10711), (-3,  1)\r\n    (-21655, -54325), ( 2,  5)\r\n    ( 43791,  43819), (-4, -4)\r\n    (-54388,  22003), ( 5, -2)\r\n    ( 54712,  32908), (-5, -3)\r\n    (-43491, -32517), ( 4,  3)\r\n    ( 21960,  11106), (-2, -1)\r\n    ( 32886,  11100), (-3, -1)\r\n    (-10767,  43819), ( 1, -4)\r\n    (-10739, -21615), ( 1,  2)\r\n    (-21624,  54722), ( 2, -5)\r\n    ( 32841,  54725), (-3, -5)\r\n    (-32549, -43421), ( 3,  4)\r\n    ( 11079, -21617), (-1,  2)\r\n    (-54378,  43813), ( 5, -4)\r\n    ( 32889, -21614), (-3,  2)\r\n    ( 11064,  32915), (-1, -3)\r\n    (-54349,  32914), ( 5, -3)\r\n    ( 43779, -10706), (-4,  1)\r\n    (-54387,  22009), ( 5, -2)\r\n    ( 21981, -32520), (-2,  3)\r\n    (-43493, -32517), ( 4,  3)\r\n    (-43470,  11101), ( 4, -1)\r\n    (-32549, -32514), ( 3,  3)\r\n    ( 21952,  32916), (-2, -3)\r\n    ( 54675, -21613), (-5,  2)\r\n    (-54367, -21608), ( 5,  2)\r\n    (-10720,  32912), ( 1, -3)\r\n    (-54399, -54327), ( 5,  5)\r\n    ( 11050, -21613), (-1,  2)\r\n    ( 32886, -43420), (-3,  4)\r\n    ( 21962, -10708), (-2,  1)\r\n    (-32584,  11103), ( 3, -1)\r\n    ( 43748,  32913), (-4, -3)\r\n    (-32565, -10703), ( 3,  1)\r\n    ( 21984, -32520), (-2,  3)\r\n    (-10768, -32513), ( 1,  3)\r\n    ( 32843,  43813), (-3, -4)\r\n    ( 21965, -54331), (-2,  5)\r\n    (-32581, -10705), ( 3,  1)\r\n    (-10739,  32910), ( 1, -3)\r\n    ( 54709,  32917), (-5, -3)\r\n    (-54378,  22012), ( 5, -2)\r\n    ( 43748,  11098), (-4, -1)\r\n    (-21647, -10712), ( 2,  1)\r\n    ( 11058, -10706), (-1,  1)\r\n    ( 11087, -54323), (-1,  5)\r\n    ( 32898, -10708), (-3,  1)\r\n    (-54387,  54718), ( 5, -5)\r\n    ( 32889,  11104), (-3, -1)\r\n    ( 43794, -10710), (-4,  1)\r\n    (-32569, -32513), ( 3,  3)\r\n    ( 21996,  11098), (-2, -1)\r\n    (-21679, -43422), ( 2,  4)\r\n    (-32553, -43424), ( 3,  4)\r\n    (-10761, -32522), ( 1,  3)\r\n    (-54372,  54723), ( 5, -5)\r\n    ( 21953,  11104), (-2, -1)\r\n    ( 11047,  22003), (-1, -2)\r\n    (-21639,  32917), ( 2, -3)\r\n    (-43444,  32911), ( 4, -3)\r\n    ( 54653,  11103), (-5, -1)\r\n    ( 43791,  54724), (-4, -5)\r\n    (-21672, -21610), ( 2,  2)\r\n    (-54367,  11106), ( 5, -1)\r\n    ( 32866,  22004), (-3, -2)\r\n    ( 32874,  43819), (-3, -4)\r\n    (-32533,  43820), ( 3, -4)\r\n    (-21648,  22010), ( 2, -2)\r\n    (-43493, -21616), ( 4,  2)\r\n    ( 43763,  43813), (-4, -4)\r\n    (-54359,  54720), ( 5, -5)\r\n    ( 43794,  43814), (-4, -4)\r\n    ( 54653, -54327), (-5,  5)\r\n    (-10739,  11099), ( 1, -1)\r\n    (-32577,  22008), ( 3, -2)\r\n    ( 54696, -32518), (-5,  3)\r\n    ( 11076,  54722), (-1, -5)\r\n    (-10776, -32522), ( 1,  3)\r\n    (-54358,  32912), ( 5, -3)\r\n    ( 11087, -10712), (-1,  1)\r\n    ( 43758, -21613), (-4,  2)\r\n    ( 54693, -54328), (-5,  5)\r\n    (-21628,  43820), ( 2, -4)\r\n    (-54343,  54725), ( 5, -5)\r\n    ( 21940, -54331), (-2,  5)\r\n    (-43492, -43427), ( 4,  4)\r\n    ( 21986,  43816), (-2, -4)\r\n    ( 11060, -10704), (-1,  1)\r\n    ( 54696,  11106), (-5, -1)\r\n    ( 32876,  32913), (-3, -3)\r\n    ( 43787,  22007), (-4, -2)\r\n    (-32586,  22008), ( 3, -2)\r\n    ( 32899, -10703), (-3,  1)\r\n|]", "snpParentIdO": {"SnippetId" :"b7ddad62-84cf-4a16-96f3-96150595f711"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614448335495}, {"snpId": {"SnippetId" :"19e4b72d-17d7-4bb5-8aba-7baf98250720"}, "snpName": "Day 1", "snpContent": "// https://adventofcode.com/2018/day/1\n\nlet input = input1\n\ninput\n|> Array.sum\n|> print\n\nlet rec findRepeat i t s =\n    let n = t + input.[i]\n    if Set.contains n s then n else\n    findRepeat (if i = input.Length - 1 then 0 else i + 1)  n (Set.add n s)\n\n\nfindRepeat 0 0 (Set [ 0 ])\n|> print\n\nlet s = new System.Collections.Generic.HashSet<int>()\n\nlet rec findRepeatH i t =\n    let n = t + input.[i]\n    if s.Contains n then n else\n    s.Add n |> ignore\n    findRepeatH (if i = input.Length - 1 then 0 else i + 1) n\n\nfindRepeatH  0 0\n|> print\n\n// --------------------------------------------------\n\nlet cycle xs = seq { while true do yield! xs }    \nlet accumusum xs = Seq.scan(fun acc elem -> acc + elem) 0 xs\n\nlet tryfind (sum, s:int Set) =\n    match s.Contains(sum) with\n    | true  -> Some(sum)\n    | false -> None\n\nlet scanstate (sum, s:int Set) el =\n    el, s.Add(sum)\n\nlet findfreqcycle (data:int seq) =\n    let seen = Seq.scan scanstate (Seq.head data, Set.empty) (Seq.tail data)\n    Seq.pick tryfind seen\n\ninput |> cycle |> accumusum |> findfreqcycle |> print\n", "snpParentIdO": {"SnippetId" :"a2ffc7f6-f86e-46bb-8882-29d97b3fd4f9"}, "snpPredIds": [{"SnippetId" :"36188330-ff74-4951-9bc2-f34015a96fbc"}], "snpProperties": [["Explanation", "This one runs interpreted but barely:\r\n\r\n| | | |\r\n|-|-|-|\r\n| with | `let main` | WASM crashes |\r\n| without | `let main` | it runs |\r\n| **Run JS**|  | Stack overflow |"]], "snpModified": 1584394869613}, {"snpId": {"SnippetId" :"cc20f800-de06-4852-94e5-dd708c8ad00c"}, "snpName": "Day 10", "snpContent": "// https://adventofcode.com/2018/day/10\n\nlet shift n = \n    input10\n    |> Seq.map (fun ((x0,y0), (vx, vy)) -> (x0 + vx * n, y0 + vy * n))\n\nlet size points = \n    ((Seq.map fst points |> Seq.min , Seq.map snd points |> Seq.min), (Seq.map fst points |> Seq.max , Seq.map snd points |> Seq.max) )\n    |> (fun ((x1,y1),(x2,y2)) -> (x1,y1),(x2,y2), (x2-x1, y2-y1), x2-x1 + y2-y1 )\n\n//for n in 10860.. 1 ..10950 do\n//    shift n |> size |> printfn \"%d = %A\" n\n\nlet message n =\n    let points = shift n\n    let (x0, y0), _, (dx, dy) , _ = size points |>! print\n    let msg = Array.create (dx + 1) (Array.create (dy + 1) ' ')\n                |> Array.map (fun _ -> (Array.create (dy + 1) ' '))\n    for (x, y) in points do \n        msg.[x - x0].[y - y0] <- '#'\n    for y in 0..dy do\n        [| for x in 0..dx -> msg.[x].[y] |] |> System.String \n        |> print\n\nmessage 10905\n\n", "snpParentIdO": {"SnippetId" :"a2ffc7f6-f86e-46bb-8882-29d97b3fd4f9"}, "snpPredIds": [{"SnippetId" :"7f4b262a-68d3-485a-82de-21a51f2710c6"}], "snpProperties": [], "snpModified": 1576499811538}, {"snpId": {"SnippetId" :"fdee4402-e268-413b-bcf0-9ffcace489d9"}, "snpName": "Advent of Code 2020", "snpContent": "let getLines0 (input:string) =\r\n    input.Split [| '\\n' |]\r\n    |> Seq.map String.trim\r\n\r\nlet getLines = getLines0 >> Seq.filter ((<>) \"\")\r\n\r\nlet getLineGroups inp = \r\n    inp\r\n    |> getLines0\r\n    |> Seq.splitBy (              (= ) \"\" ) Seq.Exclude\r\n    |> Seq.filter  (Seq.length >> (< )  0 )        \r\n", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1614194222670}, {"snpId": {"SnippetId" :"2f085669-d838-4e28-b15e-51ec3b03cb91"}, "snpName": "Day 14 Input", "snpContent": "let input14 = [|\r\n                    \"mask = 0010X01001X010000110100000X000010X11\"\r\n                    \"mem[41717] = 288\"\r\n                    \"mem[54146] = 1656\"\r\n                    \"mem[30135] = 4799584\"\r\n                    \"mask = 01X10101X11X01XX01X000011X1000110110\"\r\n                    \"mem[29142] = 13227025\"\r\n                    \"mem[32455] = 1814\"\r\n                    \"mem[42522] = 385316684\"\r\n                    \"mem[29904] = 5334\"\r\n                    \"mem[51087] = 1492\"\r\n                    \"mask = 01110X1X1XX0100011X0111X11001X1X1001\"\r\n                    \"mem[16001] = 2818333\"\r\n                    \"mem[896] = 152318161\"\r\n                    \"mem[7380] = 1741200\"\r\n                    \"mem[36363] = 3994854\"\r\n                    \"mem[51852] = 5003\"\r\n                    \"mem[31197] = 8946048\"\r\n                    \"mem[38377] = 699057\"\r\n                    \"mask = 00XX0X11111001001XX100X1010X00X10X01\"\r\n                    \"mem[41981] = 8217309\"\r\n                    \"mem[929] = 5355\"\r\n                    \"mem[21551] = 1130885\"\r\n                    \"mask = 111X01X111001X0XX11X110100X1101100XX\"\r\n                    \"mem[38540] = 877233\"\r\n                    \"mem[4594] = 156077284\"\r\n                    \"mem[17004] = 12673792\"\r\n                    \"mem[11717] = 12697488\"\r\n                    \"mem[58553] = 890949\"\r\n                    \"mask = 001101X101X1100001X0000X0X100001110X\"\r\n                    \"mem[49613] = 14831731\"\r\n                    \"mem[18410] = 386265\"\r\n                    \"mem[11204] = 66992\"\r\n                    \"mem[7462] = 330749684\"\r\n                    \"mem[48489] = 186227974\"\r\n                    \"mem[49880] = 13957\"\r\n                    \"mem[37574] = 101061\"\r\n                    \"mask = 0X11010101111000011XX00001X0101111X0\"\r\n                    \"mem[43270] = 63321063\"\r\n                    \"mem[8868] = 8357760\"\r\n                    \"mem[51871] = 7561\"\r\n                    \"mem[59958] = 76822813\"\r\n                    \"mem[13346] = 298124646\"\r\n                    \"mem[28205] = 1479\"\r\n                    \"mem[20102] = 898175404\"\r\n                    \"mask = 00X00X11111001001X1X0000011010000101\"\r\n                    \"mem[39594] = 471\"\r\n                    \"mem[23863] = 472\"\r\n                    \"mem[45424] = 881\"\r\n                    \"mem[5520] = 68851082\"\r\n                    \"mask = 1111011X1XX01XX01110010X011010X01100\"\r\n                    \"mem[7932] = 7104\"\r\n                    \"mem[50570] = 521355116\"\r\n                    \"mem[33698] = 77366694\"\r\n                    \"mem[54041] = 1967898\"\r\n                    \"mem[1940] = 272765\"\r\n                    \"mem[42608] = 557758\"\r\n                    \"mem[48653] = 95074\"\r\n                    \"mask = 01110101011110001100100101X11000XX0X\"\r\n                    \"mem[5032] = 324136\"\r\n                    \"mem[19968] = 25\"\r\n                    \"mem[37008] = 370\"\r\n                    \"mem[51927] = 7820968\"\r\n                    \"mem[3960] = 273343\"\r\n                    \"mem[26318] = 9940851\"\r\n                    \"mask = 11X1011X1X00111XX110X000011X10010001\"\r\n                    \"mem[49437] = 13322545\"\r\n                    \"mem[46843] = 690911\"\r\n                    \"mem[58945] = 13770143\"\r\n                    \"mem[4847] = 67337\"\r\n                    \"mem[6128] = 371\"\r\n                    \"mask = 1100X1X1X10011X01X100011110011110001\"\r\n                    \"mem[6466] = 926046\"\r\n                    \"mem[20503] = 8735222\"\r\n                    \"mem[29727] = 18641\"\r\n                    \"mem[20030] = 1090613\"\r\n                    \"mem[54347] = 33354545\"\r\n                    \"mask = 11XX01X111X011001110X0110101100XX011\"\r\n                    \"mem[59773] = 1775\"\r\n                    \"mem[31974] = 722\"\r\n                    \"mem[15867] = 46611\"\r\n                    \"mem[37151] = 3019104\"\r\n                    \"mem[21915] = 96864303\"\r\n                    \"mem[9222] = 10601111\"\r\n                    \"mem[20777] = 1235555\"\r\n                    \"mask = 0111010001111X00110X0X1011X0X1100000\"\r\n                    \"mem[46581] = 20573\"\r\n                    \"mem[32355] = 58869216\"\r\n                    \"mem[45378] = 13272459\"\r\n                    \"mem[22414] = 322109637\"\r\n                    \"mem[34083] = 20766732\"\r\n                    \"mem[63698] = 3924531\"\r\n                    \"mask = 010101011X100X01011001X10X101X11011X\"\r\n                    \"mem[57710] = 113212\"\r\n                    \"mem[31202] = 231541678\"\r\n                    \"mem[51278] = 219614\"\r\n                    \"mem[63698] = 1042138\"\r\n                    \"mem[15026] = 7000054\"\r\n                    \"mem[51217] = 500505\"\r\n                    \"mask = 0X100001000X0100XX1XX1101101001X1000\"\r\n                    \"mem[7011] = 521173\"\r\n                    \"mem[13238] = 157620\"\r\n                    \"mem[30900] = 19373\"\r\n                    \"mem[27810] = 163020969\"\r\n                    \"mem[54982] = 96357825\"\r\n                    \"mem[22824] = 408599\"\r\n                    \"mem[12477] = 48103186\"\r\n                    \"mask = 00000010111XX00XX110X010000000010111\"\r\n                    \"mem[54146] = 17970\"\r\n                    \"mem[41376] = 1503\"\r\n                    \"mem[31900] = 438330985\"\r\n                    \"mem[13355] = 435056\"\r\n                    \"mem[64758] = 1052852148\"\r\n                    \"mem[59142] = 1950135\"\r\n                    \"mem[6781] = 13502\"\r\n                    \"mask = 01X10X0111110X00X0XX010100X10X1X0101\"\r\n                    \"mem[51107] = 13121312\"\r\n                    \"mem[20134] = 243\"\r\n                    \"mem[56802] = 24720\"\r\n                    \"mask = 1111010111101100XX101111000000010X1X\"\r\n                    \"mem[56384] = 729\"\r\n                    \"mem[32508] = 258811315\"\r\n                    \"mem[39920] = 252650\"\r\n                    \"mem[54657] = 119337\"\r\n                    \"mem[43559] = 1614394\"\r\n                    \"mem[43973] = 36253\"\r\n                    \"mask = 00100XXXXX1X10000110110100010001XX01\"\r\n                    \"mem[33796] = 171340858\"\r\n                    \"mem[62392] = 2042140\"\r\n                    \"mem[21146] = 202316\"\r\n                    \"mem[50189] = 17797984\"\r\n                    \"mem[59958] = 3871673\"\r\n                    \"mem[46838] = 7418\"\r\n                    \"mask = X0100X0X111X11011110X0000001001X1111\"\r\n                    \"mem[35424] = 14950493\"\r\n                    \"mem[64240] = 40746\"\r\n                    \"mem[22319] = 149408\"\r\n                    \"mem[32929] = 57764\"\r\n                    \"mem[4571] = 138473\"\r\n                    \"mem[13202] = 6496022\"\r\n                    \"mem[59210] = 24648253\"\r\n                    \"mask = 00XX0001111011111110X1X0111010XX0X10\"\r\n                    \"mem[31028] = 3706\"\r\n                    \"mem[64362] = 57739\"\r\n                    \"mem[22920] = 491669\"\r\n                    \"mask = 011X0101X111XX000110XX01X110X001110X\"\r\n                    \"mem[22272] = 22414\"\r\n                    \"mem[59958] = 10131\"\r\n                    \"mem[9299] = 59050364\"\r\n                    \"mem[54292] = 185609950\"\r\n                    \"mem[11363] = 679\"\r\n                    \"mem[55554] = 127124\"\r\n                    \"mask = 11110X0110X010101X10010X011010011011\"\r\n                    \"mem[13140] = 23895\"\r\n                    \"mem[54725] = 364383\"\r\n                    \"mem[12768] = 29526\"\r\n                    \"mem[21134] = 31494\"\r\n                    \"mem[32345] = 13843\"\r\n                    \"mem[38437] = 576352606\"\r\n                    \"mem[35535] = 1948\"\r\n                    \"mask = X111011111X100X001111111000X111000X0\"\r\n                    \"mem[34738] = 395933\"\r\n                    \"mem[33438] = 644\"\r\n                    \"mem[34480] = 56137\"\r\n                    \"mem[33415] = 71\"\r\n                    \"mem[55820] = 40580559\"\r\n                    \"mem[37978] = 104370\"\r\n                    \"mem[60594] = 47366315\"\r\n                    \"mask = 011X0X110110X000100X0X1110X00000XX00\"\r\n                    \"mem[2065] = 5611\"\r\n                    \"mem[42368] = 139274892\"\r\n                    \"mem[11145] = 48456\"\r\n                    \"mem[11668] = 5352867\"\r\n                    \"mem[40280] = 864639\"\r\n                    \"mask = 1XX1X00X11010X10011111XXX1101100111X\"\r\n                    \"mem[39384] = 12733115\"\r\n                    \"mem[48860] = 24406\"\r\n                    \"mem[46230] = 13931503\"\r\n                    \"mask = 00X001100X11100001101100001X1XX10001\"\r\n                    \"mem[11204] = 11902\"\r\n                    \"mem[42496] = 95479\"\r\n                    \"mem[58594] = 120902\"\r\n                    \"mem[62260] = 43802019\"\r\n                    \"mem[41882] = 889\"\r\n                    \"mask = 00X000X011111X0001100000000000X00001\"\r\n                    \"mem[54549] = 73578351\"\r\n                    \"mem[15308] = 225676\"\r\n                    \"mask = 11110X011100100X11111111XX0101100111\"\r\n                    \"mem[62902] = 115296396\"\r\n                    \"mem[163] = 47992\"\r\n                    \"mem[27595] = 1080625\"\r\n                    \"mask = X01101X1111XX1X0111X0101000000111010\"\r\n                    \"mem[45311] = 950513\"\r\n                    \"mem[35853] = 3048594\"\r\n                    \"mem[25353] = 42914232\"\r\n                    \"mem[4595] = 165637540\"\r\n                    \"mem[5173] = 4666\"\r\n                    \"mem[27595] = 33115384\"\r\n                    \"mask = 11XX0101X10010000111X111001000X00111\"\r\n                    \"mem[5313] = 16770\"\r\n                    \"mem[21570] = 21589452\"\r\n                    \"mem[45537] = 25984\"\r\n                    \"mem[7425] = 1016\"\r\n                    \"mem[57579] = 4400441\"\r\n                    \"mem[16371] = 27936\"\r\n                    \"mem[29544] = 699\"\r\n                    \"mask = 0011010X1X1010X111X10X0001010XX01001\"\r\n                    \"mem[12546] = 66366447\"\r\n                    \"mem[4594] = 660822686\"\r\n                    \"mem[61425] = 3035\"\r\n                    \"mem[16121] = 27102624\"\r\n                    \"mem[1316] = 1781\"\r\n                    \"mem[23623] = 572865256\"\r\n                    \"mask = 0111X1011XX01X0101100100X110000X001X\"\r\n                    \"mem[23341] = 6402065\"\r\n                    \"mem[52500] = 1977612\"\r\n                    \"mask = 00X0001011X1100001101100X01100X00111\"\r\n                    \"mem[64017] = 31705\"\r\n                    \"mem[35512] = 1445\"\r\n                    \"mem[35781] = 5233653\"\r\n                    \"mem[44050] = 40\"\r\n                    \"mask = 01110100X11110X0X1000X11111X0X1X000X\"\r\n                    \"mem[12867] = 190010\"\r\n                    \"mem[36252] = 747672\"\r\n                    \"mem[23167] = 204357\"\r\n                    \"mem[27385] = 12016\"\r\n                    \"mem[47464] = 784707845\"\r\n                    \"mem[48043] = 627253\"\r\n                    \"mask = 0111X0X0X100100X1110011X11000X000100\"\r\n                    \"mem[37676] = 36371\"\r\n                    \"mem[59916] = 3315\"\r\n                    \"mem[29136] = 15854324\"\r\n                    \"mem[37249] = 132828\"\r\n                    \"mem[53802] = 79432\"\r\n                    \"mask = X11X1101101X110X0X10X1000011000XXX00\"\r\n                    \"mem[17461] = 8158\"\r\n                    \"mem[33712] = 1029431\"\r\n                    \"mem[1042] = 837675\"\r\n                    \"mask = 00110X011010100X1101010100010XX11011\"\r\n                    \"mem[16121] = 853733\"\r\n                    \"mem[18346] = 5303\"\r\n                    \"mem[60174] = 506801115\"\r\n                    \"mem[1817] = 1868\"\r\n                    \"mem[46166] = 168\"\r\n                    \"mem[14602] = 1968\"\r\n                    \"mem[5368] = 109371\"\r\n                    \"mask = X1110XX111X100X0011X101111001101XX10\"\r\n                    \"mem[21630] = 8667\"\r\n                    \"mem[55820] = 200651\"\r\n                    \"mem[11204] = 34034\"\r\n                    \"mask = 1111011X10101X001110001X01XX00010101\"\r\n                    \"mem[62846] = 105848\"\r\n                    \"mem[43437] = 28568\"\r\n                    \"mem[16213] = 724626106\"\r\n                    \"mem[32677] = 149932\"\r\n                    \"mem[23580] = 573\"\r\n                    \"mem[22272] = 3393406\"\r\n                    \"mem[64633] = 4838\"\r\n                    \"mask = 011001010XX1X10001100X00X0010001X0X0\"\r\n                    \"mem[23580] = 992\"\r\n                    \"mem[7692] = 1236\"\r\n                    \"mem[33389] = 560975\"\r\n                    \"mem[7177] = 5868\"\r\n                    \"mask = X1X10101X0101X0011101100111110100101\"\r\n                    \"mem[99] = 6843772\"\r\n                    \"mem[30553] = 554826032\"\r\n                    \"mem[61798] = 5939100\"\r\n                    \"mem[48169] = 2030\"\r\n                    \"mask = 00XX000100000X0001110010X11001000101\"\r\n                    \"mem[25353] = 78809\"\r\n                    \"mem[10239] = 276125\"\r\n                    \"mem[11223] = 13545\"\r\n                    \"mem[57147] = 1433\"\r\n                    \"mask = 001X010010011010X110101X11011X001010\"\r\n                    \"mem[49575] = 152755\"\r\n                    \"mem[26848] = 63016\"\r\n                    \"mem[30880] = 1725364\"\r\n                    \"mask = 011101X10XX01X0010X0XX01110000X11100\"\r\n                    \"mem[41287] = 414662075\"\r\n                    \"mem[28188] = 3477472\"\r\n                    \"mem[36592] = 7996235\"\r\n                    \"mem[49314] = 9140605\"\r\n                    \"mem[47488] = 7769\"\r\n                    \"mask = 01110X01X111010001X100101X0X10011100\"\r\n                    \"mem[52240] = 192560204\"\r\n                    \"mem[65031] = 701796\"\r\n                    \"mem[14783] = 8161\"\r\n                    \"mask = 0111010X011X1X001XX01001X1X00X0100X0\"\r\n                    \"mem[49691] = 10412561\"\r\n                    \"mem[915] = 134624030\"\r\n                    \"mem[8606] = 736\"\r\n                    \"mem[58998] = 1516\"\r\n                    \"mem[61106] = 641573\"\r\n                    \"mask = 01X1X1X111101011011X10100010000X01X1\"\r\n                    \"mem[21630] = 19000288\"\r\n                    \"mem[60944] = 213511689\"\r\n                    \"mem[46464] = 59732\"\r\n                    \"mem[32695] = 533\"\r\n                    \"mem[27385] = 25467104\"\r\n                    \"mem[62812] = 304550708\"\r\n                    \"mask = 00110X010X1110X0X1111X00111X0001X100\"\r\n                    \"mem[57194] = 24040\"\r\n                    \"mem[20550] = 46674\"\r\n                    \"mem[52168] = 23339025\"\r\n                    \"mem[35512] = 68290970\"\r\n                    \"mask = X111011X1010101011101X10000111000X11\"\r\n                    \"mem[12546] = 102729072\"\r\n                    \"mem[7304] = 110383\"\r\n                    \"mem[59523] = 888\"\r\n                    \"mem[21630] = 71914682\"\r\n                    \"mem[19910] = 5863216\"\r\n                    \"mask = 11X0010X1X101110111X01X0000111111001\"\r\n                    \"mem[4963] = 173772407\"\r\n                    \"mem[33919] = 81154860\"\r\n                    \"mem[7928] = 4393\"\r\n                    \"mem[59961] = 4977369\"\r\n                    \"mem[22493] = 377398427\"\r\n                    \"mask = 00X0010X10011X10X1X00001X10001101010\"\r\n                    \"mem[17461] = 120207\"\r\n                    \"mem[7618] = 54871412\"\r\n                    \"mem[3960] = 25088\"\r\n                    \"mem[4185] = 15852\"\r\n                    \"mask = X0X00X00011010000100001X001110010101\"\r\n                    \"mem[17246] = 10825\"\r\n                    \"mem[61485] = 1220754\"\r\n                    \"mem[37937] = 63325\"\r\n                    \"mem[13776] = 44579590\"\r\n                    \"mem[26933] = 467904\"\r\n                    \"mask = 01X10X011XX101001001X101X11110100111\"\r\n                    \"mem[51192] = 227116205\"\r\n                    \"mem[8996] = 589323\"\r\n                    \"mem[40539] = 2892\"\r\n                    \"mem[18976] = 329283\"\r\n                    \"mem[2942] = 13450\"\r\n                    \"mem[59167] = 436935\"\r\n                    \"mask = 0X11010101111000X11010XX011X1X010001\"\r\n                    \"mem[31621] = 4166\"\r\n                    \"mem[38132] = 66956\"\r\n                    \"mem[4178] = 32378\"\r\n                    \"mem[59276] = 448\"\r\n                    \"mem[57505] = 202001993\"\r\n                    \"mem[8239] = 69424389\"\r\n                    \"mask = 0010X10001101000X1X00000001000001X00\"\r\n                    \"mem[32804] = 120932430\"\r\n                    \"mem[60447] = 305\"\r\n                    \"mem[62385] = 5277\"\r\n                    \"mem[54940] = 11685990\"\r\n                    \"mem[48466] = 1956474\"\r\n                    \"mem[38326] = 14070\"\r\n                    \"mask = 1111010111X0101X11101000X0011X0000X0\"\r\n                    \"mem[9957] = 794590\"\r\n                    \"mem[43663] = 63819868\"\r\n                    \"mem[59142] = 8388971\"\r\n                    \"mem[41877] = 413661620\"\r\n                    \"mask = X011X10X111XXX001111010101XXX0011001\"\r\n                    \"mem[47] = 18787684\"\r\n                    \"mem[17443] = 648\"\r\n                    \"mem[4356] = 656\"\r\n                    \"mem[65126] = 3205798\"\r\n                    \"mem[38437] = 1762627\"\r\n                    \"mem[43834] = 581\"\r\n                    \"mask = 01110110X10010001100X01010101X0X1001\"\r\n                    \"mem[38345] = 934\"\r\n                    \"mem[58528] = 6065840\"\r\n                    \"mem[33800] = 20485490\"\r\n                    \"mem[48232] = 16644491\"\r\n                    \"mask = 001X000X00X001000X11XX10101010X111X0\"\r\n                    \"mem[22284] = 259142\"\r\n                    \"mem[28461] = 974\"\r\n                    \"mem[62938] = 449\"\r\n                    \"mem[40024] = 598\"\r\n                    \"mem[22913] = 650\"\r\n                    \"mem[19996] = 5093\"\r\n                    \"mask = 0X100X01X1X010XX01X00000010000100001\"\r\n                    \"mem[29565] = 3981254\"\r\n                    \"mem[55283] = 82851782\"\r\n                    \"mem[36252] = 55697822\"\r\n                    \"mask = 111101X11X101XX01110XX1010X101XX0101\"\r\n                    \"mem[56566] = 29617152\"\r\n                    \"mem[10468] = 2660883\"\r\n                    \"mem[28055] = 1499\"\r\n                    \"mem[35218] = 185790979\"\r\n                    \"mem[22128] = 846102\"\r\n                    \"mem[30117] = 560842\"\r\n                    \"mem[58299] = 1012387364\"\r\n                    \"mask = 111X010110X0X010111001X0X00X11011111\"\r\n                    \"mem[48718] = 3937\"\r\n                    \"mem[26689] = 501780\"\r\n                    \"mem[30553] = 657149\"\r\n                    \"mask = 001001XXX0X110X001100001X1X1111X0010\"\r\n                    \"mem[1480] = 42916\"\r\n                    \"mem[27601] = 42064531\"\r\n                    \"mem[35919] = 6321\"\r\n                    \"mem[57905] = 2686675\"\r\n                    \"mask = X1110X1X110010X01X101111010110X0X101\"\r\n                    \"mem[40159] = 28365\"\r\n                    \"mem[50570] = 95027\"\r\n                    \"mem[65427] = 4531\"\r\n                    \"mem[7468] = 41\"\r\n                    \"mem[49166] = 3783\"\r\n                    \"mem[59623] = 258901051\"\r\n                    \"mask = 1111011X1100100X111X0X0X11011X1001X0\"\r\n                    \"mem[58839] = 103790\"\r\n                    \"mem[44410] = 660\"\r\n                    \"mask = 01X1010X0111100X0110001101XX00X1110X\"\r\n                    \"mem[58804] = 116385\"\r\n                    \"mem[57709] = 27103\"\r\n                    \"mem[62492] = 11102\"\r\n                    \"mem[62031] = 24113\"\r\n                    \"mem[23580] = 101015510\"\r\n                    \"mask = 0X110100011110010110111100X11X110X01\"\r\n                    \"mem[45855] = 345\"\r\n                    \"mem[33796] = 2069488\"\r\n                    \"mem[61694] = 409\"\r\n                    \"mem[42908] = 529\"\r\n                    \"mem[54356] = 1540\"\r\n                    \"mem[2931] = 6893\"\r\n                    \"mem[13629] = 161\"\r\n                    \"mask = 011X010111111000X11001010XX0100110X1\"\r\n                    \"mem[48232] = 2748\"\r\n                    \"mem[46818] = 1360569\"\r\n                    \"mem[37978] = 59020939\"\r\n                    \"mem[3596] = 13931\"\r\n                    \"mask = 011X0101011110X00110110010X11100XX00\"\r\n                    \"mem[8686] = 3043212\"\r\n                    \"mem[99] = 1008741\"\r\n                    \"mem[19665] = 4017\"\r\n                    \"mem[57438] = 94605425\"\r\n                    \"mem[55264] = 1505951\"\r\n                    \"mask = 0010XX11X00X1X000110X0X101X1010000X1\"\r\n                    \"mem[38124] = 952\"\r\n                    \"mem[24080] = 109634238\"\r\n                    \"mem[9221] = 3755102\"\r\n                    \"mem[6097] = 7229649\"\r\n                    \"mem[44702] = 6963\"\r\n                    \"mem[4664] = 75052121\"\r\n                    \"mem[54208] = 50749\"\r\n                    \"mask = 001X000100X001000111X0XX101110X0X00X\"\r\n                    \"mem[29210] = 30278\"\r\n                    \"mem[34588] = 8139931\"\r\n                    \"mem[4262] = 170\"\r\n                    \"mem[30822] = 116256036\"\r\n                    \"mem[35104] = 2105\"\r\n                    \"mem[53802] = 202809516\"\r\n                    \"mem[34175] = 11635\"\r\n                    \"mask = 10110111101X10X01110X0101X1101X1000X\"\r\n                    \"mem[31068] = 8529566\"\r\n                    \"mem[55554] = 1887440\"\r\n                    \"mem[43973] = 711\"\r\n                    \"mem[30117] = 89\"\r\n                    \"mem[32710] = 6073240\"\r\n                    \"mask = X11001011100110101X10X0X0X0111010000\"\r\n                    \"mem[33533] = 67852\"\r\n                    \"mem[41455] = 2159161\"\r\n                    \"mem[61283] = 7275538\"\r\n                    \"mem[26353] = 49998\"\r\n                    \"mem[37978] = 396\"\r\n                    \"mem[56038] = 27870483\"\r\n                    \"mem[48893] = 2558\"\r\n                    \"mask = 00110X0X10XX1001X101001001010XX10001\"\r\n                    \"mem[15308] = 3190807\"\r\n                    \"mem[29791] = 1689321\"\r\n                    \"mem[23706] = 28489987\"\r\n                    \"mem[52184] = 13941172\"\r\n                    \"mask = 0111010111X010X1011011X01110X0X10111\"\r\n                    \"mem[46818] = 3960\"\r\n                    \"mem[896] = 8079\"\r\n                    \"mem[51892] = 10813637\"\r\n                    \"mem[40539] = 50432\"\r\n                    \"mem[39200] = 405093301\"\r\n                    \"mem[59082] = 24044094\"\r\n                    \"mask = 0X11X00100110X0001111000X10000X01000\"\r\n                    \"mem[18818] = 115548503\"\r\n                    \"mem[3709] = 408\"\r\n                    \"mem[28387] = 1517\"\r\n                    \"mem[18617] = 82658\"\r\n                    \"mask = 00100X0001X0100001X010100011X0XX0001\"\r\n                    \"mem[16645] = 2580\"\r\n                    \"mem[55034] = 1395\"\r\n                    \"mem[24779] = 57573\"\r\n                    \"mask = 010100X11111000010XXXX0X0X1XX0110010\"\r\n                    \"mem[51498] = 514\"\r\n                    \"mem[56424] = 27530520\"\r\n                    \"mem[5657] = 5653\"\r\n                    \"mem[60013] = 1759\"\r\n                    \"mem[39685] = 48186\"\r\n                    \"mask = X0100X0111101XX1111001X101110XXX11X0\"\r\n                    \"mem[15867] = 15856896\"\r\n                    \"mem[16645] = 22385\"\r\n                    \"mem[11204] = 56370\"\r\n                    \"mask = 0X1X0101X0101000111011110X111010X001\"\r\n                    \"mem[30186] = 149471\"\r\n                    \"mem[55297] = 6189241\"\r\n                    \"mem[56429] = 7551\"\r\n                    \"mem[35853] = 1943\"\r\n                    \"mem[50590] = 3973692\"\r\n                    \"mask = 0111010X011X10XXX100011XX11101X0X011\"\r\n                    \"mem[41687] = 10091\"\r\n                    \"mem[27747] = 12073\"\r\n                    \"mem[41632] = 117\"\r\n                    \"mem[53319] = 6596158\"\r\n                    \"mask = 101001011110X1011110001X11111XX01001\"\r\n                    \"mem[8898] = 350890\"\r\n                    \"mem[61425] = 11351\"\r\n                    \"mem[30900] = 62547453\"\r\n                    \"mem[32345] = 4152907\"\r\n                    \"mem[53681] = 15100\"\r\n                    \"mask = 0X10010X1X0110X0011001101001X010XX11\"\r\n                    \"mem[46274] = 266245793\"\r\n                    \"mem[51690] = 6210475\"\r\n                    \"mem[31828] = 50916780\"\r\n                    \"mem[40159] = 1305075\"\r\n                    \"mask = X1110X0001XX11001100111111X0100X00X0\"\r\n                    \"mem[13308] = 2061153\"\r\n                    \"mem[21134] = 100\"\r\n                    \"mem[22800] = 43346237\"\r\n                    \"mem[63215] = 1528\"\r\n                    \"mem[3115] = 159268\"\r\n                    \"mem[51760] = 3390\"\r\n                    \"mask = 011X0101011100000110X1X1X1101X1100X1\"\r\n                    \"mem[3709] = 1727\"\r\n                    \"mem[30692] = 4483\"\r\n                    \"mem[4143] = 22098690\"\r\n                    \"mem[8978] = 536\"\r\n                    \"mask = 1X1X01011X10X101X110000X11111010X100\"\r\n                    \"mem[1983] = 1355679\"\r\n                    \"mem[18831] = 4847364\"\r\n                    \"mem[26861] = 6413\"\r\n                    \"mask = 111XXX10X11010001X10X10X0111100X1X00\"\r\n                    \"mem[1940] = 622180477\"\r\n                    \"mem[33455] = 6793\"\r\n                    \"mem[54070] = 74933929\"\r\n                    \"mem[1936] = 6134620\"\r\n                    \"mask = 1X1X010X111011XX1110010100X1X0X01X01\"\r\n                    \"mem[4347] = 29272422\"\r\n                    \"mem[26401] = 180116335\"\r\n                    \"mem[53382] = 684\"\r\n                    \"mem[29142] = 91826\"\r\n                    \"mem[30] = 11042\"\r\n                    \"mem[30490] = 92215\"\r\n                    \"mask = 11X101111110110011100111X1X11X1001X1\"\r\n                    \"mem[35424] = 3594\"\r\n                    \"mem[54399] = 228781216\"\r\n                    \"mem[33796] = 149514889\"\r\n                    \"mem[29544] = 697176893\"\r\n                    \"mem[38146] = 169131\"\r\n                    \"mem[35144] = 33941748\"\r\n                    \"mem[39849] = 293\"\r\n                    \"mask = XX1101XX1X101000111011011110X0100101\"\r\n                    \"mem[11432] = 76469\"\r\n                    \"mem[19223] = 5525\"\r\n                    \"mem[45424] = 201\"\r\n                    \"mem[3709] = 5622752\"\r\n                    \"mem[64781] = 8199\"\r\n                    \"mask = 011001011X1110011111X0X00X1000000101\"\r\n                    \"mem[54292] = 949\"\r\n                    \"mem[26880] = 10542\"\r\n                    \"mem[62098] = 860\"\r\n                    \"mask = 111X010X111011111X10001X01X100X11001\"\r\n                    \"mem[22272] = 951175\"\r\n                    \"mem[20506] = 1133335\"\r\n                    \"mem[57502] = 177607519\"\r\n                    \"mask = 01100X0101X1110X01X01101X11XX1X111X0\"\r\n                    \"mem[30880] = 1070\"\r\n                    \"mem[25208] = 25110\"\r\n                    \"mem[29830] = 43106\"\r\n                    \"mem[44754] = 7361\"\r\n                    \"mask = 0X1X0101111X100XX11X0100010100X00101\"\r\n                    \"mem[57107] = 9040\"\r\n                    \"mem[19968] = 326431400\"\r\n                    \"mem[30553] = 2988\"\r\n                    \"mem[1096] = 54078\"\r\n                    \"mem[5657] = 822343\"\r\n                    \"mem[24080] = 241413\"\r\n                    \"mem[54292] = 14129212\"\r\n                    \"mask = 0X110X010X1XXX00011111X001X010X10000\"\r\n                    \"mem[43660] = 37456160\"\r\n                    \"mem[51849] = 1253870\"\r\n                    \"mask = 111001X0X1X01000111000X00XX00010X000\"\r\n                    \"mem[11663] = 66023717\"\r\n                    \"mem[26130] = 503044\"\r\n                    \"mem[44779] = 44698095\"\r\n                    \"mem[12702] = 53757\"\r\n                    \"mem[22414] = 1795507\"\r\n                    \"mask = 0111X1010111X1X0X1100X010001X0011010\"\r\n                    \"mem[39200] = 4090252\"\r\n                    \"mem[31845] = 2782402\"\r\n                    \"mem[22284] = 429\"\r\n                    \"mem[29279] = 16254306\"\r\n                    \"mask = 01010101111X0X000X1011X11XX11X1XX111\"\r\n                    \"mem[50705] = 1963\"\r\n                    \"mem[40289] = 71985\"\r\n                    \"mem[43716] = 411505145\"\r\n                    \"mem[3338] = 661\"\r\n                    \"mem[2430] = 2635\" \r\n                    |] |> String.concat \"\\n\"\r\n", "snpParentIdO": {"SnippetId" :"fdee4402-e268-413b-bcf0-9ffcace489d9"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614447901949}, {"snpId": {"SnippetId" :"76a331bf-6918-447b-8a87-f365d5b8922f"}, "snpName": "Day 14", "snpContent": "open Bitwise52bit\r\n\r\nlet inputT = \r\n    [|\r\n        \"mask = XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\"\r\n        \"mem[8] = 11\"\r\n        \"mem[7] = 101\"\r\n        \"mem[8] = 0\"\r\n    |] |> String.concat \"\\n\"\r\n\r\ntype Mask = {\r\n    andPart : int64\r\n    orPart  : int64\r\n    xPart   : int64\r\n}\r\n\r\ntype MemInst = {\r\n    address : int64\r\n    value   : int64\r\n}\r\n\r\ntype Action =\r\n| Mask of Mask\r\n| Mem  of MemInst\r\n\r\nmodule RT = Regex.Types\r\nmodule RF = Regex.Functions\r\n\r\nlet digits = RT.MoreThanOnce RT.Digit\r\n\r\nlet maskp = RT.Literal \"mask = \" + RT.Capturing (RT.Literal \"X\" / \"0\" / \"1\" |> RT.MoreThanOnce )\r\nlet memp  = RT.Literal \"mem[\"    + RT.Capturing digits + RT.Literal \"] = \" + RT.Capturing digits\r\n\r\nlet binary2int64 (binary:string) =\r\n    let mutable v = int64 0\r\n    for b in binary.ToCharArray() do\r\n        v <- v * int64 2 + if b = '1' then int64 1 else int64 0\r\n    v\r\n\r\nlet toMask (s:string) = {\r\n    orPart  = binary2int64(s.Replace(\"X\", \"0\")                  )\r\n    andPart = binary2int64(s.Replace(\"X\", \"1\")                  )\r\n    xPart   = binary2int64(s.Replace(\"1\", \"0\").Replace(\"X\", \"1\"))\r\n}\r\n\r\nprint (RF.evaluatememo maskp)\r\nprint (RF.evaluatememo memp )\r\n\r\nlet getProgram inp =\r\n    inp\r\n    |> getLines\r\n    |> Seq.choose (function\r\n        | RF.Regex maskp [      m ] -> toMask m |> Mask        |> Some\r\n        | RF.Regex memp  [ ad ; v ] -> Mem { address = int64 ad ; value = int64 v } |> Some\r\n        | _-> None\r\n    )\r\n    |> Seq.toArray\r\n\r\nlet programT = getProgram inputT  \r\nlet program  = getProgram input14\r\n\r\nlet processMem mem mask me = \r\n    mem \r\n    |> Map.add \r\n        me.address \r\n        (Or (And me.value mask.andPart) mask.orPart)\r\n\r\nlet maskT = toMask \"XXXXXXXXXXXXXXXXXXXXXXXXXXXXX1XXXX0X\"\r\n\r\nlet processSteps processMem actions =\r\n    ((toMask \"0\", Map.empty), actions)\r\n    ||> Seq.fold(fun (mask, mem) -> \r\n        function\r\n        | Mask ma -> (ma  , mem)\r\n        | Mem  me -> (mask, processMem mem mask me)\r\n    )\r\n\r\nprogramT\r\n|> processSteps processMem\r\n|> snd\r\n|> Seq.sumBy (fun kvp -> kvp.Value)\r\n|> printfn \"Test 1 = %A\"\r\n\r\nprogram\r\n|> processSteps processMem\r\n|> snd\r\n|> Seq.sumBy (fun kvp -> kvp.Value)\r\n|> printfn \"Test 1 = %A\"\r\n\r\n//printfn \"%s %s\" (System.Convert.ToString(maskT.andPart, 2)) (System.Convert.ToString(maskT.orPart, 2))\r\n\r\nlet processMem2 mem mask me =\r\n    let baseAddress = Or (Or me.address mask.orPart) mask.xPart \r\n    let rec loop addr (x:int64) (bit:int64) =\r\n        //printfn \"loop: %A %A %A\" addr x bit\r\n        let nxt = x / 2L\r\n        seq {\r\n            if nxt = int64 0 then\r\n                yield addr\r\n                if And x 1L = 1L then yield        Xor addr bit\r\n            else\r\n                let nbt = bit * 2L\r\n                yield!                       loop      addr      nxt nbt\r\n                if And x 1L = 1L then yield! loop (Xor addr bit) nxt nbt\r\n        }\r\n    (mem, loop baseAddress mask.xPart (int64 1) )\r\n    ||> Seq.fold(fun mm addr -> mm |> Map.add addr me.value )\r\n\r\nlet inputT2 = \"\"\"\r\nmask = 000000000000000000000000000000X1001X\r\nmem[42] = 100\r\nmask = 00000000000000000000000000000000X0XX\r\nmem[26] = 1\r\n\"\"\"\r\n\r\nlet programT2 = getProgram inputT2\r\n\r\nprogramT2\r\n|> processSteps processMem2\r\n|> snd\r\n|> Seq.sumBy (fun kvp -> kvp.Value)\r\n|> printfn \"Test 2 = %A\"\r\n\r\nTimeIt \"processSteps 2\" (fun () ->\r\n    program\r\n    |> processSteps processMem2\r\n    |> snd\r\n    |> Seq.sumBy (fun kvp -> kvp.Value)\r\n    |> printfn \"Part 2 = %A\"\r\n) ()\r\n\r\n", "snpParentIdO": {"SnippetId" :"fdee4402-e268-413b-bcf0-9ffcace489d9"}, "snpPredIds": [{"SnippetId" :"1671b44d-75a4-40f1-b58c-01bd5602c442"}, {"SnippetId" :"2f085669-d838-4e28-b15e-51ec3b03cb91"}, {"SnippetId" :"6468e983-68d9-4bf9-b99f-f67214e320fe"}, {"SnippetId" :"862ce3b9-c3af-479a-a029-5efc9508c1b3"}, {"SnippetId" :"d01d137e-ecdf-41f3-8b75-12cf3eb6a0da"}, {"SnippetId" :"e266d5df-ae47-4e8f-9996-6aff6239163d"}, {"SnippetId" :"f797c6df-f415-4c3b-8954-f992ac05e7f3"}], "snpProperties": [], "snpModified": 1614194232850}, {"snpId": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpName": "IO Commands", "snpContent": "module IO \r\n            =\r\n    open System\r\n    open System.IO\r\n\r\n    let inline withCatch f p =\r\n        try f p\r\n        with e -> \r\n        printfn \"Exception: %A\" e\r\n        Unchecked.defaultof<_>\r\n\r\n    let dir (d:string) =\r\n        let rec dir (d:string) =\r\n            try \r\n                if d = \"/proc/self/fd\" then Console.WriteLine \"skip /proc/self/fd\"  else\r\n                for file in Directory.GetFiles(d, \"*\") do\r\n                    printfn \"%s\"  file  \r\n                for subdir in Directory.EnumerateDirectories d do\r\n                    printfn \"%s/\" subdir\r\n                    dir           subdir\r\n            with e -> Console.WriteLine e.Message \r\n        withCatch dir d\r\n\r\n    let pwd() =\r\n        withCatch IO.Directory.GetCurrentDirectory ()\r\n        |> printfn \"Current directory is: %s\"    \r\n\r\n    let get var =\r\n        withCatch Environment.GetEnvironmentVariable var\r\n        |> printfn \"%s=%s\" var\r\n\r\n    let set var v =\r\n        try\r\n            Environment.SetEnvironmentVariable(var, v)\r\n            get var\r\n        with e -> printfn \"Exception: %A\" e\r\n\r\n    let cp a b =\r\n        try\r\n            File.Copy(a, b)\r\n            printfn \"Copied %s to %s\" a b\r\n        with e -> printfn \"Exception: %A\" e\r\n\r\n    let mkdir dir = withCatch Directory.CreateDirectory dir\r\n    let del   f   = withCatch File.Delete f\r\n \r\n    let env () =\r\n        try\r\n            Environment.GetEnvironmentVariables ()\r\n            |> Seq.cast\r\n            |> Seq.iter (fun (kvp:System.Collections.DictionaryEntry) -> \r\n                printfn \"%O = %O\" kvp.Key kvp.Value)\r\n        with e -> printfn \"Exception: %A\" e\r\n\r\n    let cat f =\r\n        withCatch File.ReadAllLines f\r\n        |> Seq.iter (printfn \"%s\")", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [["Explanation", "WASM has its own filesystem"]], "snpModified": 1613907298473}, {"snpId": {"SnippetId" :"e56ad472-a04d-4bb7-881c-f4fee2b17615"}, "snpName": "dir", "snpContent": "IO.dir \"/dlls\"", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [["Explanation", "Cannot be translated to JavaSCript"]], "snpModified": 1584506079170}, {"snpId": {"SnippetId" :"57abdcce-a752-4dd9-bc77-8f67a8674631"}, "snpName": "pwd", "snpContent": "IO.pwd ()", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613868835058}, {"snpId": {"SnippetId" :"5b6762c9-1ca9-4152-b8cc-2d45017b7eb8"}, "snpName": "env", "snpContent": "IO.env ()", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613943107820}, {"snpId": {"SnippetId" :"947195b6-620d-45b6-83b8-00f3faa79333"}, "snpName": "set", "snpContent": "IO.get \"PATH\"\r\nIO.set \"PATH\" \"/dlls/;/managed/;/tmp/\"\r\n", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613868839969}, {"snpId": {"SnippetId" :"301265ba-1a07-49db-8e1f-a7951d2891b7"}, "snpName": "cp", "snpContent": "IO.cp \"/dlls/WebSharper.Main.dll\"       \"/tmp/WebSharper.Main.dll\"\r\nIO.cp \"/dlls/WebSharper.JavaScript.dll\" \"/tmp/WebSharper.JavaScript.dll\"\r\n", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613868841699}, {"snpId": {"SnippetId" :"e51478d5-da30-4fe3-9c06-a2fadc3d30a3"}, "snpName": "del", "snpContent": "IO.del \"/tmp/day10.fs\"", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613911404466}, {"snpId": {"SnippetId" :"5c7a67fe-db17-4d95-9344-b98fe8c2d729"}, "snpName": "mkdir", "snpContent": "IO.mkdir \"/user\"", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613907332378}, {"snpId": {"SnippetId" :"3cfae2ee-95f6-420e-8a24-5ae3a673f132"}, "snpName": "cat", "snpContent": "IO.cat \"/tmp/source.fs\"", "snpParentIdO": {"SnippetId" :"eb2a35c7-8923-47e4-b8a4-8065723d3d0a"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613947567814}, {"snpId": {"SnippetId" :"a051f9be-6c5b-48c1-a8e6-72236bedd7ad"}, "snpName": "FSI Commands", "snpContent": "", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1613913410368}, {"snpId": {"SnippetId" :"ec02da6f-c380-411c-8de4-f9da7fe5420a"}, "snpName": "#time togle", "snpContent": "#time // toggle it\r\n//#time on\r\n//#time off", "snpParentIdO": {"SnippetId" :"a051f9be-6c5b-48c1-a8e6-72236bedd7ad"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613913477319}, {"snpId": {"SnippetId" :"4727654b-f2d7-44ec-8c29-ad239697e736"}, "snpName": "#help", "snpContent": "#help // doesn't work in quiet mode", "snpParentIdO": {"SnippetId" :"a051f9be-6c5b-48c1-a8e6-72236bedd7ad"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1613944085259}, {"snpId": {"SnippetId" :"8ba0d4e7-995b-451a-ab2c-ddfdb8a11652"}, "snpName": "Clean CodePresence", "snpContent": "CodePresence.present <- Map []\r\n", "snpParentIdO": {"SnippetId" :"a051f9be-6c5b-48c1-a8e6-72236bedd7ad"}, "snpPredIds": [], "snpProperties": [], "snpModified": 1614448929799}, {"snpId": {"SnippetId" :"b99cd0d5-dabe-4163-afdc-8e5a7ab95182"}, "snpName": "Free FSI", "snpContent": "//#time \"on\"\r\n\r\n//\"data 1 10 20 30 40\".Split [|' '|] \r\n//|> TimeIt \"doFibos\" doFibos\r\n//#r \"/dlls/print4.dll\"\r\n//Print.Util.print \"Hi\"\r\n\r\ntype Hello = Hello of int\r\n\r\nHello 6767\r\n|> print\r\n//fibo 14\r\n//|> print\r\n\r\nlet input =\r\n    let v =  [|\r\n        ( 11063,  22004), (-1, -2)\r\n        ( 32870, -21613), (-3,  2)\r\n        ( 43767,  22003), (-4, -2)\r\n        ( 32865, -10705), (-3,  1)\r\n        ( 21984, -43419), (-2,  4)\r\n        ( 43775,  11100), (-4, -1)\r\n        ( 43770, -43425), (-4,  4)\r\n        ( 32881,  22004), (-3, -2)\r\n        ( 32899,  11102), (-3, -1)\r\n        ( 43764,  11098), (-4, -1)\r\n        ( 43805,  32912), (-4, -3)\r\n        ( 54680, -32516), (-5,  3)\r\n        ( 32851,  11107), (-3, -1)\r\n        ( 54696,  22012), (-5, -2)\r\n        ( 43794,  43816), (-4, -4)\r\n        (-54388, -43427), ( 5,  4)\r\n        (-43465,  43815), ( 4, -4)\r\n        ( 11036,  32916), (-1, -3)\r\n        ( 43798,  54726), (-4, -5)\r\n        (-10722,  54727), ( 1, -5)\r\n        ( 32897, -54331), (-3,  5)\r\n        ( 11043, -32520), (-1,  3)\r\n        ( 32868, -10706), (-3,  1)\r\n        (-10760,  54718), ( 1, -5)\r\n        (-43449, -21611), ( 4,  2)\r\n        ( 43751,  11105), (-4, -1)\r\n        (-21625,  43817), ( 2, -4)\r\n        ( 54685,  54723), (-5, -5)\r\n        ( 54711, -43418), (-5,  4)\r\n        (-54375,  32914), ( 5, -3)\r\n        ( 21939,  32908), (-2, -3)\r\n        (-43477, -10703), ( 4,  1)\r\n        ( 54699,  22012), (-5, -2)\r\n        (-54372,  43819), ( 5, -4)\r\n        ( 32841, -21609), (-3,  2)\r\n        (-32533,  43816), ( 3, -4)\r\n        (-54399,  54722), ( 5, -5)\r\n        (-21649, -21613), ( 2,  2)\r\n        ( 43767,  11107), (-4, -1)\r\n        (-21636,  11106), ( 2, -1)\r\n        ( 21964, -10705), (-2,  1)\r\n        ( 54663, -10712), (-5,  1)\r\n        ( 32865,  43818), (-3, -4)\r\n        ( 21992,  22009), (-2, -2)\r\n        ( 32881, -54331), (-3,  5)\r\n        (-32553, -32516), ( 3,  3)\r\n        (-54381,  54723), ( 5, -5)\r\n        (-32572,  32908), ( 3, -3)\r\n        ( 43764, -54327), (-4,  5)\r\n        (-43482, -32519), ( 4,  3)\r\n        (-43494, -54325), ( 4,  5)\r\n        ( 11060, -21612), (-1,  2)\r\n        (-54350, -10707), ( 5,  1)\r\n        (-32568,  54719), ( 3, -5)\r\n        (-43458,  11104), ( 4, -1)\r\n        (-32548, -54328), ( 3,  5)\r\n        (-32589,  54725), ( 3, -5)\r\n        ( 43786,  32911), (-4, -3)\r\n        ( 21940, -32521), (-2,  3)\r\n        ( 32860, -54323), (-3,  5)\r\n        (-54363, -21610), ( 5,  2)\r\n        ( 32846,  54720), (-3, -5)\r\n        (-54396, -32517), ( 5,  3)\r\n        (-32560,  22006), ( 3, -2)\r\n        (-32549, -10706), ( 3,  1)\r\n        ( 54711, -21613), (-5,  2)\r\n        (-21676, -10704), ( 2,  1)\r\n        ( 32878,  11099), (-3, -1)\r\n        ( 32886, -10710), (-3,  1)\r\n        (-21628,  54719), ( 2, -5)\r\n        ( 43802,  54723), (-4, -5)\r\n        (-43485, -21608), ( 4,  2)\r\n        (-10719, -10703), ( 1,  1)\r\n        ( 11043, -21617), (-1,  2)\r\n        (-54343, -54328), ( 5,  5)\r\n        (-10746, -21614), ( 1,  2)\r\n        (-54399, -54326), ( 5,  5)\r\n        ( 43794,  32913), (-4, -3)\r\n        ( 21984, -32519), (-2,  3)\r\n        ( 43770,  43813), (-4, -4)\r\n        ( 32878, -21616), (-3,  2)\r\n        ( 21965, -43424), (-2,  4)\r\n        (-10746, -32519), ( 1,  3)\r\n        ( 11088, -54328), (-1,  5)\r\n        (-32541, -10710), ( 3,  1)\r\n        ( 32873, -10703), (-3,  1)\r\n        ( 32846, -10706), (-3,  1)\r\n        ( 11087,  32916), (-1, -3)\r\n        ( 54667, -21610), (-5,  2)\r\n        ( 21984, -10707), (-2,  1)\r\n        ( 11065, -10708), (-1,  1)\r\n        ( 54708, -54332), (-5,  5)\r\n        (-54362, -43418), ( 5,  4)\r\n        (-32549,  11106), ( 3, -1)\r\n        ( 54684, -10705), (-5,  1)\r\n        (-54347, -54331), ( 5,  5)\r\n        ( 43765, -21613), (-4,  2)\r\n        ( 11082,  54725), (-1, -5)\r\n        ( 11050, -10703), (-1,  1)\r\n        ( 21948, -32514), (-2,  3)\r\n        (-21648, -32519), ( 2,  3)\r\n        (-43474,  54727), ( 4, -5)\r\n        (-54343, -43418), ( 5,  4)\r\n        ( 11031, -43425), (-1,  4)\r\n        ( 11076,  32909), (-1, -3)\r\n        ( 11059, -54325), (-1,  5)\r\n        (-43493, -54327), ( 4,  5)\r\n        ( 54694, -32518), (-5,  3)\r\n        (-54391, -54324), ( 5,  5)\r\n        (-21660, -32521), ( 2,  3)\r\n        ( 54699, -10706), (-5,  1)\r\n        (-54383,  11106), ( 5, -1)\r\n        (-10755,  54723), ( 1, -5)\r\n        (-10720, -21608), ( 1,  2)\r\n        (-21631, -54332), ( 2,  5)\r\n        (-54378,  32910), ( 5, -3)\r\n        (-10759, -10712), ( 1,  1)\r\n        ( 43786, -32519), (-4,  3)\r\n        (-32570,  54718), ( 3, -5)\r\n        (-32540, -43423), ( 3,  4)\r\n        (-21632, -21616), ( 2,  2)\r\n        (-10718, -32522), ( 1,  3)\r\n        ( 11060,  11103), (-1, -1)\r\n        (-43446, -43427), ( 4,  4)\r\n        (-21660,  43820), ( 2, -4)\r\n        ( 43773, -43422), (-4,  4)\r\n        (-10735,  22007), ( 1, -2)\r\n        ( 32846,  43820), (-3, -4)\r\n        (-10779,  54720), ( 1, -5)\r\n        (-54394, -43423), ( 5,  4)\r\n        (-10747,  32917), ( 1, -3)\r\n        (-10755,  32917), ( 1, -3)\r\n        ( 54680, -32515), (-5,  3)\r\n        ( 11079,  32916), (-1, -3)\r\n        ( 43803,  54727), (-4, -5)\r\n        ( 11082,  32915), (-1, -3)\r\n        ( 54710,  32908), (-5, -3)\r\n        ( 54652, -10711), (-5,  1)\r\n        (-10750,  22012), ( 1, -2)\r\n        ( 43758,  32909), (-4, -3)\r\n        (-10759,  54721), ( 1, -5)\r\n        (-32541,  11105), ( 3, -1)\r\n        (-54349,  54724), ( 5, -5)\r\n        (-43442, -54331), ( 4,  5)\r\n        (-32577, -32519), ( 3,  3)\r\n        (-54399, -21611), ( 5,  2)\r\n        ( 21952, -21617), (-2,  2)\r\n        ( 11087, -10710), (-1,  1)\r\n        ( 21994, -54323), (-2,  5)\r\n        ( 11076, -21614), (-1,  2)\r\n        ( 11064, -32515), (-1,  3)\r\n        (-43476,  11107), ( 4, -1)\r\n        ( 32869, -32514), (-3,  3)\r\n        ( 11036,  32911), (-1, -3)\r\n        (-32541,  43819), ( 3, -4)\r\n        (-10767,  43815), ( 1, -4)\r\n        ( 43746,  22008), (-4, -2)\r\n        (-10775,  11103), ( 1, -1)\r\n        (-32585, -32521), ( 3,  3)\r\n        (-54359,  32916), ( 5, -3)\r\n        ( 54652,  11099), (-5, -1)\r\n        (-32549, -54323), ( 3,  5)\r\n        ( 43775, -10703), (-4,  1)\r\n        ( 32877, -54326), (-3,  5)\r\n        ( 11036, -43422), (-1,  4)\r\n        ( 54702,  22010), (-5, -2)\r\n        ( 32867,  43816), (-3, -4)\r\n        ( 43772,  22007), (-4, -2)\r\n        (-10742,  54719), ( 1, -5)\r\n        ( 54696, -10712), (-5,  1)\r\n        ( 11071, -21613), (-1,  2)\r\n        ( 43797,  54720), (-4, -5)\r\n        ( 21965, -32514), (-2,  3)\r\n        ( 54691,  54725), (-5, -5)\r\n        ( 21965,  22010), (-2, -2)\r\n        (-10723,  43821), ( 1, -4)\r\n        ( 54672,  43814), (-5, -4)\r\n        ( 43775,  54726), (-4, -5)\r\n        (-54351, -10707), ( 5,  1)\r\n        ( 21976, -10703), (-2,  1)\r\n        (-43474, -43424), ( 4,  4)\r\n        (-43489,  11101), ( 4, -1)\r\n        (-10755, -32513), ( 1,  3)\r\n        (-54362,  32916), ( 5, -3)\r\n        (-21655, -43424), ( 2,  4)\r\n        ( 43791, -32513), (-4,  3)\r\n        ( 21960,  22009), (-2, -2)\r\n        (-54351,  11102), ( 5, -1)\r\n        ( 54707, -32514), (-5,  3)\r\n        ( 21985, -32517), (-2,  3)\r\n        ( 32862,  11100), (-3, -1)\r\n        ( 32874,  32914), (-3, -3)\r\n        (-21636, -54332), ( 2,  5)\r\n        ( 21961,  54720), (-2, -5)\r\n        (-54394, -43423), ( 5,  4)\r\n        ( 21948, -21616), (-2,  2)\r\n        (-32584, -21614), ( 3,  2)\r\n        ( 32886,  22008), (-3, -2)\r\n        (-21627, -32522), ( 2,  3)\r\n        (-43460, -32517), ( 4,  3)\r\n        ( 54696, -32519), (-5,  3)\r\n        (-32560, -32522), ( 3,  3)\r\n        (-32578,  54718), ( 3, -5)\r\n        (-54399,  54723), ( 5, -5)\r\n        (-43470,  22003), ( 4, -2)\r\n        ( 11036,  11104), (-1, -1)\r\n        (-10760, -43427), ( 1,  4)\r\n        (-54387, -21611), ( 5,  2)\r\n        (-32530, -21608), ( 3,  2)\r\n        ( 43799,  32908), (-4, -3)\r\n        (-10763, -32513), ( 1,  3)\r\n        (-54378,  43813), ( 5, -4)\r\n        (-54394, -54325), ( 5,  5)\r\n        ( 43796, -21611), (-4,  2)\r\n        ( 54675,  54725), (-5, -5)\r\n        (-32589, -32513), ( 3,  3)\r\n        (-21684, -54330), ( 2,  5)\r\n        ( 43780, -10708), (-4,  1)\r\n        (-43449, -54329), ( 4,  5)\r\n        (-54343,  43819), ( 5, -4)\r\n        ( 32898,  54722), (-3, -5)\r\n        ( 21976, -21612), (-2,  2)\r\n        ( 54668,  54718), (-5, -5)\r\n        ( 11044, -10712), (-1,  1)\r\n        ( 11063, -32522), (-1,  3)\r\n        ( 11071, -43423), (-1,  4)\r\n        ( 54704,  54727), (-5, -5)\r\n        ( 54651,  11101), (-5, -1)\r\n        ( 54656, -43418), (-5,  4)\r\n        ( 54696, -10711), (-5,  1)\r\n        ( 32899,  54718), (-3, -5)\r\n        (-21672, -54328), ( 2,  5)\r\n        ( 54684,  32910), (-5, -3)\r\n        (-54367,  11099), ( 5, -1)\r\n        ( 11075,  11102), (-1, -1)\r\n        (-32554,  22008), ( 3, -2)\r\n        ( 54712, -10703), (-5,  1)\r\n        (-10743,  11100), ( 1, -1)\r\n        ( 11076,  43820), (-1, -4)\r\n        ( 32881, -43427), (-3,  4)\r\n        (-32577, -43426), ( 3,  4)\r\n        ( 32870,  54727), (-3, -5)\r\n        (-32536,  43822), ( 3, -4)\r\n        (-32573,  22012), ( 3, -2)\r\n        ( 32873, -10711), (-3,  1)\r\n        (-21655, -54325), ( 2,  5)\r\n        ( 43791,  43819), (-4, -4)\r\n        (-54388,  22003), ( 5, -2)\r\n        ( 54712,  32908), (-5, -3)\r\n        (-43491, -32517), ( 4,  3)\r\n        ( 21960,  11106), (-2, -1)\r\n        ( 32886,  11100), (-3, -1)\r\n        (-10767,  43819), ( 1, -4)\r\n        (-10739, -21615), ( 1,  2)\r\n        (-21624,  54722), ( 2, -5)\r\n        ( 32841,  54725), (-3, -5)\r\n        (-32549, -43421), ( 3,  4)\r\n        ( 11079, -21617), (-1,  2)\r\n        (-54378,  43813), ( 5, -4)\r\n        ( 32889, -21614), (-3,  2)\r\n        ( 11064,  32915), (-1, -3)\r\n        (-54349,  32914), ( 5, -3)\r\n        ( 43779, -10706), (-4,  1)\r\n        (-54387,  22009), ( 5, -2)\r\n        ( 21981, -32520), (-2,  3)\r\n        (-43493, -32517), ( 4,  3)\r\n        (-43470,  11101), ( 4, -1)\r\n        (-32549, -32514), ( 3,  3)\r\n        ( 21952,  32916), (-2, -3)\r\n        ( 54675, -21613), (-5,  2)\r\n        (-54367, -21608), ( 5,  2)\r\n        (-10720,  32912), ( 1, -3)\r\n        (-54399, -54327), ( 5,  5)\r\n        ( 11050, -21613), (-1,  2)\r\n        ( 32886, -43420), (-3,  4)\r\n        ( 21962, -10708), (-2,  1)\r\n        (-32584,  11103), ( 3, -1)\r\n        ( 43748,  32913), (-4, -3)\r\n        (-32565, -10703), ( 3,  1)\r\n        ( 21984, -32520), (-2,  3)\r\n        (-10768, -32513), ( 1,  3)\r\n        ( 32843,  43813), (-3, -4)\r\n        ( 21965, -54331), (-2,  5)\r\n        (-32581, -10705), ( 3,  1)\r\n        (-10739,  32910), ( 1, -3)\r\n        ( 54709,  32917), (-5, -3)\r\n        (-54378,  22012), ( 5, -2)\r\n        ( 43748,  11098), (-4, -1)\r\n        (-21647, -10712), ( 2,  1)\r\n        ( 11058, -10706), (-1,  1)\r\n        ( 11087, -54323), (-1,  5)\r\n        ( 32898, -10708), (-3,  1)\r\n        (-54387,  54718), ( 5, -5)\r\n        ( 32889,  11104), (-3, -1)\r\n        ( 43794, -10710), (-4,  1)\r\n        (-32569, -32513), ( 3,  3)\r\n        ( 21996,  11098), (-2, -1)\r\n        (-21679, -43422), ( 2,  4)\r\n        (-32553, -43424), ( 3,  4)\r\n        (-10761, -32522), ( 1,  3)\r\n        (-54372,  54723), ( 5, -5)\r\n        ( 21953,  11104), (-2, -1)\r\n        ( 11047,  22003), (-1, -2)\r\n        (-21639,  32917), ( 2, -3)\r\n        (-43444,  32911), ( 4, -3)\r\n        ( 54653,  11103), (-5, -1)\r\n        ( 43791,  54724), (-4, -5)\r\n        (-21672, -21610), ( 2,  2)\r\n        (-54367,  11106), ( 5, -1)\r\n        ( 32866,  22004), (-3, -2)\r\n        ( 32874,  43819), (-3, -4)\r\n        (-32533,  43820), ( 3, -4)\r\n        (-21648,  22010), ( 2, -2)\r\n        (-43493, -21616), ( 4,  2)\r\n        ( 43763,  43813), (-4, -4)\r\n        (-54359,  54720), ( 5, -5)\r\n        ( 43794,  43814), (-4, -4)\r\n        ( 54653, -54327), (-5,  5)\r\n        (-10739,  11099), ( 1, -1)\r\n        (-32577,  22008), ( 3, -2)\r\n        ( 54696, -32518), (-5,  3)\r\n        ( 11076,  54722), (-1, -5)\r\n        (-10776, -32522), ( 1,  3)\r\n        (-54358,  32912), ( 5, -3)\r\n        ( 11087, -10712), (-1,  1)\r\n        ( 43758, -21613), (-4,  2)\r\n        ( 54693, -54328), (-5,  5)\r\n        (-21628,  43820), ( 2, -4)\r\n        (-54343,  54725), ( 5, -5)\r\n        ( 21940, -54331), (-2,  5)\r\n        (-43492, -43427), ( 4,  4)\r\n        ( 21986,  43816), (-2, -4)\r\n        ( 11060, -10704), (-1,  1)\r\n        ( 54696,  11106), (-5, -1)\r\n        ( 32876,  32913), (-3, -3)\r\n        ( 43787,  22007), (-4, -2)\r\n        (-32586,  22008), ( 3, -2)\r\n        ( 32899, -10703), (-3,  1)\r\n    |] \r\n    sprintf \"%A\" v, v |> Seq.map (sprintf \"%A\") |> String.concat \"\\n\"\r\n\r\ninput\r\n|> print", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1613907846464}, {"snpId": {"SnippetId" :"944419f7-a931-440d-a749-ba1b75579855"}, "snpName": "Hello 6767", "snpContent": "open FSharp.Data.UnitSystems.SI.UnitNames\r\n\r\ntype Hello = Hello of int<meter>\r\n\r\nHello 6767<meter>\r\n\r\n", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1613942267529}, {"snpId": {"SnippetId" :"1e796dfb-14d2-4c87-af1c-48ea110271b1"}, "snpName": "", "snpContent": "namespace test10\r\n", "snpParentIdO": null, "snpPredIds": [], "snpProperties": [], "snpModified": 1613946661470}], "modified": 1614558805819, "collapsed": [{"SnippetId" :"a051f9be-6c5b-48c1-a8e6-72236bedd7ad"}, {"SnippetId" :"b7ddad62-84cf-4a16-96f3-96150595f711"}, {"SnippetId" :"f981b409-39d9-45a1-adf2-7337003ccff8"}]}