{
"version": 3,
"sourceRoot": "Source",
"sources": ["testing/testing.fs", "WebSharper.Collections/BalancedTree.fs", "WebSharper.Collections/Pair.fs", "WebSharper.Collections/Map.fs", "WebSharper.Collections/MapModule.fs", "WebSharper.Collections/Set.fs", "WebSharper.Collections/SetModule.fs", "WebSharper.Collections/ResizeArray.fs", "WebSharper.Collections/LinkedList.fs", "WebSharper.Collections/Linq.fs", "WebSharper.Collections/Query.fs", "WebSharper.Main/Promise.fs", "WebSharper.Main/JavaScript.Pervasives.fs", "WebSharper.Main/Json.fs", "WebSharper.Main/Remoting.fs", "WebSharper.Main/Html.fs", "WebSharper.Main/Comparers.fs", "WebSharper.Main/Utils.fs", "WebSharper.Main/Concurrency.fs", "WebSharper.Main/Enumerator.fs", "WebSharper.Main/CollectionInternals.fs", "WebSharper.Main/Object.fs", "WebSharper.Main/IntrinsicFunctions.fs", "WebSharper.Main/Array.fs", "WebSharper.Main/ArrayModule.fs", "WebSharper.Main/Array2DModule.fs", "WebSharper.Main/Async.fs", "WebSharper.Main/Char.fs", "WebSharper.Main/CommonExtensions.fs", "WebSharper.Main/DateTime.fs", "WebSharper.Main/Delegate.fs", "WebSharper.Main/Dictionary.fs", "WebSharper.Main/Exception.fs", "WebSharper.Main/ExtraTopLevelOperators.fs", "WebSharper.Main/Guid.fs", "WebSharper.Main/HashSet.fs", "WebSharper.Main/Interfaces.fs", "WebSharper.Main/LazyExtensions.fs", "WebSharper.Main/List.fs", "WebSharper.Main/ListModule.fs", "WebSharper.Main/Nullable.fs", "WebSharper.Main/Operators.fs", "WebSharper.Main/OperatorIntrinsics.fs", "WebSharper.Main/OptionModule.fs", "WebSharper.Main/Queue.fs", "WebSharper.Main/Random.fs", "WebSharper.Main/ResultModule.fs", "WebSharper.Main/RuntimeHelpers.fs", "WebSharper.Main/SeqModule.fs", "WebSharper.Main/Stack.fs", "WebSharper.Main/String.fs", "WebSharper.Main/Task.fs", "WebSharper.Main/Unchecked.fs", "WebSharper.Main/ValueOption.fs", "WebSharper.Main/Primitives.fs", "WebSharper.Web/ClientSideJson.fs", "WebSharper.Web/Control.fs", "WebSharper.Sitelets/Router.fs", "WebSharper.Control/Observer.fs", "WebSharper.Control/HotStream.fs", "WebSharper.Control/Observable.fs", "WebSharper.Control/ObservableModule.fs", "WebSharper.Control/Event.fs", "WebSharper.Control/FSharpEvent.fs", "WebSharper.Control/EventModule.fs", "WebSharper.Control/MailboxProcessor.fs", "WebSharper.UI/Abbrev.fs", "WebSharper.UI/AppendList.fs", "WebSharper.UI/DomUtility.fs", "WebSharper.UI/Trie.fs", "WebSharper.UI/Snap.fs", "WebSharper.UI/Reactive.fs", "WebSharper.UI/Models.fs", "WebSharper.UI/ReactiveExtensions.fs", "WebSharper.UI/Animation.fs", "WebSharper.UI/Attr.fs", "WebSharper.UI/Attr.Client.fs", "WebSharper.UI/Doc.Proxy.fs", "WebSharper.UI/Templates.fs", "WebSharper.UI/Flow.fs", "WebSharper.UI/HTML.fs", "WebSharper.UI/Router.fs", "WebSharper.UI/Routing.fs", "WebSharper.UI/Input.fs"],
"sourcesContent": ["#nowarn \"3242\"\n#nowarn \"42\"\n////-d:FSharpStation1573054420242 -d:TEE -d:WEBSHARPER\n//#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\"\n//#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\"\n//#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Web.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n//#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n//#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n//#nowarn \"3242\"\n//#nowarn \"42\"\n/// Root namespace for all code\n//#define FSharpStation1573054420242\n#if INTERACTIVE\nmodule FsRoot   =\n#else\nnamespace FsRoot\n#endif\n\n    #if !NETSTANDARD20\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\"\n    //#I @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\Facades\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Core.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.dll\"\n    //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\System.Web.dll\"\n    \n    #if WEBSHARPER\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\"\n    //#I @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\"\n    \n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Core.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Collections.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.InterfaceGenerator.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Main.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JQuery.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.JavaScript.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Web.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Sitelets.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper\\lib\\net461\\WebSharper.Control.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\HtmlAgilityPack.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Runtime.dll\"\n    //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\packages\\WebSharper.UI\\lib\\net461\\WebSharper.UI.Templating.Common.dll\"\n    #endif\n    #endif\n    #if WEBSHARPER\n    //#nowarn \"3242\" \n    \n    open WebSharper\n    //open WebSharper.JavaScript\n    open WebSharper.UI\n    open WebSharper.UI.Client\n    type on   = WebSharper.UI.Html.on\n    type attr = WebSharper.UI.Html.attr\n    #else\n    /// dummy WebSharper definition in order to avoid having to use #if WEBSHARPER all the time\n    module WebSharper =\n        type RpcAttribute() =\n            inherit System.Attribute()\n            let a = 1\n        type JavaScriptAttribute(translate:bool) =\n            inherit System.Attribute()\n            let a = 1\n            new() = JavaScriptAttribute true\n        type InlineAttribute(code:string) =\n            inherit System.Attribute()\n            let a = 1\n            new() = InlineAttribute \"\"\n        type DirectAttribute(code:string) =\n            inherit System.Attribute()\n            let a = 1\n    \n    open WebSharper\n    \n    #endif\n    \n        /// Essentials that can be converted to JavaScript with WebSharper\n        [< JavaScriptExport ; AutoOpen >]\n        module Library = \n            let Error = Result.Error\n        \n            let [<Inline>] inline swap f a b = f b a\n            \n            /// swap: for use with operators: [1..5] |> List.map (__ (/) 2)\n            let [<Inline>] inline __   f a b = f b a\n            \n            /// taken from http://fssnip.net/7UH/title/Generalized-Units-of-Measure-Revisited-using-method-overloading\n            //#nowarn \"42\"\n            [<AutoOpen>]\n            module UoM = \n            \n                open System\n            \n                [<MeasureAnnotatedAbbreviation>] type bool<          [<Measure>] 'm> = bool\n                [<MeasureAnnotatedAbbreviation>] type uint64<        [<Measure>] 'm> = uint64\n                [<MeasureAnnotatedAbbreviation>] type Guid<          [<Measure>] 'm> = Guid\n                [<MeasureAnnotatedAbbreviation>] type string<        [<Measure>] 'm> = string\n                [<MeasureAnnotatedAbbreviation>] type TimeSpan<      [<Measure>] 'm> = TimeSpan\n                [<MeasureAnnotatedAbbreviation>] type DateTime<      [<Measure>] 'm> = DateTime\n                [<MeasureAnnotatedAbbreviation>] type DateTimeOffset<[<Measure>] 'm> = DateTimeOffset\n            \n                module private Unsafe = let inline cast<'a, 'b> (a : 'a) : 'b = (# \"\" a : 'b #)\n            \n                type UoM =\n                    static member inline Tag<  [<Measure>]'m                 > (x : bool               ) : bool<          'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : int                ) : int<           'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : int64              ) : int64<         'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : uint64             ) : uint64<        'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : float              ) : float<         'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : decimal            ) : decimal<       'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : Guid               ) : Guid<          'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : string             ) : string<        'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : TimeSpan           ) : TimeSpan<      'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : DateTime           ) : DateTime<      'm > = Unsafe.cast x\n                    static member inline Tag<  [<Measure>]'m                 > (x : DateTimeOffset     ) : DateTimeOffset<'m > = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : bool<          'm >) : bool                = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : int<           'm >) : int                 = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : int64<         'm >) : int64               = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : uint64<        'm >) : uint64              = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : float<         'm >) : float               = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : decimal<       'm >) : decimal             = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : Guid<          'm >) : Guid                = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : string<        'm >) : string              = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : TimeSpan<      'm >) : TimeSpan            = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : DateTime<      'm >) : DateTime            = Unsafe.cast x\n                    static member inline Untag<[<Measure>]'m                 > (x : DateTimeOffset<'m >) : DateTimeOffset      = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : bool<          'm1>) : bool<          'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : int<           'm1>) : int<           'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : int64<         'm1>) : int64<         'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : uint64<        'm1>) : uint64<        'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : float<         'm1>) : float<         'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : decimal<       'm1>) : decimal<       'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : Guid<          'm1>) : Guid<          'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : string<        'm1>) : string<        'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : TimeSpan<      'm1>) : TimeSpan<      'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : DateTime<      'm1>) : DateTime<      'm2> = Unsafe.cast x\n                    static member inline Cast< [<Measure>]'m1, [<Measure>]'m2> (x : DateTimeOffset<'m1>) : DateTimeOffset<'m2> = Unsafe.cast x\n            \n            (*\n                [<Measure>] type m\n                [<Measure>] type n\n            \n                let x = UoM.tag<m> \"string\"\n                let y = UoM.cast<m,n> x\n                let z = UoM.untag y\n            *)\n            \n            type StringId<'T> = StringId of string \n            with\n                member this.Id = match this with StringId v -> v\n            \n            type GuidId<'T> = GuidId of System.Guid\n            with\n                member this.Id = match this with GuidId v -> v\n            \n            /// call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |> tee (printfn \"value = %d\") |> doSomethingElse\n            let [<Inline>] inline tee f v = f v ; v\n            \n            /// tee: call a function but return the input value\n            /// for logging, debugging\n            /// use: (5 * 8) |!> printfn \"value = %d\" |> doSomethingElse\n            let [<Inline>] inline  (|>!) v f   = f v ; v\n            let [<Inline>] inline  (>>!) g f   = g >> fun v -> f v ; v\n            \n            let inline print v = \n                match box v with\n                | :? string as s -> printfn \"%s\" s\n                | __             -> printfn \"%A\" v\n            \n            //#define TEE\n            \n            let [< Inline \"new Date(0).getTime()\" >] Utc1970_01_01                 = System.DateTime(1970,1,1,0,0,0,System.DateTimeKind.Utc)\n            let [< Inline \"$d\"                    >] date2Long (d:System.DateTime) = d.Subtract(Utc1970_01_01).Ticks / 10000L\n            let [< Inline \"$l\"                    >] long2Date (l:int64          ) = Utc1970_01_01.Add(System.TimeSpan(l * 10000L) )\n            \n            \n            [< Inline \"(function (n) { return n.getFullYear() + '-' + ('0'+(n.getMonth()+1)).slice(-2) + '-' +  ('0'+n.getDate()).slice(-2) + ' '+('0'+n.getHours()).slice(-2)+ ':'+('0'+n.getMinutes()).slice(-2)+ ':'+('0'+n.getSeconds()).slice(-2)+ ':'+('00'+n.getMilliseconds()).slice(-3) })(new Date(Date.now()))\" >]\n            let nowStamp() = \n                let t = System.DateTime.UtcNow // in two steps to avoid Warning: The value has been copied to ensure the original is not mutated\n                t.ToString(\"yyyy-MM-dd HH:mm:ss.fff\", System.Globalization.CultureInfo.InvariantCulture)\n            \n            let [<Inline>] inline traceT t v = tee (sprintf \"%A\" >> (fun s -> s.[..min 100 s.Length-1]) >> printfn \"%s %s: %A\" (nowStamp()) t) v\n            let [<Inline>] inline trace   v = traceT \"trace\" v\n            let [<Inline>] inline traceI  v = trace          v |> ignore\n            \n            module Log =\n                let [<Inline>] inline In     n f   =      (traceT (sprintf \"%s in \" n)) >> f\n                let [<Inline>] inline Out    n f   = f >> (traceT (sprintf \"%s out\" n))\n                let [<Inline>] inline InA    n f p = async { return! In  n f p }\n                let [<Inline>] inline OutA   n f p = async { return! Out n f p }\n                let [<Inline>] inline InOut  n     = In  n >> Out  n\n                let [<Inline>] inline InOutA n f p = async {\n                    let!   r = InA n f  p\n                    do         Out n id r |> ignore\n                    return r \n                  }\n            \n                let [<Inline>] inline TimeIt n f p =\n                    printfn \"Starting %s\" n\n                    let start = System.DateTime.UtcNow.Ticks\n                    f p\n                    let elapsedSpan = new System.TimeSpan(System.DateTime.UtcNow.Ticks - start)\n                    print <| elapsedSpan.ToString()\n            \n            \n            // issues with websharper Type not found in JavaScript compilation: System.Collections.Generic.IDictionary`2\n            #if !WEBSHARPER\n            module IDict =\n                let inline tryGetValue key (dict:System.Collections.Generic.IDictionary<_, _>) =\n                    let mutable res = Unchecked.defaultof<_>\n                    if dict.TryGetValue(key, &res)\n                    then Some res \n                    else None\n                let add          key v (dict:System.Collections.Generic.IDictionary<_, _>) = if dict.ContainsKey key then      dict.[key] <- v else dict.Add(key, v)\n            #endif\n            \n            module Dict =\n                let [<Inline>] inline tryGetValue key (dict:System.Collections.Generic. Dictionary<_, _>) =\n                    let mutable res = Unchecked.defaultof<_>\n                    if dict.TryGetValue(key, &res)\n                    then Some res \n                    else None\n                let add          key v (dict:System.Collections.Generic. Dictionary<_, _>) = if dict.ContainsKey key then      dict.[key] <- v else dict.Add(key, v)\n            \n            module LDict =\n                let [<Inline>] inline containsKey  key  dict = (^a : (member ContainsKey : _ -> bool) (dict, key))\n                //let inline item         key  dict = (^a : (member get_Item    : _ -> _   ) (dict, key))\n                let [<Inline>] inline tryGetValue fitem key  dict =\n                    if containsKey key dict then Some (fitem key)\n                    else None\n            \n            \n            /// Extensible type for error messages, warnings and exceptions\n            type ResultMessage<'M> =\n                | NoMsg\n                | ErrorMsg  of string\n                | Warning   of string\n                | Info      of string\n                | Message   of 'M\n                | ExceptMsg of string * string\n                | RMessages of ResultMessage<'M> []\n                with \n                override msg.ToString() =\n                    match msg with\n                    | NoMsg          ->  \"\"\n                    | ErrorMsg  m    ->  m      |> sprintf \"Error    : %s\"\n                    | Warning   m    ->  m      |> sprintf \"Warning  : %s\"\n                    | Info      m    ->  m\n                    | Message   m    ->  m      |> sprintf \"%O\"\n                    | ExceptMsg(m,p) -> (m, p) ||> sprintf \"Exception: %s, %s\"\n                    | RMessages ms   ->  ms     |> Seq.filter (function NoMsg -> false |_-> true) |> Seq.map (fun m -> m.ToString()) |> String.concat \"\\n\"\n            \n            [< AutoOpen >]\n            module ResultMessageHelpers =\n                let inline errorMsgf fmt = Printf.ksprintf ErrorMsg fmt\n                let inline warningf  fmt = Printf.ksprintf Warning  fmt\n                let inline infof     fmt = Printf.ksprintf Info     fmt\n            \n            module ResultMessage =\n            \n                let inline noMsg    msg = msg |> function NoMsg -> true |_-> false\n                let inline exclnoMsg ms = ms |> Seq.filter (noMsg >> not)\n                /// converts Messages to other type of ResultMessage\n                let rec bindMessage f msg = \n                    match msg with\n                    | NoMsg          ->  NoMsg\n                    | Message   m    ->  f         m\n                    | ErrorMsg  m    ->  ErrorMsg  m\n                    | Info      m    ->  Info      m\n                    | Warning   m    ->  Warning   m\n                    | ExceptMsg(m,p) ->  ExceptMsg(m,p)\n                    | RMessages ms   ->  ms     |> Array.map (bindMessage f) |> RMessages\n            \n                /// a Message is converted to ErrorMsg\n                let freeMessageF f msg = msg |> bindMessage f\n                /// a Message is converted to ErrorMsg\n                let freeMessage    msg = msg |> freeMessageF (sprintf \"%O\" >> ErrorMsg)\n                /// a Message is converted to Warning\n                let freeMessageW   msg = msg |> freeMessageF (sprintf \"%O\" >> Warning )\n                /// a Message is converted to Info\n                let freeMessageI   msg = msg |> freeMessageF (sprintf \"%O\" >> Info    )\n            \n                let rec isInfoF f msg =\n                    match msg with\n                    | Info      _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (isInfoF f)\n                    | _              ->  false\n                /// a Message is not considered Info\n                let isInfo  msg = msg |> isInfoF (fun _ -> false)\n                /// a Message is considered Info\n                let isInfoI msg = msg |> isInfoF (fun _ -> true )\n            \n                let rec isWarningOrInfoF f msg =\n                    match msg with\n                    | Warning   _    ->  true\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.forall (fun m -> isWarningOrInfoF f m || isInfoF f m)\n                    | _              ->  false\n                /// a Message is not considered a Warning\n                let isWarningOrInfo  msg = msg |> isWarningOrInfoF (fun _ -> false)\n                /// a Message is considered a Warning\n                let isWarningOrInfoW msg = msg |> isWarningOrInfoF (fun _ -> true )\n            \n                let rec isFatalF f msg =\n                    match msg with\n                    | NoMsg\n                    | Info      _    \n                    | Warning   _    ->  false\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> Seq.exists (isFatalF f)\n                    | _              ->  true\n                    //|>! printfn \"%A = %A\" msg\n                /// a Message is considered fatal\n                let isFatal  msg = msg |> isFatalF (fun _ -> true )\n                /// a Message is not considered fatal\n                let isFatalW msg = msg |> isFatalF (fun _ -> false)\n            \n                let rec countF f msg =\n                    match msg with\n                    | NoMsg          ->  0, 0, 0\n                    | Info      _    ->  0, 0, 1\n                    | Warning   _    ->  0, 1, 0\n                    | Message   m    ->  f m\n                    | RMessages ms   ->  ms |> exclnoMsg |> Seq.map (countF f) |> Seq.fold (fun (f, w, i) (fm, wm, im) -> f + fm, w + wm, i + im) (0, 0, 0)\n                    | _              ->  1, 0, 0\n            \n                /// a Message is considered an error\n                let count  msg = msg |> countF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let countW msg = msg |> countF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let countI msg = msg |> countF (fun _ -> 0, 0, 1)\n                \n                let addMsg a b =\n                    match a, b with\n                    | NoMsg        , c\n                    | c            , NoMsg         ->  c\n                    | RMessages mas, RMessages mbs ->  Array.append    mas      mbs   |> RMessages\n                    |           ma , RMessages mbs ->  Array.append [| ma |]    mbs   |> RMessages\n                    | RMessages mas,           mb  ->  Array.append    mas   [| mb |] |> RMessages\n                    |           ma ,           mb  ->               [| ma   ;   mb |] |> RMessages\n            \n                let reduceMsgs ms = (NoMsg, ms) ||> Seq.fold addMsg\n            \n                let summaryF f msg =\n                    match countF f msg with\n                    | 0, 0, _\n                    | 1, 0, 0\n                    | 0, 1, 0 -> \"\"\n                    | e, 0, _ -> sprintf \"Errors   : %d\\n\" e\n                    | 0, w, _ -> sprintf \"Warnings : %d\\n\" w\n                    | e, w, _ -> sprintf \"Errors   : %d, Warnings: %d\\n\" e w\n            \n                /// returns a string with a count of errors and warnings, if more than one\n                let summarizedF f msg = [ msg.ToString() ; summaryF f msg ] |> Seq.filter ((<>) \"\") |> String.concat \"\\n\"\n                /// a Message is considered an error\n                let summarized  msg = msg |> summarizedF (fun _ -> 1, 0, 0)\n                /// a Message is considered a Warning\n                let summarizedW msg = msg |> summarizedF (fun _ -> 0, 1, 0)\n                /// a Message is considered Info\n                let summarizedI msg = msg |> summarizedF (fun _ -> 0, 0, 1)\n                \n            module Memoize =\n            \n                /// returns 3 functions:\n                ///    checkO  : ('p->'v option) \n                ///    getOrAdd: ('p->('p->'v)->'v) \n                ///    clear   : (unit->unit)\n                [<Inline>]\n                let getStoreWithDict (cache: System.Collections.Generic.Dictionary<_, _>) =\n                    let checkO v     = let mutable res = Unchecked.defaultof<_>\n                                       let ok          = cache.TryGetValue(v, &res)\n                                       if  ok then Some res else None\n                    let store  v res = cache.[v] <- res\n                                       res\n                    let getOrAdd p f = checkO p |> Option.defaultWith (fun () -> f p |> store p )\n                    (checkO, getOrAdd), cache.Clear\n            \n                /// creates a Dictionary to store memoized values\n                /// returns 3 functions:\n                ///    checkO  : ('p->'v option) \n                ///    getOrAdd: ('p->('p->'v)->'v) \n                ///    clear   : (unit->unit)\n                [<Inline>]\n                let getStore() = getStoreWithDict (System.Collections.Generic.Dictionary<_, _>() )\n            \n                /// Memoizes function f using the provided cache\n                /// getCache() returns 1 function:\n                ///    getOrAdd: ('p->('p->'v)->'v) \n                [< Inline >]\n                let memoizeStore (getOrAdd:('key -> ('key -> 'value) -> 'value) ) f =\n                    fun p -> getOrAdd p f\n            \n            \n                /// Memoizes the function f using a Dictionary\n                /// Returns the memoized function and a clear() function\n                /// The dictionary can be reset using the clear() function\n                [< Inline >]\n                let memoizeResetable f =\n                    let (check, getOrAdd), clear = getStore()\n                    let memoF = memoizeStore getOrAdd f\n                    memoF, clear\n            \n                /// Memoizes the function f using the provided Dictionary\n                [<Inline>]\n                let memoizeWithDict dict f =\n                    let (check, getOrAdd), clear = getStoreWithDict dict\n                    let memoF = memoizeStore getOrAdd f\n                    memoF\n            \n                /// Memoizes the function f and returns Dictionary\n                [<Inline>]\n                let memoizeDict f =\n                    let dict = System.Collections.Generic.Dictionary<_, _>() \n                    let (check, getOrAdd), clear = getStoreWithDict dict\n                    let memoF = memoizeStore getOrAdd f\n                    memoF, dict\n            \n                /// Memoizes the function f using a Dictionary\n                [<Inline>]\n                let memoize f = memoizeResetable f |> fst\n            \n            \n            /// returns a function that delays its execution\n            /// runs only once even if multiple calls happen before the delay\n            let delayed delay doF =\n                let cancellationTokenSourceO = ref None\n                fun parm -> \n                    let asy = async {\n                        do! Async.Sleep delay\n                        doF parm\n                    } \n                    !cancellationTokenSourceO |> Option.iter (fun (tokenSource:System.Threading.CancellationTokenSource) -> tokenSource.Cancel())\n                    cancellationTokenSourceO := Some <| new System.Threading.CancellationTokenSource()\n                    Async.Start(asy, cancellationToken = (!cancellationTokenSourceO).Value.Token)\n            \n            \n            [< AutoOpen >]\n            module Monads =\n                module Seq =    \n                    let rtn = Seq.singleton\n                    let insertO  vSO              = vSO |> Option.map(Seq.map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vSR:Result<_,_>) = vSR |> function | Error m -> rtn (Error m) | Ok v -> Seq.map Ok v\n                    let absorbO  vOS              = vOS |> Seq.choose id\n                    let absorbR  vOS              = vOS |> Seq.choose (function Ok v -> Some v |_-> None)\n                    let ofOption vO = \n                        match vO with\n                        | Some v -> Seq.singleton v\n                        | None   -> Seq.empty\n                \n                module Option =\n                    open Option\n                    \n                    let rtn    = Some\n                    let iter f = map f >> Option.defaultValue ()\n                \n                    let join o = Option.bind id o\n                    \n                    let apply fO  vO =\n                        match fO, vO with\n                        | Some f, Some v -> f v |> Some\n                        | _     , _      -> None\n                \n                    /// Same as defaultWith\n                    let mapNone  f o = Option.defaultWith f o\n                    let bindNone f o = match o with | Some v -> Some v |_-> f()\n                    \n                    let (>>=)                              v f = bind f v\n                    let traverseSeq            f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertR (vOR:Result<_,_>)              = vOR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let absorbR  vRO                           = vRO |> function Some(Ok v) -> Some v |_-> None\n                    \n                /// Extensions to Async\n                module Async =\n                    let [< Inline >] inline rtn   v    = async.Return v\n                    let [< Inline >] inline bind  f vA = async.Bind(  vA, f)\n                    let [< Inline >] inline map   f    = bind (f >> rtn)\n                    /// Executes f Synchronously\n                    [< Inline \"throw 'iterS cannot be used in JavaScript!'\" >] \n                    let inline iterS (f: 'a->unit) = map f >> Async.RunSynchronously\n                    /// Executes f Asynchronously\n                    let [< Inline >] inline iterA f             = map f >> Async.Start\n                    let apply fA vA = async {\n                        let! fChild = Async.StartChild fA\n                        let! vChild = Async.StartChild vA\n                        let! f = fChild\n                        let! v = vChild \n                        return f v \n                    }\n                    let sleepThen f milliseconds = async {\n                        do! Async.Sleep milliseconds\n                        return f()\n                    }\n                    let (>>=)                              v f = bind f v\n                    let traverseSeq             f           sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO  vAO                           = vAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR (vAR:Result<_,_>)              = vAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                \n                \n                \n                module State =\n                \n                    type State<'T, 'S> = 'S -> ('S * 'T)\n                \n                    let rtn v = fun s -> s, v\n                    let bind (f:'a->State<'b,'S>) (ma:State<'a,'S>) : State<'b,'S> = \n                        fun s1 -> \n                            let s2, a = ma s1\n                            f a s2            \n                    let map f = bind (f >> rtn)\n                \n                \n                    type CEBuilder() =\n                        member __.Bind   (m, f) = bind f m\n                        member __.Return     v  = rtn v\n                        member __.Delay      f  = f ()\n                \n                    let state = CEBuilder()\n                \n                    module Operators =\n                        let (>>=) ma f = bind f ma\n                        let (|>>) ma f = map  f ma\n                module Result =\n                    open Result\n                \n                    let errorf fmt = Printf.ksprintf Error fmt\n                \n                    let rtn                          = Ok\n                    let join                       r = Result.bind id r\n                    let flatten                    r = Result.bind id r\n                    let toOption                   r = r   |> function Ok v -> Some v |       _ -> None\n                    let defaultWith              f r = r   |> function Ok v ->      v | Error e -> f e\n                    let defaultValue             d r = r   |> function Ok v ->      v | Error _ -> d\n                    let failIfTrue               m v = if     v then m |> Error  else Ok () \n                    let failIfFalse              m v = if not v then m |> Error  else Ok () \n                    let iter                  fE f r = r   |> map  f |> defaultWith fE                                                 : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map Ok           |> Option.defaultWith (f >> Error)\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> Ok None)\n                    let absorbO               f  vOR = vOR |> bind (ofOption f)\n                    let (>>=)                    r f = bind f r\n                    let traverseSeq           f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bind f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let result = Builder()\n                    \n                    module Operators =\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                        let result = result\n                \n                \n                    \n                    let freeMessage                r = r   |> function Ok v -> Ok v   | Error e -> ResultMessage.freeMessage e |> Error\n                    /// bind version that protects against exceptions\n                    let bindP                 f    r = match r with\n                                                        | Ok   v -> try   f v\n                                                                    with  e -> ExceptMsg (e.Message, e.StackTrace) |> Error\n                                                        | Error e ->      e                                        |> Error\n                    /// map version that protects against exceptions\n                    let inline mapP           f    m = bindP (f >> rtn) m            \n                    let iterP                 fE f r = r   |> mapP f |> defaultWith fE                                                 : unit    \n                    \n                    type BuilderP() =\n                        member inline this.Return          x       = rtn  x\n                        member inline this.ReturnFrom      x       =     (x:Result<_,_>)\n                        member        this.Bind           (w , r ) = Result.bind  r w\n                        member inline this.Zero           ()       = rtn ()\n                        member inline this.Delay           f       = f\n                        member inline this.Combine        (a, b)   = bind b a\n                        member inline this.Run             f       = Ok () |> bindP f\n                        member this.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member this.TryFinally(body, compensation) = try body() finally   compensation()\n                        member this.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member this.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    let resultP = BuilderP()\n                    \n                    \n                module Depend =\n                \n                    type Depend<'T> = \n                    | Dependency of (string * obj) option * (obj -> Depend<'T>)\n                    | NoMore     of 'T\n                \n                    let dependByName nm (defF:'f) (kf:'f->'T) = Dependency(Some(nm, box defF), fun f -> NoMore (kf (unbox f)) )\n                \n                    #if !WEBSHARPER\n                    open Microsoft.FSharp.Quotations.Patterns \n                    open Microsoft.FSharp.Quotations.DerivedPatterns \n                \n                    let pname (prop  :System.Reflection.PropertyInfo) = prop  .DeclaringType.FullName + \".\" + prop  .Name\n                    let mname (method:System.Reflection.MethodInfo  ) = method.DeclaringType.FullName + \".\" + method.Name\n                \n                    let shouldBe q = \n                        let rec shouldBe l =\n                            function\n                            | Call(_, method, _) -> Some(mname method, l)\n                            | Lambda(a, q2)      -> shouldBe (l + 1) q2\n                            | _ -> None\n                        match q with\n                        | PropertyGet(o,                                          prop  , [         ]     )-> pname prop  , \"should be 0\"\n                        | Lambda(a,                                    Call(None, method, [         ])    )\n                        | Lambda(a,                                    Call(None, method, [_        ])    )-> mname method, \"should be 1\"\n                        | Lambda(a,Lambda(b,                           Call(None, method, [p;q      ]))   )-> mname method, \"should be 2\"\n                        | Lambda(a,Lambda(b,Lambda(c,                  Call(None, method, [p;q;r    ])))  )-> mname method, \"should be 3\"\n                        | Lambda(a,Lambda(b,Lambda(c,Lambda(d,         Call(None, method, [p;q;r;s  ])))) )-> mname method, \"should be 4\"\n                        | Lambda(a,Lambda(b,Lambda(c,Lambda(d,Lambda(e,Call(None, method, [p;q;r;s;t]))))))-> mname method, \"should be 5\"\n                        | q -> \n                            shouldBe 0 q \n                            |> Option.map(fun (nm,l) -> nm, sprintf \"Not covered %d parms: %A\" l q) \n                            |> Option.defaultWith(fun () -> \"?\", sprintf \"Not covered: %A\" q)\n                        |> fun (nm, m) -> failwithf \" %s : %s\" nm m\n                \n                    let getName0(q:Quotations.Expr<                    'T>) : string *                      'T = \n                        match q with\n                        | PropertyGet(o,                                          prop  , [         ]     )-> pname prop  ,                  prop.GetValue(null, [|         |]) |> unbox \n                        |_-> shouldBe q\n                    let getName1(q:Quotations.Expr<'a                ->'T>) : string * ('a                ->'T) = \n                        match q with\n                        | Lambda(a,                                    Call(None, method, [         ])    )-> mname method, fun a         -> method.Invoke(null, [|         |]) |> unbox \n                        | Lambda(a,                                    Call(None, method, [p        ])    )-> mname method, fun a         -> method.Invoke(null, [|a        |]) |> unbox \n                        |_-> shouldBe q\n                    let getName2(q:Quotations.Expr<'a->'b            ->'T>) : string * ('a->'b            ->'T) = \n                        match q with\n                        | Lambda(a,Lambda(b,                           Call(None, method, [p;q      ]))   )-> mname method, fun a b       -> method.Invoke(null, [|a;b      |]) |> unbox\n                        |_-> shouldBe q\n                    let getName3(q:Quotations.Expr<'a->'b->'c        ->'T>) : string * ('a->'b->'c        ->'T) = \n                        match q with\n                        | Lambda(a,Lambda(b,Lambda(c,                  Call(None, method, [p;q;r    ])))  )-> mname method, fun a b c     -> method.Invoke(null, [|a;b;c    |]) |> unbox\n                        |_-> shouldBe q\n                    let getName4(q:Quotations.Expr<'a->'b->'c->'d    ->'T>) : string * ('a->'b->'c->'d    ->'T) = \n                        match q with\n                        | Lambda(a,Lambda(b,Lambda(c,Lambda(d,         Call(None, method, [p;q;r;s  ])))) )-> mname method, fun a b c d   -> method.Invoke(null, [|a;b;c;d  |]) |> unbox\n                        |_-> shouldBe q\n                    let getName5(q:Quotations.Expr<'a->'b->'c->'d->'e->'T>) : string * ('a->'b->'c->'d->'e->'T) = \n                        match q with\n                        | Lambda(a,Lambda(b,Lambda(c,Lambda(d,Lambda(e,Call(None, method, [p;q;r;s;t]))))))-> mname method, fun a b c d e -> method.Invoke(null, [|a;b;c;d;e|]) |> unbox\n                        |_-> shouldBe q\n                \n                    let depend0   q                                                                      = let (nm, f) = getName0 q in dependByName nm f id\n                    let depend1   q                                                                      = let (nm, f) = getName1 q in dependByName nm f id\n                    let depend2   q                                                                      = let (nm, f) = getName2 q in dependByName nm f id\n                    let depend3   q                                                                      = let (nm, f) = getName3 q in dependByName nm f id\n                    let depend4   q                                                                      = let (nm, f) = getName4 q in dependByName nm f id\n                    let depend5   q                                                                      = let (nm, f) = getName5 q in dependByName nm f id\n                    let replace0 (q:Quotations.Expr<                    'T>) (fr:                    'T) = let (nm, _) = getName0 q in nm, box fr\n                    let replace1 (q:Quotations.Expr<'a->                'T>) (fr:'a->                'T) = let (nm, _) = getName1 q in nm, box fr\n                    let replace2 (q:Quotations.Expr<'a->'b->            'T>) (fr:'a->'b->            'T) = let (nm, _) = getName2 q in nm, box fr\n                    let replace3 (q:Quotations.Expr<'a->'b->'c->        'T>) (fr:'a->'b->'c->        'T) = let (nm, _) = getName3 q in nm, box fr\n                    let replace4 (q:Quotations.Expr<'a->'b->'c->'d->    'T>) (fr:'a->'b->'c->'d->    'T) = let (nm, _) = getName4 q in nm, box fr\n                    let replace5 (q:Quotations.Expr<'a->'b->'c->'d->'e->'T>) (fr:'a->'b->'c->'d->'e->'T) = let (nm, _) = getName5 q in nm, box fr\n                    #endif\n                \n                    let bind (f: 'a -> Depend<'b>) (pa:Depend<'a>) : Depend<'b> = \n                        let rec bindR =\n                            function\n                            | Dependency(dep, k) -> Dependency(dep , fun p -> bindR (k p) ) \n                            | NoMore     v       -> Dependency(None, fun p -> f v         )\n                        bindR pa\n                    let rtn = NoMore\n                    let map f = bind (f >> rtn)\n                    let inline apply fR vR = fR |> bind (swap map  vR)\n                \n                    let replacer lst depend =\n                        let rec replace =\n                            function\n                            | Dependency(None       , k)      -> Dependency(None        , k >> replace)\n                            | Dependency(Some(nm, v), k)      ->\n                                lst \n                                |> Seq.tryFind (fst >> ((=) nm))\n                                |> Option.map  (snd >> fun v2 -> Dependency(Some(nm, v2), k >> replace) )\n                                |> Option.defaultWith(fun ()  -> Dependency(Some(nm, v ), k >> replace) )\n                            | NoMore v                        -> NoMore              v\n                        replace depend\n                \n                    let replacerDef lst depend =\n                        let rec replace =\n                            function\n                            | Dependency(None       , k)          -> Dependency(None         , k >> replace)\n                            | Dependency(Some(nm, v), k)          ->\n                                lst \n                                |> Seq.tryFind (fun (_, (nm2, _)) -> nm2 = nm)\n                                |> Option.map  (fun (nmN,(_, v2)) -> Dependency(Some(nmN, v2), k >> replace) )\n                                |> Option.defaultWith(fun ()      -> Dependency(Some(nm , v ), k >> replace) )\n                            | NoMore v                            -> NoMore               v\n                        replace depend\n                \n                    let resolver lst depend = \n                        let rec resolve =\n                            function\n                            | Dependency(None       , k)      -> k () |> resolve\n                            | Dependency(Some(nm, v), k)      ->\n                                lst \n                                |> Seq.tryFind (fst >> ((=) nm))\n                                |> Option.map  (snd >> fun v2 -> k v2  )\n                                |> Option.defaultWith(fun ()  -> k v )\n                                |> resolve\n                            | NoMore v                        ->   v\n                        resolve depend\n                \n                    type DependBuilder() =\n                        member __.Bind   (m, f) = bind f m\n                        member __.Return     v  = rtn v\n                        member __.Delay      f  = f ()\n                \n                    let depend = DependBuilder()\n                \n                    let getDependencies dep =\n                        let rec collect lst dep =\n                            let     lst2 = dep :: lst\n                            match dep with\n                            | Dependency(None      , k) -> collect lst2 (k () )\n                            | Dependency(Some(_, v), k) -> collect lst2 (k v  )\n                            | NoMore f                  -> lst2\n                        collect [] dep\n                        |> List.filter (function| Depend.Dependency(None,_) -> false |_-> true) \n                        |> List.rev \n                \n                    let toString dep =\n                        getDependencies dep\n                        |> Seq.map       \n                            (function \n                            | Depend.Dependency(Some(nm, v), next) -> sprintf \"%-50s %A\" nm v\n                            | x -> string x)\n                        |> Seq.distinct\n                        |> Seq.sort\n                        |> String.concat \"\\n\"\n                \n                    module Operators =\n                        let rtn        = rtn\n                        let depend     = depend\n                        let (>>=) ma  f = bind f ma\n                        let (|>>) ma  f = map  f ma\n                        let (|*>) p  mf = apply mf (rtn p)\n                        let (>=*) mp mf = apply mf     mp\n                        let (<*>) mf mp = apply mf     mp\n                        let (>*>)  g mf = depend {\n                            let! f = mf\n                            return g >> f\n                        }\n                \n                \n                type ResultM<'v, 'm> = ResultM of Option<'v> * ResultMessage<'m>\n                \n                let inline OkM              v    = ResultM (Some v, NoMsg)\n                let inline OkMWithMsg       v m  = ResultM(Some v, m)\n                //let inline OkMWithMsgs      v ms = ms |> ResultMessage.reduceMsgs |> OkMWithMsg v\n                \n                let inline ErrorM             m  = ResultM (None  , m    )\n                //let inline ErrorMWithMsgs     ms = ms |> ResultMessage.reduceMsgs |> ErrorM\n                let (|OkM|ErrorM|)             r = match r with\n                                                    | ResultM(Some v, m) -> OkM   (v, m)\n                                                    | ResultM(None  , e) -> ErrorM e\n                module ResultM =\n                \n                    type CheckError<'T> = CheckErrorF of ('T -> bool)\n                    let checkError   () = CheckErrorF (fun _ -> true )\n                    let checkErrorW  () = CheckErrorF (fun _ -> false)\n                \n                    let inline rtn                 v = OkM v\n                    let inline rtnM                m = OkMWithMsg () m\n                    let inline rtnr               vR = vR  |> Result.map OkM          |> Result.defaultWith       ErrorM\n                    let freeMessage                r = r   |> function Ok v -> Ok v   | Error e -> ResultMessage.freeMessage e |> Error\n                    let inline toResult            r = match r with\n                                                       | ResultM(Some v, _) -> Ok     v\n                                                       | ResultM(None  , e) -> Error  e\n                    let inline toResultD           r = match r with\n                                                       | ResultM(Some v, m) -> Ok    (v, m)\n                                                       | ResultM(None  , e) -> Error  e\n                    let toOption                   r = r   |> function ResultM (v,_) -> v\n                    let defaultWith              f r = r   |> toResult |> Result.defaultWith   f\n                    let defaultValue             d r = r   |> toResult |> Result.defaultValue  d\n                    let map         f  (ResultM (v, m)) = ResultM (v |> Option.map f, m)\n                    let mapMessage  fM (ResultM (v, m)) = ResultM (v, fM m)\n                    let bind                  f    r = match r with\n                                                       | ResultM(Some v, m) -> f v |> mapMessage (ResultMessage.addMsg m)\n                                                       | ResultM(None  , e) -> ResultM(None  , e)\n                    /// bind version that protects against exceptions\n                    let bindP                 f    r = match r with\n                                                       | ResultM(Some v, m) -> try f v |> mapMessage (ResultMessage.addMsg m)\n                                                                               with  e -> ExceptMsg (e.Message, e.StackTrace) |> ErrorM\n                                                       | ResultM(None  , e) -> ResultM(None  , e)\n                    let bindM                 f    m = rtnM m |> bindP f\n                \n                    let check (CheckErrorF k) vR = vR |> function ResultM(Some _, m) when ResultMessage.isFatalF k m -> ErrorM m |_-> vR\n                \n                    /// map version that protects against exceptions\n                    let inline mapP           f    m = bindP (f >> rtn) m\n                    let iter                  fM f r = r   |> mapP f |> function | ResultM(Some (), m) -> () | ResultM(None, m) -> fM m  : unit\n                    let get                        r = r   |>          defaultWith (string >> failwith)\n                    let ofOption              f   vO = vO  |> Option.map OkM          |> Option.defaultWith (f >> ErrorM)\n                    let ofResult                  vR = vR  |> rtnr\n                    let insertO                  vRO = vRO |> Option.map(map Some)    |> Option.defaultWith(fun () -> OkM None)\n                    let absorbO               f  vOR = vOR |> bindP (ofOption f)\n                    let addMsg                  m  r = r |> mapMessage (ResultMessage.addMsg m)\n                    let failIfFatalMsgF         f  r = r |> function OkM (v, m) when ResultMessage.isFatalF f m -> ErrorM m |_-> r\n                    let failIfFatalMsg             r = r |> function OkM (v, m) when ResultMessage.isFatal    m -> ErrorM m |_-> r\n                    let failIfFatalMsgW            r = r |> function OkM (v, m) when ResultMessage.isFatalW   m -> ErrorM m |_-> r\n                    let (>>=)                    r f = bind f r\n                    let rec    traverseSeq    f   sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                       Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq        sq = traverseSeq id sq\n                        \n                    \n                    type Builder() =\n                        member inline __.Return          x       = rtn  x\n                        member inline __.ReturnFrom      x       =     (x:ResultM<_,_>)\n                        member inline __.ReturnFrom      x       =     (x:Result< _,_>)\n                        member inline __.ReturnFrom      x       = rtnM x\n                        member        __.Bind           (w , r ) = bindP  r w\n                        member        __.Bind           (w , r ) = bindM  r w\n                        member inline __.Zero           ()       = rtn ()\n                        member inline __.Delay           f       = f\n                        member inline __.Combine        (a, b)   = a |> bind b\n                        member inline __.Run             f       = OkM () |> bindP f\n                        member __.TryWith   (body, handler     ) = try body() with e -> handler     e\n                        member __.TryFinally(body, compensation) = try body() finally   compensation()\n                        member __.Using     (disposable, body  ) = using (disposable:#System.IDisposable) body\n                        member __.While(guard, body) =\n                            let rec whileLoop guard body =\n                                if guard() then body() |> bind (fun () -> whileLoop guard body)\n                                else rtn   ()\n                            whileLoop guard body\n                        member this.For(sequence:seq<_>, body) =\n                            this.Using(sequence.GetEnumerator(),fun enum -> \n                                this.While(enum.MoveNext, \n                                    this.Delay(fun () -> body enum.Current)))\n                                    \n                    module Operators =\n                        let inline (|>>) v f   = mapP  f v\n                        let inline (>>=) v f   = bindP f v\n                        let inline (>>>) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                \n                [< AutoOpen >]\n                module ResultMAutoOpen =\n                    open ResultM\n                    \n                    let resultM = Builder()\n                    \n                \n                \n                type AsyncResultM<'v, 'm> = Async<ResultM<'v, 'm>>\n                \n                /// A computation expression to build an Async<Result<'ok, 'error>> value\n                module AsyncResultM =\n                    let mapError fE v  = v |> Async.map (ResultM.mapMessage fE)\n                    let freeMessage v  = v |> Async.map  ResultM.freeMessage\n                \n                    let rtn         v   = async.Return(OkM v  )\n                    let rtnr        vR  = async.Return(ResultM.rtnr vR)\n                    let rtnR        vR  = async.Return    vR\n                    let rtnM        vM  = async.Return(ResultM.rtnM vM)\n                    let rtnrA       vrA = vrA |> Async.map    ResultM.ofResult\n                    let errorMsgf   fmt = Printf.ksprintf (ErrorMsg >> ErrorM >> async.Return) fmt\n                    let iterS  fE f vRA = Async.iterS (ResultM.iter fE f) vRA\n                    let iterA  fE f vRA = Async.iterA (ResultM.iter fE f) vRA\n                    let iterpS    f vRA = vRA |> iterS (ResultMessage.summarized >> print) f\n                    let iterpA    f vRA = vRA |> iterA (ResultMessage.summarized >> print) f\n                    let bind  (fRA:'a -> Async<ResultM<'b,'c>>)  (vRA: Async<ResultM<'a,'c>>) : Async<ResultM<'b,'c>>= async {\n                        try \n                            let!  vR = vRA\n                            match vR with\n                            | OkM   (v, m) -> return! fRA   v |> Async.map (ResultM.addMsg m)\n                            | ErrorM    m  -> return  ErrorM m\n                        with  e -> return ExceptMsg (e.Message, e.StackTrace) |> ErrorM\n                    }\n                    let inline bindr  f a  = rtnr   a |> bind f : AsyncResultM<_,_>\n                    let inline bindM  f a  = rtnM   a |> bind f : AsyncResultM<_,_>\n                    let inline bindrA f a  = rtnrA  a |> bind f : AsyncResultM<_,_>\n                    let inline bindR  f a  = rtnR   a |> bind f : AsyncResultM<_,_>\n                    let inline map    f m = bind  (f >> rtn) m            \n                    let rec whileLoop cond fRA =\n                        if   cond () \n                        then fRA  () |> bind (fun () -> whileLoop cond fRA)\n                        else rtn  ()\n                    let (>>=)                              v f = bind f v\n                    let rec    traverseSeq     f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                                 Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                    let inline sequenceSeq                  sq = traverseSeq id sq\n                    let insertO   vRAO                         = vRAO |> Option.map(map Some) |> Option.defaultWith(fun () -> rtn None)\n                    let insertR ( vRAR:Result<_,_>)            = vRAR |> function | Error m -> rtn (Error m) | Ok v -> map Ok v\n                    let absorbR   vRRA                         = vRRA |> Async.map (ResultM.bindP   id)\n                    let absorbO f vORA                         = vORA |> Async.map (ResultM.absorbO  f)\n                    let getResultM       (a:AsyncResultM<_,_>) = a    |> Async.map  OkM   \n                    type AsyncResultMBuilder() =\n                        member __.ReturnFrom vRA        : Async<ResultM<'v  , 'm>> =           vRA\n                        member __.ReturnFrom vR         : Async<ResultM<'v  , 'm>> = rtnr      vR\n                        member __.ReturnFrom vR         : Async<ResultM<unit, 'm>> = rtnM      vR\n                        member __.ReturnFrom vR         : Async<ResultM<'v  , 'm>> = rtnR      vR\n                        member __.ReturnFrom vR         : Async<ResultM<'v  , 'm>> = rtnrA     vR\n                        member __.Return     v          : Async<ResultM<'v  , 'm>> = rtn       v  \n                        member __.Zero       ()         : Async<ResultM<unit, 'm>> = rtn       () \n                        member __.Bind      (vRA,  fRA) : Async<ResultM<'b  , 'm>> = bind fRA  vRA\n                        member __.Bind       (w , r )                              = bindr   r w\n                        member __.Bind       (w , r )                              = bindM   r w\n                        member __.Bind       (w , r )                              = bindR   r w\n                        member __.Bind       (w , r )                              = bindrA  r w\n                        member __.Combine   (vRA,  fRA) : Async<ResultM<'b  , 'm>> = bind fRA  vRA\n                        member __.Combine   (vR ,  fRA) : Async<ResultM<'b  , 'm>> = bind fRA (vR  |> rtnR)\n                        member __.Delay            fRA                             = fRA\n                        member __.Run              fRA                             = rtn () |> bind fRA\n                        member __.TryWith   (fRA , hnd) : Async<ResultM<'a  , 'm>> = async { try return! fRA() with e -> return! hnd e  }\n                        member __.TryFinally(fRA , fn ) : Async<ResultM<'a  , 'm>> = async { try return! fRA() finally   fn  () }\n                        member __.Using(resource , fRA) : Async<ResultM<'a  , 'm>> = async.Using(resource,       fRA)\n                        member __.While   (guard , fRA) : Async<ResultM<unit, 'a>> = whileLoop guard fRA \n                        member th.For  (s: 'a seq, fRA) : Async<ResultM<unit, 'b>> = th.Using(s.GetEnumerator (), fun enum ->\n                                                                                        th.While(enum.MoveNext,\n                                                                                            th.Delay(fun () -> fRA enum.Current)))\n                \n                    module Operators =\n                        let inline (|>>) v f   = map   f v\n                        let inline (>>=) v f   = bind  f v\n                        let inline (>->) f g v = f v |>> g\n                        let inline (>=>) f g v = f v >>= g\n                        let inline rtn   v     = rtn    v\n                \n                [<AutoOpen>]\n                module AsyncResultMAutoOpen =\n                    open AsyncResultM\n                \n                    let asyncResultM = AsyncResultMBuilder()\n                \n                    // Having Async<_> members as extensions gives them lower priority in\n                    // overload resolution between Async<_> and Async<Result<_,_>>.\n                    type AsyncResultMBuilder with\n                    member __.ReturnFrom (vA: Async<_>     ) : Async<ResultM<_,_>> =           Async.map OkM vA\n                    member __.Bind       (vA: Async<_>, fRA) : Async<ResultM<_,_>> = bind fRA (Async.map OkM vA)\n                    member __.Combine    (vA: Async<_>, fRA) : Async<ResultM<_,_>> = bind fRA (Async.map OkM vA)\n                \n            type System.String with\n                member this.Substring2(from, n) = \n                    if   n    <= 0           then \"\"\n                    elif from >= this.Length then \"\"\n                    elif from <  0           then this.Substring2(0, n + from)\n                    else this.Substring(from, min n (this.Length - from))\n                member this.Left             n  = if n < 0 \n                                                  then this.Substring2(0, this.Length + n)\n                                                  else this.Substring2(0, n              )\n                member this.Right            n  = this.Substring2(max 0 (this.Length - n), this.Length)\n                member this.toUnderscore        = this |> Seq.mapi(fun i c -> if i > 0 && System.Char.IsUpper(c) then [ '_' ; c ] else [ c ])  |> Seq.collect id |> Seq.toArray |> System.String\n            \n            module String =\n                let splitByChar (c: char) (s: string) = s.Split c\n                let splitInTwoO spl txt = \n                    let i = (txt:string).IndexOf (spl:string)\n                    if  i = -1 then None else\n                    (txt.Left(i), txt.Substring (i + spl.Length) )\n                    |> Some\n                let delimitedO  op cl txt =\n                    splitInTwoO op txt\n                    |> Option.bind(fun (bef, sec) ->\n                        splitInTwoO cl sec\n                        |> Option.map(fun (mid, aft) -> bef, mid, aft)\n                    )\n                let contains     sub  (whole: string) = whole.Contains sub\n                let trim                  (s: string) = s.Trim()\n                let append     (a: string)(b: string) =  a + b\n                let skipFirstLine (txt:string) = txt.IndexOf '\\n' |> fun i -> if i < 0 then \"\" else txt.[i + 1..]\n                let unindent (s:string) =\n                    let lines = s.Split '\\n'\n                    let n     = lines \n                                |> Seq.tryFind (fun l -> l.Trim() <> \"\")\n                                |> Option.defaultValue \"\"\n                                |> Seq.tryFindIndex ((<>) ' ') \n                                |> Option.defaultValue 0\n                    lines \n                    |> Seq.map    (fun l -> if l.Length <= n then \"\" else l.Substring n)\n                    |> Seq.filter (fun s -> s.StartsWith \"# 1 \" |> not)\n                let indent n (s:string) =\n                    s.Split '\\n'\n                    |> Seq.map ((+) (String.replicate n \" \"))\n                let unindentStr = unindent >> String.concat \"\\n\"\n                let indentStr i = indent i >> String.concat \"\\n\" \n                let skipLastLine =\n                       splitByChar '\\n' \n                    >> fun s -> s.[0 .. (max 0 (s.Length - 2)) ]\n                    >> String.concat \"\\n\"\n                let (|StartsWith|_|) (start:string) (s:string) = if s.StartsWith start then Some s.[start.Length..                          ] else None\n                let (|EndsWith  |_|) (ends :string) (s:string) = if s.EndsWith   ends  then Some s.[0           ..s.Length - ends.Length - 1] else None\n                \n                let thousands n =\n                    let v = n.ToString()\n                    let r = v.Length % 3 \n                    let s = if r = 0 then 3 else r\n                    [   yield v.[0.. s - 1]\n                        for i in 0..(v.Length - s)/ 3 - 1 do\n                            yield v.[i * 3 + s .. i * 3 + s + 2]\n                    ] |> String.concat \",\"\n            \n            module ParseO =\n                let tryParseWith tryParseFunc = tryParseFunc >> function\n                        | true, v    -> Some v\n                        | false, _   -> None\n            \n            \n                /// Javascript adds time zone information when parsing a date and that can change the result\n                let parseDateO2  = (fun s -> s + \"T00:00:00\") >> tryParseWith System.DateTime.TryParse\n                let parseDateO   = tryParseWith System.DateTime.TryParse\n                let parseIntO    = tryParseWith System.Int32   .TryParse\n                let parseInt64O  = tryParseWith System.Int64   .TryParse\n                let parseSingleO = tryParseWith System.Single  .TryParse\n                let parseDoubleO = tryParseWith System.Double  .TryParse\n                let parseGuidO   = tryParseWith System.Guid    .TryParse\n                // etc.\n                \n                // active patterns for try-parsing strings\n                let (|Date  |_|) = parseDateO\n                let (|Int   |_|) = parseIntO\n                let (|Int64 |_|) = parseInt64O\n                let (|Single|_|) = parseSingleO\n                let (|Double|_|) = parseDoubleO\n                let (|Guid  |_|) = parseGuidO\n                \n            module Serializer =\n                open System\n            \n                type JsonIntermediate = {\n                    tryFloat    : unit   ->  float                option\n                    tryInt      : unit   ->  int64                option\n                    tryString   : unit   ->  string               option\n                    tryBool     : unit   ->  bool                 option\n                    tryArray    : unit   -> (JsonIntermediate []) option\n                    tryField    : string ->  JsonIntermediate     option\n                    isObject    : unit   ->  bool\n                    isNull      : unit   ->  bool\n                    toString    : unit   ->  string\n                }\n            \n                type SerS<'T> = ('T                 -> string   )        //      Serialization function\n                type SerD<'T> = (JsonIntermediate   -> 'T option)        //    deSerialization function\n                type Ser< 'T> = SerS<'T> * SerD<'T>                      // both Serialization functions\n            \n                let serialize (ser: Ser<_>) v = fst ser v\n                let (|Field|_|) field j = j.tryField field\n            \n                let [< Inline >] inline sprintU  v = sprintf \"%A\"       v\n                let [< Inline >] inline toString v = v.ToString()\n                let [< Inline >] inline sprintQ  v = sprintf \"\\\"%A\\\"\"   v\n                let              inline sprintA  v = String.concat \", \" v |> sprintf \"[%s]\"\n            \n                let toJsonString (v:string) =\n                    seq {\n                        yield '\"'\n                        if String.IsNullOrEmpty v |> not then\n                            for i = 0 to v.Length - 1 do\n                                let c = v.[i]\n                                let ci = int c\n                                if ci >= 0 && ci <= 7 || ci = 11 || ci >= 14 && ci <= 31 then\n                                    yield! sprintf \"\\\\u%04x\" ci\n                                else \n                                match c with\n                                | '\\b' -> yield! \"\\\\b\"\n                                | '\\t' -> yield! \"\\\\t\"\n                                | '\\n' -> yield! \"\\\\n\"\n                                | '\\f' -> yield! \"\\\\f\"\n                                | '\\r' -> yield! \"\\\\r\"\n                                | '\"'  -> yield! \"\\\\\\\"\"\n                                | '\\\\' -> yield! \"\\\\\\\\\"\n                                | _    -> yield c\n                        yield '\"'\n                    } |> Seq.toArray|> String\n            \n                let serString : Ser<string  > = toJsonString           , (fun j -> j.tryString()                         )\n                let serFloat  : Ser<float   > = sprintU                , (fun j -> j.tryFloat ()                         )\n                let serInt    : Ser<int     > = sprintU                , (fun j -> j.tryInt   () |> Option.map int       )\n                let serInt64  : Ser<int64   > = toString               , (fun j -> j.tryInt   ()                         )\n                let serBool   : Ser<bool    > = sprintU                , (fun j -> j.tryBool  ()                         )\n                let serDate   : Ser<DateTime> = (date2Long >> toString), (fun j -> j.tryInt   () |> Option.map long2Date )\n                [< JavaScript false >]\n                let serDate2  : Ser<DateTime> = (fun d -> d.ToFileTimeUtc() |> toString), (fun j -> j.tryInt   () |> Option.map (fun t -> DateTime.FromFileTimeUtc t ) )\n                [< JavaScript false >]\n                let serDate3  : Ser<DateTime> = \n                    (  fun (d:System.DateTime ) -> d.ToString(\"u\") |> sprintf \"%A\"                )\n                    , (fun (j:JsonIntermediate) -> j.tryString() |> Option.bind ParseO.parseDateO )\n            \n                let [< Inline >] inline serId  (get: 'a -> System.Guid) (set:System.Guid -> 'a) (print: 'a->string) : Ser<'a> =\n                    let s               = System.Guid.Empty |> set |> print |> fun (s:string) -> s.Split ' ' |> Array.head\n                    let sQ              = sprintf \"%A\" s\n                    let serialize   gid = get gid |> string |> sprintf \"{%10s :%A}\" sQ\n                    let deserialize j   = j.tryField s \n                                          |> Option.bind (fun jf -> jf.tryString() ) \n                                          |> Option.bind ParseO.parseGuidO \n                                          |> Option.map  set\n                    serialize, deserialize\n            \n                //let serField  (name:string) (get:'D->'e       ) (set:'e       ->'D->'D) ((ser, deser):Ser<'e>) : string * SerS<'D> * ('D -> SerD<'D>) = \n                //    name, get >>            ser, (fun rc j -> deser j |> Option.map (fun v -> set v rc) ) \n                //    \n                //let [< Inline >] serRecord init (fields: #seq<(string * SerS<'D> * ('D -> SerD<'D>))>) : Ser<'D> =\n                //    if isNull (init :> obj) then failwith \"Initial record is null\"\n                //    let serialize   dim = fields |> Seq.map  (fun     (n,  ser, _deser) -> sprintf \"%A: %s\" n (ser dim)) |> String.concat \", \" |> sprintf \"{%s}\"\n                //    let deserialize j   = fields |> Seq.fold (fun dim (n, _ser,  deser) -> j.tryField n |> Option.bind (deser dim) |> Option.defaultValue dim)   init |> Some\n                //    serialize, deserialize\n            \n                let serField  (name:string) (get:'D->'e       ) (set:'e       ->'D->'D) ((ser, deser):Ser<'e>) : string * ('D -> string option) * ('D -> JsonIntermediate option -> 'D) = \n                    name, get >>            ser >> Some, fun rc -> Option.bind (deser >> Option.map (swap set rc)) >> Option.defaultValue rc\n            \n                let serFieldO (name:string) (get:'D->'e option) (set:'e option->'D->'D) ((ser, deser):Ser<'e>) : string * ('D -> string option) * ('D -> JsonIntermediate option -> 'D) = \n                    name, get >> Option.map ser        , fun rc -> Option.map  (deser >>             swap set rc ) >> Option.defaultValue rc\n            \n                let [< Inline >] serRecord init (fields: #seq< string * ('D -> string option) * ('D -> JsonIntermediate option -> 'D) >) : Ser<'D> =\n                    let serialize   rc = fields |> Seq.choose(fun    (n,  ser, _deser) -> ser rc       |> Option.map (sprintf \"%A: %s\" n)) |> String.concat \", \" |> sprintf \"{%s}\"\n                    let deserialize j  = fields |> Seq.fold  (fun rc (n, _ser,  deser) -> j.tryField n |> deser rc )   init |> Some\n                    serialize, deserialize\n            \n                let serSeq (ser:Ser<'D>) : Ser<'D seq     > = (Seq   .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Seq.ofArray)\n                let serArr (ser:Ser<'D>) : Ser<'D []      > = (Array .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser))                          )\n                let serLst (ser:Ser<'D>) : Ser<'D list    > = (List  .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Seq.toList )\n                let serSet (ser:Ser<'D>) : Ser<Set<'D>    > = (Set   .map (fst ser) >> sprintA                                 ), (fun j -> j.tryArray () |> Option.map (Array.choose (snd ser)) |> Option.map Set        )\n                let serOpt (ser:Ser<'D>) : Ser<'D option  > = (Option.map (fst ser) >> Option.defaultValue \"null\"              ), (fun j -> (if j.isNull() then None else              snd ser j)|> Some                  )\n                let serDup(serFst,serSnd): Ser<'a * 'b    > = (fun (f,s  ) -> sprintf \"[%s, %s]\" (fst serFst f) (fst serSnd s) ), (fun j -> j.tryArray () \n                                                                                                                                            |> function \n                                                                                                                                                | Some [| j1 ; j2 |] -> match snd serFst j1, snd serSnd j2 with\n                                                                                                                                                                        | Some f, Some s -> Some(f, s) |_->None\n                                                                                                                                                | _ -> None )\n                let serTrp(sF,sS,sT)      : Ser<'a *'b*'c > = (fun (f,s,t) -> sprintf \"[%s, %s, %s]\" (fst sF f) (fst sS s)  (fst sT t)) , (fun j -> j.tryArray () \n                                                                                                                                                    |> function \n                                                                                                                                                        | Some [| j1 ;j2; j3|]   -> match snd sF j1, snd sS j2, snd sT j3 with\n                                                                                                                                                                                    | Some f, Some s, Some t -> Some(f, s, t) |_-> None\n                                                                                                                                                        | _ -> None ) \n                let serPair serFst serSnd : Ser<'a * 'b    > = serDup(serFst, serSnd)\n                let serMap serKey serElm : Ser<Map<'k, 'e>> =   serDup(serKey, serElm)\n                                                                |> serSeq \n                                                                |> (fun serKVPs -> (Seq.map (fun kvp -> kvp.Key, kvp.Value) >> fst serKVPs) , (snd serKVPs >> Option.map Map) )\n            \n                let serTypedRegisters = System.Collections.Generic.Dictionary<string, Ser<obj>>()\n            \n                let map (g: 'b -> 'a) (f: 'a -> 'b       ) ((serS, serD): Ser<'a>) : Ser<'b> = g >> serS, (serD >> Option.map  f )\n                let mapO(g: 'b -> 'a) (f: 'a -> 'b option) ((serS, serD): Ser<'a>) : Ser<'b> = g >> serS, (serD >> Option.bind f )\n            \n            \n                /// Constant value with check, fails with value is not correct\n                let serC  ser c : Ser<unit> = ser |> mapO (fun () -> c) (fun v -> if v = c then Some() else None )\n                /// Constant value with no check\n                let serCn ser c : Ser<unit> = ser |> map (fun () -> c) (fun _ -> c )\n            \n                [< JavaScript false >]\n                let fixType t = System.Text.RegularExpressions.Regex.Replace(t, @\"FSI_[0-9]{4}\\+\", \"\", System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace)\n            \n                [< JavaScript false >]\n                let serSpecial (regSer: Ser<'T>) : Ser<obj> =\n                    let tn0 = typeof<'T>.FullName |> fixType\n                    if serTypedRegisters.ContainsKey tn0 |> not then serTypedRegisters.Add(tn0, map unbox box regSer)\n                    (fun t -> \n                        let tn    = t.GetType().FullName |> fixType\n                        let snd   = if   serTypedRegisters.ContainsKey tn \n                                    then fst serTypedRegisters.[tn] t\n                                    else failwithf \"Serializer not registered for type: %s\" tn\n                        sprintf \"[%s, %s]\" (fst serString tn) snd)\n                    ,(fun j -> \n                        match j.tryArray () with\n                        | Some [| j1 ; j2 |] -> \n                            match snd serString j1 with\n                            | Some tn    -> if   serTypedRegisters.ContainsKey tn \n                                            then snd serTypedRegisters.[tn] j2\n                                            else failwithf \"Serializer not registered for type: %s\" tn\n                            |_-> failwithf \"Expected json string with type name: %A\" (j1.toString())\n                        |    _-> failwithf \"Expected json array with 2 elements: %s\" (j.toString()) )\n            \n                //let check show (ser:Ser<_>) v =\n                //    let bs = fst ser v\n                //    if show then printfn \"%A -> %s\" v bs\n                //    match deserialize ser bs with\n                //    | Some(vv) when vv = v -> true\n                //    | re -> if show then printfn \"-> %A\" re\n                //            false\n            \n                let serGuid : Ser<System.Guid> = serString |> mapO string  ParseO.parseGuidO\n            \n            \n            type [< Measure>] SnippetId \n            //= SnippetId of System.Guid with member x.Id = match x with SnippetId id -> id\n            //                                               static member Empty = SnippetId System.Guid.Empty\n            \n            type Snippet = {\n                snpId           : Guid<SnippetId>\n                snpName         : string\n                snpContent      : string\n                snpParentIdO    : Guid<SnippetId> option\n                snpPredIds      : Guid<SnippetId> Set\n                snpProperties   : (string * string) []\n                snpModified     : System.DateTime\n            }\n            \n            type SnippetReference =\n            | RefSnippetId   of string<SnippetId>\n            | RefSnippetPath of string[]\n            \n            //type Reduced = ((SnippetId * string * int * int) [] * string [] * FsCode.PreproDirective [] ) option\n            \n            module Snippet =\n                open System\n            //    open Operators\n            \n                let getNextModified() = DateTime.Now\n                //let getNextGeneration, setGeneration = \n                //    let mutable generation  = 1\n                //    (fun () -> generation <- generation + 1 ; generation)\n                //  , (fun n  -> generation <- n                          )  \n                let New name content parentO = \n                    {\n                        snpId           = System.Guid.NewGuid() |> UoM.Tag\n                        snpName         = name\n                        snpContent      = content\n                        snpParentIdO    = parentO\n                        snpPredIds      = Set.empty\n                        snpProperties   = Array.empty\n                        snpModified     = getNextModified()\n                    }\n                let defaultSnippet              = {\n                    snpId           = System.Guid.Empty |> UoM.Tag\n                    snpName         = \"\"\n                    snpContent      = \"\"\n                    snpParentIdO    = None\n                    snpPredIds      = Set.empty\n                    snpProperties   = Array.empty\n                    snpModified     = Utc1970_01_01\n                }    \n            \n                let indirectPredecessorIds (tryFindSnippet:Guid<SnippetId> -> Snippet option) (snpId, snpParentIdO, snpPredIds) =\n                    let rec getPreds out searched toSearch =\n                        if Set.isEmpty toSearch then out else\n                        let sid        = Seq.head toSearch\n                        let toSearch1  = Set.remove sid toSearch\n                        let searched1  = Set.add    sid searched\n                        match tryFindSnippet sid with\n                        | None        -> getPreds out searched1 toSearch1\n                        | Some snp1   ->\n                        let news       = Set (Option.toArray snp1.snpParentIdO) + Set snp1.snpPredIds\n                        let out1       = out + news\n                        let toSearch2  = toSearch1 + (news - searched1)\n                        getPreds out1 searched1 toSearch2\n                    let parentS = snpParentIdO |> Option.toArray |> Set\n                    getPreds parentS (Set.singleton snpId) (parentS + snpPredIds) \n            \n                let allPredecessors (tryFindSnippet:Guid<SnippetId> -> Snippet option) (snp : Snippet) =\n                    let rec getPreds (out:Set<Snippet>) searched toSearch = \n                        if Set.isEmpty toSearch then out else\n                        let sid        = Seq.head toSearch\n                        let toSearch1  = Set.remove sid toSearch\n                        let searched1  = Set.add    sid searched\n                        match tryFindSnippet sid with\n                        | None        -> getPreds out searched1 toSearch1\n                        | Some snp1   ->\n                        let news       = Set (Option.toArray snp1.snpParentIdO) + Set snp1.snpPredIds\n                        let out1       = Set.add snp1 out\n                        let toSearch2  = toSearch1 + (news - searched1)\n                        getPreds out1 searched1 toSearch2\n                    let parentS = snp.snpParentIdO |> Option.toArray |> Set\n                    getPreds Set.empty (Set.singleton snp.snpId) (parentS + Set snp.snpPredIds)\n            \n                let getLevel (tryFindSnippet:Guid<SnippetId> -> Snippet option) (snp : Snippet) =\n                    let rec level lvl snp1 =\n                        match snp1.snpParentIdO |> Option.bind tryFindSnippet with\n                        | None      -> lvl\n                        | Some snpP -> level (lvl + 1) snpP\n                    level 0 snp\n                    \n                let hasChildren (getSnippets:unit -> #seq<Snippet>) (snp : Snippet) =\n                    let snps = getSnippets()\n                    match snps |> Seq.tryFindIndex (fun s -> s.snpId = snp.snpId) with\n                    | None -> false\n                    | Some i ->\n                    snps \n                    |> Seq.tryItem (i + 1)\n                    |> Option.map (fun ch -> ch.snpParentIdO = Some snp.snpId)\n                    |> Option.defaultValue false\n            \n            module SnippetSerialize =\n                open Serializer\n            \n                let serSnippetId : Ser<Guid<SnippetId>> = \n                    let s           = \"SnippetId\"\n                    let serialize   (gid:Guid<SnippetId>) = UoM.Untag gid |> string |> sprintf \"{%A :%A}\" s\n                    let deserialize j   = j.tryField s \n                                          |> Option.bind (fun jf -> jf.tryString() ) \n                                          |> Option.bind ParseO.parseGuidO \n                                          |> Option.map  UoM.Tag\n                    serialize, deserialize\n            \n                let serSnippet   : Ser<Snippet  > = \n                    [|\n                        serSnippetId                               |> serField  \"snpId\"         (fun s -> s.snpId        ) (fun v  s -> { s with snpId         = v } )\n                        serString                                  |> serField  \"snpName\"       (fun s -> s.snpName      ) (fun v  s -> { s with snpName       = v } )\n                        serString                                  |> serField  \"snpContent\"    (fun s -> s.snpContent   ) (fun v  s -> { s with snpContent    = v } )\n                        serSnippetId                     |> serOpt |> serField  \"snpParentIdO\"  (fun s -> s.snpParentIdO ) (fun v  s -> { s with snpParentIdO  = v } )\n                        serSnippetId                     |> serSet |> serField  \"snpPredIds\"    (fun s -> s.snpPredIds   ) (fun v  s -> { s with snpPredIds    = v } )\n                        serDup(serString, serString)     |> serArr |> serField  \"snpProperties\" (fun s -> s.snpProperties) (fun v  s -> { s with snpProperties = v } )\n                        serInt                                     |> serFieldO \"snpGeneration\" (fun s -> None           ) (fun vO s -> match vO with Some v -> { s with snpModified = Utc1970_01_01.AddHours (float v) } |_-> s)\n                        serDate                                    |> serField  \"snpModified\"   (fun s -> s.snpModified  ) (fun v  s -> { s with snpModified   = v } )\n                    |] |> serRecord (Snippet.New \"\" \"\" None)\n            \n                type Model = {\n                    snippets   : Snippet []\n                    modified   : System.DateTime\n                    collapsed  : Guid<SnippetId> Set\n                }\n            \n                let getModel(snippets, gen, coll) =  { snippets = snippets |> Seq.toArray ;  modified = gen ; collapsed = coll}\n            \n                let serModel : Ser<Model> =\n                    [|\n                        serSnippet                       |> serArr           |> serField  \"snippets\"   (fun m -> m.snippets  ) (fun v  m -> { m with snippets   = v } )\n                        serInt                                               |> serFieldO \"generation\" (fun m -> None        ) (fun vO m -> match vO with None -> m | Some v -> { m with modified = Utc1970_01_01.AddHours (float v) } )\n                        serDate                                              |> serField  \"modified\"   (fun m -> m.modified  ) (fun v  m -> { m with modified   = v } )\n                        serSnippetId                     |> serSet           |> serField  \"collapsed\"  (fun m -> m.collapsed ) (fun v  m -> { m with collapsed  = v } )\n                    |] |> serRecord { snippets = [||] ; modified = Utc1970_01_01 ; collapsed = Set.empty}\n                    \n            \n        /// Essentials that run in Javascript (WebSharper)\n        //#define WEBSHARPER \n        [< JavaScript ; AutoOpen >]\n        module LibraryJS =\n            module Promise =\n                open WebSharper.JavaScript\n            \n                let ofAsyncResult (v: Async<Result<'a,'b>>) : Promise<'a> =\n                    new Promise<'a>(fun (resolve, reject) ->\n                        Async.StartWithContinuations(v, (function Ok ok -> resolve ok | Error er -> reject <| sprintf \"%A\" er), reject, reject)\n                    )\n            \n            module PromiseM =\n                open WebSharper.JavaScript\n            \n                let ofAsyncResultM (v: Async<ResultM<'a,'b>>) : Promise<'a> =\n                    new Promise<'a>(fun (resolve, reject) ->\n                        Async.StartWithContinuations(v, (function OkM(ok, _) -> resolve ok | ErrorM er -> reject <| ResultMessage.summarized er), reject, reject)\n                    )        \n            module View =\n                let insertWO = \n                    function\n                    | Some v -> View.Map Some v\n                    | None   -> View.Const None\n                let [<Inline>] inline consistent   (vl:View<_>)  = \n                    let prior      = ref <| Var.Create Unchecked.defaultof<_>\n                    let setPrior v = if (!prior).Value <> v then (!prior).Value <- v \n                    View.Sink setPrior vl\n                    !prior |> View.FromVar\n            \n                let bind = View.Bind\n                let map  = View.Map\n                let rtn  = View.Const\n            \n                let (>>=)                              v f = bind f v\n                let        traverseSeq     f            sq = let folder head tail = f head >>= (fun h -> tail >>= (fun t -> List.Cons(h,t) |> rtn))\n                                                             Array.foldBack folder (Seq.toArray sq) (rtn List.empty) |> map Seq.ofList\n                let inline sequenceSeq                  sq = traverseSeq id sq\n            \n                let (<*>)                        =  View.Apply\n                let       traverseListApp f list =  let cons head tail = head :: tail\n                                                    let folder head tail = rtn cons <*> f head <*> tail\n                                                    List.foldBack folder list (rtn [])\n                let inline sequenceListApp  list =  traverseListApp id list\n            \n            module Var =\n                let mutable private counter = 1\n                let freshId () =\n                    counter <- counter + 1\n                    \"varuid\" + string counter\n                        \n                let lensView get update view0 (var: Var<_>) =\n                    let id   = freshId()\n                    let view = View.Map2 (fun v _ -> get v) var.View view0\n                    { new Var<'V>() with\n                        member this.Get        () = get (var.Get())\n                        member this.Set         v = var.Update(fun t -> update t v)\n                        member this.SetFinal    v = this.Set(v)\n                        member this.Update      f = var.Update(fun t -> update t (f (get t)))\n                        member this.UpdateMaybe f = var.UpdateMaybe(fun t -> Option.map (fun x -> update t x) (f (get t)))\n                        member this.View          = view\n                        member this.Id            = id\n                    }\n            \n            module ListModel =\n                let lensInto' (m:ListModel<_,_>) (get: 'T       -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) (view: View<'V>) : Var<'V> =\n                    let id = Var.freshId()\n                    { new Var<'V>() with\n                        member r.Get         () = m.FindByKey key |> get\n                        member r.Set         v  = m.UpdateBy (fun i -> v          |>             update i |> Some) key\n                        member r.Update      f  = m.UpdateBy (fun i -> get i |> f |>             update i |> Some) key\n                        member r.UpdateMaybe f  = m.UpdateBy (fun i -> get i |> f |> Option.map (update i)       ) key\n                        member r.SetFinal    v  = r.Set v\n                        member r.View           = view\n                        member r.Id             = id\n                    }\n                let lensIntoO'(m: ListModel<_,_>) (get: 'T option -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) (view: View<'V>) : Var<'V> =\n                    let id = Var.freshId()\n                    { new Var<'V>() with\n                        member r.Get         () = m.TryFindByKey key |> get\n                        member r.Set         v  = m.UpdateBy (fun i -> v                  |>             update i |> Some) key\n                        member r.Update      f  = m.UpdateBy (fun i -> Some i |> get |> f |>             update i |> Some) key\n                        member r.UpdateMaybe f  = m.UpdateBy (fun i -> Some i |> get |> f |> Option.map (update i)       ) key\n                        member r.SetFinal    v  = r.Set v\n                        member r.View           = view\n                        member r.Id             = id\n                    }\n                let docLensMapView      mapView (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (lensInto' m   id                        (fun _ -> id) k v)\n                    Doc.BindSeqCachedViewBy m.Key get (View.Map mapView m.View)\n                let docLensMapViewO def mapView (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (lensIntoO' m (Option.defaultValue def)  (fun _ -> id) k v)\n                    Doc.BindSeqCachedViewBy m.Key get (View.Map mapView m.View)\n                let lensDef def k (m:ListModel<_,_>) =\n                    let get = Option.defaultValue def\n                    lensIntoO' m get (fun _ -> id) k (m.TryFindByKeyAsView k |> View.Map get)\n            \n                let currentLensUpd def curr upd (model:ListModel<_,_>) = \n                    curr \n                    |> Var.lensView (Option.bind (model.TryFindByKey) >> Option.defaultValue def) \n                                    (fun kO v -> kO |> Option.iter (upd v) ; kO)\n                                    model.View\n                let currentLensUpd' def curr upd (model:ListModel<_,_>) = \n                    let view = curr |> View.Map2 (fun _mdl kO -> kO |> Option.bind model.TryFindByKey |> Option.defaultValue def) model.View\n                    Var.Make view upd\n                let currentLens def curr (model:ListModel<_,_>) = \n                    model \n                    |> currentLensUpd' def curr (fun v -> model.UpdateBy (fun _ -> model.TryFindByKey (model.Key v) |> Option.map (fun _ -> v) ) <| model.Key v)\n                \n                let refreshLM (lm:ListModel<_,_>) elems =\n                    lm.AppendMany elems\n                    let keys = elems |> Seq.map lm.Key |> Set\n                    lm |> Seq.cache |> Seq.iter(fun e ->\n                        if keys |> Set.contains (lm.Key e) |> not then lm.RemoveByKey (lm.Key e)\n                    )\n            \n            module GenEditor =\n                open WebSharper.UI.Html\n            \n                type Position = {\n                    line : int\n                    col  : int\n                }\n            \n                type AnnotationType =\n                | Error   \n                | Warning \n                | Info    \n                | Hint\n                | Other of string\n            \n                type Annotation = {\n                    startP        : Position\n                    endP          : Position\n                    severity      : AnnotationType\n                    message       : string\n                }\n            \n                type Completion = {\n                    kind                : string\n                    label               : string\n                    detail              : string\n                    replace             : Position * Position\n                }\n            \n                [<NoComparison ; NoEquality>]\n                type GenEditorHook<'T> = {\n                    generateDoc       :  GenEditor<'T> -> ('T -> unit)     -> Doc\n                    getValue          :  unit                              -> string\n                    setValue          :  string                            -> unit\n                    setDisabled       :  bool                              -> unit\n                    showAnnotations   :  Annotation seq                    -> unit\n                    posFromIndex      :  int                               -> Position\n                    indexFromPos      :  Position                          -> int\n                    getWordAt         :  Position                          -> (string * Position) option\n                    getSelectionText  :  unit                              -> string\n                    getUri            :  unit                              -> string\n                    setUri            :  string                            -> unit\n                    hookOnChange      : (obj           -> unit           ) -> unit\n                }\n            \n                and GenEditor<'T> = {\n                    var             :  Var< string        >\n                    disabled        :  View<bool          >\n                    annotations     :  View<Annotation seq>\n                    onChange        : (GenEditor<'T> -> string      -> unit                              ) option\n                    onRender        : (GenEditor<'T>                -> unit                              )\n                    autoCompletion  : (GenEditor<'T> -> Position    -> Async<Completion []>              ) option\n                    toolTip         : (GenEditor<'T> -> Position    -> Async<string              option >) option\n                    declaration     : (GenEditor<'T> -> Position    -> Async<(Position * string) option >) option\n                    mutable editorO :  'T option\n            \n                    editorHook      : GenEditorHook<'T>\n                }\n                \n                let inline setVar   v   genE = { genE with var      = v   }\n                let inline onChange f   genE = { genE with onChange = f   }\n                let inline onRender f   genE = { genE with onRender = f   }\n                let inline disabled dis genE = { genE with disabled = dis }\n            \n                let inline var          genE = genE.var\n            \n                let newVar edh var = {\n                    var            = var \n                    disabled       = V false\n                    annotations    = V Seq.empty\n                    onChange       = None\n                    onRender       = ignore\n                    editorHook     = edh\n                    autoCompletion = None\n                    toolTip        = None\n                    declaration    = None\n                    editorO        = None\n                }\n            \n                let newText edh (v:string)             = newVar edh (Var.Create v)\n                let newVarO edh (v:Var<string option>) = \n                    Var.Lens v (Option.defaultValue \"\") (fun sO s -> sO |> Option.map (fun _ -> s) )\n                    |> newVar edh\n                    |> disabled(V (Option.isNone v.V))\n            \n                /// binds an Editor with a Var<string> to avoid annoying jumps to the end when fast typing\n                /// onChange gets called when the editor changes but not when the var changes\n                let bindVarEditor setEvent getVal setVal onChange (var:Var<_>) =\n                    let editorChanged = ref 0L\n                    let varChanged    = ref 0L\n                    setEvent(fun _ ->\n                        let v = getVal() \n                        if var.Value <> v then editorChanged := !editorChanged + 1L; var.Value <- v; onChange v \n                    )\n                    var.View |> View.Sink (fun _ ->\n                        if  !editorChanged > !varChanged then varChanged := !editorChanged\n                        elif getVal() <> var.Value then setVal var.Value\n                    )\n            \n                let generateDoc genE = \n                    let onChange = genE.onChange |> Option.map(fun f -> f genE) |> Option.defaultValue ignore\n                    genE.editorHook.generateDoc genE (fun ed ->\n                        genE.editorO        <- Some ed\n                        genE.var            |> bindVarEditor  genE.editorHook.hookOnChange    \n                                                              genE.editorHook.getValue \n                                                              genE.editorHook.setValue \n                                                              onChange\n                        genE.annotations    |> View.Sink      genE.editorHook.showAnnotations\n                        genE.disabled       |> View.Sink      genE.editorHook.setDisabled\n                        genE.onRender genE\n                    )\n            \n            \n            [< Inline \"\"\"(!$v)\"\"\">]\n            let isUndefined v = v.GetType() = v.GetType()\n                \n            \n            module Serializer =\n                open Serializer\n                open WebSharper.JavaScript\n            \n                let serVarField (name:string) (var:'D->Var<'e>) (serFuncs:Ser<'e>) : string * SerS<'D> * ('D -> SerD<'D>) = \n                    let ser, deser = serFuncs\n                    name\n                  , (var >> Var.Get >> ser)\n                  , (fun rc o -> deser o |>! Option.iter (var rc |> Var.Set) |> Option.map (fun _ -> rc) )\n            \n                let serLMdField (name:string) (lmd:'D->ListModel<_,'e>) serE  : string * SerS<'D> * ('D -> SerD<'D>) = \n                    let serS = serSeq serE\n                    name\n                  , lmd >> (fun lm -> lm.Value) >> fst serS\n                  , (fun rc b -> snd serS b |>! Option.iter (lmd rc).Set |> Option.map (fun _ -> rc) )\n            \n                let rec getJsonIntermediate df di ds db da (o:obj) : JsonIntermediate =\n                    let jsonInt = getJsonIntermediate df di ds db da \n                    {\n                        tryFloat    = fun () -> (if isUndefined o then None else match o with | :? float   as v -> Some v                      |_-> None) |> Option.orElseWith df\n                        tryInt      = fun () -> (if isUndefined o then None else match o with | :? int64   as v -> Some v                      |_-> None) |> Option.orElseWith di\n                        tryString   = fun () -> (if isUndefined o then None else match o with | :? string  as v -> Some v                      |_-> None) |> Option.orElseWith ds\n                        tryBool     = fun () -> (if isUndefined o then None else match o with | :? bool    as v -> Some v                      |_-> None) |> Option.orElseWith db\n                        tryArray    = fun () -> (if isUndefined o then None else match o with | :? System.Array as a -> Array.map jsonInt (unbox o) |> Some |_-> None) |> Option.orElseWith (fun () -> da  jsonInt   )\n                        tryField    = fun fl -> (if isUndefined o then None else match o?(fl) with null -> Some(jsonInt null) | f when isUndefined f -> None | v -> Some(jsonInt v) )\n                        isObject    = fun () -> JS.TypeOf o = JS.Kind.Object && o <> null \n                        isNull      = fun () -> o = null \n                        toString    = fun () -> sprintf \"%A\" o\n                    }\n            \n                let deserialize df di ds db da (ser: Serializer.Ser<_>) = \n                    Json.Parse\n                    >> getJsonIntermediate df di ds db da\n                    >> snd ser\n            \n                let tryDeserialize ser = \n                    deserialize\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        (fun _   -> None)\n                        ser\n            \n                let deserializeWithDefs ser = \n                    deserialize\n                        (fun _   -> Some 0.0               )\n                        (fun _   -> Some 0L                )\n                        (fun _   -> Some \"\"                )\n                        (fun _   -> Some false             )\n                        (fun _   -> Some [||]              )\n                        ser\n            \n                let deserializeWithFail ser = \n                    deserialize\n                        (fun _   -> failwith  \"Error expecting float\"    )\n                        (fun _   -> failwith  \"Error expecting int\"      )\n                        (fun _   -> failwith  \"Error expecting string\"   )\n                        (fun _   -> failwith  \"Error expecting bool\"     )\n                        (fun _   -> failwith  \"Error expecting array\"    )\n                        ser\n            \n            \n            let (|REGEX|_|) (expr: string) (opt: string) (value: string) =\n                if value = null then None else\n                match JavaScript.String(value).Match(WebSharper.JavaScript.RegExp(expr, opt)) with\n                | null         -> None\n                | [| |]        -> None\n                | m            -> Some m\n            \n            let rexGuid = \"\"\"([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})\"\"\"\n            \n            let rexEmail = \"\"\"(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@[*[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+]*\"\"\"\n            \n            module REGEX =\n                let getStartWord (line:string) ch =\n                    match line.Substring(0, ch) with\n                    | REGEX @\"([a-zA-Z_]\\w*)$\" \"g\" [| txt |] -> txt\n                    | _                                      -> \"\"          \n                \n                let getEndWord (line:string) ch =\n                    match line.Substring(ch) with\n                    | REGEX @\"^([a-zA-Z_]\\w*)\" \"g\" [| txt |] -> txt\n                    | _                                      -> \"\"          \n            \n                let (|Identifier|_|) =\n                    function\n                    | REGEX \"^[$a-zA-Z_][0-9a-zA-Z_\\.\\-$]*$\" \"\" [| id |] -> Some id\n                    | _                                                  -> None\n            \n            [< JavaScript >]\n            module Hoverable =\n                open WebSharper.UI.Html\n            \n                [<NoComparison ; NoEquality>]\n                type Hoverable         = { hover : Var<bool>        } with\n                    static member  New() = { hover = Var.Create false }\n                    member inline this.Attributes = [ attr.classDynPred (View.Const \"hovering\") this.hover.View\n                                                      on.mouseEnter (fun _ _ -> this.hover.Value <- true )\n                                                      on.mouseLeave (fun _ _ -> this.hover.Value <- false)\n                                                    ]   \n                    member inline this.Content    (ds: Doc seq) = div this.Attributes ds\n                    member inline this.Content    ( e: Elt    ) = e.OnMouseEnter(fun _ _ -> e.AddClass    \"hovering\") // THIS ONE ADDS ONE EXTRA SPACE\n                                                                   .OnMouseLeave(fun _ _ -> e.RemoveClass \"hovering\") // THAT THIS ONE DOES NOT REMOVE      \n                    //member inline this.Content    ( e: Elt    ) = e.WithAttrs this.Attributes\n                    static member  Demo  = Hoverable.New().Content(Elt.div [ attr.style \"flex-flow: column;\" ] [ text \"Hover over me!\" ])\n            \n                let hoverable (e:Elt) = Hoverable.New().Content e\n                \n            [< JavaScript >]\n            module ResizeObserver =\n                open WebSharper.JavaScript\n            \n                [< Inline \"try { return !!(ResizeObserver) } catch(e) { return false }\" >] \n                let implementedResizeObserver() = false\n                \n                [< Inline \"new ResizeObserver($_f)\" >]\n                let newResizeObserver (_f: unit->unit) = X<_> \n                \n                [< Inline \"$_ro.observe($_el)\" >]\n                let RObserve _ro (_el:Dom.Element) = X<_> \n                \n                let mutable observers : obj list = []\n                \n                let domRect2Tuple (r:Dom.DomRect) = (r.Top, r.Left, r.Width, r.Height)\n                \n                let [< Inline \"$_el.isConnected\" >] isValidElement (_el:Dom.Element) = true\n                \n                let dimsChanged (el:Dom.Element) = \n                    let dims = ref <| el.GetBoundingClientRect()\n                    fun () ->\n                        let ndims = el.GetBoundingClientRect()\n                        if domRect2Tuple !dims = domRect2Tuple ndims then false\n                        else dims := ndims    ; true\n                \n                let addResizeObserver f el =\n                    if implementedResizeObserver() then\n                        let ro =  newResizeObserver f\n                        observers <- ro::observers\n                        RObserve ro el\n                    else\n                        let changed = dimsChanged el\n                        async {\n                            while isValidElement el do\n                                do! Async.Sleep 110\n                                if changed() then f()\n                        } |> Async.Start\n                        \n            [< JavaScriptExport >]\n            module WebComponent =\n                open WebSharper.JavaScript\n            \n                [< Inline \"\"\"return Reflect.construct($global.HTMLElement, [], this.__proto__.constructor);\"\"\" >]\n                let ReflectConstruct () = X<_>\n                \n                [< Inline \"\"\"console.log('defineWebComponent: ' + $_nm);\n                            Object.setPrototypeOf($_c.prototype, $global.HTMLElement.prototype);\n                            Object.setPrototypeOf($_c, $global.HTMLElement);\n                            Object.setPrototypeOf($_o.prototype, $_c.prototype);\n                            $global.customElements.define($_nm, $_o)\"\"\" >]\n                let defineWebComponent_ _nm _o _c = X<_>\n            \n                let defineWebComponent _nm _o _c = \n                    try defineWebComponent_ _nm _o _c\n                    with _ -> printfn \"Failed to define WebComponent. Not supported.\"\n            \n                module WcTabStrip =\n                    open WebSharper.UI.Html\n                    //open TabStrip\n                    open Hoverable\n                \n                    let css = @\"\n                .tab-panel {\n                 overflow  : hidden   ;\n                 display   : flex     ;\n                 flex-flow : column   ;\n                 background: lightgray;\n                 height    : 100%    ;\n                 width     : 100%    ;\n                }\n                .tab-content {\n                 flex      : 1 1     ;\n                 overflow  : auto    ;\n                 position  : relative;\n                }\n                .tab-children {\n                 height    : 100%    ;\n                 width     : 100%    ;\n                 position  : absolute;\n                 display   : grid    ;\n                }\n                .tab-strip {\n                 padding   : 0pt     ;\n                 flex      : 0 0     ;\n                }\n                .tab {\n                 border     : 0.2pt solid transparent;\n                 padding    : 0pt 4pt;\n                 display    : inline-block;\n                 font-family: sans-serif;\n                 font-weight: 200;\n                 font-size  : small;\n                 color      : #666;\n                 cursor     : pointer;\n                }\n                .top>.tab {\n                 border-radius: 2pt 2pt 0pt 0pt;\n                 border-bottom-width: 0pt;\n                 vertical-align: bottom;\n                }\n                .bottom>.tab {\n                 border-top-width: 0pt;\n                 border-radius: 0pt 0pt 2pt 2pt;\n                 vertical-align: top;\n                }\n                .horizontal>.tab:not(:first-child) {\n                 border-left-width: 0pt;\n                }\n                .tab.hovering {\n                 background: red;\n                }\n                .tab.selected {\n                 background: white;\n                 border-left-width: 0.2pt;\n                 color: black;\n                 font-weight: 500;\n                 border-color: black;\n                }\n                .horizontal>.tab.selected {\n                 border-left-width: 0.2pt;\n                }\n                ::slotted(*              ) { \n                 width : 100%;\n                 height: 100%;\n                }\n                        \"\n                \n                    let tabStrip (selected:Var<int>) top horizontal tabs content =\n                        let strip =\n                            div [ attr.``class`` <| sprintf \"tab-strip %s %s\"\n                                                        (if top        then \"top\"        else \"bottom\"  ) \n                                                        (if horizontal then \"horizontal\" else \"vertical\")\n                                ]\n                                [ for i, (txt, _) in  tabs |> Seq.indexed  do\n                                      yield Hoverable.New().Content (\n                                          Elt.div [ attr.classDyn <| View.Map (fun sel -> \"tab\" + (if sel = i + 1 then \" selected\" else \"\")) selected.View\n                                                    attr.draggable \"true\"\n                                                    on.click   (fun _  _  -> selected.Value <- i + 1 ) \n                                                  ]\n                                                  [ text txt ]) :> Doc\n                                ] \n                        div [ attr.``class`` \"tab-panel\" \n                                //on.dragOver(fun _  ev -> ev.PreventDefault()                                      )\n                                //on.drop    (fun _e ev -> ev.PreventDefault() ; this.reorder this.tabs.Value.Length)\n                            ]\n                            [   if     top then yield strip\n                                yield div [ attr.``class`` \"tab-content\" ] [ content ]\n                                if not top then yield strip\n                                yield Elt.Element \"style\" [] [ text css ] :> Doc\n                                yield Elt.Element \"style\" [] \n                                        [ Doc.TextView <| View.Map (sprintf \"\"\"\n                                              ::slotted(*              ) { display: none }\n                                              ::slotted(*:nth-child(%d)) { display: grid }\n                                           \"\"\") selected.View \n                                        ] \n                                    :> Doc\n                            ]\n                \n                    type WcTabStripT () =\n                        let mutable added = false\n                        let selected = Var.Create 1\n                        do printfn \"WcTabStripT initializer\"\n                        [< Inline \"\"\"$global.FsRoot.LibraryJS.WebComponent.WcTabStrip.WcTabStripT.New\"\"\" >] static member NewPointer = X<_>\n                        static member Constructor() = \n                            let this = ReflectConstruct()\n                            WcTabStripT.NewPointer?call this\n                            this\n                        member this.connectedCallback() = \n                            //printfn \"my-el connected %A %A\" added this?outerHTML\n                            if not added then\n                                let el : Dom.Element = this |> box |> unbox\n                                let shadowRoot       = el.AttachShadow (Dom.ShadowRootInit Dom.ShadowRootMode.Open)\n                                let elsh = JS.Document.CreateElement \"div\"\n                                shadowRoot.AppendChild elsh |> ignore\n                                let addTab () =\n                                    //printfn \"my-el modified %A %A\" added this?outerHTML\n                                    let top  = el.HasAttribute \"bottom\" |> not\n                                    let tabs = [ for i in 1..el.ChildNodes.Length do \n                                                    let node = el.ChildNodes.[i - 1]\n                                                    if node.NodeType = Dom.NodeType.Element then\n                                                        let elem = node :?> Dom.Element\n                                                        let tabName = if elem.HasAttribute \"tabname\" then elem.GetAttribute \"tabname\" else sprintf \"Tab %d\" i\n                                                        yield (tabName, elem)\n                                                ]\n                                    while elsh.ChildNodes.Length > 0 do\n                                        elsh.RemoveChild elsh.LastChild |> ignore\n                                    Elt.Element \"slot\" [] []\n                                    |> tabStrip selected top true tabs\n                                    |> Doc.Run elsh\n                                addTab()\n                                el.AddEventListener(\"DOMSubtreeModified\", delayed 50 addTab)\n                                added <- true\n                    let init =\n                        lazy\n                            let x = WcTabStripT().connectedCallback\n                            if IsClient then defineWebComponent \"wcomp-tabstrip\" WcTabStripT.Constructor WcTabStripT.NewPointer\n                    \n                module WcSplitter =    \n                    open ResizeObserver\n                    \n                    type Layout = View<string> -> (Dom.Element -> unit) -> (Dom.Element -> unit) -> (Dom.MouseEvent -> unit) -> View<string> -> Doc\n                    \n                    let mutable layoutHorizontal : Layout = fun partSizes afterRender afterRenderSp mouseDown gap -> Doc.Empty\n                    let mutable layoutVertical   : Layout = fun partSizes afterRender afterRenderSp mouseDown gap -> Doc.Empty\n                    \n                    type WcSplitterT () =\n                        let mutable added = false\n                        do printfn \"WcSplitterT initializer\"\n                        [< Inline \"\"\"$global.FsRoot.LibraryJS.WebComponent.WcSplitter.WcSplitterT.New\"\"\" >] static member NewPointer = X<_>\n                        static member Constructor() = \n                            let this = ReflectConstruct()\n                            WcSplitterT.NewPointer?call this\n                            this\n                        member this.connectedCallback() = \n                            //printfn \"my-el connected %A %A\" added this?outerHTML\n                            if not added then\n                                let el : Dom.Element = this |> box |> unbox\n                                let shadowRoot  = el.AttachShadow (Dom.ShadowRootInit Dom.ShadowRootMode.Open)\n                                let elsh        = JS.Document.CreateElement \"div\"\n                                let minV        = if el.HasAttribute \"min\"      then el.GetAttribute \"min\"   |> JS.ParseFloat else  4.0\n                                let maxV        = if el.HasAttribute \"max\"      then el.GetAttribute \"max\"   |> JS.ParseFloat else 96.0\n                                let value       =(if el.HasAttribute \"value\"    then el.GetAttribute \"value\" |> JS.ParseFloat else 50.0)|> Var.Create\n                                let first       =    el.HasAttribute \"second\"   |> not\n                                let vertical    =    el.HasAttribute \"vertical\"\n                                let size        = ref        (0.0, 0.0)\n                                let padding     = ref         0.0\n                                let gap         = Var.Create  0.0\n                                let sizeCalc (sh:Dom.Element) : float * float =\n                                    let p1, p2, gp = if vertical then \"padding-left\", \"padding-right\" , \"grid-column-gap\"\n                                                                 else \"padding-top\" , \"padding-bottom\", \"grid-row-gap\" \n                                    let pt   = JQuery.JQuery(sh.ParentElement.ParentElement).Css p1 |> (+) \"0\" |> JS.ParseFloat\n                                    let pb   = JQuery.JQuery(sh.ParentElement.ParentElement).Css p2 |> (+) \"0\" |> JS.ParseFloat\n                                    gap.Set   (JQuery.JQuery(sh.ParentElement.ParentElement).Css gp |> (+) \"0\" |> JS.ParseFloat)\n                                    padding := pt + pb\n                                    el.GetBoundingClientRect() \n                                    |> fun r -> \n                                         match vertical, first with\n                                         | true , true  ->  r.Width , r.Height \n                                         | true , false -> -r.Width , r.Height\n                                         | false, true  ->  r.Height, r.Width\n                                         | false, false -> -r.Height, r.Width\n                                let dragging : bool               ref = ref false   \n                                let startP   : float              ref = ref 0.0\n                                let start    : float              ref = ref 0.0\n                                let domElem  : Dom.Element option ref = ref None                 \n                                let mouseCoord (ev: Dom.MouseEvent) = if vertical then float ev.ClientX else float ev.ClientY\n                                let drag (ev: Dom.Event) =\n                                    ev :?> Dom.MouseEvent\n                                    |> mouseCoord\n                                    |> fun m   -> (m - !start) * 100.0 / (fst !size) + !startP\n                                    |> fun v   -> value.Value <- min maxV (max minV v)\n                                   \n                                let rec finishDragging (_: Dom.Event) =\n                                    if !dragging then\n                                        dragging := false\n                                        JS.Window.RemoveEventListener(\"mousemove\", drag          , false) \n                                        JS.Window.RemoveEventListener(\"mouseup\"  , finishDragging, false)\n                                let startDragging (ev: Dom.MouseEvent) =\n                                    if not !dragging then\n                                        dragging := true\n                                        startP   := value.Value\n                                        start    := mouseCoord ev\n                                        size     := !domElem |> Option.map sizeCalc |> Option.defaultValue (100.0, 500.0)\n                                        JS.Window.AddEventListener(\"mousemove\", drag          , false) \n                                        JS.Window.AddEventListener(\"mouseup\"  , finishDragging, false) \n                                        ev.PreventDefault()\n                                    //div [\n                                    //    SomeAttr  <| on.mouseDown startDragging\n                                    //    SomeAttr  <| on.afterRender (fun el -> domElem := Some el; size := sizeCalc vertical el ; value.Set value.Value)\n                                    //    style     <| styleSplitter !gap\n                                    //    style        \"z-index: 10; background-color: #eef\"\n                                    //]\n                                let partSizes sz gap pad spl = (sz - gap - pad) *          spl  / 100.0          \n                                                             , (sz - gap - pad) * (100.0 - spl) / 100.0\n                                let styleSections (p1:float, p2:float) = sprintf \" %.2fpx %.2fpx ; %s : %.2fpx; \" p1 p2 (if vertical then \"height\" else \"width\") (snd !size)\n                                let styleSizes           spl = partSizes (fst !size) gap.Value !padding spl |> styleSections\n                                //div [ \n                                //    style <| sprintf \"display: grid; grid-template-areas: 'one' 'two' ; %s\" styleRest\n                                //    style <| Val.map styleSizes value\n                                //    slot [                   div [ style \"background-color: red ; grid-area: one\" ] ]\n                                //    slot [ name \"part2\"    ; div [ style \"background-color: blue; grid-area: two\" ] ]\n                                //    slot [ name \"splitter\" ; splitter                                               ]\n                                //]\n                                let recalc() = !domElem |> Option.iter (fun sh -> size := sizeCalc sh); value.Set value.Value\n                                //addResizeObserver recalc el\n                                (if vertical then layoutVertical else layoutHorizontal)\n                                    <| View.Map styleSizes value.View\n                                    <| fun (sh:Dom.Element) -> addResizeObserver recalc el ; recalc()\n                                    <| fun  sp              -> domElem :=          Some sp ; recalc()\n                                    <| fun  me              -> startDragging me\n                                    <| View.Map (sprintf \"%Apx\") gap.View\n                                |> Doc.Run elsh\n                                shadowRoot.AppendChild elsh.FirstChild |> ignore\n                                added <- true\n                    let init layoutH layoutV =\n                        let x = WcSplitterT().connectedCallback\n                        layoutHorizontal <- layoutH\n                        layoutVertical   <- layoutV\n                        if IsClient then defineWebComponent \"wcomp-splitter\" WcSplitterT.Constructor WcSplitterT.NewPointer\n                    \n            [< JavaScriptExport >]\n            module Monaco =\n                open WebSharper.JavaScript\n                open WebSharper.UI.Html\n            \n                type Position = {\n                    column     : int\n                    lineNumber : int\n                }\n                type Range = {\n                    startColumn     : int\n                    endColumn       : int\n                    startLineNumber : int\n                    endLineNumber   : int\n                }\n                type Uri = {\n                    authority : string\n                    fragment  : string\n                    fsPath    : unit->string\n                    path      : string\n                    query     : string\n                    scheme    : string\n                }  with\n                    [< Inline \"$global.monaco.Uri.parse($_s)\" >] static member Parse(_s)      : Uri    = X<_>\n                    [< Inline \"$global.monaco.Uri.file($_f) \" >] static member File(_f)       : Uri    = X<_>\n                    [< Inline \"$this.toString()             \" >] override this.ToString()     : string = X<_>\n                type Location = {\n                    range : Range\n                    uri   : Uri\n                }\n                type FindMatch = {\n                    matches : string []\n                    range   : Range\n                }\n                type WordAtPosition = {\n                    endColumn   : int\n                    startColumn : int\n                    word        : string\n                }\n                type Model = {\n                    uri         : Uri\n                }\n                  with\n                    [< Inline \"$mo.findMatches($_s, $_o, $_r, $_c, $_w, $_p, $_l)\" >] member mo.FindMatches(_s: string, _o: bool, _r: bool, _c: bool, _w: string, _p: bool, _l: int): FindMatch[] = X<_>\n                    [< Inline \"$mo.getWordAtPosition($_p)                        \" >] member mo.GetWordAtPosition(_p: Position) : WordAtPosition = X<_>\n                    [< Inline \"$mo.getLineContent($_l)                           \" >] member mo.GetLineContent(   _l: int     ) : string         = X<_>\n                    [< Inline \"$mo.uri                                           \" >] member mo.GetUri()                        : Uri            = X<_>\n                    [< Inline \"$mo.uri = $_v                                     \" >] member mo.SetUri(_v:Uri)                  : unit           = X<_>\n                    [< Inline \"$mo.getValue()                                    \" >] member mo.GetValue()                      : string         = X<_>\n                    [< Inline \"$mo.setValue($_v)                                 \" >] member mo.SetValue(_v:string)             : unit           = X<_>\n                    [< Inline \"$mo.getPositionAt($_i)                            \" >] member mo.GetPositionAt(_i: int     )     : Position       = X<_>\n                    [< Inline \"$mo.getOffsetAt($_p)                              \" >] member mo.GetOffsetAt(  _p: Position)     : int            = X<_>\n                    [< Inline \"$mo.dispose()                                     \" >] member mo.Dispose()                       : unit           = X<_>\n                    [< Inline \"$mo.getValueInRange($_r)                          \" >] member mo.GetValueInRange(  _r: Range)    : string         = X<_>\n                    \n                type MarkDownString = {\n                    value      : string\n                    isTrusted  : bool\n                }\n                type MarkerSeverity =\n                | Error   = 8 \n                | Hint    = 1\n                | Info    = 2\n                | Warning = 4\n                type MarkerData = {\n                    startColumn        : int\n                    endColumn          : int\n                    startLineNumber    : int\n                    endLineNumber      : int\n                    severity           : MarkerSeverity\n                    message            : string\n                    //code : string\n                    //relatedInformation : string\n                    //source             : string\n                    //tags               : MarkerTag[]\n                }\n                type CompletionItemKind =\n                | Class       = 6\n                | Color       = 15\n                | Constructor = 3\n                | Enum        = 12\n                | Field       = 4\n                | File        = 16\n                | Folder      = 18\n                | Function    = 2\n                | Interface   = 7\n                | Keyword     = 13\n                | Method      = 1\n                | Module      = 8\n                | Property    = 9\n                | Reference   = 17\n                | Snippet     = 14\n                | Text        = 0\n                | Unit        = 10\n                | Value       = 11\n                | Variable    = 5\n                type CompletionItem = {\n                    kind                : CompletionItemKind\n                    label               : string\n                    //additionalTextEdits : string\n                    //command             : string\n                    //commitCharacters    : string\n                    detail              : string\n                    //documentation       : string\n                    //filterText          : string\n                    //insertText          : string\n                    //range               : string\n                    //sortText            : string\n                    //textEdit            : string\n                }\n                type Hover = {\n                    contents   : MarkDownString []\n                    range      : Range\n                }\n                \n                open WebSharper.Core.Resources\n                type MonacoResources() =\n                    inherit BaseResource(@\"/EPFileX/monaco/package/min/vs/loader.js\")\n            \n                [< Require(typeof<MonacoResources>) >]\n                type Editor() =\n                    do ()\n                  with\n                    [< Inline \"$global.require.config({ paths: { 'vs': '/EPFileX/monaco/package/min/vs' }});\" >] static member RequireConfig ()     : unit    = X<_>\n                    [< Inline \"$global.require(['vs/editor/editor.main'], $_s, $_f)\"                          >] static member Require(_s, _f)      : unit    = X<_>\n                    [< Inline \"$global.monaco.editor.create($_elt, $_op, $_ov)\"                               >] static member Create _elt _op _ov  : Editor  = X<_>\n                    [< Inline \"$global.monaco.editor.createModel($_t, $_l, $_u)\">] static member CreateModel(_t:string, _l:string, _u:Uri)          : Model   = X<_>\n                    [< Inline \"$global.monaco.editor.getModel($_u)\"             >] static member GetModel(_u:Uri)                                   : Model   = X<_>\n                    [< Inline \"$global.monaco.editor.getModels()\"               >] static member GetModels()                                        : Model[] = X<_>\n                    [< Inline \"$global.monaco.editor.setModelLanguage($_m, $_l)\">] static member SetModelLanguage(_m:Model, _l:string)              : unit    = X<_>\n                    [< Inline \"$global.monaco.editor.setTheme($_t)\"                                           >] static member SetTheme(_t:string)  : unit    = X<_>\n                    [< Inline \"$global.monaco.languages.registerHoverProvider($_l, $_p)\"          >] static member RegisterHoverProvider         (_l: string, _p: obj): System.IDisposable   = X<_>\n                    [< Inline \"$global.monaco.languages.registerDefinitionProvider($_l, $_p)\"     >] static member RegisterDefinitionProvider    (_l: string, _p: obj): System.IDisposable   = X<_>\n                    [< Inline \"$global.monaco.languages.registerCompletionItemProvider($_l, $_p)\" >] static member RegisterCompletionItemProvider(_l: string, _p: obj): System.IDisposable   = X<_>\n                    [< Inline \"$global.monaco.editor.setModelMarkers($_m,$_o,$_k)\"       >] static member SetModelMarkers(_m:Model, _o:string, _k:MarkerData[]):unit = X<_>\n                    \n                    [< Inline \"$monc.getValue()                  \" >] member monc.GetValue()                                  : string          = X<_>\n                    [< Inline \"$monc.setValue($_v)               \" >] member monc.SetValue(_v:string)                         : unit            = X<_>\n                    [< Inline \"$monc.onDidChangeModelContent($_f)\" >] member monc.OnDidChangeModelContent(_f:obj->unit)       : unit            = X<_>\n                    [< Inline \"$monc.getModel()                  \" >] member monc.GetModel()                                  : Model           = X<_>  \n                    [< Inline \"$monc.setModel($_m)               \" >] member monc.SetModel(_m:Model)                          : unit            = X<_>  \n                    [< Inline \"$monc.layout()                    \" >] member monc.Layout()                                    : unit            = X<_>\n                    [< Inline \"$monc.updateOptions($_o)\"           >] member monc.UpdateOptions(_o:obj)                       : unit            = X<_>\n                    [< Inline \"$monc.setPosition($_p)            \" >] member monc.SetPosition(_p:Position)                    : unit            = X<_>\n                    [< Inline \"$monc.focus()                     \" >] member monc.Focus()                                     : unit            = X<_>\n                    [< Inline \"$monc.getSelection()              \" >] member monc.GetSelection()                              : Range           = X<_>\n                    \n            //        [< Inline \"$monc.refresh()\"                 >] member monc.Refresh()                                   : unit            = X<_>\n            //        [< Inline \"$monc.setOption($_o, $_v)\"       >] member monc.SetOption(_o:string, _v:obj)                : unit            = X<_>\n            //        [< Inline \"$monc.getOption($_o)\"            >] member monc.GetOption(_o:string)                        : obj             = X<_>\n            //        //[< Inline \"$monc.getCursor()\"               >] member monc.GetCursor()                                 : Pos             = X<_>\n            //        [< Inline \"$monc.performLint()\"             >] member monc.PerformLint()                               : unit            = X<_>\n            //        [< Inline \"$monc.focus()\"                   >] member monc.Focus()                                     : unit            = X<_>\n            //        [< Inline \"$monc.getLine($_l)\"              >] member monc.GetLine(_l:int)                             : string          = X<_>\n            //        [< Inline \"$monc.getDoc().clearHistory()\"   >] member monc.ClearHistory()                              : unit            = X<_>\n            //        [< Inline \"$monc.on($_event, $_f)\"          >] member monc.On(_event: string, _f:(Editor * obj)->unit) : unit            = X<_>\n            //        [< Inline \"$monc.on($_event, $_f)\"          >] member monc.On(_event: string, _f: Editor       ->unit) : unit            = X<_>\n            //        [< Inline \"$monc.addKeyMap($_keyMap)\"       >] member monc.AddKeyMap(_keyMap: obj)                     : unit            = X<_>\n            //        [< Inline \"$monc.getWrapperElement()\"       >] member monc.GetWrapperElement()                         : Dom.Element     = X<_>\n            //        [< Inline \"$monc.replaceSelection($_v, $_s)\">] member monc.ReplaceSelection(_v:string, _s:string)                        = ()\n            //        [< Inline \"while($monc.getAllMarks().length > 0) { $monc.getAllMarks()[0].clear() }\" >] member monc.RemoveMarks() : unit = X<_>\n            //        [< Inline \"$monc.getDoc().markText({line:$_fl, ch:$_fc}, {line:$_tl, ch:$_tc}, {className: $_className, title: $_title})\" >]\n            //        member monc.MarkText (_fl:int,_fc:int) (_tl:int,_tc:int) (_className: string) (_title: string): unit       = X<_>\n                \n                [<NoComparison ; NoEquality>]\n                type MonacoConfig = {\n                    var             : Var<string>\n                    onChange        : (string -> unit)\n                    onRender        : (Editor -> unit) option\n                    mutable editorO :  Editor option\n                    disabled        : View<bool>\n                    options         : obj\n                    overrides       : obj\n                }\n                \n                [< Inline \"var m = $global.require('vs/base/common/lifecycle'); return new m.ImmortalReference($_v);\" >]\n                let newImmortalReference _v = X<_>\n                \n                let newVar var    = \n                    { var         = var \n                      onChange    = ignore\n                      onRender    = None\n                      editorO     = None\n                      disabled    = V false\n                      options     = null\n                      overrides   = null\n                    }\n                //let includes = [| @\"/EPFileX/monaco/package/min/vs/loader.js\" |]\n                let loader = async {\n                    if IsClient then\n                        //do! LoadFiles.LoadFilesAsync includes\n                        Editor.RequireConfig()\n                        do! Async.FromContinuations(fun (success, failed, cancelled) -> Editor.Require(success, failed))\n                }\n                let render monc             = \n                    async {\n                      do! loader\n                      return\n                          div [ on.afterRender (fun elchild ->\n                                 let editor        = Editor.Create elchild.ParentElement monc.options monc.overrides\n                                 ResizeObserver.addResizeObserver editor.Layout elchild.ParentElement\n                                 elchild.ParentNode.RemoveChild elchild |> ignore\n                                 monc.editorO     <- Some editor\n                                 monc.onRender |> Option.iter (fun onrender -> onrender editor)\n                                 monc.var |> GenEditor.bindVarEditor editor.OnDidChangeModelContent editor.GetValue editor.SetValue monc.onChange\n                                 //monc.disabled |> View.Sink (fun dis -> editor.SetOption(\"readOnly\", if dis then \"nocursor\" :> obj else false :> obj) )\n                          )    \n                        ] []\n                    } |> Doc.Async\n                let inline setVar   v   monc = { monc with var       = v      }\n                let inline onChange f   monc = { monc with onChange  = f      }\n                let inline onRender f   monc = { monc with onRender  = Some f }\n                let inline disabled dis monc = { monc with disabled  = dis    }\n                let inline var          monc = monc.var\n                let newText(v:string)             = newVar (Var.Create v)\n                let newVarO(v:Var<string option>) = Var.Lens v (Option.defaultValue \"\") (fun sO s -> sO |> Option.map (fun _ -> s) )\n                                                    |> newVar\n                                                    |> disabled(V (Option.isNone v.V))\n            \n            [< JavaScriptExport >]\n            module MonacoGenAdapter =\n                open Monaco\n                open GenEditor\n                open WebSharper.UI.Html\n            \n                type MonacoRT = {\n                    mutable editorO     : Monaco.Editor option\n                    mutable onChange    : obj -> unit\n                    options             : obj\n                    overrides           : obj\n                }\n            \n                let iterEditor monRT f =\n                    match monRT.editorO with\n                    | None    -> ()\n                    | Some ed -> f ed\n            \n                let mapEditor monRT f =\n                    match monRT.editorO with\n                    | None    -> None\n                    | Some ed -> Some (f ed)\n            \n                let bindEditor monRT f =\n                    match monRT.editorO with\n                    | None    -> None\n                    | Some ed -> f ed\n            \n                let posGen2Ed (p:GenEditor.Position) : Monaco.Position = \n                    {\n                        column     = p.col \n                        lineNumber = p.line\n                    }\n            \n                let posEd2Gen (p:Monaco.Position) : GenEditor.Position = \n                    {\n                        col  = p.column    \n                        line = p.lineNumber\n                    }\n            \n                let indexFromPos monRT p =\n                    mapEditor monRT <| fun ed ->\n                        ed.GetModel().GetOffsetAt(posGen2Ed p)            \n                    |> Option.defaultValue -1\n            \n                let posFromIndex monRT i =\n                    mapEditor monRT <| fun ed ->\n                        ed.GetModel().GetPositionAt i\n                        |> posEd2Gen\n                    |> Option.defaultValue { col = 1 ; line = 1 }\n            \n                let convertGlyphChar =\n                    function\n                    | \"C\" -> CompletionItemKind.Class\n                    | \"E\" -> CompletionItemKind.Enum\n                    | \"S\" -> CompletionItemKind.Value\n                    | \"I\" -> CompletionItemKind.Interface\n                    | \"N\" -> CompletionItemKind.Module\n                    | \"M\" -> CompletionItemKind.Method\n                    | \"P\" -> CompletionItemKind.Property\n                    | \"F\" -> CompletionItemKind.Field\n                    | \"T\" -> CompletionItemKind.Class\n                    | \"K\" -> CompletionItemKind.Keyword\n                    | _   -> 0 |> unbox\n            \n                type CompletionItemProvider(autoComplete: GenEditor.Position -> Async<Completion[]>) =\n                    do()\n                   with\n                      member __.provideCompletionItems(model:Model, pos:Monaco.Position, token:obj, context: obj) =\n                        asyncResultM {\n                            let! comps = autoComplete  { col = pos.column ; line = pos.lineNumber }\n                            return comps \n                                    |> Array.map(fun (comp:Completion) -> \n                                        { \n                                            kind   = convertGlyphChar comp.kind\n                                            label  = comp.label\n                                            detail = comp.detail\n                                        } )\n                        } |> PromiseM.ofAsyncResultM\n                      member __.resolveCompletionItem(item: CompletionItem, token: obj): CompletionItem = { item with detail = \"more details\" }\n            \n            \n                type HoverProvider(toolTip: GenEditor.Position -> Async<string option> ) =\n                    do()\n                   with\n                      member __.provideHover(model:Model, pos:Monaco.Position, token:obj) =\n                        asyncResultM {\n                            let! desc = toolTip { col = pos.column ; line = pos.lineNumber }\n                            match desc with\n                            | None      -> return (box null |> unbox)\n                            | Some desc ->\n                            return {\n                                    contents = [| { value = desc ; isTrusted = true } |]\n                                    range    = (box null |> unbox)\n                                }\n                        } |> PromiseM.ofAsyncResultM\n            \n                type DefinitionProvider(declaration: GenEditor.Position -> Async<(Position * string) option> ) =\n                    do()\n                   with\n                        member __.provideDefinition(model: Model, pos: Monaco.Position, token: obj) =\n                            asyncResultM {\n                                let! declO =  declaration { col = pos.column ; line = pos.lineNumber }\n                                match declO with\n                                | None             -> return box null |> unbox\n                                | Some (pos, file) ->\n                                return {\n                                    range = {\n                                                startColumn     = pos.col\n                                                endColumn       = pos.col\n                                                startLineNumber = pos.line\n                                                endLineNumber   = pos.line\n                                    }\n                                    uri   = Uri.Parse file\n                                }\n                            } |> PromiseM.ofAsyncResultM\n            \n                let generateDoc monRT genE onRender =\n                    async {\n                      do! Monaco.loader\n                      return\n                          div [ on.afterRender (fun elchild  ->\n                                    let editor        = Monaco.Editor.Create elchild.ParentElement monRT.options monRT.overrides\n                                    ResizeObserver.addResizeObserver editor.Layout elchild.ParentElement\n                                    elchild.ParentNode.RemoveChild elchild |> ignore\n                                    monRT.editorO     <- Some editor\n                                    onRender                  editor\n                                    editor.OnDidChangeModelContent monRT.onChange\n                                    genE.toolTip        |> Option.iter (fun f -> Editor.RegisterHoverProvider         (\"fsharp\", new HoverProvider         (f genE) ) |> ignore )\n                                    genE.declaration    |> Option.iter (fun f -> Editor.RegisterDefinitionProvider    (\"fsharp\", new DefinitionProvider    (f genE) ) |> ignore )\n                                    genE.autoCompletion |> Option.iter (fun f -> Editor.RegisterCompletionItemProvider(\"fsharp\", new CompletionItemProvider(f genE) ) |> ignore )\n                          )    \n                        ] []\n                    } |> Doc.Async\n            \n                let getUri    monRT     = mapEditor  monRT    <| (fun ed -> ed.GetModel().GetUri().ToString() ) |> Option.defaultValue \"\" \n                let setUri    monRT uri = iterEditor monRT    <|  fun ed -> ed.GetModel().SetUri(Uri.Parse uri) \n                let getValue  monRT     = mapEditor  monRT    <| (fun ed -> ed.GetValue()   ) |> Option.defaultValue \"\" \n                let setValue  monRT txt = iterEditor monRT    <|  fun ed -> ed.SetValue txt \n                let getWordAt monRT pos = bindEditor monRT    <|  fun ed -> let word = ed.GetModel().GetWordAtPosition {    \n                                                                                column     = (pos:GenEditor.Position).col\n                                                                                lineNumber = pos.line }\n                                                                            if isUndefined word then None else \n                                                                            (word.word, {   col  = word.startColumn\n                                                                                            line = pos.line })\n                                                                            |> Some\n                let getSelect monRT     = mapEditor  monRT    <| (fun ed -> ed.GetSelection() |> ed.GetModel().GetValueInRange ) |> Option.defaultValue \"\" \n            \n                let showAnnotations monRT ans =\n                    iterEditor monRT <| fun ed ->\n                        let ms =\n                            ans\n                            |> Seq.map (fun (an:Annotation) ->\n                                {   message           = an.message\n                                    severity          = match an.severity with \n                                                        | Error   -> MarkerSeverity.Error \n                                                        | Warning -> MarkerSeverity.Warning  \n                                                        | Hint    -> MarkerSeverity.Hint \n                                                        | _       -> MarkerSeverity.Info\n                                    startColumn       = an.startP.col\n                                    startLineNumber   = an.startP.line\n                                    endColumn         = an.endP  .col\n                                    endLineNumber     = an.endP  .line\n                                }\n                            )\n                            |> Seq.toArray\n                        Editor.SetModelMarkers(ed.GetModel(), \"annotations\", ms)\n            \n                let newHook monRT = {\n                    generateDoc      =            generateDoc  monRT \n                    getValue         = fun ()  -> getValue     monRT\n                    setValue         =            setValue     monRT\n                    getWordAt        =            getWordAt    monRT\n                    showAnnotations  = showAnnotations         monRT\n                    setDisabled      = ignore //  bool                              -> unit\n                    hookOnChange     = fun f   -> monRT.onChange <- f \n                    posFromIndex     =            posFromIndex monRT\n                    indexFromPos     =            indexFromPos monRT\n                    getUri           = fun ()  -> getUri       monRT\n                    setUri           =            setUri       monRT\n                    getSelectionText = fun ()  -> getSelect    monRT\n                }\n            \n                let newRT options overrides = {\n                    editorO     = None\n                    onChange    = ignore\n                    options     = options   \n                    overrides   = overrides \n                }\n            \n                let newVar options overrides v =\n                    newRT options overrides\n                    |> newHook\n                    |> GenEditor.newVar <| v\n            \n            module AppFrameworkTemplate =\n                let html = \"\"\"\n            <div style=\"display:none\" >\n                <div links>\n                    <link href=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" type=\"text/css\" rel=\"stylesheet\">\n                    <script src=\"http://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"  type=\"text/javascript\"></script>\n                </div>\n                <div ws-template=\"AppFramework\" style=\"height: calc(100vh - 4px); width: calc(100vw - 4px) \" class=\"relative\" >\n                    <div ws-hole=\"MainClient\"></div>\n                    <div class=\"AppFrameworkGo\"><button ws-onclick=\"GoClient\">${MainDoc}</button></div>\n                </div>\n                <style>\n                    .AppFrameworkGo {\n                        max-width: 2px;\n                        max-height: 2px;\n                        z-index: 4000;\n                        overflow: hidden;\n                        position: fixed;\n                        top: 0px;\n                        left: 0px;\n                    }\n                </style>\n                <div ws-template=\"FixedSplitterVer\" \n                    style=\"display: grid; \n                           grid-gap: 0px; \n                           box-sizing: border-box; \n                           height: 100%;\n                           width : 100%;\n                           grid-template-areas: 'one two'; \n                           grid-template-rows   :100%; \n                           overflow: hidden; \n                           grid-template-columns: ${PartSizes}\"  >\n                   <div ws-hole=\"First\"  style=\"grid-area: one; \" class=\"relative\" ></div>\n                   <div ws-hole=\"Second\" style=\"grid-area: two; \" class=\"relative\" ></div>\n                </div>               \n                <div ws-template=\"FixedSplitterHor\" \n               style=\"display: grid; \n                      grid-gap: 0px; \n                      box-sizing: border-box; \n                      height: 100%;\n                      width : 100%;\n                      grid-template-areas: 'one' 'two'; \n                      grid-template-columns:100%; \n                      overflow: hidden; \n                      grid-template-rows   : ${PartSizes}\"  >\n              <div ws-hole=\"First\"  style=\"grid-area: one; \" class=\"relative\" ></div>\n              <div ws-hole=\"Second\" style=\"grid-area: two; \" class=\"relative\" ></div>\n                </div>               \n                <div ws-template=\"WCompSplitterHor\" \n                     ws-onafterrender=\"AfterRender\"\n                     style=\"display: grid;\n                            grid-gap: 5px; \n                            box-sizing: border-box; \n                            grid-template-areas: 'one' 'two'; \n                            grid-template-columns:100%; \n                            overflow: hidden; \n                            grid-template-rows   : ${PartSizes}\" \n                     >\n                     <slot></slot>\n                    <slot name=\"splitter\">  <div style=\"grid-row:2; grid-column:1 / 1 ; cursor: row-resize; z-index: 3; background-color: #eef ; height: ${Gap}; margin-top :-${Gap}\" ws-onmousedown=\"MouseDown\" ws-onafterrender=\"AfterRenderSp\" ></div> </slot>\n                    <style>\n                        ::slotted(*) {\n                            display: grid;\n                            height : 100%;\n                            width  : 100%;\n                            overflow: hidden;\n                        }\n                        ::slotted(*:nth-child(2)) {\n                            grid-area: two;\n                        }\n                        ::slotted(*[slot=\"splitter\"]) {\n                            grid-row:2; grid-column:1 / 1 ; \n                            cursor: row-resize; \n                            z-index: 3; \n                            background-color: #eef ; \n                            height: ${Gap}; \n                            margin-top :-${Gap}\n                        }\n                    </style>\n                </div>        \n                <div ws-template=\"WCompSplitterVer\" \n                     ws-onafterrender=\"AfterRender\"\n                     style=\"display: grid; \n                            grid-gap: 5px; \n                            box-sizing: border-box; \n                            grid-template-areas: 'one two'; \n                            grid-template-rows   :100%; \n                            overflow: hidden; \n                            grid-template-columns: ${PartSizes}\"  >\n                    <slot></slot>\n                    <slot name=\"splitter\"> <div style=\"grid-column:2; grid-row:1 / 1 ; cursor: col-resize; z-index: 3; background-color: #eef ; width: ${Gap}; margin-left :-${Gap}\" ws-onmousedown=\"MouseDown\" ws-onafterrender=\"AfterRenderSp\" ></div> </slot>\n                    <style>\n                        ::slotted(*) {\n                            display: grid;\n                            height : 100%;\n                            width  : 100%;\n                            overflow: hidden;\n                        }\n                        ::slotted(*:nth-child(2)) {\n                            grid-area: two;\n                        }\n                        ::slotted(*[slot=\"splitter\"]) {\n                            grid-column:2; grid-row:1 / 1\n                            cursor: column-resize; \n                            z-index: 3; \n                            background-color: #eef ; \n                            width: ${Gap}; \n                            margin-left:-${Gap}\n                        }\n                    </style>\n                </div>\n                <div ws-template=\"AppFwkClient\" >\n                    <ws-FixedSplitterHor>\n                        <PartSizes>55px calc(100% - 55px)</PartSizes>\n                        <First>\n                            <span style=\"display: grid;\n                                  grid-template-columns: 30% 20% 20% 10%;\n                                  grid-gap: 25px;\n                                \">\n                                <div class=\"mainTitle\">AppFramework</div>\n                            </span>\n                        </First>\n                        <Second>\n                                <ws-FixedSplitterVer>\n                                    <PartSizes>calc(100% - 150px) 150px</PartSizes>\n                                    <First>\n                                        <wcomp-splitter vertical value=\"18\" max=\"100\">\n                                            <div><div ws-hole=\"PlugIns\" style=\"overflow:auto\" >\n                                                <div ws-template=\"Tile\">\n                                                    <div draggable=\"true\" class=\"code-editor-list-tile ${Predecessor} ${Selected}\" \n                                                    ws-ondrag=\"Drag\"\n                                                    ws-ondragover=\"DragOver\"\n                                                    ws-ondrop=\"Drop\"\n                                                   >\n                                                   <span class=\"node ${Parent} ${ErrorMsg}\" title=\"expand\" ws-onclick=\"ToggleCollapse\"></span>\n                                                   <div  class=\"code-editor-list-text\" style=\"text-indent:${Indent}em; white-space: pre\" ws-onclick=\"Select\" ws-onafterrender=\"AfterRender\" >${Name}</div>\n                                                   <span class=\"predecessor\" title=\"toggle predecessor\" ws-onclick=\"TogglePred\">X</span>\n                                               </div>\n                                       \n                                                </div>\n                                            </div></div>\n                                            <wcomp-splitter vertical value=\"100\" min=\"30\" max=\"100\">\n                                                <ws-FixedSplitterHor>\n                                                    <PartSizes>32px calc(100% - 32px)</PartSizes>\n                                                    <First>\n                                                        <div>\n                                                            <div class=\"input-group\">\n                                                                <span class=\"input-group-addon\">name:</span>\n                                                                <span class=\"input-group-addon\">${PlugInName}</span>\n                                                            </div>\n                                                        </div>\n                                                    </First>\n                                                    <Second>\n                                                        <div style=\"overflow:auto\">\n                                                            <div>\n                                                                <div>Docs:</div>\n                                                                <div ws-hole=\"Docs\" style=\"overflow:auto\" ></div>\n                                                            </div>\n                                                            <div>\n                                                                <div>Views:</div>\n                                                                <div ws-hole=\"Views\" style=\"overflow:auto\" >\n                                                                    <div ws-template=\"NameValue\" class=\"input-group\">\n                                                                        <span class=\"input-group-addon\">${Name}:</span>\n                                                                        <span class=\"input-group-addon\">${Value}</span>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                            <div>\n                                                                <div>Queries:</div>\n                                                                <div ws-hole=\"Queries\" style=\"overflow:auto\" ></div>\n                                                            </div>\n                                                            <div>\n                                                                <div>Vars:</div>\n                                                                <div ws-hole=\"Vars\" style=\"overflow:auto\" >\n                                                                    <div ws-template=\"NameValueInput\" class=\"input-group\">\n                                                                        <span class=\"input-group-addon\">${Name}:</span>\n                                                                        <textarea class=\"form-control\" id=\"\" placeholder=\"Value...\" ws-var=\"Value\" spellcheck=\"false\">\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </Second>\n                                                </ws-FixedSplitterHor>\n                                                <wcomp-tabstrip >\n                                                    <div tabname=\"Properties\">\n                                                        <div>\n                                                            <table style=\"border-spacing:0px\">\n                                                                <thead>\n                                                                    <th style=\"width: 30%  \">Name</th>\n                                                                    <th style=\"width: 70% \">Value</th>\n                                                                </thead>\n                                                                <tbody ws-hole=\"Properties\" ws-children-template=\"Property\">\n                                                                    <tr ws-onclick=\"Select\" style=\"margin-bottom: 2px\" class=\"level  \">\n                                                                        <td class=\"level-item\">\n                                                                            <div>\n                                                                                <input ws-var=\"Name\" type=\"text\" class=\"form-control\" id=\"\" placeholder=\"Property...\">\n                                                                            </div>\n                                                                        </td>\n                                                                        <td class=\"level-item\">\n                                                                            <div>\n                                                                                <textarea ws-var=\"Value\" class=\"form-control\" id=\"\" placeholder=\"Value...\"></textarea>\n                                                                            </div>\n                                                                        </td>\n                                                                        <td class=\"level-item\">\n                                                                            <div style=\" cursor: pointer \" title=\"remove\">\n                                                                                <button ws-onclick=\"Remove\" class=\"delete is-small\">x</button>\n                                                                            </div>\n                                                                        </td>\n                                                                    </tr>\n                                                                </tbody>\n                                                            </table>\n                                                            <button ws-onclick=\"AddProperty\" class=\"add is-small\">add ...</button>\n                                                        </div>\n                                                    </div>\n                                                </wcomp-tabstrip>\n                                            </wcomp-splitter>\n                                        </wcomp-splitter>\n                                    </First>\n                                    <Second>\n                                        <div style=\"\n                                            overflow: hidden;\n                                            display: grid;\n                                            grid-template-columns: 100%;\n                                            grid-template-rows: repeat(15, calc(100% / 15));\n                                            bxackground-color: #eee;\n                                            box-sizing: border-box;\n                                            padding : 5px;\n                                            grid-gap: 5px;\n                                            margin-right: 21px;\n                                       \"  class=\"absolute\" ws-hole=\"Actions\" >\n                                            <button ws-template=\"Action\"         ws-onclick=\"Click\" class=\"btn\" type=\"button\" id=\"\"          >${Name}</button>\n                                            <button ws-template=\"ActionDisabled\" ws-onclick=\"Click\" class=\"btn\" type=\"button\" id=\"\" disabled >${Name}</button>\n                                        </div>\n                                    </Second>\n                                </ws-FixedSplitterVer>\n                        </Second>\n                    </ws-FixedSplitterHor>\n                </div>\n                <style style=\"display: none\">\n                        .Hidden     { display   : none         }\n                        table th,table td { padding:0 5px 0 5px; text-overflow: ellipsis }\n                        td input.form-control { \n                            padding    : 0px; \n                            font-family: monospace;\n                            font-size  :   small;\n                            margin-top :   0px;\n                            margin-left: -2px;\n                            width      : 100%\n                        }\n                        td select {\n                            font-size : smaller;\n                            max-width : 8ch;\n                        }\n                        xtextarea {\n                           resize : none;\n                        }\n                        .tab-content {\n                            overflow: hidden\n                        }\n                        .tab-children {\n                            position:relative;\n                        }\n                        .tab-children>div>* {\n                            position:absolute;\n                            height: 100%;\n                            width:  100%;\n                            display: grid;\n                        }\n                        .relative {\n                            position:relative;\n                        }\n                        .relative>* {\n                            position:absolute;\n                            height: 100%;\n                            width:  100%;\n                            display: grid;\n                        }\n                        table.table-striped    tbody tr:nth-child(even) { background: #EEE  }\n                        table.table-striped    tbody tr:nth-child(odd ) { background: #FFF  }\n                        table.table-striped    tbody input              { background: transparent; border: none}\n                        table.table-striped    tbody select             { background: transparent; border: none}\n                        table.table-nonstriped tbody tr:nth-child(even) { background: inherit }\n                        table.table-nonstriped tbody tr:nth-child(odd ) { background: inherit }\n                        table.table            tbody tr.hover           { border    : solid thin transparent; } \n                        table.table            tbody tr.hover:hover     { border    : solid thin blue     ; } \n                        table.table            tbody th:hover           { background: gray; cursor: pointer }\n                        table.table            tbody tr.hover:hover>td  { border-top: solid thin blue     ; \n                                                                   border-bottom: solid thin blue     ; } \n                        table.table            tbody tr.selected { background   : #b9eeff             ; }\n                        table.table            tbody tr.formula.selected { background: #20f7f7             ; }\n                        thead { color: gray }\n                        h3 { \n                            color: gray;\n                            line-height: 1em;\n                        }\n                        button       { border: solid thin transparent ; border-radius: 3px; }\n                        button:hover { border: solid thin blue }\n                        .indenter { position  : absolute; \n                                    top:0px; bottom:0px; left:0px; \n                                    background: white; color:white;\n                                    border-right: gray thin dotted;\n                                    }\n                        body {\n                            color      : #333;\n                            font-size  : small;\n                            font-family: monospace;\n                            line-height: 1.2;\n                        }\n                        .mainTitle {  \n                            font-size: 48px;\n                            font-weight: 500;\n                            color: gray;\n                            margin-top: -12px;\n                        }\n                        .CodeMirror {\n                            height: 100%;\n                        }\n                        \n                      \n                        body { margin: 0px }     \n                             \n                        div textarea {\n                            font-family     : monospace;\n                        }\n                        .code-editor-list-tile {\n                            white-space     : nowrap; \n                            border-style    : solid none none;\n                            border-color    : white;\n                            border-width    : 1px;\n                            background-color: #D8D8D8;\n                            display         : flex;\n                        }\n                        .code-editor-list-text{\n                            padding         : 1px 10px 1px 5px;\n                            overflow        : hidden;\n                            text-overflow   : ellipsis;\n                            white-space     : nowrap;\n                            flex            : 1;\n                        }\n                        \n                        .code-editor-list-tile span.node.ErrorMsg {\n                            background-color: red\n                        }\n                        .code-editor-list-tile span.node.expanded::before {\n                            content: \"-\"\n                        }\n                        .code-editor-list-tile span.node.collapsed::before {\n                            content: \"+\"\n                        }\n                        .code-editor-list-tile.direct-predecessor {\n                            font-weight     : bold;\n                            color           : blue;\n                        }\n                        .code-editor-list-tile.indirect-predecessor {\n                            color           : blue;\n                        }\n                        .code-editor-list-tile.included-predecessor {\n                            color           : chocolate;\n                        }\n                        .code-editor-list-tile.selected {\n                            background-color: #77F;\n                            color           : white;\n                        }\n                        .code-editor-list-tile.codeSnippet {\n                            text-decoration: underline\n                        }\n                        .code-editor-list-tile:hover {\n                            background      : lightgray;\n                        }\n                        .code-editor-list-tile.selected:hover {\n                            background      : blue;\n                        }\n                        .code-editor-list-tile>.predecessor {\n                            font-weight     : bold;\n                            border-style    : inset;\n                            border-width    : 1px;\n                            text-align      : center;\n                            color           : transparent;\n                        }\n                        .code-editor-list-tile.direct-predecessor>.predecessor {\n                            color           : blue;\n                        }\n                        \n                        .CodeMirror { height: 100%; }\n                        \n                        .node {\n                            background-color: white; \n                            width           : 2ch; \n                            color           : #A03; \n                            font-weight     : bold; \n                            text-align      : center;\n                            font-family     : arial;\n                        }\n                        .Warning { text-decoration: underline lightblue } \n                        .Error   { text-decoration: underline red       } \n                        \n                    </style>\n            </div>\n            \"\"\"\n            [< JavaScriptExport >]\n            module AppFramework =\n                open WebSharper.JavaScript\n            \n                type PlugInVar = { \n                    varName        : string\n                    varVar         : Var<string>\n                }\n            \n                type PlugInView = {\n                    viwName        : string\n                    viwView        : View<string>\n                }\n            \n                type DocFunction =\n                | LazyDoc of Lazy<Doc>\n                | FunDoc1 of (                                        string -> Doc) * string                                     \n                | FunDoc2 of (                              string -> string -> Doc) * string * string                            \n                | FunDoc3 of (                    string -> string -> string -> Doc) * string * string * string                   \n                | FunDoc4 of (          string -> string -> string -> string -> Doc) * string * string * string * string          \n                | FunDoc5 of (string -> string -> string -> string -> string -> Doc) * string * string * string * string * string  \n            \n                type PlugInDoc = {\n                    docName        : string\n                    docDoc         : DocFunction\n                }\n            \n                type ActFunction =\n                | FunAct0 of (                                         unit -> unit)\n                | FunAct1 of (                                          obj -> unit) * string\n                | FunAct2 of (                                   obj -> obj -> unit) * string * string\n            \n                type PlugInAction = {\n                    actName        : string\n                    actFunction    : ActFunction\n                    actEnabled     : View<bool>\n                }\n            \n                type PlugInQuery = {\n                    qryName        : string\n                    qryFunction    : obj -> obj\n                }\n            \n                type PlugIn = {\n                    plgName        : string\n                    plgVars        : ListModel<string, PlugInVar   >\n                    plgViews       : ListModel<string, PlugInView  >\n                    plgDocs        : ListModel<string, PlugInDoc   >\n                    plgActions     : ListModel<string, PlugInAction>\n                    plgQueries     : ListModel<string, PlugInQuery >\n                }\n             \n                let private plugIns = ListModel (fun plg -> plg.plgName)\n            \n                let mainDocV = Var.Create \"AppFramework.AppFwkClient\"\n                //let titleV   = Var.Create \"AppFramework.mainDocV\"\n            \n                open WebSharper.UI.Templating\n            \n                let [< Literal >] TemplateFileName =  @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\LayoutEngine\\website\\AppFramework.html\"\n                //let [< Literal >] TemplateFileName =  @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\FSharpStation\\website\\Templates.html\"\n            \n                type AppFwkTemplate = Templating.Template<TemplateFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n            \n                let defaultPlugIn() = {\n                        plgName    = \"\"\n                        plgVars    = ListModel (fun (var:PlugInVar   ) -> var.varName)\n                        plgViews   = ListModel (fun (viw:PlugInView  ) -> viw.viwName)\n                        plgDocs    = ListModel (fun (doc:PlugInDoc   ) -> doc.docName)\n                        plgActions = ListModel (fun (act:PlugInAction) -> act.actName)\n                        plgQueries = ListModel (fun (qry:PlugInQuery ) -> qry.qryName)\n                    }\n            \n                let splitName lytNm = String.splitByChar '.' >>  (fun a -> if a.Length = 1 then (lytNm, a.[0]) else (a.[0],a.[1]) )\n            \n                let selectionPlugInO = Var.Create <| Some \"AppFramework\"\n                let currentPlugInW   = selectionPlugInO.View |>  View.Map2(fun _ -> Option.bind plugIns.TryFindByKey >> Option.defaultWith defaultPlugIn ) plugIns.View\n                let currentPlugInV   = Var.Make currentPlugInW plugIns.Add\n            \n                let renderPlugIns() = plugIns.DocLens(fun name plug -> \n                    AppFwkTemplate.Tile()\n                        .Name(     name                                                      )\n                        .Select(   fun _ -> selectionPlugInO.Set <| Some name                )\n                        .Selected( if selectionPlugInO.V = Some name then \"selected\" else \"\" )\n                        .Doc() \n                )\n            \n                let renderVars() = \n                    currentPlugInW\n                    |> View.Map (fun plg -> plg.plgVars |> Seq.map (fun v -> plg, v))\n                    |> Doc.BindSeqCachedBy (fun (plg, var) -> plg.plgName, var.varName) (fun (plg, var) -> \n                        AppFwkTemplate.NameValueInput()\n                            .Name(    var.varName  ) \n                            .Value(   var.varVar   )\n                            .Doc() \n                    ) \n            \n                let renderViews() = \n                    currentPlugInW\n                    |> View.Map (fun plg -> plg.plgViews |> Seq.map (fun v -> plg, v))\n                    |> Doc.BindSeqCachedBy (fun (plg, viw) -> plg.plgName, viw.viwName) (fun (plg, viw) -> \n                        AppFwkTemplate.NameValue()\n                            .Name(    viw.viwName  )\n                            .Value(   viw.viwView  )\n                            .Doc() \n                    ) \n            \n                let renderDocs() =\n                    currentPlugInW\n                    |> View.Map (fun plg -> plg.plgDocs |> Seq.map (fun v -> plg, v))\n                    |> Doc.BindSeqCachedBy (fun (plg, doc) -> plg.plgName, doc.docName) (fun (plg, doc) -> \n                        let parms = match doc.docDoc with\n                                    | LazyDoc _                          -> \"\"\n                                    | FunDoc1(_, p1                    ) -> [ p1                ] |> String.concat \", \" |> sprintf \"(%s)\"\n                                    | FunDoc2(_, p1 , p2               ) -> [ p1; p2            ] |> String.concat \", \" |> sprintf \"(%s)\"\n                                    | FunDoc3(_, p1 , p2 , p3          ) -> [ p1; p2; p3        ] |> String.concat \", \" |> sprintf \"(%s)\"\n                                    | FunDoc4(_, p1 , p2 , p3 , p4     ) -> [ p1; p2; p3; p4    ] |> String.concat \", \" |> sprintf \"(%s)\"\n                                    | FunDoc5(_, p1 , p2 , p3 , p4 , p5) -> [ p1; p2; p3; p4; p5] |> String.concat \", \" |> sprintf \"(%s)\"\n                        AppFwkTemplate.Tile()\n                            .Name(     doc.docName + parms)\n                            .Select(   fun _ -> currentPlugInW |> View.Get (fun plg ->  mainDocV.Set <| plg.plgName + \".\" + doc.docName ) )\n                            .Doc() \n                    ) \n            \n                let callFunction p1 p2 actF =\n                    match actF with\n                    | FunAct0(f      ) -> f ()\n                    | FunAct1(f, _   ) -> f p1\n                    | FunAct2(f, _, _) -> f p1 p2\n            \n                let renderActions() = \n                    currentPlugInW\n                    |> View.Map (fun plg -> plg.plgActions |> Seq.map (fun v -> plg, v))\n                    |> Doc.BindSeqCachedBy (fun (plg, act) -> plg.plgName, act.actName) (fun (plg, act) -> \n                        let parms = match act.actFunction with\n                                    | FunAct0(_        ) -> \"\"\n                                    | FunAct1(_, p1    ) -> [ p1      ] |> String.concat \", \" |> sprintf \"(%s)\"\n                                    | FunAct2(_, p1, p2) -> [ p1 ; p2 ] |> String.concat \", \" |> sprintf \"(%s)\"\n                        act.actEnabled\n                        |> View.Map (function\n                            | true  -> AppFwkTemplate.Action() \n                                        .Name(     act.actName + parms                             )\n                                        .Click(    fun ev -> act.actFunction |> callFunction ev () )\n                                        .Doc() \n                            | false -> AppFwkTemplate.ActionDisabled() \n                                        .Name(     act.actName                                 )\n                                        .Click(    fun ev -> act.actFunction |> callFunction ev () )\n                                        .Doc() \n                        ) |> Doc.EmbedView\n                    ) \n            \n                let renderQueries() = \n                    currentPlugInW\n                    |> View.Map (fun plg -> plg.plgQueries |> Seq.map (fun v -> plg, v))\n                    |> Doc.BindSeqCachedBy (fun (plg, qry) -> plg.plgName, qry.qryName) (fun (plg, qry) -> \n                        AppFwkTemplate.Tile()\n                            .Name(    qry.qryName  )\n                            .Select(   fun _ -> () |> box |> qry.qryFunction |> unbox |> JS.Alert )\n                            .Doc() \n                    ) \n            \n                let AppFwkClient = \n                    lazy\n                        AppFwkTemplate.AppFwkClient()\n                            .PlugIns(     renderPlugIns()           )\n                            .PlugInName(  currentPlugInW.V.plgName  )\n                            .Vars(        renderVars()              )\n                            .Views(       renderViews()             ) \n                            .Docs(        renderDocs()              )\n                            .Actions(     renderActions()           )\n                            .Queries(     renderQueries()           )\n                            .Doc()\n            \n                let getLazyDoc doc =\n                    match doc.docDoc with\n                    | LazyDoc ldoc -> ldoc.Value\n                    | _ -> Html.div [] [ Html.text <| sprintf \"Doc with parameters not allowed here: %A\" doc ]\n            \n                let getMainClientDoc() =\n                    plugIns.View\n                    |> View.Map2(fun mainDoc plgs -> \n                        plgs |> Seq.tryPick(fun plg ->\n                            plg.plgDocs \n                            |> Seq.tryFind(fun doc -> plg.plgName = mainDoc || plg.plgName + \".\" + doc.docName = mainDoc) \n                            |> Option.map getLazyDoc\n                        )\n                        |> Option.defaultValue AppFwkClient.Value\n                    ) mainDocV.View\n                    |> Doc.EmbedView\n            \n                let mainDoc() = \n                        AppFwkTemplate.AppFramework()\n                            .MainDoc(     mainDocV.View                                     )\n                            .GoClient(    fun _ -> mainDocV.Set \"AppFramework.AppFwkClient\" )\n                            .MainClient(  getMainClientDoc()                                )\n                            .Doc()\n            \n                open WebComponent\n            \n                let horizontal : WcSplitter.Layout = fun partSizes afterRender afterRenderSp mouseDown gap ->\n                    AppFwkTemplate.WCompSplitterHor()\n                        .PartSizes(    partSizes)\n                        .AfterRender(  afterRender)\n                        .AfterRenderSp(afterRenderSp)\n                        .MouseDown(    fun te -> mouseDown te.Event)\n                        .Gap(          gap)\n                        .Doc()\n                let vertical   : WcSplitter.Layout = fun partSizes afterRender afterRenderSp mouseDown gap ->\n                    AppFwkTemplate.WCompSplitterVer()\n                        .PartSizes(    partSizes)\n                        .AfterRender(  afterRender)\n                        .AfterRenderSp(afterRenderSp)\n                        .MouseDown(    fun te -> mouseDown te.Event)\n                        .Gap(          gap)\n                        .Doc()\n            \n                let newVar name var = { varName = name ; varVar      = var          }\n                let newViw name viw = { viwName = name ; viwView     = viw          }\n                let newDoc name doc = { docName = name ; docDoc      = LazyDoc doc  }\n                let newQry name qry = { qryName = name ; qryFunction = qry          }\n                let newAct name fnc = {\n                    actName        = name\n                    actFunction    = FunAct0 fnc\n                    actEnabled     = View.Const true\n                }\n            \n                let newActF name fncF = {\n                    actName        = name\n                    actFunction    = fncF\n                    actEnabled     = View.Const true\n                }\n                \n                let newDocF name docF = { docName = name ; docDoc = docF }\n            \n                type PlugInBuilder() =\n                    member __.Zero() = { defaultPlugIn() with plgName    = \"Main\" }\n                    member this.Yield(()) = this.Zero()\n                    member __.For(coll:seq<_>, func) =\n                        let ie = coll.GetEnumerator()\n                        while ie.MoveNext() do\n                            func ie.Current\n                    [<CustomOperation(\"plgName\"   )>] member __.Name  ( plg:PlugIn, name               ) = { plg with plgName    =    name }\n                    [<CustomOperation(\"plgVar\"    )>] member __.AddVar( plg:PlugIn, name, var          ) = plg.plgVars   .Add(newVar  name var)  ; plg\n                    [<CustomOperation(\"plgDoc\"    )>] member __.AddDoc( plg:PlugIn, name, doc          ) = plg.plgDocs   .Add(newDoc  name doc)  ; plg\n                    [<CustomOperation(\"plgDoc2\"   )>] member __.AddDoc2(plg:PlugIn, name, doc, p1, p2  ) = plg.plgDocs   .Add(newDocF name (FunDoc2(doc,p1,p2    )))  ; plg\n                    [<CustomOperation(\"plgDoc3\"   )>] member __.AddDoc3(plg:PlugIn, name, doc,a,b,c    ) = plg.plgDocs   .Add(newDocF name (FunDoc3(doc,a,b,c    )))  ; plg\n                    [<CustomOperation(\"plgDoc4\"   )>] member __.AddDoc4(plg:PlugIn, name, doc,a,b,c,d  ) = plg.plgDocs   .Add(newDocF name (FunDoc4(doc,a,b,c,d  )))  ; plg\n                    [<CustomOperation(\"plgDoc5\"   )>] member __.AddDoc5(plg:PlugIn, name, doc,a,b,c,d,e) = plg.plgDocs   .Add(newDocF name (FunDoc5(doc,a,b,c,d,e)))  ; plg\n                    //[<CustomOperation(\"plgDocDyn\" )>] member __.AddDocF(plg:PlugIn, name, docF)  = plg.plgDocs   .Add(newDoc name (lazy LayoutEngine.turnToView docF) ) ; plg\n                    [<CustomOperation(\"plgQuery\"  )>] member __.AddQry( plg:PlugIn, name, qry          ) = plg.plgQueries.Add(newQry  name qry) ; plg\n                    [<CustomOperation(\"plgAct\"    )>] member __.AddAct( plg:PlugIn, name, act          ) = plg.plgActions.Add(newAct  name act) ; plg\n                    [<CustomOperation(\"plgAct1\"   )>] member __.AddAct1(plg:PlugIn, name, act, p1      ) = plg.plgActions.Add(newActF name (FunAct1(act,p1   )) ) ; plg\n                    [<CustomOperation(\"plgAct2\"   )>] member __.AddAct2(plg:PlugIn, name, act, p1, p2  ) = plg.plgActions.Add(newActF name (FunAct2(act,p1,p2)) ) ; plg\n                    [<CustomOperation(\"plgActOpt\" )>] member __.AddActO(plg:PlugIn, name,         actO ) = \n                                                        match actO with \n                                                        | Some act -> plg.plgActions.Add(newAct name act)\n                                                        | None     -> ()\n                                                        plg\n                    //[<CustomOperation(\"mainDoc\")>] member __.InsDoc(plg:PlugIn, name, doc) = plg.plgDocs.    = [| newDoc name doc |] |> Array.append <| plg.plgDocs    }\n                    [<CustomOperation(\"plgView\"   )>] member __.AddViw( plg:PlugIn, name, viw )  = plg.plgViews.Add(newViw name viw) ; plg\n                    [<CustomOperation(\"plgMerge\"  )>] member __.Merge ( plg:PlugIn, prefix, p2:PlugIn) = \n                                                        plg.plgVars   .AppendMany(p2.plgVars    |> Seq.map (fun v -> { v with varName = prefix + v.varName } ) ) \n                                                        plg.plgViews  .AppendMany(p2.plgViews   |> Seq.map (fun w -> { w with viwName = prefix + w.viwName } ) ) \n                                                        plg.plgDocs   .AppendMany(p2.plgDocs    |> Seq.map (fun d -> { d with docName = prefix + d.docName } ) ) \n                                                        plg.plgActions.AppendMany(p2.plgActions |> Seq.map (fun a -> { a with actName = prefix + a.actName } ) ) \n                                                        plg.plgQueries.AppendMany(p2.plgQueries |> Seq.map (fun q -> { q with qryName = prefix + q.qryName } ) ) \n                                                        plg\n            \n                let plugin = PlugInBuilder()\n            \n            \n                let tryGetPlugInW plgName = plugIns.TryFindByKeyAsView plgName\n            \n                let tryGetVarW plgName varName = tryGetPlugInW plgName |> View.Bind (function Some plg -> plg.plgVars   .TryFindByKeyAsView varName |_-> View.Const None ) \n                let tryGetViwW plgName viwName = tryGetPlugInW plgName |> View.Bind (function Some plg -> plg.plgViews  .TryFindByKeyAsView viwName |_-> View.Const None ) \n                let tryGetActW plgName actName = tryGetPlugInW plgName |> View.Bind (function Some plg -> plg.plgActions.TryFindByKeyAsView actName |_-> View.Const None ) \n                let tryGetQryW plgName qryName = tryGetPlugInW plgName |> View.Bind (function Some plg -> plg.plgQueries.TryFindByKeyAsView qryName |_-> View.Const None ) \n                let tryGetDocW plgName docName = tryGetPlugInW plgName |> View.Bind (function Some plg -> plg.plgDocs   .TryFindByKeyAsView docName |_-> View.Const None ) \n                let tryGetVoVW plgName varName = \n                    tryGetVarW plgName varName\n                    |> View.Bind(function\n                        | Some var -> Some var.varVar |> View.Const\n                        | None -> \n                            tryGetViwW plgName varName\n                            |> View.Map(function\n                            | Some viw -> Var.Make viw.viwView ignore |> Some\n                            | None -> None\n                    ))\n                let tryGetWoWW plgName viwName =\n                    tryGetViwW plgName viwName\n                    |> View.Bind(function\n                        | Some viw -> viw.viwView |> View.Map Some\n                        | None -> \n                            tryGetVarW plgName viwName\n                            |> View.Bind(function\n                            | Some var -> var.varVar.View |> View.Map Some\n                            | None -> None |> View.Const\n                    ))\n            \n                let tryGetPlugIn plgName = plugIns.TryFindByKey plgName\n            \n                let tryGetVar plgName varName = tryGetPlugIn plgName |> Option.bind (fun plg -> plg.plgVars   .TryFindByKey varName)\n                let tryGetViw plgName viwName = tryGetPlugIn plgName |> Option.bind (fun plg -> plg.plgViews  .TryFindByKey viwName)\n                let tryGetAct plgName actName = tryGetPlugIn plgName |> Option.bind (fun plg -> plg.plgActions.TryFindByKey actName)\n                let tryGetQry plgName qryName = tryGetPlugIn plgName |> Option.bind (fun plg -> plg.plgQueries.TryFindByKey qryName)\n                let tryGetDoc plgName docName = tryGetPlugIn plgName |> Option.bind (fun plg -> plg.plgDocs   .TryFindByKey docName)\n                let tryGetVoV plgName varName = \n                    tryGetVar plgName varName \n                    |> Option.map (fun var -> Some var.varVar)\n                    |> Option.defaultWith (fun () -> \n                        tryGetViw plgName varName \n                        |> Option.map (fun viw -> Var.Make viw.viwView ignore)\n                    )\n                let tryGetWoW plgName viwName = \n                    tryGetViw plgName viwName \n                    |> Option.map (fun viw -> Some viw.viwView)\n                    |> Option.defaultWith (fun () -> \n                        tryGetVar plgName viwName \n                        |> Option.map (fun var -> var.varVar.View )\n                    )\n            \n                type TextData = \n                | TDText  of string\n                | TDAct   of PlugInAction\n            \n                let rec getOneTextData lytNm name bef aft =\n                    let plg, n = splitName lytNm name\n                    tryGetActW plg n\n                    |> View.Bind(function\n                    | Some act -> TDAct act |> View.Const\n                    | None     ->\n                    tryGetWoWW plg n\n                    |> View.Bind(function\n                        | Some txt ->\n                            getTextData lytNm aft\n                            |> View.Bind (function\n                                | TDText  b    -> View.Const <| (TDText  <|     bef + txt + b                             )\n                                | TDAct   act  -> View.Const <| (TDText  <| sprintf \"Unexpected Action @{%s}\" act.actName )\n                            )\n                        | None                 -> View.Const <| (TDText  <| sprintf \"%s @{Missing %s}%s\" bef name aft     )  \n                        )\n                    )\n            \n                and getTextData lytNm (txt:string) =\n                    txt\n                    |> String.delimitedO \"@{\" \"}\"\n                    |> Option.map(fun (bef, name, aft) -> getOneTextData lytNm name bef aft )\n                    |> Option.defaultWith (fun () -> TDText  txt |> View.Const)\n            \n                let getAttrs lytNm (attrs: string) = [\n                    yield!  attrs\n                            |> String.splitByChar ';'\n                            |> Seq.map(String.splitByChar '=')\n                            |> Seq.choose(\n                                function \n                                | [| name ; value |] when name.Trim() <> \"\" && value.Trim() <> \"\" ->\n                                        value.Trim() \n                                        |> getTextData lytNm\n                                        |> Attr.DynamicCustom (fun el -> function\n                                            | TDText  v   -> el.SetAttribute(name.Trim(), v.Trim())\n                                            | TDAct   act -> el.AddEventListener(name.Trim(), (fun (ev:Dom.Event) -> act.actFunction |> callFunction el ev), false)\n                                        )\n                                        |> Some\n                                |_      -> None )\n                    yield!  attrs\n                            |> String.splitByChar ';'\n                            |> Seq.map(String.splitByChar ':')\n                            |> Seq.choose(\n                                function \n                                | [| name ; value |] when name.Trim() <> \"\" && value.Trim() <> \"\" -> \n                                        value.Trim() \n                                        |> getTextData lytNm\n                                        |> View.Map(function\n                                            | TDText  v   -> v.Trim()\n                                            | TDAct   act -> sprintf \"@{%s}\" act.actName\n                                        )\n                                        |> Attr.DynamicStyle (name.Trim())\n                                        |> Some\n                                |_      -> None )\n                ]\n            \n                type [< Measure >] PlugInNameM\n                type PlugInName= string<PlugInNameM>\n            \n                type  Fun<'P, 'R> = { f : Val<'P -> 'R> ; p : Val<'P> }\n                and   Val<'P    > = VView of View<'P> | VConst of 'P\n                    with\n                    //[<Inline>] static member ( <* )(vf:Val<'a->'b> , a :    'a ) = VConst a\n                    [<Inline>] static member ( <* )(vf:Val<'a->'b> , aV:Var<'a>) = VView  aV.View\n            \n                type P<'T> = { r:Depend.Depend<'T> }\n            \n                type PFn<'P, 'R> = P<Fun<'P, 'R>>\n                type PVl<'P    > = P<Val<'P    >>\n            \n                open Depend.Operators\n            \n                let bindWrap       f  pv       : P<'b> = { r = pv   >>= fun v -> (f v).r }\n                let unwrapBindWrap f (pv:P<_>) : P<'b> = { r = pv.r |>> fun v ->  f v    }\n            \n                let add1 a = a + 1\n                let a11V = Var.Create 11\n            \n                let mainX = VConst add1 <* a11V\n            \n                let [<Inline>] callF f = \n                    match f with\n                    | { f = VConst f  ; p = VConst p  } -> VConst (                       f              p )\n                    | { f = VConst f  ; p = VView  pV } -> VView  (View.Apply (View.Const f)             pV)\n                    | { f = VView  fV ; p = VView  pV } -> VView  (View.Apply             fV             pV)\n                    | { f = VView  fV ; p = VConst p  } -> VView  (View.Apply             fV (View.Const p))\n            \n            \n                let baseView        = mainDocV.View\n                let makeAViewDoc  f = baseView |> Doc.BindView(fun _ -> f())\n                let makeAViewDocL f = lazy makeAViewDoc f\n            \n                let [<Inline>] callDoc f =\n                    makeAViewDoc(fun _ -> \n                        match callF f with\n                        | VConst d  -> d\n                        | VView  dW -> Doc.BindView id dW\n                    )\n            \n                let [<Inline>] callAtt f : Attr =\n                    match callF f with\n                    | VConst a  -> a\n                    | VView  aW -> failwithf \"View<Attr> not implemented\"\n            \n                let [<Inline>] ff f p = { f = f       ; p = p }\n                let [<Inline>] fc c p = { f = callF c ; p = p }\n            \n                let [<Inline>] pff pf p = { r = pf.r |>> fun f -> ff f p }\n                let [<Inline>] pfc pc p = { r = pc.r |>> fun c -> fc c p }\n            \n                module Val =\n            \n                    let map f = function\n                    | VConst p  -> VConst (         f p )\n                    | VView  pv -> VView  (View.Map f pv)\n            \n                    let toView = function\n                    | VConst p  -> View.Const p\n                    | VView  pv ->            pv\n            \n                    let addDoc d (docs:Val<seq<Doc>>) =\n                        match docs with\n                        | VConst ds  -> VConst (Seq.append ds [ d ] )\n                        | VView  dsW -> VConst (seq [ Doc.BindView Doc.Concat dsW ; d ])\n            \n                    let addAtt a (atts:Val<seq<Attr>>) =\n                        match atts with\n                        | VConst ats  -> VConst (Seq.append ats [ a ] )\n                        | VView  atsW -> failwithf \"addAtt for VView not implemented\"// VConst (seq [ Doc.BindView Doc.Concat atsW ; a ])\n            \n                    let textDoc = function\n                    | VConst txt  -> Html.text     txt\n                    | VView  txtW -> Html.textView txtW\n            \n                    let textAtt : Val<string> -> Attr = failwithf \"textAtt not implemented\"\n            \n                let choiceToString   = function Choice1Of2 v -> v | Choice2Of2 r -> sprintf \"@{expecting string, got Action: %A}\" r\n                let valToStyle atn = function\n                | VConst(Choice1Of2 s) -> Attr.Style  atn s\n                | VView             w  -> Attr.DynamicStyle atn (View.Map choiceToString w)\n                |                   v  -> failwithf \"Illegal reference %A\" v\n            \n                let valToAttr atn = function\n                | VConst(Choice1Of2 s) -> Attr.Create atn s\n                | VView             w  ->\n                    w |> Attr.DynamicCustom(fun el -> function\n                        | Choice1Of2 s   -> el.SetAttribute(atn, s.Trim())\n                        | Choice2Of2 act -> el.AddEventListener(atn, (fun (ev:JavaScript.Dom.Event) -> (act:PlugInAction).actFunction |> callFunction el ev), false)\n                    )\n                | v -> failwithf \"Illegal value %A\" v\n            \n                module Extract0 =\n            \n                    type TextType =\n                    | TSimple    of string\n                    | TReference of string\n            \n                    let getDocFromReference         ref = sprintf \"getDocFromReference not implemented: @{%s}\"         ref |> Html.text\n                    let getTextActViewFromReference ref = sprintf \"getTextActViewFromReference not implemented: @{%s}\" ref |> Choice1Of2 |> View.Const : View<Choice<string, PlugInAction>>\n            \n                    let rec getOneTextData(bef, name, aft) =\n                        TReference name ::  match aft with\n                                            | \"\"  -> []\n                                            | aft -> getTextData aft\n                        |> \n                        match bef with\n                        | \"\"  -> id\n                        | bef -> fun ls -> TSimple bef :: ls\n                    and getTextData (txt:string) =\n                        txt\n                        |> String.delimitedO \"@{\" \"}\"\n                        |> Option.map getOneTextData\n                        |> Option.defaultWith (fun () -> [ TSimple txt ])\n            \n                    let getDocFromReferenceD         = Depend.dependByName \"getDocFromReference\"         getDocFromReference         id\n                    let getTextActViewFromReferenceD = Depend.dependByName \"getTextActViewFromReference\" getTextActViewFromReference id\n            \n                    let getDocFromTextTypesD = Depend.depend {\n                        let! getDoc = getDocFromReferenceD\n                        return\n                            List.map (function\n                                | TSimple    t -> Html.text   t\n                                | TReference r -> getDoc r\n                            ) \n                            >> function\n                            | [ d ] -> d\n                            |   ls  -> Doc.Concat ls\n                    }\n            \n                    let extractDocD = Depend.depend {\n                        let! getDocFromTextTypes = getDocFromTextTypesD\n                        return getTextData >> getDocFromTextTypes\n                    }\n            \n                    let getTextValFromSeqD = Depend.depend {\n                        let! getTextActView = getTextActViewFromReferenceD\n                        return \n                            View.traverseListApp (function\n                                | TSimple    v -> View.Const     v\n                                | TReference r -> getTextActView r |> View.Map choiceToString\n                            )\n                            >> View.Apply (View.Const (String.concat \"\" >> Choice1Of2))\n                            >> VView\n                    }\n            \n                    let getTextValFromTextTypesD = Depend.depend {\n                        let! getTextActView    = getTextActViewFromReferenceD\n                        let! getTextValFromSeq = getTextValFromSeqD\n                        return function\n                            | [ TSimple    v ] -> VConst (Choice1Of2     v)\n                            | [ TReference r ] -> VView  (getTextActView r)\n                            | vs               -> getTextValFromSeq vs\n                    }\n            \n                    let getTextValD = getTextData >*> getTextValFromTextTypesD\n            \n                    let extractAtsD = Depend.depend {\n                        let! getTextVal = getTextValD\n                        return fun (txt:string) ->\n                            txt.Split ';'\n                            |> Seq.map    (fun t -> t.Trim())\n                            |> Seq.filter ((<>) \"\")\n                            |> Seq.map    (fun t -> \n                                match t.Split ':' with\n                                | [| atn ; sty |] -> getTextVal sty |> valToStyle atn\n                                | _ ->\n                                match t.Split '=' |> Array.map (fun t -> t.Trim()) with\n                                | [| atn ; atv |] -> getTextVal atv |> valToAttr  atn   \n                                | _ -> failwithf \"single reference attribute not implemented %s\" t\n            \n                            )\n                    }\n            \n                    let extractTextD = Depend.depend {\n                        let! getTextVal = getTextValD\n                        return fun (txt:string) ->\n                            getTextVal txt \n                            |> Val.map choiceToString\n                            |> Val.toView\n                    }\n            \n                let currentPlugInNameDef : PlugInName = UoM.Tag<_> \"NewLYx\"\n                let currentPlugInNameD                = Depend.dependByName \"currentPlugInName\" currentPlugInNameDef id\n            \n                let getDocD = Depend.depend {\n                    let! currentPlugInName = currentPlugInNameD\n                    return fun r -> \n                        let pName, oName = splitName (UoM.Untag currentPlugInName) r\n                        tryGetDocW pName oName\n                        |> Doc.BindView (fun docO -> \n                            docO\n                            |> Option.map getLazyDoc\n                            |> Option.defaultWith (fun () ->\n                                tryGetWoWW pName oName\n                                |> View.Map (Option.defaultWith (fun () -> sprintf \"Reference not found @{%s}\" r))\n                                |> Doc.TextView\n                            )\n                        )\n                }\n            \n                let getTextActViewD = Depend.depend {\n                    let! currentPlugInName = currentPlugInNameD\n                    return fun r ->\n                        let pName, oName = splitName (UoM.Untag currentPlugInName) r\n                        tryGetActW pName oName\n                        |> View.Bind(function\n                            | Some act -> View.Const <| Choice2Of2 act\n                            | None     ->\n                            tryGetWoWW pName oName\n                            |> View.Map (Option.defaultWith (fun () -> sprintf \"Text Reference not found @{%s}\" r))\n                            |> View.Map Choice1Of2\n                        )\n                }\n            \n                let errDoc  txt = Html.div [] [ Html.text txt ]\n                let errDocf fmt = Printf.ksprintf errDoc fmt\n            \n                let run (pin:PlugInName) d =\n                    depend {\n                        let! getDoc         = getDocD\n                        let! getTextActView = getTextActViewD\n                        return \n                            d\n                            |> Depend.resolver [\n                                \"getDocFromReference\"        , getDoc         :> obj\n                                \"getTextActViewFromReference\", getTextActView :> obj\n                                \"currentPlugInName\"          , pin            :> obj\n                            ]\n                    } |> Depend.resolver [ \"currentPlugInName\", pin ]\n            \n                let extractTextD    = Extract0.extractTextD\n                let extractDocD     = Extract0.extractDocD\n                let extractAtsD     = Extract0.extractAtsD\n                let extractAttD     = depend { \n                    let! extractAts = extractAtsD\n                    return fun p -> extractAts p |> Attr.Concat \n                }\n            \n                let runDef = run (UoM.Tag \"AppFramework\")\n            \n                let getParmRef var = \n                    var\n                    |> String.delimitedO \"@{\" \"}\"\n                    |> Option.map (fun (a,b,c) -> b)\n                    |> Option.defaultValue var\n                    |>  splitName \"\"\n            \n                let inputFile attrs labelName actName =\n                    splitName \"AppFramework\" actName\n                    ||> tryGetAct\n                    |> Option.map(fun act -> \n                        Html.div (getAttrs \"AppFramework\" attrs) [\n                            Html.div              [ attr.``class`` \"input-group\"       ] [\n                                Html.span         [ attr.``class`` \"input-group-btn\"   ] [ \n                                    Html.label    [ attr.``class`` \"btn\"               ] [ \n                                        Html.text labelName\n                                        Html.input[ attr.``class`` \"form-control\" \n                                                    attr.``type`` \"file\" \n                                                    Attr.Style \"display\" \"none\" \n                                                    Html.on.click (fun el ev -> el?value <- \"\")\n                                                    Html.on.change(fun el ev -> act.actFunction |> callFunction el () )\n                                                    ] []\n                                    ]\n                                ]\n                                //(if doc <> \"\" then singleDoc lytNm [ UnQuoted doc ] else Doc.Empty)\n                            ]\n                        ]\n                    ) |> Option.defaultWith(fun () ->  sprintf \"Action not found %s\" actName |> errDoc )\n            \n                let inputLabel attrs labelName varName =\n                    Depend.depend {\n                        let! extractAts = extractAtsD\n                        let! extractDoc = extractDocD\n                        let! currentPlugInName = currentPlugInNameD\n                        return\n                            getParmRef varName\n                            ||> tryGetVarW\n                            |> Doc.BindView (\n                                Option.map(fun var -> \n                                    Html.div (extractAts attrs) [\n                                        Html.div      [ attr.``class`` \"input-group\"       ] [\n                                            Html.span [ attr.``class`` \"input-group-addon\" ] [ extractDoc labelName ]\n                                            Doc.Input [ attr.``class`` \"form-control\"      ]   var.varVar\n                                        ]\n                                    ]\n                                ) \n                                >> Option.defaultWith(fun () ->  sprintf \"Var not found %s\" varName |> errDoc )\n                            )\n                    } |> runDef\n            \n                let none x = Html.span [][]\n            \n                let htmlDoc lytNm html =\n                    getTextData lytNm html\n                    |> Doc.BindView(function\n                        | TDText  v   -> Doc.Verbatim v\n                        | TDAct   act -> sprintf \"HtmlDoc: unexpected action %A\" act |> errDoc\n                    )\n            \n                let setVar  (varN   :obj   ) (value:obj   ) = splitName \"AppFramework\" (unbox varN) ||> tryGetVar |> Option.iter(fun v -> v.varVar.Set (unbox value)       )\n                let trigAct (trigger:string) (actN :string) =\n                    getParmRef trigger\n                    ||> tryGetWoWW\n                    |> View.consistent\n                    |> View.Map(function\n                        | Some txt ->\n                            getParmRef actN\n                            ||> tryGetAct \n                            |> function\n                                | Some a -> callFunction () () a.actFunction\n                                | None -> ()\n                            \"\"\n                        | None -> \"\"\n                    ) |>  Doc.TextView\n            \n                let select attrs none vals var = \n                    Depend.depend {\n                        let! extractAts  = extractAtsD\n                        let! extractText = extractTextD\n                        return\n                            getParmRef var\n                            ||> tryGetVarW\n                            |> Doc.BindView (\n                                Option.map (fun v ->\n                                    let valsW = V ((extractText vals).V.Split ';' |> Seq.toList)\n                                    let varO  = \n                                        Var.Make \n                                            (V (match v.varVar.V with \n                                                | s when Seq.contains (s.Trim()) valsW.V -> Some(s.Trim()) \n                                                |_-> None )) \n                                            (function None ->  v.varVar.Set \"\" | Some s -> valsW |> View.Get (fun vs -> if Seq.contains s vs then v.varVar.Set s) )\n                                    Doc.SelectDynOptional (extractAts attrs) none id valsW varO\n                                ) \n                                >> Option.defaultWith (fun () -> errDocf \"Var not found %s\" var )\n                            )\n                    }\n                    |> runDef\n            \n                if IsClient then\n                    plugin { \n                        plgName  \"AppFramework\" \n                        plgVar   \"mainDocV\"     mainDocV\n                        plgDoc   \"AppFwkClient\" AppFwkClient\n                        plgDoc2  \"TrigAction\"   trigAct     \"Trigger\"  \"Action\"\n                        plgDoc3  \"InputFile\"    inputFile   \"attrs\" \"Label\" \"Action\"\n                        plgDoc3  \"InputLabel\"   inputLabel  \"attrs\" \"Label\" \"Var\"\n                        plgAct2  \"SetVar\"       setVar   \"Var\"      \"Value\"\n                        plgAct   \"Hello\"        (fun () -> JS.Window.Alert \"Hello!\")\n                    } |> plugIns.Add\n                    plugin { \n                        plgName  \"AF\"\n                        plgDoc2  \"TrigAction\"   trigAct     \"Trigger\"  \"Action\"\n                        plgDoc4  \"Select\"       select      \"Attrs\" \"None\" \"Vals\" \"Var\"\n                        plgDoc3  \"InputFile\"    inputFile   \"Attrs\" \"Label\" \"Action\"\n                        plgDoc3  \"InputLabel\"   inputLabel  \"Attrs\" \"Label\" \"Var\"\n                        plgAct2  \"SetVar\"       setVar   \"Var\"      \"Value\"\n                        plgAct   \"Hello\"        (fun () -> JS.Window.Alert \"Hello!\")\n                        plgQuery \"getDocNames\"  (fun (_:obj) -> plugIns.Value |> Seq.collect (fun plg -> plg.plgDocs |> Seq.map (fun doc -> plg.plgName + \".\" + doc.docName)) |> Seq.toArray |> box)\n                    } |> plugIns.Add\n            \n                    //titleV.View\n                    //|> View.Bind(fun nm ->\n                    //    nm\n                    //    |> String.splitByChar '.'\n                    //    |> (function [| a ; b |] -> tryGetWoW a b |_-> None)\n                    //    |> Option.defaultWith (fun () -> mainDocV.View )\n                    //) |> View.Sink (fun v -> \n                    //    async {\n                    //        do! Async.Sleep 500\n                    //        JS.Window.Document.Title <- v \n                    //    } |> Async.Start\n                    //)\n            \n                let getMainDoc =\n                  lazy\n                    WcSplitter.init horizontal vertical\n                    WcTabStrip.init.Value\n                    mainDoc()\n            \n                let addPlugIn p = plugIns.Add p\n            \n            \n            /////////////////////////////////////////////////////////////////////////////////////////////\n            \n                type P<'P> with\n                    [<Inline>] static member (<*)(vf:PVl<    'a   ->'b> ,  a :      'a   )  =                                            pff vf (VConst  a                     )\n                    [<Inline>] static member (<!)(vf:PVl<    'a   ->'b> , pav:PVl<  'a  >) = pav.r       |> bindWrap (fun av         -> pff vf          av )\n                    [<Inline>] static member (<!)(vf:PVl<    'a   ->'b> ,  aW:View< 'a  >)  =                                            pff vf (VView   aW                    )\n                    [<Inline>] static member (<!)(vf:PVl<    'a   ->'b> ,  aV:Var<  'a  >)  =                                            pff vf (VView   aV.View               )\n                    [<Inline>] static member (<!)(vf:PVl<    'a   ->'b> , paF:PFn<_,'a  >) = paF.r       |> bindWrap (fun aF         -> pff vf (callF   aF                    ) )\n                    [<Inline>] static member (<&)(vf:PVl<seq<Doc >->'b> ,  a :   string  ) = extractDocD |> bindWrap (fun extractDoc -> pff vf (VConst (seq [extractDoc a  ]) ) )\n                    [<Inline>] static member (<&)(vf:PVl<seq<Doc >->'b> , paF:PFn<_,Doc >) = paF.r       |> bindWrap (fun aF         -> pff vf (VConst (seq [callDoc    aF ]) ) )\n                    [<Inline>] static member (<&)(vf:PVl<    Doc  ->'b> ,  a :   string  ) = extractDocD |> bindWrap (fun extractDoc -> pff vf (VConst (     extractDoc a   ) ) )\n                    [<Inline>] static member (<&)(vf:PVl<    Doc  ->'b> , paF:PFn<_,Doc >) = paF.r       |> bindWrap (fun aF         -> pff vf (VConst (     callDoc    aF  ) ) )\n            //        [<Inline>] static member (<&)(vf:Val<seq<Doc>->'b> , aF:Fun<_,Doc>) = ff vf (VConst (seq [callDoc aF ]) )\n            \n                    [<Inline>] static member (<&)(vf:PVl<seq<Attr>->'b> ,  a :   string  ) = extractAtsD |> bindWrap (fun extractAts -> pff vf (VConst (     extractAts a   ) ) )\n                    [<Inline>] static member (<&)(vf:PVl<seq<Attr>->'b> , paF:PFn<_,Attr>) = paF.r       |> bindWrap (fun aF         -> pff vf (VConst (seq [callAtt    aF ]) ) )\n                    [<Inline>] static member (<&)(vf:PVl<    Attr ->'b> ,  a :   string  ) = extractAttD |> bindWrap (fun extractAtt -> pff vf (VConst (     extractAtt a   ) ) )\n                    [<Inline>] static member (<&)(vf:PVl<    Attr ->'b> , paF:PFn<_,Attr>) = paF.r       |> bindWrap (fun aF         -> pff vf (VConst (     callAtt    aF  ) ) )\n            \n                type P<'P> with    \n                    [<Inline>] static member (<*)(vc , p         ) = pfc vc  (VConst p       )\n                    [<Inline>] static member (<!)(vc , p         ) = pfc vc          p\n                    [<Inline>] static member (<!)(vc , p         ) = pfc vc  (VView  p       )\n                    [<Inline>] static member (<!)(vc , pV:Var< _>) = pfc vc  (VView  pV.View )\n                    [<Inline>] static member (<!)(vc , p:Fun<_,_>) = pfc vc  (callF  p       )\n            \n                    [<Inline>] static member (<&)(c:PFn<_,     Attr  -> _> ,  p :      string ) = extractAttD |> bindWrap (fun extractAtt -> pfc c       (VConst (       extractAtt        p   ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Attr  -> _> ,  p :Val<  string>) =                                            pfc c       (VConst (      Val.textAtt        p   ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Attr  -> _> , paF:PFn<_,string>) = paF.r       |> bindWrap (fun aF         -> pfc c       (VConst (      Val.textAtt (callF aF) ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Attr  -> _> , paF:PFn<_,Attr  >) = paF.r       |> bindWrap (fun aF         -> pfc c       (VConst (          callAtt        aF  ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Attr  -> _> , p  :      Attr   ) =                                            pfc c       (VConst (                         p   ) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Attr> -> _> , p  :      string ) = extractAtsD |> bindWrap (fun extractAts -> pfc c       (VConst (       extractAts        p   ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Attr> -> _> , p  :Val<  string>) =                                            pfc c       (VConst (seq [ Val.textAtt        p  ]) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Attr> -> _> , paF:PFn<_,string>) = paF.r       |> bindWrap (fun aF         -> pfc c       (VConst (seq [ Val.textAtt (callF aF)]) ) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Attr> -> _> , paF:PFn<_,Attr  >) = paF.r       |> bindWrap (fun aF         -> pfc c       (VConst (seq [     callAtt        aF ]) ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Attr>,   _> , p  :      string ) = extractAttD |> bindWrap (fun extractAtt -> c |> unwrapBindWrap (fun c -> { c with p = Val.addAtt(  extractAtt        p  ) c.p } ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Attr>,   _> , p  :Val<  string>) =                                            c |> unwrapBindWrap (fun c -> { c with p = Val.addAtt( Val.textAtt        p  ) c.p } )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Attr>,   _> , paF:PFn<_,string>) = paF.r       |> bindWrap (fun aF         -> c |> unwrapBindWrap (fun c -> { c with p = Val.addAtt( Val.textAtt (callF aF)) c.p } ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Attr>,   _> , paF:PFn<_,Attr  >) = paF.r       |> bindWrap (fun aF         -> c |> unwrapBindWrap (fun c -> { c with p = Val.addAtt(     callAtt        aF ) c.p } ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Attr>,   _> , p  :      Attr   ) =                                          c |> unwrapBindWrap (fun c -> { c with p = Val.addAtt                     p    c.p } )\n            \n                    [<Inline>] static member (<&)(c:PFn<_,     Doc   -> _> , p  :      string ) = extractDocD |> bindWrap (fun extractDoc -> pfc c       (VConst (       extractDoc        p   ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Doc   -> _> , p  :Val<  string>) =                                            pfc c       (VConst (      Val.textDoc        p   ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Doc   -> _> , paF:PFn<_,string>) = paF.r     |> bindWrap (fun aF           -> pfc c       (VConst (      Val.textDoc (callF aF) ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Doc   -> _> , paF:PFn<_,Doc   >) = paF.r     |> bindWrap (fun aF           -> pfc c       (VConst (          callDoc        aF  ) ) )\n                    [<Inline>] static member (<&)(c:PFn<_,     Doc   -> _> , p  :      Doc    ) =                                            pfc c       (VConst (                         p   ) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Doc > -> _> , p  :      string ) = extractDocD |> bindWrap (fun extractDoc -> pfc c       (VConst (seq [  extractDoc        p  ]) ) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Doc > -> _> , p  :Val<  string>) =                                            pfc c       (VConst (seq [ Val.textDoc        p  ]) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Doc > -> _> , paF:PFn<_,string>) = paF.r     |> bindWrap (fun aF           -> pfc c       (VConst (seq [ Val.textDoc (callF aF)]) ) )\n                    [<Inline>] static member (<&)(c:PFn<_, seq<Doc > -> _> , paF:PFn<_,Doc   >) = paF.r     |> bindWrap (fun aF           -> pfc c       (VConst (seq [     callDoc        aF ]) ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Doc >,   _> , p  :      string ) = extractDocD |> bindWrap (fun extractDoc -> c |> unwrapBindWrap (fun c -> { c with p = Val.addDoc(  extractDoc        p  ) c.p }) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Doc >,   _> , p  :Val<  string>) =                                            c |> unwrapBindWrap (fun c -> { c with p = Val.addDoc( Val.textDoc        p  ) c.p } )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Doc >,   _> , paF:PFn<_,string>) = paF.r     |> bindWrap (fun aF           -> c |> unwrapBindWrap (fun c -> { c with p = Val.addDoc( Val.textDoc (callF aF)) c.p } ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Doc >,   _> , paF:PFn<_,Doc   >) = paF.r     |> bindWrap (fun aF           -> c |> unwrapBindWrap (fun c -> { c with p = Val.addDoc(     callDoc        aF ) c.p } ) )\n                    [<Inline>] static member (<!)(c:PFn<   seq<Doc >,   _> , p  :      Doc    ) =                                            c |> unwrapBindWrap (fun c -> { c with p = Val.addDoc                     p    c.p } )\n            \n                let inline (!) v = { r = VConst v |> rtn }\n            \n            \n            [< JavaScriptExport >]\n            type LayoutEngine = {\n                lytName       : string\n                lytDefinition : Var<string>\n            }\n            \n            [< JavaScriptExport >]\n            module LayoutEngine =\n                open WebSharper.UI\n                open WebSharper.JavaScript\n                module AF = AppFramework\n            \n                open WebSharper.UI.Client\n            \n                type LayoutEntry =\n                    | EntryVar    of AF.PlugInVar   \n                    | EntryView   of AF.PlugInView  \n                    | EntryDoc    of AF.PlugInDoc   \n                    | EntryAction of AF.PlugInAction\n                    | EntryQuery  of AF.PlugInQuery\n            \n                type Token = Quoted of string | UnQuoted of string\n            \n                let (|S|) = function Quoted s | UnQuoted s -> s\n            \n                let (|Identifier|_|) =\n                    function\n                    | UnQuoted(REGEX \"^[$a-zA-Z_][0-9a-zA-Z_\\.\\-$]*$\" \"\" [| id |] ) -> Some id\n                    | _                                                             -> None\n            \n                let (|I|_|) = function Identifier i -> Some i | _ -> None\n            \n                let (|Vertical|Horizontal|Layout|Grid|Template|Elem|Nothing|) =\n                    function\n                    | UnQuoted s when s = \"vertical\"   -> Vertical\n                    | UnQuoted s when s = \"horizontal\" -> Horizontal\n                    | UnQuoted s when s = \"layout\"     -> Layout\n                    | UnQuoted s when s = \"grid\"       -> Grid\n                    | UnQuoted s when s = \"template\"   -> Template\n                    | Identifier id                    -> Elem id\n                    |                                _ -> Nothing\n            \n                let (|PlugIn|Button|Input|TextArea|Select|Nothing|) =\n                    function\n                    | UnQuoted s when s = \"PlugIn\"     -> PlugIn\n                    | UnQuoted s when s = \"Button\"     -> Button\n                    | UnQuoted s when s = \"input\"      -> Input\n                    | UnQuoted s when s = \"textarea\"   -> TextArea\n                    | UnQuoted s when s = \"select\"     -> Select\n                    |                               _ -> Nothing\n            \n                let (|Var|Doc|View|Concat|Action|Nothing|) =\n                    function\n                    | UnQuoted s when s = \"Var\"        -> Var\n                    | UnQuoted s when s = \"Doc\"        -> Doc\n                    | UnQuoted s when s = \"View\"       -> View\n                    | UnQuoted s when s = \"Concat\"     -> Concat\n                    | UnQuoted s when s = \"Action\"     -> Action\n                    |                                _ -> Nothing\n            \n                type Measures = \n                | Fixed    of pixel: float * first: bool\n                | Variable of min:   float * value: float * max: float\n                    with override this.ToString() = \n                            match this with\n                            | Fixed(        v, f  ) -> string (int (if f then v else -v) )\n                            | Variable(min, v, max) -> sprintf \"%d-%d-%d\" (int min) (int v) (int max)\n            \n            \n                let (|Measures|_|) =\n                    function \n                    | Quoted _     -> None \n                    | UnQuoted txt ->\n                    String.splitByChar '-' txt\n                    |> function\n                       | [|                     ParseO.Double v                     |] -> Some <| Fixed    (     v, true )\n                       | [| \"\";                 ParseO.Double v                     |] -> Some <| Fixed    (     v, false)\n                       | [| ParseO.Double min ; ParseO.Double v ; ParseO.Double max |] -> Some <| Variable (min, v, max  )\n                       | _                                                             -> None\n            \n                let fixedSplitter vertical pixel first (doc1:Doc) (doc2:Doc) =\n                    let sizes = sprintf (if first then \"%fpx calc(100%% - %fpx)\" else \"calc(100%% - %fpx) %fpx\") pixel pixel\n                    if vertical then \n                        AF.AppFwkTemplate.FixedSplitterVer()\n                            .PartSizes( sizes)\n                            .First(     doc1 )\n                            .Second(    doc2 )\n                            .Doc()\n                    else \n                        AF.AppFwkTemplate.FixedSplitterHor()\n                            .PartSizes( sizes)\n                            .First(     doc1 )\n                            .Second(    doc2 )\n                            .Doc()\n            \n                let variableSplitter vertical min value max doc1 doc2 =\n                    Doc.Element \"wcomp-splitter\" [\n                        if vertical then yield Attr.Create \"vertical\"    \"\"\n                        yield                  Attr.Create \"min\"      <| string min\n                        yield                  Attr.Create \"value\"    <| string value\n                        yield                  Attr.Create \"max\"      <| string max\n                    ] [ doc1 ; doc2 ]\n                    :> Doc\n                    \n                //let getLDoc name =\n                //    splitName name\n                //    ||> AF.tryGetDoc \n                //    |>  Option.map         AF.getLazyDoc\n                //    |>  Option.defaultWith(fun ()  -> sprintf \"missing %s\" name |> AF.errDoc )                            \n            \n                //let xxhookOrText =\n                //    function\n                //    | Identifier id -> hookDoc id\n                //    | txt           -> Doc.TextNode txt\n            \n                //type Token = string * bool\n            \n                let rec doubleQuote = function\n                    | []                                            -> []\n                    | UnQuoted c :: _ when c.StartsWith \"//\"        -> []\n                    | Quoted t1 :: Quoted \"\\\"\" :: Quoted t2 :: rest -> (Quoted(t1 + \"\\\"\" + t2) :: rest) |> doubleQuote\n                    | Quoted t1 :: Quoted \"\\\"\" :: []                -> [Quoted t1 ]\n                    | h::rest                                       -> h :: doubleQuote rest\n            \n                let splitTokens line : Token list = // \"\"\"main h1 \"\" \"Hello World!\"\"\"\" |> printfn \"dd\"\n                    line\n                    |> String.splitByChar '\"'\n                    |> Seq.mapi(fun i s -> \n                        if  i % 2 = 1  then [| Quoted s    |] else\n                        if  s     = \"\" then [| Quoted \"\\\"\" |] else\n                        let t     = s.Trim()\n                        if  t     = \"\" then [|             |] else\n                        t.Split([| ' ' |], System.StringSplitOptions.RemoveEmptyEntries)\n                        |> Array.map         UnQuoted\n                    )\n                    |> Seq.collect id\n                    |> Seq.toList\n                    |> doubleQuote\n            \n                type TextData = \n                | TDText  of string\n                | TDAct   of AF.PlugInAction\n            \n                let splitName = AF.splitName\n            \n                let rec getOneTextData lytNm name bef aft =\n                    let plg, n = splitName lytNm name\n                    AF.tryGetActW plg n\n                    |> View.Bind(function\n                    | Some act -> TDAct act |> View.Const\n                    | None     ->\n                    AF.tryGetWoWW plg n\n                    |> View.Bind(function\n                        | Some txt ->\n                            getTextData lytNm aft\n                            |> View.Bind (function\n                                | TDText  b    -> View.Const <| (TDText  <|     bef + txt + b                             )\n                                | TDAct   act  -> View.Const <| (TDText  <| sprintf \"Unexpected Action @{%s}\" act.actName )\n                            )\n                        | None                 -> View.Const <| (TDText  <| sprintf \"%s @{Missing %s}%s\" bef name aft     )  \n                        )\n                    )\n            \n                and getTextData lytNm (txt:string) =\n                    txt\n                    |> String.delimitedO \"@{\" \"}\"\n                    |> Option.map(fun (bef, name, aft) -> getOneTextData lytNm name bef aft )\n                    |> Option.defaultWith (fun () -> TDText  txt |> View.Const)\n            \n                let getTextToken lytNm (token: Token) =\n                    match token with\n                    | UnQuoted name -> getOneTextData lytNm name \"\" \"\"\n                    | Quoted   txt  -> getTextData    lytNm txt\n            \n                let getAttrs lytNm (S attrs: Token) = \n                    [\n                        yield!  attrs\n                                |> String.splitByChar ';'\n                                |> Seq.map(String.splitByChar '=')\n                                |> Seq.choose(\n                                    function \n                                    | [| name ; value |] when name.Trim() <> \"\" && value.Trim() <> \"\" ->\n                                            value.Trim() |> getTextData lytNm\n                                            |> Attr.DynamicCustom (fun el -> function\n                                                | TDText  v   -> el.SetAttribute(name.Trim(), v.Trim())\n                                                | TDAct   act -> el.AddEventListener(name.Trim(), (fun (ev:Dom.Event) -> act.actFunction |> AF.callFunction el ev), false)\n                                            )\n                                            |> Some\n                                    |_      -> None )\n                        yield!  attrs\n                                |> String.splitByChar ';'\n                                |> Seq.map(String.splitByChar ':')\n                                |> Seq.choose(\n                                    function \n                                    | [| name ; value |] when name.Trim() <> \"\" && value.Trim() <> \"\" -> \n                                            value.Trim() |> getTextData lytNm\n                                            |> View.Map(function\n                                                | TDText  v   -> v.Trim()\n                                                | TDAct   act -> sprintf \"@{%s}\" act.actName\n                                            )\n                                            |> Attr.DynamicStyle (name.Trim())\n                                            |> Some\n                                    |_      -> None )\n                    ]\n            \n                let getDocF (parms:Token list) (doc:AF.PlugInDoc) =\n                    match doc.docDoc, parms with\n                    | AF.LazyDoc ldoc                  ,                                                   rest -> ldoc.Value       , rest\n                    | AF.FunDoc1(f1, _                ), (S p1)                                         :: rest -> f1 p1            , rest\n                    | AF.FunDoc2(f2, _ , _            ), (S p1) :: (S p2)                               :: rest -> f2 p1 p2         , rest\n                    | AF.FunDoc3(f3, _ , _ , _        ), (S p1) :: (S p2) :: (S p3)                     :: rest -> f3 p1 p2 p3      , rest          \n                    | AF.FunDoc4(f4, _ , _ , _ , _    ), (S p1) :: (S p2) :: (S p3) :: (S p4)           :: rest -> f4 p1 p2 p3 p4   , rest     \n                    | AF.FunDoc5(f5, _ , _ , _ , _ , _), (S p1) :: (S p2) :: (S p3) :: (S p4) :: (S p5) :: rest -> f5 p1 p2 p3 p4 p5, rest\n                    | _ -> Html.div [] [ Html.text <| sprintf \"Parameters do not coincide with definition %A - %A\" doc parms ], []\n            \n                let getDocFinal parms doc = \n                    match getDocF parms doc with\n                    | res, [] -> res\n                    | _ -> sprintf \"Too many parameters %A %A\" doc parms |> AF.errDoc\n            \n                let mutable currentViewTriggger = AF.mainDocV.View\n            \n                let turnToView f = currentViewTriggger |> View.Map f |> Doc.EmbedView\n            \n                let getADoc lytNm token =\n                    match token with\n                    | Identifier di  -> let plg, nm = splitName lytNm di\n                                        AF.tryGetDocW plg nm\n                                        |>  Doc.BindView (function \n                                            | Some pdc -> getDocF [] pdc |> fst\n                                            | None     ->\n                                            AF.tryGetWoWW plg nm\n                                            |> Doc.BindView (function \n                                                | Some txt -> Doc.TextNode txt\n                                                | None     -> sprintf \"Missing doc: %s\" di |>! print |> AF.errDoc )\n                                        )\n                    | (S txt)        -> txt\n                                        |> getTextData lytNm\n                                        |> View.Map(function\n                                            | TDText  v   ->  v \n                                            | TDAct   act -> sprintf \"Unexpected action: %s\" act.actName\n                                        )\n                                        |> Doc.TextView\n            \n                let rec getAllDocs lytNm tokens =\n                    match tokens with\n                    | []            -> []\n                    | token :: rest -> getADoc lytNm token :: getAllDocs lytNm rest\n            \n                let getOneDoc lytNm docs =\n                    match docs with\n                    | Identifier id :: parms -> let plg, nm = splitName lytNm id\n                                                AF.tryGetDoc plg nm\n                                                |>  Option.map (getDocF parms)\n                                                |>  Option.defaultWith  (fun ()  ->\n                                                    AF.tryGetWoW plg nm\n                                                    |>  Option.map (fun txtW -> Doc.TextView txtW, parms)\n                                                    |> fun vv -> vv\n                                                    |>  Option.defaultWith  (fun () -> sprintf \"Missing doc: %s\" id |>! print |> AF.errDoc, parms) )\n                    | (S txt)       :: rest  -> txt\n                                                |> getTextData lytNm\n                                                |> View.Map(function\n                                                    | TDText  v   ->  v \n                                                    | TDAct   act -> sprintf \"Unexpected action: %s\" act.actName\n                                                )\n                                                |> Doc.TextView, rest\n                    | []                     -> Doc.Empty, []\n            \n                let rec getDocs_ lytNm docs =\n                    match docs with\n                    | [] -> []\n                    | _  -> \n                    match getOneDoc lytNm docs with\n                    | res, rest -> res :: getDocs_ lytNm rest\n            \n                let pairOfDocs lytNm docs =\n                    currentViewTriggger \n                    |> View.Map (fun _ -> getAllDocs lytNm docs )\n                    |> View.Map (\n                        function \n                        | [ doc1 ; doc2 ] -> doc1, doc2\n                        | _               -> sprintf \"splitter expects exactly 2 elements %A\" docs |> AF.errDoc, \"part 2\" |> AF.errDoc\n                    ) |> (fun dsW -> View.Map fst dsW |> Doc.EmbedView, View.Map snd dsW |> Doc.EmbedView )\n            \n                let singleDoc lytNm docs =\n                    currentViewTriggger\n                    |> View.Map (fun _ -> getAllDocs lytNm docs )\n                    |> View.Map (\n                        function \n                        | [ doc1 ] -> doc1\n                        | _        -> sprintf \"expected exactly 1 element %A\" docs |> AF.errDoc\n                    ) |> Doc.EmbedView\n            \n                let createSplitter(lytNm, name, vertical, measures, docs) =\n                    let doc1, doc2 = pairOfDocs lytNm docs\n                    match measures with\n                    | Fixed    (pixel,    first) ->    fixedSplitter vertical pixel first   doc1 doc2\n                    | Variable (min, value, max) -> variableSplitter vertical min value max doc1 doc2\n            \n                let createElement(lytNm, name, element, attrs, docs) =\n                    turnToView <| fun _ ->\n                        getAllDocs lytNm docs \n                        |> Doc.Concat\n                        |> Seq.singleton\n                        |> Doc.Element element (getAttrs lytNm attrs)\n            \n                let createButton( lytNm, name, actName, attrs, S text) = \n                    turnToView <| fun _ ->\n                        splitName lytNm actName\n                        ||> AF.tryGetAct\n                        |>  Option.map          (fun act -> fun () -> act.actFunction |> AF.callFunction () ()  )\n                        |>  Option.defaultValue ignore\n                        |> Doc.Button text (getAttrs lytNm attrs)\n            \n                let createInput( lytNm, name, varName, attrs ) = \n                    turnToView <| fun _ ->\n                        splitName lytNm varName\n                        ||> AF.tryGetVoVW\n                        |> Doc.BindView(function\n                            | Some var -> Doc.Input     (getAttrs lytNm attrs) var\n                            | None  -> sprintf \"Missing var: %s\" varName |> AF.errDoc )\n            \n                let createTextArea( lytNm, name, varName, attrs ) = \n                    turnToView <| fun _ ->\n                            splitName lytNm varName\n                            ||> AF.tryGetVoVW\n                            |> Doc.BindView(function\n                                | Some var -> Doc.InputArea (getAttrs lytNm attrs) var\n                                | None  -> sprintf \"Missing var: %s\" varName |> AF.errDoc )\n            \n                let createDoc( lytNm, name, docName, parms) =\n                    turnToView <| fun _ ->\n                        splitName lytNm docName\n                        ||> AF.tryGetDoc\n                        |>  Option.map (getDocFinal parms)\n                        |>  Option.defaultWith  (fun ()  -> sprintf \"Missing doc: %s\" docName |> AF.errDoc )\n            \n                let createTemplate( lytNm, name, tempName:string, attrs:Token, holes) =\n                    turnToView <| fun _ ->\n                        let attrs = getAttrs lytNm attrs\n                        Client.Doc.LoadLocalTemplates \"local\"\n                        try\n                            holes \n                            |> Seq.pairwise\n                            |> Seq.indexed\n                            |> Seq.filter(fun (i, _) -> i % 2 = 0)\n                            |> Seq.map  snd\n                            |> Seq.map( function\n                                | (S nm ), Identifier id -> splitName     lytNm id ||> AF.tryGetDoc |> Option.map (fun doc -> TemplateHole.Elt(   nm.ToLower(), getDocF [] doc |> fst) )\n                                                            |> Option.orElseWith (fun () ->\n                                                                splitName lytNm id ||> AF.tryGetVar |> Option.map (fun var -> TemplateHole.VarStr(nm.ToLower(), var.varVar) )\n                                                            )\n                                                            |> Option.defaultWith(fun () -> TemplateHole.Elt(nm.ToLower(), sprintf \"Missing element: %s\" id |> AF.errDoc) )\n                                | (S nm ), (S txt )      -> //getTextData lytNm txt\n                                                            //|> View.Map (function\n                                                            //    | TDText  v   -> TemplateHole.Text(    nm.ToLower(), v )\n                                                            //    | TDView  vw  -> TemplateHole.TextView(nm.ToLower(), vw)\n                                                            //    | TDAct   act -> TemplateHole.Event(   nm.ToLower(), (fun el ev -> act.actFunction |> AF.callFunction el ev ))\n                                                            //)\n                                                            TemplateHole.Elt(nm.ToLower(), sprintf \"Not implemented: %s\" txt |> AF.errDoc) \n                            )\n                            |> (if Seq.isEmpty attrs then id else TemplateHole.Attribute(\"attrs\", Attr.Concat attrs) |> Seq.singleton |> Seq.append)\n                            |> Client.Doc.NamedTemplate \"local\" (tempName.ToLower() |> Some)\n                            |> Some\n                        with _ -> None\n                        |>  Option.defaultWith  (fun ()  -> sprintf \"Missing template: %s\" tempName |> AF.errDoc )\n            \n                let getParamText lytNm token f = \n                    getTextToken lytNm token\n                    |> View.Get(function\n                        | TDText  txt -> f (box txt)\n                        | TDAct   act -> f (box act)\n                    )\n            \n                let createAction( lytNm, name, actName, (parms : Token list) ) = \n                    splitName lytNm actName\n                    ||> AF.tryGetAct\n                    |>  Option.map          (fun act -> \n                        if parms = [] then act.actFunction else\n                        match act.actFunction, parms with\n                        | AF.FunAct1(f,_    ), [ t1     ] -> AF.FunAct0( fun () -> getParamText lytNm t1                                   f              )\n                        | AF.FunAct2(f,_, _ ), [ t1; t2 ] -> AF.FunAct0( fun () -> getParamText lytNm t1 (fun p1 -> getParamText lytNm t2 (f p1   ) )     )\n                        | AF.FunAct2(f,_, n2), [ t1     ] -> AF.FunAct1((fun p2 -> getParamText lytNm t1 (fun p1 ->                        f p1 p2) ) , n2)\n                        | _ -> AF.FunAct0 (fun () -> printfn \"Parameters do not coincide for Action %s %A %A\" actName parms act )\n                    )\n                    |>  Option.defaultWith  (fun ()  -> AF.FunAct0 (fun () -> printfn \"Action Not Found %s\" actName) )\n            \n                let createConcat(lytNm, name, docs) =\n                    turnToView (fun _ -> getAllDocs lytNm docs |> Doc.Concat)\n            \n                let createVar( lytNm, varName, v           ) = Var.Create v\n                let findJSEntry fname =\n                    fname \n                    |> String.splitByChar '.'\n                    |> Seq.fold(fun oO nm ->\n                        oO |> Option.bind(fun o -> if (isUndefined o?(nm)) then None else Some o?(nm) ) \n                        ) (Some (JS.Inline(\"window\") :> obj) )\n            \n                let createView(lytNm, viwName, parms) = \n                    currentViewTriggger |> View.Bind (fun _ ->\n                        try\n                            parms\n                            |> View.traverseSeq (getTextToken lytNm)\n                            |> View.Map (\n                                Seq.map \n                                    (function\n                                    | TDText  txt -> txt\n                                    | TDAct   act -> sprintf \"%A\" act) \n                                >> Seq.toArray\n                            )\n                            |> View.Map (fun ar ->\n                                try match ar with\n                                    | [|   |] -> \"No JS function specified\"\n                                    | [| _ |] ->  JS.Eval ar.[0]                                              |> string\n                                    | _       -> (JS.Eval ar.[0] |> unbox<FuncWithArgs<_,obj>>).Call ar.[1..] |> string\n                                with e -> e.Message\n                            )\n                        with e -> e.Message |> View.Const\n                    )\n            \n                let createSplitterM = Memoize.memoize createSplitter\n                let createButtonM   = Memoize.memoize createButton\n                let createInputM    = Memoize.memoize createInput\n                let createTextAreaM = Memoize.memoize createTextArea\n                let createElementM  = Memoize.memoize createElement\n                let createDocM      = Memoize.memoize createDoc\n                let createTemplateM = Memoize.memoize createTemplate\n                let createConcatM   = Memoize.memoize createConcat\n                let createVarM      = Memoize.memoize createVar\n                let createViewM     = Memoize.memoize createView\n                let createActionM   = Memoize.memoize createAction\n            \n                let entryDoc  n doc = AF.newDoc  n (lazy doc    ) |> EntryDoc    |> Some\n                let entryVar  n v   = AF.newVar  n  v             |> EntryVar    |> Some\n                let entryView n w   = AF.newViw  n  w             |> EntryView   |> Some\n                let entryAct  n a   = AF.newActF n  a             |> EntryAction |> Some\n            \n                let createEntryO lytNm (line:string) =\n                    try\n                        match splitTokens line with\n                        |   Identifier name :: Vertical   :: Measures measures          :: docs    -> entryDoc  name <| createSplitterM(lytNm, name, true , measures, docs ) \n                        |   Identifier name :: Horizontal :: Measures measures          :: docs    -> entryDoc  name <| createSplitterM(lytNm, name, false, measures, docs ) \n                        | [ Identifier name ;  Button     ;  Identifier act    ;  attrs ;  text  ] -> entryDoc  name <| createButtonM  (lytNm, name, act  , attrs   , text ) \n                        | [ Identifier name ;  Input      ;  Identifier var    ;  attrs          ] -> entryDoc  name <| createInputM   (lytNm, name, var  , attrs          ) \n                        | [ Identifier name ;  TextArea   ;  Identifier var    ;  attrs          ] -> entryDoc  name <| createTextAreaM(lytNm, name, var  , attrs          ) \n                        | [ Identifier name ;  Var        ;                       (S v)          ] -> entryVar  name <| createVarM     (lytNm, name, v                     ) \n                        |   Identifier name :: Doc        :: (S doc  )                  :: parms   -> entryDoc  name <| createDocM     (lytNm, name, doc  , parms          ) \n                        |   Identifier name :: View       ::                               parms   -> entryView name <| createViewM    (lytNm, name,        parms          )\n                        |   Identifier name :: Template   :: (S temp )         :: attrs :: holes   -> entryDoc  name <| createTemplateM(lytNm, name, temp , attrs   , holes)\n                        |   Identifier name :: Concat                                   :: docs    -> entryDoc  name <| createConcatM  (lytNm, name,                  docs )\n                        |   Identifier name :: Action     :: Identifier act             :: parms   -> entryAct  name <| createActionM  (lytNm, name, act  , parms          )\n                        |   Identifier name :: Elem elem                       :: attrs :: docs    -> entryDoc  name <| createElementM (lytNm, name, elem , attrs   , docs ) \n                        | _                                                                        -> None\n                    with e -> \n                        None\n            \n                module Syntax =\n            \n                    type ItemRef =\n                    | LocalRef of string\n                    | FullRef  of string * string\n            \n                    type DocRef = DocRef of ItemRef\n                    type ActRef = ActRef of ItemRef\n                    type VarRef = VarRef of ItemRef\n                    type ViwRef = ViwRef of ItemRef\n            \n                    let pairOfDocs lytNm docs =\n                        currentViewTriggger \n                        |> View.Map (fun _ -> getAllDocs lytNm docs )\n                        |> View.Map (\n                            function \n                            | [ doc1 ; doc2 ] -> doc1, doc2\n                            | _               -> sprintf \"splitter expects exactly 2 elements %A\" docs |> AF.errDoc, \"part 2\" |> AF.errDoc\n                        ) |> (fun dsW -> View.Map fst dsW |> Doc.EmbedView, View.Map snd dsW |> Doc.EmbedView )\n            \n                    type TextVal =\n                    | TvConst  of string\n                    | TvVarRef of VarRef\n                    | TvViwRef of ViwRef\n            \n                    type TextValL = TextVal list\n            \n                    type AttrVal =\n                    | AtStyle of string * TextValL\n                    | AtAttr  of string * TextValL\n                    | AtAct   of string * ActRef\n            \n                    type NodeRef =\n                    | NdTextValL of TextValL\n                    | NdDocRef   of DocRef\n                    | NdVarRef   of VarRef\n                    | NdViwRef   of ViwRef\n            \n                    type ParmRef =\n                    | PrTextValL of TextValL\n                    | PrDocRef   of DocRef\n                    | PrVarRef   of VarRef\n                    | PrViwRef   of ViwRef\n                    | PrActRef   of ActRef\n            \n                    type RefType =\n                    | RDoc\n                    | RVar\n                    | RViw\n                    | RAct\n                    | RPlg\n            \n                    type ElemNames = Map<string, RefType>\n                    type ElemName  = string * RefType\n            \n                    type SplitterDef = SplitterDef of vertical:bool * Measures * DocRef * DocRef\n                    type ButtonDef   = ButtonDef   of ActRef * AttrVal[] * TextValL\n                    type InputDef    = InputDef    of VarRef * AttrVal[]\n                    type TextAreaDef = TextAreaDef of VarRef * AttrVal[]\n                    type DocFDef     = DocFDef     of DocRef * ParmRef list\n                    type ConcatDef   = ConcatDef   of NodeRef list\n                    type ElementDef  = ElementDef  of string * AttrVal[] * NodeRef list\n            \n                    type ActDef      = ActDef      of ActRef * ParmRef list\n                    type VarDef      = VarDef      of string\n                    type ViwDef      = ViwDef      of ParmRef  list\n                    type PlgDef      = PlgDef      of ElemNames\n                    type DocDef      = \n                    | DcSplitter of SplitterDef\n                    | DcButton   of ButtonDef\n                    | DcInput    of InputDef\n                    | DcTextArea of TextAreaDef\n                    | DcDocF     of DocFDef\n                    | DcConcat   of ConcatDef\n                    | DcElement  of ElementDef\n            \n                    type Entry =\n                    | EnDocDef of DocDef\n                    | EnActDef of ActDef\n                    | EnVarDef of VarDef\n                    | EnViwDef of ViwDef\n                    | EnPlgDef of PlgDef\n                    | EnPlgRef of ElemName\n            \n                    type EntryDef = EntryDef of string * Entry\n            \n                    let entryDef  n e = EntryDef(n, e)\n                    let entryDoc  n d = EnDocDef d |> entryDef n |> Some\n                    let entryAct  n a = EnActDef a |> entryDef n |> Some\n                    let entryView n w = EnViwDef w |> entryDef n |> Some\n                    let entryVar  n v = EnVarDef v |> entryDef n |> Some\n                    let entryPlg  n p = EnPlgDef p |> entryDef n |> Some\n                    let entryRef  n e = EnPlgRef e |> entryDef n |> Some\n            \n                    let (|R|_|) = function\n                    | Identifier n ->\n                        match n.Split '.' with\n                        | [|     n |] -> LocalRef n    |> Some\n                        | [| l ; n |] -> FullRef(l, n) |> Some\n                        | _ -> None\n                    | _ -> None\n            \n                    let createEntryO (getType:ItemRef -> RefType * Entry option) lytNm (line:string) =\n                        let (|Rt|_|) = function\n                        | R itr -> Some (getType itr, itr)\n                        |_      -> None\n            \n                        let (|DocRf|_|) = function\n                        | Rt((RDoc, _), itr) -> Some(DocRef itr)\n                        |_-> None\n                        let (|VarRf|_|) = function\n                        | Rt((RVar, _), itr) -> Some(VarRef itr)\n                        |_-> None\n                        let (|ViwRf|_|) = function\n                        | Rt((RViw, _), itr) -> Some(ViwRef itr)\n                        |_-> None\n                        let (|ActRf|_|) = function\n                        | Rt((RAct, _), itr) -> Some(ActRef itr)\n                        |_-> None\n                        let (|PlgRf|_|) = function\n                        | Rt((RPlg, Some(EnPlgRef el)), itr) -> Some(el) \n                        |_-> None\n            \n                        let (|Name|_|) = function\n                        | R(LocalRef nm) -> Some nm\n                        |_               -> None\n            \n                        let (|NamU|_|) = function\n                        | Name nm when nm.StartsWith \"_\" -> Some nm\n                        |_                               -> None\n            \n                        let (|Tr|_|) = function\n                        | VarRf vr -> TvVarRef vr |> Some\n                        | ViwRf wr -> TvViwRef wr |> Some\n                        |_-> None\n            \n                        let (|Indi|_|) txt =\n                            match txt |> String.delimitedO \"@{\" \"}\" with\n                            | Some(bef, nm, aft) -> Some(bef, UnQuoted nm, aft)\n                            |_                   -> None\n            \n                        let rec (|Tx|_|) txt =\n                            match txt with\n                            | Indi(bef, Tr tv, aft) ->\n                                    let tl = if bef = \"\" then [ tv ] else [ TvConst bef ; tv ]\n                                    match aft with\n                                    | \"\"    -> Some tl\n                                    | Tx ta -> Some(tl @ ta)\n                                    |_      -> None\n                            | Indi(_, _, _) -> None\n                            |_              -> Some [ TvConst txt ]\n            \n                        let (|ActI|_|) txt =\n                            match txt with\n                            | Indi(bef, ActRf ar, aft) when bef.Trim() = \"\" && aft.Trim() = \"\" -> Some ar\n                            |_                                                                 -> None\n            \n                        let (|QTx|_|) = function\n                        | Quoted (Tx tv) -> tv |> Some\n                        |_-> None\n            \n                        let (|STx|_|) = function\n                        | QTx [TvConst v] -> v |> Some\n                        |_-> None\n            \n                        let (|At|_|) = function \n                        | Quoted s ->\n                            s.Trim().Split ';'\n                            |> Seq.filter (fun v -> v.Trim() <> \"\")\n                            |> Seq.choose(fun a ->\n                                match a.Trim().Split '=' with\n                                | [| nm ; ActI  ar |] -> AtAct  (nm.Trim(), ar)  |> Some\n                                | [| nm ; Tx    vl |] -> AtAttr (nm.Trim(), vl)  |> Some\n                                |_->\n                                match a.Trim().Split ':' with\n                                | [| nm ; Tx vl |] -> AtStyle(nm.Trim(), vl) |> Some\n                                |_->    failwithf \"Attributes should be like: \\\"name=val\\\" or \\\"name:val\\\" and separated by ';' : %s\" a\n                            )\n                            |> Seq.toArray\n                            |> Some\n                        |_-> None\n            \n                        let (|Pr|_|) = function \n                        | QTx   v -> Some (PrTextValL v)\n                        | DocRf v -> Some (PrDocRef   v)\n                        | VarRf v -> Some (PrVarRef   v)\n                        | ViwRf v -> Some (PrViwRef   v)\n                        | ActRf v -> Some (PrActRef   v)\n                        |_        -> None\n            \n                        let rec (|Prs|_|) = function\n                        | []                -> Some []\n                        | Pr pr :: Prs rest -> Some( pr :: rest)\n                        |_                  -> None\n            \n                        let (|Nd|_|) = function \n                        | QTx   v -> Some (NdTextValL v)\n                        | DocRf v -> Some (NdDocRef   v)\n                        | VarRf v -> Some (NdVarRef   v)\n                        | ViwRf v -> Some (NdViwRef   v)\n                        |_        -> None\n            \n                        let rec (|Nds|_|) = function\n                        | []                -> Some []\n                        | Nd nd :: Nds rest -> Some( nd :: rest)\n                        |_                  -> None\n            \n                        let rec (|Pgs|_|) = function\n                        | []                -> Some []\n                        | PlgRf el :: Pgs rest -> Some( el :: rest)\n                        |_                  -> None\n            \n                        match splitTokens line with\n                        |   Name name :: PlugIn     :: Pgs els                                   -> entryPlg  name <| PlgDef  (Map els )\n                        | [ NamU name ;  Doc        ;  Name nm                                 ] -> entryRef  name <| ElemName(nm, RDoc)\n                        | [ NamU name ;  Var        ;  Name nm                                 ] -> entryRef  name <| ElemName(nm, RVar)\n                        | [ NamU name ;  View       ;  Name nm                                 ] -> entryRef  name <| ElemName(nm, RViw)\n                        | [ NamU name ;  Action     ;  Name nm                                 ] -> entryRef  name <| ElemName(nm, RAct)\n                        | [ Name name ;  Vertical   ;  Measures measures ;  DocRf l ; DocRf r  ] -> entryDoc  name <| DcSplitter(SplitterDef(true , measures, l, r) )\n                        | [ Name name ;  Horizontal ;  Measures measures ;  DocRf l ; DocRf r  ] -> entryDoc  name <| DcSplitter(SplitterDef(false, measures, l, r) ) \n                        | [ Name name ;  Button     ;  ActRf      act    ;  At att  ; QTx text ] -> entryDoc  name <| DcButton  (ButtonDef  (act  , att     , text) )\n                        | [ Name name ;  Input      ;  VarRf      var    ;  At att             ] -> entryDoc  name <| DcInput   (InputDef   (var  , att           ) )\n                        | [ Name name ;  TextArea   ;  VarRf      var    ;  At att             ] -> entryDoc  name <| DcTextArea(TextAreaDef(var  , att           ) )\n                        | [ Name name ;  Var        ;                       STx v              ] -> entryVar  name <| VarDef    (v.Trim())\n                        |   Name name :: Doc        :: DocRf      dr               :: Prs ps     -> entryDoc  name <| DcDocF    (DocFDef    ( dr  , ps            ) )\n                        |   Name name :: View       ::                                Prs ps     -> entryView name <| ViwDef            ps              \n                        //|   Name name :: Template   :: (S temp )         :: At att :: holes      -> entryDoc  name <| entryTemplate(lytNm, name, temp , attrs   , holes)\n                        |   Name name :: Concat                                    :: Nds ns     -> entryDoc  name <| DcConcat  (ConcatDef                  ns      )\n                        |   Name name :: Action     :: ActRf      act              :: Prs ps     -> entryAct  name <| ActDef  ( act  , ps          )\n                        |   Name name :: Elem elem                       :: At att :: Nds ns     -> entryDoc  name <| DcElement (ElementDef(elem , att   , ns ) )\n                        | _                                                                      -> None\n            \n                    let createEntryO2 lytNm (refs:System.Collections.Generic.Dictionary<string, _>) =\n                        let ok nm en = refs.Add(nm, en) ; Some (Ok(nm, en)) \n                        let ko msg (line:string) =\n                            let nm = line.Split([| ' ' ; '\\t' |], System.StringSplitOptions.RemoveEmptyEntries) |> Seq.head\n                            refs.Add(nm, ElementDef(\"div\", [||], [NdTextValL [ TvConst msg ] ] ) |> DcElement |> EnDocDef )\n                            Result.Error msg |> Some\n                        let getRef nm =\n                            try refs.[nm]\n                            with e -> failwithf \"Could not find reference to %s\" nm\n                        let getType rf = \n                            match rf with\n                            | LocalRef      nm  -> \n                                let entry = getRef nm\n                                match entry with\n                                | EnDocDef _ -> RDoc\n                                | EnActDef _ -> RAct\n                                | EnVarDef _ -> RVar\n                                | EnViwDef _ -> RViw\n                                | EnPlgRef _ -> RPlg\n                                | EnPlgDef _ -> failwithf \"PlugIn should not be referenced by itself: %A\" rf\n                                , Some entry\n                            | FullRef  (ly, nm) -> \n                                getRef ly\n                                |> function\n                                | EnPlgDef(PlgDef ps) -> try ps.[nm] with e-> failwithf \"Could not find reference to %s.%s\" ly nm\n                                | _                   -> failwithf \"PlugIn not registered: %A\" rf\n                                , None\n                        fun (line:string) ->\n                            try \n                                createEntryO getType lytNm line\n                                |> function\n                                | Some(EntryDef(nm, en)) -> ok nm en\n                                | None -> line |> ko (sprintf \"Line not matched!: %s\" line)\n                            with e     -> line |> ko e.Message\n            \n                module Layout =\n                    open ParseO\n            \n                    type Node = \n                        | Node        of string []\n                        | SubSplitter of Splitter\n            \n                    and Splitter =\n                        Splitter of bool * Measures * Node * Node\n            \n                    let extractMeasuresO (m:string) =\n                        match m.Split([| ' ' |], System.StringSplitOptions.RemoveEmptyEntries) with\n                        | [|           Int v          |] -> Some (Fixed   (           float (abs(v)), v >= 0   ) ) \n                        | [| Int min ; Int v; Int max |] -> Some (Variable(float min, float      v  , float max) )\n                        | _                              -> None\n            \n                    let horizontalSplit (lines:string[]) =\n                        lines\n                        |> Seq.indexed\n                        |> Seq.choose (fun (i, l) ->\n                            match l with\n                            | REGEX \"^ *--+([ ^v0-9]*)-* *$\" \"\" p -> \n                                let ms    = p \n                                            |> Seq.tryItem 1 \n                                            |> Option.bind ((fun s -> s.Replace(\"^\", \"\").Replace(\"v\", \"-\") ) >> extractMeasuresO) \n                                            |> Option.defaultValue (Variable(5., 50., 95.))\n                                Some((i, ms), l.IndexOf '-')\n                            | _ -> None\n                        )\n                        |> Seq.sortBy snd\n                        |> Seq.tryHead\n                        |> Option.map fst\n                        |> Option.map (fun (i, ms) ->\n                            lines.[.. i - 1]\n                          , lines.[i + 1.. ]\n                          , ms\n                        )\n            \n                    let transpose (lines:string[]) =\n                        let max   = lines |> Seq.map (fun l -> l.Length) |> Seq.max\n                        [|\n                            for i in 0..max-1 do\n                                yield \n                                    new System.String( [| for l in lines do yield if l.Length > i then l.[i] else ' ' |])\n                                    \n                        |]\n            \n                    let verticalSplit (lyt:string[]) =\n                        let lines = transpose lyt\n                        lines\n                        |> Seq.indexed\n                        |> Seq.choose (fun (i, l) -> \n                            match l with\n                            | REGEX @\"^ *\\|+ *$\" \"\" [| _ |] -> Some(i, l.IndexOf '|')\n                            | _ -> None\n                        )\n                        |> Seq.sortBy snd\n                        |> Seq.tryHead\n                        |> Option.map fst\n                        |> Option.map (fun i -> lines.[.. i - 1] |> transpose\n                                              , lines.[i + 1 ..] |> transpose )\n                        |> Option.map (fun (l,r) ->\n                            l |> Array.filter(extractMeasuresO >> (=) None),\n                            r |> Array.filter(extractMeasuresO >> (=) None),\n                            seq {\n                                yield! l |> Seq.choose(extractMeasuresO)\n                                yield! r |> Seq.choose(extractMeasuresO) |> Seq.map (function Fixed(v, true) -> Fixed(v, false) | m -> m)\n                            } \n                            |> Seq.tryHead\n                            |> Option.defaultValue (Variable(5., 50., 95.))\n                        )\n            \n                    let cleanSpaces (lyt:string[]) = \n                        lyt \n                        |> String.concat \" \"\n                        |> fun s -> s.Split([| \" \" |], System.StringSplitOptions.RemoveEmptyEntries)\n                        |> Array.filter(function Int _ -> false |_-> true)\n            \n                    let rec extractNodes lyt =\n                        let checkSplitter dir m one two =\n                            match extractNodes one, extractNodes two with\n                            | Node [||], other\n                            | other    , Node [||] -> other\n                            | nOne     , nTwo      -> Splitter(dir, m, nOne, nTwo) |> SubSplitter\n                        match horizontalSplit lyt with\n                        | None -> \n                            match verticalSplit lyt with\n                            | None              -> Node (cleanSpaces lyt)\n                            | Some(one, two, m) -> checkSplitter true  m one two\n                        |     Some(one, two, m) -> checkSplitter false m one two\n            \n                    let rec createLayoutDefinitions nameBase node =\n                        match node with\n                        | Node [|      |] -> \"___\"    , [||]\n                        | Node [| elem |] ->  elem    , [||]\n                        | Node    svrl    ->  nameBase, [| nameBase + \" div \\\"\\\" \" + String.concat \" \" svrl |]\n                        | SubSplitter(Splitter(dir, meas, one, two)) ->\n                            let name1, def1 = createLayoutDefinitions (nameBase + \"_1\") one\n                            let name2, def2 = createLayoutDefinitions (nameBase + \"_2\") two\n                            nameBase, [| yield [ nameBase  ; (if dir then \"vertical\" else \"horizontal\") ; meas.ToString() ; name1 ; name2 ] |> String.concat \" \" \n                                         yield! def1\n                                         yield! def2 |]\n            \n                let getExtraLines pred (ls: string[]) =\n                    ls \n                    |> Seq.skip 1 \n                    |> Seq.tryFindIndex (fun l -> l.Trim() <> \"\" && not(pred l) )\n                    |> Option.map ((+) 1)\n                    |> Option.defaultValue ls.Length\n                    |> fun i -> \n                        ls.[1..i-1], ls.[i..] \n            \n                let rec createLines baseName n (names: string[]) (lines: string[]) i (ls:string[]) =\n                    let prefix  = String.replicate n \":\"\n                    let prefix2 = \":\" + prefix\n                    match Seq.tryHead ls with\n                    | None   -> names, lines\n                    | Some l ->\n                    match l.Trim() with\n                    | String.StartsWith prefix l ->\n                        let children, rest = ls |> getExtraLines(fun (l:string) -> l.Trim().StartsWith prefix2)\n                        let name = sprintf \"_%s_%d\" baseName i\n                        let childNames, childrenLines = createLines name (n+1) [||] [||] 1 children\n                        let names2 = [| yield! names ; yield name |]\n                        let lines2 = [| yield! lines\n                                        yield! childrenLines\n                                        yield  name + \" \" + l + \" \" + String.concat \" \" childNames\n                                     |]\n                        createLines baseName n names2 lines2 (i+1) rest\n                    | _   -> names, lines\n            \n                let processLines f ls =\n                    let rec processLinesR (ls: string[]) =\n                        match Seq.tryHead ls with\n                        | None   -> [||]\n                        | Some l ->\n                        match splitTokens l with\n                        | [ Identifier name ;  Layout ] ->\n                            let lyt, rest = ls |> getExtraLines(fun (l:string) -> l.Trim().StartsWith \"|\")\n                            lyt\n                            |> Layout.extractNodes\n                            |> Layout.createLayoutDefinitions name\n                            |> snd\n                            |> Array.append <| rest\n                            |> processLinesR\n                        |[] -> processLinesR ls.[1..]\n                        | _ ->\n                            let docs, rest = ls |> getExtraLines(fun (l:string) -> l.Trim().StartsWith \":\")\n                            if docs.Length > 0 then\n                                let prefix = l.Split([|' '|], System.StringSplitOptions.RemoveEmptyEntries) |> Seq.item 0\n                                let names, ls = createLines prefix 1 [||] [||] 1 docs\n                                [|  yield! ls\n                                    yield  l + \" \" + String.concat \" \" names\n                                    yield! rest\n                                |]\n                                |> processLinesR\n                            else\n                                [| \n                                    match f l with\n                                    | Some r -> yield r\n                                    | _ -> ()\n                                    yield! processLinesR rest\n                                |]\n                    processLinesR ls \n            \n                let processText f (txt:string) =\n                    txt.Split(  [|'\\n' ; '\\r' |], System.StringSplitOptions.RemoveEmptyEntries)\n                    |> processLines f\n            \n                let parseEntries lytNm txt =\n                    let localRefs = System.Collections.Generic.Dictionary<_,_>()\n                    processText (Syntax.createEntryO2 lytNm localRefs) txt\n            \n                let createEntries lytNm = processText (createEntryO lytNm)\n                                        //|> Seq.choose (createEntryO lytNm)\n                                        //|> Seq.toArray\n            \n                let getText lytNm txtName =\n                    match txtName with\n                    | Identifier id -> let plg, nm = splitName lytNm id \n                                       AF.tryGetViw plg nm\n                                       |> Option.map (fun viw -> Doc.TextView viw.viwView    )\n                                       |> Option.defaultWith (fun () -> \n                                       AF.tryGetVar plg nm\n                                       |> Option.map (fun var -> Doc.TextView var.varVar.View)\n                                       |> Option.defaultWith (fun () -> Html.text id))\n                    | (S txt)       -> Html.text txt\n            \n                let getDocEntries entries =\n                    entries\n                    |> Seq.choose (function | EntryDoc doc -> Some doc |_-> None)\n                    |> Seq.groupBy (fun d -> d.docName) |> Seq.map (snd >> Seq.last)\n            \n                let getVarEntries entries =\n                    entries\n                    |> Seq.choose (function | EntryVar var -> Some var |_-> None)\n                    |> Seq.groupBy (fun v -> v.varName) |> Seq.map (snd >> Seq.last)\n            \n                let getViewEntries entries =\n                    entries\n                    |> Seq.choose (function | EntryView vw -> Some vw |_-> None)\n                    |> Seq.groupBy (fun v -> v.viwName) |> Seq.map (snd >> Seq.last)\n            \n                let getActionEntries entries =\n                    entries\n                    |> Seq.choose (function | EntryAction ac -> Some ac |_-> None)\n                    |> Seq.groupBy (fun v -> v.actName) |> Seq.map (snd >> Seq.last)\n            \n                let getQueryEntries entries =\n                    entries\n                    |> Seq.choose (function | EntryQuery qr -> Some qr |_-> None)\n                    |> Seq.groupBy (fun v -> v.qryName) |> Seq.map (snd >> Seq.last)\n            \n                let inputFile lytNm attrs labelName actName doc =\n                    splitName lytNm actName\n                    ||> AF.tryGetAct\n                    |> Option.map(fun act -> \n                        Html.div (getAttrs lytNm (Quoted attrs)) [\n                            Html.div              [ attr.``class`` \"input-group\"       ] [\n                                Html.span         [ attr.``class`` \"input-group-btn\"   ] [ \n                                    Html.label    [ attr.``class`` \"btn\"               ] [ \n                                        getText lytNm (Quoted labelName)\n                                        Html.input[ attr.``class`` \"form-control\" \n                                                    attr.``type`` \"file\" \n                                                    Attr.Style \"display\" \"none\" \n                                                    Html.on.click (fun el ev -> el?value <- \"\")\n                                                    Html.on.change(fun el ev -> act.actFunction |> AF.callFunction el () )\n                                                    ] []\n                                    ]\n                                ]\n                                (if doc <> \"\" then singleDoc lytNm [ UnQuoted doc ] else Doc.Empty)\n                            ]\n                        ]\n                    ) |> Option.defaultWith(fun () ->  sprintf \"Action not found %s\" actName |> AF.errDoc )\n            \n                let inputLabel lytNm attrs labelName varName =\n                    splitName  lytNm varName\n                    ||> AF.tryGetVar\n                    |> Option.map(fun var -> \n                        Html.div (getAttrs lytNm (Quoted attrs)) [\n                            Html.div      [ attr.``class`` \"input-group\"       ] [\n                                Html.span [ attr.``class`` \"input-group-addon\" ] [ getText lytNm (Quoted labelName) ]\n                                Doc.Input [ attr.``class`` \"form-control\"      ]   var.varVar\n                            ]\n                        ]\n                    ) |> Option.defaultWith(fun () ->  sprintf \"Var not found %s\" varName |> AF.errDoc )\n            \n                let none x = Html.span [][]\n            \n                let htmlDoc lytNm html =\n                    getTextData lytNm html\n                    |> Doc.BindView(function\n                        | TDText  v   -> Doc.Verbatim              v\n                        | TDAct   act -> sprintf \"HtmlDoc: unexpected action %A\" act |> AF.errDoc\n                    )\n            \n                let refreshEntries lytN entries =\n                    let plg =   match AF.tryGetPlugIn lytN with\n                                | Some plg -> plg\n                                | None     -> \n                                    let plg = { AF.defaultPlugIn() with plgName = lytN }\n                                    AF.addPlugIn plg\n                                    plg\n                    ListModel.refreshLM plg.plgVars    [| yield! getVarEntries    entries |]\n                    ListModel.refreshLM plg.plgViews   [| yield! getViewEntries   entries |]\n                    ListModel.refreshLM plg.plgActions [| yield! getActionEntries entries |]\n                    ListModel.refreshLM plg.plgQueries [| yield! getQueryEntries  entries |]\n                    ListModel.refreshLM plg.plgDocs    [| \n                        yield! getDocEntries    entries\n                        yield  AF.newDocF \"InputFile\"  <| AF.FunDoc4(inputFile  lytN, \"attrs\", \"Label\", \"Action\", \"[Doc]\")\n                        yield  AF.newDocF \"InputLabel\" <| AF.FunDoc3(inputLabel lytN, \"attrs\", \"Label\", \"Var\"            )\n                        yield  AF.newDocF \"HtmlDoc\"    <| AF.FunDoc1(htmlDoc    lytN, \"html\"                             )\n                        yield  AF.newDocF \"none\"       <| AF.FunDoc1(none           , \"x\"                                )\n                    |]\n            \n                let addLayout (lyt:LayoutEngine) =\n                    lyt.lytDefinition.View |> View.Sink(fun txt ->\n                        currentViewTriggger <- V ( lyt.lytDefinition.V + AF.mainDocV.V)\n                        createEntries lyt.lytName txt\n                        |> Seq.append [ AF.newVar \"Layout\" lyt.lytDefinition |> EntryVar ]\n                        |> refreshEntries lyt.lytName\n                    )\n            \n                let newLyt name (lyt:string) = {\n                    lytName       = name\n                    lytDefinition = Var.Create lyt\n                }\n            \n                let addNewLayout (name:obj) (layout:obj) = \n                    (if layout <> null then unbox layout else \"\"\"\n            split horizontal 0-50-100 AppFramework.AppFwkClient Hello\n            Hello h1 \"color:blue; class=btn-primary\" \"How are you today?\" Ask\n            Ask Doc InputLabel \"placeholder=Type you answer here...\" \"Answer:\" AppFramework.mainDocV  \n            \"\"\"     |> String.unindentStr)\n                    |> newLyt (if layout <> null then unbox name else System.Guid.NewGuid() |> string |> fun s -> \"Lyt_\" + s.Replace(\"-\", \"\"))\n                    |> addLayout\n            \n                if IsClient then\n                    AF.tryGetPlugIn \"AppFramework\"\n                    |> Option.iter(fun plg ->\n                        plg.plgActions.Add <| ( AF.newActF \"AddLayout\" <| AF.FunAct2(addNewLayout, \"[Name]\", \"[Layout]\") )\n                    )\n            \n    \n        //#define WEBSHARPER\n        //#r @\"C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.6.1\\mscorlib.dll\"\n        [< JavaScriptExport >]\n        module TestingJS =\n        \n        \n            //#r @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\LayoutEngine\\bin\\LayoutEngine.dll\"\n            //open FsRoot.Library.Monads\n            //open FsRoot.LibraryJS\n            \n            [< JavaScript ; JavaScriptExport (typeof<WebComponent.WcSplitter.WcSplitterT>) >]\n            module StartAppFramework =\n                //open FsRoot\n                open WebSharper.JavaScript\n            \n                let htmlD = Depend.dependByName \"AppFrameworkTemplate.html\" AppFrameworkTemplate.html box\n            \n                let startWithHtmlD = Depend.depend {\n                    let! html = htmlD\n                    return fun () ->\n                        let d = JS.Window.Document.CreateElement \"div\"\n                        let _ = JS.Window.Document.Body.AppendChild d\n                        d?outerHTML <- html\n                        AppFramework.getMainDoc.Value \n                        |> Doc.RunAppend JS.Window.Document.Body \n            }\n            \n            module Util =\n                open Html\n            \n                let disabled disW = attr.disabledDynPred (V \"\") disW\n                let inputLabel attrs disW txt var =\n                    div attrs [\n                        div [           attr.``class`` \"input-group\"                       ] [\n                            span      [ attr.``class`` \"input-group-addon\"                 ] [ text txt ]\n                            Doc.Input [ attr.``class`` \"form-control\"      ; disabled disW ]   var\n                        ]\n                    ]\n            \n                let areaLabel attrs disW txt (var:Var<string>) =\n                    div attrs [\n                        div [                attr.``class`` \"input-group\"                       ] [\n                            span           [ attr.``class`` \"input-group-addon\"                 ] [ text txt ]\n                            Doc.InputAreaV [ attr.``class`` \"form-control\"      ; disabled disW ]   var.V\n                        ]\n                    ]\n            \n                let elemsUI doc addNew =\n                    div [] [\n                        doc\n                        Doc.Button \"New\" [] addNew\n                    ]\n            \n                let lensFloat2Str(v:Var<float>) = Var.Make (V (sprintf \"%A\" v.V)) (ParseO.parseDoubleO >> function Some d when d <> v.Value -> v.Set d |_->())\n                let textLine txtW = div [] [ textView txtW ]\n            \n                let lensStrO (sel:Var<string option>) =\n                    Var.Make \n                        (V ( match sel.V with Some s -> s |_-> \"\" )) \n                        (fun s -> if s = \"\" then sel.Set None\n                                  else Some s |> sel.Set)\n            \n                let mapVarO toB ofBO (sel:Var<_ option>) = \n                    Var.Make(V (sel.V |> Option.map toB)) \n                            (function Some s -> ofBO s |> Option.iter (Some >> sel.Set) |_-> sel.Set None) \n            \n                //let selectorLens toStr ofStrO (sel:Var<_ option>) =\n                //    Var.Make \n                //        (V ( match sel.V with Some v -> sprintf \"%s\" (toStr v) |_-> \"\" )) \n                //        (fun s -> if s = \"\" then sel.Set None\n                //                  else ofStrO s |> Option.iter (Some >> sel.Set) )\n                let selectorLens toStr ofStrO = mapVarO toStr ofStrO >> lensStrO\n            \n                let selectorLensInt    sel = selectorLens (fun (v          ) -> v   .ToString()) (ParseO.parseIntO                      ) sel\n                let selectorLensGuid   sel = selectorLens (fun (v          ) -> v   .ToString()) (ParseO.parseGuidO                     ) sel\n                let selectorLensGuidId sel = selectorLens (fun (v:GuidId<_>) -> v.Id.ToString()) (ParseO.parseGuidO >> Option.map GuidId) sel\n            \n                let unselectorV<'K> : Var<'K option> = Var.Make (View.Const None) ignore\n            \n                //let wrapUI elem f = (fun a b -> f a b >> Seq.singleton >> elem [] )\n                let simpleButton txt f = Doc.Button txt [] (f >> ignore)\n                let newButton   f = simpleButton \"New\" f\n                let orderedList l = ol [] [ l ]\n            \n            module AF =\n                //open FsRoot\n                open AppFramework\n            \n                type PlugInBuilder() =\n                    member __.Zero() = { defaultPlugIn() with plgName    = \"Main\" }\n                    member this.Yield(()) = this.Zero()\n                    member __.For(coll:seq<_>, func) =\n                        let ie = coll.GetEnumerator()\n                        while ie.MoveNext() do\n                            func ie.Current\n                    [<CustomOperation(\"name\"   )>]\n                    member __.Name  (plg:PlugIn, name     )   = { plg with plgName    = name }\n                    [<CustomOperation(\"var\"    )>]  \n                    member __.AddVar(plg:PlugIn, name, var)   = plg.plgVars   .Add(newVar name var)  ; plg\n                    [<CustomOperation(\"doc\"    )>]  \n                    member __.AddDoc(plg:PlugIn, name, doc)   = plg.plgDocs   .Add(newDoc name doc)  ; plg\n                    [<CustomOperation(\"docDyn\" )>]  \n                    member __.AddDocF(plg:PlugIn, name, docF) = plg.plgDocs   .Add(newDoc name (lazy LayoutEngine.turnToView docF) ) ; plg\n                    [<CustomOperation(\"act\"    )>]\n                    member __.AddAct(plg:PlugIn, name, act)   = plg.plgActions.Add(newAct name act) ; plg\n                    [<CustomOperation(\"actOpt\"    )>]\n                    member __.AddActO(plg:PlugIn, name,actO) = match actO with \n                                                               | Some act -> plg.plgActions.Add(newAct name act)\n                                                               | None     -> ()\n                                                               plg\n                    //[<CustomOperation(\"mainDoc\")>]\n                    //member __.InsDoc(plg:PlugIn, name, doc) = plg.plgDocs.    = [| newDoc name doc |] |> Array.append <| plg.plgDocs    }\n                    [<CustomOperation(\"view\"   )>]  \n                    member __.AddViw(plg:PlugIn, name, viw) = plg.plgViews.Add(newViw name viw) ; plg\n                    [<CustomOperation(\"merge\"  )>]\n                    member __.Merge (plg:PlugIn, prefix, p2:PlugIn) = \n                        plg.plgVars   .AppendMany(p2.plgVars    |> Seq.map (fun v -> { v with varName = prefix + v.varName } ) ) \n                        plg.plgViews  .AppendMany(p2.plgViews   |> Seq.map (fun w -> { w with viwName = prefix + w.viwName } ) ) \n                        plg.plgDocs   .AppendMany(p2.plgDocs    |> Seq.map (fun d -> { d with docName = prefix + d.docName } ) ) \n                        plg.plgActions.AppendMany(p2.plgActions |> Seq.map (fun a -> { a with actName = prefix + a.actName } ) ) \n                        plg.plgQueries.AppendMany(p2.plgQueries |> Seq.map (fun q -> { q with qryName = prefix + q.qryName } ) ) \n                        plg\n            \n                let plugin = PlugInBuilder()\n                let addPlugIn2 plg =\n                    addPlugIn  plg\n                    match Seq.tryHead plg.plgDocs with\n                    | Some doc -> mainDocV.Set (plg.plgName + \".\" + doc.docName)\n                    |_->()\n            \n                let concatMainDocs plugins = \n                    plugins \n                    |> Seq.choose (fun plg -> Seq.tryHead plg.plgDocs) \n                    |> Seq.choose (function {docDoc = (LazyDoc d)}-> Some d.Value|_-> None) \n                    |> Doc.Concat\n            \n                type ListModelData<'K, 'D when 'K : equality> = {\n                    elems  : ListModel<'K, 'D>\n                    doc    : Doc\n                    selV   : Var<'K option>\n                    add    : unit -> 'D  \n                    delCur : unit -> unit\n                    //getDoc : View<'K option> -> Var<'D> -> Doc\n                    def    : 'D\n                } with \n                    member this.PlugIn selectorLens = plugin {\n                        doc    \"list\" (lazy this.doc         )\n                        //doc    \"cur\"  (lazy this.CurrentDoc  )\n                        var    \"sel\"  (selectorLens this.selV)\n                        act    \"add\"  (this.add >> ignore    )\n                        act    \"del\"  this.delCur\n                    }\n                    member this.CurrentW =\n                        this.selV.View \n                        |> View.Bind (Option.map this.elems.TryFindByKeyAsView >> View.insertWO) \n                        |> View.Map  (Option.bind id >> Option.defaultValue this.def)\n                    member this.CurrentV =\n                        Var.Make this.CurrentW\n                                (fun v -> match this.selV.Value with Some k when this.elems.ContainsKey k -> this.elems.Add v |_-> ())\n                    //member this.CurrentDoc   = this.getDoc this.selV.View this.CurrentV\n            \n                //type ListModelDataGuidId<'D> = ListModelData<GuidId<'D> , 'D>\n                //type ListModelDataGuid<  'D> = ListModelData<System.Guid, 'D>\n                //type ListModelDataInt<   'D> = ListModelData<int        , 'D>\n            //\n                //type ListModelDataGuidId<'D> with\n                //    member this.PlugIn () = (box this |> unbox<ListModelData<GuidId<'D>, 'D>>).PlugIn Util.selectorLensGuidId\n            \n            module LayoutEngine =\n                open LayoutEngine\n                module AF = AppFramework\n            \n                let addLayout0 lyt = \n                    addLayout  lyt\n                    AF.mainDocV.Set lyt.lytName\n            \n            module ListModel =\n                let MapLens predO (f: 'Key -> Var<'T> -> 'V) (m:ListModel<_,_>) =\n                    let get k v = f k (m.Lens k)\n                    match predO with\n                    | None       -> m.ViewState |> View.MapSeqCachedViewBy m.Key get \n                    | Some predW ->\n                        (m.ViewState, predW) \n                        ||> View.Map2(fun vms pred -> vms.ToArray (System.Predicate pred)) \n                        |> View.MapSeqCachedViewBy m.Key get \n            \n            module LM =\n                open Util\n            \n                let getDocFor (elements: ListModel<_,_>) def newF predWO elUI =\n                    let keyF = elements.Key\n                    let selected0 : Var<_ option>  = Var.Create None\n                    let selView = View.Do {\n                        let! selO = selected0.View\n                        match selO with \n                        | None      -> return None\n                        | Some sel  ->\n                        let! exists = elements.ContainsKeyAsView sel\n                        if not exists then return None else\n                        return Some sel\n                        //match predWO with\n                        //| None       -> return Some sel\n                        //| Some predW ->\n                        //let! v    = elements.FindByKeyAsView sel\n                        //let! pred = predW\n                        //return if pred v then Some sel else None\n                    }\n                    let selectedV : Var<_ option>  = \n                        Var.Make\n                            selView\n                            (function Some k when elements.ContainsKey k -> Some k |_-> None\n                             >> fun v -> if selected0.Value <> v then selected0.Set v )\n                    let addNew () =\n                        let n = newF()\n                        elements.Add n\n                        selectedV.Set (Some <| keyF n)\n                        n\n                    let delete  k = fun () -> selectedV.Set None ; elements.RemoveByKey k\n                    let result = {\n                        AF.elems  = elements\n                        AF.doc    = Doc.Empty\n                        AF.selV   = selectedV\n                        AF.delCur = fun () -> selectedV.Value |> Option.iter (fun k -> delete k () )\n                        AF.add    = addNew\n                        //AF.getDoc = elUI selectedV ignore\n                        AF.def    = def\n                    }\n                    let elUIF = elUI result\n                    let list      = elements |> ListModel.MapLens predWO (fun k v -> elUIF (View.Const (Some k)) v )\n                    { result with AF.doc = list |> Doc.BindSeqCached id }\n            \n                let getDoc keyF def newF predWO elUI =\n                    let elements  : ListModel<_,_> = ListModel.Create keyF []\n                    getDocFor elements def newF predWO elUI\n            \n                //let setCurrentDoc docF li = { li with AF.getDoc = docF Util.unselectorV ignore }\n                let addElements (li:AF.ListModelData<_,_>) elems = li.elems.AppendMany elems\n            \n            module LMX =\n                open Util\n                open System\n            \n                let addNewO newF firstKey nextKey=\n                    let mutable k = firstKey\n                    fun () ->\n                        let e = k, newF()\n                        k <- nextKey k\n                        e\n            \n                let elemUI2 elemUI a b (v:Var<_>) = elemUI a b (v.Lens snd (fun (i, _) nv -> i, nv ) )\n            \n                let getDocInt    def newElem elemUI = addNewO newElem 0                          ((+) 1)                             |> LM.getDoc fst (-1               , def) <| None <| elemUI2 elemUI\n                let getDocGuid   def newElem elemUI = addNewO newElem (Guid.NewGuid())           (fun _ -> Guid.NewGuid())           |> LM.getDoc fst (       Guid.Empty, def) <| None <| elemUI2 elemUI\n                let getDocGuidId def newElem elemUI = addNewO newElem (Guid.NewGuid() |> GuidId) (fun _ -> Guid.NewGuid() |> GuidId) |> LM.getDoc fst (GuidId Guid.Empty, def) <| None <| elemUI2 elemUI\n                                                        : AF.ListModelData<GuidId<'C>, GuidId<'C> * 'C>\n            \n                //let setCurrentDoc docF = elemUI2 docF |> LM.setCurrentDoc\n            \n                let addElements (li:AF.ListModelData<_,_>) elems = elems |> Seq.iter (fun v -> (li.add() |> fst, v) |> li.elems.Add )\n            \n            \n            module SnippetTemplates =\n                let html = \"\"\"\n                <div ws-template=\"Snippet\" >\n                    <div draggable=\"true\" class=\"code-editor-list-tile ${Predecessor} ${Selected}\" \n                         ws-ondrag=\"Drag\"\n                         ws-ondragover=\"DragOver\"\n                         ws-ondrop=\"Drop\"\n                        >\n                        <span class=\"node ${Parent} ${ErrorMsg}\" title=\"expand\" ws-onclick=\"ToggleCollapse\"></span>\n                        <div  class=\"code-editor-list-text\" style=\"text-indent:${Indent}em; white-space: pre\" ws-onclick=\"Select\" ws-onafterrender=\"AfterRender\" >${Name}</div>\n                        <span class=\"predecessor\" title=\"toggle predecessor\" ws-onclick=\"TogglePred\">X</span>\n                    </div>\n                </div>\n                <style>\n                    .Hidden     { display   : none         }\n                    table th,table td { padding:0 5px 0 5px; text-overflow: ellipsis }\n                    td input.form-control { \n                        padding    : 0px; \n                        font-family: monospace;\n                        font-size  :   small;\n                        margin-top :   0px;\n                        margin-left: -2px;\n                        width      : 100%\n                    }\n                    td select {\n                        font-size : smaller;\n                        max-width : 8ch;\n                    }\n                    textarea {\n                       resize : none;\n                    }\n                    .tab-content {\n                        overflow: hidden\n                    }\n                    .tab-children {\n                        position:relative;\n                    }\n                    .tab-children>div>* {\n                        position:absolute;\n                        height: 100%;\n                        width:  100%;\n                        display: grid;\n                    }\n                    .relative {\n                        position:relative;\n                    }\n                    .relative>* {\n                        position:absolute;\n                        height: 100%;\n                        width:  100%;\n                        display: grid;\n                    }\n                    table.table-striped    tbody tr:nth-child(even) { background: #EEE  }\n                    table.table-striped    tbody tr:nth-child(odd ) { background: #FFF  }\n                    table.table-striped    tbody input              { background: transparent; border: none}\n                    table.table-striped    tbody select             { background: transparent; border: none}\n                    table.table-nonstriped tbody tr:nth-child(even) { background: inherit }\n                    table.table-nonstriped tbody tr:nth-child(odd ) { background: inherit }\n                    table.table            tbody tr.hover           { border    : solid thin transparent; } \n                    table.table            tbody tr.hover:hover     { border    : solid thin blue     ; } \n                    table.table            tbody th:hover           { background: gray; cursor: pointer }\n                    table.table            tbody tr.hover:hover>td  { border-top: solid thin blue     ; \n                                                               border-bottom: solid thin blue     ; } \n                    table.table            tbody tr.selected { background   : #b9eeff             ; }\n                    table.table            tbody tr.formula.selected { background: #20f7f7             ; }\n                    thead { color: gray }\n                    h3 { \n                        color: gray;\n                        line-height: 1em;\n                    }\n                    button       { border: solid thin transparent ; border-radius: 3px; }\n                    button:hover { border: solid thin blue }\n                    .indenter { position  : absolute; \n                                top:0px; bottom:0px; left:0px; \n                                background: white; color:white;\n                                border-right: gray thin dotted;\n                                }\n                    body {\n                        color      : #333;\n                        font-size  : small;\n                        font-family: monospace;\n                        line-height: 1.2;\n                    }\n                    .mainTitle {  \n                        font-size: 48px;\n                        font-weight: 500;\n                        color: gray;\n                        margin-top: -12px;\n                    }\n                    .CodeMirror {\n                        height: 100%;\n                    }\n                    \n                  \n                    body { margin: 0px }     \n                         \n                    div textarea {\n                        font-family     : monospace;\n                    }\n                    .code-editor-list-tile {\n                        white-space     : nowrap; \n                        border-style    : solid none none;\n                        border-color    : white;\n                        border-width    : 1px;\n                        background-color: #D8D8D8;\n                        display         : flex;\n                    }\n                    .code-editor-list-text{\n                        padding         : 1px 10px 1px 5px;\n                        overflow        : hidden;\n                        text-overflow   : ellipsis;\n                        white-space     : nowrap;\n                        flex            : 1;\n                    }\n                    \n                    .code-editor-list-tile span.node.ErrorMsg {\n                        background-color: red\n                    }\n                    .code-editor-list-tile span.node.expanded::before {\n                        content: \"-\"\n                    }\n                    .code-editor-list-tile span.node.collapsed::before {\n                        content: \"+\"\n                    }\n                    .code-editor-list-tile.direct-predecessor {\n                        font-weight     : bold;\n                        color           : blue;\n                    }\n                    .code-editor-list-tile.indirect-predecessor {\n                        color           : blue;\n                    }\n                    .code-editor-list-tile.included-predecessor {\n                        color           : chocolate;\n                    }\n                    .code-editor-list-tile.selected {\n                        background-color: #77F;\n                        color           : white;\n                    }\n                    .code-editor-list-tile.codeSnippet {\n                        text-decoration : underline;\n                        font-weight     : bold;\n                    }\n                    .code-editor-list-tile:hover {\n                        background      : lightgray;\n                    }\n                    .code-editor-list-tile.selected:hover {\n                        background      : blue;\n                    }\n                    .code-editor-list-tile>.predecessor {\n                        font-weight     : bold;\n                        border-style    : inset;\n                        border-width    : 1px;\n                        text-align      : center;\n                        color           : transparent;\n                    }\n                    .code-editor-list-tile.direct-predecessor>.predecessor {\n                        color           : blue;\n                    }\n                    \n                    .CodeMirror { height: 100%; }\n                    \n                    .node {\n                        background-color: white; \n                        width           : 2ch; \n                        color           : #A03; \n                        font-weight     : bold; \n                        text-align      : center;\n                        font-family     : arial;\n                    }\n                    .Warning { text-decoration: underline lightblue } \n                    .Error   { text-decoration: underline red       } \n                    \n                </style>\n            \"\"\"\n            \n            //#r \"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\projects\\LayoutEngine\\bin\\LayoutEngine.dll\"\n            //#define WEBSHARPER\n            module NewLY =\n                //open FsRoot\n                open WebSharper.UI\n                open WebSharper.UI.Client\n            \n                open AppFramework\n                module AF = AppFramework\n            \n                open Html\n            \n                open Depend.Operators\n            \n                let concat a b = sprintf \"Concat(%d, %f)\" a b \n                let aV = Var.Create 4\n                let pa = aV.View\n                let pb = 6.2\n            \n                let currentPlugInNameDef : PlugInName = UoM.Tag<_> \"NewLYx\"\n                let currentPlugInNameD                = Depend.dependByName \"currentPlugInName\" currentPlugInNameDef id\n            \n                module P =\n                    let run pin (p:P<_>) = p.r |> run pin\n            \n                let name       = Var.Create \"World\"\n            \n                let checkName (n:string) = if n = \"World\".[0..n.Length-1] || n.Length <= 1 then \"<---- Please enter your name\" else \"\" \n            \n                let enterName  = ! checkName             <! name\n                let now        = ! (fun _ -> nowStamp()) <! name\n            \n                let sayHello  =\n                    let sayHello_0 = ! Doc.Concat <& \"Hello @{name}!\" <! enterName\n                    let sayHello_1 = ! Doc.Concat <& \"How are you?\"\n                    ! Doc.Concat <& sayHello_0       <! sayHello_1\n            \n                let aString = Var.Lens aV string (fun _ -> int)\n            \n                let main0 = ! concat <! aV <* 3.2\n                let main1 = !(sprintf \"result = %s %s\") <! main0 <* \"main0\"\n                let main  = ! h3 <& \"color:@{name}; background:red; click=@{AppFramework.Hello}\" <& \"MAIN:\" <! main1 <! main1 <! \":\" <! sayHello <! \":\" <! \" Más >> \" <! sayHello <! \" <<\"\n            \n                let main2 = makeAViewDoc <| fun () -> h4 [ attr.styleDyn <| V(\"color:\" + name.V) ] [ text \"MAIN2:\" ; Doc.TextView name.View] \n            \n                let appFwk = ! div <& \"color:@{name}\" <& \"@{AppFramework.AppFwkClient}\"\n                let split  = ! (LayoutEngine.variableSplitter false 0. 50. 100.) <& appFwk <& main\n                let split2 = ! (LayoutEngine.variableSplitter false 0. 50. 100.) <& appFwk <& main2\n            \n                let callDocPFn pin pf = pf |> P.run pin |> callDoc\n            \n                let pName = UoM.Tag<_> \"NewLY\" \n            \n                AF.plugin {\n                    plgName (UoM.Untag pName)\n                    plgVar  \"name\"      name\n                    plgVar  \"a\"         aString\n                    plgDoc  \"split\"     (lazy         (split      |> callDocPFn pName ) )\n                    plgDoc  \"split2\"    (lazy         (split2     |> callDocPFn pName ) )\n                    plgDoc  \"main\"      (lazy         (main       |> callDocPFn pName ) )\n                    plgDoc  \"main2\"     (lazy          main2                            )\n                    plgDoc  \"sayHello\"  (lazy         (sayHello   |> callDocPFn pName ) )\n                    plgDoc  \"sayHello2\" (lazy         (sayHello   |> callDocPFn pName ) )\n                }\n                |> AF.addPlugIn\n            \n            \n                //[< SPAEntryPoint >]\n                //let mainProgram() =\n                //    do (StartAppFramework.startWithHtmlD \n                //        |> Depend.resolver [\n                //            \"AppFrameworkTemplate.html\", AppFrameworkTemplate.html + SnippetTemplates.html\n                //        ]) ()\n            \n                open LayoutEngine\n                open LayoutEngine.Syntax\n            \n                let itemRefToTextType = function\n                | LocalRef     t  -> Extract0.TReference t\n                | FullRef(pr, er) -> Extract0.TReference (sprintf \"%s.%s\" pr er)\n            \n                let itemRefToString = function\n                | LocalRef     t  -> t\n                | FullRef(pr, er) -> (sprintf \"%s.%s\" pr er)\n            \n                let textValToTextType = function\n                | TvConst  s          -> Extract0.TSimple  s\n                | TvVarRef (VarRef v)  \n                | TvViwRef (ViwRef v) -> itemRefToTextType v\n            \n                let (|ActRVs|) = function | ActRef v -> [ TvVarRef (VarRef v)]\n            \n                let attrValToAttrD = Depend.depend {\n                    let! getTextValFromTextTypes = Extract0.getTextValFromTextTypesD\n                    let! getTextVal              = Extract0.getTextValD\n                    return\n                        function\n                        | AtStyle (an,        vs) -> vs, valToStyle an\n                        | AtAct   (an, ActRVs vs) \n                        | AtAttr  (an,        vs) -> vs, valToAttr  an\n                        >> fun (vs, f) -> \n                            List.map textValToTextType vs\n                            |> getTextValFromTextTypes\n                            |> f\n                }\n            \n                let nodeRefToDocD = Depend.depend {\n                    let! getDocFromTextTypes = Extract0.getDocFromTextTypesD\n                    return function\n                        | NdTextValL       vs ->  vs |> List.map textValToTextType |> getDocFromTextTypes\n                        | NdDocRef (DocRef r)\n                        | NdVarRef (VarRef r)\n                        | NdViwRef (ViwRef r) -> [ itemRefToTextType r ] |> getDocFromTextTypes\n                }\n            \n                let varRefToVarD = Depend.depend {\n                    let! currentPlugInName = currentPlugInNameD\n                    return fun (VarRef ref) ->\n                        let r = itemRefToString ref\n                        AF.splitName (UoM.Untag currentPlugInName) r\n                        ||> AF.tryGetVar\n                        |>  Option.map (fun v -> v.varVar)\n                        |>  Option.defaultWith(fun () -> Var.Make (View.Const <| sprintf \"Could not find var %s\" r) ignore )\n                }\n            \n                let getParamD = Depend.depend {\n                    let! currentPlugInName = currentPlugInNameD\n                    let! getTextValFromSeq = Extract0.getTextValFromSeqD\n                    return fun (p:ParmRef) ->\n                        let lytN = UoM.Untag currentPlugInName\n                        match p with\n                        | PrTextValL       ts -> ts|> List.map textValToTextType |> getTextValFromSeq |> Val.map choiceToString |> Val.toView |> View.Map box\n                        | PrDocRef (DocRef r) -> r |> itemRefToString |> AF.tryGetDocW lytN |> View.Map  (Option.map ((fun d -> d.docDoc     ) >> box          ) >> Option.defaultWith (fun () -> sprintf \"missing ref Doc %A\"    r :> obj              ) )\n                        | PrVarRef (VarRef r) -> r |> itemRefToString |> AF.tryGetVarW lytN |> View.Bind (Option.map ((fun v -> v.varVar.View) >> View.Map box ) >> Option.defaultWith (fun () -> sprintf \"missing ref Var %A\"    r :> obj |> View.Const) )\n                        | PrViwRef (ViwRef r) -> r |> itemRefToString |> AF.tryGetViwW lytN |> View.Bind (Option.map ((fun v -> v.viwView    ) >> View.Map box ) >> Option.defaultWith (fun () -> sprintf \"missing ref View %A\"   r :> obj |> View.Const) )\n                        | PrActRef (ActRef r) -> r |> itemRefToString |> AF.tryGetActW lytN |> View.Map  (Option.map ((fun v -> v.actFunction) >> box          ) >> Option.defaultWith (fun () -> sprintf \"missing ref Action %A\" r :> obj              ) )\n                }\n            \n                let itemRefToAbsolute lyt = \n                    function\n                    | LocalRef     t  -> lyt, t\n                    | FullRef(pr, er) -> pr , er\n                    >> fun (a,b) -> sprintf \"%s.%s\" a b\n            \n                let getParam2D = Depend.depend {\n                    let! currentPlugInName = currentPlugInNameD\n                    let! getTextValFromSeq = Extract0.getTextValFromSeqD\n                    return fun (p:ParmRef) ->\n                        let toAbs = itemRefToAbsolute (UoM.Untag currentPlugInName) >> sprintf \"@{%s}\"\n                        match p with\n                        | PrTextValL       ts -> ts|> Seq.map (function TvConst s-> s | TvVarRef (VarRef r) | TvViwRef (ViwRef r) -> toAbs r) |> String.concat \"\"\n                        | PrViwRef (ViwRef r) \n                        | PrDocRef (DocRef r) \n                        | PrVarRef (VarRef r) \n                        | PrActRef (ActRef r) -> toAbs r\n                }\n            \n                let getParamTextD = Depend.depend {\n                    let! currentPlugInName = currentPlugInNameD\n                    let! getTextValFromSeq = Extract0.getTextValFromSeqD\n                    return fun (p:ParmRef) f ->\n                        let lytN = UoM.Untag currentPlugInName\n                        match p with\n                        | PrTextValL       ts -> ts|> List.map textValToTextType |> getTextValFromSeq |> Val.map choiceToString |> Val.toView |> View.Get(box >> f)\n                        | PrDocRef (DocRef r) -> r |> itemRefToString |> AF.tryGetDoc lytN |> Option.iter ((fun d -> d.docDoc     ) >> box           >> f  )\n                        | PrVarRef (VarRef r) -> r |> itemRefToString |> AF.tryGetVar lytN |> Option.iter ((fun v -> v.varVar.View) >> View.Get (box >> f) )\n                        | PrViwRef (ViwRef r) -> r |> itemRefToString |> AF.tryGetViw lytN |> Option.iter ((fun v -> v.viwView    ) >> View.Get (box >> f) )\n                        | PrActRef (ActRef r) -> r |> itemRefToString |> AF.tryGetAct lytN |> Option.iter ((fun v -> v.actFunction) >> box           >> f  )\n                }\n            \n                let defVar(    lytN, n:string, v) = Var.Create v\n                let defAction( lytN, n:string, ActRef ac:ActRef, ps:ParmRef list) =\n                    Depend.depend {\n                        let! currentPlugInName = currentPlugInNameD\n                        let! getParamText      = getParamTextD\n                        return (\n                            let r     = itemRefToString ac\n                            AF.splitName (UoM.Untag currentPlugInName) r\n                            ||> AF.tryGetAct\n                            |>  Option.map          (fun act -> \n                                if ps = [] then act.actFunction else\n                                match act.actFunction, ps with\n                                | AF.FunAct1(f,_    ), [ t1     ] -> AF.FunAct0( fun () -> getParamText t1                             f              )\n                                | AF.FunAct2(f,_, _ ), [ t1; t2 ] -> AF.FunAct0( fun () -> getParamText t1 (fun p1 -> getParamText t2 (f p1   ) )     )\n                                | AF.FunAct2(f,_, n2), [ t1     ] -> AF.FunAct1((fun p2 -> getParamText t1 (fun p1 ->                  f p1 p2) ) , n2)\n                                | _ -> AF.FunAct0 (fun () -> printfn \"Parameters do not coincide for Action %s %A %A\" r ps act )\n                            )\n                            |>  Option.defaultWith  (fun ()  -> AF.FunAct0 (fun () -> printfn \"Action Not Found %s\" r) )\n                        )\n                    } |> run lytN\n                let defViewJS( lytN, n:string, ps:ParmRef list) =\n                    Depend.depend {\n                        let! currentPlugInName = currentPlugInNameD\n                        let! getParam          = getParamD\n                        return baseView |> View.Bind(fun _ ->\n                            try\n                                ps\n                                |> View.traverseSeq getParam\n                                |> View.Map Seq.toArray\n                                |> View.Map (fun ar ->\n                                    try match ar with\n                                        | [|   |] -> \"No JS function specified\"\n                                        | [| _ |] ->  JavaScript.JS.Eval (unbox ar.[0])                                                         |> string\n                                        | _       -> (JavaScript.JS.Eval (unbox ar.[0]) |> unbox<JavaScript.FuncWithArgs<_,obj>>).Call ar.[1..] |> string\n                                    with e -> e.Message\n                                )\n                            with e -> e.Message |> View.Const\n                        )\n                    } |> run lytN\n                let defInput(  lytN, n:string, v, attrs : AttrVal seq) =\n                    Depend.depend {\n                        let! attrValToAttr = attrValToAttrD\n                        let! varRefToVar   = varRefToVarD\n                        return\n                            makeAViewDocL <| fun () ->\n                                Doc.Input\n                                    <| (attrs |> Seq.map attrValToAttr)\n                                    <| varRefToVar v\n                    } |> run lytN\n                let defTextArea(  lytN, n:string, v, attrs : AttrVal seq) =\n                    Depend.depend {\n                        let! attrValToAttr = attrValToAttrD\n                        let! varRefToVar   = varRefToVarD\n                        return\n                            makeAViewDocL <| fun () ->\n                                Doc.InputArea\n                                    <| (attrs |> Seq.map attrValToAttr)\n                                    <| varRefToVar v\n                    } |> run lytN\n                let defElement(lytN, n:string, elem, attrs : AttrVal seq, docs:NodeRef list) = \n                    Depend.depend {\n                        let! attrValToAttr = attrValToAttrD\n                        let! nodeRefToDoc  = nodeRefToDocD\n                        return\n                            makeAViewDocL <| fun () ->\n                                Doc.Element elem\n                                    <| (attrs |> Seq.map attrValToAttr)\n                                    <| (docs  |> Seq.map nodeRefToDoc )\n                                :> Doc\n                    } |> run   lytN\n                let defConcat( lytN, n:string, docs:NodeRef list) = \n                    Depend.depend {\n                        let! attrValToAttr = attrValToAttrD\n                        let! nodeRefToDoc  = nodeRefToDocD\n                        return\n                            makeAViewDocL <| fun () ->\n                                docs |> Seq.map nodeRefToDoc |> Doc.Concat\n                    } |> run   lytN\n                let defDocF(   lytN, n:string, DocRef dc, ds:ParmRef list) =\n                    Depend.depend {\n                        let! currentPlugInName    = currentPlugInNameD\n                        let! getParam2            = getParam2D\n                        let  getP                 = getParam2\n                        let rec passParm          = function\n                            | df                                  , []   ->                          df\n                            | AF.DocFunction.LazyDoc ld           , _    ->  AF.DocFunction.LazyDoc  ld\n                            | AF.DocFunction.FunDoc1(f1,_        ), a::r ->  AF.DocFunction.LazyDoc(lazy(f1 <| getP a)       )\n                            | AF.DocFunction.FunDoc2(f2,_,b      ), a::r -> (AF.DocFunction.FunDoc1(     f2 <| getP a,b      ),r) |> passParm\n                            | AF.DocFunction.FunDoc3(f3,_,b,c    ), a::r -> (AF.DocFunction.FunDoc2(     f3 <| getP a,b,c    ),r) |> passParm\n                            | AF.DocFunction.FunDoc4(f4,_,b,c,d  ), a::r -> (AF.DocFunction.FunDoc3(     f4 <| getP a,b,c,d  ),r) |> passParm\n                            | AF.DocFunction.FunDoc5(f5,_,b,c,d,e), a::r -> (AF.DocFunction.FunDoc4(     f5 <| getP a,b,c,d,e),r) |> passParm\n                        return\n                            itemRefToString dc\n                            |> splitName (UoM.Untag currentPlugInName) \n                            ||> AF.tryGetDoc\n                            |>  Option.map (fun d -> passParm(d.docDoc, ds) )\n                            |>  Option.defaultWith  (fun ()  -> lazy (sprintf \"Missing doc: %A\" dc |> AF.errDoc ) |> AF.DocFunction.LazyDoc)\n                    } |> run   lytN\n                let defButton( lytN, n:string, ac, attrs : AttrVal seq, tx:TextVal list) = \n                    defElement(lytN, n, \"button\", Seq.append [ AtAct(\"click\", ac) ] attrs, [ NdTextValL tx ])\n            \n                let defSplitter(lytN, n, v , m, DocRef l, DocRef r) =\n                    Depend.depend {\n                        let! getDocFromTextTypes = Extract0.getDocFromTextTypesD\n                        return lazy (\n                            let getDoc d = makeAViewDoc (fun () -> itemRefToTextType d |> List.singleton |> getDocFromTextTypes)\n                            match m with\n                            | Fixed    (pixel,    first) ->    fixedSplitter v pixel first   (getDoc l) (getDoc r)\n                            | Variable (min, value, max) -> variableSplitter v min value max (getDoc l) (getDoc r)\n                        )\n                    } |> run lytN\n            \n                    //defElement(lytN, n, \"button\", Seq.append [ AtAct(\"click\", ac) ] attrs, [ NdTextValL tx ])\n            \n                let initVal = \"-<InitValue>-\"\n            \n                let defVarM0      = Memoize.memoize defVar\n                let defVarM(l,n,i)= defVarM0(l,n,initVal) |>! fun v -> if v.Value = initVal then v.Set i\n                let defDocFM      = Memoize.memoize defDocF\n                let defActionM    = Memoize.memoize defAction\n                let defButtonM    = Memoize.memoize defButton\n                let defInputM     = Memoize.memoize defInput\n                let defTextAreaM  = Memoize.memoize defTextArea\n                let defElementM   = Memoize.memoize defElement\n                let defConcatM    = Memoize.memoize defConcat\n                let defViewJSM    = Memoize.memoize defViewJS\n                let defSplitterM  = Memoize.memoize defSplitter\n            \n                let generateEntries lytN =\n                    Seq.choose(function\n                        | n, EnVarDef( VarDef      v                         ) -> defVarM(lytN, n, v) |> AF.newVar n |> EntryVar |> Some\n                        | n, EnDocDef( DcSplitter (SplitterDef(v , m, l, r) )) -> defSplitterM(lytN, n, v , m, l, r) |> AF.newDoc  n |> EntryDoc    |> Some\n                        | n, EnDocDef( DcButton   (ButtonDef(  ac, ats, tx) )) -> defButtonM(  lytN, n, ac, ats, tx) |> AF.newDoc  n |> EntryDoc    |> Some\n                        | n, EnDocDef( DcInput    (InputDef(   v , ats    ) )) -> defInputM(   lytN, n, v , ats    ) |> AF.newDoc  n |> EntryDoc    |> Some\n                        | n, EnDocDef( DcTextArea (TextAreaDef(v , ats    ) )) -> defTextAreaM(lytN, n, v , ats    ) |> AF.newDoc  n |> EntryDoc    |> Some\n                        | n, EnDocDef( DcConcat   (ConcatDef            ds  )) -> defConcatM(  lytN, n,          ds) |> AF.newDoc  n |> EntryDoc    |> Some\n                        | n, EnDocDef( DcElement  (ElementDef( el, ats, ds) )) -> defElementM( lytN, n, el, ats, ds) |> AF.newDoc  n |> EntryDoc    |> Some\n                        | n, EnDocDef( DcDocF     (DocFDef(    dc,      ds) )) -> defDocFM(    lytN, n, dc,      ds) |> AF.newDocF n |> EntryDoc    |> Some\n                        | n, EnActDef( ActDef               (  ac, parms  )  ) -> defActionM(  lytN, n, ac, parms  ) |> AF.newActF n |> EntryAction |> Some\n                        | n, EnViwDef( ViwDef                      parms     ) -> defViewJSM(  lytN, n,     parms  ) |> AF.newViw  n |> EntryView   |> Some\n                        | _ -> None\n                    )\n            \n                let parseNewLayout lytN =\n                    LayoutEngine.parseEntries lytN\n                    >> Seq.choose(function Ok p  -> Some p | Error m -> print m ; None)\n                    >> generateEntries lytN\n            \n                let addLayout (lyt:LayoutEngine) =\n                    let parseW      = lyt.lytDefinition.View |> View.Map (LayoutEngine.parseEntries lyt.lytName)\n                    let errorsW     = parseW |> View.Map(Seq.choose(function Error msg -> Some msg |_-> None) >> String.concat \"\\n\")\n                    let defsW       = parseW |> View.Map(Seq.choose(function Ok    def -> Some def |_-> None) >> generateEntries (UoM.Tag lyt.lytName))\n                    let entries     = [ AF.newVar \"Layout\"    lyt.lytDefinition |> EntryVar\n                                        AF.newViw \"ParseMsgs\" errorsW           |> EntryView ]\n                    defsW |> View.Sink( Seq.append entries >> refreshEntries (UoM.Untag<_> lyt.lytName) )\n            \n            \n            module DragDrop =\n            \n                type DragInfo = \n                    | DragNone\n                    | DragNode of Guid<SnippetId>\n                \n                let mutable drag        = DragNone\n                let setDragNone ()      = drag <- DragNone\n                let setDragNode tnid    = drag <- DragNode tnid\n                let getDragNIdO tnId    = \n                    match drag with \n                    | DragNode dnid when dnid <> tnId -> Some dnid \n                    | _ -> None\n                \n                let [< Inline >] inline moveItem dropId elems getId item =\n                    elems\n                    |> Seq.filter (getId >> ((<>) (getId item)) )\n                    |> Seq.toArray\n                    |> (fun s -> let fst, snd =  s |> Array.splitAt (s |> Array.findIndex (getId >> ((=) dropId)) )\n                                 [fst ; [| item |] ; snd])\n                    |> Seq.collect id\n                    |> Seq.toArray\n                \n                let [< Inline >] inline value (x: ^T)   = (^T : (member Value : #seq<'U>        )  x    )\n                let [< Inline >] inline set   (x: ^T) v = (^T : (member Set   : #seq<'U> -> unit) (x, v))\n                \n                let [< Inline >] inline moveItemInListModel dropId lm getId itemO = itemO |> Option.iter( moveItem dropId (value lm) getId >> (set lm) )\n            \n            module SnippetsUI =\n                //open FsRoot\n                open Library.UoM\n                open WebSharper.JavaScript\n                open Html\n                open WebSharper.UI.Templating\n            \n                [< Literal >] \n                let TemplateFileName =  @\"D:\\Abe\\CIPHERWorkspace\\FSharpStation\\website\\Templates.html\"\n                type Templates       = Templating.Template<TemplateFileName, ClientLoad.FromDocument, ServerLoad.WhenChanged, LegacyMode.New>\n            \n                let snippetsLM       = ListModel.Create (fun e -> e.snpId) []\n                let collapsedV       = Var.Create Set.empty\n                let codeSnippetIdV   = Var.Create (None : Guid<SnippetId> option)\n                let searchFor        = Var.Create \"\"\n            \n                let allPredecessors  = Snippet.allPredecessors        snippetsLM.TryFindByKey\n                let indPredIds       = Snippet.indirectPredecessorIds snippetsLM.TryFindByKey\n                //let getLevel         = Snippet.getLevel               snippetsLM.TryFindByKey\n                //let hasChildren      = Snippet.hasChildren            (fun () -> snippetsLM.Value)\n                let allCodePredsW    = V (  match codeSnippetIdV.V with \n                                            | None      -> Set.empty \n                                            | Some sid  ->\n                                            match snippetsLM.TryFindByKey sid with \n                                            | None      -> Set.empty\n                                            | Some snp  -> allPredecessors snp )\n                let allCodePredIdsW  = V ( allCodePredsW.V |> Seq.map (fun snp -> snp.snpId) )\n            \n                type SnippetHierData = {\n                    level       : int\n                    pos         : int\n                    hasChildren : bool\n                    visible     : bool\n                    path        : Guid<SnippetId> []\n                    errorO      : string option\n                }\n                let shdDef = {\n                    level       = 0\n                    pos         = 0\n                    hasChildren = false\n                    visible     = true\n                    path        = [||]\n                    errorO      = None\n                }\n            \n                let processHier (snps: (Guid<SnippetId> * (Guid<SnippetId> option)) []) collapsed =\n                    let  dSnps            = System.Collections.Generic.Dictionary()\n                    let  mutable path     = [||]\n                    let  mutable collapse = 0\n                    for k, (sid, pidO) in Seq.indexed snps do\n                        let lvl, pth, errO =\n                            match pidO with\n                            | None      -> 0, [||], None\n                            | Some pid  ->\n                            match path  |> Seq.indexed |> Seq.tryFind (fun (_, spid) -> spid = pid) with\n                            | None      -> 0, [||], Some (sprintf \"Parent not found in path %A\" pid)\n                            | Some(j,p) -> (j + 1), path.[0..j], None\n                        dSnps.Add(sid,  {\n                            level       = lvl\n                            pos         = k\n                            hasChildren = snps |> Seq.tryItem (k + 1) |> Option.map (snd >> ((=) (Some sid))) |> Option.defaultValue false\n                            visible     = collapse >= lvl\n                            path        = pth\n                            errorO      = errO\n                        })\n                        path <- Array.append pth [| sid |]\n                        if  collapse >= lvl then\n                            collapse <- if collapsed |> Set.contains sid then lvl else lvl + 1\n                    dSnps\n            \n                let snpIdParentsW         = V(snippetsLM.View.V |> Seq.map (fun snp -> snp.snpId, snp.snpParentIdO) |> Seq.toArray)\n                                            |> View.consistent\n            \n                let processHierW          = View.Do {\n                    let! snps             = snpIdParentsW\n                    let! collapsed        = collapsedV.View\n                    return processHier snps collapsed\n                }\n            \n                let docWrap wrapper (doc:Doc) : Doc = doc |> Seq.singleton |> wrapper Seq.empty\n            \n                let moveNode frid toid =\n                    processHierW\n                    |> View.Get (fun hier ->\n                        match Dict.tryGetValue frid hier, Dict.tryGetValue toid hier, snippetsLM.TryFindByKey frid, snippetsLM.TryFindByKey toid with\n                        | Some frdt, Some todt, Some frsn, Some tosn ->\n                            if Seq.contains frid todt.path then () else\n                            let elems = snippetsLM.Value |> Seq.toArray\n                            let rec nextPos i =\n                                match Array.tryItem (i + 1) elems with\n                                | None     -> i\n                                | Some snp ->\n                                match Dict.tryGetValue snp.snpId hier with\n                                | None     -> i\n                                | Some shd ->\n                                if   Seq.contains frid shd.path \n                                then nextPos (i + 1)\n                                else i\n                            let n = nextPos frdt.pos\n                            let newSn = { frsn with snpParentIdO = tosn.snpParentIdO }\n                            if frdt.pos < todt.pos\n                            then [| elems.[0..frdt.pos-1] ; elems.[n+1..todt.pos-1] ; [| newSn |] ; elems.[frdt.pos+1..n] ; elems.[todt.pos..                          ] |]\n                            else [| elems.[0..                          todt.pos-1] ; [| newSn |] ; elems.[frdt.pos+1..n] ; elems.[todt.pos..frdt.pos-1] ; elems.[n+1..] |]\n                            |> Array.concat\n                            |> snippetsLM.Set\n                        |_->()\n                    )\n            \n                let calcUI wrapper allowDelete (lmd:AF.ListModelData<_,Snippet>) =\n                    let curW = V(lmd.CurrentV.V.snpId, lmd.CurrentV.V.snpParentIdO, lmd.CurrentV.V.snpPredIds) |> View.consistent\n                    let indSelPredIdsW = V ( indPredIds curW.V)\n                    fun (k:View<_ option>) (snp:Var<Snippet>) ->\n                        let disabledW = V (Option.isNone k.V )\n                        let snpdW     = V (processHierW.V |> Dict.tryGetValue snp.V.snpId |> Option.defaultValue shdDef)\n                        Templates.Snippet()\n                            .Name(          (if Option.isNone snpdW.V.errorO then id else sprintf \"!%s\") snp.V.snpName     )\n                            .Selected(      if lmd.selV.V = k.V then \"selected\" else \"\"                           )\n                            .Predecessor(   match k.V with \n                                            | None     -> \"\"\n                                            | Some key ->\n                                            if lmd.CurrentV.V.snpPredIds |> Seq.contains key then \"direct-predecessor\" \n                                            elif indSelPredIdsW .V       |> Seq.contains key then \"indirect-predecessor\" \n                                            elif allCodePredIdsW.V       |> Seq.contains key then \"included-predecessor\" \n                                                                                             else \"\"              \n                                            + if codeSnippetIdV.V = k.V  then \" codeSnippet\" else \"\"              )\n                            .Select(        fun _ -> View.Get lmd.selV.Set k                                      )\n                            .Indent(        string (1.5 * float snpdW.V.level )                                   )\n                            .Parent(        if snpdW.V.hasChildren then \n                                               (if collapsedV.V |> Set.contains snp.V.snpId then \"collapsed\" \n                                                                                            else \"expanded\" )\n                                                                                            else \"\"               )\n                            .ToggleCollapse(fun _ -> \n                                            snpdW \n                                            |> View.Get (fun snpd ->\n                                                if snpd.hasChildren then\n                                                    (if collapsedV.Value |> Set.contains snp.Value.snpId \n                                                        then Set.remove\n                                                        else Set.add )   \n                                                            snp.Value.snpId collapsedV.Value \n                                                    |> collapsedV.Set)                                            )\n                            .Drag(          fun ev -> k |> View.Get (function None -> () |Some sid ->     DragDrop.setDragNode sid            ; ev.Event.StopPropagation()   ) )\n                            .DragOver(      fun ev -> k |> View.Get (function None -> () |Some sid -> if (DragDrop.getDragNIdO sid).IsSome then ev.Event.PreventDefault ()   ) )\n                            .Drop(          fun ev -> do ev.Event.PreventDefault () \n                                                      k |> View.Get (function None -> () |Some sid ->     DragDrop.getDragNIdO sid |> Option.iter(fun fr -> moveNode fr sid) ) )\n                            .Doc()\n                        |> docWrap wrapper\n            \n                let search = View.Do {\n                    let! processHier    = processHierW\n                    let  visibleF snp = processHier |> Dict.tryGetValue snp.snpId |> Option.map (fun d -> d.visible) |> Option.defaultValue true\n                    let! sr = searchFor.View\n                    if   sr = \"\"  then return visibleF else\n                    let! allCodePredIds = allCodePredIdsW\n                    let! codeSnippetId  = codeSnippetIdV.View\n                    let  enProjecto snp = (codeSnippetId = Some snp.snpId || allCodePredIds |> Seq.contains snp.snpId) && visibleF snp\n                    if   sr = \".\" then return enProjecto else\n                    return fun (snp:Snippet) -> snp.snpName.Contains sr || snp.snpContent.Contains sr\n                }\n            \n                let wrapNothing _ = Doc.Concat\n            \n                let snippetList = \n                    LM.getDocFor snippetsLM Snippet.defaultSnippet (fun () -> Snippet.New \"\" \"\" None) (Some search) (calcUI wrapNothing true )\n            \n                snippetList.selV.View |> View.Sink(function \n                    | None     -> ()\n                    | Some sid ->\n                    allCodePredIdsW \n                    |> View.Get (fun allCodePredIds ->\n                        if codeSnippetIdV.Value <> Some sid then\n                            if allCodePredIds |> Seq.contains sid |> not then\n                                codeSnippetIdV.Set (Some sid))\n                )\n            \n                let currentSnippetV        = snippetList.CurrentV.Lens id (fun _ -> id)\n                let currentSnippetNameV    = Lens (currentSnippetV.V.snpName    )\n                let currentSnippetContentV = Lens (currentSnippetV.V.snpContent )\n            \n                let curSnp = AF.plugin {\n                    var  \"name\"    currentSnippetNameV\n                    var  \"content\" currentSnippetContentV\n                }\n            \n                module SaveLoad =\n                    open WebSharper.JavaScript\n            \n                    let loadTextFile element  =\n                        FileList.OfElement element\n                        |> fun files ->\n                            if files.Length > 0 then\n                                let reader = TextFileReader()\n                                reader.Onload <- fun e -> \n                                    try         e.Target?result\n                                                |> Serializer.deserializeWithDefs SnippetSerialize.serModel\n                                                |> Option.iter (fun m -> \n                                                    snippetsLM.Set m.snippets\n                                                    collapsedV.Set m.collapsed\n                                                    )\n                                    with e ->   JS.Alert <| e.ToString()\n                                                printfn \"%A\" e\n                                files.[0] \n                                |> reader.ReadAsText\n            \n                    open WebSharper.Core.Resources\n                    type SaveAsResources() =\n                        inherit BaseResource(@\"/EPFileX/FileSaver/FileSaver.js\")\n            \n                    [< Require(typeof<SaveAsResources>) >]\n                    [< Inline \"saveAs(new Blob([$_txt], {type: 'text/plain;charset=utf-8'}), $_name)\" >]\n                    let saveAsJavaScript (_name:string) (_txt:string) = ()\n            \n                    let saveAs() = \n                        let name = \"noname.snippets\" \n                        (snippetsLM.Value, System.DateTime.Now, collapsedV.Value)\n                        |> SnippetSerialize.getModel\n                        |> fst SnippetSerialize.serModel\n                        |> saveAsJavaScript name\n                        //Snippets.updateGeneration()\n            \n                let selectorLensGuidId sel = Util.selectorLens (fun (v:Guid<SnippetId>) -> v.ToString()) (ParseO.parseGuidO >> Option.map UoM.Tag) sel\n            \n                module AF = AppFramework\n            \n                let monacoNew (var : Var<string> ) =\n                    MonacoGenAdapter.newVar JSObject JSObject var\n                    |> GenEditor.onRender(fun ged ->\n                        ged.editorO\n                        |> Option.iter (fun ed -> Monaco.Editor.SetModelLanguage(ed.GetModel(), \"fsharp\") )\n                        Monaco.Editor.SetTheme(\"vs-dark\")\n                    )\n            \n                let monaco = { monacoNew (Lens (currentSnippetV.V.snpContent)) with \n                                annotations    = View.Const (seq[])\n                                toolTip        = None\n                                declaration    = None\n                                autoCompletion = None\n                            }\n            \n                let addSnippet () =\n                    processHierW\n                    |> View.Get (fun hier ->\n                        let elems = snippetsLM.Value |> Seq.toArray // needs to be before snippetList.add()\n                        let newS  = snippetList.add ()\n                        let sid   = currentSnippetV.Value.snpId\n                        match Dict.tryGetValue sid hier with\n                        | None     -> ()\n                        | Some hdt ->\n                        let rec nextPos i =\n                            match Array.tryItem (i + 1) elems with\n                            | None     -> i\n                            | Some snp ->\n                            match Dict.tryGetValue snp.snpId hier with\n                            | None     -> i\n                            | Some shd ->\n                            if   Seq.contains sid shd.path \n                            then nextPos (i + 1)\n                            else i\n                        let n = nextPos hdt.pos\n                        Array.concat [| elems.[0..n] ; [| { newS with snpParentIdO = currentSnippetV.Value.snpParentIdO } |] ; elems.[n+1..] |]\n                        |> snippetsLM.Set\n                    )\n            \n                let deleteSnippet () =\n                    processHierW\n                    |> View.Get (fun hier ->\n                        let sid  = currentSnippetV.Value.snpId\n                        let pidO = currentSnippetV.Value.snpParentIdO\n                        match Dict.tryGetValue sid hier with\n                        | None     -> ()\n                        | Some hdt ->\n                        let elems = snippetsLM.Value |> Seq.toArray\n                        let rec nextPos i =\n                            match Array.tryItem i elems with\n                            | None     -> ()\n                            | Some snp ->\n                            if   snp.snpParentIdO = Some sid then\n                                elems.[i] <- { snp with snpParentIdO = pidO }\n                                nextPos (i + 1)\n                            else\n                            match Dict.tryGetValue snp.snpId hier with\n                            | None     -> ()\n                            | Some shd ->\n                            if  Seq.contains sid shd.path \n                            then nextPos (i + 1)\n                            else ()\n                        nextPos (hdt.pos + 1)\n                        Array.concat [| elems.[0..hdt.pos-1] ; elems.[hdt.pos+1..] |]\n                        |> snippetsLM.Set\n                    )\n            \n                let indentIn () =\n                    processHierW\n                    |> View.Get (fun hier ->\n                        hier \n                        |> Dict.tryGetValue currentSnippetV.Value.snpId\n                        |> Option.iter(fun hdt ->\n                            let pidO = currentSnippetV.Value.snpParentIdO\n                            let rec newParentO i =\n                                if i = 0 then None else\n                                let snp = Seq.item (i - 1) snippetsLM.Value\n                                if  Some snp.snpId  = pidO then None           else\n                                if snp.snpParentIdO = pidO then Some snp.snpId else\n                                newParentO (i - 1)\n                            newParentO hdt.pos\n                            |> Option.iter(fun pid -> (Lens (currentSnippetV.V.snpParentIdO)).Set (Some pid) )\n                        )\n                    )\n            \n                let indentOut () =\n                    processHierW\n                    |> View.Get (fun hier ->\n                        let sid = currentSnippetV.Value.snpId\n                        match Dict.tryGetValue sid hier, currentSnippetV.Value.snpParentIdO with\n                        | Some hdt, Some pid ->\n                            let newPidO = hdt.path |> Seq.tryItem (hdt.path.Length - 2)\n                            if Some pid <> newPidO then\n                                (Lens (currentSnippetV.V.snpParentIdO)).Set newPidO\n                                let elems = snippetsLM.Value |> Seq.toArray\n                                let rec nextPosO k i =\n                                    match Array.tryItem (i + 1) elems with\n                                    | None     -> None\n                                    | Some snp ->\n                                    match Dict.tryGetValue snp.snpId hier with\n                                    | None     -> None\n                                    | Some shd ->\n                                    if   Seq.contains sid shd.path then nextPosO (i + 1) (i + 1)\n                                    elif Seq.contains pid shd.path then nextPosO k       (i + 1)\n                                    else Some(k, i)\n                                match nextPosO hdt.pos hdt.pos with\n                                | None      -> ()\n                                | Some(a,b) ->\n                                Array.concat[| elems.[0..hdt.pos-1] ; elems.[a+1..b] ; elems.[hdt.pos..a] ; elems.[b+1..] |]\n                                |> snippetsLM.Set\n                        |_->()\n                    )\n            \n                let parseW =\n                    currentSnippetContentV.View\n                    |> View.Map (\n                        LayoutEngine.parseEntries \"lytTarget\"\n                        >> Seq.choose (function Error msg -> Some msg |_-> None)\n                        >> String.concat \"\\n\"\n                    )\n            \n                let target2 = LayoutEngine.newLyt \"lytTarget2\" \"\"\n                \n                if IsClient then NewLY.addLayout target2\n            \n                let parseNewLY () = currentSnippetContentV.View |> View.Get target2.lytDefinition.Set\n            \n                AF.plugin {\n                    plgName   \"Snippets\"\n                    plgVar    \"searchFor\"      searchFor\n                    plgView   \"parseOut\"       parseW\n                    plgDoc    \"editor\"        (lazy (div [] [ monaco |> GenEditor.generateDoc ]) )\n                    plgMerge  \"snippets_\"     (snippetList.PlugIn selectorLensGuidId  )\n                    plgMerge  \"curSnp_\"        curSnp\n                    plgAct    \"LoadSnippets\"  (fun () -> SaveLoad.loadTextFile (JS.Document.GetElementById \"LoadSnippets\")?firstElementChild?firstElementChild?firstElementChild?firstElementChild )\n                    plgAct    \"SaveSnippets\"             SaveLoad.saveAs\n                    plgAct    \"IndentIn\"       indentIn\n                    plgAct    \"IndentOut\"      indentOut\n                    plgAct    \"AddSnippet\"     addSnippet\n                    plgAct    \"DeleteSnippet\"  deleteSnippet\n                    plgAct    \"ParseNewLY\"     parseNewLY\n                }\n                |> AF.addPlugIn2\n            \n                LayoutEngine.newLyt \"lytTarget\" \"\"\"\n            main horizontal 10-50-70 part1 part2\n            \n            part1 div \"\" \n            : h1 \"\" \"Demo123 \" message\n            :: div \"\" \"Message:\"\n            :: textarea message \"height:200px;width:500px\"\n            \n            part2 div \"\" lytTarget.Layout\n            \n            message Var \"Hello\"     \n                \"\"\"\n                |> LayoutEngine.addLayout0\n            \n                LayoutEngine.newLyt \"SnippetsLyt\" \"\"\"\n                    split horizontal 0-50-100 AppFramework.AppFwkClient main\n                    main vertical 0-25-100 list snippet\n                    SearchFor   Doc InputLabel \"\" \"Search\" Snippets.searchFor\n                    File        Doc InputFile  \"id=LoadSnippets\" \"Open File\" Snippets.LoadSnippets \"\"\n                    list div \"display: flex;flex-direction: column\" File\n                    : button \"click=@{Snippets.AddSnippet}\"    \"Add New Snippet\"\n                    : button \"click=@{Snippets.DeleteSnippet}\" \"Delete Snippet\"\n                    : button \"click=@{Snippets.IndentIn}\"      \"Indent in\"\n                    : button \"click=@{Snippets.IndentOut}\"     \"Indent out\"\n                    : div    \"\" SearchFor \n                    : div \"overflow:auto;width:100%;max-width:100%\" Snippets.snippets_list\n                    snippet div \"display: flex;flex-direction: column\"\n                    : div    \"\" Snippets.snippets_sel\n                    : Doc    InputLabel \"\" \"Name:\" Snippets.curSnp_name\n                    : div \"height:100%;class=relative\" Snippets.editor                \n                \"\"\"  ///// THERE IS a BUG HERE: if THERE IS NO SPACE after SearchFor then it just shows: SearchFor as if it were a text\n                |> LayoutEngine.addLayout0\n            \n                LayoutEngine.newLyt \"lytDemo\" \"\"\"\n            AF PlugIn\n            : Doc Select\n            : Action SetVar\n            : Doc TrigAction\n            : Doc InputLabel\n            \n            Snippets PlugIn\n            : Var snippets_sel\n            : Var curSnp_content\n            : Var curSnp_name\n            : Var searchFor\n            : Action IndentOut\n            : Action IndentIn\n            : Doc snippets_list\n            : Action AddSnippet\n            : Action DeleteSnippet\n            : Action ParseNewLY\n            : Action LoadSnippets\n            : Action SaveSnippets\n            : Doc editor\n            \n            lytTarget2 PlugIn\n            : Var ParseMsgs\n            : Doc main \n            \n            editorDataSel Var \"\"\n            \n            target    View \"n => n.includes('main ')?n:'main Concat \"\" \"\"'\" Snippets.curSnp_content\n            \n            SetTarget Action AF.SetVar     \"lytTarget2.Layout\"        target\n            SetMain2  Action AF.SetVar     \"AppFramework.mainDocV\"    \"lytDemo.main2\"\n            SetMain   Action AF.SetVar     \"AppFramework.mainDocV\"    \"lytDemo.main\"\n            \n            Trigger   Doc    AF.TrigAction Snippets.snippets_sel \"lytDemo.SetTarget\"\n            \n            gotoMain  button \"click=@{SetMain};width:16px\" \"<<\"\n            gotoMain2 button \"click=@{SetMain2};width:16px\" \">>\"\n            \n            SearchFor   Doc AF.InputLabel \"\" \"Search\" Snippets.searchFor\n            \n            buttons ul \"\"\n            : div \"margin:3px\"\n            :: button \"click=@{Snippets.IndentOut};title=indent out\"     \"<--\"\n            :: button \"click=@{Snippets.IndentIn};title=indent in\"       \"--> \"\n            \n            File span \"class=input-group;margin:5px;id=LoadSnippets\"\n            : div \"class=input-group-btn\"\n            :: label \"class=btn btn-info\" \"Load File\"\n            ::: div \"\"\n            :::: input \"class=form-control;type=file;display: none;change=@{Snippets.LoadSnippets}\" \n            :: label \"class=btn btn-primary;click=@{Snippets.SaveSnippets}\" \"Save File\"\n            \n            list div \"display: flex;flex-direction: column\" gotoMain File\n            : div    \"margin:5px\" SearchFor \n            : Concat buttons\n            : div \"overflow:auto;width:100%;max-width:calc(100% - 10px)\" Snippets.snippets_list\n            : ul \"margin:3px\"\n            :: button \"click=@{Snippets.AddSnippet}   ;title=Add New Snippet\" \"+\"\n            :: button \"margin-left:20px;click=@{Snippets.DeleteSnippet};title=Delete  Snippet\" \"x\"\n            \n            snippet div \"display: flex;flex-direction: column;flex:1\" Trigger\n            : button \"click=@{SetTarget}\"  \"Apply\"\n            : button \"click=@{Snippets.ParseNewLY}\" \"Apply NewLY\"\n            : div    \"click=@{SetTarget}\" Snippets.snippets_sel\n            : Doc    AF.InputLabel \"\" \"Name:\" Snippets.curSnp_name\n            : Doc    AF.Select \"\" \"<Content>\" \"Values\" editorDataSel\n            : div \"height:100%;class=relative;flex:1\" Snippets.editor\n            : textarea   lytTarget2.ParseMsgs \"height:7em\"\n            \n            Left2 vertical 0-25-100 list snippet\n            main2 vertical 0-50-100 Left2 lytTarget2.main            \n                \n            Left div \"display:flex;flex-direction:column\" gotoMain2 snippet\n            main vertical 0-50-100 Left lytTarget2.main\n                \"\"\"\n                |> NewLY.addLayout\n            \n                AF.mainDocV.Set \"lytDemo.main2\"\n            \n                [< SPAEntryPoint >]\n                let main() =\n                    do (StartAppFramework.startWithHtmlD \n                        |> Depend.resolver [\n                            \"AppFrameworkTemplate.html\", AppFrameworkTemplate.html + SnippetTemplates.html\n                        ]) ()\n            ", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Provides balanced binary search tree operations.\n[<JavaScript>]\nmodule internal BalancedTree =\n\n    /// Represents a binary balanced search tree, preserving the balance\n    /// invariant: the heights of the branches differ by at most 1.\n    type Tree<'T when 'T : comparison> =\n        private {\n            Node    : 'T\n            Left    : Tree<'T>\n            Right   : Tree<'T>\n            Height  : int\n            Count   : int\n        }\n\n    [<Inline \"null\">]\n    let Empty<'T when 'T : comparison> = X<Tree<'T>>\n\n    [<Inline \"$tree == null\">]\n    let IsEmpty (tree: Tree<'T>) = X<bool>\n\n    [<Inline \"$tree == null ? 0 : $tree.Height\">]\n    let Height (tree: Tree<'T>) = X<int>\n            \n    [<Inline \"$tree == null ? 0 : $tree.Count\">]\n    let Count (tree: Tree<'T>) = X<int>\n\n    [<Inline \"$t.Left\">]\n    let Left (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Right\">]\n    let Right (t: Tree<'T>) = X<Tree<'T>>\n\n    [<Inline \"$t.Node\">]\n    let Node (t: Tree<'T>) = X<'T>\n\n    let Branch node left right =\n        {\n            Node    = node\n            Left    = left\n            Right   = right\n            Height  = 1 + max (Height left) (Height right)\n            Count   = 1 + Count left + Count right\n        }\n\n    let Enumerate flip (t: Tree<'T>) : seq<'T> =\n        let rec gen (t, spine: list<'T * Tree<'T>>) =\n            if IsEmpty t then\n                match spine with\n                | []                    -> None\n                | (t, other) :: spine   -> Some (t, (other, spine))\n            else\n                if flip\n                then gen (Right t, (Node t, Left t) :: spine)\n                else gen (Left t, (Node t, Right t) :: spine)\n        Seq.unfold gen (t, [])\n\n    /// Traverses the tree in ascending order.\n    [<Inline>]\n    let Ascend t = Enumerate false t\n\n    /// Traverses the tree in descending order.\n    [<Inline>]\n    let Descend t = Enumerate true t\n\n    /// Builds a tree from sorted input and the indices of the\n    /// first and the last elements to include.\n    let rec private Build (data: 'T []) min max : Tree<'T> =\n        let sz = max - min + 1\n        if sz <= 0 then\n            Empty\n        else\n            let center = (min + max) / 2\n            let left   = Build data min (center - 1)\n            let right  = Build data (center + 1) max\n            Branch data.[center] left right\n\n    /// Quickly constructs a tree from a sorted, distinct array.\n    [<Inline>]\n    let OfSorted (data: 'T []) : Tree<'T> =\n        Build data 0 (Array.length data - 1)\n\n    let OfSeq (data: seq<'T>) : Tree<'T> =\n        let a = Seq.toArray (Seq.distinct data)\n        Array.sortInPlace a\n        OfSorted a\n\n    [<Inline \"$x.unshift($y)\">]\n    let private unshift (x: 'T) y = X<unit>\n\n    /// Unzips a tree into a matching node and a spine.\n    let Lookup (k: 'T) (t: Tree<'T>) =\n        let mutable spine = [||]\n        let mutable t = t\n        let mutable loop = true\n        while loop do\n            if IsEmpty t then loop <- false else\n                match compare k t.Node with\n                | 0 -> loop <- false\n                | 1 ->\n                    unshift spine (true, t.Node, t.Left)\n                    t <- t.Right\n                | _ ->\n                    unshift spine (false, t.Node, t.Right)\n                    t <- t.Left\n        (t, spine)\n\n    /// Rebuilds an unzipped tree by going up the spine and performing\n    /// rotations where necessary for balance.\n    let private Rebuild<'T when 'T : comparison>\n            (spine: (bool * 'T * Tree<'T>) []) (t: Tree<'T>) : Tree<'T> =\n        let h (x: Tree<'T>) = Height x\n        let mutable t = t\n        for i = 0 to spine.Length - 1 do\n            t <- (\n                match spine.[i] with\n                | false, x, r ->\n                    if h t > h r + 1 then\n                        if h t.Right = h t.Left + 1 then\n                            // Double rotation:\n                            let m = t.Right\n                            Branch  m.Node\n                                    (Branch t.Node t.Left m.Left)\n                                    (Branch x m.Right r)\n                        else\n                            // Single rotation:\n                            Branch  t.Node\n                                    t.Left\n                                    (Branch x t.Right r)\n                    else\n                        // No rotation:\n                        Branch x t r\n                | true, x, l ->\n                    if h t > h l + 1 then\n                        if h t.Left = h t.Right + 1 then\n                            // Double rotation:\n                            let m = t.Left\n                            Branch m.Node\n                                    (Branch x l m.Left)\n                                    (Branch t.Node m.Right t.Right)\n                        else\n                            // Single rotation:\n                            Branch t.Node\n                                    (Branch x l t.Left)\n                                    t.Right\n                    else\n                        // No rotation:\n                        Branch x l t\n            )\n        t\n\n    /// Inserts or updates a node in the tree. If a matching node is found,\n    /// it is replaced with the value of \"combine old new\".\n    let Put<'T when 'T : comparison> combine k (t: Tree<'T>) : Tree<'T> =\n        let (t, spine) = Lookup k t\n        if IsEmpty t then\n            Rebuild spine (Branch k Empty Empty)\n        else\n            Rebuild spine (Branch (combine t.Node k) t.Left t.Right)\n\n    /// Removes a node from the tree.\n    let Remove k (src: Tree<'T>) =\n        let (t, spine) = Lookup k src\n        if IsEmpty t then\n            src\n        else\n            if IsEmpty t.Right then\n                Rebuild spine t.Left\n            elif IsEmpty t.Left then\n                Rebuild spine t.Right\n            else\n                Seq.append (Ascend t.Left) (Ascend t.Right)\n                |> Seq.toArray\n                |> OfSorted\n                |> Rebuild spine\n\n    /// Adds a node into the tree, replacing an existing one if found.\n    let Add<'T when 'T : comparison> (x: 'T) (t: Tree<'T>) : Tree<'T> =\n        Put (fun _ x -> x) x t\n\n    /// Checks if a tree contains a given key.\n    let rec Contains (v: 'T) (t: Tree<'T>) : bool =\n        not (IsEmpty (fst (Lookup v t)))\n\n    /// Looks up a node by key.\n    let TryFind (v: 'T) (t: Tree<'T>) =\n        let x = fst (Lookup v t)\n        if IsEmpty x then None else Some x.Node\n\n\n\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\n\n/// Represents a key-value pair with comparison and equality\n/// ignoring the value and using only the key.\n[<CustomComparison>]\n[<CustomEquality>]\n[<JavaScript>]\ntype internal Pair<'K,'V when 'K : comparison> =\n    {\n        Key     : 'K\n        Value   : 'V\n    }\n\n    override this.GetHashCode() = hash this.Key\n\n    override this.Equals(other: obj) =\n        this.Key = (other :?> Pair<'K,'V>).Key\n\n    interface System.IComparable with\n        member this.CompareTo(other: obj) =\n            compare this.Key (other :?> Pair<'K,'V>).Key\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Collections\nmodule T = BalancedTree\n\n[<JavaScript>]\n[<AutoOpen>]\nmodule private MapUtil =\n\n    let fromSeq(s: seq<_>) =\n        let a : Pair<_,_> [] =\n            [| for (k, v) in Seq.distinctBy fst s ->\n                { Key = k; Value = v } |]\n        Array.sortInPlace a\n        T.OfSorted a\n\n/// Implements a proxy for the F# Map type.\n[<Name \"FSharpMap\">]\n[<Proxy(typeof<Map<_,_>>)>]\ntype internal FSharpMap<'K,'V when 'K : comparison>\n\n    (tree: T.Tree<Pair<'K,'V>>) =\n\n        new (s: seq<_>) = new FSharpMap<_,_>(fromSeq s)\n\n        member this.Tree = tree\n\n        member this.Add(k: 'K, v: 'V) : Map<'K,'V> =\n            As (FSharpMap<'K,'V>(tree |> T.Add {Key=k; Value=v}))\n\n        member this.ContainsKey k = \n            tree |> T.Contains {Key=k; Value = JS.Undefined}\n\n        member this.TryGetValue (k: 'K, r: byref<'V>) = \n            match this.TryFind k with\n            | Some v ->\n                r <- v\n                true\n            | _ ->\n                false\n\n        member this.Count = T.Count tree\n\n        member this.IsEmpty = T.IsEmpty tree\n\n        member this.Item \n            with get (k: 'K) : 'V =\n                match this.TryFind k with\n                | Some v    ->v\n                | None      ->\n                    failwith \"The given key was not present in the dictionary.\"\n\n        member this.Remove(k: 'K) : Map<'K,'V> =\n            As (FSharpMap(tree |> T.Remove {Key=k; Value=JS.Undefined}))\n\n        member this.TryFind(k: 'K) =\n            tree\n            |> T.TryFind {Key=k; Value=JS.Undefined}\n            |> Option.map (fun kv -> kv.Value)\n\n        member this.GetEnumerator() =\n            let s =\n                T.Ascend tree\n                |> Seq.map (fun kv ->\n                    new KeyValuePair<_,_>(kv.Key, kv.Value))\n            s.GetEnumerator()\n\n        override this.GetHashCode() =\n            hash (Seq.toArray this)\n\n        override this.Equals(other) =\n            let other = As<FSharpMap<'K,'V>> other\n            this.Count = other.Count\n            && Seq.forall2 ( = ) this other\n\n        interface System.IComparable with\n            member this.CompareTo other =\n                Seq.compareWith (fun x y ->\n                    compare (As<Pair<'K,'V>> x) (As<Pair<'K,'V>> y))\n                    this\n                    (As<Map<'K,'V>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n\n        interface IEnumerable<KeyValuePair<'K,'V>> with\n            member this.GetEnumerator() = this.GetEnumerator()\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Map module.\n[<Proxy \"Microsoft.FSharp.Collections.MapModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\n[<Name \"Map\">]\nmodule internal MapModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    let private ToTree (m: Map<'K,'V>) =\n        (As<FSharpMap<'K,'V>> m).Tree\n\n    [<Inline>]\n    let private OfTree (t: T.Tree<_>) : Map<'K,'V> =\n        As (new FSharpMap<'K,'V>(t))\n\n    [<Inline>]\n    let Add k v (m: Map<'K,'V>) : Map<'K,'V> = m.Add(k, v)\n\n    [<Inline>]\n    let ContainsKey k (m: Map<'K,'V>) : bool = m.ContainsKey k\n\n    [<Inline>]\n    let Empty<'K,'V when 'K : comparison> : Map<'K,'V> = new Map<_,_>([||])\n\n    let Exists (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : bool =\n        m |> Seq.exists (fun kv -> f kv.Key kv.Value)\n\n    let Filter (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> =\n        T.Ascend (ToTree m)\n        |> Seq.filter (fun kv -> f kv.Key kv.Value)\n        |> Seq.toArray\n        |> T.OfSorted\n        |> OfTree\n\n    [<Inline>]\n    let Find (k: 'K) (m: Map<'K,'V>) : 'V = m.[k]\n\n    let FindKey (f: 'K -> 'T -> bool) (m: Map<'K,'T>) : 'K =\n        m \n        |> Seq.pick (fun kv -> \n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    let rec Fold<'K,'V,'S when 'K : comparison>\n        (f: 'S -> 'K -> 'V -> 'S) (s: 'S) (m: Map<'K,'V>) : 'S =\n            T.Ascend (ToTree m)\n            |> Seq.fold (fun s kv -> f s kv.Key kv.Value) s\n\n    let rec FoldBack (f: 'K -> 'V -> 'S -> 'S) (m: Map<'K,'V>) (s: 'S) : 'S =\n        T.Descend (ToTree m)\n        |> Seq.fold (fun s kv -> f kv.Key kv.Value s) s\n\n    let rec ForAll (f: 'K -> 'V -> bool) (m: Map<'K, 'V>) : bool =\n        m |> Seq.forall (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    let IsEmpty (m: Map<'K, 'V>) : bool = m.IsEmpty\n\n    let rec Iterate (f: 'K -> 'V -> unit) (m: Map<'K, 'V>) : unit =\n        m |> Seq.iter (fun kv -> f kv.Key kv.Value)\n\n    let OfArray (a: ('K * 'V) []) : Map<'K,'V> =\n        a\n        |> Seq.map (fun (k, v) -> {Key = k; Value = v} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n    [<Inline>]\n    let OfList (kvs: list<'K * 'V>) : Map<'K,'V> = Map.ofSeq kvs\n\n    [<Inline>]\n    let OfSeq (s: seq<'K * 'V>) : Map<'K, 'V> =\n        Map.ofArray (Seq.toArray s)\n\n    let Partition (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : Map<'K,'V> * Map<'K,'V> =\n        let (x, y) =\n            Seq.toArray (T.Ascend (ToTree m))\n            |> Array.partition (fun kv -> f kv.Key kv.Value)\n        (OfTree (T.OfSorted x), OfTree (T.OfSorted y))\n\n    let Pick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : 'T =\n        m |> Seq.pick (fun kv -> f kv.Key kv.Value)\n\n    [<Inline>]\n    let Remove (k: 'K) (m: Map<'K, 'V>) : Map<'K, 'V> = m.Remove k\n\n    [<Inline>]\n    let ToArray (m: Map<'K, 'V>) : array<'K * 'V> = Seq.toArray (Map.toSeq m)\n\n    [<Inline>]\n    let ToList (m: Map<'K, 'V>) : list<'K * 'V> = Seq.toList (Map.toSeq m)\n\n    let ToSeq (m: Map<'K, 'V>) : seq<'K * 'V> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> (kv.Key, kv.Value))\n\n    let TryFind (k: 'K) (m: Map<'K, 'V>) : option<'V> = m.TryFind k\n\n    let TryFindKey (f: 'K -> 'V -> bool) (m: Map<'K,'V>) : option<'K> =\n        m |> Seq.tryPick (fun kv ->\n            if f kv.Key kv.Value then Some kv.Key else None)\n\n    let rec TryPick (f: 'K -> 'V -> option<'T>) (m: Map<'K, 'V>) : option<'T> =\n        m |> Seq.tryPick (fun kv -> f kv.Key kv.Value)\n         \n    let rec Map (f: 'K -> 'V -> 'T) (m: Map<'K,'V>) : Map<'K,'T> =\n        T.Ascend (ToTree m)\n        |> Seq.map (fun kv -> \n            {Key = kv.Key; Value = f kv.Key kv.Value} : Pair<_,_>)\n        |> T.OfSeq\n        |> OfTree\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nmodule T = BalancedTree\n\n/// Implements a proxy for the F# Set type.\n[<Name \"FSharpSet\">]\n[<Proxy(typeof<Set<_>>)>]\ntype private FSharpSet<'T when 'T : comparison>\n\n    internal (tree: T.Tree<'T>) =\n\n        new (s: seq<'T>) = new FSharpSet<'T>(T.OfSeq s)\n\n        member this.add(x: Set<'T>) =\n            Set.union (As this) x\n\n        member this.sub(x: Set<'T>) =\n            Set.difference (As this) x\n\n        member this.Add x : Set<'T> =\n            As (FSharpSet<'T>(T.Add x tree))\n\n        member this.Contains v = T.Contains v tree\n\n        member this.Count = T.Count tree\n\n        member this.IsEmpty = T.IsEmpty tree\n\n        member internal this.Tree = tree\n\n        member this.IsProperSubsetOf(s: Set<'T>) =\n            this.IsSubsetOf s && this.Count < s.Count\n\n        member this.IsProperSupersetOf(s: Set<'T>) =\n            this.IsSupersetOf s && this.Count > s.Count\n\n        member this.IsSubsetOf(s: Set<'T>) =\n            Seq.forall s.Contains this\n\n        member this.IsSupersetOf(s: Set<'T>) =\n            Seq.forall this.Contains s\n\n        member this.MaximumElement = Seq.head (T.Descend tree)\n\n        member this.MinimumElement = Seq.head (T.Ascend tree)\n\n        member this.Remove v : Set<'T> =\n            As (FSharpSet<'T>(T.Remove v tree))\n\n        member this.GetEnumerator() =\n            (T.Ascend tree).GetEnumerator()\n\n        static member (+) (x, y) : Set<'T> =\n            Set.union x y        \n\n        static member (-) (x, y) : Set<'T> =\n            Set.difference x y        \n\n        override this.GetHashCode() =\n            -1741749453 + ((Seq.toArray this).GetHashCode())\n\n        override this.Equals(other: obj) =\n            this.Count = (As<FSharpSet<'T>> other).Count\n            && Seq.forall2 ( = ) this (As<FSharpSet<'T>> other)\n\n        interface IEnumerable with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n\n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = this.GetEnumerator()\n\n        interface System.IComparable with\n            member this.CompareTo other =\n                Seq.compareWith compare this (As<FSharpSet<'T>> other)\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Implements a proxy for the F# Set module.\n[<Proxy \"Microsoft.FSharp.Collections.SetModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\n[<Name \"Set\">]\nmodule internal SetModule =\n    module T = BalancedTree\n\n    [<Inline>]\n    let private ToTree (s: Set<'T>) =\n        (As<FSharpSet<'T>> s).Tree\n\n    [<Inline>]\n    let private OfTree (t: T.Tree<'T>) =\n        As<Set<'T>> (new FSharpSet<'T>(t))\n\n    [<Inline>]\n    let Add v (s: Set<_>) = s.Add v\n\n    [<Inline>]\n    let Contains v (s: Set<_>) = s.Contains v\n\n    [<Inline>]\n    let Count (s: Set<_>) = s.Count\n\n    [<Inline>]\n    let Difference (s1: Set<_>) (s2: Set<_>) =\n        Set.filter (fun x -> not (s2.Contains x)) s1\n\n    [<Inline>]\n    let Empty<'T when 'T : comparison> : Set<'T> = OfTree T.Empty\n\n    [<Inline>]\n    let Exists f (s: Set<'T>) = Seq.exists f s\n\n    let Filter f (s: Set<'T>) =\n        OfTree (T.OfSorted (Seq.toArray (Seq.filter f s)))\n\n    [<Inline>]\n    let Fold<'T,'S when 'T : comparison>\n        (f: 'S -> 'T -> 'S) (x: 'S) (a: Set<'T>) =\n            Seq.fold f x a\n\n    let FoldBack (f: 'T -> 'S -> 'S) (a: Set<'T>) (s: 'S) : 'S =\n        Seq.fold (fun s x -> f x s) s (T.Descend (ToTree a))\n\n    [<Inline>]\n    let ForAll f (a: Set<_>) = Seq.forall f a\n\n    [<Inline>]\n    let Intersect (s1: Set<'T>) (s2: Set<'T>) = Set.filter s2.Contains s1\n\n    [<Inline>]\n    let IntersectMany (s: seq<Set<_>>) = Seq.reduce Set.intersect s\n\n    [<Inline>]\n    let IsEmpty (a: Set<_>) = a.IsEmpty\n\n    [<Inline>]\n    let IsProperSubset (a: Set<_>) b = a.IsProperSubsetOf b\n\n    [<Inline>]\n    let IsProperSuperset (a: Set<_>) b = a.IsProperSupersetOf b\n\n    [<Inline>]\n    let IsSubset (a: Set<_>) b = a.IsSubsetOf b\n\n    [<Inline>]\n    let IsSuperset (a: Set<_>) b = a.IsSupersetOf b\n\n    [<Inline>]\n    let Iterate f (s: Set<_>) = Seq.iter f s\n\n    [<Inline>]\n    let Map f (s: Set<_>) = Set.ofSeq (Seq.map f s)\n\n    [<Inline>]\n    let MaxElement (s: Set<_>) = s.MaximumElement\n\n    [<Inline>]\n    let MinElement (s: Set<_>) = s.MinimumElement\n\n    [<Inline>]\n    let OfArray (a: 'T []) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    let OfList (a: list<'T>) = OfTree (T.OfSeq a)\n\n    [<Inline>]\n    let OfSeq (a: seq<'T>) = OfTree (T.OfSeq a)\n\n    let Partition f (a: Set<_>) =\n        let (x, y) = Array.partition f (Seq.toArray a)\n        (Set.ofArray x, Set.ofArray y)\n\n    [<Inline>]\n    let Remove v (a: Set<_>) = a.Remove v\n\n    [<Inline>]\n    let Singleton x = Set.add x Set.empty\n\n    [<Inline>]\n    let ToArray (a: Set<_>) = Seq.toArray a\n\n    [<Inline>]\n    let ToList (a: Set<_>) = Seq.toList a\n\n    [<Inline>]\n    let ToSeq (a: Set<_>) : seq<_> = a :> _\n\n    [<Inline>]\n    let Union (s1: Set<_>) (s2: Set<_>) =\n        Set.ofSeq (Seq.append s1 s2)\n\n    [<Inline>]\n    let UnionMany (sets: seq<Set<_>>) =\n        Set.ofSeq (Seq.concat sets)\n\n\n\n\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.ResizeArray\n\nopen WebSharper\nopen WebSharper.JavaScript\ntype private IComparer<'T> = System.Collections.Generic.IComparer<'T>\n\n[<Name \"WebSharper.Collections.ListEnumerator\">]\n[<Proxy(typeof<System.Collections.Generic.List.Enumerator<_>>)>]\ntype ResizeArrayEnumeratorProxy<'T> [<JavaScript>] (arr: 'T[]) =\n    let mutable i = -1\n\n    [<JavaScript>] \n    member this.MoveNext() =\n        i <- i + 1\n        i < arr.Length\n\n    [<JavaScript>] \n    member this.Current with get() = arr.[i]\n\n    interface System.Collections.IEnumerator with\n        [<JavaScript>] \n        member this.MoveNext() = this.MoveNext()\n        [<JavaScript>]\n        member this.Current with get() = box (arr.[i])\n        member this.Reset() = failwith \"IEnumerator.Reset not supported\"\n\n    interface System.Collections.Generic.IEnumerator<'T> with\n        [<JavaScript>]\n        member this.Current with get() = arr.[i]\n\n    interface System.IDisposable with\n        [<JavaScript>] \n        member this.Dispose() = ()\n\n[<Proxy(typeof<System.Collections.Generic.List<_>>)>]\n[<Name \"WebSharper.Collections.List\">]\n[<Prototype false>]\ntype ResizeArrayProxy<'T> [<Inline \"$_arr\">] (_arr: 'T []) =\n\n    [<Inline \"[]\">]\n    new () =\n        new ResizeArrayProxy<'T>([||])\n\n    [<Inline \"[]\">]\n    new (size: int) =\n        new ResizeArrayProxy<'T>([||])\n\n    [<Inline>]\n    new (el: seq<'T>) =\n        new ResizeArrayProxy<'T>(Seq.toArray el)\n\n    [<Inline>]\n    member this.GetEnumerator() =\n        As<System.Collections.Generic.List.Enumerator<'T>>(new ResizeArrayEnumeratorProxy<'T>(As<'T[]> this))\n\n    interface 'T seq with\n        member this.GetEnumerator() = (As<System.Collections.IEnumerable> this).GetEnumerator()\n        member this.GetEnumerator() = (As<seq<'T>> this).GetEnumerator()\n\n    [<Inline>]\n    member this.Add(x: 'T) : unit =\n        As<'T[]>(this).JS.Push(x) |> ignore\n\n    [<Inline>]\n    member this.AddRange(x: seq<'T>) : unit =\n        Seq.iter this.Add x\n\n    [<Inline>]\n    member this.AsReadOnly() : System.Collections.ObjectModel.ReadOnlyCollection<'T> =\n        System.Array.AsReadOnly(As<'T[]> this)\n\n    [<Inline>]\n    member this.BinarySearch(start: int, length: int, item: 'T, comparer: IComparer<'T>) : int =\n        System.Array.BinarySearch(As<'T[]> this, start, length, item, comparer)\n\n    [<Inline>]\n    member this.BinarySearch(item: 'T) : int =\n        System.Array.BinarySearch(As<'T[]> this, item)\n\n    [<Inline>]\n    member this.BinarySearch(item: 'T, comparer: IComparer<'T>) : int =\n        System.Array.BinarySearch(As<'T[]> this, item, comparer)\n\n    [<Inline>]\n    member this.Clear() : unit =\n        (As<'T[]> this).JS.Splice(0, this.Count) |> ignore\n\n    [<Inline>]\n    member this.Contains(item: 'T) : bool =\n        System.Array.Exists(As<'T[]> this, fun x -> System.Collections.Generic.EqualityComparer.Default.Equals(item, x))\n\n    [<Inline>]\n    member this.ConvertAll<'U>(conv: System.Converter<'T, 'U>) : ResizeArray<'U> =\n        ResizeArray<'U>(System.Array.ConvertAll(As<'T[]> this, conv))\n\n    [<Inline>]\n    member this.CopyTo(arr: 'T[]) : unit =\n        this.CopyTo(arr, 0)\n\n    [<Inline>]\n    member this.CopyTo(arr: 'T[], offset: int) : unit =\n        this.CopyTo(0, arr, offset, this.Count)\n\n    [<Inline>]\n    member this.CopyTo(index: int, target: 'T[], offset: int, count: int) : unit =\n        Array.blit (As<'T[]> this) index target offset count\n\n    [<Inline>]\n    member this.Count : int = (As<'T[]> this).Length\n\n    [<Inline>]\n    member this.Exists(pred: System.Predicate<'T>) : bool =\n        System.Array.Exists(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.Find(pred: System.Predicate<'T>) : 'T =\n        System.Array.Find(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindAll(pred: System.Predicate<'T>) : ResizeArray<'T> =\n        ResizeArray<'T>(System.Array.FindAll(As<'T[]> this, pred))\n\n    [<Inline>]\n    member this.FindIndex(pred: System.Predicate<'T>) : int =\n        System.Array.FindIndex(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindIndex(start: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindIndex(As<'T[]> this, start, pred)\n\n    [<Inline>]\n    member this.FindIndex(start: int, count: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindIndex(As<'T[]> this, start, count, pred)\n\n    [<Inline>]\n    member this.FindLast(pred: System.Predicate<'T>) : 'T =\n        System.Array.FindLast(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindLastIndex(pred: System.Predicate<'T>) : int =\n        System.Array.FindLastIndex(As<'T[]> this, pred)\n\n    [<Inline>]\n    member this.FindLastIndex(start: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindLastIndex(As<'T[]> this, start, pred)\n\n    [<Inline>]\n    member this.FindLastIndex(start: int, count: int, pred: System.Predicate<'T>) : int =\n        System.Array.FindLastIndex(As<'T[]> this, start, count, pred)\n\n    [<Inline>]\n    member this.ForEach(action: System.Action<'T>) : unit =\n        System.Array.ForEach(As<'T[]> this, action)\n\n    [<Inline>]\n    member this.GetRange(index: int, count: int) : ResizeArray<'T> =\n        As (ResizeArrayProxy<'T>(Array.sub (As<'T[]> this) index count))\n\n    [<Inline>]\n    member this.IndexOf(item: 'T) : int =\n        System.Array.IndexOf(As<'T[]> this, item)\n\n    [<Inline>]\n    member this.IndexOf(item: 'T, start: int) : int =\n        System.Array.IndexOf(As<'T[]> this, item, start)\n\n    [<Inline>]\n    member this.IndexOf(item: 'T, start: int, count: int) : int =\n        System.Array.IndexOf(As<'T[]> this, item, start, count)\n\n    [<Inline>]\n    member this.Insert(index: int, item: 'T) : unit =\n        (As<'T[]> this).JS.Splice(index, 0, item) |> ignore\n\n    [<Inline>]\n    member this.InsertRange(index: int, items: seq<'T>) : unit =\n        (As<'T[]> this).JS.Splice(index, 0, Array.ofSeq items) |> ignore\n\n    member this.Item\n        with [<Inline>] get (x: int) : 'T = (As<'T[]> this).[x]\n        and [<Inline>] set (x: int) (v: 'T) = (As<'T[]> this).[x] <- v\n\n    [<Inline>]\n    member this.LastIndexOf(item: 'T) : int =\n        System.Array.LastIndexOf(As<'T[]> this, item)\n\n    [<Inline>]\n    member this.LastIndexOf(item: 'T, start: int) : int =\n        System.Array.LastIndexOf(As<'T[]> this, item, start)\n\n    [<Inline>]\n    member this.LastIndexOf(item: 'T, start: int, count: int) : int =\n        System.Array.LastIndexOf(As<'T[]> this, item, start, count)\n\n    member this.Remove(item: 'T) : bool =\n        match this.IndexOf(item) with\n        | -1 -> false\n        | n -> this.RemoveAt(n); true\n\n    member this.RemoveAll(pred: System.Predicate<'T>) : int =\n        let mutable removed = 0\n        let mutable i = 0\n        while i < this.Count do\n            if pred.Invoke((As<'T[]> this).JS.[i]) then\n                let mutable j = i + 1\n                while j < this.Count && pred.Invoke((As<'T[]> this).JS.[j]) do\n                    j <- j + 1\n                removed <- removed + j - i\n                (As<'T[]> this).JS.Splice(i, j - i) |> ignore\n            else\n                i <- i + 1\n        removed\n\n    [<Inline>]\n    member this.RemoveAt(x: int) : unit =\n        (As<'T[]> this).JS.Splice(x, 1) |> ignore\n\n    [<Inline>]\n    member this.RemoveRange(index: int, count: int) : unit =\n        (As<'T[]> this).JS.Splice(index, count) |> ignore\n\n    [<Inline>]\n    member this.Reverse() : unit =\n        System.Array.Reverse(As<'T[]> this)\n\n    [<Inline>]\n    member this.Reverse(index: int, count: int) : unit =\n        System.Array.Reverse(As<'T[]> this, index, count)\n\n    [<Inline>]\n    member this.Sort() : unit =\n        System.Array.Sort(As<'T[]> this)\n\n    [<Inline>]\n    member this.Sort(comp: IComparer<'T>) : unit =\n        System.Array.Sort(As<'T[]> this, comp)\n\n    [<Inline>]\n    member this.Sort(start: int, length: int, comp: IComparer<'T>) : unit =\n        System.Array.Sort(As<'T[]> this, start, length, comp)\n\n    [<Inline>]\n    member this.Sort(comp: System.Comparison<'T>) : unit =\n        System.Array.Sort(As<'T[]> this, comp)\n\n    [<Inline>]\n    member this.ToArray() : 'T [] =\n        Array.copy (As<'T[]> this)\n\n    [<Inline>]\n    member this.TrimExcess() = ()\n\n    [<Inline>]\n    member this.TrueForAll(pred: System.Predicate<'T>) : bool =\n        System.Array.TrueForAll(As<'T[]> this, pred)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule private WebSharper.Collections.LinkedList\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype LL<'T> = LinkedList<'T>\ntype LLN<'T> = LinkedListNode<'T>\ntype LLE<'T> = LinkedList<'T>.Enumerator\n\n[<Proxy(typeof<LLN<_>>)>]\n[<Name \"WebSharper.Collections.LinkedListNode\">]\ntype NodeProxy<'T> =\n    member this.Previous with [<Inline \"$this.p\">] get () = X<LLN<'T>>\n    member this.Next     with [<Inline \"$this.n\">] get () = X<LLN<'T>>\n    member this.Value    with [<Inline \"$this.v\">] get () = X<'T>\n\n[<Inline \"{p: $p, n: $n, v: $v}\">]\nlet newNode<'T> (p: LLN<'T>) (n: LLN<'T>) (v: 'T) = X<LLN<'T>>\n\n[<Inline \"$node.p = $p\" >]\nlet setPrev (node: LLN<'T>) (p: LLN<'T>) = ()\n\n[<Inline \"$node.n = $n\" >]\nlet setNext (node: LLN<'T>) (n: LLN<'T>) = ()\n\n[<Proxy(typeof<LLE<_>>)>]\n[<Name \"WebSharper.Collections.LinkedListEnumerator\">]\ntype EnumeratorProxy<'T> [<JavaScript>] (l: LLN<'T>) =\n    let mutable c = l\n\n    interface IEnumerator<'T> with\n        member this.Current = c.Value\n        \n        member this.Current = c.Value |> box\n\n        member this.MoveNext() =\n            c <- c.Next\n            c <> null\n\n        member this.Dispose() = ()\n\n        member this.Reset() = ()\n\n[<Proxy(typeof<LL<_>>)>]\n[<Name \"WebSharper.Collections.LinkedList\">]\ntype ListProxy<'T> [<JavaScript>] (coll: 'T seq) =\n    let mutable c = 0\n    let mutable n = null\n    let mutable p = null\n\n    do  let ie = coll.GetEnumerator()\n        if ie.MoveNext() then\n            n <- newNode null null ie.Current\n            p <- n\n            c <- 1\n        while ie.MoveNext() do\n            let node = newNode p null ie.Current\n            setNext p node\n            p <- node\n            c <- c + 1\n            \n    new () = ListProxy(Seq.empty)          \n\n    [<Inline>]\n    member this.Count = c\n\n    [<Inline>]\n    member this.First = n\n\n    [<Inline>]\n    member this.Last = p\n\n    member this.AddAfter(after: LLN<'T>, value) =\n        let before = after.Next\n        let node = newNode after before value\n        if after.Next = null then p <- node\n        setNext after node\n        if before <> null then setPrev before node\n        c <- c + 1\n        node\n\n    member this.AddBefore(before: LLN<'T>, value) =\n        let after = before.Previous\n        let node = newNode after before value\n        if before.Previous = null then n <- node \n        setPrev before node\n        if after <> null then setNext after node\n        c <- c + 1\n        node\n\n    member this.AddFirst(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddBefore(n, value)\n\n    member this.AddLast(value) =\n        if c = 0 then\n            let node = newNode null null value\n            n <- node\n            p <- n \n            c <- 1\n            node\n        else this.AddAfter(p, value)\n\n    member this.Clear() =\n        c <- 0\n        n <- null\n        p <- null\n\n    member this.Contains(value: 'T) =\n        let mutable found = false\n        let mutable node = n\n        while node <> null && not found do\n            if node.Value ==. value then found <- true \n            else node <- node.Next\n        found\n            \n    member this.Find(value: 'T) =\n        let mutable node = n\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Next\n        if notFound then null else node\n\n    member this.FindLast(value: 'T) = \n        let mutable node = p\n        let mutable notFound = true\n        while notFound && node <> null do\n            if node.Value ==. value then\n                notFound <- false    \n            else\n                node <- node.Previous\n        if notFound then null else node\n                \n    member this.GetEnumerator(): LinkedList<'T>.Enumerator =\n        As (new EnumeratorProxy<_>(As this))\n\n    interface IEnumerable with\n        member this.GetEnumerator() = this.GetEnumerator() :> _\n\n    interface IEnumerable<'T> with\n        member this.GetEnumerator() = this.GetEnumerator() :> _\n\n    member this.Remove(node: LLN<'T>) =\n        let before = node.Previous\n        let after = node.Next\n        if before = null then n <- after else setNext before after\n        if after = null then p <- before else setPrev after before\n        c <- c - 1\n        \n    member this.Remove(value) = \n        let node = this.Find(value)\n        if node = null then false\n        else\n            this.Remove(node)\n            true\n\n    member this.RemoveFirst() = this.Remove(n)\n\n    member this.RemoveLast() = this.Remove(p)\n               \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen System.Linq\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper.Core\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<IGrouping<_, _>>)>]\ntype internal IGroupingProxy<'K, 'T> =\n    abstract Key : 'K\n\n[<JavaScript>]\ntype internal Grouping<'K, 'T> (k: 'K, v: seq<'T>) =\n\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            v.GetEnumerator()\n\n    interface System.Collections.IEnumerable with\n        member this.GetEnumerator() =\n            (v :> System.Collections.IEnumerable).GetEnumerator()\n\n    interface System.Linq.IGrouping<'K, 'T> with\n        member this.Key = k\n\n[<Proxy(typeof<IOrderedEnumerable<_>>)>]\ntype internal IOrderedEnumerableProxy<'T> =\n    inherit seq<'T>\n    abstract CreateOrderedEnumerable<'K>\n        : keySelector: Func<'T, 'K>\n        * comparer: IComparer<'K>\n        * descending: bool\n        -> IOrderedEnumerable<'T>\n\n[<JavaScript>]\ntype internal FsComparer<'T when 'T : comparison>() =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            compare x y\n\n[<JavaScript>]\ntype internal ProjectionComparer<'T, 'K>(primary: IComparer<'K>, projection: Func<'T, 'K>) =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            primary.Compare(projection.Invoke x, projection.Invoke y)\n\n[<JavaScript>]\ntype internal CompoundComparer<'T>(primary: IComparer<'T>, secondary: IComparer<'T>) =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            match primary.Compare(x, y) with\n            | 0 -> secondary.Compare(x, y)\n            | n -> n\n\n[<JavaScript>]\ntype internal ReverseComparer<'T, 'K>(primary: IComparer<'K>, projection: Func<'T, 'K>) =\n    interface IComparer<'T> with\n        member this.Compare(x, y) =\n            primary.Compare(projection.Invoke y, projection.Invoke x)\n\n[<JavaScript>]\ntype internal OrderedEnumerable<'T>(source: seq<'T>, primary: IComparer<'T>) =\n    interface IOrderedEnumerable<'T> with\n        member this.CreateOrderedEnumerable(keySelector, secondary, descending) =\n            let secondary =\n                if descending then\n                    ReverseComparer(secondary, keySelector) :> IComparer<'T>\n                else\n                    ProjectionComparer(secondary, keySelector) :> IComparer<'T>\n            OrderedEnumerable<'T>(source, CompoundComparer(primary, secondary)) :> _\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            let a = Array.ofSeq source\n            Array.sortInPlaceWith (fun x y -> primary.Compare(x, y)) a\n            (a :> seq<'T>).GetEnumerator()\n    interface IEnumerable with\n        member this.GetEnumerator() =\n            (this :> IEnumerable<'T>).GetEnumerator() :> _\n\n//[<Proxy(typeof<ILookup<_, _>>)>]\n//type internal ILookupProxy<'K, 'E> =\n//    inherit seq<IGrouping<'K, 'E>>\n//    inherit IEnumerable\n//    abstract Item : 'K -> 'E with get\n//    abstract Count : int with get\n//    abstract Contains : 'K -> bool\n//\n//[<JavaScript>]\n//type internal Lookup<'K, 'T, 'E>(source: seq<'T>, key: Func<'T, 'K>, elt: Func<'T, 'E>, comparer: IEqualityComparer<'K>) =\n//\n//    let dc = lazy (\n//        let d = Dictionary<'K, ResizeArray<'E>>(comparer)\n//        let count = ref 0\n//        source |> Seq.iter (fun e ->\n//            incr count\n//            let k = key.Invoke e\n//            let v = elt.Invoke e\n//            if d.ContainsKey k then\n//                d.[k].Add(v)\n//            else\n//                d.Add(k, ResizeArray([|v|]))\n//        )\n//        d, !count\n//    )\n//\n//    let s = lazy (\n//        fst dc.Value |> Seq.map (fun (KeyValue(k, v)) ->\n//            Grouping(k, v) :> IGrouping<_,_>)\n//    )\n//\n//    interface seq<IGrouping<'K, 'E>> with\n//        member this.GetEnumerator() = s.Value.GetEnumerator()\n//    interface IEnumerable with\n//        member this.GetEnumerator() = (s.Value :> IEnumerable).GetEnumerator()\n//    interface ILookup<'K, 'E> with\n//        member this.Item with get k = (fst dc.Value).[k] :> seq<_>\n//        member this.Count = snd dc.Value\n//        member this.Contains(k) = (fst dc.Value).ContainsKey(k)\n\ntype private LinqMacro() =\n    inherit Macro()\n\n    override this.TranslateCall(c) = //e, t, m, a, _) =\n        let targ = c.Method.Generics.[0]\n        WebSharper.Core.Macros.EqualityComparer.GetDefault(c.Compilation, targ)\n        |> MacroResult.Map (fun ec ->\n            let m' =\n                let t =\n                    AST.Type.ConcreteType {\n                        Generics = [targ]\n                        Entity =\n                            typedefof<IEqualityComparer<int>>\n                            |> AST.Reflection.ReadTypeDefinition\n                    }\n                let m = c.Method.Entity.Value\n                { m with Parameters = m.Parameters @ [t] }\n            let m = { c.Method with Entity = Hashed m' }\n            AST.Call(c.This, c.DefiningType, c.Method, c.Arguments @ [ec]))\n\n[<Name \"WebSharper.Linq\">]\n[<Proxy(typeof<System.Linq.Enumerable>)>]\n[<JavaScript>]\ntype private LinqProxy =\n\n    [<Inline>]\n    static member Aggregate<'T>(this: seq<'T>, func: Func<'T, 'T, 'T>) : 'T =\n        Seq.reduce (fun x y -> func.Invoke(x, y)) this\n\n    [<Inline>]\n    static member Aggregate<'T, 'U>(this: seq<'T>, seed: 'U, func: Func<'U, 'T, 'U>) : 'U =\n        Seq.fold (fun x y -> func.Invoke(x, y)) seed this\n\n    [<Inline>]\n    static member Aggregate<'T, 'U, 'R>(this: seq<'T>, seed: 'U, func: Func<'U, 'T, 'U>, resultSelector: Func<'U, 'R>) : 'R =\n        resultSelector.Invoke(Seq.fold (fun x y -> func.Invoke(x, y)) seed this)\n\n    [<Inline>]\n    static member All<'T>(this: seq<'T>, predicate: Func<'T, bool>) : bool =\n        Seq.forall predicate.Invoke this\n\n    [<Inline>]\n    static member Any<'T>(this: seq<'T>) : bool =\n        not (Seq.isEmpty this)\n\n    [<Inline>]\n    static member Any<'T>(this: seq<'T>, predicate: Func<'T, bool>) : bool =\n        Seq.exists predicate.Invoke this\n\n    [<Inline>]\n    static member AsEnumerable<'T>(this: seq<'T>) : seq<'T> =\n        this\n\n    [<Inline>]\n    static member Average(this: seq<Nullable<int>>) : Nullable<float> =\n        LinqProxy.Average(Seq.cast<Nullable<float>> this)\n\n    [<Inline>]\n    static member Average(this: seq<Nullable<int64>>) : Nullable<float> =\n        LinqProxy.Average(Seq.cast<Nullable<float>> this)\n\n    static member Average(this: seq<Nullable<float>>) : Nullable<float> =\n        let mutable x = [||]\n        use e = this.GetEnumerator()\n        while e.MoveNext() do\n            if e.Current.HasValue then\n                x.JS.Push e.Current.Value |> ignore\n        if x.Length = 0 then\n            Nullable()\n        else\n            Nullable(Seq.sum x / float x.Length)\n\n    [<Inline>]\n    static member Average(this: seq<float>) : float =\n        Seq.average this\n\n    [<Inline>]\n    static member Average(this: seq<int64>) : float =\n        Seq.average (Seq.cast<float> this)\n\n    [<Inline>]\n    static member Average(this: seq<int>) : float =\n        Seq.average (Seq.cast<float> this)\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<float> =\n        LinqProxy.Average (Seq.cast<Nullable<float>> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, int64>) : float =\n        Seq.average (Seq.cast<float> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<float> =\n        LinqProxy.Average (Seq.cast<Nullable<float>> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Average (Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        Seq.average (Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Average<'T>(this: seq<'T>, selector: Func<'T, int>) : float =\n        Seq.average (Seq.cast<float> (Seq.map selector.Invoke this))\n\n    [<Inline>]\n    static member Cast<'T>(this: IEnumerable) : seq<'T> =\n        Seq.cast this\n\n    [<Inline>]\n    static member Concat<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        Seq.append this second\n\n    [<Inline>]\n    static member Contains<'T>(this: seq<'T>, value: 'T) : bool =\n        LinqProxy.Contains(this, value, EqualityComparer.Default)\n\n    [<Inline>]\n    static member Contains<'T>(this: seq<'T>, value: 'T, comparer: IEqualityComparer<'T>) : bool =\n        Seq.exists (fun x -> comparer.Equals(value, x)) this\n\n    [<Inline>]\n    static member Count<'T>(this: seq<'T>) : int =\n        Seq.length this\n\n    [<Inline>]\n    static member Count<'T>(this: seq<'T>, predicate: Func<'T, bool>) : int =\n        Seq.length (Seq.filter predicate.Invoke this)\n\n    [<Inline>]\n    static member DefaultIfEmpty<'T>(this: seq<'T>) : seq<'T> =\n        LinqProxy.DefaultIfEmpty(this, Unchecked.defaultof<'T>)\n\n    static member DefaultIfEmpty<'T>(this: seq<'T>, defaultValue: 'T) : seq<'T> =\n        if Seq.isEmpty this then\n            Seq.singleton defaultValue\n        else this\n\n    [<Inline>]\n    static member Distinct<'T>(this: seq<'T>) : seq<'T> =\n        LinqProxy.Distinct(this, EqualityComparer.Default)\n\n    static member Distinct<'T>(this: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let tbl = HashSet(comparer)\n            while e.MoveNext() do\n                if tbl.Add(e.Current) then\n                    yield e.Current\n        }\n\n    [<Inline>]\n    static member ElementAt<'T>(this: seq<'T>, index: int): 'T =\n        Seq.item index this\n\n    [<Inline>]\n    static member ElementAtOrDefault<'T>(this: seq<'T>, index: int) =\n        LinqProxy.JSElementAtOrDefault(this, index, Unchecked.defaultof<'T>)\n\n    [<Name \"ElementAtOrDefault\">]\n    static member JSElementAtOrDefault<'T>(this: seq<'T>, index: int, defaultValue: 'T) : 'T =\n        try Seq.item index this\n        with _ -> defaultValue\n\n    [<Inline>]\n    static member Empty<'T>() : seq<'T> =\n        Seq.empty\n\n    [<Inline>]\n    static member Except<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        LinqProxy.Except(this, second, EqualityComparer.Default)\n\n    static member Except<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        let tbl = HashSet(this, comparer)\n        for x in second do tbl.Remove(x) |> ignore\n        tbl :> _\n\n    [<Inline>]\n    static member First<'T>(this: seq<'T>) : 'T =\n        Seq.head this\n\n    [<Inline>]\n    static member First<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        Seq.find predicate.Invoke this\n\n    [<Inline>]\n    static member FirstOrDefault<'T>(this: seq<'T>) : 'T =\n        LinqProxy.JSFirstOrDefault(this, Unchecked.defaultof<'T>)\n\n    [<Name \"FirstOrDefault\">]\n    static member JSFirstOrDefault<'T>(this: seq<'T>, defaultValue: 'T) : 'T =\n        use e = this.GetEnumerator()\n        if e.MoveNext() then e.Current else defaultValue\n\n    [<Inline>]\n    static member FirstOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        LinqProxy.JSFirstOrDefault(this, predicate, Unchecked.defaultof<'T>)\n\n    [<Name \"FirstOrDefault$1\">]\n    static member JSFirstOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>, defaultValue: 'T) : 'T =\n        match Seq.tryFind predicate.Invoke this with\n        | Some x -> x\n        | None -> defaultValue\n\n    [<Inline>]\n    static member GroupBy<'T, 'K when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>) : seq<IGrouping<'K, 'T>> =\n        LinqProxy.GroupBy(this, keySelector, EqualityComparer.Default)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IEqualityComparer<'K>) : seq<IGrouping<'K, 'T>> =\n        LinqProxy.GroupBy(this, keySelector, (fun x -> x), comparer)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, resultSelector: Func<'K, seq<'T>, 'R>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, resultSelector, EqualityComparer.Default)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'E when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>) : seq<IGrouping<'K, 'E>> =\n        LinqProxy.GroupBy(this, keySelector, elementSelector, EqualityComparer.Default)\n\n    static member GroupBy<'T, 'K, 'E when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, comparer: IEqualityComparer<'K>) : seq<IGrouping<'K, 'E>> =\n        Seq.delay (fun () ->\n            // Using an array instead of a seq is important here: the returned groupings\n            // use a ResizeArray that is filled here, so this enumeration must be finished\n            // before the user can enumerate any of the groupings.\n            [|\n                let t = Dictionary<'K, ResizeArray<'E>>(comparer)\n                for x in this do\n                    let k = keySelector.Invoke x\n                    let e = elementSelector.Invoke x\n                    match t.TryGetValue k with\n                    | true, a -> a.Add(e)\n                    | false, _ ->\n                        let a = ResizeArray<'E>()\n                        a.Add(e)\n                        t.[k] <- a\n                        yield Grouping(k, a) :> IGrouping<_,_>\n            |] :> _\n        )\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, resultSelector: Func<'K, seq<'T>, 'R>, comparer: IEqualityComparer<'K>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, (fun x -> x), resultSelector, comparer)\n\n    [<Inline>]\n    static member GroupBy<'T, 'K, 'E, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, resultSelector: Func<'K, seq<'E>, 'R>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, elementSelector, resultSelector, EqualityComparer.Default)\n\n    static member GroupBy<'T, 'K, 'E, 'R when 'K : equality>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, resultSelector: Func<'K, seq<'E>, 'R>, comparer: IEqualityComparer<'K>) : seq<'R> =\n        LinqProxy.GroupBy(this, keySelector, elementSelector, comparer)\n        |> Seq.map (fun g -> resultSelector.Invoke(g.Key, g))\n\n    [<Inline>]\n    static member GroupJoin<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, seq<'I>, 'R>) : seq<'R> =\n        LinqProxy.GroupJoin(outer, inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer.Default)\n\n    static member GroupJoin<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, seq<'I>, 'R>, comparer: IEqualityComparer<'K>) : seq<'R> =\n        Seq.delay (fun () ->\n            let t = Dictionary<'K, 'O * ResizeArray<'I>>(comparer)\n            let a = [|\n                for o in outer do\n                    let k = outerKeySelector.Invoke o\n                    match t.TryGetValue k with\n                    | true, _ -> ()\n                    | false, _ ->\n                        let pair = (o, ResizeArray())\n                        t.Add(k, pair)\n                        yield pair\n            |]\n            for i in inner do\n                let k = innerKeySelector.Invoke i\n                match t.TryGetValue k with\n                | true, (_, a) -> a.Add(i)\n                | false, _ -> ()\n            a |> Array.iteri (fun i (o, is) ->\n                a.[i] <- As (resultSelector.Invoke(o, is)))\n            As a\n        )\n\n    [<Inline>]\n    static member Intersect<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        LinqProxy.Intersect(this, second, EqualityComparer.Default)\n\n    static member Intersect<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        let t1 = HashSet(this, comparer)\n        seq {\n            let t2 = HashSet(comparer)\n            for x in second do\n                if t1.Contains(x) && t2.Add(x) then\n                    yield x\n        }\n\n    [<Inline>]\n    static member Join<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, 'I, 'R>) : IEnumerable<'R> =\n        LinqProxy.Join(outer, inner, outerKeySelector, innerKeySelector, resultSelector, EqualityComparer.Default)\n\n    static member Join<'O, 'I, 'K, 'R>(outer: seq<'O>, inner: seq<'I>, outerKeySelector: Func<'O, 'K>, innerKeySelector: Func<'I, 'K>, resultSelector: Func<'O, 'I, 'R>, comparer: IEqualityComparer<'K>) : IEnumerable<'R> =\n        Seq.delay (fun () ->\n            let t = Dictionary<'K, 'O * ResizeArray<'I>>(comparer)\n            let a = [|\n                for o in outer do\n                    let k = outerKeySelector.Invoke o\n                    match t.TryGetValue k with\n                    | true, _ -> ()\n                    | false, _ ->\n                        let pair = (o, ResizeArray())\n                        t.Add(k, pair)\n                        yield pair\n            |]\n            for i in inner do\n                let k = innerKeySelector.Invoke i\n                match t.TryGetValue k with\n                | true, (_, a) -> a.Add(i)\n                | false, _ -> ()\n            [|\n                for (o, is) in a do\n                    for i in is do\n                        yield resultSelector.Invoke(o, i)\n            |] :> _\n        )\n\n    [<Inline>]\n    static member Last<'T>(this: seq<'T>) : 'T =\n        Seq.last this\n\n    static member LastPred(this: seq<'T>, predicate: Func<'T, bool>) : option<'T> =\n        (None, this)\n        ||> Seq.fold (fun acc elt ->\n            if predicate.Invoke elt then Some elt else acc)\n\n    static member Last<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        match LinqProxy.LastPred(this, predicate) with\n        | Some x -> x\n        | None -> invalidOp \"Sequence contains no matching element\"\n\n    [<Inline>]\n    static member LastOrDefault<'T>(this: seq<'T>) : 'T =\n        Enumerable.LastOrDefault(this, fun _ -> true)\n\n    [<Inline>]\n    static member LastOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        LinqProxy.JSLastOrDefault(this, predicate, Unchecked.defaultof<'T>)\n\n    [<Name \"LastOrDefault\">]\n    static member JSLastOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>, defaultValue: 'T) : 'T =\n        match LinqProxy.LastPred(this, predicate) with\n        | Some x -> x\n        | None -> defaultValue\n\n    [<Inline>]\n    static member LongCount<'T>(this: seq<'T>) : int64 =\n        As(Enumerable.Count(this))\n\n    [<Inline>]\n    static member LongCount<'T>(this: seq<'T>, predicate: Func<'T, bool>) : int64 =\n        As(Enumerable.Count(this, predicate))\n\n    [<Inline>]\n    static member Max(this: seq<Nullable<int>>) : Nullable<int> =\n        As(LinqProxy.Max(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Max(this: seq<float>) : float =\n        Seq.max this\n\n    [<Inline>]\n    static member Max(this: seq<Nullable<int64>>) : Nullable<int64> =\n        As(LinqProxy.Max(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Max(this: seq<int64>) : int64 =\n        Seq.max this\n\n    static member Max(this: seq<Nullable<float>>) : Nullable<float> =\n        let s = this |> Seq.choose (fun x -> if x.HasValue then Some x.Value else None)\n        if Seq.isEmpty s then Nullable() else Nullable(Seq.max s)\n\n    [<Inline>]\n    static member Max(this: seq<int>) : int =\n        Seq.max this\n\n    [<Inline>]\n    static member Max<'T when 'T : comparison>(this: seq<'T>) : 'T =\n        Seq.max this\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, int64>) : int64 =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<int64> =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<int> =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T>(this: seq<'T>, selector: Func<'T, int>) : int =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Max<'T, 'R when 'R : comparison>(this: seq<'T>, selector: Func<'T, 'R>) : 'R =\n        LinqProxy.Max(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min(this: seq<Nullable<int>>) : Nullable<int> =\n        As(LinqProxy.Min(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Min(this: seq<float>) : float =\n        Seq.min this\n\n    [<Inline>]\n    static member Min(this: seq<Nullable<int64>>) : Nullable<int64> =\n        As(LinqProxy.Min(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Min(this: seq<int64>) : int64 =\n        Seq.min this\n\n    static member Min(this: seq<Nullable<float>>) : Nullable<float> =\n        let s = this |> Seq.choose (fun x -> if x.HasValue then Some x.Value else None)\n        if Seq.isEmpty s then Nullable() else Nullable(Seq.min s)\n\n    [<Inline>]\n    static member Min(this: seq<int>) : int =\n        Seq.min this\n\n    [<Inline>]\n    static member Min<'T when 'T : comparison>(this: seq<'T>) : 'T =\n        Seq.min this\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, int64>) : int64 =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<int64> =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<int> =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T>(this: seq<'T>, selector: Func<'T, int>) : int =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Min<'T, 'R when 'R : comparison>(this: seq<'T>, selector: Func<'T, 'R>) : 'R =\n        LinqProxy.Min(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member OfType<'T>(this: IEnumerable) : seq<'T> =\n        Seq.cast<'T> this\n\n    [<Inline>]\n    static member OrderBy<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        LinqProxy.OrderBy(this, keySelector, Comparer<'K>.Default)\n\n    static member OrderBy<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        OrderedEnumerable(this, ProjectionComparer(comparer, keySelector)) :> _\n\n    [<Inline>]\n    static member OrderByDescending<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        LinqProxy.OrderByDescending(this, keySelector, Comparer<'K>.Default)\n\n    static member OrderByDescending<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        OrderedEnumerable(this, ReverseComparer(comparer, keySelector)) :> _\n\n    static member Range(start: int, count: int) : seq<int> =\n        Seq.init count ((+) start)\n\n    static member Repeat<'T>(element: 'T, count: int) : seq<'T> =\n        Seq.init count (fun _ -> element)\n\n    static member Reverse<'T>(this: seq<'T>) : seq<'T> =\n        Array.rev (Array.ofSeq this) :> _\n\n    static member Select<'T, 'R>(this: seq<'T>, selector: Func<'T, int, 'R>) : seq<'R> =\n        Seq.mapi (fun i x -> selector.Invoke(x, i)) this\n\n    [<Inline>]\n    static member Select<'T, 'R>(this: seq<'T>, selector: Func<'T, 'R>) : seq<'R> =\n        Seq.map selector.Invoke this\n\n    static member SelectMany<'T, 'R>(this: seq<'T>, selector: Func<'T, int, seq<'R>>) : seq<'R> =\n        Seq.mapi (fun i x -> selector.Invoke(x, i)) this |> Seq.concat\n\n    [<Inline>]\n    static member SelectMany<'T, 'R>(this: seq<'T>, selector: Func<'T, seq<'R>>) : seq<'R> =\n        Seq.collect selector.Invoke this\n\n    static member SelectMany<'T, 'C, 'R>(this: seq<'T>, selector: Func<'T, seq<'C>>, collectionSelector: Func<'T, 'C, 'R>) : seq<'R> =\n        this\n        |> Seq.map (fun t -> t, selector.Invoke t)\n        |> Seq.collect (fun (t, cs) ->\n            cs |> Seq.map (fun c -> collectionSelector.Invoke(t, c)))\n\n    static member SelectMany<'T, 'C, 'R>(this: seq<'T>, selector: Func<'T, int, seq<'C>>, collectionSelector: Func<'T, 'C, 'R>) : seq<'R> =\n        this\n        |> Seq.mapi (fun i t -> t, selector.Invoke(t, i))\n        |> Seq.collect (fun (t, cs) ->\n            cs |> Seq.map (fun c -> collectionSelector.Invoke(t, c)))\n\n    [<Inline>]\n    static member SequenceEqual<'T>(this: seq<'T>, second: seq<'T>) : bool =\n        LinqProxy.SequenceEqual(this, second, EqualityComparer.Default)\n\n    static member SequenceEqual<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : bool =\n        use e1 = this.GetEnumerator()\n        use e2 = this.GetEnumerator()\n        let rec go() =\n            if e1.MoveNext() then\n                e2.MoveNext() && comparer.Equals(e1.Current, e2.Current) && go()\n            else\n                not (e2.MoveNext())\n        go()\n\n    [<Inline>]\n    static member Single<'T>(this: seq<'T>) : 'T =\n        Seq.exactlyOne this\n\n    static member Single<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        let x =\n            (None, this)\n            ||> Seq.fold (fun state cur ->\n                if predicate.Invoke cur then\n                    if state.IsSome then\n                        invalidOp \"Sequence contains more than one matching element\"\n                    else Some cur\n                else state\n            )\n        match x with\n        | None -> invalidOp \"Sequence contains no elements\"\n        | Some x -> x\n\n    [<Inline>]\n    static member SingleOrDefault<'T>(this: seq<'T>) : 'T =\n        LinqProxy.SingleOrDefault(this, fun _ -> true)\n\n    [<Inline>]\n    static member SingleOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>) : 'T =\n        LinqProxy.JSSingleOrDefault(this, predicate, Unchecked.defaultof<'T>)\n\n    [<Name \"SingleOrDefault\">]\n    static member JSSingleOrDefault<'T>(this: seq<'T>, predicate: Func<'T, bool>, defaultValue: 'T) : 'T =\n        use e = this.GetEnumerator()\n        let mutable found = None\n        while e.MoveNext() do\n            if predicate.Invoke e.Current then\n                match found with\n                | None -> found <- Some e.Current\n                | Some _ -> invalidOp \"Sequence contains more than one element\"\n        match found with\n        | Some x -> x\n        | None -> defaultValue\n\n    static member Skip<'T>(this: seq<'T>, count: int) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while i < count && e.MoveNext() do i <- i + 1\n            while e.MoveNext() do yield e.Current\n        }\n\n    static member SkipWhile<'T>(this: seq<'T>, predicate: Func<'T, int, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            let mutable predWasTrue = true\n            while predWasTrue && e.MoveNext() do\n                if predicate.Invoke(e.Current, i) then\n                    i <- i + 1\n                else\n                    predWasTrue <- false\n            if not predWasTrue then\n                yield e.Current\n                while e.MoveNext() do yield e.Current\n        }\n\n    static member SkipWhile<'T>(this: seq<'T>, predicate: Func<'T, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable predWasTrue = true\n            while predWasTrue && e.MoveNext() do\n                if not (predicate.Invoke e.Current) then\n                    predWasTrue <- false\n            if not predWasTrue then\n                yield e.Current\n                while e.MoveNext() do yield e.Current\n        }\n\n    [<Inline>]\n    static member Sum(this: seq<int64>) : int64 =\n        Seq.sum this\n\n    [<Inline>]\n    static member Sum(this: seq<Nullable<int64>>) : Nullable<int64> =\n        As(LinqProxy.Sum(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Sum(this: seq<float>) : float =\n        Seq.sum this\n\n    static member Sum(this: seq<Nullable<float>>) : Nullable<float> =\n        let s = this |> Seq.choose (fun x -> if x.HasValue then Some x.Value else None)\n        if Seq.isEmpty s then Nullable() else Nullable(Seq.sum s)\n\n    [<Inline>]\n    static member Sum(this: seq<Nullable<int>>) : Nullable<int> =\n        As(LinqProxy.Sum(Seq.cast<Nullable<float>> this))\n\n    [<Inline>]\n    static member Sum(this: seq<int>) : int =\n        Seq.sum this\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, int64>) : int64 =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, float>) : float =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, Nullable<float>>) : Nullable<float> =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, Nullable<int64>>) : Nullable<int64> =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, Nullable<int>>) : Nullable<int> =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    [<Inline>]\n    static member Sum<'T>(this: seq<'T>, selector: Func<'T, int>) : int =\n        LinqProxy.Sum(Seq.map selector.Invoke this)\n\n    static member Take<'T>(this: seq<'T>, count: int) =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while i < count && e.MoveNext() do\n                i <- i + 1\n                yield e.Current\n        }\n\n    static member TakeWhile<'T>(this: seq<'T>, predicate: Func<'T, int, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while e.MoveNext() && predicate.Invoke(e.Current, i) do\n                i <- i + 1\n                yield e.Current\n        }\n\n    static member TakeWhile<'T>(this: seq<'T>, predicate: Func<'T, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            while e.MoveNext() && predicate.Invoke(e.Current) do\n                yield e.Current\n        }\n\n    [<Inline>]\n    static member ThenBy<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, Comparer<_>.Default, false)\n\n    [<Inline>]\n    static member ThenBy<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, comparer, false)\n\n    [<Inline>]\n    static member ThenByDescending<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, Comparer<_>.Default, true)\n\n    [<Inline>]\n    static member ThenByDescending<'T, 'K>(this: IOrderedEnumerable<'T>, keySelector: Func<'T, 'K>, comparer: IComparer<'K>) : IOrderedEnumerable<'T> =\n        this.CreateOrderedEnumerable(keySelector, comparer, true)\n\n    [<Inline>]\n    static member ToArray<'T>(this: seq<'T>) : 'T[] =\n        Seq.toArray this\n\n    [<Inline>]\n    static member ToDictionary<'T, 'K> (this: seq<'T>, keySelector: Func<'T, 'K>) : Dictionary<'K, 'T> =\n        LinqProxy.ToDictionary(this, keySelector, EqualityComparer.Default)\n\n    static member ToDictionary<'T, 'K> (this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IEqualityComparer<'K>) : Dictionary<'K, 'T> =\n        let d = Dictionary(comparer)\n        Seq.iter (fun x -> d.Add(keySelector.Invoke x, x)) this\n        d\n\n    [<Inline>]\n    static member ToDictionary<'T, 'K, 'E> (this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>) : Dictionary<'K, 'E> =\n        LinqProxy.ToDictionary(this, keySelector, elementSelector, EqualityComparer.Default)\n\n    static member ToDictionary<'T, 'K, 'E> (this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, comparer: IEqualityComparer<'K>) : Dictionary<'K, 'E> =\n        let d = Dictionary(comparer)\n        Seq.iter (fun x -> d.Add(keySelector.Invoke x, elementSelector.Invoke x)) this\n        d\n\n    [<Inline>]\n    static member ToList<'T>(this: seq<'T>) : List<'T> =\n        List<'T>(this)\n\n    //[<Macro(typeof<LinqMacro>)>]\n//    static member ToLookup<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>) : ILookup<'K, 'T> =\n//        Lookup<'K, 'T, 'T>(this, keySelector, Func<'T,'T>(id), EqualityComparer<'K>.Default) :> _\n\n//    [<Inline>]\n//    static member ToLookup<'T, 'K>(this: seq<'T>, keySelector: Func<'T, 'K>, comparer: IEqualityComparer<'K>) : ILookup<'K, 'T> =\n//        Lookup<'K, 'T, 'T>(this, keySelector, Func<'T,'T>(id), comparer) :> _\n\n    //[<Macro(typeof<LinqMacro>)>]\n//    static member ToLookup<'T, 'K, 'E>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>) : ILookup<'K, 'E> =\n//        Lookup<'K, 'T, 'E>(this, keySelector, elementSelector, EqualityComparer<'K>.Default) :> _\n\n//    [<Inline>]\n//    static member ToLookup<'T, 'K, 'E>(this: seq<'T>, keySelector: Func<'T, 'K>, elementSelector: Func<'T, 'E>, comparer: IEqualityComparer<'K>) : ILookup<'K, 'E> =\n//        Lookup<'K, 'T, 'E>(this, keySelector, elementSelector, comparer) :> _\n\n    [<Inline>]\n    static member Union<'T>(this: seq<'T>, second: seq<'T>) : seq<'T> =\n        LinqProxy.Union(this, second, EqualityComparer<'T>.Default)\n\n    static member Union<'T>(this: seq<'T>, second: seq<'T>, comparer: IEqualityComparer<'T>) : seq<'T> =\n        let tbl = HashSet(this, comparer)\n        for e in second do tbl.Add(e) |> ignore\n        tbl :> _\n\n    static member Where<'T>(this: seq<'T>, predicate: Func<'T, int, bool>) : seq<'T> =\n        seq {\n            use e = this.GetEnumerator()\n            let mutable i = 0\n            while e.MoveNext() do\n                if predicate.Invoke(e.Current, i) then\n                    yield e.Current\n                i <- i + 1\n        }\n\n    [<Inline>]\n    static member Where<'T>(this: seq<'T>, predicate: Func<'T, bool>) : seq<'T> =\n        Seq.filter predicate.Invoke this\n\n    [<Inline>]\n    static member Zip<'T, 'U, 'R>(this: seq<'T>, second: seq<'U>, resultSelector: Func<'T, 'U, 'R>) : seq<'R> =\n        Seq.map2 (fun x y -> resultSelector.Invoke(x, y)) this second\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen System.Linq\nopen System.Collections\nopen System.Collections.Generic\nopen WebSharper.Core\nopen WebSharper.JavaScript\nopen FSharp.Quotations\n\nopen FSharp.Linq\n\n[<Proxy(typeof<QuerySource<_,_>>)>]\ntype internal QuerySourceProxy<'T, 'Q> [<Inline \"$source\">] (source: IEnumerable<'T>) =\n\n    [<Inline \"$this\">]\n    member this.Source = source\n                                \n[<Proxy(typeof<QueryBuilder>)>]\n[<Name \"WebSharper.Query\">]\ntype internal QueryBuilderProxy() =\n    [<Inline>]\n    member this.All(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        Seq.forall predicate source.Source\n\n    [<Inline>]\n    member inline this.AverageBy\n            (source: QuerySource<'T, 'Q>, projection: 'T -> ^Value) =\n        Seq.averageBy projection source.Source\n\n    [<Name \"averageByNullable\">]\n    static member inline AverageByNullableImpl \n            (source: QuerySource<'T, 'Q>, projection: 'T -> Nullable< ^TValue>) =\n        let filtered =\n            source.Source |> Seq.choose (fun x ->\n                Option.ofNullable (projection x) \n            ) |> Array.ofSeq\n        if filtered.Length = 0 then Nullable() else Nullable(Array.average filtered) \n\n    [<Inline>]\n    member inline this.AverageByNullable (source, projection) = QueryBuilderProxy.AverageByNullableImpl(source, projection)\n\n    [<Inline>]\n    member this.Contains(source: QuerySource<'T, 'Q>, key: 'T) =\n        Seq.contains key source.Source\n\n    [<Inline>]\n    member this.Count(source: QuerySource<'T, 'Q>) =\n        Seq.length source.Source\n\n    [<Inline>]\n    member this.Distinct(source: QuerySource<'T, 'Q>) =\n        Seq.distinct source.Source |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ExactlyOne(source: QuerySource<'T, 'Q>) =\n        Seq.exactlyOne source.Source\n     \n    [<Inline>]\n    member this.ExactlyOneOrDefault(source: QuerySource<'T, 'Q>) =\n        source.Source.SingleOrDefault()\n\n    [<Inline>]\n    member this.Exists(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        Seq.exists predicate source.Source\n     \n    [<Inline>]\n    member this.Find(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        Seq.find predicate source.Source\n\n    [<Inline>]\n    member this.For(source: QuerySource<'T, 'Q>, body: 'T -> QuerySource<'TResult, 'Q2>) =\n        Seq.collect (fun x -> (body x).Source) source.Source |> QuerySource<'TResult, 'Q>\n     \n    [<Inline>]\n    member this.GroupBy(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        source.Source.GroupBy(fun x -> keySelector x) |> QuerySource<IGrouping<'TKey, 'T>, 'Q>\n\n    [<Inline>]\n    member this.GroupJoin\n      (\n        outerSource: QuerySource<'TOuter, 'Q>, innerSource: QuerySource<'TInner, 'Q>, \n        outerKeySelector: 'TOuter -> 'TKey, innerKeySelector: 'TInner -> 'TKey,\n        resultSelector: 'TOuter -> seq<'TInner> -> 'TResult\n      ) =\n        outerSource.Source.GroupJoin(\n            innerSource.Source, \n            (fun x -> outerKeySelector x), \n            (fun x -> innerKeySelector x), \n            (fun x y -> resultSelector x y)\n        ) |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.GroupValBy<'T, 'TKey, 'TValue, 'Q>(source: QuerySource<'T, 'Q>, resultSelector: 'T -> 'TValue, keySelector: 'T -> 'TKey) =\n        source.Source.GroupBy((fun x -> keySelector x), (fun x -> resultSelector x)) |> QuerySource<IGrouping<'TKey, 'TValue>, 'Q>\n\n    [<Inline>]\n    member this.Head(source: QuerySource<'T, 'Q>) =\n        Seq.head source.Source\n\n    [<Inline>]\n    member this.HeadOrDefault(source: QuerySource<'T, 'Q>) =\n        source.Source.FirstOrDefault()\n    \n    [<Inline>]\n    member this.Join\n      (\n        outerSource: QuerySource<'TOuter, 'Q>, innerSource: QuerySource<'TInner, 'Q>, \n        outerKeySelector: 'TOuter -> 'TKey, innerKeySelector: 'TInner -> 'TKey,\n        resultSelector: 'TOuter -> 'TInner -> 'TResult\n      ) =\n        outerSource.Source.Join(\n            innerSource.Source, \n            (fun x -> outerKeySelector x), \n            (fun x -> innerKeySelector x), \n            (fun x y -> resultSelector x y)\n        ) |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.Last(source: QuerySource<'T, 'Q>) =\n        Seq.last source.Source\n \n    [<Inline>]\n    member this.LastOrDefault(source: QuerySource<'T, 'Q>) =\n        source.Source.LastOrDefault()\n\n    [<Inline>]\n    member this.LeftOuterJoin\n      (\n        outerSource: QuerySource<'TOuter, 'Q>, innerSource: QuerySource<'TInner, 'Q>, \n        outerKeySelector: 'TOuter -> 'TKey, innerKeySelector: 'TInner -> 'TKey,\n        resultSelector: 'TOuter -> seq<'TInner> -> 'TResult\n      ) =\n        outerSource.Source.GroupJoin(\n            innerSource.Source, \n            (fun x -> outerKeySelector x), \n            (fun x -> innerKeySelector x), \n            (fun x y -> resultSelector x (y.DefaultIfEmpty()))\n        ) |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.MaxBy(source: QuerySource<'T, 'Q>, valueSelector: 'T -> 'TValue) =\n        source.Source.Max(fun x -> valueSelector x)\n    \n    [<Inline>]\n    member this.MaxByNullable(source: QuerySource<'T, 'Q>, valueSelector: 'T -> Nullable<'TValue>) =\n        source.Source.Max(fun x -> valueSelector x)\n\n    [<Inline>]\n    member this.MinBy(source: QuerySource<'T, 'Q>, valueSelector: 'T -> 'TValue) =\n        source.Source.Min(fun x -> valueSelector x)\n    \n    [<Inline>]\n    member this.MinByNullable(source: QuerySource<'T, 'Q>, valueSelector: 'T -> Nullable<'TValue>) =\n        source.Source.Min(fun x -> valueSelector x)\n\n    [<Inline>]\n    member this.Nth(source: QuerySource<'T, 'Q>, index: int) =\n        Seq.item index source.Source\n\n    [<Inline>]\n    member this.Quote(q: Expr<'T>) = q\n\n    [<Inline>]\n    member this.Run(q: Expr<QuerySource<'T, IQueryable>>) =\n        (As<QuerySource<'T, obj>> q).Source |> As<IQueryable<'T>>      \n           \n    [<Inline>]\n    member this.Select(source: QuerySource<'T, 'Q>, projection: 'T -> 'TResult) =\n        source.Source |> Seq.map projection |> QuerySource<'TResult, 'Q>\n\n    [<Inline>]\n    member this.Skip(source: QuerySource<'T, 'Q>, count: int) =\n        source.Source.Skip(count) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SkipWhile(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        source.Source.SkipWhile(fun x -> predicate x) |> QuerySource<'T, 'Q>\n    \n    [<Inline>]\n    member this.SortBy(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        source.Source.OrderBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SortByDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        source.Source.OrderByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SortByNullable(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        source.Source.OrderBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.SortByNullableDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        source.Source.OrderByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.Source(source: seq<'T>) = \n        QuerySource<'T,  System.Collections.IEnumerable>(source)\n\n    [<Inline>]\n    member this.Source(source: IQueryable<'T>) = \n        QuerySource<'T, 'Q>(source)\n\n    [<Inline>]                                                              \n    member inline this.SumBy(source: QuerySource<'T, 'Q>, projection: 'T -> ^TValue) =\n        Seq.sumBy projection source.Source\n\n    [<Name \"sumByNullable\">]                                                              \n    static member inline SumByNullableImpl(source: QuerySource<'T, 'Q>, projection: 'T -> Nullable<'TValue>) =\n        let filtered =\n            source.Source |> Seq.choose (fun x ->\n                Option.ofNullable (projection x) \n            ) |> Array.ofSeq\n        Nullable(Array.sum filtered) \n\n    [<Inline>]\n    member inline this.SumByNullable(source, projection) = QueryBuilderProxy.SumByNullableImpl(source, projection)\n\n    [<Inline>]\n    member this.Take(source: QuerySource<'T, 'Q>, count: int) =\n        source.Source.Take(count) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.TakeWhile(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        source.Source.TakeWhile(fun x -> predicate x) |> QuerySource<'T, 'Q>\n    \n    static member CheckThenBySource(source: IEnumerable<'T>) =\n        match source with\n        | :? IOrderedEnumerable<'T> as e ->\n            e\n        | _ ->\n            failwith \"'thenBy' and 'thenByDescending' may only be used with an ordered input\"\n\n    [<Inline>]\n    member this.ThenBy(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ThenByDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> 'TKey) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ThenByNullable(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenBy(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.ThenByNullableDescending(source: QuerySource<'T, 'Q>, keySelector: 'T -> Nullable<'TKey>) =\n        QueryBuilderProxy.CheckThenBySource(source.Source).ThenByDescending(fun x -> keySelector x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.Where(source: QuerySource<'T, 'Q>, predicate: 'T -> bool) =\n        source.Source.Where(fun x -> predicate x) |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.Yield(value: 'T) =\n        Seq.singleton value |> QuerySource<'T, 'Q>\n\n    [<Inline>]\n    member this.YieldFrom(computation: QuerySource<'T, 'Q>) =\n        computation\n    \n    [<Inline>]\n    member this.Zero() =\n        Seq.empty |> QuerySource<'T, 'Q>\n\n[<WebSharper.Proxy \"Microsoft.FSharp.Core.ExtraTopLevelOperators, FSharp.Core\">]\nmodule internal ExtraTopLevelOperatorsQueryProxy =\n    \n    [<Inline \"null\">]\n    let query = query\n\n[<WebSharper.Proxy \"Microsoft.FSharp.Linq.QueryRunExtensions.HighPriority, FSharp.Core\">]\nmodule internal HighPriorityProxy =                          \n    \n    [<Inline>]\n    let RunQueryAsEnumerable (this: QueryBuilder) (q: Expr<QuerySource<'T, IEnumerable>>) =\n        (As<QuerySource<'T, IEnumerable>> q).Source   \n\n[<WebSharper.Proxy \"Microsoft.FSharp.Linq.QueryRunExtensions.LowPriority, FSharp.Core\">]\nmodule internal LowPriorityProxy =                          \n    \n    [<Inline>]\n    let RunQueryAsValue (this: QueryBuilder) (q: Expr<'T>) =\n        As<'T> q\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2018 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.JavaScript\n\nopen System\nopen System.Runtime.CompilerServices\nopen System.Threading.Tasks\nopen WebSharper\n\n[<JavaScript>]\ntype NonStandardPromiseRejectionException(reason: obj) =\n    inherit Exception(\"Promise rejected\")\n\n    member this.Reason = reason\n\n[<JavaScript>]\nmodule Promise =\n\n    let private unwrapExn (x: obj) : exn =\n        match x with\n        | :? exn as e -> e\n        | x -> NonStandardPromiseRejectionException x :> exn\n\n    let OfAsync (a: Async<'T>) : Promise<'T> =\n        new Promise<'T>(fun (resolve, reject) ->\n            Async.StartWithContinuations(a, resolve, reject, reject)\n        )\n\n    let OfTask (t: Task<'T>) : Promise<'T> =\n        new Promise<'T>(fun (resolve, reject) ->\n            t.ContinueWith(fun (t: Task<'T>) ->\n                if t.IsCanceled then\n                    reject (TaskCanceledException())\n                elif t.IsFaulted then\n                    reject t.Exception\n                else // RanToCompletion\n                    resolve t.Result\n            )\n            |> ignore\n        )\n\n    let AsAsync (p: Promise<'T>) : Async<'T> =\n        Async.FromContinuations(fun (ok, ko, _) ->\n            p.Then(ok, fun (err: obj) ->\n                ko (unwrapExn err)\n            )\n            |> ignore\n        )\n\n    let AsTask (p: Promise<'T>) : Task<'T> =\n        let tcs = System.Threading.Tasks.TaskCompletionSource<'T>()\n        p.Then(tcs.SetResult, fun (err: obj) ->\n            tcs.SetException(unwrapExn err)\n        )\n        |> ignore\n        tcs.Task\n\n    let private For (xs: seq<'T>) (f: 'T -> Promise<unit>) : Promise<unit> =\n        let e = xs.GetEnumerator()\n        let rec run() : Promise<unit> =\n            if e.MoveNext() then\n               (f e.Current).Then<unit>(run)\n            else\n                Promise.Resolve(())\n        // Call run() in a Promise rather than immediately,\n        // or .Finally wouldn't catch an exception when enumerating the first item.\n        Promise<unit>(fun (resolve, reject) -> resolve (unbox<unit>(run())))\n            .Finally(fun () -> e.Dispose())\n\n    type Builder [<Inline \"null\">] internal () =\n\n        [<Inline>]\n        member this.Bind(p: Promise<'T>, f: 'T -> Promise<'U>) : Promise<'U> =\n            p.Then<'U>(f)\n\n        [<Inline>]\n        member this.Bind(a: Async<'T>, f: 'T -> Promise<'U>) : Promise<'U> =\n            (OfAsync a).Then<'U>(f)\n\n        [<Inline>]\n        member this.Bind(a: Task<'T>, f: 'T -> Promise<'U>) : Promise<'U> =\n            (OfTask a).Then<'U>(f)\n\n        [<Inline>]\n        member this.Return(x: 'T) : Promise<'T> =\n            Promise<'T>.Resolve(x)\n\n        [<Inline>]\n        member this.ReturnFrom(x: Promise<'T>) : Promise<'T> =\n            x\n\n        [<Inline>]\n        member this.ReturnFrom(x: Async<'T>) : Promise<'T> =\n            OfAsync x\n\n        [<Inline>]\n        member this.ReturnFrom(x: Task<'T>) : Promise<'T> =\n            OfTask x\n\n        [<Inline>]\n        member this.Using(x: 'T when 'T :> IDisposable, f: 'T -> Promise<'U>) : Promise<'U> =\n            Promise(fun (resolve, reject) -> resolve (unbox<'U> (f x)))\n                .Finally(fun () -> x.Dispose())\n\n        [<Inline>]\n        member this.For(xs: seq<'T>, f: 'T -> Promise<unit>) : Promise<unit> =\n            For xs f\n\n        [<Inline>]\n        member this.Zero() : Promise<unit> =\n            Promise.Resolve(())\n\n        [<Inline>]\n        member this.Combine(p1: Promise<'T>, p2: Promise<'T>) : Promise<'T> =\n            p1.Then<'T>(fun _ -> p2)\n\n        [<Inline>]\n        member this.TryWith(p: Promise<'T>, f: exn -> Promise<'T>) : Promise<'T> =\n            p.Catch<'T>(unwrapExn >> f)\n\n        [<Inline>]\n        member this.TryFinally(p: Promise<'T>, f: unit -> unit) : Promise<'T> =\n            p.Finally(fun () -> f())\n\n        [<Inline>]\n        member this.Delay(f: unit -> Promise<'T>) : Promise<'T> =\n            Promise<'T>(fun (resolve, _) -> resolve (unbox<'T> (f())))\n\n    [<Inline>]\n    let Do = Builder()\n\n[<Extension; JavaScript>]\ntype PromiseExtensions =\n\n    [<Extension; Inline>]\n    static member AsAsync this = Promise.AsAsync this\n\n    [<Extension; Inline>]\n    static member AsTask this = Promise.AsTask this\n\n    [<Extension; Inline>]\n    static member AsPromise this = Promise.OfAsync this\n\n    [<Extension; Inline>]\n    static member AsPromise this = Promise.OfTask this\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Defines operators and functions that are automatically available whenever\n/// `WebSharper` is open.\n[<AutoOpen>]\nmodule WebSharper.JavaScript.Pervasives\n\nopen WebSharper\nmodule M = WebSharper.Core.Macros\n\n/// Casts an object to the desired type.\n[<Inline \"$x\">]\nlet As<'T> (x: obj) = X<'T>\n\n[<Inline \"$x * $y\">]\nlet ( *. ) x y = X<obj>\n\n[<Inline \"$x / $y\">]\nlet ( /. ) x y = X<obj>\n\n[<Inline \"$x % $y\">]\nlet ( %. ) x y = X<obj>\n\n[<Inline \"$x + $y\">]\nlet ( +. ) x y = X<obj>\n\n[<Inline \"$x - $y\">]\nlet ( -. ) x y = X<obj>\n\n[<Inline \"$x << $y\">]\nlet ( <<. ) x y = X<obj>\n\n[<Inline \"$x >> $y\">]\nlet ( >>. ) x y = X<obj>\n\n[<Inline \"$x >>> $y\">]\nlet ( >>>. ) x y = X<obj>\n\n[<Inline \"$x < $y\">]\nlet ( <. ) x y = X<bool>\n\n[<Inline \"$x > $y\">]\nlet ( >. ) x y = X<bool>\n\n[<Inline \"$x >= $y\">]\nlet ( >=. ) x y = X<bool>\n\n[<Inline \"$x <= $y\">]\nlet ( <=. ) x y = X<bool>\n\n[<Inline \"$x == $y\">]\nlet ( ==. ) x y = X<bool>\n\n[<Inline \"$x === $y\">]\nlet ( ===. ) x y = X<bool>\n\n[<Inline \"$x != $y\">]\nlet ( !=. ) x y = X<bool>\n\n[<Inline \"$x !== $y\">]\nlet ( !==. ) x y = X<bool>\n\n[<Inline \"$x | $y\">]\nlet ( |. ) x y = X<obj>\n\n[<Inline \"$x & $y\">]\nlet ( &. ) x y = X<obj>\n\n[<Inline \"$x ^ $y\">]\nlet ( ^. ) x y = X<obj>\n\n[<Inline \"$obj[$field]\">]\nlet ( ? ) (obj: obj) (field: string) = X<'T>\n\n[<Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) = X<unit>\n\n[<Inline \"[$x,$y]\">]\nlet ( => ) (x: string) (y: obj) = (x, y)\n\n[<JavaScript>]\nlet private NewFromSeq<'T> (fields: seq<string * obj>) : 'T =\n    let r = JS.Inline \"{}\"\n    for (k, v) in fields do\n        (?<-) r k v\n    As r\n\n/// Constructs a new object as if an object literal was used.\n[<Macro(typeof<M.New>); Inline>]\nlet New<'T> (fields: seq<string * obj>) = NewFromSeq<'T> fields\n\n/// Constructs an proxy to a remote object instance.\n[<Constant null>]\nlet Remote<'T> = X<'T>\n\n/// Gets JavaScript properties in sequence dynamically from an object.\n[<JavaScript; Macro(typeof<M.GetJS>)>]\nlet GetJS<'T> (x: obj) (items: seq<string>) =\n    let mutable x = x\n    for i in items do\n        x <- x?(i)\n    As<'T> x    \n\n/// Erases generic parameters inside this expression during WebSharper translation.\n/// You can get use this to translate `defaultof` inside a generic function.\n[<Macro(typeof<M.DefaultToUndefined>)>]\nlet DefaultToUndefined<'T> (x: 'T) = x\n\nmodule Optional =\n    /// Converts an F# option value to a JavaScript erased option\n    [<Inline>]\n    let ofOption x =\n        match x with\n        | None -> Undefined\n        | Some v -> Defined v\n\n    /// Converts a JavaScript erased option to an F# option value\n    [<Inline>]\n    let toOption x =\n        match x with\n        | Undefined -> None\n        | Defined v -> Some v\n\n    [<Inline \"$x !== undefined\">]\n    let isDefined x =\n        match x with\n        | Undefined -> false\n        | Defined _ -> true\n\n    [<Inline \"$x === undefined\">]\n    let isUndefined x =\n        match x with\n        | Undefined -> true\n        | Defined _ -> false\n\nmodule Union =\n// {{ generated by genInterop.fsx, do not modify\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice2 (x: Choice<'T1, 'T2>) = X<Union<'T1, 'T2>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice2 x =\n        match x with\n        | Union1Of2 v -> Choice1Of2 v\n        | Union2Of2 v -> Choice2Of2 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice3 (x: Choice<'T1, 'T2, 'T3>) = X<Union<'T1, 'T2, 'T3>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice3 x =\n        match x with\n        | Union1Of3 v -> Choice1Of3 v\n        | Union2Of3 v -> Choice2Of3 v\n        | Union3Of3 v -> Choice3Of3 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice4 (x: Choice<'T1, 'T2, 'T3, 'T4>) = X<Union<'T1, 'T2, 'T3, 'T4>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice4 x =\n        match x with\n        | Union1Of4 v -> Choice1Of4 v\n        | Union2Of4 v -> Choice2Of4 v\n        | Union3Of4 v -> Choice3Of4 v\n        | Union4Of4 v -> Choice4Of4 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice5 (x: Choice<'T1, 'T2, 'T3, 'T4, 'T5>) = X<Union<'T1, 'T2, 'T3, 'T4, 'T5>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice5 x =\n        match x with\n        | Union1Of5 v -> Choice1Of5 v\n        | Union2Of5 v -> Choice2Of5 v\n        | Union3Of5 v -> Choice3Of5 v\n        | Union4Of5 v -> Choice4Of5 v\n        | Union5Of5 v -> Choice5Of5 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice6 (x: Choice<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>) = X<Union<'T1, 'T2, 'T3, 'T4, 'T5, 'T6>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice6 x =\n        match x with\n        | Union1Of6 v -> Choice1Of6 v\n        | Union2Of6 v -> Choice2Of6 v\n        | Union3Of6 v -> Choice3Of6 v\n        | Union4Of6 v -> Choice4Of6 v\n        | Union5Of6 v -> Choice5Of6 v\n        | Union6Of6 v -> Choice6Of6 v\n    /// Converts an F# Choice value to a JavaScript erased union\n    [<Inline \"$x.$1\">]\n    let ofChoice7 (x: Choice<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>) = X<Union<'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7>>\n    /// Converts a JavaScript erased union to an F# Choice value\n    [<Inline>]\n    let toChoice7 x =\n        match x with\n        | Union1Of7 v -> Choice1Of7 v\n        | Union2Of7 v -> Choice2Of7 v\n        | Union3Of7 v -> Choice3Of7 v\n        | Union4Of7 v -> Choice4Of7 v\n        | Union5Of7 v -> Choice5Of7 v\n        | Union6Of7 v -> Choice6Of7 v\n        | Union7Of7 v -> Choice7Of7 v\n// }}\n\n/// The computation expression for JavaScript Promises.\n[<Inline>]\nlet promise = Promise.Builder()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule WebSharper.Json\n\nopen WebSharper.JavaScript\nmodule Js = WebSharper.Core.Json\nmodule Re = WebSharper.Core.Resources\n\ntype Resource() =\n    interface Re.IResource with\n        member this.Render ctx =\n            let name = if ctx.DebuggingEnabled then \"Json.js\" else \"Json.min.js\"\n            let ren = Re.Rendering.GetWebResourceRendering(ctx, typeof<Resource>, name)\n            fun html ->\n                let html = html Re.Scripts\n                html.WriteLine \"<!--[if lte IE 7.0]>\"\n                ren.Emit(html, Re.Js)\n                html.WriteLine \"<![endif]-->\"\n\n[<Inline \"$obj[$field]\">]\nlet ( ? ) (obj: obj) (field: string) = X<'T>\n\n[<Inline \"void ($obj[$key] = $value)\">]\nlet ( ?<- ) (obj: obj) (key: string) (value: obj) = X<unit>\n\n[<Inline \"$x\">]\nlet As<'T> (x: obj) = X<'T>\n\n[<Inline \"JSON.parse($json)\">]\n[<Require(typeof<Resource>)>]\nlet Parse (json: string) = X<obj>\n\n[<Inline \"JSON.stringify($obj)\">]\n[<Require(typeof<Resource>)>]\nlet Stringify (obj: obj) = X<string>\n\n/// Lookups an object by its FQN.\n[<JavaScript>]\nlet lookup<'T> (x: string []) : obj =\n    let k = x.Length\n    let mutable r = JS.Global\n    let mutable i = 0\n    while i < k do\n        let n  = x.[i]\n        let rn = (?) r n\n        if JS.TypeOf rn <> JS.Undefined then\n            r <- rn\n            i <- i + 1\n        else\n            failwith (\"Invalid server reply. Failed to find type: \" + n)\n    r\n\n/// Does a shallow generic mapping over an object.\n[<JavaScript>]\nlet shallowMap (f: obj -> obj) (x: obj) : obj =\n    if x :? System.Array then\n        As (Array.map f (As x))\n    else\n        match JS.TypeOf x with\n        | JS.Object ->\n            let r = New []\n            JS.ForEach x (fun y -> (?<-) r y (f ((?) x y)); false)\n            r\n        | _ ->\n            x\n\ntype SpecialTypes =\n    | List = 1\n    | Decimal = 2\n\n[<JavaScript>]\n[<Require(typeof<Resource>)>]\nlet Activate<'T> (json: obj) : 'T =\n    let types = if As json then json?(\"$TYPES\") : obj[] else JS.Undefined\n    let data =\n        if types ===. JS.Undefined then\n            json\n        else\n            for i = 0 to types.Length - 1 do\n                types.[i] <- \n                    match As<string[]> types.[i] with\n                    | [| \"WebSharper\"; \"List\"; \"T\" |] -> box SpecialTypes.List\n                    | [| \"WebSharper\"; \"Decimal\" |] -> box SpecialTypes.Decimal\n                    | t -> lookup t\n            json?(\"$DATA\")\n    let rec decode (x: obj) : obj =\n        if x = null then x else\n            match JS.TypeOf x with\n            | JS.Object ->\n                if x :? System.Array then\n                    shallowMap decode x\n                else\n                    let o  = shallowMap decode (x?(\"$V\"))\n                    let ti = x?(\"$T\")\n                    if ti ===. JS.Undefined then o else\n                        let t = types.[ti]\n                        if t ===. SpecialTypes.List then\n                            box (List.ofArray (As<obj[]> o))\n                        elif t ===. SpecialTypes.Decimal then\n                            box (JS.Global?WebSharper?Decimal?CreateDecimalBits(o))\n                        else\n                            let r = JS.New types.[ti]\n                            JS.ForEach o (fun k -> (?<-) r k ((?) o k); false)\n                            r\n            | _ ->\n                x\n    As (decode data)\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule WebSharper.Remoting\n\nopen WebSharper.JavaScript\n\nmodule R = WebSharper.Core.Remoting\n\n[<JavaScript>]\nlet mutable EndPoint = \"?\"\n\n[<JavaScript>]\nlet UseHttps() =\n    try\n        if not (JS.Window.Location.Href.StartsWith \"https://\") then\n            EndPoint <- JS.Window.Location.Href.Replace(\"http://\", \"https://\")\n            true\n        else false\n    with _ ->\n        // This function is intended to be callable from the top-level in a module,\n        // which means that it will be (unnecessarily) called on the server too\n        // and throw NotImplementedException. Just silence it.\n        false\n\ntype Data = string\ntype Headers = obj\ntype Url = string\n\n[<JavaScript>]\ntype IAjaxProvider =\n    [<Name \"Async\">]\n    abstract member Async : Url -> Headers -> Data -> (Data -> unit) -> (exn -> unit) -> unit\n\n    [<Name \"Sync\">]\n    abstract member Sync : Url -> Headers -> Data -> Data\n\n[<Direct @\"\n    var xhr = new XMLHttpRequest();\n    var csrf = document.cookie.replace(new RegExp('(?:(?:^|.*;)\\\\s*csrftoken\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$'), '$1');\n    xhr.open('POST', $url, $async);\n    if ($async == true) {\n        xhr.withCredentials = true;\n    }\n    for (var h in $headers) {\n        xhr.setRequestHeader(h, $headers[h]);\n    }\n    if (csrf) {\n        xhr.setRequestHeader('x-csrftoken', csrf);\n    }\n    function k() {\n        if (xhr.status == 200) {\n            $ok(xhr.responseText)\n        } else if ($csrf && xhr.status == 403 && xhr.responseText == 'CSRF') {\n            $csrf();\n        } else {\n            var msg = 'Response status is not 200: ';\n            $err(new Error(msg + xhr.status));\n        }\n    }\n    if ('onload' in xhr) {\n        xhr.onload = xhr.onerror = xhr.onabort = k;\n    } else {\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState == 4) {\n                k();\n            }\n        };\n    }\n    xhr.send($data);\n\">]\nlet private ajax (async: bool) (url: Url) (headers: Headers) (data: Data)\n    (ok: Data -> unit) (err: exn -> unit) (csrf: unit -> unit) = ()\n\ntype XhrProvider [<JavaScript>] () =\n    interface IAjaxProvider with\n\n        [<JavaScript>]\n        member this.Async url headers data ok err =\n            ajax true url headers data ok err\n                (fun () -> ajax true url headers data ok err JS.Undefined)\n\n        [<JavaScript>]\n        member this.Sync url headers data =\n            let res = ref Unchecked.defaultof<_>\n            ajax false url headers data\n                (fun x -> res := x)\n                (fun e -> raise e)\n                (fun () ->\n                    ajax false url headers data\n                        (fun x -> res := x)\n                        (fun e -> raise e)\n                        JS.Undefined)\n            !res\n\n[<JavaScript>]\nlet mutable AjaxProvider = XhrProvider() :> IAjaxProvider\n\n[<JavaScript>]\nlet private makeHeaders (m: string) =\n    New [\n        \"content-type\" => \"application/json\"   \n        \"x-websharper-rpc\" => m\n    ]\n\n[<JavaScript>]\nlet private makePayload (data: obj []) =\n    Json.Stringify data\n\n[<JavaScript>]\ntype IRemotingProvider =\n    [<Name \"Sync\">]\n    abstract member Sync : string -> obj[] -> obj\n    [<Name \"Async\">]\n    abstract member Async : string -> obj[] -> Async<obj>\n    [<Name \"Task\">]\n    abstract member Task : string -> obj[] -> System.Threading.Tasks.Task<obj>\n    [<Name \"Send\">]\n    abstract member Send : string -> obj[] -> unit\n\n[<JavaScript>]\n[<Name \"WebSharper.Remoting.AjaxRemotingProvider\">]\ntype AjaxRemotingProvider() =\n    abstract EndPoint : string\n    override this.EndPoint = EndPoint\n\n    abstract AsyncBase : string * obj[] -> Async<obj> \n    override this.AsyncBase(m, data) = \n        async {\n            let headers = makeHeaders m\n            let payload = makePayload data\n            let! token = Async.CancellationToken\n            return! Async.FromContinuations (fun (ok, err, cc) ->\n                let waiting = ref true\n                let reg =\n                    token.Register(fun () ->\n                        if !waiting then\n                            waiting := false\n                            cc (new System.OperationCanceledException(token))\n                    )\n                let ok (x: Data) = \n                    if !waiting then\n                        waiting := false\n                        reg.Dispose()\n                        ok (Json.Activate (Json.Parse x))\n                let err (e: exn) =\n                    if !waiting then\n                        waiting := false\n                        reg.Dispose()\n                        err e\n                AjaxProvider.Async this.EndPoint headers payload ok err)\n        }\n\n    interface IRemotingProvider with\n        member this.Sync m data : obj =\n            let data = AjaxProvider.Sync this.EndPoint (makeHeaders m) (makePayload data)\n            Json.Activate (Json.Parse data)\n\n        member this.Async m data : Async<obj> =\n            this.AsyncBase(m, data)\n\n        member this.Task m data : System.Threading.Tasks.Task<obj> =\n            this.AsyncBase(m, data) |> Async.StartAsTask   \n\n        member this.Send m data =\n            Async.Start (Async.Ignore (this.AsyncBase(m, data)))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.JQuery\nmodule M = WebSharper.Core.Metadata\nmodule J = WebSharper.Core.Json\n\n/// An interface that has to be implemented by controls\n/// that depend on resources.\ntype IRequiresResources =\n    abstract member Requires : M.Info -> seq<M.Node>\n    abstract member Encode : M.Info * J.Provider -> list<string * J.Encoded>\n\n/// HTML content that can be used as the Body of a web Control.\n/// Can be zero, one or many DOM nodes.\ntype IControlBody =\n    /// Replace the given node with the HTML content.\n    /// The node is guaranteed to be present in the DOM.\n    /// Called exactly once on startup on an IControl's Body.\n    [<JavaScript; Name \"ReplaceInDom\">]\n    abstract ReplaceInDom : Dom.Node -> unit\n\n/// An interface that has to be implemented by controls that\n/// are subject to activation, ie. server-side controls that\n/// contain client-side elements.\ntype IControl =\n    inherit IRequiresResources\n    [<JavaScript; Name \"Body\">]\n    abstract member Body : IControlBody\n    abstract member Id : string\n\n[<AutoOpen>]\nmodule HtmlContentExtensions =\n\n    [<JavaScript>]\n    type private SingleNode(node: Dom.Node) =\n        interface IControlBody with\n            member this.ReplaceInDom(old) =\n                node.ParentNode.ReplaceChild(node, old) |> ignore\n\n    [<JavaScript>]\n    type IControlBody with\n        /// Create HTML content comprised of a single DOM node.\n        static member SingleNode (node: Dom.Node) =\n            new SingleNode(node) :> IControlBody\n\n[<JavaScript>]\nmodule Activator =\n\n    /// The identifier of the meta tag holding the controls.\n    [<Literal>]\n    let META_ID = \"websharper-data\"\n\n    let mutable Instances : obj = null\n\n    let private onReady (f: unit -> unit) =\n        let mutable readyFired = false\n        let rec ready() =\n            if not readyFired then\n                readyFired <- true\n                f()\n                JS.Document.RemoveEventListener(\"DOMContentLoaded\", ready, false)\n                JS.Window.RemoveEventListener(\"load\", ready, false)\n        if JS.Document?readyState = \"complete\" then\n            ready()\n        else\n            JS.Document.AddEventListener(\"DOMContentLoaded\", ready, false)\n            JS.Window.AddEventListener(\"load\", ready, false)\n\n    let private Activate() =\n        if As JS.Document then\n            let meta = JS.Document.GetElementById(META_ID)\n            if (As meta) then\n                onReady <| fun () ->\n                    let text = meta.GetAttribute(\"content\")\n                    let obj = Json.Activate (Json.Parse text)\n                    JS.GetFields obj\n                    |> Array.iter (fun (k, v) ->\n                        match v with\n                        | :? IControl as v ->\n                            let p = v.Body\n                            let old = JS.Document.GetElementById k\n                            p.ReplaceInDom old\n                        | _ -> ()\n                    )\n                    Instances <- obj\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Comparers\n\nopen WebSharper\n\n[<JavaScript>]\ntype private EquatableEqualityComparer<'T when 'T :> System.IEquatable<'T>>() =\n    inherit System.Collections.Generic.EqualityComparer<'T>()\n    override this.Equals(x, y) = (x :> System.IEquatable<_>).Equals(y)\n    override this.GetHashCode(x) = (box x).GetHashCode()\n\n[<JavaScript>]\ntype private BaseEqualityComparer<'T>() =\n    inherit System.Collections.Generic.EqualityComparer<'T>()\n    override this.Equals(x, y) = obj.Equals(box x, box y)\n    override this.GetHashCode(x) = (box x).GetHashCode()\n\n[<JavaScript>]\ntype private ComparableComparer<'T when 'T :> System.IComparable<'T>>() =\n    inherit System.Collections.Generic.Comparer<'T>()\n    override this.Compare(x, y) = (x :> System.IComparable<'T>).CompareTo(y)\n\n[<JavaScript>]\ntype private BaseComparer<'T when 'T : comparison>() =\n    inherit System.Collections.Generic.Comparer<'T>()\n    override this.Compare(x, y) = compare x y\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Defines macros used by proxy definitions.\nmodule private WebSharper.Utils\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nlet toSafe (s: string) =\n    if s ==. null then \"\" else s  \n\n[<JavaScript>]\nlet plusForPos (n: obj, s) =\n    if 0 <=. n then \"+\" + s else s     \n\n[<JavaScript>]\nlet spaceForPos (n: obj, s) =\n    if 0 <=. n then \" \" + s else s      \n\n[<Inline \"$s.substr(1)\">]\nlet skip1 (s: string) = X<string>\n\n[<JavaScript>]\nlet padNumLeft (s: string, l) =\n    let f = (As<string[]> s).[0]\n    if f = \" \" || f = \"+\" || f = \"-\" then\n        f + (skip1 s).PadLeft(l - 1, '0')\n    else s.PadLeft(l, '0')\n\n[<JavaScript>]\nlet printList (p: obj -> string, o: obj list) =\n    \"[\" + (o |> Seq.map p |> String.concat \"; \") + \"]\" \n\n[<JavaScript>]\nlet printArray (p: obj -> string, o: obj[]) =\n    if o ===. null then \"null\" else\n    \"[|\" + (o |> Array.map p |> String.concat \"; \") + \"|]\" \n\n[<JavaScript>]\nlet printArray2D (p: obj -> string, o: obj[,]) =\n    if o ===. null then \"null\" else\n     \"[[\" + (\n        seq {\n            let l2 = Array2D.length2 o\n            for i in 0 .. Array2D.length1 o - 1 ->\n                seq { for j in 0 .. l2 - 1 -> p o.[i, j] } \n                |> String.concat \"; \"\n        }\n        |> String.concat \"][\"\n     ) + \"]]\" \n\n[<JavaScript>]\nlet rec prettyPrint (o: obj) =\n    let printObject (o: obj) =\n        let s = string o\n        if s = \"[object Object]\" then\n            \"{\" + (JS.GetFields o |> Array.map (fun (k, v) -> k + \" = \" + prettyPrint v) |> String.concat \"; \") + \"}\"\n        else s\n    if o ===. null then \"null\" else\n    let t = JS.TypeOf o\n    if t  ==. JS.String then\n        \"\\\"\" + As o + \"\\\"\"\n    elif t  ==. JS.Object then\n        if o :? System.Array then\n            \"[|\" + (As o |> Array.map prettyPrint |> String.concat \"; \") + \"|]\"\n        else printObject o\n    else string o\n\n[<JavaScript>]\n[<Name \"WebSharper.Operators.charRange\">]\nlet charRange (min: char) (max: char) : seq<char> =\n    let minv = int min\n    let count = 1 + int max - minv\n    if count <= 0 then Seq.empty\n    else Seq.init count (fun x -> char (x + minv))\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.op\">]\nlet nullableOp (a: obj) (b: obj) f = if a ==. null || b ==. null then null else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.opL\">]\nlet nullableOpL (a: obj) (b: obj) f = if a ==. null then null else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.opR\">]\nlet nullableOpR (a: obj) (b: obj) f = if b ==. null then null else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmp\">]\nlet nullableCmp (a: obj) (b: obj) f = if a ==. null || b ==. null then false else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmpE\">]\nlet nullableCmpE (a: obj) (b: obj) f =\n    if a ==. null then\n        b ==. null\n    elif b ==. null then \n        false \n    else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmpL\">]\nlet nullableCmpL (a: obj) (b: obj) f = if a ==. null then false else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.cmpR\">]\nlet nullableCmpR (a: obj) (b: obj) f = if b ==. null then false else f a b\n\n[<JavaScript>]\n[<Name \"WebSharper.Nullable.conv\">]\nlet nullableConv (a: obj) f = if a ==. null then null else f a", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Implements concurrency primitives.\nmodule internal WebSharper.Concurrency\n\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype private OCE = System.OperationCanceledException\n\n[<JavaScript; Prototype false>]\ntype Result<'T> =\n    | Ok of 'T\n    | No of exn\n    | Cc of OCE\n  \n[<JavaScript; Prototype false>]\ntype CT =\n    { \n        [<Name \"c\">] mutable IsCancellationRequested : bool \n        [<Name \"r\">] Registrations : (unit -> unit)[]\n    }\n\n[<Inline \"$arr.push($item)\">]\nlet private push arr item = X<int>\n\n[<JavaScript>]\nlet internal noneCT =           \n    { \n        IsCancellationRequested = false\n        Registrations = [||]\n    }\n\n[<JavaScript>]\nlet internal Register (ct: CT) (callback: unit -> unit) =\n    if ct ===. noneCT then\n        { new System.IDisposable with\n            member this.Dispose() = ()\n        }\n    else\n        let i = push ct.Registrations callback - 1\n        { new System.IDisposable with\n            member this.Dispose() = ct.Registrations.[i] <- ignore\n        }\n\n[<JavaScript; Prototype false>]\ntype AsyncBody<'T> =\n    {\n        k  : Result<'T> -> unit\n        ct : CT\n    }\n\ntype Concurrent<'T>     = AsyncBody<'T> -> unit\nand private C<'T>       = Concurrent<'T>\n\ntype private Queue<'T>  = System.Collections.Generic.Queue<'T>\ntype Milliseconds       = int\n\ntype private Scheduler [<JavaScript>]() =\n    let mutable idle    = true\n    let robin           = Queue<unit->unit>()\n\n    [<JavaScript>]\n    let rec tick () =\n        let t = System.DateTime.Now\n        let mutable loop = true\n        while loop do\n            match robin.Count with\n            | 0 ->\n                idle <- true\n                loop <- false\n            | _ ->\n                robin.Dequeue()()\n                if System.DateTime.Now - t > System.TimeSpan.FromMilliseconds 40. then\n                    JS.SetTimeout tick 0 |> ignore\n                    loop <- false\n\n    [<JavaScript>]\n    member this.Fork(action: unit -> unit) =\n        robin.Enqueue action\n        if idle then\n            idle <- false\n            JS.SetTimeout tick 0 |> ignore\n\n[<JavaScript>]\nlet private scheduler = Scheduler()\n\n[<JavaScript>]\nlet internal defCTS = ref(new System.Threading.CancellationTokenSource())\n\n[<Inline>]\nlet fork action = scheduler.Fork action\n\n[<JavaScript>]\nlet private cancel c = c.k (Cc (new OCE(As<System.Threading.CancellationToken> c.ct)))\n\n[<JavaScript>]\nlet private checkCancel r =\n    ()\n    fun c -> if c.ct.IsCancellationRequested then cancel c else r c\n\n[<JavaScript; Pure>]\nlet Return (x: 'T) : C<'T> =\n    ()\n    fun c -> c.k (Ok x)\n\n[<JavaScript; Pure>]\nlet Zero =\n    Return ()\n\n[<JavaScript; Pure>]\nlet Bind (r: C<'T>, f: 'T -> C<'R>) =\n    checkCancel <| fun c ->\n        r { \n            k = function \n                | Ok x -> fork (fun () -> try f x c with e -> c.k (No e))\n                | res  -> fork (fun () -> c.k (As res)) // error or cancellation\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet Combine (a: C<unit>, b: C<'T>) : C<'T> = \n    Bind (a, fun _ -> b)\n\n[<Inline>]\nlet Ignore (r: C<'T>): C<unit> = As<C<unit>> r\n\n[<JavaScript; Pure>]\nlet Delay (mk: unit -> C<'T>) : C<'T> =\n    ()\n    fun c ->\n        try mk () c with e -> c.k (No e)\n\n[<JavaScript; Pure>]\nlet TryFinally (run: C<'T>, f: unit -> unit) : C<'T> =\n    ()\n    fun c ->\n        run {\n            k = fun r -> \n                try f ()\n                    c.k r \n                with e -> c.k (No e)\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet TryWith (r: C<'T>, f: exn -> C<'T>) : C<'T> =\n    ()\n    fun c ->\n        r {\n            k = function\n                | Ok x -> c.k (Ok x)\n                | No e as res -> try f e c with e -> c.k (As res)\n                | res -> c.k (As res)\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet Catch (r : C<'T>) : C<Choice<'T, exn>> =\n    ()\n    fun c ->\n        try r {\n                k = function \n                    | Ok x -> c.k (Ok (Choice1Of2 x))\n                    | No e -> c.k (Ok (Choice2Of2 e))\n                    | res  -> c.k (As res)\n                ct = c.ct\n            }\n        with e -> c.k (Ok (Choice2Of2 e))\n\n[<JavaScript; Pure>]\nlet GetCT : C<CT> =\n    ()\n    fun c -> c.k (Ok c.ct)\n\n[<JavaScript; Pure>]\nlet FromContinuations (subscribe: ('T -> unit) * (exn -> unit) * (OCE -> unit) -> unit) : C<'T> =\n    ()\n    fun c ->\n        let continued = ref false\n        let once cont : unit =\n            if !continued then failwith \"A continuation provided by Async.FromContinuations was invoked multiple times\" else\n            continued := true\n            fork cont   \n        subscribe (\n            fun a -> once (fun () -> c.k (Ok a))\n        ,   fun e -> once (fun () -> c.k (No e))\n        ,   fun e -> once (fun () -> c.k (Cc e))\n        )\n\n[<JavaScript>]\nlet StartWithContinuations (c: C<'T>, s: 'T -> unit, f: exn -> unit, cc: OCE -> unit, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    if not ct.IsCancellationRequested then\n        c {\n            k = function\n                | Ok x -> s x\n                | No e -> f e\n                | Cc e -> cc e\n            ct = ct\n        }\n\n[<JavaScript>]\nlet UncaughtAsyncError (e: exn) =\n    Console.Log (\"WebSharper: Uncaught asynchronous exception\", e)\n\n[<JavaScript>]\nlet Start (c: C<unit>, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    fork (fun () -> \n        if not ct.IsCancellationRequested then\n            c {\n                k = function\n                    | No e -> UncaughtAsyncError e\n                    | _ -> ()\n                ct = ct\n            }\n    )\n\n[<JavaScript>]\nlet StartImmediate (c: C<unit>, ctOpt) =\n    let ct = defaultArg ctOpt (As !defCTS)\n    if not ct.IsCancellationRequested then\n        c {\n            k = function\n                | No e -> UncaughtAsyncError e\n                | _ -> ()\n            ct = ct\n        }\n\n#nowarn \"40\"\n\n[<JavaScript; Pure>]\nlet AwaitEvent (e: IEvent<'T>, ca: option<unit -> unit>) : C<'T> =\n    ()\n    fun c ->\n        let mutable sub = JS.Undefined<System.IDisposable>\n        let mutable creg = JS.Undefined<System.IDisposable>\n        sub <-\n            e.Subscribe (fun x -> \n                sub.Dispose()\n                creg.Dispose()\n                fork (fun () -> c.k (Ok x))        \n            )\n        creg <-\n            Register c.ct (fun () -> \n                match ca with\n                | Some ca ->\n                    ca()\n                | _ ->\n                    sub.Dispose()\n                    fork (fun () -> cancel c)    \n            ) \n\n[<JavaScript; Pure>]\nlet AwaitTask (t: System.Threading.Tasks.Task) : C<unit> =\n    FromContinuations (fun (ok, err, cc) ->\n        if t.Status = System.Threading.Tasks.TaskStatus.Created then\n            t.Start()\n        t.ContinueWith(fun t ->\n            if t.IsCanceled then\n                cc (OCE())\n            elif t.IsFaulted then\n                err t.Exception\n            else\n                ok()   \n        ) |> ignore\n    )\n\n[<JavaScript; Pure>]\nlet AwaitTask1 (t: System.Threading.Tasks.Task<'T>) : C<'T> =\n    FromContinuations (fun (ok, err, cc) ->\n        if t.Status = System.Threading.Tasks.TaskStatus.Created then\n            t.Start()\n        t.ContinueWith(fun (t: System.Threading.Tasks.Task<'T>) ->\n            if t.IsCanceled then\n                cc (OCE())\n            elif t.IsFaulted then\n                err t.Exception\n            else\n                ok t.Result  \n        ) |> ignore\n    )\n\n[<JavaScript>]\nlet StartAsTask (c: C<'T>, ctOpt) =\n    let tcs = System.Threading.Tasks.TaskCompletionSource<'T>()\n    fork (fun () ->\n        StartWithContinuations (c, tcs.SetResult, tcs.SetException, (fun _ -> tcs.SetCanceled()), ctOpt)\n    )\n    tcs.Task\n\n[<JavaScript>]\nlet StartImmediateAsTask (c: C<'T>, ctOpt) =\n    let tcs = System.Threading.Tasks.TaskCompletionSource<'T>()\n    StartWithContinuations (c, tcs.SetResult, tcs.SetException, (fun _ -> tcs.SetCanceled()), ctOpt)\n    tcs.Task\n\n[<JavaScript; Pure>]\nlet Sleep (ms: Milliseconds) : C<unit> =\n    ()\n    fun c ->\n        let mutable pending = JS.Undefined<JS.Handle>\n        let mutable creg = JS.Undefined<System.IDisposable>\n        pending <-\n            JS.SetTimeout (fun () -> \n                creg.Dispose()\n                fork (fun () -> c.k (Ok ()))\n            ) ms\n        creg <-\n            Register c.ct (fun () -> \n                JS.ClearTimeout pending\n                fork (fun () -> cancel c)\n            )\n\n[<JavaScript; Pure>]\nlet Parallel (cs: seq<C<'T>>) : C<'T[]> =\n    let cs = Array.ofSeq cs\n    if cs.Length = 0 then Return [||] else\n    fun c ->\n        let n = Array.length cs\n        let o = ref n\n        let a = As<'T[]>(JavaScript.Array(n))\n        let accept i x =\n            match !o, x with\n            | 0, _     -> ()\n            | 1, Ok x  -> a.[i] <- x; o := 0; c.k (Ok a)\n            | n, Ok x  -> a.[i] <- x; o := n - 1\n            | n, res   -> o := 0; c.k (As res)\n        Array.iteri (fun i run ->\n            fork (fun () -> run { k = accept i; ct = c.ct }))\n            cs\n\n[<JavaScript; Pure>]\nlet StartChild (r : C<'T>, t: Milliseconds option) : C<C<'T>> =\n    ()\n    fun c ->\n        let inTime = ref true\n        let cached = ref None\n        let queue  = Queue()\n        let tReg =\n            match t with\n            | Some timeout ->\n                JS.SetTimeout (fun () ->\n                    inTime := false\n                    let err = No (System.TimeoutException())\n                    while queue.Count > 0 do\n                        queue.Dequeue() err\n                ) timeout |> Some     \n            | _ -> None\n        fork (fun _ ->\n            if not c.ct.IsCancellationRequested then\n                r {\n                    k = fun res ->\n                        if !inTime then\n                            cached := Some res\n                            match tReg with\n                            | Some r -> JS.ClearTimeout r\n                            | _ -> ()\n                            while queue.Count > 0 do\n                                queue.Dequeue() res\n                    ct = c.ct\n                }\n        )\n        let r2 c2 =            \n            if !inTime then\n                match cached.Value with\n                | Some x    -> c2.k x\n                | None      -> queue.Enqueue c2.k\n            else c2.k (No (System.TimeoutException()))\n        c.k (Ok r2)\n\n[<JavaScript>]\nlet StartChildAsTask (r : C<'T>) =\n    ()\n    fun c ->\n        let ch = StartChild(r, None)\n        ch {\n            k = function\n                | Ok r2 -> c.k (Ok (StartImmediateAsTask(r2, Some c.ct)))\n                | _ -> ()\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet OnCancel (action: unit -> unit) : C<System.IDisposable> =\n    ()\n    fun c -> c.k (Ok (Register c.ct action))\n\n[<JavaScript; Pure>]\nlet TryCancelled (run: C<'T>, comp: OCE -> unit) : C<'T> =\n    ()\n    fun c ->\n        run {\n            k = function\n                | Cc e as res ->\n                    comp e\n                    c.k res\n                | res -> c.k res\n            ct = c.ct\n        }\n\n[<JavaScript; Pure>]\nlet Using (x: 'U, f: 'U -> C<'T>) =\n    TryFinally (f x, fun () -> (x :> System.IDisposable).Dispose())\n\n[<JavaScript; Pure>]\nlet rec While (g: unit -> bool, c: C<unit>) : C<unit> = \n    if g() then \n        Bind (c, fun () -> While (g, c)) \n    else\n        Return ()\n\n[<JavaScript; Pure>]\nlet rec For (s: seq<'T>, b: 'T -> C<unit>) =\n    Using (s.GetEnumerator(), fun ie -> \n        While ((fun () -> ie.MoveNext()), \n            Delay (fun () -> b ie.Current)))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides an `IEnumerator` implementation.\nmodule private WebSharper.Enumerator\n\nopen WebSharper.JavaScript\ntype IE<'T> = System.Collections.Generic.IEnumerator<'T>\n\n/// Represents an unfolding enumerator.\n[<Sealed>]\ntype T<'S,'T> [<JavaScript>] (s: 'S, c: 'T, n: T<'S,'T> -> bool, d: T<'S,'T> -> unit) =\n    [<Inline; JavaScript>] \n    member this.MoveNext() = n this\n    member this.State with [<Inline; JavaScript>] get() = s and [<Inline; JavaScript>] set (v: 'S) = this?s <- v\n    member this.Current with [<Inline; JavaScript>] get() = c and [<Inline; JavaScript>] set (v: 'T) = this?c <- v\n\n    interface System.Collections.IEnumerator with\n        [<JavaScript>] \n        member this.MoveNext() = n this\n        [<JavaScript>]\n        member this.Current with get() = box c\n        member this.Reset() = failwith \"IEnumerator.Reset not supported\"\n\n    interface System.Collections.Generic.IEnumerator<'T> with\n        [<JavaScript>]\n        member this.Current with get() = c\n\n    interface System.IDisposable with\n        [<JavaScript>] \n        member this.Dispose() = if As d then d this\n\n/// Constructs a new `IEnumerator` by unfolding a function.\n[<Inline>]\n[<JavaScript>]\nlet New<'S,'T> (state: 'S) (next: T<'S,'T> -> bool) =\n    As<IE<'T>> (new T<'S,'T>(state, As null, next, As JS.Undefined)) \n\n[<Inline>]\n[<JavaScript>]\nlet NewDisposing<'S,'T> (state: 'S) dispose (next: T<'S,'T> -> bool) =\n    As<IE<'T>> (new T<'S,'T>(state, As null, next, dispose))\n\n[<Inline \"$x.GetEnumerator()\">]\nlet getEnumerator (x: obj) : IE<'T> = X\n\n[<JavaScript>]\nlet ArrayEnumerator (s: obj[]) =\n    New 0 (fun e ->\n        let i = e.State\n        if i < s.Length then\n            e.Current <- As s.[i]\n            e.State <- i + 1\n            true\n        else\n            false)\n\n[<JavaScript>]\nlet StringEnumerator (s: string) =\n    New 0 (fun e ->\n        let i = e.State\n        if i < s.Length then\n            e.Current <- As s.[i]\n            e.State <- i + 1\n            true\n        else\n            false)\n\n[<JavaScript>]\nlet Get (x: seq<'T>) : IE<'T> =\n    if x :? System.Array then\n        ArrayEnumerator (As x)\n    elif JS.TypeOf x = JS.String then\n        StringEnumerator (As x)\n    else\n        getEnumerator x\n\n[<Inline \"'GetEnumerator0' in $x ? $x.GetEnumerator0() : $x.GetEnumerator()\">]\nlet getEnumerator0 (x: obj) : System.Collections.IEnumerator = X\n\n[<JavaScript>]\nlet Get0 (x: System.Collections.IEnumerable) : System.Collections.IEnumerator =\n    if x :? System.Array then\n        As (ArrayEnumerator (As x))\n    elif JS.TypeOf x = JS.String then\n        As (StringEnumerator (As x))\n    else\n        getEnumerator0 x\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Provides seq/list/array proxies\n[<JavaScript>]\nmodule internal WebSharper.CollectionInternals\n\nopen WebSharper.JavaScript\n\n[<Name \"WebSharper.Arrays.splitInto\">]\nlet ArraySplitInto count (arr: 'T[]) =\n    if count <= 0 then failwith \"Count must be positive\"\n    let len = arr.Length\n    if len = 0 then\n        [| |]\n    else\n        let count = min count len\n        let res = Array.zeroCreate count : 'T[][]\n        let minChunkSize = len / count\n        let mutable startIndex = 0\n        for i = 0 to len % count - 1 do\n            res.JS.[i] <- Array.sub arr startIndex (minChunkSize + 1)\n            startIndex <- startIndex + minChunkSize + 1\n        for i = len % count to count - 1 do\n            res.JS.[i] <-  Array.sub arr startIndex minChunkSize\n            startIndex <- startIndex + minChunkSize\n        res\n\n[<Name \"WebSharper.Arrays.contains\">]\nlet ArrayContains (item: 'T) (arr: 'T[])  =\n    let mutable c = true\n    let mutable i = 0\n    let l = arr.Length\n    while c && i < l do\n        if arr.JS.[i] = item then\n            c <- false\n        else\n            i <- i + 1\n    not c\n\n[<Name \"WebSharper.Arrays.tryFindBack\">]\nlet ArrayTryFindBack f (arr: _ []) =\n    let mutable res = None\n    let mutable i = Array.length arr - 1\n    while i >= 0 && Option.isNone res do\n        let r = arr.JS.[i]\n        if f r then res <- Some r\n        i <- i - 1\n    res\n\n[<Name \"WebSharper.Arrays.tryFindIndexBack\">]\nlet ArrayTryFindIndexBack f (arr: _ []) =\n    let mutable res = None\n    let mutable i = Array.length arr - 1\n    while i >= 0 && Option.isNone res do\n        if f arr.[i] then res <- Some i\n        i <- i - 1\n    res\n\n[<Name \"WebSharper.Arrays.mapFold\">]\nlet ArrayMapFold<'T, 'S, 'R> (f: 'S -> 'T -> 'R * 'S) (zero: 'S) (arr: 'T[]) : 'R[] * 'S =\n    let r = JavaScript.Array(Array.length arr)\n    let mutable acc = zero\n    for i = 0 to Array.length arr - 1 do\n        let a, b = f acc arr.JS.[i]\n        r.[i] <- a\n        acc <- b \n    r.Self, acc\n\n[<Name \"WebSharper.Arrays.mapFoldBack\">]\nlet ArrayMapFoldBack<'T,'S,'R> (f: 'T -> 'S -> 'R * 'S) (arr: 'T[]) (zero: 'S) : 'R[] * 'S =\n    let r = JavaScript.Array<'R>(Array.length arr)\n    let mutable acc = zero\n    let len = Array.length arr\n    for j = 1 to len do\n        let i = len - j\n        let a, b = f arr.JS.[i] acc\n        r.[i] <- a\n        acc <- b \n    r.Self, acc\n\n[<Name \"WebSharper.Arrays.mapInPlace\">]\nlet mapInPlace (f: 'T1 -> 'T2) (arr: 'T1 []) =\n    for i = 0 to Array.length arr - 1 do\n        arr.JS.[i] <- As (f arr.JS.[i])\n\n[<Name \"WebSharper.Arrays.mapiInPlace\">]\nlet mapiInPlace (f: int -> 'T1 -> 'T2) (arr: 'T1 []) : 'T2[] =\n    for i = 0 to Array.length arr - 1 do\n        arr.JS.[i] <- As (f i arr.JS.[i])\n    As arr\n\n[<Name \"WebSharper.Arrays.sortInPlaceByDescending\">]\nlet ArraySortInPlaceByDescending<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) =\n    (mapiInPlace (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> - compare (snd x) (snd y)) |> mapInPlace fst \n\n[<Name \"WebSharper.Seq.tryHead\">]\nlet SeqTryHead (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then Some e.Current else None\n\n[<Name \"WebSharper.Seq.tryItem\">]\nlet SeqTryItem i (s: seq<'T>) =\n    if i < 0 then None else\n    let mutable j = 0\n    use e = Enumerator.Get s\n    let mutable go = true\n    while go && j <= i do\n        if e.MoveNext() then\n            j <- j + 1\n        else\n            go <- false\n    if go then Some e.Current else None\n\n[<Name \"WebSharper.Seq.tryLast\">]\nlet SeqTryLast (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then \n        while e.MoveNext() do ()\n        Some e.Current \n    else None\n\n[<Name \"WebSharper.Seq.chunkBySize\">]\nlet SeqChunkBySize (size: int) (s: seq<'T>) =\n    if size <= 0 then failwith \"Chunk size must be positive\"\n    Enumerable.Of <| fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> o.Dispose()) <| fun e ->\n            if e.State && o.MoveNext() then\n                let res = [|o.Current|]\n                while e.State && res.Length < size do\n                    if o.MoveNext() then\n                        res.JS.Push o.Current |> ignore\n                    else \n                        e.State <- false\n                e.Current <- res\n                true\n            else false\n\n[<Name \"WebSharper.Arrays.countBy\">]\nlet ArrayCountBy (f: 'T -> 'K) (a: 'T[]) : ('K * int)[] =\n    let d = System.Collections.Generic.Dictionary<'K, int>()\n    let keys = JavaScript.Array()\n    for i = 0 to a.Length - 1 do\n        let c = a.JS.[i]\n        let k = f c\n        if d.ContainsKey(k) then\n            d.[k] <- d.[k] + 1 \n        else\n            keys.Push(k) |> ignore\n            d.Add(k, 1)\n    As<'K[]> keys |> mapInPlace (fun k -> (k, d.[k]))\n    As keys\n\n[<Name \"WebSharper.Seq.except\">]\nlet SeqExcept (itemsToExclude: seq<'T>) (s: seq<'T>) =\n    Enumerable.Of <| fun () ->\n        let o  = Enumerator.Get s\n        let seen = System.Collections.Generic.HashSet(itemsToExclude)\n        Enumerator.NewDisposing () (fun _ -> o.Dispose()) <| fun e ->\n            if o.MoveNext() then\n                let mutable cur = o.Current\n                let mutable has = seen.Add(cur)\n                while not has && o.MoveNext() do\n                    cur <- o.Current\n                    has <- seen.Add(cur)\n                if has then\n                    e.Current <- cur\n                    true\n                else\n                    false\n            else\n                false\n\n[<Name \"WebSharper.List.skip\">]\nlet ListSkip i (l : list<'T>) =\n    let mutable res = l\n    for j = 1 to i do\n        match res with \n        | _ :: t ->\n            res <- t\n        | [] -> failwith \"Input list too short.\"\n    res\n\n[<Name \"WebSharper.Arrays.groupBy\">]\nlet ArrayGroupBy (f: 'T -> 'K when 'K : equality) (a: 'T[]) : ('K * 'T[])[] =\n    let d = System.Collections.Generic.Dictionary<'K, 'T[]>()\n    let keys = JavaScript.Array()\n    for i = 0 to a.Length - 1 do\n        let c = a.JS.[i]\n        let k = f c\n        if d.ContainsKey(k) then\n            d.[k].JS.Push(c) |> ignore\n        else\n            keys.Push(k) |> ignore\n            d.Add(k, [| c |])\n    As<'K[]> keys |> mapInPlace (fun k -> (k, d.[k]))\n    As keys\n\n[<Name \"WebSharper.Seq.insufficient\">]\nlet InsufficientElements() =\n    failwith \"The input sequence has an insufficient number of elements.\"\n\n[<Name \"WebSharper.Seq.last\">]\nlet SeqLast (s: seq<_>) =\n    use e = Enumerator.Get s\n    if not <| e.MoveNext() then InsufficientElements()\n    else \n        while e.MoveNext() do ()\n        e.Current\n\n[<Name \"WebSharper.Seq.contains\">]\nlet SeqContains (el: 'T) (s: seq<'T>) =\n    use e = Enumerator.Get s\n    let mutable r = false\n    while not r && e.MoveNext() do\n        r <- e.Current = el\n    r\n\n[<Name \"WebSharper.List.skipWhile\">]\nlet rec ListSkipWhile<'T> (predicate : 'T -> bool) (list : list<'T>) : list<'T> =\n    let mutable rest = list\n    while not (List.isEmpty rest) && predicate (List.head rest) do\n        rest <- List.tail rest \n    rest\n\n[<Name \"WebSharper.Seq.nonNegative\">]\nlet InputMustBeNonNegative() =\n    failwith \"The input must be non-negative.\"\n\n[<Name \"WebSharper.Arrays.transposeArray\">]\nlet ArrayTranspose (array:'T[][]) : 'T[][] =\n    let len = array.Length\n    if len = 0 then [||] else\n    let lenInner = array.[0].Length\n\n    for j in 1..len-1 do\n        if lenInner <> array.[j].Length then\n            failwith \"The arrays have different lengths.\"\n\n    let result = Array lenInner\n    for i in 0..lenInner-1 do\n        result.[i] <- Array len\n        for j in 0..len-1 do\n            result.[i].[j] <- array.[j].[i]\n    As result", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\n#nowarn \"864\"\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<System.Object>)>]\n[<Name \"WebSharper.Obj\">]\ntype private ObjectProxy() =\n\n    [<Inline>]\n    override this.GetHashCode() = Unchecked.hash this\n\n    [<Inline>]\n    override this.Equals(obj: obj) = Unchecked.equals (this :> obj) obj\n\n    [<Name \"GetHashCode\">]\n    member this.GetHashCodeImpl() = -1\n\n    [<Name \"Equals\">]\n    member this.EqualsImpl(obj: obj) = this ===. obj\n\n    [<Inline>]\n    static member Equals(a: obj, b: obj) = Unchecked.equals a b\n\n    [<Inline>]\n    static member ReferenceEquals(a: obj, b: obj) = a ===. b\n\n    [<Inline>]\n    static member op_Equality(a: obj, b: obj) = Unchecked.equals a b\n\n    [<Inline>]\n    static member op_Inequality(a: obj, b: obj) = not (Unchecked.equals a b)\n\n    [<Inline>]\n    override this.ToString() = string this\n\n[<Proxy(typeof<System.ValueType>)>]\ntype private ValueTypeProxy =\n\n    [<Inline>]\n    override this.GetHashCode() = Unchecked.hash this\n\n    [<Inline>]\n    override this.Equals(obj: obj) = Unchecked.equals (this :> obj) obj\n\n    [<Inline>]\n    override this.ToString() = string this", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.LanguagePrimitives+IntrinsicFunctions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.IntrinsicFunctionProxy\n\nopen System\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Inline \"$value\">]\nlet UnboxGeneric<'T> (value: obj) = X<'T>\n\n[<Inline \"$value\">]\nlet UnboxFast<'T> (value: obj) = X<'T>\n\n[<Macro(typeof<M.TypeTest>)>]\nlet TypeTestGeneric<'T> (value: obj) = X<bool>\n\n[<Macro(typeof<M.TypeTest>)>]\nlet TypeTestFast<'T> (value: obj) = X<bool>\n\n[<Inline \"$arr.length\">]\nlet GetArray2DLength1 (arr: 'T[,]) = X<int>\n\n[<Inline \"$arr.length ? $arr[0].length : 0\">]\nlet GetArray2DLength2 (arr: 'T[,]) =  X<int>\n\n[<Name \"WebSharper.Arrays.checkBounds\">]\nlet checkBounds (arr: 'T[]) (n: int) =\n    if n < 0 || n >= Array.length arr then\n        failwith \"Index was outside the bounds of the array.\"\n\n[<Name \"WebSharper.Arrays.checkBounds2D\">]\nlet checkBounds2D<'T> (arr: 'T[,]) (n1: int) (n2: int) =\n    if n1 < 0 || n2 < 0 || n1 >= GetArray2DLength1 arr\n        || n2 >= GetArray2DLength2 arr then\n        raise (new IndexOutOfRangeException())\n\n[<Name \"WebSharper.Arrays.checkRange\">]\n\nlet checkRange (arr: 'T []) (start: int) (size: int) : unit =\n    if (size < 0) || (start < 0) || (Array.length arr < start + size) then\n        failwith \"Index was outside the bounds of the array.\"\n\n[<Inline \"$arr[$n]\">]\nlet GetArrayInternal<'T> (arr: 'T[]) (n:int) = X<'T>\n\n[<Inline \"void ($arr[$n] = $x)\">]\nlet SetArrayInternal<'T> (arr: 'T[]) (n:int) (x:'T) = ()\n\n[<Name \"WebSharper.Arrays.set\">]\nlet SetArray<'T> (arr: 'T[]) (n: int) (x: 'T) =\n    checkBounds arr n\n    SetArrayInternal arr n x\n\n[<Inline \"$s[$ix]\">]\n[<Name \"WebSharper.Strings.get\">]\nlet GetString (s: string) (ix: int) = X<char>\n\n[<Name \"WebSharper.Arrays.get\">]\nlet GetArray<'T> (arr: 'T[]) (n: int) =\n    checkBounds arr n\n    GetArrayInternal arr n\n\n[<Inline \"$x.slice($start,$start+$length)\">]\nlet private subArray (x: 'T) start length = X<'T>\n\n[<Name \"WebSharper.Arrays.sub\">]\nlet GetArraySub<'T> (arr: 'T[]) start length =\n    checkRange arr start length\n    subArray arr start length\n\n[<Name \"WebSharper.Arrays.setSub\" >]\nlet SetArraySub<'T> (arr: 'T[]) start len (src: 'T[]) =\n    for i = 0 to len - 1 do\n        arr.[start+i] <- src.[i]\n\n[<Inline \"$arr[$n1][$n2]\">]\nlet GetArray2DInternal (arr: 'T[,]) (n1:int) (n2:int) = X<'T>\n\n[<Name \"WebSharper.Arrays.get2D\" >]\nlet GetArray2D (arr: 'T[,]) (n1: int) (n2: int) =\n    checkBounds2D arr n1 n2\n    GetArray2DInternal arr n1 n2\n\n[<Inline \"void ($arr[$n1][$n2] = $x)\">]\nlet SetArray2DInternal (arr: 'T[,]) (n1:int) (n2:int) (x:'T) = ()\n\n\n[<Name \"WebSharper.Arrays.set2D\" >]\nlet SetArray2D (arr: 'T[,]) (n1: int) (n2: int) (x: 'T) =\n    checkBounds2D arr n1 n2\n    SetArray2DInternal arr n1 n2 x\n\n[<Name \"WebSharper.Arrays.zeroCreate2D\" >]\nlet Array2DZeroCreate<'T> (n:int) (m:int) =\n    let arr = As<'T[,]>(Array.init n (fun _ -> Array.zeroCreate m))\n    arr?dims <- 2\n    arr\n\n[<Name \"WebSharper.Arrays.sub2D\" >]\nlet GetArray2DSub<'T> (src: 'T[,]) src1 src2 len1 len2 =\n    let len1 = (if len1 < 0 then 0 else len1)\n    let len2 = (if len2 < 0 then 0 else len2)\n    let dst = Array2DZeroCreate len1 len2\n    for i = 0 to len1 - 1 do\n        for j = 0 to len2 - 1 do\n            dst.[i,j] <- src.[src1 + i, src2 + j]\n    dst\n\n[<Name \"WebSharper.Arrays.setSub2D\" >]\nlet SetArray2DSub<'T> (dst: 'T[,]) src1 src2 len1 len2 (src: 'T[,]) =\n    for i = 0 to len1 - 1 do\n        for j = 0 to len2 - 1 do\n            dst.[src1+i, src2+j] <- src.[i, j]\n\n[<Name \"WebSharper.Arrays.length\" >]\nlet GetLength<'T> (arr: System.Array) =\n    match arr?dims with\n    | 2 -> GetArray2DLength1 (As arr) * GetArray2DLength1 (As arr)\n    | _ -> Array.length (As arr)\n\n[<Name \"WebSharper.checkThis\">]\nlet CheckThis (this: 'T) =\n    if this = null then\n        invalidOp \"The initialization of an object or value resulted in an object or value being accessed recursively before it was fully initialized.\"\n    else this\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen WebSharper.JavaScript\nmodule F = WebSharper.IntrinsicFunctionProxy\ntype private IComparer = System.Collections.IComparer\ntype private IComparer<'T> = System.Collections.Generic.IComparer<'T>\ntype private JSArray<'T> = WebSharper.JavaScript.Array<'T>\ntype private Comparer<'T> = System.Collections.Generic.Comparer<'T>\n\n[<AutoOpen; JavaScript>]\nmodule ArrayProxy =\n\n    [<Name \"WebSharper.Arrays.binarySearch\">]\n    let binarySearch (haystack: 'T[]) (comparer: 'T -> int) start finish =\n        if start < 0 then raise (ArgumentOutOfRangeException(\"index\", \"Non-negative number required.\"))\n        if finish > haystack.Length then raise (ArgumentException(\"Offset and length were out of bounds for the array or count is greater than the number of elements from index to the end of the source collection.\"))\n        if finish < start then raise (ArgumentOutOfRangeException(\"length\", \"Non-negative number required.\"))\n        let rec search left right =\n            if left > right then\n                ~~~left\n            else\n                let pivot = (left + right) / 2\n                let cmp = comparer haystack.[pivot]\n                if left = right then\n                    if cmp = 0 then left\n                    elif cmp > 0 then ~~~(left + 1)\n                    else ~~~left\n                elif cmp <= 0 then\n                    search left pivot\n                else\n                    search (pivot + 1) right\n        search start (finish - 1)\n\n    [<Name \"WebSharper.Arrays.binarySearchComparer\">]\n    let objBinarySearchComparer (needle: obj) =\n       // Check for an implementation of IComparable\n       if needle?CompareTo0 then\n           As<IComparable>(needle).CompareTo\n       else\n           fun x ->\n               if x?CompareTo0 then\n                   -As<IComparable>(x).CompareTo(needle)\n               else\n                   InvalidOperationException(\n                       \"Failed to compare two elements in the array.\",\n                       ArgumentException(\"At least one object must implement IComparable.\"))\n                   |> raise\n\n    [<Name \"WebSharper.Arrays.sortInternal\">]\n    let sortInternal (keys: 'K[]) (index: int) (length: int) (comp: 'K * 'K -> int) (swap: int -> int -> unit) : unit =\n        let partition l r =\n            let pivot = keys.JS.[r]\n            let mutable i = l - 1\n            for j = l to r - 1 do\n                if comp(keys.JS.[j], pivot) < 0 then\n                    i <- i + 1\n                    swap i j\n            if comp(keys.JS.[r], keys.JS.[i + 1]) < 0 then\n                swap (i + 1) r\n            i + 1\n        let rec quicksort l r =\n            if l < r then\n                let p = partition l r\n                quicksort l (p - 1)\n                quicksort (p + 1) r\n        quicksort index (index + length - 1)\n\n    [<Name \"WebSharper.Arrays.sortSub\">]\n    let sortSub (keys: 'K[]) (index: int) (length: int) (comp: 'K * 'K -> int) : unit =\n        let swap i j =\n            let k = keys.JS.[i]\n            keys.JS.[i] <- keys.JS.[j]\n            keys.JS.[j] <- k\n        sortInternal keys index length comp swap\n\n    [<Name \"WebSharper.Arrays.sortByKeys\">]\n    let sortByKeys (keys: 'K[]) (items: 'V[]) (index: int) (length: int) (comp: 'K * 'K -> int) : unit =\n        let swap i j =\n            let k = keys.JS.[i]\n            keys.JS.[i] <- keys.JS.[j]\n            keys.JS.[j] <- k\n            let v = items.JS.[i]\n            items.JS.[i] <- items.JS.[j]\n            items.JS.[j] <- v\n        sortInternal keys index length comp swap\n\n[<Proxy(typeof<System.Array>)>]\ntype private ArrayProxy =\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, needle: obj) : int =\n        binarySearch (As<obj[]> haystack) (objBinarySearchComparer needle) 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, needle: obj, comparer: IComparer) : int =\n        binarySearch (As<obj[]> haystack) (fun o -> comparer.Compare(needle, o)) 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, start: int, length: int, needle: obj) : int =\n        binarySearch (As<obj[]> haystack) (objBinarySearchComparer needle) start (start + length)\n\n    [<Inline>]\n    static member BinarySearch(haystack: System.Array, start: int, length: int, needle: obj, comparer: IComparer) : int =\n        binarySearch (As<obj[]> haystack) (fun o -> comparer.Compare(needle, o)) start (start + length)\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], needle: 'T) : int =\n        let compare y = compare (As<IComparable> needle) (As<IComparable> y)\n        binarySearch haystack compare 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], start: int, length: int, needle: 'T) : int =\n        let compare y = compare (As<IComparable> needle) (As<IComparable> y)\n        binarySearch haystack compare start (start + length)\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], needle: 'T, comparer: IComparer<'T>) : int =\n        binarySearch haystack (fun o -> comparer.Compare(needle, o)) 0 haystack.Length\n\n    [<Inline>]\n    static member BinarySearch<'T>(haystack: 'T[], start: int, length: int, needle: 'T, comparer: IComparer<'T>) : int =\n        binarySearch haystack (fun o -> comparer.Compare(needle, o)) start (start + length)\n\n    [<Name \"WebSharper.Arrays.clear\">]\n    static member Clear(array: System.Array, index: int, length: int) : unit =\n        if isNull array then raise (ArgumentNullException(\"array\"))\n        if index < 0 || length < 0 || index + length > array.Length then raise (IndexOutOfRangeException())\n        for i = index to index + length - 1 do\n            (As<JSArray<obj>> array).[i] <-\n                match JS.TypeOf (As<JSArray<obj>> array).[i] with\n                | JS.Number -> box 0\n                | _ -> null\n\n    [<Inline>]\n    member this.Clone() =\n        Array.copy (As<obj[]> this) :> obj\n\n    [<Name \"WebSharper.Arrays.constrainedCopy\">]\n    static member ConstrainedCopy(src: System.Array, srcIndex: int, dst: System.Array, dstIndex: int, length: int) =\n        if src ===. dst && dstIndex <= srcIndex + length then\n            let tmp = Array.init length (fun i -> (As<obj[]> src).[srcIndex + i])\n            Array.blit tmp 0 (As<obj[]> dst) dstIndex length\n        else\n            Array.blit (As<obj[]> src) srcIndex (As<obj[]> dst) dstIndex length\n\n    [<Inline>]\n    static member Copy(src: System.Array, srcIndex: int, dst: System.Array, dstIndex: int, length: int) =\n        Array.blit (As<obj[]> src) srcIndex (As<obj[]> dst) dstIndex length\n\n    [<Inline>]\n    member this.CopyTo(dst: System.Array, index: int) =\n        if this.Length + index < dst.Length then raise (ArgumentException(\"array\"))\n        Array.blit (As<obj[]> this) 0 (As<obj[]> dst) index this.Length\n\n    [<Inline>]\n    static member Copy(src: System.Array, dst: System.Array, length: int) =\n        Array.blit (As<obj[]> src) 0 (As<obj[]> dst) 0 length\n\n    [<Inline>]\n    static member ConvertAll<'T, 'U>(array: 'T[], converter: Converter<'T, 'U>) : 'U[] =\n        Array.map converter.Invoke array\n\n    [<Inline>]\n    static member Empty<'T>() : 'T[] =\n        Array.empty\n\n    [<Inline>]\n    static member Exists<'T>(array: 'T[], predicate: Predicate<'T>) : bool =\n        Array.exists predicate.Invoke array\n\n    [<Inline>]\n    static member Find<'T>(array: 'T[], predicate: Predicate<'T>) : 'T =\n        defaultArg (Array.tryFind predicate.Invoke array) Unchecked.defaultof<'T>\n\n    [<Inline>]\n    static member FindAll<'T>(array: 'T[], predicate: Predicate<'T>) : 'T[] =\n        Array.filter predicate.Invoke array\n\n    [<Name \"WebSharper.Arrays.findIndexBound\">]\n    static member FindIndex<'T>(array: 'T[], startIndex: int, count: int, predicate: Predicate<'T>) : int =\n        if isNull array then raise (ArgumentNullException(\"array\"))\n        if isNull predicate then raise (ArgumentNullException(\"match\"))\n        if startIndex < 0 then raise (ArgumentOutOfRangeException(\"startIndex\", \"Index was out of range. Must be non-negative and less than the size of the collection.\"))\n        if count < 0 || startIndex + count > array.Length then raise (ArgumentOutOfRangeException(\"count\", \"Count must be positive and count must refer to a location within the string/array/collection.\"))\n        let rec f finish i =\n            if i = finish then\n                -1\n            elif predicate.Invoke(array.[i]) then\n                i\n            else\n                f finish (i + 1)\n        f (startIndex + count) startIndex\n\n    [<Inline>]\n    static member FindIndex<'T>(array: 'T[], startIndex: int, predicate: Predicate<'T>) : int =\n        System.Array.FindIndex<'T>(array, startIndex, array.Length - startIndex, predicate)\n\n    [<Inline>]\n    static member FindIndex<'T>(array: 'T[], predicate: Predicate<'T>) : int =\n        System.Array.FindIndex<'T>(array, 0, array.Length, predicate)\n\n    [<Inline>]\n    static member FindLast<'T>(array: 'T[], predicate: Predicate<'T>) : 'T =\n        defaultArg (Array.tryFindBack predicate.Invoke array) Unchecked.defaultof<'T>\n\n    [<Name \"WebSharper.Arrays.findLastIndexBound\">]\n    static member FindLastIndex<'T>(array: 'T[], startIndex: int, count: int, predicate: Predicate<'T>) : int =\n        if isNull array then raise (ArgumentNullException(\"array\"))\n        if isNull predicate then raise (ArgumentNullException(\"match\"))\n        if startIndex < 0 then raise (ArgumentOutOfRangeException(\"startIndex\", \"Index was out of range. Must be non-negative and less than the size of the collection.\"))\n        if count < 0 || startIndex + count > array.Length then raise (ArgumentOutOfRangeException(\"count\", \"Count must be positive and count must refer to a location within the string/array/collection.\"))\n        let rec f i =\n            if i < startIndex then\n                -1\n            elif predicate.Invoke(array.[i]) then\n                i\n            else\n                f (i - 1)\n        f (startIndex + count - 1)\n\n    [<Inline>]\n    static member FindLastIndex<'T>(array: 'T[], startIndex: int, predicate: Predicate<'T>) : int =\n        System.Array.FindLastIndex<'T>(array, startIndex, array.Length - startIndex, predicate)\n\n    [<Inline>]\n    static member FindLastIndex<'T>(array: 'T[], predicate: Predicate<'T>) : int =\n        System.Array.FindLastIndex<'T>(array, 0, array.Length, predicate)\n\n    [<Inline>]\n    static member ForEach<'T>(array: 'T[], action: Action<'T>) : unit =\n        Array.iter action.Invoke array\n\n    [<Inline>]\n    member this.GetValue(i: int) =\n        (As<obj[]> this).[i]\n\n    [<Inline>]\n    static member IndexOf(haystack: System.Array, needle: obj, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(As<obj[]> haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf(haystack: System.Array, needle: obj, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(As<obj[]> haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf(haystack: System.Array, needle: obj) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(As<obj[]> haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member IndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindIndex(haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf(haystack: System.Array, needle: obj, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(As<obj[]> haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf(haystack: System.Array, needle: obj, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(As<obj[]> haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf(haystack: System.Array, needle: obj) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(As<obj[]> haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int, count:  int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(haystack, startIndex, count, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T, startIndex: int) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(haystack, startIndex, Predicate(predicate))\n\n    [<Inline>]\n    static member LastIndexOf<'T when 'T : null and 'T : equality>(haystack: 'T[], needle: 'T) : int =\n        let predicate = if isNull needle then isNull else needle.Equals\n        System.Array.FindLastIndex(haystack, Predicate(predicate))\n\n    [<Inline>]\n    static member Resize<'T>(array: byref<'T[]>, newSize: int) =\n        let a = Array.zeroCreate newSize\n        if not (isNull array) then\n            Array.blit array 0 a 0 (min newSize array.Length)\n        array <- a\n\n    [<Inline \"$array.reverse()\">]\n    static member Reverse(array: System.Array) = X<unit>\n\n    [<Name \"WebSharper.Arrays.reverse\">]\n    static member Reverse(array: System.Array, offset: int, length: int) =\n        let a = Array.rev (Array.sub (As array) offset length)\n        Array.blit a 0 (As array) offset a.Length\n\n    [<Inline>]\n    member this.SetValue(v: obj, index: int) =\n        (As<obj[]> this).[index] <- v\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[], index: int, length: int, comp: IComparer<'K>) : unit =\n        sortByKeys keys items index length comp.Compare\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[], index: int, length: int) : unit =\n        sortByKeys keys items index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[], comparer: IComparer<'K>) : unit =\n        sortByKeys keys items 0 keys.Length comparer.Compare\n\n    [<Inline>]\n    static member Sort<'K, 'V>(keys: 'K[], items: 'V[]) : unit =\n        sortByKeys keys items 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], index: int, length: int, comparer: IComparer<'K>) : unit =\n        sortSub keys index length comparer.Compare\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], index: int, length: int) : unit =\n        sortSub keys index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], comparer: IComparer<'K>) : unit =\n        sortSub keys 0 keys.Length comparer.Compare\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[]) : unit =\n        sortSub keys 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort<'K>(keys: 'K[], comparison: Comparison<'K>) =\n        sortSub keys 0 keys.Length comparison.Invoke\n\n    [<Inline>]\n    static member Sort(keys: System.Array, index: int, length: int, comparer: IComparer) : unit =\n        sortSub (As<obj[]> keys) index length comparer.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, index: int, length: int) : unit =\n        sortSub (As<obj[]> keys) index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort(keys: System.Array, comparer: IComparer) : unit =\n        sortSub (As<obj[]> keys) 0 keys.Length comparer.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array, index: int, length: int, comp: IComparer) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) index length comp.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array, index: int, length: int) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) index length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array, comp: IComparer) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) 0 keys.Length comp.Compare\n\n    [<Inline>]\n    static member Sort(keys: System.Array, items: System.Array) : unit =\n        sortByKeys (As<obj[]> keys) (As<obj[]> items) 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member Sort(keys: System.Array) : unit =\n        sortSub (As<obj[]> keys) 0 keys.Length (fun (x, y) -> compare (As x) (As y))\n\n    [<Inline>]\n    static member TrueForAll<'T>(array : 'T[], predicate: Predicate<'T>) : bool =\n        Array.forall predicate.Invoke array\n\n    member this.Length\n        with [<Inline>] get() = F.GetLength (As this)   \n\n    [<Inline>]\n    member this.GetEnumerator() = Enumerator.Get0 (As this)         \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Arrays\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.ArrayModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ArrayModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\nmodule F = WebSharper.IntrinsicFunctionProxy\n\nlet checkLength (arr1: 'T1[]) (arr2: 'T2[]) =\n    if Array.length arr1 <> Array.length arr2 then\n        failwith \"The arrays have different lengths.\"\n\n[<Inline \"$x.push($y)\">]\nlet push (x: obj) (y: obj) = ()\n\n[<Inline \"$arr1.concat($arr2)\">]\nlet Append<'T> (arr1: 'T []) (arr2: 'T []) : 'T [] = arr1\n\n[<Name \"allPairs\">]\nlet AllPairs (array1: 'T1 []) (array2: 'T2 []) =\n    let len1 = Array.length array1\n    let len2 = Array.length array2\n    let res = JavaScript.Array (len1 * len2)\n    for i = 0 to len1-1 do\n        for j = 0 to len2-1 do\n            res.[i * len2 + j] <- (array1.JS.[i],array2.JS.[j])\n    res |> As<('T1 * 'T2) []>\n\n[<Name \"average\">]\nlet inline Average (arr: 'T []): 'T = As (float (Array.sum arr) / float (Array.length arr))\n\n[<Name \"averageBy\">]\nlet inline AverageBy (f: 'T -> 'U) (arr: 'T []) : 'U = As (float (Array.sumBy f arr) / float (Array.length arr))\n\n[<Name \"blit\">]\nlet CopyTo<'T> (arr1: 'T [], start1, arr2: 'T [], start2, length) =\n    F.checkRange arr1 start1 length\n    F.checkRange arr2 start2 length\n    for i = 0 to length - 1 do\n        arr2.JS.[start2 + i] <- arr1.JS.[start1 + i]\n\n[<Name \"choose\">]\nlet Choose<'T,'U> (f: 'T -> option<'U>) (arr: 'T []) : 'U [] =\n    let q : 'U [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        match f arr.JS.[i] with\n        | Some x -> push q x\n        | None   -> ()\n    q\n\n[<Inline \"Array.prototype.concat.apply([], $x)\"; Pure>]\nlet concatArray (x: 'T[][]) = X<'T[]>\n\n[<Name \"collect\">]\nlet Collect<'T,'U> (f: 'T -> 'U[]) (x: 'T []) : 'U[] =\n    concatArray (Array.map f x)\n\n[<Name \"concat\">]\nlet Concat<'T> (xs: seq<'T []>) : 'T [] =\n    concatArray (Array.ofSeq xs)\n\n[<Inline>]\nlet SplitInto count (arr: 'T[]) = ArraySplitInto count arr\n\n[<Inline \"$x.slice()\">]\nlet Copy (x: 'T []) = X<'T []>\n\n[<Name \"create\">]\nlet Create (size: int) value =\n    let r = JavaScript.Array(size)\n    for i = 0 to size - 1 do\n        r.[i] <- value\n    r.Self\n\n[<Inline \"[]\">]\nlet Empty () = X<'T []>\n\n[<Name \"exists\">]\nlet Exists<'T> (f: 'T -> bool) (x: 'T []) =\n    let mutable e = false\n    let mutable i = 0\n    let l = x.Length\n    while not e && i < l do\n        if f x.JS.[i] then\n            e <- true\n        else\n            i <- i + 1\n    e\n\n[<Name \"exists2\">]\nlet Exists2 f (x1: _ []) (x2: _ []) =\n    checkLength x1 x2\n    let mutable e = false\n    let mutable i = 0\n    let l = x1.Length\n    while not e && i < l do\n        if f x1.JS.[i] x2.JS.[i] then\n            e <- true\n        else\n            i <- i + 1\n\n    e\n\n[<Name \"fill\">]\nlet Fill<'T> (arr: 'T []) (start: int) (length: int) (value: 'T) =\n    F.checkRange arr start length\n    for i = start to start + length - 1 do\n        arr.JS.[i] <- value\n\n[<Name \"filter\">]\nlet Filter<'T> f (arr: 'T []) : 'T [] =\n    let r : 'T [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        if f arr.JS.[i] then\n            push r arr.JS.[i]\n    r\n\n[<Name \"find\">]\nlet Find f (arr: _ []) =\n    match Array.tryFind f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"findIndex\">]\nlet FindIndex f (arr: _ []) =\n    match Array.tryFindIndex f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (zero: 'S) (arr: 'T []) : 'S =\n    let mutable acc = zero\n    for i = 0 to Array.length arr - 1 do\n        acc <- f acc arr.JS.[i]\n    acc\n\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> f (zero: 'S) (arr1: 'T1 []) (arr2: 'T2 []) : 'S =\n    checkLength arr1 arr2\n    let mutable accum = zero\n    for i in 0 .. Array.length arr1 - 1 do\n        accum <- f accum arr1.JS.[i] arr2.JS.[i]\n    accum\n\n[<Name \"foldBack\">]\nlet FoldBack f (arr: _ []) zero =\n    let mutable acc = zero\n    let len = Array.length arr\n    for i = 1 to len do\n        acc <- f arr.JS.[len - i] acc\n    acc\n\n[<Name \"foldBack2\">]\nlet FoldBack2 f (arr1: _ []) (arr2: _ []) zero =\n    checkLength arr1 arr2\n    let len = Array.length arr1\n    let mutable accum = zero\n    for i in 1 .. len do\n        accum <- f arr1.JS.[len - i] arr2.JS.[len - i] accum\n    accum\n\n[<Name \"forall\">]\nlet ForAll f (x: _ []) =\n    let mutable a = true\n    let mutable i = 0\n    let l = x.Length\n    while a && i < l do\n        if f x.JS.[i] then\n            i <- i + 1\n        else\n            a <- false\n    a\n\n[<Name \"forall2\">]\nlet ForAll2 f (x1: _ []) (x2: _ []) =\n    checkLength x1 x2\n    let mutable a = true\n    let mutable i = 0\n    let l = x1.Length\n    while a && i < l do\n        if f x1.JS.[i] x2.JS.[i] then\n            i <- i + 1\n        else\n            a <- false\n    a\n\n[<Inline>]\nlet Get (arr: _ []) index =\n    F.GetArray arr index\n\n[<Inline>]\nlet Item index (arr: _ []) =\n    F.GetArray arr index\n\n[<Name \"init\">]\nlet Initialize (size: int) f =\n    if size < 0 then\n        failwith \"Negative size given.\"\n    let r = JavaScript.Array(size)\n    for i = 0 to size - 1 do\n        r.[i] <- f i\n    r.Self\n\n[<Inline \"$arr.length == 0\">]\nlet IsEmpty (arr: _ []) = X<bool>\n\n[<Name \"iter\">]\nlet Iterate f (arr: 'T []) =\n    for i = 0 to Array.length arr - 1 do\n        f arr.JS.[i]\n\n[<Name \"iter2\">]\nlet Iterate2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    for i = 0 to Array.length arr1 - 1 do\n        f arr1.JS.[i] arr2.JS.[i]\n\n[<Name \"iteri\">]\nlet IterateIndexed f (arr: 'T []) =\n    for i = 0 to Array.length arr - 1 do\n        f i arr.JS.[i]\n\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (arr1: _ []) (arr2: _ []) =\n    checkLength arr1 arr2\n    for i = 0 to Array.length arr1 - 1 do\n        f i arr1.JS.[i] arr2.JS.[i]\n\n[<Inline \"$arr.length\">]\nlet Length<'T> (arr: 'T []) = X<int>\n\n[<Name \"map\">]\nlet Map<'T1,'T2> (f: 'T1 -> 'T2) (arr: 'T1 []) : 'T2 [] =\n    let r = JavaScript.Array<'T2>(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        r.[i] <- f arr.JS.[i]\n    r.Self\n\n[<Name \"map2\">]\nlet Map2 (f: 'T1 -> 'T2 -> 'T3) (arr1: 'T1 []) (arr2: 'T2 []) : 'T3 [] =\n    checkLength arr1 arr2\n    let r = JavaScript.Array<'T3>(Array.length arr2)\n    for i = 0 to Array.length arr2 - 1 do\n        r.[i] <- f arr1.JS.[i] arr2.JS.[i]\n    r.Self\n\n[<Name \"mapi\">]\nlet MapIndexed f (arr: _ []) =\n    let y = JavaScript.Array(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        y.[i] <- f i arr.JS.[i]\n    y.Self\n\n[<Name \"mapi2\">]\nlet MapIndexed2 f (arr1: 'T1 []) (arr2: 'T2 []): 'U[] =\n    checkLength arr1 arr2\n    let res = JavaScript.Array(Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.[i] <- f i arr1.JS.[i] arr2.JS.[i]\n    res.Self\n\n[<Inline>]\nlet MapFold<'T,'S,'R> f zero arr = ArrayMapFold<'T, 'S, 'R> f zero arr\n\n[<Inline>]\nlet MapFoldBack f arr zero = ArrayMapFoldBack f arr zero\n\nlet private nonEmpty (arr: _ []) =\n    if Array.length arr = 0 then\n        failwith \"The input array was empty.\"\n\n[<Name \"max\">]\nlet Max arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        if x > m then\n            m <- x\n    m\n\n[<Name \"maxBy\">]\nlet MaxBy f arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    let mutable fm = f m\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        let fx = f x\n        if fx > fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"min\">]\nlet Min arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        if x < m then\n            m <- x\n    m\n\n\n[<Name \"minBy\">]\nlet MinBy f arr =\n    nonEmpty arr\n    let mutable m = arr.JS.[0]\n    let mutable fm = f m\n    for i = 1 to Array.length arr - 1 do\n        let x = arr.JS.[i]\n        let fx = f x\n        if fx < fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"ofList\">]\nlet OfList<'T> (xs: list<'T>) =\n    let q : 'T [] = [||]\n    let mutable l = xs\n    while not (List.isEmpty l) do\n        push q l.Head\n        l <- l.Tail\n    q\n\n[<Name \"ofSeq\">]\nlet OfSeq<'T> (xs: seq<'T>) : 'T [] =\n    if xs :? System.Array then\n        Array.copy (As<'T[]> xs)\n    elif xs :? _ list then\n        Array.ofList (As<'T list> xs)\n    else\n        let q : 'T [] = [||]\n        use o = Enumerator.Get xs\n        while o.MoveNext() do\n            push q o.Current\n        q\n\n[<Name \"partition\">]\nlet Partition f (arr: 'T []) : 'T [] * 'T [] =\n    let ret1 : 'T [] = [||]\n    let ret2 : 'T [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        if f arr.JS.[i] then\n            push ret1 arr.JS.[i]\n        else\n            push ret2 arr.JS.[i]\n    (ret1, ret2)\n\n[<Name \"permute\">]\nlet Permute f (arr: 'T []) =\n    let ret = JavaScript.Array(Array.length arr)\n    for i = 0 to Array.length arr - 1 do\n        ret.[f i] <- arr.JS.[i]\n    ret.Self\n\n[<Name \"pick\">]\nlet Pick f (arr: _ []) =\n    match Array.tryPick f arr with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"reduce\">]\nlet Reduce f (arr: _ []) =\n    nonEmpty arr\n    let mutable acc = arr.JS.[0]\n    for i = 1 to Array.length arr - 1 do\n        acc <- f acc arr.JS.[i]\n    acc\n\n[<Name \"reduceBack\">]\nlet ReduceBack f (arr: _ []) =\n    nonEmpty arr\n    let len = Array.length arr\n    let mutable acc = arr.JS.[len - 1]\n    for i = 2 to len do\n        acc <- f arr.JS.[len - i] acc\n    acc\n\n[<Inline \"$x.slice().reverse()\">]\nlet Reverse (x: 'T []) = X<'T []>\n\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (zero: 'S) (arr: 'T []) : 'S [] =\n    let ret = JavaScript.Array(1 + Array.length arr)\n    ret.[0] <- zero\n    for i = 0 to Array.length arr - 1 do\n        ret.[i + 1] <- f ret.[i] arr.JS.[i]\n    ret.Self\n\n[<Name \"scanBack\">]\nlet ScanBack (f: 'T -> 'S -> 'S) (arr: 'T []) (zero: 'S) : 'S [] =\n    let len = Array.length arr\n    let ret = JavaScript.Array(1 + len)\n    ret.[len] <- zero\n    for i = 0 to len - 1 do\n        ret.[len - i - 1] <- f arr.JS.[len - i - 1] ret.[len - i]\n    ret.Self\n\n[<Inline>]\nlet Set (arr: _ []) i v =\n    F.SetArray arr i v\n\n[<Name \"sort\">]\nlet Sort<'T when 'T: comparison> (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, i) arr).JS.Sort(fun (x, y) -> compare x y) |> Array.map fst\n\n[<Name \"sortBy\">]\nlet SortBy<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> compare (snd x) (snd y)) |> Array.map fst\n\n[<Name \"sortInPlace\">]\nlet SortInPlace<'T when 'T: comparison> (arr: 'T []) =\n    (mapiInPlace (fun i x -> x, i) arr).JS.Sort(fun (x, y) -> compare x y) |> mapInPlace fst\n\n[<Name \"sortInPlaceBy\">]\nlet SortInPlaceBy<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) =\n    (mapiInPlace (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> compare (snd x) (snd y)) |> mapInPlace fst \n\n[<Name \"sortInPlaceWith\">]\nlet SortInPlaceWith<'T> (comparer: 'T -> 'T -> int) (arr: 'T []) =\n    arr.JS.Sort(fun (x, y) -> comparer x y) |> ignore\n\n[<Name \"sortWith\">]\nlet SortWith<'T> (comparer: 'T -> 'T -> int) (arr: 'T []) : 'T [] =\n    (Array.copy arr).JS.Sort(fun (x, y) -> comparer x y)\n\n[<Name \"sortByDescending\">]\nlet SortByDescending<'T,'U when 'U: comparison> (f: 'T -> 'U) (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, (f x, i)) arr).JS.Sort(fun (x, y) -> - compare (snd x) (snd y)) |> Array.map fst\n\n[<Name \"sortDescending\">]\nlet SortDescending<'T when 'T: comparison> (arr: 'T []) : 'T [] =\n    (Array.mapi (fun i x -> x, i) arr).JS.Sort(fun (x, y) -> - compare x y) |> Array.map fst\n\n[<Inline \"$x.slice($start,$start+$length)\">]\nlet private subArray (x: 'T) start length = X<'T>\n\n[<Inline>]\nlet GetSubArray (arr: 'T []) (start: int) (length: int) : 'T []=\n    F.GetArraySub arr start length\n\n[<Direct \"var sum = 0; for (var i = 0; i < $arr.length; i++) sum += $arr[i]; return sum\">]\n[<Name \"sum\">]\nlet Sum (arr: 'T []) : 'T = X<'T>\n\n[<Direct \"var sum = 0; for (var i = 0; i < $arr.length; i++) sum += $f($arr[i]); return sum\">]\n[<Name \"sumBy\">]\nlet SumBy (f: 'T -> 'U) (arr: 'T []) : 'U =  X<'U>\n\n[<Name \"transpose\">]\nlet Transpose (x: 'T[] seq) : 'T[][] =\n    match x with\n    | :? System.Array -> ArrayTranspose (As<'T[][]> x)\n    | _ -> ArrayTranspose (Array.ofSeq x)\n\n[<Inline>]\nlet ToList arr = List.ofArray arr\n\n[<Inline \"$arr\">]\nlet ToSeq (arr: _ []) = arr :> seq<_>\n\n[<Name \"tryFind\">]\nlet TryFind f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        if f arr.JS.[i] then res <- Some arr.JS.[i]\n        i <- i + 1\n    res\n\n[<Inline>]\nlet TryFindBack f (arr: _ []) = ArrayTryFindBack f arr\n\n[<Name \"tryFindIndex\">]\nlet TryFindIndex f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        if f arr.JS.[i] then res <- Some i\n        i <- i + 1\n    res\n\n[<Inline>]\nlet TryFindIndexBack f (arr: _ []) = ArrayTryFindIndexBack f arr\n\n[<Name \"tryHead\">]\nlet TryHead (arr: 'T[]) =\n    if Array.length arr = 0 then None else Some arr.JS.[0]\n\n[<Name \"tryItem\">]\nlet TryItem i (arr: 'T[]) =\n    if Array.length arr <= i || i < 0 then None else Some arr.JS.[i]\n\n[<Name \"tryLast\">]\nlet TryLast (arr: 'T[]) =\n    let len = Array.length arr\n    if len = 0 then None else Some arr.JS.[len - 1]\n\n[<Name \"tryPick\">]\nlet TryPick f (arr: _ []) =\n    let mutable res = None\n    let mutable i = 0\n    while i < Array.length arr && Option.isNone res do\n        match f arr.JS.[i] with\n        | Some _ as r -> res <- r\n        | _ -> ()\n        i <- i + 1\n    res\n\n[<Name \"unzip\">]\nlet Unzip<'T1,'T2> (arr: ('T1 * 'T2) []) : 'T1 [] * 'T2 [] =\n    let x : 'T1 [] = [||]\n    let y : 'T2 [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        let (a, b) = arr.JS.[i]\n        push x a\n        push y b\n    (x, y)\n\n[<Name \"unzip3\">]\nlet Unzip3<'T1,'T2,'T3> (arr: ('T1 * 'T2 * 'T3) []) =\n    let x : 'T1 [] = [||]\n    let y : 'T2 [] = [||]\n    let z : 'T3 [] = [||]\n    for i = 0 to Array.length arr - 1 do\n        match arr.JS.[i] with\n        | (a, b, c) ->\n            push x a\n            push y b\n            push z c\n    (x, y, z)\n\n[<Inline>]\n[<Name \"zeroCreate\">]\nlet ZeroCreate<'T> (size: int) =\n    Create size Unchecked.defaultof<'T>\n\n[<Name \"zip\">]\nlet Zip (arr1: 'T1 []) (arr2: 'T2 []) =\n    checkLength arr1 arr2\n    let res = Array.zeroCreate (Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.JS.[i] <- (arr1.JS.[i], arr2.JS.[i])\n    res\n\n[<Name \"zip3\">]\nlet Zip3 (arr1: _ [], arr2: _ [], arr3: _ []) =\n    checkLength arr1 arr2\n    checkLength arr2 arr3\n    let res = Array.zeroCreate (Array.length arr1)\n    for i = 0 to Array.length arr1 - 1 do\n        res.JS.[i] <- (arr1.JS.[i], arr2.JS.[i], arr3.JS.[i])\n    res\n\n[<Name \"chunkBySize\">]\nlet ChunkBySize size array =\n    SeqChunkBySize size (Array.toSeq array)\n    |> Seq.toArray\n\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (a1: 'T []) (a2: 'T []) : int =\n    Seq.compareWith f (Array.toSeq a1) (Array.toSeq a2)\n\n[<Inline>]\nlet CountBy (f: 'T -> 'K) (a: 'T []) : ('K * int) [] =\n    ArrayCountBy f a\n\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (l: 'T []) : 'T [] =\n    Seq.distinct (Array.toSeq l)\n    |> Seq.toArray\n\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (a: 'T []) : 'T [] =\n    Seq.distinctBy f (Array.toSeq a)\n    |> Seq.toArray\n\n[<Name \"except\">]\nlet Except (itemsToExclude: seq<'T>) (a: 'T []) =\n    SeqExcept itemsToExclude (Array.toSeq a)\n    |> Seq.toArray\n\n[<Name \"findBack\">]\nlet FindBack p (s: _ []) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: _ []) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Inline>]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (a: 'T []) : ('K * 'T []) [] =\n    ArrayGroupBy f a\n\n[<Name \"head\">]\nlet Head (arr : 'T []) : 'T =\n    nonEmpty arr\n    arr.JS.[0]\n\n[<Name \"last\">]\nlet Last (arr : 'T []) : 'T =\n    nonEmpty arr\n    arr.JS.[Array.length arr - 1]\n\n[<Name \"map3\">]\nlet Map3 (f: 'T1 -> 'T2 -> 'T3 -> 'T4) (arr1: 'T1 []) (arr2: 'T2 []) (arr3: 'T3 []) : 'T4 [] =\n    checkLength arr1 arr2\n    checkLength arr1 arr3\n    let r = JavaScript.Array<'T4>(Array.length arr3)\n    for i = 0 to Array.length arr3 - 1 do\n        r.[i] <- f arr1.JS.[i] arr2.JS.[i] arr3.JS.[i]\n    r.Self\n\n[<Inline>]\nlet Contains (el: 'T) (a: 'T []) =\n    ArrayContains el a\n\n[<Name \"pairwise\">]\nlet Pairwise (a: 'T []) : ('T * 'T) [] =\n    Seq.pairwise (Array.toSeq a)\n    |> Seq.toArray\n\n[<Name \"replicate\">]\nlet Replicate size value =\n    Array.create size value\n\n[<Name \"indexed\">]\nlet Indexed (ar : 'T []) : (int * 'T) [] =\n    Array.mapi (fun a b -> (a, b)) ar\n\n[<Inline>]\nlet Singleton<'T> (x: 'T) =\n    [| x |]\n\n[<Name \"skip\">]\nlet Skip<'T> i (ar : 'T []) =\n    if i < 0 then InputMustBeNonNegative() else\n    if i > Array.length ar then InsufficientElements() else\n    ar.JS.Slice(i)\n\n[<Name \"skipWhile\">]\nlet SkipWhile<'T> (predicate : 'T -> bool) (ar : 'T []) : 'T [] =\n    let len = Array.length ar\n    let mutable i = 0\n    while i < len && predicate ar.JS.[i] do\n        i <- i + 1\n    ar.JS.Slice(i)\n\n[<Name \"tail\">]\nlet Tail<'T> (ar : 'T []) : 'T [] =\n    Skip 1 ar\n\n[<Name \"take\">]\nlet Take<'T> n (ar: 'T []) =\n    if n < 0 then InputMustBeNonNegative() else\n    if n > Array.length ar then InsufficientElements() else\n    ar.JS.Slice(0, n)\n\n[<Name \"takeWhile\">]\nlet TakeWhile<'T> (predicate : 'T -> bool) (ar: 'T []) =\n    let len = Array.length ar\n    let mutable i = 0\n    while i < len && predicate ar.JS.[i] do\n        i <- i + 1\n    ar.JS.Slice(0, i)\n\n[<Inline>]\nlet Truncate<'T> n (ar: 'T []) =\n    ar.JS.Slice(0, n)\n\n[<Name \"exactlyOne\">]\nlet ExactlyOne (ar : 'T []) =\n    if Array.length ar = 1 then\n        ar.JS.[0]\n    else\n        failwith \"The input does not have precisely one element.\"\n\n[<Name \"unfold\">]\nlet Unfold<'T, 'S> (f: 'S -> option<'T * 'S>) (s: 'S) : 'T [] =\n    Seq.unfold f s\n    |> Seq.toArray\n\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : 'T []) : 'T [] =\n    Filter predicate s\n\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: 'T []) : array<'T []> =\n    Seq.windowed windowSize (Array.toSeq s)\n    |> Seq.toArray\n\n[<Name \"splitAt\">]\nlet SplitAt (n: int) (ar: 'T []) =\n    Take n ar, Skip n ar\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Arrays2D\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.Array2DModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.Array2DModuleProxy\n\nopen WebSharper.JavaScript\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<Inline>]\nlet Length1 (arr: 'T[,]) = F.GetArray2DLength1 arr\n\n[<Inline>]\nlet Length2 (arr: 'T[,]) = F.GetArray2DLength2 arr\n\n[<Inline>]\nlet Get (array: 'T[,]) (n:int) (m:int) = F.GetArray2D array n m\n\n[<Inline>]\nlet Set (array: 'T[,]) (n:int) (m:int) (x:'T) = F.SetArray2D array n m x\n\n[<Inline>]\nlet ZeroCreate (n:int) (m:int) = F.Array2DZeroCreate n m\n    \n[<Inline>]\nlet Create n m (x:'T) =\n    let arr = As<'T[,]>(Array.init n (fun _ -> Array.create m x))\n    arr?dims <- 2\n    arr\n     \n[<Name \"init\">]\nlet Initialize n m f = \n    let array = ZeroCreate n m : 'T[,]  \n    for i = 0 to n - 1 do \n        for j = 0 to m - 1 do \n            array.[i, j] <- f i j\n    array\n\n[<Name \"iter\">]\nlet Iterate f array = \n    let count1 = F.GetArray2DLength1 array \n    let count2 = F.GetArray2DLength2 array \n    for i = 0 to count1 - 1 do \n      for j = 0 to count2 - 1 do \n        f array.[i,j]\n\n[<Name \"iteri\">]\nlet IterateIndexed (f : int -> int -> 'T -> unit) (array:'T[,]) =\n    let count1 = F.GetArray2DLength1 array \n    let count2 = F.GetArray2DLength2 array \n    for i = 0 to count1 - 1 do \n      for j = 0 to count2 - 1 do \n        f i j array.[i,j]\n\n[<Name \"map\">]\nlet Map f array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> f array.[i,j])\n\n[<Name \"mapi\">]\nlet MapIndexed f array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> f i j array.[i,j])\n\n[<Name \"copy\">]\nlet Copy array = \n    Initialize (F.GetArray2DLength1 array) (F.GetArray2DLength2 array) (fun i j -> array.[i,j])\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\ntype private CT  = System.Threading.CancellationToken\ntype private CTS  = System.Threading.CancellationTokenSource\ntype private CTR  = System.Threading.CancellationTokenRegistration\ntype private OCE = System.OperationCanceledException\nmodule C = WebSharper.Concurrency\n\n[<Proxy(typeof<Async>)>]\ntype private AsyncProxy =\n\n    [<Inline>]\n    static member Catch(a: Async<'T>) : Async<Choice<'T,exn>>  =\n        As (C.Catch (As a))\n\n    [<Inline>]\n    static member Start(computation: Async<unit>, ?t: CT) : unit =\n        C.Start (As computation, As t)\n\n    [<Inline>]\n    static member Ignore (computation: Async<'T>) : Async<unit> =\n        As (C.Ignore (As computation))\n\n    [<Inline>]\n    static member Sleep milliseconds : Async<unit> =\n        As (C.Sleep milliseconds)\n\n    [<Inline>]\n    static member StartWithContinuations(op: Async<'T>,\n                                         c1: 'T -> unit,\n                                         c2: exn -> unit,\n                                         c3: OCE -> unit,\n                                         ?t: CT) : unit =\n        C.StartWithContinuations (As op, c1, c2, c3, As t)\n\n    [<Inline>]\n    static member FromContinuations(callback: (('T -> unit) *\n                                               (exn -> unit) *\n                                               (OCE -> unit)) -> unit)\n                                    : Async<'T> =\n        As (C.FromContinuations callback)\n\n    [<Inline>]\n    static member AwaitEvent(ev: IEvent<'D,'T>, ?t: unit -> unit) : Async<'T> =\n        As (C.AwaitEvent (As ev, t))\n\n    [<Inline>]\n    static member AwaitTask(t : System.Threading.Tasks.Task) : Async<unit> =\n        As (C.AwaitTask t)\n\n    [<Inline>]\n    static member AwaitTask(t : System.Threading.Tasks.Task<'T>) : Async<'T> =\n        As (C.AwaitTask1 t)\n\n    [<Inline>]\n    static member StartChild(a: Async<'T>, ?timeOut: int) : Async<Async<'T>> =\n        As (C.StartChild (As a, timeOut))\n\n    [<Inline>]\n    static member StartChildAsTask(a: Async<'T>, ?opt :System.Threading.Tasks.TaskCreationOptions) \n        : Async<System.Threading.Tasks.Task<'T>> =\n        As (C.StartChildAsTask (As a))\n\n    [<Inline>]\n    static member Parallel(cs: seq<Async<'T>>) : Async<'T []> =\n        As (C.Parallel (As cs))\n\n    [<Inline>]\n    static member StartImmediate(c: Async<unit>, ?t: CT) : unit =\n        C.StartImmediate (As c, As t)\n\n    [<Inline>]\n    static member StartAsTask (a: Async<'T>, ?opt :System.Threading.Tasks.TaskCreationOptions, ?t: CT) \n        : System.Threading.Tasks.Task<'T> =\n        C.StartAsTask(As a, As t)        \n\n    [<Inline>]\n    static member StartImmediateAsTask (a: Async<'T>, ?t: CT) \n        : System.Threading.Tasks.Task<'T> =\n        C.StartImmediateAsTask(As a, As t)        \n\n    [<Inline>]\n    static member DefaultCancellationToken : CT =\n        As !C.defCTS\n\n    [<Inline>]\n    static member CancelDefaultToken() : unit =\n        let cts = !C.defCTS\n        C.defCTS := new CTS()\n        cts.Cancel()    \n\n    [<Inline>]\n    static member CancellationToken : Async<CT> =\n        As C.GetCT\n\n    [<Inline>]\n    static member OnCancel(action: unit -> unit) : Async<System.IDisposable> =\n        As (C.OnCancel action)\n    \n    [<Inline>]\n    static member TryCancelled(p: Async<'T>, f: OCE -> unit) : Async<'T> =\n        As (C.TryCancelled(As p, f))\n\n[<Proxy(typeof<CT>)>]\ntype private CancellationTokenProxy =\n    [<Inline \"$this.c\">]\n    member this.IsCancellationRequested = X<bool>\n\n    [<Inline>]\n    member this.Register(callback: System.Action) =\n        As<CTR> (C.Register (As this) callback.Invoke)\n\n    [<Inline>]\n    member this.ThrowIfCancellationRequested() =\n        if this.IsCancellationRequested then raise (OCE(As<CT> this)) \n\n    [<Inline>]\n    static member None = As<CT> C.noneCT\n        \n[<Proxy(typeof<CTS>)>]\n[<Name \"CancellationTokenSource\">]\ntype private CancellationTokenSourceProxy () =\n    let mutable c = false\n\n    let mutable pending = None\n\n    let r = [||] : (unit -> unit)[]\n\n    [<Inline>]\n    new (delay: int) as this = \n        CancellationTokenSourceProxy() then this.CancelAfter(delay)\n\n    [<Inline>]\n    new (delay: System.TimeSpan) as this = \n        CancellationTokenSourceProxy() then this.CancelAfter(delay)\n\n    [<Inline>]\n    member this.IsCancellationRequested = c\n\n    member this.Token \n        with [<Inline \"$this\">] get() = X<CT>\n\n    member this.Cancel() =\n        if not c then\n            c <- true\n            let errors = \n                r |> Array.choose (fun a -> \n                    try a()\n                        None\n                    with e -> Some e\n                )\n            if errors.Length > 0 then\n                raise (System.AggregateException(errors))    \n            \n    member this.Cancel(throwOnFirstException) =\n        if not throwOnFirstException then\n            this.Cancel()\n        else\n            if not c then\n                c <- true\n                r |> Array.iter (fun a -> a())   \n \n    member this.CancelAfter(delay: int) =\n        if not c then\n            pending |> Option.iter JS.ClearTimeout\n            pending <- Some <| JS.SetTimeout this.Cancel delay\n\n    [<Inline>]\n    member this.CancelAfter(delay: System.TimeSpan) = this.CancelAfter(As<int> delay)\n\n    static member CreateLinkedTokenSource(tokens: CT[]) =\n        let cts = new CTS()\n        tokens |> Array.iter (fun t -> t.Register(fun () -> cts.Cancel()) |> ignore)\n        cts\n\n    static member CreateLinkedTokenSource(t1: CT, t2: CT) =\n        CancellationTokenSourceProxy.CreateLinkedTokenSource [| t1; t2 |]\n\n[<Proxy(typeof<System.Threading.CancellationTokenRegistration>)>]\ntype private CancellationTokenRegistrationProxy =\n    [<Inline>]\n    member this.Dispose() = (this :> System.IDisposable).Dispose() \n    \n    interface System.IDisposable with\n        [<JavaScript false>]\n        member this.Dispose() = ()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Name \"Char\">]\n[<Proxy(typeof<System.Char>)>]\ntype private CharProxy =\n\n    [<Inline \"'\\u0000'\">]\n    new () = {}\n\n    [<Inline>]\n    member this.CompareTo(s: char) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    member this.CompareTo(s: obj) =\n        Unchecked.compare (this :> obj) s\n\n    [<Inline \"$this == $s\">]\n    member this.Equals(s: char) = X<bool>\n\n    [<Inline \"$this === $s\">]\n    override this.Equals(s: obj) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    static member GetNumericValue(c: char) : float =\n        if c >= '0' && c <= '9' then float c - float '0' else -1.\n\n    [<Inline>]\n    static member GetNumericValue(s: string, i: int) = CharProxy.GetNumericValue(s.[i])\n\n    static member IsControl(c: char) : bool =\n        c >= '\\u0000' && c <= '\\u001f'\n        || c >= '\\u0080' && c <= '\\u009f'\n\n    [<Inline>]\n    static member IsControl(s: string, i: int) = CharProxy.IsControl(s.[i])\n\n    static member IsDigit(c: char) : bool =\n        c >= '0' && c <= '9'\n\n    [<Inline>]\n    static member IsDigit(s: string, i: int) = CharProxy.IsDigit(s.[i])\n\n    static member IsLetter(c: char) : bool =\n        c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z'\n\n    [<Inline>]\n    static member IsLetter(s: string, i: int) = CharProxy.IsLetter(s.[i])\n\n    static member IsLetterOrDigit(c: char) : bool =\n        System.Char.IsLetter c || System.Char.IsDigit c\n\n    [<Inline>]\n    static member IsLetterOrDigit(s: string, i: int) = CharProxy.IsLetterOrDigit(s.[i])\n\n    static member IsLower(c: char) : bool =\n        c >= 'a' && c <= 'z'\n\n    [<Inline>]\n    static member IsLower(s: string, i: int) = CharProxy.IsLower(s.[i])\n\n    static member IsUpper(c: char) : bool =\n        c >= 'A' && c <= 'Z'\n\n    [<Inline>]\n    static member IsUpper(s: string, i: int) = CharProxy.IsUpper(s.[i])\n\n    [<Direct @\"$c.match(/\\s/) !== null\">]\n    static member IsWhiteSpace(c: char) = X<bool>\n\n    [<Inline>]\n    static member IsWhiteSpace(s: string, i: int) = CharProxy.IsWhiteSpace(s.[i])\n\n    static member Parse(s: string) =\n        if s.Length = 1 then As<char> s else\n            failwith \"String must be exactly one character long.\"\n\n    [<Inline \"String.fromCharCode($x.charCodeAt() + $y.charCodeAt())\">]\n    static member (+) (x: char, y: char) : char = x + y\n\n    [<Inline \"$this\">]\n    override this.ToString() = X<string>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Util\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Control.CommonExtensions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.CommonExtensionsProxy\n\nopen WebSharper.JavaScript\n\nlet observer (h: 'T -> unit) : System.IObserver<'T> =\n    { new System.IObserver<'T> with \n        member this.OnCompleted() = ()\n        member this.OnError _ = ()\n        member this.OnNext args = h args\n    }\n\n[<Inline>]\nlet AddToObservable<'T> (event: System.IObservable<'T>) (h: 'T -> unit) =\n    event.Subscribe(observer h) |> ignore\n\n[<Inline>]\nlet SubscribeToObservable<'T> (event: System.IObservable<'T>) (h: 'T -> unit) =\n    event.Subscribe(observer h)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nopen System.Runtime.InteropServices\nopen System\n\ntype private D = System.DateTime\ntype private K = System.DateTimeKind\ntype internal TS = System.TimeSpan\ntype private DO = System.DateTimeOffset\n\n[<JavaScript>]\n[<Name \"DateUtil\">]\nmodule private DateTimeHelpers =\n    let DatePortion (d: int) =\n        let e = Date(d)\n        Date(       \n            e.GetFullYear(),\n            e.GetMonth(),\n            e.GetDate()\n        ).GetTime()\n        |> As<D>        \n\n    let TimePortion (d: int) =\n        let e = Date(d)\n        TS(\n            0,\n            e.GetHours(), \n            e.GetMinutes(), \n            e.GetSeconds(), \n            e.GetMilliseconds()\n        )        \n        |> As<TS>        \n\n    let AddYears(d: int, years) =\n        let e = Date(d)\n        Date(   \n            e.GetFullYear() + years,\n            e.GetMonth(),\n            e.GetDate(),\n            e.GetHours(),\n            e.GetMinutes(),\n            e.GetSeconds(),\n            e.GetMilliseconds()\n        ).GetTime()\n        |> As<D>        \n\n    let AddMonths(d: int, months: int) =\n        let e = Date(d)\n        Date(   \n            e.GetFullYear(),\n            e.GetMonth() + months,\n            e.GetDate(),\n            e.GetHours(),\n            e.GetMinutes(),\n            e.GetSeconds(),\n            e.GetMilliseconds()\n        ).GetTime()    \n        |> As<D>        \n\n    let TryParse (s: string) =\n        let d = Date.Parse(s)   \n        if JS.IsNaN(d) then\n            None\n        else Some d\n\n    let Parse (s: string) =\n        match TryParse s with\n        | Some d -> d\n        | _ ->\n            failwith \"Failed to parse date string.\"\n\n    [<Direct \"(new Date($d)).toLocaleDateString({}, {year: 'numeric', month: 'long', day: 'numeric', weekday: 'long'})\">]\n    let LongDate (d: obj) = X<string>\n     \n    [<Direct \"(new Date($d)).toLocaleTimeString({}, {hour: '2-digit', minute: '2-digit', hour12: false})\">]\n    let ShortTime (d: obj) = X<string>\n\n    [<Direct \"(new Date($d)).toLocaleTimeString({}, {hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: false})\">]\n    let LongTime (d: obj) = X<string>\n                \n// DateTime is represented as an UTC epoch for remoting purposes.\n// Properties for getting sub-dates/times like Day or Hour convert it to local time on the client for easier display purposes.\n// This is inconsistent, but covers most common uses.\n// If you need UTC time details, use .JS and its UTC methods.\n[<Proxy(typeof<System.DateTime>)>]\ntype private DateTimeProxy =\n    [<Inline \"0\">]\n    new () = {}\n\n    [<Inline \"new Date($y,$mo-1,$d).getTime()\">]\n    new (y: int, mo: int, d: int) = {}\n\n    [<Inline \"new Date($y,$mo-1,$d,$h,$m,$s).getTime()\">]\n    new (y: int, mo: int, d: int, h: int, m: int, s: int) = {}\n\n    [<Inline \"new Date($y,$mo-1,$d,$h,$m,$s,$ms).getTime()\">]\n    new (y: int, mo: int, d: int, h: int, m: int, s: int, ms: int) = {}\n    \n    static member Now\n        with [<Inline \"Date.now()\">] get() = X<D>\n\n    static member UtcNow\n        with [<Inline \"Date.now()\">] get() = X<D>\n    \n    [<Inline \"1\">]\n    member this.Kind = X<System.DateTimeKind>\n\n    member this.Date \n        with [<Inline; JavaScript>] get() : D = DateTimeHelpers.DatePortion(As this)\n\n    static member Today\n        with [<Inline; JavaScript>] get() = DateTimeProxy.Now.Date  \n\n    member this.TimeOfDay \n        with [<Inline; JavaScript>] get() = DateTimeHelpers.TimePortion(As this)\n\n    member this.Year\n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetFullYear()\n\n    member this.Month \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetMonth() + 1\n\n    member this.Day \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetDate()\n\n    member this.Hour \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetHours()\n                                                  \n    member this.Minute \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetMinutes()\n    \n    member this.Second \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetSeconds()\n\n    member this.Millisecond \n        with [<Inline; JavaScript>] get() = Date(As<int> this).GetMilliseconds()\n    \n    member this.DayOfWeek \n        with [<Inline; JavaScript>] get() = As<System.DayOfWeek>(Date(As<int> this).GetDay())\n\n    member this.Ticks\n        with [<Inline \"$this * 1E4\">] get() = X<int64>\n\n    [<Inline \"$this + $t\">]\n    member this.Add(t: TS) = X<D>\n                            \n    [<Inline \"$this - $t\">]\n    member this.Subtract(t: TS) = X<D>\n\n    [<Inline \"$this - $d\">]\n    member this.Subtract(d: D) = X<TS>\n\n    [<Inline; JavaScript>]\n    member this.AddYears(years: int) : D = DateTimeHelpers.AddYears(As this, years)\n\n    [<Inline; JavaScript>]\n    member this.AddMonths(months: int) : D = DateTimeHelpers.AddMonths(As this, months)\n\n    [<Inline; JavaScript>]\n    member this.AddDays(days: float) : D =\n        this.Add(TS.FromDays days)\n\n    [<Inline; JavaScript>]\n    member this.AddHours(hours: float) : D =\n        this.Add(TS.FromHours hours)\n\n    [<Inline; JavaScript>]\n    member this.AddMinutes(minutes: float) : D =\n        this.Add (TS.FromMinutes minutes)\n\n    [<Inline; JavaScript>]\n    member this.AddSeconds(seconds: float) : D =\n        this.Add (TS.FromSeconds seconds)\n\n    [<Inline; JavaScript>]\n    member this.AddMilliseconds(msec: float) : D =\n        this.Add (TS.FromMilliseconds msec)\n\n    [<Inline; JavaScript>]\n    member this.AddTicks(ticks: int64) : D =\n        this.Add (TS.FromTicks ticks)\n\n    [<Inline \"new Date($this).toLocaleDateString()\">]\n    member this.ToShortDateString() = X<string>\n    \n    [<Inline; JavaScript>]\n    member this.ToLongDateString() = DateTimeHelpers.LongDate(this)\n    \n    [<Inline; JavaScript>]\n    member this.ToShortTimeString() = DateTimeHelpers.ShortTime(this)\n\n    [<Inline; JavaScript>]\n    member this.ToLongTimeString() = DateTimeHelpers.LongTime(this)\n\n    [<Inline; JavaScript>]\n    static member Parse(s) = As<D>(DateTimeHelpers.Parse(s))\n\n    [<Inline; JavaScript>]\n    static member TryParse(s, [<Out>] res: byref<D>) =\n        match DateTimeHelpers.TryParse s with\n        | Some d ->\n            res <- As<D> d   \n            true\n        | _ -> false    \n\n    static member MaxValue\n        with [<Inline \"8640000000000000\">] get () = X<int>\n\n    static member MinValue\n        with [<Inline \"-8640000000000000\">] get () = X<int>\n\n    [<Inline \"$a + $b\">]\n    static member (+) (a: D, b: TS) = X<D>\n\n    [<Inline \"$a - $b\">]\n    static member (-) (a: D, b: TS) = X<D>\n\n    [<Inline \"$a - $b\">]\n    static member (-) (a: D, b: D) = X<TS>\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality (a: D, b: D) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality (a: D, b: D) = X<bool>\n\n    [<Inline \"$a > $b\">]\n    static member op_GreaterThan (a: D, b: D) = X<bool>\n\n    [<Inline \"$a < $b\">]\n    static member op_LessThan (a: D, b: D) = X<bool>\n\n    [<Inline \"$a >= $b\">]\n    static member op_GreaterThanOrEqual (a: D, b: D) = X<bool>\n\n    [<Inline \"$a <= $b\">]\n    static member op_LessThanOrEqual (a: D, b: D) = X<bool>\n\n    [<Inline \"new Date($y, $mo, 0).getDate()\">]\n    static member DaysInMonth (y: int, mo: int) = X<int>\n\n    [<Inline \"new Date($y, 1, 29).getDate() == 29\">]\n    static member IsLeapYear (y: int) = X<bool>\n\n[<Proxy(typeof<System.DateTimeOffset>)>]\n[<Prototype false>]\n[<Name \"DateTimeOffset\">]\n// \"d\" contains UTC epoch time\n// \"o\" contains time zone offset in minutes\ntype private DateTimeOffsetProxy [<Inline \"{d: $d, o: $o}\">] (d: D, o: int) =\n\n    [<Inline>]\n    new (d: D, o: TS) = DateTimeOffsetProxy(d, int o.TotalMinutes) \n\n    [<Inline>]\n    new (d: D) = DateTimeOffsetProxy(d, 0) \n\n    member this.DateTime = d\n\n    [<Inline \"$this.o * 60000\">]\n    member this.Offset = X<TS>\n\n    [<Direct \"var d = new Date(); return { d: d.getTime(), o: -d.getTimezoneOffset() } \">]\n    static member Now = X<DO>\n\n    [<Inline \"{ d: Date.now(), o: 0 }\">]\n    static member UtcNow = X<DO>\n        \n    [<Inline>]\n    member this.ToLocalTime() =\n        DO(d, As<TS>(Date().GetTimezoneOffset()))\n        \n    [<Inline>]\n    member this.ToUniversalTime() =\n        DO(d, TS.Zero)\n\n    [<Inline>]\n    member this.UtcDateTime = d\n\n    [<Inline>]\n    member this.TimeOfDay = d.TimeOfDay\n\n    [<Inline>]\n    member this.Year = d.Year\n\n    [<Inline>]\n    member this.Month = d.Month\n\n    [<Inline>]\n    member this.Day = d.Day\n\n    [<Inline>]\n    member this.Hour = d.Hour\n                                                  \n    [<Inline>]\n    member this.Minute = d.Minute\n    \n    [<Inline>]\n    member this.Second = d.Second\n\n    [<Inline>]\n    member this.Millisecond = d.Millisecond\n    \n    [<Inline>]\n    member this.DayOfWeek = d.DayOfWeek\n\n    [<Inline>]\n    member this.Ticks = d.Ticks\n\n    [<Inline>]\n    member this.Add(t: TS) = DateTimeOffsetProxy(d.Add(t), o)\n                            \n    [<Inline>]\n    member this.Subtract(t: TS) = DateTimeOffsetProxy(d.Subtract(t), o)\n\n    [<Inline>]\n    member this.Subtract(o: DO) = d.Subtract(o?d: D)\n\n    [<Inline>]\n    member this.AddYears(years: int) = DateTimeOffsetProxy(d.AddYears(years), o)\n\n    [<Inline>]\n    member this.AddMonths(months: int) = DateTimeOffsetProxy(d.AddMonths(months), o)\n\n    [<Inline>]\n    member this.AddDays(days: float) = DateTimeOffsetProxy(d.AddDays(days), o)\n\n    [<Inline>]\n    member this.AddHours(hours: float) = DateTimeOffsetProxy(d.AddHours(hours), o)\n\n    [<Inline>]\n    member this.AddMinutes(minutes: float) = DateTimeOffsetProxy(d.AddMinutes(minutes), o)\n\n    [<Inline>]\n    member this.AddSeconds(seconds: float) = DateTimeOffsetProxy(d.AddSeconds(seconds), o)\n\n    [<Inline>]\n    member this.AddMilliseconds(msec: float) = DateTimeOffsetProxy(d.AddMilliseconds(msec), o)\n\n    [<Inline>]\n    member this.AddTicks(ticks: int64) = DateTimeOffsetProxy(d.AddTicks(ticks), o)\n\n    [<Inline>]\n    static member (+) (a: DO, b: TS) = a.Add(b)\n\n    [<Inline>]\n    static member (-) (a: DO, b: TS) = a.Subtract(b)\n\n    [<Inline>]\n    static member (-) (a: DO, b: DO) = a.Subtract(b)\n\n    [<Inline \"$a.d == $b.d\">]\n    static member op_Equality (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d != $b.d\">]\n    static member op_Inequality (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d > $b.d\">]\n    static member op_GreaterThan (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d < $b.d\">]\n    static member op_LessThan (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d >= $b.d\">]\n    static member op_GreaterThanOrEqual (a: DO, b: DO) = X<bool>\n\n    [<Inline \"$a.d <= $b.d\">]\n    static member op_LessThanOrEqual (a: DO, b: DO) = X<bool>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen System\nopen WebSharper.JavaScript\n\n[<Name \"WebSharper.Delegate\">]\n[<Proxy(typeof<Delegate>)>]\ntype internal DelegateProxy =\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    override this.Equals(x: obj) = X<bool>\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Equality(a: Delegate, b: Delegate) = X<bool>\n\n    [<Inline \"!$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Inequality(a: Delegate, b: Delegate) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Inline \"$this.apply(null, $args)\">]\n    member this.DynamicInvoke(args: obj[]) = X<obj>\n\n    [<Direct \"$0.$Invokes || [$0]\">]\n    static member InvocationList(del: Delegate) = X<Delegate[]> \n    [<Inline>]\n    member this.GetInvocationList() : Delegate[] =\n        DelegateProxy.InvocationList (As this)\n    \n    static member DelegateTarget(del) =\n        if (JS.Not del) then null\n        elif (JS.In \"$Target\" del) then del?``$Target``\n        elif (JS.In \"$Invokes\" del) then \n            let inv = del?``$Invokes`` : (_ * _)[]\n            snd inv.[inv.Length - 1]\n        else null\n\n    [<Inline>]\n    member this.Target =\n        DelegateProxy.DelegateTarget this\n\n    [<Inline \"$wsruntime.CreateDelegate($0)\">]\n    static member JSCreateDelegate(invokes: Delegate[]) = X<Delegate>\n\n    [<Inline \"$wsruntime.CombineDelegates([$0, $1])\">]\n    static member Combine(a: Delegate, b: Delegate) = X<Delegate>\n\n    [<Inline \"$wsruntime.CombineDelegates($0)\">]\n    static member Combine(delegates: Delegate[]) = X<Delegate>\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    static member DelegateEqual(d1: Delegate, d2: Delegate) = X<bool>\n                           \n    static member Remove(source:Delegate, value: Delegate) =\n        let sourceInv = source.GetInvocationList()\n        if value.GetInvocationList().Length > 1 then\n            failwith \"TODO: Remove multicast delegates\"\n        let resInv = [||]\n        let mutable found = false\n        for i = sourceInv.Length - 1 downto 0 do\n            let it = sourceInv.[i]\n            if not found && DelegateProxy.DelegateEqual(it, value) then\n                found <- true\n            else\n                resInv.JS.Unshift(it) |> ignore\n        DelegateProxy.JSCreateDelegate(resInv)         \n\n    static member RemoveAll(source:Delegate, value: Delegate) =\n        let sourceInv = source.GetInvocationList()\n        if value.GetInvocationList().Length > 1 then\n            failwith \"TODO: Remove multicast delegates\"\n        DelegateProxy.JSCreateDelegate(sourceInv |> Array.filter (fun i -> not (i.Equals(value))))         \n\n[<Proxy(typeof<MulticastDelegate>)>]\ntype internal MulticastDelegateProxy =\n    \n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    override this.Equals(x: obj) = X<bool>\n\n    [<Inline \"$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Equality(a: MulticastDelegate, b: MulticastDelegate) = X<bool>\n\n    [<Inline \"!$wsruntime.DelegateEqual($0, $1)\">]\n    static member op_Inequality(a: MulticastDelegate, b: MulticastDelegate) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Inline>]\n    member this.GetInvocationList() : Delegate[] =\n        DelegateProxy.InvocationList (As this)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Collections\nopen System.Collections.Generic\n\ntype private KVP<'K,'V> = KeyValuePair<'K,'V>\ntype private D<'K,'V> = Dictionary<'K,'V>\n\n[<JavaScript>]\nmodule internal DictionaryUtil =\n\n    let notPresent () =\n        failwith \"The given key was not present in the dictionary.\"\n\n    let alreadyAdded () =\n        failwith \"An item with the same key has already been added.\"\n\n    let equals (c: IEqualityComparer<'T>) =\n        FuncWithArgs(fun (x, y) -> c.Equals(x, y))\n\n    [<Inline>]\n    let genEquals<'T when 'T : equality> () = \n        FuncWithArgs(fun (x :'T, y) -> x = y)\n\n    let getHashCode (c: IEqualityComparer<'T>) x =\n        c.GetHashCode x\n\nopen DictionaryUtil\nopen System.Runtime.InteropServices\n\n// not really used, a sequence enumerator is cast to this type instead\n// proxy is needed so calls against it compile\n// TODO: lazy iterating\n[<Proxy(typeof<D<_,_>.KeyCollection.Enumerator>)>]\n[<Stub>]\ntype private KeyCollectionEnumeratorProxy<'K,'V> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<'K> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n// not really used, a sequence enumerator is cast to this type instead\n// proxy is needed so calls against it compile\n// TODO: lazy iterating\n[<Proxy(typeof<D<_,_>.ValueCollection.Enumerator>)>]\n[<Stub>]\ntype private ValueCollectionEnumeratorProxy<'K,'V> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<'V> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n[<Name \"WebSharper.Collections.KeyCollection\">]\n[<Proxy(typeof<D<_,_>.KeyCollection>)>]\ntype private KeyCollectionProxy<'K,'V> (d: D<'K,'V>) =\n    member this.Count = d.Count \n\n    member this.GetEnumerator() =\n        As<D<'K,'V>.KeyCollection.Enumerator>(\n            (d |> Seq.map(fun kvp -> kvp.Key)).GetEnumerator())\n            \n    interface IEnumerable<'K> with\n        member this.GetEnumerator() = As<IEnumerator<'K>>(this.GetEnumerator())\n        member this.GetEnumerator() = As<IEnumerator>(this.GetEnumerator())\n\n[<Name \"WebSharper.Collections.ValueCollection\">]\n[<Proxy(typeof<D<_,_>.ValueCollection>)>]\ntype private ValueCollectionProxy<'K,'V> (d: D<'K,'V>) =\n    member this.Count = d.Count \n\n    member this.GetEnumerator() =\n        As<D<'K,'V>.ValueCollection.Enumerator>(\n            (d |> Seq.map(fun kvp -> kvp.Value)).GetEnumerator())\n            \n    interface IEnumerable<'V> with\n        member this.GetEnumerator() = As<IEnumerator<'V>>(this.GetEnumerator())\n        member this.GetEnumerator() = As<IEnumerator>(this.GetEnumerator())\n\n[<Proxy(typeof<D<_,_>.Enumerator>)>]\n[<Stub>]\ntype private DictionaryEnumeratorProxy<'K,'V> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<KVP<'K,'V>> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n/// Implements a proxy for the .NET dictionary.\n[<Name \"WebSharper.Collections.Dictionary\">]\n[<Proxy(typeof<D<_,_>>)>]\ntype internal Dictionary<'K,'V when 'K : equality>\n\n    private (init   : seq<KVP<'K,'V>>,\n             equals : FuncWithArgs<'K * 'K, bool>,\n             hash   : 'K -> int) =\n\n        let mutable count = 0\n        let mutable data  = As<Array<Array<KVP<'K, 'V>>>> [||]\n\n        let get k =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                notPresent()\n            else\n                d.Self |> Array.pick (fun (KeyValue(dk, v)) -> \n                    if equals.Call(dk, k) then Some v else None\n                ) \n\n        let set k v =\n            let h = hash k\n            let d = data.[h]\n            if d ==.null then\n                count <- count + 1\n                data.[h] <- Array(KVP(k, v))\n            else\n                match d.Self |> Array.tryFindIndex (fun (KeyValue(dk, _)) -> equals.Call(dk, k)) with\n                | Some i ->\n                    d.[i] <- KVP(k, v) \n                | None ->\n                    count <- count + 1\n                    d.Push(KVP(k, v)) |> ignore\n                    \n        let add k v =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                count <- count + 1\n                data.[h] <- Array(KVP(k, v))\n            else\n                if d.Self |> Array.exists (fun (KeyValue(dk, _)) -> equals.Call(dk, k)) then\n                    alreadyAdded()                    \n                count <- count + 1\n                d.Push(KVP(k, v)) |> ignore\n                    \n        let remove k =\n            let h = hash k \n            let d = data.[h]\n            if d ==. null then\n                false\n            else\n                let r = d.Self |> Array.filter (fun (KeyValue(dk, _)) -> not (equals.Call(dk, k)))\n                if r.Length < d.Length then                  \n                    count <- count - 1\n                    data.[h] <- r.JS\n                    true\n                else\n                    false\n\n        do for x in init do\n            set x.Key x.Value\n\n        new () = new Dictionary<'K,'V>([||], genEquals<'K>(), hash)\n\n        new (capacity: int) = new Dictionary<'K,'V>()\n\n        new (comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>([||], equals comparer, getHashCode comparer)\n\n        new (capacity: int, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(comparer)\n\n        new (dictionary: IDictionary<'K,'V>) =\n            new Dictionary<'K,'V>(dictionary, genEquals<'K>(), hash)\n\n        new (dictionary: IDictionary<'K,'V>, comparer: IEqualityComparer<'K>) =\n            new Dictionary<'K,'V>(\n                dictionary,\n                equals comparer,\n                getHashCode comparer\n            )\n\n        member this.Add(k: 'K, v: 'V) =\n            add k v\n\n        member this.Clear() =\n            data <- Array()\n            count <- 0\n\n        member this.ContainsKey(k: 'K) =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                false\n            else\n                d.Self |> Array.exists (fun (KeyValue(dk, _)) -> \n                    equals.Call(dk, k)\n                ) \n\n        member this.Count with [<Inline>] get () = count\n\n        member this.Item\n            with get (k: 'K) : 'V = get k\n            and set (k: 'K) (v: 'V) = set k v\n\n        member this.GetEnumerator() = As<D<'K,'V>.Enumerator> ((this :> System.Collections.IEnumerable).GetEnumerator())\n\n        interface System.Collections.IEnumerable with\n            member this.GetEnumerator() = \n                let s = JS.GetFieldValues data\n                (As<KeyValuePair<'K,'V>[][]> s |> Array.concat).GetEnumerator()\n            \n        interface IEnumerable<KeyValuePair<'K,'V>> with\n            member this.GetEnumerator() = As<IEnumerator<KeyValuePair<'K,'V>>> ((this :> System.Collections.IEnumerable).GetEnumerator())\n\n        member this.Remove(k: 'K) =\n            remove k\n\n        member this.TryGetValue(k: 'K, [<Out>] res : byref<'V>) =\n            let h = hash k\n            let d = data.[h]\n            if d ==. null then\n                false\n            else\n                let v =\n                    d.Self |> Array.tryPick (fun (KeyValue(dk, v)) -> \n                        if equals.Call(dk, k) then Some v else None\n                    ) \n                match v with \n                | Some v -> \n                    res <- v\n                    true\n                | _ -> false\n\n        member this.Values =\n            As<D<'K,'V>.ValueCollection>(ValueCollectionProxy(As<D<'K,'V>>this))\n\n        member this.Keys =\n            As<D<'K,'V>.KeyCollection>(KeyCollectionProxy(As<D<'K,'V>>this))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nmodule Exception =\n    let withInner (msg, inner) =\n        let e = Error(msg)\n        e?inner <- inner\n        e\n\n[<Name [| \"Error\" |]>]\n[<Proxy(typeof<System.Exception>)>]\ntype private ExceptionProxy =\n    [<Inline \"new Error()\">]\n    new () = { }\n\n    [<Inline \"new Error($message)\">]\n    new (message: string) = { }\n\n    [<Inline>]\n    static member CtorProxy (message: string, inner: exn) = Exception.withInner (message, inner)\n\n    member this.Message with [<Inline \"$this.message\">] get () = X<string>\n    member this.InnerException with [<Inline \"$this.inner\">] get () = X<System.Exception>\n    member this.StackTrace with [<Inline \"$this.stack\">] get () = X<string>\n\n[<Proxy(typeof<MatchFailureException>)>]\n[<Name \"MatchFailureException\">]\ntype private MatchFailureExceptionProxy (message: string, line: int, column: int) =\n    inherit exn(message + \" at \" + string line + \":\" + string column)\n\n[<Proxy(typeof<System.IndexOutOfRangeException>)>]\n[<Name \"IndexOutOfRangeException\">]\ntype private IndexOutOfRangeExceptionProxy(message: string) =\n    inherit exn(message)\n\n    new () = IndexOutOfRangeExceptionProxy \"Index was outside the bounds of the array.\"\n\n[<Proxy(typeof<System.OperationCanceledException>)>]\n[<Name \"OperationCanceledException\">]\ntype private OperationCanceledExceptionProxy(message: string, inner: exn, ct: CT) =\n    inherit exn(message, inner)\n\n    new (ct) = OperationCanceledExceptionProxy (\"The operation was canceled.\", null, ct)\n    \n    [<Inline>]\n    new () = OperationCanceledExceptionProxy (CT.None)\n    [<Inline>]\n    new (message) = OperationCanceledExceptionProxy (message, null, CT.None)\n    [<Inline>]\n    new (message, ct) = OperationCanceledExceptionProxy (message, null, ct)\n    [<Inline>]\n    new (message, inner) = OperationCanceledExceptionProxy (message, inner, CT.None)\n\n    [<Inline>]\n    member this.CancellationToken = ct\n\n[<Proxy(typeof<System.ArgumentException>)>]\n[<Name \"ArgumentException\">]\ntype private ArgumentExceptionProxy(message: string) =\n    inherit exn(message)\n    \n    new () = ArgumentExceptionProxy \"Value does not fall within the expected range.\"\n\n    new (argumentName: string, message: string) =\n        ArgumentExceptionProxy (message + \"\\nParameter name: \" + argumentName)\n\n[<Proxy(typeof<System.ArgumentOutOfRangeException>)>]\n[<Name \"ArgumentOutOfRangeException\">]\ntype private ArgumentOutOfRangeExceptionProxy =\n    inherit exn\n\n    new () =\n        { inherit exn(\"Specified argument was out of the range of valid values.\") }\n\n    new (argumentName: string) =\n        new ArgumentOutOfRangeExceptionProxy(argumentName, \"Specified argument was out of the range of valid values.\")\n\n    new (argumentName: string, message: string) =\n        { inherit exn(message + \"\\nParameter name: \" + argumentName) }\n\n[<Proxy(typeof<System.ArgumentNullException>)>]\n[<Name \"ArgumentNullException\">]\ntype private ArgumentNullExceptionProxy =\n    inherit exn\n\n    new () =\n        { inherit exn(\"Value cannot be null.\") }\n\n    new (argumentName: string) =\n        new ArgumentNullExceptionProxy(argumentName, \"Value cannot be null.\")\n\n    new (argumentName: string, message: string) =\n        { inherit exn(message + \"\\nParameter name: \" + argumentName) }\n\n[<Proxy(typeof<System.InvalidOperationException>)>]\n[<Name \"InvalidOperationException\">]\ntype private InvalidOperationExceptionProxy(message: string, innerExn: exn) =\n    inherit exn(message, innerExn)\n    \n    new () = InvalidOperationExceptionProxy \"Operation is not valid due to the current state of the object.\"\n\n    new (message) =\n        new InvalidOperationExceptionProxy(message, null)\n\n[<Proxy(typeof<System.AggregateException>)>]\n[<Name \"AggregateException\">]\ntype private AggregateExceptionProxy(message: string, innerExceptions: exn[]) =\n    inherit exn(message)\n\n    new (innerExceptions: exn[]) = AggregateExceptionProxy(\"One or more errors occurred.\", innerExceptions)\n\n    new (innerExceptions: seq<exn>) = AggregateExceptionProxy(\"One or more errors occurred.\", Array.ofSeq innerExceptions)\n\n    new (message, innerExceptions: seq<exn>) = AggregateExceptionProxy(message, Array.ofSeq innerExceptions)\n\n    new (message, innerException: exn) = AggregateExceptionProxy(message, [| innerException |])\n\n    [<Inline>]\n    member this.InnerExceptions \n        with get() = As<System.Collections.ObjectModel.ReadOnlyCollection<exn>> innerExceptions\n\n[<Proxy(typeof<System.TimeoutException>)>]\n[<Name \"TimeoutException\">]\ntype private TimeoutExceptionProxy(message: string) =\n    inherit exn(message)\n    \n    new () = TimeoutExceptionProxy \"The operation has timed out.\"\n\n[<Proxy(typeof<System.FormatException>)>]\n[<Name \"FormatException\">]\ntype private FormatException(message: string) =\n    inherit exn(message)\n\n    new () = FormatException \"One of the identified items was in an invalid format.\"\n\n[<Proxy(typeof<System.OverflowException>)>]\n[<Name \"OverflowException\">]\ntype private OverflowException(message: string) =\n    inherit exn(message)\n\n    new () = OverflowException \"Arithmetic operation resulted in an overflow.\"\n\n[<Proxy(typeof<System.Threading.Tasks.TaskCanceledException>)>]\n[<Name \"TaskCanceledException\">]\ntype private TaskCanceledException(message: string) =\n    inherit exn(message)\n\n    new () = TaskCanceledException \"A task was canceled.\"\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.ExtraTopLevelOperators, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ExtraTopLevelOperatorsProxy\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Inline \"null\">]\nlet DefaultAsyncBuilder : Control.AsyncBuilder =\n    As (AsyncBuilderProxy())\n\n[<Name \"WebSharper.Arrays.create2D\" >]\nlet CreateArray2D (rows : seq<#seq<'T>>) =\n    let arr = rows |> Seq.map (Array.ofSeq) |> Array.ofSeq |> As<'T[,]>\n    arr?dims <- 2\n    arr\n\n[<Inline \"+$0\">]\nlet ToDouble<'T> (x: 'T) : double = X\n\n[<Inline \"$f(function(x){return x;})\">]\nlet PrintFormatToString (f: Printf.StringFormat<'T>) = X<'T>\n\n[<Inline; JavaScript>]\nlet PrintFormatToStringThen k f = Printf.ksprintf k f \n\n[<Inline; JavaScript>]\nlet PrintFormatLine f = Printf.printfn f \n\n[<Inline; JavaScript>]\nlet PrintFormatToStringThenFail f = Printf.failwithf f \n\n[<Inline; JavaScript>]\nlet SpliceExpression (e: Microsoft.FSharp.Quotations.Expr<'T>) =\n    As<'T> e\n\n[<Inline; JavaScript>]\nlet SpliceUntypedExpression<'T> (e: Microsoft.FSharp.Quotations.Expr) =\n    As<'T> e\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nopen Concurrency\nopen System.Runtime.InteropServices\n\n[<Proxy(typeof<System.Guid>)>]\n[<Prototype(false)>]\ntype internal GuidProxy =\n    \n    [<Inline \"$g\">]\n    new (g: string) = {}\n    \n    [<Direct \"return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n        var r = Math.random()*16|0, v = c == 'x' ? r : (r&3|8);\n        return v.toString(16); });\">]\n    static member NewGuid() = X<System.Guid>\n\n    [<Constant \"00000000-0000-0000-0000-000000000000\">]\n    static member Empty = X<System.Guid>\n\n    [<Inline \"$this\">]\n    override this.ToString() = X<string>\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality(a: System.Guid, b: System.Guid) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality(a: System.Guid, b: System.Guid) = X<bool>\n\n    [<Inline>]\n    member this.CompareTo(s: System.Guid) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    member this.CompareTo(s: obj) =\n        Unchecked.compare (this :> obj) s\n\n    static member FormatError() =\n        raise (FormatException \"\"\"Format String can be only \"D\", \"d\", \"N\", \"n\", \"P\", \"p\", \"B\", \"b\", \"X\" or \"x\".\"\"\")\n\n    static member HexaError() =\n        raise (FormatException \"Hexadecimal Guid printing not implemented by WebSharper.\")\n\n    static member ShapeError() =\n        raise (FormatException \"Guid should contain 32 digits with 4 dashes (xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx).\")\n\n    static member ParseError() =\n        raise (FormatException \"Unrecognized Guid format.\")\n\n    member this.ToString(format: string) =\n        match format.ToUpper() with\n        | \"N\" -> (As<string> this).Replace(\"-\", \"\")\n        | \"D\" -> As<string> this\n        | \"B\" -> \"{\" + As<string> this + \"}\"\n        | \"P\" -> \"(\" + As<string> this + \")\"\n        | \"X\" ->\n            let s = As<string> this\n            \"{0x\" + s.Substring(0, 8) + \",0x\" + s.Substring(9, 4) + \",0x\" + s.Substring(14, 4) + \",{0x\"\n            + s.Substring(19, 2) + \",0x\" + s.Substring(21, 2) + \",0x\" + s.Substring(24, 2) + \",0x\"\n            + s.Substring(26, 2) + \",0x\" + s.Substring(28, 2) + \",0x\" + s.Substring(30, 2) + \",0x\" \n            + s.Substring(32, 2) + \",0x\" + s.Substring(34, 2) + \"}}\"\n        | _ -> GuidProxy.FormatError()\n    \n    static member Parse(input: string) =\n        try GuidProxy.ParseExact(input, \"D\") \n        with _ ->\n        try GuidProxy.ParseExact(input, \"B\") \n        with _ ->\n        try GuidProxy.ParseExact(input, \"P\") \n        with _ ->\n        try GuidProxy.ParseExact(input, \"N\") \n        with _ ->\n            GuidProxy.ParseExact(input, \"X\") \n\n    static member ParseExact(input: string, format: string) =\n        let parseD (s: string) =\n            for i = 0 to 35 do\n                match i with \n                | 8 | 13 | 18 | 23 -> if s.[i] <> '-' then GuidProxy.ShapeError()\n                | _ ->\n                    let c = s.[i]\n                    if not (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) then GuidProxy.ShapeError()   \n            As<System.Guid> s    \n\n        match format.ToUpper() with\n        | \"N\" -> \n            let s = input.Trim().ToLower()\n            if s.Length <> 32 then GuidProxy.ShapeError()\n            for i = 0 to 31 do\n                let c = s.[i]\n                if not (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) then GuidProxy.ShapeError()   \n            s.Substring(0, 8) + \"-\" + s.Substring(8, 4) + \"-\" + s.Substring(12, 4) + \"-\" \n            + s.Substring(16, 4) + \"-\" + s.Substring(20)\n            |> As<System.Guid>\n        | \"D\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 36 then GuidProxy.ShapeError()\n            parseD s\n        | \"B\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 38 || s.[0] <> '{' || s.[17] <> '}' then GuidProxy.ShapeError()\n            parseD (s.Substring(1, 36))\n        | \"P\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 38 || s.[0] <> '(' || s.[17] <> ')' then GuidProxy.ShapeError()\n            parseD (s.Substring(1, 36))\n        | \"X\" ->\n            let s = input.Trim().ToLower()\n            if s.Length <> 68 then GuidProxy.ShapeError()\n            for i = 0 to 67 do\n                match i with \n                | 0 | 26 -> if s.[i] <> '{' then GuidProxy.ShapeError()\n                | 1 | 12 | 19 | 27 | 32 | 37 | 42 | 47 | 52 | 57 | 62 -> if s.[i] <> '0' then GuidProxy.ShapeError()\n                | 2 | 13 | 20 | 28 | 33 | 38 | 43 | 48 | 53 | 58 | 63 -> if s.[i] <> 'x' then GuidProxy.ShapeError()\n                | 11 | 18 | 25 | 31 | 36 | 41 | 46 | 51 | 56 | 61 -> if s.[i] <> ',' then GuidProxy.ShapeError()\n                | 66 | 67 -> if s.[i] <> '{' then GuidProxy.ShapeError()\n                | _ ->\n                    let c = s.[i]\n                    if not (('0' <= c && c <= '9') || ('a' <= c && c <= 'f')) then GuidProxy.ShapeError() \n            s.Substring(3, 8) + \"-\" + s.Substring(14, 4) + \"-\" + s.Substring(21, 4) + \"-\" + s.Substring(29, 2) \n            + s.Substring(34, 2) + \"-\" + s.Substring(39, 2) + s.Substring(44, 2) + s.Substring(49, 2) \n            + s.Substring(54, 2) + s.Substring(59, 2) + s.Substring(64, 2)\n            |> As<System.Guid>\n        | _ -> GuidProxy.FormatError()\n\n    static member TryParse(input: string, [<Out>] output: byref<System.Guid>) =\n        try \n            output <- GuidProxy.Parse(input)\n            true\n        with _ -> false\n\n    static member TryParseExact(input: string, format: string, [<Out>] output: byref<System.Guid>) =\n        try \n            output <- GuidProxy.ParseExact(input, format)\n            true\n        with _ -> false\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Collections\n\nopen System.Collections\nopen System.Collections.Generic\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule private HashSetUtil =\n    [<Direct \"var r=[]; for(var k in $o) { r.push.apply(r, $o[k]) }; return r\">]\n    let concat (o: Array<Array<'T>>) = X<Array<'T>>\n    \nopen DictionaryUtil\n\n// not really used, an array enumerator is cast to this type instead\n// proxy is needed so calls against it compile\n// TODO: lazy iterating\n[<Proxy(typeof<HashSet<_>.Enumerator>)>]\n[<Stub>]\ntype private HashSetEnumeratorProxy<'T> [<JavaScript(false)>] () =\n    [<Inline \"$this.Current()\">]\n    member this.get_Current() = As<'T> 0        \n    member this.MoveNext() = false\n    member this.Dispose() = ()\n\n[<Proxy(typeof<HashSet<_>>)>]\n[<Name \"HashSet\">]\ntype internal HashSetProxy<'T when 'T : equality>\n\n    private (init   : seq<'T>,\n             equals : FuncWithArgs<'T * 'T, bool>,\n             hash   : 'T -> int) =\n\n        let mutable data  = Array<Array<'T>>()\n        let mutable count = 0\n\n        let arrContains (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals.Call(arr.[i], item) then\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        let arrRemove (item: 'T) (arr: Array<'T>)  =\n            let mutable c = true\n            let mutable i = 0\n            let l = arr.Length\n            while c && i < l do\n                if equals.Call(arr.[i], item) then\n                    arr.Splice(i, 1) |> ignore\n                    c <- false\n                else\n                    i <- i + 1\n            not c\n\n        let add (item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then\n                data.[h] <- As [| item |]\n                count <- count + 1\n                true\n            else\n                if arrContains item arr then false else    \n                    arr.Push item |> ignore\n                    count <- count + 1\n                    true\n\n        do for x in init do add x |> ignore\n\n        new () = HashSetProxy<'T>(Seq.empty, genEquals<'T>(), hash)\n\n        new (init: seq<'T>) = new HashSetProxy<'T>(init, genEquals<'T>(), hash)\n\n        new (comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(Seq.empty, equals comparer, getHashCode comparer)\n\n        new (init: seq<'T>, comparer: IEqualityComparer<'T>) =\n            new HashSetProxy<'T>(init, equals comparer, getHashCode comparer)\n\n        member this.Add(item: 'T) = add item\n\n        member this.Clear() =\n            data <- Array()\n            count <- 0\n\n        member x.Contains(item: 'T) =\n            let arr = data.[hash item]\n            if arr ==. null then false else arrContains item arr\n\n        member x.CopyTo(arr: 'T[]) =\n            let mutable i = 0\n            let all = concat data \n            for i = 0 to all.Length - 1 do \n                arr.[i] <- all.[i]\n\n        member x.Count = count\n\n        member x.ExceptWith(xs: seq<'T>) =\n            for item in xs do\n                x.Remove(item) |> ignore\n\n        [<Inline>]\n        member this.GetEnumerator() =\n           As<HashSet<'T>.Enumerator>((As<seq<'T>>(concat data)).GetEnumerator())\n\n        interface IEnumerable with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n        \n        interface IEnumerable<'T> with\n            member this.GetEnumerator() = this.GetEnumerator() :> _\n\n        // TODO: optimize methods by checking if other collection\n        // is a HashSet with the same IEqualityComparer\n        \n        member x.IntersectWith(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash) \n            let all = concat data\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if other.Contains(item) |> not then\n                    x.Remove(item) |> ignore\n\n        member x.IsProperSubsetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count < other.Length && x.IsSubsetOf(other)\n\n        member x.IsProperSupersetOf(xs: seq<'T>) =\n            let other = xs |> Array.ofSeq\n            count > other.Length && x.IsSupersetOf(other)\n\n        member x.IsSubsetOf(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            As<_[]>(concat data) |> Array.forall other.Contains\n\n        member x.IsSupersetOf(xs: seq<'T>) =\n            xs |> Seq.forall x.Contains\n\n        member x.Overlaps(xs: seq<'T>) =\n            xs |> Seq.exists x.Contains\n\n        member x.Remove(item: 'T) =\n            let h = hash item\n            let arr = data.[h]\n            if arr ==. null then false else\n                if arrRemove item arr then\n                    count <- count - 1\n                    true\n                else false\n\n        member x.RemoveWhere(cond: System.Predicate<'T>) =\n            let all = concat data\n            let mutable res = 0\n            for i = 0 to all.Length - 1 do\n                let item = all.[i]\n                if cond.Invoke item then\n                    if x.Remove(item) then\n                        res <- res + 1\n            res\n\n        member x.SetEquals(xs: seq<'T>) =\n            let other = HashSetProxy(xs, equals, hash)\n            x.Count = other.Count && x.IsSupersetOf(other)\n\n        member x.SymmetricExceptWith(xs: seq<'T>) =\n            for item in xs do\n                if x.Contains item then\n                    x.Remove(item) |> ignore\n                else\n                    x.Add(item) |> ignore\n\n        member x.UnionWith(xs: seq<'T>) =\n            for item in xs do\n                x.Add(item) |> ignore\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Proxy(typeof<System.IComparable>)>]\ntype private IComparableProxy =\n    [<Name \"CompareTo0\">]\n    abstract CompareTo : obj -> int\n\n[<Proxy(typeof<System.IComparable<_>>)>]\ntype private IComparableProxy<'T> =\n    [<Name \"CompareTo\">]\n    abstract CompareTo : 'T -> int\n\n[<Proxy(typeof<System.Collections.IEqualityComparer>)>]\ntype private IEqualityComparerProxy =\n    [<Name \"CEquals0\">]\n    abstract Equals : obj * obj -> bool \n    [<Name \"CGetHashCode0\">]\n    abstract GetHashCode : obj -> int\n\n[<Proxy(typeof<System.Collections.Generic.IEqualityComparer<_>>)>]\ntype private IEqualityComparerProxy<'T> =\n    [<Name \"CEquals\">]\n    abstract Equals : 'T * 'T -> bool \n    [<Name \"CGetHashCode\">]\n    abstract GetHashCode : 'T -> int\n\n[<Proxy(typeof<System.Collections.Generic.EqualityComparer<_>>)>]\n[<Name \"WebSharper.Collections.EqualityComparer\">]\n[<AbstractClass>]\ntype private EqualityComparerProxy<'T>() =\n    abstract Equals : 'T * 'T -> bool \n    abstract GetHashCode : 'T -> int\n    interface System.Collections.Generic.IEqualityComparer<'T> with\n        member this.Equals(x, y) = this.Equals(x, y)\n        member this.GetHashCode(x) = this.GetHashCode(x)\n    interface System.Collections.IEqualityComparer with\n        member this.Equals(x, y) = this.Equals(As x, As y)\n        member this.GetHashCode(x) = this.GetHashCode(As x)\n    [<Macro(typeof<M.EqualityComparer>)>]\n    static member Default = X<System.Collections.Generic.EqualityComparer<'T>>\n\n[<Proxy(typeof<System.Collections.IComparer>)>]\ntype private IComparerProxy =\n    [<Name \"Compare0\">]\n    abstract Compare : obj * obj -> int\n\n[<Proxy(typeof<System.Collections.Generic.IComparer<_>>)>]\ntype private IComparerProxy<'T> =\n    [<Name \"Compare\">]\n    abstract Compare : 'T * 'T -> int\n\n[<Proxy(typeof<System.Collections.Generic.Comparer<_>>)>]\n[<Name \"WebSharper.Collections.Comparer\">]\n[<AbstractClass>]\ntype private ComparerProxy<'T>() =\n    abstract Compare : 'T * 'T -> int\n    interface System.Collections.Generic.IComparer<'T> with\n        member this.Compare(x, y) = this.Compare(x, y)\n    interface System.Collections.IComparer with\n        member this.Compare(x, y) = this.Compare(As x, As y)\n    [<Macro(typeof<M.Comparer>)>]\n    static member Default = X<System.Collections.Generic.Comparer<'T>>\n\n[<Proxy(typeof<System.IEquatable<_>>)>]\ntype private IEquatableProxy<'T> =\n    [<Name \"EEquals\">]\n    abstract Equals : 'T -> bool\n\n[<Proxy(typeof<System.Collections.IStructuralEquatable>)>]\ntype private IStructuralEquatableProxy =\n    [<Name \"SEquals\">]\n    abstract Equals : obj * System.Collections.IEqualityComparer -> bool \n    [<Name \"SGetHashCode\">]\n    abstract GetHashCode : System.Collections.IEqualityComparer -> int\n\n[<Proxy(typeof<System.Collections.IStructuralComparable>)>]\ntype private IStructuralComparableProxy =\n    [<Name \"SCompareTo\">]\n    abstract CompareTo : obj * System.Collections.IComparer -> int \n\n[<Proxy(typeof<System.IDisposable>)>]\ntype private IDisposableProxy =\n    [<Name \"Dispose\">]\n    abstract member Dispose : unit -> unit\n\n[<Proxy(typeof<System.Collections.IEnumerable>)>]  \ntype private IEnumerableProxy =\n\n    [<Name \"GetEnumerator0\">]\n    abstract GetEnumerator : unit -> System.Collections.IEnumerator\n\n[<Proxy(typeof<seq<_>>)>]  \ntype private IEnumerableProxy<'T> =\n    inherit System.Collections.IEnumerable \n    \n    [<Name \"GetEnumerator\">]\n    abstract GetEnumerator : unit -> System.Collections.Generic.IEnumerator<'T>\n    \n[<Proxy(typeof<System.Collections.IEnumerator>)>]\n[<Name \"WebSharper.IEnumerator\">]\ntype private IEnumeratorProxy =\n    [<Name \"Current0\">]\n    abstract member Current  : obj\n    [<Name \"MoveNext\">]\n    abstract member MoveNext : unit -> bool\n    [<Name \"Reset\">]\n    abstract member Reset    : unit -> unit\n\n[<Proxy(typeof<System.Collections.Generic.IEnumerator<_>>)>]\n[<Name \"WebSharper.IEnumerator1\">]\ntype private IEnumeratorProxy<'T> =\n    [<Name \"Current\">]\n    abstract member Current : 'T\n\n[<Proxy(typeof<System.IObservable<_>>)>]\ntype private IObservableProxy<'T> =\n    [<Name \"Subscribe\">]\n    abstract member Subscribe : System.IObserver<'T> -> System.IDisposable\n\n[<Proxy(typeof<System.IObserver<_>>)>]\ntype private IObserverProxy<'T> =\n    [<Name \"OnCompleted\">]\n    abstract member OnCompleted : unit -> unit\n    [<Name \"OnError\">]\n    abstract member OnError : exn -> unit\n    [<Name \"OnNext\">]\n    abstract member OnNext : 'T -> unit\n\n[<Proxy(typeof<IDelegateEvent<_>>)>]\ntype private IDelegateEventProxy<'D> =\n    [<Name \"AddHandler\">]\n    abstract AddHandler : 'D -> unit\n    [<Name \"RemoveHandler\">]\n    abstract RemoveHandler : 'D -> unit\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Lazy\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Control.LazyExtensions, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.LazyExtensionsProxy\n\nopen WebSharper.JavaScript\n\n[<JavaScript; Prototype false>]\ntype LazyRecord<'T> =\n    {\n        [<Name \"c\">] mutable created : bool\n        [<Name \"v\">] mutable evalOrVal : obj\n        [<Name \"f\">] mutable force : unit -> 'T\n    }\n\nlet cachedLazy<'T> () =\n    JS.This.evalOrVal\n\nlet forceLazy<'T> () =\n    let v = (As JS.This.evalOrVal)()\n    JS.This.created <- true\n    JS.This.evalOrVal <- v\n    JS.This.force <- As cachedLazy\n    v\n\nlet Create (f: unit -> 'T) : Lazy<'T> =\n    As {\n        created = false\n        evalOrVal = f\n        force = As forceLazy\n    }\n\nlet CreateFromValue (v: 'T) : Lazy<'T> =\n    As {\n        created = true\n        evalOrVal = v\n        force = As cachedLazy\n    }\n\nlet Force (x: Lazy<'T>) : 'T =\n    As<LazyRecord<'T>>(x).force()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<list<_>>)>]\n[<Name \"WebSharper.List.T\">]\n[<DefaultAugmentation(false)>]\ntype private ListProxy<'T> =\n    | Empty\n    | Cons of Head: 'T * Tail: List<'T>\n\n    [<Inline; Pure>]\n    static member Cons(head: 'T, tail: list<'T>) = head :: tail\n\n    [<Inline; Pure>]\n    static member Empty : list<'T> = []\n\n    member this.Head with [<Inline>] get () = List.head (As this) : 'T\n    member this.Tail with [<Inline>] get () = List.tail (As this) : list<'T>\n    member this.IsEmpty with [<Inline \"$this.$ == 0\">] get () = X<bool>\n\n    member this.Length with get () = List.length (As this)\n\n    member this.Item with get (x: int) : 'T = List.item x (As this)\n\n    interface System.Collections.IEnumerable with\n        member this.GetEnumerator() = (this :> _ seq).GetEnumerator() :> _\n\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            let data = As<list<'T>> this\n            Enumerator.New data (fun e ->\n                match e.State with\n                | x :: xs ->\n                    e.Current <- x\n                    e.State <- xs\n                    true\n                | [] ->\n                    false)\n\n    member this.GetSlice(start, finish) : list<'T> =\n        match start, finish with\n        | None, None -> As this\n        | Some i, None -> As this |> CollectionInternals.ListSkip i\n        | None, Some j -> As this |> Seq.take (j + 1) |> List.ofSeq  \n        | Some i, Some j -> As this |> CollectionInternals.ListSkip i |> Seq.take (j - i + 1) |> List.ofSeq        \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"List\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.ListModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ListModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\nlet badLengths() =\n    failwith \"The lists have different lengths.\"\n\nlet listEmpty() =\n    failwith \"The input list was empty.\"\n\n[<Inline \"$l.$0\">]\nlet unsafeHead (l: list<'T>) = X<'T> \n\n[<Inline \"$l.$1\">]\nlet unsafeTail (l: list<'T>) = X<list<'T>> \n\n[<Inline>]\nlet setValue (l: list<'T>) (v: 'T) =\n    JS.Set l \"$0\" v\n\n[<Inline>]\nlet setTail (l: list<'T>) (t: list<'T>) =\n    JS.Set l \"$1\" t\n\n[<Inline \"new WebSharper.List.T({$: 1})\"; Pure>]\nlet freshEmptyList() = X<list<'T>>\n\n[<Inline>]\nlet freshTail (l: list<'T>) =\n    let t = freshEmptyList()\n    setTail l t\n    t\n\n[<Inline \"$l.$ == 1\">]\nlet notEmpty (l: list<_>) = X<bool>\n\n[<Name \"allPairs\">]\nlet AllPairs (l1: list<_>) (l2: list<_>) =\n    let arr1 = Array.ofList l1\n    let arr2 = Array.ofList l2\n    let res = Array.allPairs arr1 arr2\n    List.ofArray res\n\n[<Name \"append\">]\nlet Append (x: list<'T>) (y: list<'T>) = \n    if List.isEmpty x then y\n    elif List.isEmpty y then x else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l = x\n    let mutable go = true\n    while go do\n        setValue r (unsafeHead l)\n        l <- unsafeTail l\n        if List.isEmpty l then\n            go <- false\n        else\n            r <- freshTail r\n    setTail r y |> ignore\n    res\n\n[<Inline>]\nlet inline Average (l: list<_>) = Seq.average l\n\n[<Inline>]\nlet inline AverageBy f (l: list<_>) = Seq.averageBy f l\n\n[<Name \"choose\">]\nlet Choose f (l: list<_>) = List.ofSeq (Seq.choose f l)\n\n[<Name \"collect\">]\nlet Collect (f: _ -> list<_>) (l: list<_>) = List.ofSeq (Seq.collect f l)\n\n[<Name \"concat\">]\nlet Concat (s: seq<list<_>>) = List.ofSeq (Seq.concat s)\n\n[<Inline>]\nlet Empty<'T> : list<'T> = []\n\n[<Name \"exists\">]\nlet Exists<'T> (p: 'T -> bool) (x: list<'T>) =\n    let mutable e = false\n    let mutable l = x\n    while not e && notEmpty l do\n        e <- p (unsafeHead l)\n        l <- unsafeTail l\n    e\n\n[<Name \"exists2\">]\nlet Exists2<'T1,'T2> (p : 'T1 -> 'T2 -> bool)\n                        (x1: list<'T1>)\n                        (x2: list<'T2>) =\n    let mutable e = false\n    let mutable l1 = x1\n    let mutable l2 = x2\n    while not e && notEmpty l1 && notEmpty l2 do\n        e <- p (unsafeHead l1) (unsafeHead l2)\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n    if not e && (notEmpty l1 || notEmpty l2) then\n        badLengths()\n    e\n\n[<Name \"filter\">]\nlet Filter<'T> (p: 'T -> bool) (l: list<'T>) =\n    List.ofSeq (Seq.filter p l)\n\n[<Inline>]\nlet Find p (l: list<_>) = Seq.find p l\n\n[<Inline>]\nlet FindIndex p (l: list<_>) = Seq.findIndex p l\n\n[<Inline>]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (l: list<'T>) : 'S =\n    Seq.fold f s l\n\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> (f: 'S -> 'T1 -> 'T2 -> 'S)\n                        (s: 'S)\n                        (l1: list<'T1>)\n                        (l2: list<'T2>) : 'S =\n    Array.fold2 f s (Array.ofList l1) (Array.ofList l2)\n\n[<Name \"foldBack\">]\nlet FoldBack f (l: list<_>) s =\n    Array.foldBack f (Array.ofList l) s\n\n[<Name \"foldBack2\">]\nlet FoldBack2 f (l1: list<_>) (l2: list<_>) s =\n    Array.foldBack2 f (Array.ofList l1) (Array.ofList l2) s\n\n[<Name \"forAll\">]\nlet ForAll p (x: list<_>) =\n    let mutable a = true\n    let mutable l = x\n    while a && notEmpty l do\n        a <- p (unsafeHead l)\n        l <- unsafeTail l\n    a\n\n[<Name \"forall2\">]\nlet ForAll2 p (x1: list<_>) (x2: list<_>) =\n    let mutable a = true\n    let mutable l1 = x1\n    let mutable l2 = x2\n    while a && notEmpty l1 && notEmpty l2 do\n        a <- p (unsafeHead l1) (unsafeHead l2)\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n    if a && (notEmpty l1 || notEmpty l2) then\n        badLengths()\n    a\n\n[<Name \"head\">]\nlet Head (l: list<'T>) =\n    match l with \n    | h :: _ -> h\n    | _ -> listEmpty()\n\n[<Name \"init\">]\nlet Initialize s f = List.ofArray (Array.init s f)\n\n[<Inline \"$l.$ == 0\">]\nlet IsEmpty (l: list<_>) = X<bool>\n\n[<Name \"iter\">]\nlet Iterate f (l: list<_>) =\n    let mutable r = l\n    while notEmpty r do\n        f r.Head\n        r <- r.Tail\n\n[<Name \"iter2\">]\nlet Iterate2 f (l1: list<_>) (l2: list<_>) =\n    let mutable r1 = l1\n    let mutable r2 = l2\n    while notEmpty r1 do\n        if List.isEmpty r2 then\n            badLengths()\n        f r1.Head r2.Head\n        r1 <- r1.Tail\n        r2 <- r2.Tail\n    if notEmpty r2 then\n        badLengths()\n\n[<Name \"iteri\">]\nlet IterateIndexed f (l: list<_>) =\n    let mutable r = l\n    let mutable i = 0\n    while notEmpty r do\n        f i r.Head\n        r <- r.Tail\n        i <- i + 1\n\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (l1: list<_>) (l2: list<_>) =\n    let mutable r1 = l1\n    let mutable r2 = l2\n    let mutable i = 0\n    while notEmpty r1 do\n        if List.isEmpty r2 then\n            badLengths()\n        f i r1.Head r2.Head\n        r1 <- r1.Tail\n        r2 <- r2.Tail\n        i <- i + 1\n    if notEmpty r2 then\n        badLengths()\n\n[<Name \"length\">]\nlet Length (l: list<_>) =\n    let mutable r = l\n    let mutable i = 0\n    while notEmpty r do\n        r <- r.Tail\n        i <- i + 1\n    i\n\n[<Name \"map\">]\nlet Map (f: 'T1 -> 'T2) (x: list<'T1>) = \n    if List.isEmpty x then As x else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l = x\n    let mutable go = true\n    while go do\n        setValue r (f (unsafeHead l))\n        l <- unsafeTail l\n        if List.isEmpty l then\n            go <- false\n        else\n            r <- freshTail r\n    setTail r []\n    res\n\n[<Name \"map2\">]\nlet Map2 (f: 'T1 -> 'T2 -> 'T3) (x1: list<'T1>) (x2: list<'T2>) =\n    let mutable go = notEmpty x1 && notEmpty x2\n    if not go then \n        if notEmpty x1 || notEmpty x2 then\n            badLengths()\n        else As x1\n    else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l1 = x1\n    let mutable l2 = x2\n    while go do\n        setValue r (f (unsafeHead l1) (unsafeHead l2))\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n        if notEmpty l1 && notEmpty l2 then\n            r <- freshTail r\n        else \n            go <- false\n    if notEmpty l1 || notEmpty l2 then\n        badLengths()\n    setTail r []\n    res\n\n[<Name \"map3\">]\nlet Map3 (f: 'T1 -> 'T2 -> 'T3 -> 'T4) (x1: list<'T1>) (x2: list<'T2>) (x3: list<'T3>) =\n    let mutable go = notEmpty x1 && notEmpty x2 && notEmpty x3\n    if not go then \n        if notEmpty x1 || notEmpty x2 || notEmpty x3 then\n            badLengths()\n        else As x1\n    else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l1 = x1\n    let mutable l2 = x2\n    let mutable l3 = x3\n    while go do\n        setValue r (f (unsafeHead l1) (unsafeHead l2) (unsafeHead l3))\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n        l3 <- unsafeTail l3\n        if notEmpty l1 && notEmpty l2 && notEmpty l3 then\n            r <- freshTail r\n        else \n            go <- false\n    if notEmpty l1 || notEmpty l2 || notEmpty l3 then\n        badLengths()\n    setTail r []\n    res\n\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> 'T1 -> 'T2) (x: list<'T1>) =\n    if List.isEmpty x then As x else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l = x\n    let mutable i = 0\n    let mutable go = true\n    while go do\n        setValue r (f i (unsafeHead l))\n        l <- unsafeTail l\n        if List.isEmpty l then \n            go <- false\n        else\n            r <- freshTail r\n            i <- i + 1\n    setTail r []\n    res\n\n[<Name \"mapi2\">]\nlet MapIndexed2 (f: int -> 'T1 -> 'T2 -> 'T3) (x1: list<'T1>) (x2: list<'T2>) =\n    let mutable go = notEmpty x1 && notEmpty x2\n    if not go then \n        if notEmpty x1 || notEmpty x2 then\n            badLengths()\n        else As x1\n    else\n    let res = freshEmptyList()\n    let mutable r = res\n    let mutable l1 = x1\n    let mutable l2 = x2\n    let mutable i = 0\n    while go do\n        setValue r (f i (unsafeHead l1) (unsafeHead l2))\n        l1 <- unsafeTail l1\n        l2 <- unsafeTail l2\n        if notEmpty l1 && notEmpty l2 then\n            r <- freshTail r\n            i <- i + 1\n        else \n            go <- false\n    if notEmpty l1 || notEmpty l2 then\n        badLengths()\n    setTail r []\n    res\n\nlet private nonEmpty (l: list<_>) =\n    if List.isEmpty l then\n        listEmpty()\n\n[<Name \"max\">]\nlet Max (list: list<_>) = \n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        if x > m then\n            m <- x\n        l <- unsafeTail l\n    m\n\n[<Name \"maxBy\">]\nlet MaxBy f (list: list<_>) =\n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable fm = f m\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        let fx = f x\n        if fx > fm then\n            m <- x\n            fm <- fx\n        l <- unsafeTail l\n    m\n\n[<Name \"min\">]\nlet Min (list: list<_>) =\n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        if x < m then\n            m <- x\n        l <- unsafeTail l\n    m\n\n[<Name \"minBy\">]\nlet MinBy f (list: list<_>) =\n    nonEmpty list\n    let mutable m = unsafeHead list\n    let mutable fm = f m\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        let x = unsafeHead l\n        let fx = f x\n        if fx < fm then\n            m <- x\n            fm <- fx\n        l <- unsafeTail l\n    m\n\n[<Inline>]\nlet Get (l: list<_>) ix = Seq.item ix l\n\n[<Inline>]\nlet Item ix (l: list<_>) = Seq.item ix l\n\n[<Name \"ofArray\">]\nlet OfArray<'T> (arr: 'T []) =\n    let mutable r = []\n    for i = arr.Length - 1 downto 0 do\n        r <- arr.[i] :: r\n    r\n\n[<Name \"ofSeq\">]\nlet OfSeq (s: seq<'T>) =\n    if s :? _ list then\n        As<'T list> s\n    elif s :? System.Array then\n        List.ofArray (As<'T[]> s)\n    else\n        use e = Enumerator.Get s\n        let mutable go = e.MoveNext()\n        if not go then [] else\n        let res = freshEmptyList()\n        let mutable r = res\n        while go do\n            setValue r e.Current\n            if e.MoveNext() then\n                r <- freshTail r\n            else    \n                go <- false\n        setTail r []\n        res\n\n[<Name \"partition\">]\nlet Partition p (l: list<_>) =\n    let (a, b) = Array.partition p (Array.ofList l)\n    (List.ofArray a, List.ofArray b)\n\n[<Name \"permute\">]\nlet Permute f (l: list<_>) =\n    List.ofArray (Array.permute f (Array.ofList l))\n\n[<Inline>]\nlet Pick f (l: list<_>) = Seq.pick f l\n\n[<Name \"reduce\">]\nlet Reduce (f: 'T -> 'T -> 'T) (list: list<'T>) : 'T =\n    nonEmpty list\n    let mutable r = unsafeHead list\n    let mutable l = unsafeTail list\n    while notEmpty l do\n        r <- f r (unsafeHead l)\n        l <- unsafeTail l\n    r\n\n[<Name \"reduceBack\">]\nlet ReduceBack f (l: list<_>) =\n    Array.reduceBack f (Array.ofList l)\n\n[<Name \"replicate\">]\nlet Replicate size value =\n    List.ofArray (Array.create size value)\n\n[<Name \"rev\">]\nlet Reverse (l: list<'T>) =\n    let mutable res = []\n    let mutable r = l\n    while notEmpty r do\n        res <- unsafeHead r :: res\n        r <- unsafeTail r\n    res\n\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (l: list<'T>) : list<'S> =\n    List.ofSeq (Seq.scan f s l)\n\n[<Name \"scanBack\">]\nlet ScanBack f (l: list<_>) s =\n    List.ofArray (Array.scanBack f (Array.ofList l) s)\n\n[<Name \"sort\">]\nlet Sort (l: list<_>) =\n    let a = Array.ofList l\n    Array.sortInPlace a\n    List.ofArray a\n\n[<Name \"sortBy\">]\nlet SortBy f (l: list<_>) =\n    let a = Array.ofList l\n    Array.sortInPlaceBy f a\n    List.ofArray a\n\n[<Name \"sortByDescending\">]\nlet SortByDescending f (l: list<_>) =\n    let a = Array.ofList l\n    ArraySortInPlaceByDescending f a\n    List.ofArray a\n\n[<Name \"sortDescending\">]\nlet SortDescending (l: list<_>) =\n    let a = Array.ofList l\n    ArraySortInPlaceByDescending id a\n    List.ofArray a\n\n[<Name \"sortWith\">]\nlet SortWith f (l: list<_>) =\n    let a = Array.ofList l\n    Array.sortInPlaceWith f a\n    List.ofArray a\n\n[<Inline>]\nlet inline Sum (l: list<'T>) : 'T = Seq.sum l\n\n[<Inline>]\nlet inline SumBy (f: 'T -> 'U) (l: list<'T>) : 'U = Seq.sumBy f l\n\n[<Name \"tail\">]\nlet Tail (l: list<'T>) = \n    match l with \n    | _ :: t -> t\n    | _ -> listEmpty()\n\n[<Inline>]\nlet ToArray (l: list<_>) = Array.ofList l\n\n[<Inline \"$x\">]\nlet ToSeq<'T> (x: list<'T>) : seq<'T> = x :> _\n\n[<Name \"transpose\">]\nlet Transpose (x: seq<list<'T>>) : list<list<'T>> =\n    ArrayTranspose (Array.ofSeq (x |> Seq.map Array.ofList))\n    |> Seq.map List.ofArray |> List.ofSeq\n\n[<Inline>]\nlet TryFind p (l: list<_>) = Seq.tryFind p l\n\n[<Inline>]\nlet TryFindIndex p (l: list<_>) = Seq.tryFindIndex p l\n\n[<Inline>]\nlet TryPick p (l: list<_>) = Seq.tryPick p l\n\n[<Name \"unzip\">]\nlet Unzip (l: list<_>) =\n    let x = System.Collections.Generic.Queue<_>()\n    let y = System.Collections.Generic.Queue<_>()\n    for (a, b) in l do\n        x.Enqueue a\n        y.Enqueue b\n    (List.ofArray (x.ToArray()), List.ofArray (y.ToArray()))\n\n[<Name \"unzip3\">]\nlet Unzip3 (l: list<_>) =\n    let x = System.Collections.Generic.Queue<_>()\n    let y = System.Collections.Generic.Queue<_>()\n    let z = System.Collections.Generic.Queue<_>()\n    for (a, b, c) in l do\n        x.Enqueue a\n        y.Enqueue b\n        z.Enqueue c\n    (\n        List.ofArray (x.ToArray()),\n        List.ofArray (y.ToArray()),\n        List.ofArray (z.ToArray())\n    )\n\n[<Name \"zip\">]\nlet Zip (l1: list<_>) (l2: list<_>) =\n    List.map2 (fun x y -> x, y) l1 l2\n\n[<Name \"zip3\">]\nlet Zip3 (l1: list<_>) (l2: list<_>) (l3: list<_>) =\n    Map3 (fun x y z -> (x, y, z)) l1 l2 l3\n\n[<Name \"chunkBySize\">]\nlet ChunkBySize size list =\n    SeqChunkBySize size (List.toSeq list)\n    |> Seq.toList\n    |> List.map Array.toList\n\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (l1: list<'T>) (l2: list<'T>) : int =\n    Seq.compareWith f (List.toSeq l1) (List.toSeq l2)\n\n[<Name \"countBy\">]\nlet CountBy (f: 'T -> 'K) (l: list<'T>) : list<'K * int> =\n    ArrayCountBy f (List.toArray l)\n    |> Array.toList\n\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (l: list<'T>) : list<'T> =\n    Seq.distinct (List.toSeq l)\n    |> Seq.toList\n\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (l: list<'T>) : list<'T> =\n    Seq.distinctBy f (List.toSeq l)\n    |> Seq.toList\n\n[<Name \"splitInto\">]\nlet SplitInto count (list: list<'T>) =\n    ArraySplitInto count (List.toArray list)\n    |> Array.toList\n    |> List.map Array.toList\n\n[<Name \"except\">]\nlet Except (itemsToExclude: seq<'T>) (l: list<'T>) =\n    SeqExcept itemsToExclude l\n    |> Seq.toList\n\n[<Name \"tryFindBack\">]\nlet TryFindBack ok (l: list<_>) =\n    ArrayTryFindBack ok (Array.ofList l)\n\n[<Name \"findBack\">]\nlet FindBack p (s: list<_>) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Inline>]\nlet TryFindIndexBack ok (l: list<_>) =\n    ArrayTryFindIndexBack ok (Array.ofList l) \n\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: list<_>) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"groupBy\">]\nlet GroupBy (f: 'T -> 'K when 'K : equality)\n            (l: list<'T>) : list<'K * list<'T>> =\n    let arr = ArrayGroupBy f (List.toArray l)\n    arr |> mapInPlace (fun (k, s) -> (k, Array.toList s))\n    Array.toList (As arr)\n\n[<Name \"last\">]\nlet Last (list : list<'T>) : 'T =\n    nonEmpty list\n    let mutable r = list\n    let mutable t = unsafeTail r\n    while notEmpty t do\n        r <- t\n        t <- unsafeTail r\n    unsafeHead r\n\n[<Name \"contains\">]\nlet Contains (el: 'T) (x: list<'T>) =\n    let mutable c = false\n    let mutable l = x\n    while not c && notEmpty l do\n        c <- el = unsafeHead l\n        l <- unsafeTail l\n    c\n\n[<Name \"mapFold\">]\nlet MapFold<'T, 'S, 'R> (f: 'S -> 'T -> 'R * 'S) zero list =\n    ArrayMapFold f zero (List.toArray list)\n    |> (fun (x, y) ->\n        (Array.toList x, y)\n    )\n\n[<Name \"mapFoldBack\">]\nlet MapFoldBack<'T, 'S, 'R> f list zero =\n    ArrayMapFoldBack<'T, 'S, 'R> f (List.toArray list) zero\n    |> (fun (x, y) ->\n        (Array.toList x, y)\n    )\n\n[<Name \"pairwise\">]\nlet Pairwise (l: list<'T>) : list<'T * 'T> =\n    Seq.pairwise (List.toSeq l)\n    |> Seq.toList\n\n[<Name \"indexed\">]\nlet Indexed (list : list<'T>) : list<int * 'T> =\n    List.mapi (fun a b -> (a, b)) list\n\n[<Inline>]\nlet Singleton<'T> (x: 'T) =\n    [x]\n\n[<Inline>]\nlet Skip<'T> i (l : list<'T>) = ListSkip i l\n\n[<Inline>]\nlet SkipWhile<'T> (predicate : 'T -> bool) (list : list<'T>) : list<'T> =\n    ListSkipWhile predicate list\n\n[<Inline>]\nlet Take<'T> n (list: list<'T>) =\n    Seq.take n list |> List.ofSeq\n\n[<Inline>]\nlet TakeWhile<'T> (predicate : 'T -> bool) (list: list<'T>) =\n    Seq.takeWhile predicate list |> List.ofSeq\n\n[<Inline>]\nlet Truncate<'T> n (list: list<'T>) =\n    Seq.truncate n list |> List.ofSeq\n\n[<Name \"tryHead\">]\nlet TryHead<'T> (list: list<'T>) =\n    match list with\n    | head :: _ ->\n        Some head\n    | [] ->\n        None\n\n[<Inline>]\nlet TryItem<'T> n (list: list<'T>) =\n    SeqTryItem n list \n\n[<Inline>]\nlet TryLast<'T> (list: list<'T>) =\n    SeqTryLast list\n\n[<Name \"exactlyOne\">]\nlet ExactlyOne (list : 'T list) =\n    match list with\n    | head :: [] ->\n        head\n    | _ ->\n        failwith \"The input does not have precisely one element.\"\n\n[<Name \"unfold\">]\nlet Unfold<'T, 'S> (f: 'S -> option<'T * 'S>) (s: 'S) : list<'T> =\n    Seq.unfold f s\n    |> Seq.toList\n\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : 'T list) : 'T list =\n    Filter predicate s\n\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: 'T list) : list<list<'T>> =\n    Seq.windowed windowSize (List.toSeq s)\n    |> Seq.map List.ofArray |> Seq.toList\n\n[<Name \"splitAt\">]\nlet SplitAt (n: int) (list: 'T list) =\n    (Take n list, Skip n list)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<JavaScript>]\nmodule Nullable =\n    let get (x: obj) =\n        if x ===. null then failwith \"Nullable object must have a value.\" else x\n\n////    let getOrDefault<'T> (x: 'T) =\n//        if x ==. null then Unchecked.defaultof<'T> else x     \n\n    let getOrValue<'T> (x: 'T) (v: 'T)  =\n        if x ===. null then v else x     \n\n[<Proxy(typeof<System.Nullable<_>>)>]\ntype private NullableProxy<'T> =\n    \n    [<Inline \"null\">]\n    new () = {}\n\n    [<Inline \"$v\">]\n    new (v: 'T) = {}\n\n    member this.Value \n        with [<JavaScript; Inline>] get(): 'T = As<'T>(Nullable.get this)\n\n    member this.HasValue\n        with [<JavaScript; Inline>] get() = this !=. null\n\n    [<Inline>]\n    member this.GetValueOrDefault() : 'T = Nullable.getOrValue (As<'T> this) Unchecked.defaultof<'T>\n\n    [<Inline>]\n    member this.GetValueOrDefault(v: 'T) : 'T = Nullable.getOrValue (As<'T> this) v\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Operators\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.Operators, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OperatorsProxy\n\n#nowarn \"86\"\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Core.Macros\n\n[<JavaScript>]\n[<Name \"range\">]\n[<Macro(typeof<M.Range>)>]\nlet ( .. ) (min: 'T) (max: 'T) : seq<'T> =\n    let count = 1 + As max - As min\n    if count <= 0 then Seq.empty\n    else Seq.init count (fun x -> As (x + As min))\n\n[<Name \"step\">]\nlet ( .. .. ) (min: 'T1) (step: 'T2) (max: 'T1) : seq<'T1> =\n    let s = sign (As<int> step)\n    Seq.initInfinite (fun k -> As<int> min + k * As<int> step)\n    |> Seq.takeWhile (fun k -> s * (As<int> max - As<int> k) >= 0)\n    |> As\n\n[<Inline \"$r[0]\">]\nlet ( ! ) (r: ref<'T>) = X<'T>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( % ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Inline \"$a & $b\">]\nlet ( &&& ) (a: 'T1) (b: 'T1) = X<'T1>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( * ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Inline \"Math.pow($a, $b)\">]\nlet ( ** ) (a: 'T1) (b: 'T2) = X<'T1>\n\n[<Inline \"Math.pow($a, $p)\">]\nlet PowInteger (a: 'T, p: int) = X<'T>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( + ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( - ) (a: 'T1) (b: 'T2) = X<'T3>\n\n[<Macro(typeof<M.Arith>)>]\nlet ( / ) (x: 'T1) (y: 'T2) = X<'T3>\n\n[<Inline \"void ($a[0] = $b)\">]\nlet ( := ) (a: ref<'T>) (b: 'T) = X<unit>\n\n[<Inline>]\nlet ( << ) (f: 'T1 -> 'T2) (g: 'T3 -> 'T1) : 'T3 -> 'T2 = \n    ()\n    fun x -> f (g x)\n\n[<Inline \"$a << $b\">]\nlet inline ( <<< ) (a: 'T) (b: int) = X<'T>\n\n[<Inline>]\nlet ( <| ) (f: 'T -> 'TR) (x: 'T) : 'TR = f x\n\n[<Inline>]\nlet ( <|| ) (f: 'T1 -> 'T2 -> 'TR) (x: 'T1, y: 'T2) : 'TR = f x y\n\n[<Inline>]\nlet ( <||| ) (f: 'T1 -> 'T2 -> 'T3 -> 'TR)\n             (x: 'T1, y: 'T2, z: 'T3) : 'TR = f x y z\n\n[<Macro(typeof<M.Comp>)>]\nlet ( = ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( <> ) (a: 'T) (b: 'T) =  X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( < ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( > ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( <= ) (a: 'T) (b: 'T) = X<bool>\n\n[<Macro(typeof<M.Comp>)>]\nlet ( >= ) (a: 'T) (b: 'T) = X<bool>\n\n[<Inline>]\nlet ( >> ) (f: 'T1 -> 'T2) (g: 'T2 -> 'T3): 'T1->'T3 = \n    ()\n    fun x -> g (f x)\n\n[<Inline \"$a >> $b\">]\nlet inline ( >>> ) (a: 'T) (b: int) : 'T = a >>> b\n\n[<Inline>]\nlet ( @ ) a b = List.append a b\n\n[<Inline \"$a + $b\">]\nlet ( ^ ) (a: string) (b: string) : string = a + b\n\n[<Inline \"$a ^ $b\">]\nlet ( ^^^ ) (a: 'T) (b: 'T) = X<'T>\n\n[<Inline>]\nlet ( |> ) (x: 'T1) (f: 'T1 -> 'T2) : 'T2 = f x\n\n[<Inline>]\nlet ( ||> ) (x: 'T1, y: 'T2) (f: 'T1 -> 'T2 -> 'TR) : 'TR = f x y\n\n[<Inline \"$a | $b\">]\nlet ( ||| ) (a: 'T) (b: 'T) = X<'T>\n\n[<Inline>]\nlet ( |||> ) (x: 'T1, y: 'T2, z: 'T3)\n             (f: 'T1 -> 'T2 -> 'T3 -> 'TR) : 'TR = f x y z\n\n[<Inline \"+ $x\">]\nlet ( ~+ ) (x: 'T) = X<'T>\n\n[<Inline \"- $x\">]\nlet ( ~- ) (x: 'T) = X<'T>\n\n[<Inline \"~ $x\">]\nlet ( ~~~ ) (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Abs>)>]\n[<Inline \"Math.abs($x)\">]\nlet Abs (x: 'T) = X<'T>\n\n[<Inline \"Math.acos($x)\">]\nlet Acos (x: 'T) = X<'T>\n\n[<Inline \"Math.asin($x)\">]\nlet Asin (x: 'T) = X<'T>\n\n[<Inline \"Math.atan($x)\">]\nlet Atan (x: 'T) = X<'T>\n\n[<Inline \"Math.atan2($x, $y)\">]\nlet Atan2 (x: 'T1) (y: 'T1) = X<'T2>\n\n[<Inline \"$x\">]\nlet Box (x: 'T) = X<obj>\n\n[<Inline \"Math.ceil($x)\">]\nlet Ceiling (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Char>)>]\nlet ToChar (x: 'T) = X<char>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToByte (x: 'T) = X<byte>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToSByte (x: 'T) = X<sbyte>\n\n[<Inline>]\nlet Compare<'T> (a: 'T) (b: 'T) = Unchecked.compare a b\n\n[<Inline \"Math.cos($x)\">]\nlet Cos (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp($x)+Math.exp(-$x))/2\">]\nlet Cosh<'T> (x: 'T) = X<'T>\n\n[<Inline \"void ($x[0]--)\">]\nlet Decrement (x: ref<int>) = ()\n\n[<Inline>]\nlet DefaultArg x d =\n    match x with\n    | Some x -> x\n    | None   -> d\n\n[<Inline>]\nlet DefaultValueArg x d =\n    match x with\n    | ValueSome x -> x\n    | ValueNone   -> d\n\n[<Inline \"$x\">]\nlet Enum<'T when 'T : enum<int>> (x: 'T) = X<'T>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToDecimal (x: 'T) = X<decimal>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToDouble (x: 'T) = X<double>\n\n[<Inline \"Math.exp($x)\">]\nlet inline Exp (x: 'T) = X<'T>\n\nlet FailWith (msg: string) : 'T = raise (exn msg)\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToFloat (x: 'T) = X<float>\n\n[<Inline \"Math.floor($x)\">]\nlet Floor (x: 'T) = X<'T>\n\n[<Inline \"$x[0]\">]\nlet Fst (x: TupleProxy<'T1,'T2>) = X<'T1>\n\n[<Inline>]\nlet Hash<'T when 'T : equality> (x: 'T) = Unchecked.hash x\n\n[<Inline \"$x\">]\nlet Identity (x: 'T) = X<'T>\n\n[<Inline \"void $x\">]\nlet Ignore (x: 'T) = X<unit>\n\n[<Inline \"void ($x[0]++)\">]\nlet Increment (x: ref<int>) = ()\n\n[<Inline \"Infinity\">]\nlet Infinity = Unchecked.defaultof<double>\n\nlet InvalidOp (msg: string) : 'T = raise (System.InvalidOperationException(msg))\n\nlet InvalidArg (arg: string) (msg: string) : 'T = raise (System.ArgumentException(arg, msg))\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt (x: 'T) = X<int>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt16 (x: 'T) = X<int16>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToSingle (x: 'T) = X<single>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt32 (x: 'T) = X<int32>\n\nlet toUInt (x: float) : int =\n    (if x < 0. then Math.Ceil(x) else Math.Floor(x)) >>>. 0 |> As<int>\n\nlet toInt (x: float) : int =\n    let u = toUInt x\n    if u >= As<int> 2147483648L then u - As<int> 4294967296L else u\n\n[<Inline \"$x\">]\nlet ToEnum<'T> (x: int) = X<'T>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToInt64 (x: 'T) = X<int64>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToUInt16 (x: 'T) = X<uint16>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToUInt32 (x: 'T) = X<uint32>\n\n[<Macro(typeof<M.Conversion>)>]\nlet ToUInt64 (x: 'T) = X<uint64>\n\n[<Inline \"Math.log($x)\">]\nlet Log (x: 'T) = X<'T>\n\n[<Inline \"Math.log($x)/Math.log(10)\">]\nlet Log10 (x: 'T) = X<'T>\n\n[<Inline>]\nlet Max<'T when 'T : comparison> (a: 'T) (b: 'T) =\n    if a > b then a else b\n\n[<Inline>]\nlet Min<'T when 'T : comparison> (a: 'T) (b: 'T) =\n    if a < b then a else b\n\n[<Inline \"Infinity\">]\nlet InfinitySingle = single infinity\n\n[<Inline \"NaN\">]\nlet NaNSingle = single nan\n\n[<Inline \"NaN\">]\nlet NaN = nan\n\n[<Inline \"!$x\">]\nlet Not (x: bool) = X<bool>\n\nlet Pown<'T> (a: 'T) (n: int) =\n    let a = box a :?> double\n    let rec p n =\n        match n with\n        | 1 ->\n            a\n        | n when n % 2 = 0 ->\n            let b = p (n / 2)\n            b * b\n        | n ->\n            a * (p (n - 1))\n    p n\n\n[<Inline \"throw $e\">]\nlet Raise (e: exn) = X<'T>\n\n[<Inline \"[$x]\">]\nlet Ref (x: 'T) = X<ref<'T>>\n\n[<Inline \"Math.round($x)\">]\nlet Round (x: 'T) = X<'T>\n\n[<Inline \"$x\">]\nlet CreateSequence (x: seq<'T>) = X<seq<'T>>\n\n[<Macro(typeof<M.Sign>); JavaScript>]\nlet Sign<'T> (x: 'T) =\n    match As<int> x with\n    | 0            -> 0\n    | n when n < 0 -> -1\n    | _            -> 1\n\n[<Inline \"Math.sin($x)\">]\nlet Sin (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp($x)-Math.exp(-$x))/2\">]\nlet Sinh (x: 'T) = x\n\n[<Inline \"$x[1]\">]\nlet Snd (x: TupleProxy<'T1,'T2>) = X<'T2>\n\n[<Inline \"Math.sqrt($x)\">]\nlet Sqrt (x: 'T1) = X<'T2>\n\n[<Macro(typeof<M.String>)>]\nlet ToString (x: 'T) = X<string>\n\n[<Inline \"Math.tan($x)\">]\nlet inline Tan (x: 'T) = X<'T>\n\n[<Inline \"(Math.exp(2*$x)-1)/(Math.exp(2*$x)+1)\">]\nlet Tanh (x: 'T) = X<'T>\n\nlet inline Truncate<'T> (x: 'T) =\n    if x <. 0 then Ceiling x else Floor x\n\n[<Inline \"$x\">]\nlet Unbox (x: obj) = X<'T>\n\n[<Inline \"$x == null\">]\nlet IsNull (x: 'T) = X<bool>\n\n[<Inline>]\nlet Using t f =\n    try f t finally (t :> System.IDisposable).Dispose()\n\n[<Name \"KeyValue\">]\nlet KeyValuePattern (kvp: System.Collections.Generic.KeyValuePair<_,_>) =\n    (kvp.Key, kvp.Value)\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Slice\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.Operators+OperatorIntrinsics, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OperatorIntrinsicsProxy \n\nopen WebSharper.JavaScript\n\n[<Inline \"$s.slice($st,$e)\">]\nlet Slice (s: 'T) (st: int) (e: int) = X<'T>\n\n[<Inline \"$s.slice($st)\">]\nlet SliceStart (s: 'T) (st: int) = X<'T>\n\n[<Name \"string\">]\nlet GetStringSlice (source: string) (start: int option) (finish: int option) =\n    match start, finish with\n    | Some s, Some f -> Slice source s (f + 1)\n    | Some s, None -> SliceStart source s\n    | None, Some f -> Slice source 0 (f + 1)\n    | _ -> \"\"\n\n[<Name \"array\">]\nlet GetArraySlice<'T> (source: 'T[]) (start: int option) (finish: int option) =\n    match start, finish with\n    | Some s, Some f -> Slice source s (f + 1)\n    | Some s, None -> SliceStart source s\n    | None, Some f -> Slice source 0 (f + 1)\n    | _ -> [||]\n\nmodule F = WebSharper.IntrinsicFunctionProxy\n\n[<Name \"setArray\">]\nlet SetArraySlice (dst: _[]) start finish (src:_[]) = \n    let start  = (match start with None -> 0 | Some n -> n) \n    let finish = (match finish with None -> Array.length dst - 1 | Some n -> n) \n    F.SetArraySub dst start (finish - start + 1) src\n\n[<Name \"array2D\">]\nlet GetArraySlice2D (arr: _[,]) start1 finish1 start2 finish2 = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 arr - 1 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 arr - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    let len2 = (finish2 - start2 + 1)\n    F.GetArray2DSub arr start1 start2 len1 len2\n\n[<Name \"array2Dfix1\">]\nlet GetArraySlice2DFixed1 (arr: _[,]) fixed1 start2 finish2 = \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 arr - 1 | Some n -> n) \n    let len2 = (finish2 - start2 + 1)\n    let dst = JavaScript.Array(len2)\n    for j = 0 to len2 - 1 do \n        F.SetArray dst.Self j (F.GetArray2D arr fixed1 (start2+j))\n    dst.Self\n\n[<Name \"array2Dfix2\">]\nlet GetArraySlice2DFixed2 (arr: _[,]) start1 finish1 fixed2 = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 arr - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    let dst = JavaScript.Array(len1)\n    for i = 0 to len1 - 1 do \n        F.SetArray dst.Self i (F.GetArray2D arr (start1+i) fixed2)\n    dst.Self\n\n[<Name \"setArray2Dfix1\">]\nlet SetArraySlice2DFixed1 (dst: _[,]) fixed1 start2 finish2 (src:_[]) = \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 dst - 1 | Some n -> n) \n    let len2 = (finish2 - start2 + 1)\n    for j = 0 to len2 - 1 do\n        F.SetArray2D dst fixed1 (start2+j) (F.GetArray src j)\n\n[<Name \"setArray2Dfix2\">]\nlet SetArraySlice2DFixed2 (dst: _[,]) start1 finish1 fixed2 (src:_[]) = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 dst - 1 | Some n -> n) \n    let len1 = (finish1 - start1 + 1)\n    for i = 0 to len1 - 1 do\n        F.SetArray2D dst (start1+i) fixed2 (F.GetArray src i)\n\n[<Name \"setArray2D\">]\nlet SetArraySlice2D (dst: _[,]) start1 finish1 start2 finish2 (src:_[,]) = \n    let start1  = (match start1 with None -> 0 | Some n -> n) \n    let start2  = (match start2 with None -> 0 | Some n -> n) \n    let finish1 = (match finish1 with None -> F.GetArray2DLength1 dst - 1 | Some n -> n) \n    let finish2 = (match finish2 with None -> F.GetArray2DLength2 dst - 1 | Some n -> n) \n    F.SetArray2DSub dst start1 start2 (finish1 - start1 + 1) (finish2 - start2 + 1) src\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.NameAttribute \"Option\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.OptionModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.OptionModuleProxy\n\nopen WebSharper.JavaScript\n\n[<Inline>]\nlet Bind f x =\n    match x with\n    | Some x -> f x\n    | None   -> None\n\n[<Inline>]\nlet Contains v o =\n    match o with\n    | Some x -> x = v\n    | None -> false\n\n[<Inline \"$x ? 1 : 0\">]\nlet Count (x: option<_>) = X<int>\n\n[<Inline>]\nlet DefaultValue v o =\n    match o with\n    | Some x -> x \n    | None -> v\n\n[<Inline>]\nlet DefaultWith f o =\n    match o with\n    | Some x -> x \n    | None -> f()\n\n[<Inline>]\nlet Exists p x =\n    match x with\n    | Some x -> p x\n    | None   -> false\n\n[<Name \"filter\">]\nlet Filter f o =\n    match o with\n    | Some x when f x -> o\n    | _ -> None\n\n[<Inline>]\nlet Flatten o =\n    match o with\n    | Some x -> x\n    | None -> None\n\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (s: 'S) (x: option<'T>) : 'S =\n    match x with\n    | Some x -> f s x\n    | None   -> s\n\n[<Name \"foldBack\">]\nlet FoldBack f x s =\n    match x with\n    | Some x -> f x s\n    | None   -> s\n\n[<Inline>]\nlet ForAll p x =\n    match x with\n    | Some x -> p x\n    | None   -> true\n\n[<Inline \"$x.$0\"; Pure>]\nlet GetValue (x: option<'T>) = X<'T>\n\n[<Inline \"$x==null\">]\nlet IsNone (x: option<'T>) = false\n\n[<Inline \"$x!=null\">]\nlet IsSome (x: option<'T>) =  false\n\n[<Inline>]\nlet Iterate p x =\n    match x with\n    | Some x -> p x\n    | None   -> ()\n\n[<Inline>]\nlet Map f x =\n    match x with\n    | Some x -> Some (f x)\n    | None -> None\n\n[<Inline>]\nlet Map2 f x y =\n    match x, y with\n    | Some x, Some y -> Some (f x y)\n    | _ -> None\n\n[<Inline>]\nlet Map3 f x y z =\n    match x, y, z with\n    | Some x, Some y, Some z -> Some (f x y z)\n    | _ -> None\n\n[<Name \"ofNullable\">]\nlet OfNullable (o: System.Nullable<'T>) =\n    if o ==. null then None else Some o.Value                   \n\n[<Name \"ofObj\">]\nlet OfObj o = \n    if o ==. null then None else Some o\n\n[<Inline>]\nlet OrElse v o =\n    match o with\n    | Some x -> o \n    | None -> v\n\n[<Inline>]\nlet OrElseWith f o =\n    match o with\n    | Some x -> o \n    | None -> f()\n\n[<Name \"toArray\">]\nlet ToArray x =\n    match x with\n    | Some x -> [|x|]\n    | None   -> [||]\n\n[<Name \"toList\">]\nlet ToList x =\n    match x with\n    | Some x -> [x]\n    | None   -> []\n\n[<Name \"toNullable\">]\nlet ToNullable o =\n    match o with\n    | Some v -> System.Nullable(v)\n    | _ -> System.Nullable()\n\n[<Name \"toObj\">]\nlet ToObj o = \n    match o with\n    | Some v -> v\n    | None -> null\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Queue\">]\nmodule private WebSharper.QueueProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.splice($offset,$len)\">]\nlet splice (arr: obj) (offset: int) (len: int) = X<unit>\n\n[<JavaScript>]\nlet Clear (a: obj) =\n    splice a 0 (a :?> obj []).Length\n\n[<JavaScript>]\nlet Contains (a: obj) (el: 'T) =\n    Seq.exists ((=) el) (a :?> seq<'T>)\n\n[<JavaScript>]\nlet CopyTo (a: obj) (array: 'T[]) (index: int) =\n    Array.blit (a :?> 'T []) 0 array index (a :?> 'T[]).Length\n\n[<Proxy(typeof<System.Collections.Generic.Queue<_>>)>]\n[<WebSharper.Name \"WebSharper.Queue\">]\ntype private QueueProxy<'T when 'T : equality>\n\n    [<Inline \"$data\">] private (data: 'T []) =\n\n    [<Inline \"[]\">]\n    private new () = QueueProxy [||]\n\n    [<Inline>]\n    private new (s: seq<'T>) = QueueProxy (Array.ofSeq s)\n\n    member this.Count with [<Inline \"$this.length\">] get () = X<int>\n\n    [<Inline>]\n    member this.Clear() = Clear this\n\n    [<Inline>]\n    member this.Contains(x: 'T) = Contains this x\n\n    [<Inline>]\n    member this.CopyTo(array: 'T [], index: int) = CopyTo this array index\n\n    [<Inline \"$this[0]\">]\n    member this.Peek() = X<'T>\n\n    [<Inline \"$this.shift()\">]\n    member this.Dequeue() = X<'T>\n\n    [<Inline \"$this.push($x)\">]\n    member this.Enqueue(x: 'T) = X<unit>\n\n    [<Inline \"$this.slice(0)\">]\n    member this.ToArray() = data\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<AutoOpen>]\nmodule RandomHelpers =\n    [<Inline \"Math.floor(Math.random() * 2147483648)\">]\n    let Next() = X<int>\n    \n    [<Inline \"Math.floor(Math.random() * $maxValue)\">]\n    let NextMax (maxValue: int) = X<int>\n\n[<Name \"Random\">]\n[<Proxy(typeof<System.Random>)>]\ntype internal RandomProxy() =\n    member this.Next() = Next()\n\n    member this.Next maxValue =\n        if maxValue < 0 then\n            failwith \"'maxValue' must be greater than zero.\"\n        else NextMax maxValue\n\n    member this.Next (minValue: int, maxValue: int) =\n        if minValue > maxValue then\n            failwith \"'minValue' cannot be greater than maxValue.\"\n        else minValue + NextMax (maxValue - minValue)\n\n    member this.NextBytes (buffer: byte[]) =\n        for i = 0 to buffer.Length - 1 do\n            buffer.[i] <- As (NextMax 256)\n\n    [<Inline \"Math.random()\">]\n    member this.NextDouble() = X<float>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.NameAttribute \"Result\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.ResultModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.ResultModuleProxy\n    \nlet Bind f r =\n    match r with\n    | Ok x -> f x\n    | Error e -> Error e\n        \nlet Map f r =\n    match r with\n    | Ok x -> Ok (f x)\n    | Error e -> Error e\n        \nlet MapError f r =\n    match r with\n    | Ok x -> Ok x\n    | Error e -> Error (f e)    \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.CompilerServices.RuntimeHelpers, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.RuntimeHelpersProxy\n\n#nowarn \"40\"\n\nopen WebSharper.JavaScript\n\ntype IE<'T> = System.Collections.Generic.IEnumerator<'T>\n\n[<Inline>]\nlet safeDispose (x: System.IDisposable) =\n    if x <> null then x.Dispose()\n\n[<Name \"WebSharper.Seq.enumFinally\">]\nlet EnumerateThenFinally (s: seq<'T>) (f: unit -> unit) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        let enum = try Enumerator.Get s with e -> f(); raise e\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose(); f()) <| fun e ->\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false\n\n[<Name \"WebSharper.Seq.enumUsing\">]\nlet EnumerateUsing<'T1,'T2,'T3 when 'T1 :> System.IDisposable\n                                and 'T2 :> seq<'T3>>\n        (x: 'T1) (f: 'T1 -> 'T2) : seq<'T3> =\n\n    Enumerable.Of <| fun () ->\n        let enum = try Enumerator.Get (f x) with e -> x.Dispose(); raise e\n        Enumerator.NewDisposing () (fun _ -> enum.Dispose(); x.Dispose()) <| fun e ->\n            if enum.MoveNext() then\n                e.Current <- enum.Current\n                true\n            else\n                false\n\n[<Name \"WebSharper.Seq.enumWhile\">]\nlet EnumerateWhile (f: unit -> bool) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let rec next (en: Enumerator.T<IE<_>,'T>) =\n            match en.State with\n            | null ->\n                if f () then\n                    en.State <- Enumerator.Get s\n                    next en\n                else\n                    false\n            | e ->\n                if e.MoveNext() then\n                    en.Current <- e.Current\n                    true\n                else\n                    e.Dispose()\n                    en.State <- null\n                    next en\n        Enumerator.NewDisposing null (fun en -> safeDispose en.State) next)\n\n[<Name \"WebSharper.Control.createEvent\">]\nlet CreateEvent<'D, 'A when 'D : delegate<'A, unit> and 'D :> System.Delegate> \n        (add: 'D -> unit) \n        (remove: 'D -> unit)\n        (create: (obj -> 'A -> unit) -> 'D) : IEvent<'D, 'A> =\n    { new IEvent<'D, 'A> with\n        member this.AddHandler h = add h\n        member this.RemoveHandler h = remove h\n        member this.Subscribe (r: System.IObserver<'A>) =     \n            let h = create (fun _ args -> r.OnNext(args))\n            add h\n            { new System.IDisposable with member this.Dispose() = remove h }\n    }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Seq\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Collections.SeqModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.SeqModuleProxy\n\nopen WebSharper.JavaScript\nopen WebSharper.CollectionInternals\n\n[<Inline>]\nlet safeDispose (x: System.IDisposable) =\n    if x <> null then x.Dispose()\n\nlet seqEmpty() =\n    failwith \"The input sequence was empty.\"\n\n[<Name \"allPairs\">]\nlet AllPairs (source1: seq<_>) (source2: seq<_>) =\n    let cached = Seq.cache source2\n    source1 |> Seq.collect (fun x -> cached |> Seq.map (fun y -> x,y))\n\n[<Name \"append\">]\nlet Append (s1: seq<'T>) (s2: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let e1 = Enumerator.Get s1\n        let first = ref true\n        Enumerator.NewDisposing e1 (fun x -> safeDispose x.State) (fun x ->\n            if x.State.MoveNext() then\n                x.Current <- x.State.Current\n                true\n            else \n                safeDispose x.State\n                x.State <- null\n                if !first then\n                    first := false\n                    x.State <- Enumerator.Get s2\n                    if x.State.MoveNext() then\n                        x.Current <- x.State.Current\n                        true\n                    else\n                        x.State.Dispose()\n                        x.State <- null\n                        false\n                else \n                    false)) \n\n[<Name \"average\">]\nlet Average<'T> (s: seq<'T>) : 'T =\n    let (count, sum) =\n        Seq.fold\n            (fun (n, s) x -> (n + 1, s + As<float> x))\n            (0, 0.)\n            s\n    if count = 0 then\n        seqEmpty()\n    else\n        As<'T> (sum / As<float> count)\n\n[<Name \"averageBy\">]\nlet AverageBy<'T,'U> (f: 'T -> 'U) (s: seq<'T>) : 'U =\n    let (count, sum) =\n        Seq.fold\n            (fun (n, s) x -> (n + 1, s + As<float> (f x)))\n            (0, 0.)\n            s\n    if count = 0 then\n        seqEmpty()\n    else\n        As<'U> (sum / As<float> count)\n\n[<Name \"cache\">]\nlet Cache<'T> (s: seq<'T>) : seq<'T> =\n    let cache = JavaScript.Array<'T>()\n    let o  = ref (Enumerator.Get s)\n    Enumerable.Of <| fun () ->\n        let next (e: Enumerator.T<_,_>) =\n            if e.State < cache.Length then\n                e.Current <- cache.[e.State]\n                e.State   <- e.State + 1\n                true\n            else\n                let en = !o\n                if en = null then false\n                elif en.MoveNext() then\n                    e.State   <- e.State + 1\n                    e.Current <- en.Current\n                    cache.Push(e.Current) |> ignore\n                    true\n                else\n                    en.Dispose()\n                    o := null\n                    false\n        Enumerator.New 0 next\n\n/// IEnumerable is not supported.\n[<Inline \"$i\">]\nlet Cast<'T> (i: System.Collections.IEnumerable) = X<seq<'T>>\n\n[<Inline>]\nlet Contains (el: 'T) (s: seq<'T>) =\n    SeqContains el s\n\n[<Name \"choose\">]\nlet Choose (f: 'T -> option<'U>) (s: seq<'T>) : seq<'U> =\n    s\n    |> Seq.collect (fun x ->\n        match f x with\n        | Some v -> [v]\n        | None   -> [])\n\n[<Inline>]\nlet ChunkBySize (size: int) (s: seq<'T>) = SeqChunkBySize size s\n\n[<Name \"collect\">]\nlet Collect f s = Seq.concat (Seq.map f s)\n\n[<Name \"compareWith\">]\nlet CompareWith  (f: 'T -> 'T -> int) (s1: seq<'T>) (s2: seq<'T>) : int =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    let mutable r = 0\n    let mutable loop = true\n    while loop && r = 0 do\n        match e1.MoveNext(), e2.MoveNext() with\n        | true, false ->\n            r <- 1\n        | false, true ->\n            r <- -1\n        | false, false ->\n            loop <- false\n        | true, true ->\n            r <- f e1.Current e2.Current\n    r\n\n[<Name \"concat\">]\nlet Concat (ss: seq<#seq<'T>>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let outerE = Enumerator.Get ss\n        let rec next (st: Enumerator.T<Enumerator.IE<'T>,'T>) =\n            match st.State with\n            | null ->\n                if outerE.MoveNext() then\n                    st.State <- Enumerator.Get outerE.Current\n                    next st\n                else\n                    outerE.Dispose()\n                    false\n            | innerE ->\n                if innerE.MoveNext() then\n                    st.Current <- innerE.Current\n                    true\n                else\n                    (st :> System.IDisposable).Dispose()\n                    st.State <- null\n                    next st\n        Enumerator.NewDisposing null (fun st -> \n            safeDispose st.State \n            safeDispose outerE) \n            next)\n\n[<Name \"countBy\">]\nlet CountBy (f: 'T -> 'K) (s: seq<'T>) : seq<'K * int> =\n    Seq.delay <| fun () ->\n        ArrayCountBy f (Array.ofSeq s) |> Seq.ofArray\n\n[<Name \"delay\">]\nlet Delay<'T> (f: unit -> seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () -> Enumerator.Get(f()))\n\n[<Name \"distinct\">]\nlet Distinct<'T when 'T : equality> (s: seq<'T>) : seq<'T> =\n    Seq.distinctBy id s\n\n[<Name \"distinctBy\">]\nlet DistinctBy<'T,'K when 'K : equality>\n        (f: 'T -> 'K) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        let o  = Enumerator.Get s\n        let seen = System.Collections.Generic.HashSet<'K>()\n        Enumerator.NewDisposing () (fun _ -> o.Dispose()) <| fun e ->\n            if o.MoveNext() then\n                let mutable cur = o.Current\n                let mutable has = seen.Add(f cur)\n                while not has && o.MoveNext() do\n                    cur <- o.Current\n                    has <- seen.Add(f cur)\n                if has then\n                    e.Current <- cur\n                    true\n                else\n                    false\n            else\n                false\n\n[<Name \"splitInto\">]\nlet SplitInto count (s: seq<'T>) =\n    if count <= 0 then failwith \"Count must be positive\"\n    Seq.delay (fun () -> ArraySplitInto count (Array.ofSeq s) |> Seq.ofArray)   \n\n[<Inline>]\nlet Empty<'T> : seq<'T> = As [||]\n\n[<Name \"exactlyOne\">]\nlet ExactlyOne<'T> (s: seq<'T>) =\n    use e = Enumerator.Get s\n    if e.MoveNext() then\n        let x = e.Current\n        if e.MoveNext() then\n            invalidOp \"Sequence contains more than one element\"\n        else x\n    else invalidOp \"Sequence contains no elements\"\n\n[<Inline>]\nlet Except (itemsToExclude: seq<'T>) (s: seq<'T>) =\n    SeqExcept itemsToExclude s\n\n[<Name \"exists\">]\nlet Exists p (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = false\n    while not r && e.MoveNext() do\n        r <- p e.Current\n    r\n\n[<Name \"exists2\">]\nlet Exists2 p (s1: seq<_>) (s2: seq<_>) =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    let mutable r = false\n    while not r && e1.MoveNext() && e2.MoveNext() do\n        r <- p e1.Current e2.Current\n    r\n\n[<Name \"filter\">]\nlet Filter (f: 'T -> bool) (s: seq<'T>) =\n    Enumerable.Of <| fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> o.Dispose()) <| fun e ->\n            let mutable loop = o.MoveNext()\n            let mutable c    = o.Current\n            let mutable res  = false\n            while loop do\n                if f c then\n                    e.Current <- c\n                    res       <- true\n                    loop      <- false\n                else\n                    if o.MoveNext() then\n                        c <- o.Current\n                    else\n                        loop <- false\n            res\n\n[<Name \"find\">]\nlet Find p (s: seq<_>) =\n    match Seq.tryFind p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"findIndex\">]\nlet FindIndex p (s: seq<_>) =\n    match Seq.tryFindIndex p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"fold\">]\nlet Fold<'T,'S> (f: 'S -> 'T -> 'S) (x: 'S) (s: seq<'T>) : 'S =\n    let mutable r = x\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        r <- f r e.Current\n    r\n\n[<Name \"forall\">]\nlet ForAll p s =\n    not (Seq.exists (fun x -> not (p x)) s)\n\n[<Name \"forall2\">]\nlet ForAll2 p s1 s2 =\n    not (Seq.exists2 (fun x y -> not (p x y)) s1 s2)\n\n[<Name \"groupBy\">]\nlet GroupBy (f: 'T -> 'K when 'K : equality) (s: seq<'T>) : seq<'K * seq<'T>> =\n    Seq.delay <| fun () ->\n        ArrayGroupBy f (Array.ofSeq s) |> As\n\n[<Name \"head\">]\nlet Head (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if e.MoveNext() then e.Current else InsufficientElements()\n\n[<Name \"init\">]\nlet Initialize (n: int) (f: int -> 'T) : seq<'T> =\n    Seq.take n (Seq.initInfinite f)\n\n[<Name \"initInfinite\">]\nlet InitializeInfinite (f: int -> 'T) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        Enumerator.New 0 <| fun e ->\n            e.Current <- f e.State\n            e.State   <- e.State + 1\n            true\n\n[<Name \"isEmpty\">]\nlet IsEmpty (s: seq<'T>) : bool =\n    use e = Enumerator.Get s\n    not (e.MoveNext())\n\n[<Name \"iter\">]\nlet Iterate p (s: seq<_>) =\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        p e.Current\n\n[<Name \"iter2\">]\nlet Iterate2 p (s1: seq<_>) (s2: seq<_>) =\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    while e1.MoveNext() && e2.MoveNext() do\n        p e1.Current e2.Current\n\n[<Name \"iteri\">]\nlet IterateIndexed p (s: seq<_>) =\n    let mutable i = 0\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        p i e.Current\n        i <- i + 1\n\n[<Inline>]\nlet Last (s: seq<_>) =\n    SeqLast s\n\n[<Name \"length\">]\nlet Length (s: seq<_>) =\n    let mutable i = 0\n    use e = Enumerator.Get s\n    while e.MoveNext() do\n        i <- i + 1\n    i\n\n[<Name \"map\">]\nlet Map (f: 'T -> 'U) (s: seq<'T>) : seq<'U> =\n    Enumerable.Of <| fun () ->\n        let en = Enumerator.Get s\n        Enumerator.NewDisposing () (fun _ -> en.Dispose()) <| fun e ->\n            if en.MoveNext() then\n                e.Current <- f en.Current\n                true\n            else\n                false\n\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> 'T -> 'U) (s: seq<'T>) : seq<'U> =\n    Seq.map2 f (Seq.initInfinite id) s\n\n[<Name \"map2\">]\nlet Map2 (f: 'T -> 'U -> 'V) (s1: seq<'T>) (s2: seq<'U>) : seq<'V> =\n    Enumerable.Of <| fun () ->\n        let e1 = Enumerator.Get s1\n        let e2 = Enumerator.Get s2\n        Enumerator.NewDisposing () (fun _ -> e1.Dispose(); e2.Dispose()) <| fun e ->\n            if e1.MoveNext() && e2.MoveNext() then\n                e.Current <- f e1.Current e2.Current\n                true\n            else\n                false\n\n[<Name \"maxBy\">]\nlet MaxBy (f: 'T -> 'U) (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    let mutable fm = f m\n    while e.MoveNext() do\n        let x = e.Current\n        let fx = f x\n        if fx > fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"minBy\">]\nlet MinBy (f: 'T -> 'U) (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    let mutable fm = f m\n    while e.MoveNext() do\n        let x = e.Current\n        let fx = f x\n        if fx < fm then\n            m <- x\n            fm <- fx\n    m\n\n[<Name \"max\">]\nlet Max (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    while e.MoveNext() do\n        let x = e.Current\n        if x > m then\n            m <- x\n    m\n\n[<Name \"min\">]\nlet Min (s: seq<'T>) : 'T =\n    use e = Enumerator.Get s\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable m = e.Current\n    while e.MoveNext() do\n        let x = e.Current\n        if x < m then\n            m <- x\n    m\n\n[<Name \"nth\">]\nlet Get index (s: seq<'T>) =\n    if index < 0 then\n        failwith \"negative index requested\"\n    let mutable pos = -1\n    use e = Enumerator.Get s\n    while pos < index do\n        if not (e.MoveNext()) then\n            InsufficientElements()\n        pos <- pos + 1\n    e.Current\n\n[<Inline>]\nlet Item index (s: seq<'T>) = Get index s\n\n[<Inline \"$a\">]\n[<Name \"ofArray\">]\nlet OfArray (a: 'T[]) = X<seq<'T>>\n\n[<Inline \"$l\">]\n[<Name \"ofList\">]\nlet OfList (l: list<'T>) = X<seq<'T>>\n\n[<Name \"pairwise\">]\nlet Pairwise (s: seq<'T>) : seq<'T * 'T> =\n    Seq.windowed 2 s\n    |> Seq.map (fun x -> (x.[0], x.[1]))\n\n[<Name \"pick\">]\nlet Pick p (s: seq<_>) =\n    match Seq.tryPick p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"readOnly\">]\nlet ReadOnly (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () -> Enumerator.Get s)\n\n[<Name \"reduce\">]\nlet Reduce (f: 'T -> 'T -> 'T) (source: seq<'T>) : 'T =\n    use e = Enumerator.Get source\n    if not (e.MoveNext()) then\n        seqEmpty()\n    let mutable r = e.Current\n    while e.MoveNext() do\n        r <- f r e.Current\n    r\n\n[<Name \"scan\">]\nlet Scan<'T,'S> (f: 'S -> 'T -> 'S) (x: 'S) (s: seq<'T>) : seq<'S> =\n    Enumerable.Of <| fun () ->\n        let en = Enumerator.Get s\n        Enumerator.NewDisposing false (fun _ -> en.Dispose()) <| fun e ->\n            if e.State then\n                if en.MoveNext() then\n                    e.Current <- f e.Current en.Current\n                    true\n                else\n                    false\n            else\n                e.Current <- x\n                e.State <- true\n                true\n\n[<Inline \"[$x]\">]\n[<Name \"singleton\">]\nlet Singleton<'T> (x: 'T) = X<seq<'T>>\n\n[<Name \"skip\">]\nlet Skip (n: int) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> o.Dispose()) (fun e ->\n            if e.State then\n                for i = 1 to n do\n                    if not (o.MoveNext()) then\n                        InsufficientElements()\n                e.State <- false\n            if o.MoveNext() then\n                e.Current <- o.Current\n                true\n            else\n                false))\n\n[<Name \"skipWhile\">]\nlet SkipWhile (f: 'T -> bool) (s: seq<'T>) : seq<'T> =\n    Enumerable.Of (fun () ->\n        let o = Enumerator.Get s\n        Enumerator.NewDisposing true (fun _ -> o.Dispose()) (fun e ->\n            if e.State then\n                let mutable go = true\n                let mutable empty = false\n                while go do\n                    if o.MoveNext() then\n                        if not (f o.Current) then go <- false \n                    else \n                        go <-false\n                        empty <- true\n                e.State <- false\n                if empty then \n                    false \n                else\n                    e.Current <- o.Current\n                    true\n            else\n                if o.MoveNext() then\n                    e.Current <- o.Current\n                    true\n                else\n                    false))\n\n[<Name \"sort\">]\nlet Sort<'T when 'T : comparison> (s: seq<'T>) =\n    Seq.sortBy id s\n\n[<Name \"sortBy\">]\nlet SortBy<'T, 'U when 'U: comparison>\n        (f: 'T -> 'U) (s: seq<'T>) : seq<'T> =\n    Seq.delay (fun () ->\n        let array = Array.ofSeq s\n        Array.sortInPlaceBy f array\n        array :> _)\n\n[<Name \"sortByDescending\">]\nlet SortByDescending<'T, 'U when 'U: comparison>\n        (f: 'T -> 'U) (s: seq<'T>) : seq<'T> =\n    Seq.delay (fun () ->\n        let array = Array.ofSeq s\n        ArraySortInPlaceByDescending f array\n        array :> _)\n\n[<Name \"sortDescending\">]\nlet SortDescending<'T when 'T : comparison> (s: seq<'T>) =\n    SortByDescending id s\n\n[<Name \"sum\">]\nlet Sum<'T> (s: seq<'T>) : 'T =\n    box (Seq.fold (fun s x -> s + (box x :?> _)) 0. s) :?> _\n\n[<Name \"sumBy\">]\nlet SumBy<'T,'U> (f: 'T -> 'U) (s: seq<'T>) : 'U =\n    box (Seq.fold (fun s x -> s + (box (f x) :?> _)) 0. s) :?> _\n\n[<Name \"take\">]\nlet Take (n: int) (s: seq<'T>) : seq<'T> =\n    if n < 0 then\n        InputMustBeNonNegative()\n    Enumerable.Of (fun () ->\n        let e = ref (Enumerator.Get s)\n        Enumerator.NewDisposing 0 (fun _ -> safeDispose !e) (fun o ->\n            o.State <- o.State + 1\n            if o.State > n then false else\n            let en = !e\n            if en = null then InsufficientElements()\n            elif en.MoveNext() then\n                o.Current <- en.Current\n                if o.State = n then\n                    en.Dispose()\n                    e := null\n                true\n            else\n                en.Dispose()\n                e := null\n                InsufficientElements()\n        )\n    )\n\n[<Name \"takeWhile\">]\nlet TakeWhile (f: 'T -> bool) (s: seq<'T>) : seq<'T> =\n    seq {\n        use e = Enumerator.Get s\n        while e.MoveNext() && f e.Current do\n            yield e.Current\n    }\n\n[<Inline>]\nlet ToArray (s: seq<'T>) =\n    Array.ofSeq s\n\n[<Inline>]\nlet ToList (s: seq<'T>) = List.ofSeq s\n\n[<Name \"transpose\">]\nlet Transpose (x: seq<#seq<'T>>) : seq<seq<'T>> =\n    Seq.delay (fun () ->\n        ArrayTranspose (Array.ofSeq (x |> Seq.map Array.ofSeq)) |> As\n    )\n\n[<Name \"truncate\">]\nlet Truncate (n: int) (s: seq<'T>) : seq<'T> =\n    seq {\n        use e = Enumerator.Get s\n        let i = ref 0\n        while e.MoveNext() && !i < n do\n            incr i\n            yield e.Current\n    }\n\n[<Name \"tryFind\">]\nlet TryFind ok (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = None\n    while r.IsNone && e.MoveNext() do\n        let x = e.Current\n        if ok x then\n            r <- Some x\n    r\n\n[<Inline>]\nlet TryFindBack ok (s: seq<_>) =\n    ArrayTryFindBack ok (Array.ofSeq s) \n\n[<Inline>]\nlet TryHead (s: seq<'T>) = SeqTryHead s\n\n[<Inline>]\nlet TryItem i (s: seq<'T>) = SeqTryItem i s\n\n[<Inline>]\nlet TryLast (s: seq<'T>) =  SeqTryLast s\n\n[<Name \"findBack\">]\nlet FindBack p (s: seq<_>) =\n    match TryFindBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"tryFindIndex\">]\nlet TryFindIndex ok (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable loop = true\n    let mutable i = 0\n    while loop && e.MoveNext() do\n        let x = e.Current\n        if ok x then\n            loop <- false\n        else\n            i <- i + 1\n    if loop then None else Some i\n\n[<Inline>]\nlet TryFindIndexBack ok (s: seq<_>) =\n    ArrayTryFindIndexBack ok (Array.ofSeq s) \n\n[<Name \"findIndexBack\">]\nlet FindIndexBack p (s: seq<_>) =\n    match TryFindIndexBack p s with\n    | Some x -> x\n    | None   -> failwith \"KeyNotFoundException\"\n\n[<Name \"tryPick\">]\nlet TryPick f (s: seq<_>) =\n    use e = Enumerator.Get s\n    let mutable r = None\n    while r = None && e.MoveNext() do\n        r <- f e.Current\n    r\n\n[<Name \"unfold\">]\nlet Unfold<'S, 'T> (f: 'S -> option<'T * 'S>) (s: 'S) : seq<'T> =\n    Enumerable.Of <| fun () ->\n        Enumerator.New s <| fun e ->\n            match f e.State with\n            | Some (t, s) ->\n                e.Current <- t\n                e.State  <- s\n                true\n            | None ->\n                false\n\n[<Name \"windowed\">]\nlet Windowed (windowSize: int) (s: seq<'T>) : seq<'T []> =\n    if windowSize <= 0 then\n        failwith \"The input must be positive.\"\n    seq {\n        use e = Enumerator.Get s\n        let q = new System.Collections.Generic.Queue<'T>()\n        while q.Count < windowSize && e.MoveNext() do\n            q.Enqueue e.Current\n        if q.Count = windowSize then\n            yield q.ToArray()\n            while e.MoveNext() do\n                ignore (q.Dequeue())\n                q.Enqueue e.Current\n                yield q.ToArray()\n    }\n\n[<Name \"zip\">]\nlet Zip (s1: seq<'T>) (s2: seq<'U>) =\n    Seq.map2 (fun x y -> x, y) s1 s2\n\n[<Name \"map3\">]\nlet Map3 f (s1: seq<_>) (s2: seq<_>) (s3: seq<_>) =\n    Enumerable.Of <| fun () ->\n        let e1 = Enumerator.Get s1\n        let e2 = Enumerator.Get s2\n        let e3 = Enumerator.Get s3\n        Enumerator.NewDisposing () (fun _ -> e1.Dispose(); e2.Dispose(); e3.Dispose()) <| fun e ->\n            if e1.MoveNext() && e2.MoveNext() && e3.MoveNext() then\n                e.Current <- f e1.Current e2.Current e3.Current\n                true\n            else\n                false\n\n[<Name \"zip3\">]\nlet Zip3 (s1: seq<'T>) (s2: seq<'U>) (s3: seq<'V>) : seq<'T * 'U * 'V> =\n    Map3 (fun x y z -> x, y, z) s1 s2 s3\n\n[<Name \"fold2\">]\nlet Fold2<'T1,'T2,'S> (f: 'S -> 'T1 -> 'T2 -> 'S)\n                        (s: 'S)\n                        (s1: seq<'T1>)\n                        (s2: seq<'T2>) : 'S =\n    Array.fold2 f s (Array.ofSeq s1) (Array.ofSeq s2)\n\n[<Name \"foldBack\">]\nlet FoldBack f (s: seq<_>) state =\n    Array.foldBack f (Array.ofSeq s) state\n\n[<Name \"foldBack2\">]\nlet FoldBack2 f (s1: seq<_>) (s2: seq<_>) s =\n    Array.foldBack2 f (Array.ofSeq s1) (Array.ofSeq s2) s\n\n[<Name \"iteri2\">]\nlet IterateIndexed2 f (s1: seq<_>) (s2: seq<_>) =\n    let mutable i = 0\n    use e1 = Enumerator.Get s1\n    use e2 = Enumerator.Get s2\n    while e1.MoveNext() && e2.MoveNext() do\n        f i e1.Current e2.Current\n        i <- i + 1\n\n[<Name \"mapi2\">]\nlet MapIndexed2 f (s1: seq<_>) (s2: seq<_>) =\n    Map3 f (Seq.initInfinite id) s1 s2\n\n[<Name \"mapFold\">]\nlet MapFold<'T,'S,'R> f zero s =\n    ArrayMapFold<'T,'S,'R> f zero (Seq.toArray s)\n    |> As<seq<'R> * 'S>\n\n[<Name \"mapFoldBack\">]\nlet MapFoldBack<'T,'S,'R> f s zero =\n    ArrayMapFoldBack<'T,'S,'R> f (Seq.toArray s) zero\n    |> As<seq<'R> * 'S>\n\n[<Name \"permute\">]\nlet Permute f (s: seq<_>) =\n    Seq.delay (fun () -> Seq.ofArray (Array.permute f (Array.ofSeq s)))\n\n[<Name \"reduceBack\">]\nlet ReduceBack f (s: seq<_>) =\n    Array.reduceBack f (Array.ofSeq s)\n\n[<Name \"replicate\">]\nlet Replicate size value =\n    if size < 0 then InputMustBeNonNegative()\n    seq { for i in 0 .. size - 1 -> value }\n\n[<Name \"rev\">]\nlet Reverse (s: seq<'T>) =\n    Seq.delay (fun () -> Array.rev (Seq.toArray s) |> Array.toSeq)\n    \n[<Name \"scanBack\">]\nlet ScanBack f (l: seq<_>) s =\n    Seq.delay (fun () -> Seq.ofArray (Array.scanBack f (Array.ofSeq l) s))\n\n[<Name \"indexed\">]\nlet Indexed (s : seq<'T>) : seq<int * 'T> =\n    Seq.mapi (fun a b -> (a, b)) s\n\n[<Name \"sortWith\">]\nlet SortWith f (s: seq<_>) =\n    Seq.delay (fun () -> \n        let a = Array.ofSeq s\n        Array.sortInPlaceWith f a\n        Seq.ofArray a)\n\n[<Name \"tail\">]\nlet Tail<'T> (s : seq<'T>) : seq<'T> =\n    Seq.skip 1 s\n\n[<Inline>]\nlet Where (predicate : 'T -> bool) (s : seq<'T>) : seq<'T> =\n    Filter predicate s\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Stack\">]\nmodule private WebSharper.StackProxy\n\nopen WebSharper.JavaScript\n\n[<Inline \"$arr.splice($offset,$len)\">]\nlet splice (arr: obj) (offset: int) (len: int) = X<unit>\n\n[<JavaScript>]\nlet Clear (stack: obj) =\n    splice stack 0 (stack :?> obj []).Length\n\n[<JavaScript>]\nlet Contains (stack: obj) (el: 'T) =\n    Seq.exists ((=) el) (stack :?> 'T[])\n    \n[<JavaScript>]\nlet CopyTo (stack: obj) (array: 'T[]) (index: int) =\n    Array.blit array 0 array index (stack :?> 'T[]).Length\n\n[<Proxy(typeof<System.Collections.Generic.Stack<_>>)>]\n[<Name \"WebSharper.Stack\">]\ntype private StackProxy<'T when 'T : equality> =\n\n    [<Inline \"[].concat($s).reverse()\">]\n    private new (s: 'T []) = {}\n\n    [<Inline \"[]\">]\n    new () = {}\n\n    [<Inline>]\n    private new (s: seq<'T>) = StackProxy (Array.ofSeq s)\n\n    member this.Count with [<Inline \"$this.length\">] get () = X<int>\n\n    [<Inline>]\n    member this.Clear() = Clear this\n\n    [<Inline>]\n    member this.Contains(x: 'T) : bool = Contains this x\n\n    [<Inline>]\n    member this.CopyTo(array: 'T [], index) = CopyTo this array index\n\n    [<Inline \"$this[0]\">]\n    member this.Peek() = X<'T>\n\n    [<Inline \"$this.shift()\">]\n    member this.Pop() = X<'T>\n\n    [<Inline \"$this.unshift($x)\">]\n    member this.Push(x: 'T) = X<unit>\n\n    [<Inline \"$this.slice(0)\">]\n    member this.ToArray() = X<'T[]>\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.Name \"Strings\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.StringModule, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.StringProxy\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Core.Macros\n\nlet Compare (x: string) (y: string) = compare x y\n\nlet CopyTo (s: string) (o: int) (d: char []) (off: int) (ct: int) =\n    Array.blit (s.ToCharArray()) o d off ct\n\n[<Direct \"$x.substring($x.length - $s.length) == $s\">]\nlet EndsWith (x: string) (s: string) = X<bool>\n\n[<Direct \"$s.indexOf($c,$i)\">]\nlet IndexOf (s: string) (c: char) (i: int) = X<int>\n\n[<Direct \"$x.substring(0,$index-1)+$s+$x.substring($index)\">]\nlet Insert (x: string) (index: int) (s: string) = X<string>\n\n[<Direct \"$x == null || $x == ''\">]\nlet IsNullOrEmpty (x: string) = X<bool>\n\n[<Direct \"\"\"$x == null || /^\\s*$/.test($x)\"\"\">]\nlet IsNullOrWhiteSpace (x: string) = X<bool>\n\n[<Direct \"$s.lastIndexOf($c,$i)\">]\nlet LastIndexOf (s: string) (c: char) (i: int) = X<int>\n\n[<Direct \"$n>$s.length?Array($n-$s.length+1).join($c)+$s:$s\">]\nlet PadLeftWith (s: string) (n: int) (c: char) = X<string>\n\nlet PadLeft (s: string) (n: int) =\n    PadLeftWith s n ' '\n\n[<Direct \"$n>$s.length?$s+Array($n-$s.length+1).join($c):$s\">]\nlet PadRightWith (s: string) (n: int) (c: char) = X<string>\n\nlet PadRight (s: string) (n: int) =\n    PadRightWith s n ' '\n\n[<Direct \"$x.substring(0,$ix) + $x.substring($ix+$ct)\">]\nlet Remove (x: string) (ix: int) (ct: int) = X<string>\n\n[<Direct \"$string.replace($search,$replace)\">]\nlet ReplaceOnce string search replace = X<string>\n\nlet Replace (subject: string) (search: string) (replace: string) =\n    let rec replaceLoop (subj: string) =\n        let index = subj.IndexOf(search)\n        if index <> -1 then\n            let replaced = ReplaceOnce subj search replace\n            let nextStartIndex = index + replace.Length\n            (replaced.Substring(0, index + replace.Length)) +\n                (replaceLoop (replaced.Substring(nextStartIndex)))\n        else subj\n    replaceLoop subject\n\nlet ReplaceChar (s: string) (oldC: char) (newC: char) =\n    Replace s (string oldC) (string newC)\n\n[<Direct \"$s.substr($ix,$ct)\">]\nlet Substring (s: string) (ix: int) (ct: int) = X<string>\n\n[<Direct \"$t.substring(0,$s.length) == $s\">]\nlet StartsWith (t: string) (s: string) = X<bool>\n\nlet ToCharArray (s: string) = Array.init s.Length (fun x -> s.[x])\n\nlet ToCharArrayRange (s: string) (startIndex: int) (length: int) =\n    Array.init length (fun i -> s.[startIndex + i])\n\n[<Direct @\"$s.replace(/^\\s+/,'').replace(/\\s+$/,'')\">]\nlet Trim (s: string) = X<string>\n\n[<Direct @\"$s.replace(/^\\s+/,'')\">]\nlet TrimStartWS (s: string) = X<string>\n\nlet TrimStart (s: string) (t: char[]) =\n    if t = null || Array.isEmpty t then\n        TrimStartWS s\n    else\n        let mutable i = 0\n        let mutable go = true\n        while i < s.Length && go do\n            let c = s.[i]\n            if t |> Array.exists ((=) c) then\n                i <- i + 1 \n            else go <- false\n        s.Substring(i)\n\n[<Direct @\"$s.replace(/\\s+$/,'')\">]\nlet TrimEndWS (s: string) = X<string>\n\nlet TrimEnd (s: string) (t: char[]) =\n    if t = null || Array.isEmpty t then\n        TrimEndWS s\n    else \n        let mutable i = s.Length - 1\n        let mutable go = true\n        while i >= 0 && go do\n            let c = s.[i]\n            if t |> Array.exists ((=) c) then\n                i <- i - 1 \n            else go <- false\n        s.Substring(0, i + 1)\n\n[<Direct \"$values.join($sep)\">]\nlet Join (sep: string) (values: string []) = X<string>\n\n[<Direct \"$str.split($pat)\">]\nlet SplitWith (str: string) (pat: obj) = X<string[]>\n\n[<Inline \"new RegExp($pat)\">]\nlet MakeRegexp (pat: string) = X<obj>\n\n[<Direct @\"$s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&')\">]\nlet RegexEscape (s: string) = X<string>\n\nlet Split (s: string) (pat: obj) (opts: System.StringSplitOptions) =\n    let res = SplitWith s pat\n    if opts ===. System.StringSplitOptions.RemoveEmptyEntries then\n        Array.filter (fun x -> x !==. \"\") res\n    else\n        res\n\nlet SplitChars (s: string) (sep: char[]) (opts: System.StringSplitOptions) =\n    let re = \"[\" + RegexEscape (new System.String(sep)) + \"]\"\n    Split s (MakeRegexp re) opts\n\nlet SplitStrings (s: string) (sep: string[]) (opts: System.StringSplitOptions) =\n    let re = String.concat \"|\" (Array.map RegexEscape sep)\n    Split s (MakeRegexp re) opts\n\nlet Filter f (s: string) =\n    System.String.Concat(s |> Seq.choose (fun c -> if f c then Some (string c) else None) |> Array.ofSeq)\n\n[<Inline \"$text.replace($pattern, $replace)\">]\nlet ReplaceString (pattern: RegExp) (replace: 'obj) (text: string) = X<string>\n\nlet SFormat (format: string) (args: obj[]) =\n    let pattern = RegExp(\"{(0|[1-9]\\d*)(?:,(-?[1-9]\\d*|0))?(?::(.*?))?}\", \"g\")\n    format\n    |> ReplaceString pattern (FuncWithArgs(fun (_, i, w) ->\n        let r = string args.[JS.Plus i]\n\n        if w <> JS.Undefined then\n            let w1 = JS.Plus w\n            let w2 = abs w1\n\n            if w2 > r.Length then\n                if w1 > 0 then r.PadLeft(w2)\n                else r.PadRight(w2)\n            else r\n        else r\n    ))\n\n[<Proxy(typeof<string>)>]\ntype private StringProxy =\n\n    [<Inline \"''\">]\n    new () = {}\n\n    [<Inline \"$chars.join('')\">]\n    new (chars: char []) = {}\n\n    [<Inline>]\n    static member CtorProxy(ch: char, n: int) = String.replicate n (string ch)\n\n    [<Inline \"$chars.slice($i, $i + $j).join('')\">]\n    new (chars: char [], i: int, j: int) = {}\n\n    member this.Chars  with [<Inline \"$this[$pos]\">]\n                            get (pos: int) = X<char>\n\n    [<Inline \"$this\">]\n    member this.Clone() = this :> obj\n\n    [<Inline \"$this\">]\n    member this.Copy() = this\n\n    [<Inline>]\n    static member Compare(x: string, y: string) =\n        Unchecked.compare x y\n\n    [<Inline>]\n    static member Compare(x: string, y: string, b: bool) =\n        if b then\n            Unchecked.compare (x.ToLower()) (y.ToLower())\n        else\n        Unchecked.compare x y\n\n    [<Inline>]\n    member this.CompareTo(s: string) =\n        Unchecked.compare (this :> obj) (s :> obj)\n\n    [<Inline>]\n    member this.CompareTo(s: obj) =\n        Unchecked.compare (this :> obj) s\n\n    [<Inline>]\n    static member Concat(strings: string seq) =\n        Join \"\" (Array.ofSeq strings)\n\n    [<Inline>]\n    static member Concat<'T>(objs: 'T seq) : string =\n        Join \"\" (Array.ofSeq (objs |> Seq.map (fun o -> o.ToString())))\n\n    [<Inline>]\n    static member Concat(s1: string, s2: string) = s1 + s2\n\n    [<Inline>]\n    static member Concat(s1: string, s2: string, s3: string) = s1 + s2 + s3\n\n    [<Inline>]\n    static member Concat(s1: string, s2: string, s3: string, s4: string) = s1 + s2 + s3 + s4\n\n    [<Inline>]\n    static member Concat(o1: obj) = string o1\n\n    [<Inline>]\n    static member Concat(o1: obj, o2: obj) = string o1 + string o2\n\n    [<Inline>]\n    static member Concat(o1: obj, o2: obj, o3: obj) = string o1 + string o2 + string o3\n\n    [<Inline>]\n    static member Concat(o1: obj, o2: obj, o3: obj, o4: obj) = string o1 + string o2 + string o3 + string o4\n\n    [<Inline \"$strings.join('')\">]\n    static member Concat([<System.ParamArray>] strings: string[]) = X<string>\n\n    [<Inline>]\n    static member Concat(objs: obj[]) =\n        Join \"\" (As<string[]> objs)\n\n    [<Inline \"$this.indexOf($s) != -1\">]\n    member this.Contains(s: string) = X<bool>\n\n    [<Inline>]\n    member this.CopyTo(s: int, d: char [], off: int, ct: int) =\n        CopyTo (As this) s d off ct\n\n    static member Empty with [<Inline \"''\">] get () = X<string>\n\n    [<Inline>]\n    member this.EndsWith(other: string) = EndsWith (As this) other\n\n    [<Inline \"$x == $y\">]\n    static member Equals(x: string, y: string) = X<bool>\n\n    [<Inline \"$this == $s\">]\n    member this.Equals(s: string) = X<bool>\n\n    [<Inline \"$this === $s\">]\n    override this.Equals(s: obj) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Inline>]\n    member this.GetEnumerator() = Enumerator.Get (unbox<seq<char>> this) |> As<System.CharEnumerator>\n\n    [<Inline \"$this.indexOf($s)\">]\n    member this.IndexOf(s: string) = X<int>\n\n    [<Inline \"$this.indexOf($c)\">]\n    member this.IndexOf(c: char) = X<int>\n\n    [<Inline \"$this.indexOf($s,$i)\">]\n    member this.IndexOf(s: string, i: int) = X<int>\n\n    [<Inline>]\n    member this.IndexOf(c: char, i: int) = IndexOf (As this) c i\n\n    [<Inline>]\n    static member IsNullOrEmpty(x: string) = IsNullOrEmpty x\n\n    [<Inline>]\n    static member IsNullOrWhiteSpace(x: string) = IsNullOrWhiteSpace x\n\n    member this.Item\n        with    [<Inline \"$this[$pos]\">]\n                get (pos: int) = X<char>\n\n    [<Inline>]\n    static member Join(sep: string, values: string seq) =\n        Join sep (Array.ofSeq values)\n\n    [<Inline>]\n    static member Join(sep: string, [<System.ParamArray>] values: string[]) =\n        Join sep values\n\n    [<Inline \"$this.lastIndexOf($s)\">]\n    member this.LastIndexOf(s: string) = X<int>\n\n    [<Inline \"$this.lastIndexOf($c)\">]\n    member this.LastIndexOf(c: char) = X<int>\n\n    [<Inline \"$this.lastIndexOf($s,$i)\">]\n    member this.LastIndexOf(s: string, i: int) = X<int>\n\n    [<Inline>]\n    member this.LastIndexOf(c: char, i: int) =\n        LastIndexOf (As this) c i\n\n    member this.Length with [<Inline \"$this.length\">]\n                            get () = X<int>\n\n    [<Inline>]\n    member this.PadLeft(i: int) =\n        PadLeft (As this) i\n\n    [<Inline>]\n    member this.PadLeft(i: int, c: char) =\n        PadLeftWith (As this) i c\n\n    [<Inline>]\n    member this.PadRight(i: int) =\n        PadRight (As this) i\n\n    [<Inline>]\n    member this.PadRight(i: int, c: char) =\n        PadRightWith (As this) i c\n\n    [<Inline \"$this.substring(0,$ix)\">]\n    member this.Remove(ix: int) = X<string>\n\n    [<Inline>]\n    member this.Remove(ix: int, count: int) = Remove (As this) ix count\n\n    [<Inline>]\n    member this.ToCharArray() = ToCharArray (As this)\n\n    [<Inline>]\n    member this.Replace(subj: string, repl: string) =\n        Replace (As this) subj repl\n\n    [<Inline>]\n    member this.Replace(subj: char, repl: char) =\n        ReplaceChar (As this) subj repl\n\n    [<Inline>]\n    member this.Split([<System.ParamArray>] sep: char[]) =\n        SplitChars (As this) sep  System.StringSplitOptions.None\n\n    [<Inline>]\n    member this.Split(sep: char[], opts: System.StringSplitOptions) =\n        SplitChars (As this) sep opts\n\n    [<Inline>]\n    member this.Split(sep: string[], opts: System.StringSplitOptions) =\n        SplitStrings (As this) sep opts\n\n    [<Inline>]\n    member this.StartsWith(s: string) =\n        StartsWith (As this) s\n\n    [<Inline \"$this.substring($ix)\">]\n    member this.Substring(ix: int) = X<string>\n\n    [<Inline>]\n    member this.Substring(ix: int, ct: int) =\n        Substring (As this) ix ct\n\n    [<Inline>]\n    member this.ToCharArray(i: int, l: int) =\n        ToCharArrayRange (As this) i l\n\n    [<Inline \"$this\">]\n    override this.ToString() = X<string>\n    \n    [<Inline \"$this.toLowerCase()\">]\n    member this.ToLower() = X<string>\n\n    [<Inline \"$this.toUpperCase()\">]\n    member this.ToUpper() = X<string>\n\n    [<Inline>]\n    member this.Trim() = Trim (As this)\n\n    [<Inline>]\n    member this.TrimStart(t: char[]) = TrimStart (As this) t\n\n    [<Inline>]\n    member this.TrimEnd(t: char[]) = TrimEnd (As this) t\n\n    [<Inline \"$a + $b\">]\n    static member (+) (a: string, b: string) = X<string>\n\n    [<Inline>]\n    static member (+) (a: obj, b: string) = string a + b \n\n    [<Inline>]\n    static member (+) (a: string, b: obj) = a + string b\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality(a: string, b: string) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality(a: string, b: string) = X<bool>\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, [<System.ParamArray>] arguments: obj []) = SFormat format arguments\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, arg0: obj): string = SFormat format [|arg0|]\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, arg0: obj, arg1: obj): string = SFormat format [|arg0; arg1|]\n\n    [<Macro(typeof<M.StringFormat>)>]\n    [<Inline>]\n    static member Format(format: string, arg0: obj, arg1: obj, arg2: obj): string = SFormat format [|arg0; arg1; arg2|]\n\nlet protect (s : string) =\n    if s = null then \"\" else s\n\n[<Inline \"$strings.join($sep)\">]\nlet join (strings: string[]) (sep: string) = X<string>\n\n[<Name \"collect\">]\nlet Collect (f: char -> string) (s: string) : string =\n    System.String.Concat(Array.init s.Length (fun i -> f s.[i]))\n\n[<Name \"concat\">]\nlet Concat (separator: string) (strings: seq<string>) : string =\n    join (Seq.toArray strings) separator\n\n[<Name \"exists\">]\nlet Exists (f: char -> bool) (s: string) : bool =\n    Seq.exists f (protect s)\n\n[<Name \"forall\">]\nlet ForAll (f: char -> bool) (s: string) : bool =\n    Seq.forall f (protect s)\n\n[<Name \"init\">]\nlet Initialize (count: int) (f: int -> string) : string =\n    System.String.Concat(Array.init count f)\n\n[<Name \"iter\">]\nlet Iterate (f: char -> unit) (s: string) : unit =\n    Seq.iter f (protect s)\n\n[<Name \"iteri\">]\nlet IterateIndexed (f: int -> char -> unit) (s: string) : unit =\n    Seq.iteri f (protect s)\n\n[<Name \"length\">]\nlet Length (s: string) : int =\n    (protect s).Length\n\n[<Name \"map\">]\nlet Map (f: char -> char) (s: string) : string =\n    Collect (fun x -> string (f x)) (protect s)\n\n[<Name \"mapi\">]\nlet MapIndexed (f: int -> char -> char) (s: string) : string =\n    System.String.Concat (Seq.toArray (Seq.mapi (fun i x -> string (f i x)) s))\n\n[<Name \"replicate\">]\nlet Replicate (count: int) (s: string) : string =\n    System.String.Concat(Array.create count s)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\nopen System.Threading\nopen System.Threading.Tasks\n\n[<Proxy(typeof<Task>); Name \"Task\">]\ntype private TaskProxy(action: System.Action, token: CT, status, exc) =\n    [<Name \"status\">]\n    let mutable status = status\n    [<Name \"continuations\">]\n    let continuations = [||] : TaskProxy[]\n    [<Name \"exc\">]\n    let mutable exc = exc : System.AggregateException\n\n    abstract Execute : unit -> unit\n    default this.Execute() = action.Invoke()\n\n    member this.Exception = exc\n\n    member this.IsCanceled = \n        status = TaskStatus.Canceled\n\n    member this.IsCompleted = \n        status = TaskStatus.RanToCompletion || status = TaskStatus.Faulted || status = TaskStatus.Canceled\n\n    member this.IsFaulted =\n        status = TaskStatus.Faulted\n\n    member this.Status = status\n\n    new (action) = TaskProxy(action, CT.None, TaskStatus.Created, null)\n\n    new (action, ct) = TaskProxy(action, ct, TaskStatus.Created, null)\n    \n    new (action: System.Action<obj>, obj: obj) = TaskProxy((fun () -> action.Invoke(obj)), CT.None, TaskStatus.Created, null)\n\n    new (action: System.Action<obj>, obj: obj, ct: CT) = TaskProxy((fun () -> action.Invoke(obj)), ct, TaskStatus.Created, null)\n\n    member this.OnCompleted(cont : unit -> unit) =\n        if this.IsCompleted then \n            cont()\n        else \n            if this.Status = TaskStatus.Created then this.Start()\n            this.ContinueWith(fun (_: Task) -> cont()) |> ignore\n\n    member this.RunContinuations() =\n        for c in continuations do\n            c.StartContinuation()    \n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task>) =\n        this.ContinueWith(action, CT.None)\n\n    member this.ContinueWith(action: System.Action<Task>, ct) =\n        let res = TaskProxy((fun () -> action.Invoke (As<Task> this)), ct, TaskStatus.WaitingForActivation, null)\n        if this.IsCompleted then\n            res.StartContinuation()     \n        else\n            continuations.JS.Push res |> ignore\n        As<Task> res\n\n    [<Inline>]\n    member this.ContinueWith(func: System.Func<Task,'T>) =\n        this.ContinueWith(func, CT.None)\n\n    member this.ContinueWith(func: System.Func<Task,'T>, ct) =\n        let res = TaskProxy<'T>((fun () -> func.Invoke (As<Task> this)), ct, TaskStatus.WaitingForActivation, null, JS.Undefined)\n        if this.IsCompleted then\n            res.StartContinuation()     \n        else\n            continuations.JS.Push res |> ignore\n        As<Task<'T>> res\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task, obj>, obj: obj) =\n        this.ContinueWith(System.Action<Task>(fun t -> action.Invoke (t, obj)))\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task, obj>, obj: obj, ct) =\n        this.ContinueWith(System.Action<Task>(fun t -> action.Invoke (t, obj)), ct)\n\n    [<Inline>]\n    member this.ContinueWith(func: System.Func<Task, obj, 'T>, obj: obj) =\n        this.ContinueWith(fun t -> func.Invoke (t, obj))\n\n    [<Inline>]\n    member this.ContinueWith(func: System.Func<Task, obj, 'T>, obj: obj, ct) =\n        this.ContinueWith((fun t -> func.Invoke (t, obj)), ct)\n\n    member this.StartContinuation() =\n        if status = TaskStatus.WaitingForActivation then\n            status <- TaskStatus.WaitingToRun\n            Concurrency.fork (fun () -> \n                if status = TaskStatus.WaitingToRun then\n                    status <- TaskStatus.Running\n                    try\n                        this.Execute()\n                        status <- TaskStatus.RanToCompletion\n                    with e ->\n                        exc <- System.AggregateException(e)\n                        status <- TaskStatus.Faulted\n                    this.RunContinuations()\n            )\n\n    member this.Start() =\n        if status = TaskStatus.Created then\n            status <- TaskStatus.WaitingToRun\n            Concurrency.fork (fun () -> \n                status <- TaskStatus.Running\n                try\n                    this.Execute()\n                    status <- TaskStatus.RanToCompletion\n                with\n                | :? OCE as e when e.CancellationToken = token ->\n                    Console.Log(\"Task cancellation caught:\", e)\n                    exc <- System.AggregateException(e)\n                    status <- TaskStatus.Canceled\n                | e ->\n                    Console.Log(\"Task error caught:\", e)\n                    exc <- System.AggregateException(e)\n                    status <- TaskStatus.Faulted\n                this.RunContinuations()\n            )\n        else\n            invalidOp \"Task not in initial state\"\n        \n    static member FromCanceled ct = \n        As<Task> (TaskProxy(null, ct, TaskStatus.Canceled, System.AggregateException(TaskCanceledException())))\n\n    static member FromCanceled(ct: CT) = \n        As<Task<_>> (TaskProxy<_>(null, ct, TaskStatus.Canceled, System.AggregateException(TaskCanceledException()), As null)) \n\n    static member FromException (exc: exn) =\n        As<Task> (TaskProxy(null, CT.None, TaskStatus.Faulted, System.AggregateException(exc)))\n\n    static member FromException (exc: exn) =\n        As<Task<_>> (TaskProxy<_>(null, CT.None, TaskStatus.Faulted, System.AggregateException(exc), As null))\n\n    static member FromResult (res: 'T) = \n        As<Task<'T>> (TaskProxy<'T>(null, CT.None, TaskStatus.RanToCompletion, null, res)) \n\n    [<Inline>]\n    static member Run(action : System.Action) =\n       TaskProxy.Run(action, CT.None)\n        \n    static member Run(action : System.Action, ct) =\n        let res = TaskProxy(action, ct, TaskStatus.Created, null)\n        res.Start()\n        As<Task> res\n\n    [<Inline>]\n    static member Run(func : System.Func<Task>) =\n        TaskProxy.Run(func, CT.None)\n\n    static member Run(func : System.Func<Task>, ct: CT) =\n        let task = func.Invoke()\n        if ct.IsCancellationRequested then TaskProxy.FromCanceled ct : Task else\n        if task.Status = TaskStatus.Created then\n            task.Start()\n        task\n\n    [<Inline>]\n    static member Run(func : System.Func<'T>) =\n        TaskProxy.Run(func, CT.None)\n\n    static member Run(func : System.Func<'T>, ct) =\n        let res = TaskProxy<'T>(func, ct, TaskStatus.Created, null, JS.Undefined)\n        res.Start()\n        As<Task<'T>> res   \n\n    [<Inline>]\n    static member Run(func : System.Func<Task<'T>>) =\n        TaskProxy.Run(func, CT.None)\n\n    static member Run(func : System.Func<Task<'T>>, ct: CT) =\n        let task = func.Invoke()\n        if ct.IsCancellationRequested then TaskProxy.FromCanceled<'T> ct else\n        if task.Status = TaskStatus.Created then\n            task.Start()\n        task\n\n    static member Delay(time: int) =   \n        Async.StartAsTask (Async.Sleep time) :> Task\n             \n    static member Delay(time: int, ct) =        \n        Async.StartAsTask (Async.Sleep time, cancellationToken = ct) :> Task\n\n    [<Inline>]\n    static member Delay(time: System.TimeSpan) =        \n        TaskProxy.Delay(As<int> time)\n             \n    [<Inline>]\n    static member Delay(time: System.TimeSpan, ct) =        \n        TaskProxy.Delay(As<int> time, ct)\n\n    static member WhenAny(tasks: Task[]) =\n        let tcs = System.Threading.Tasks.TaskCompletionSource<_>()\n        for t in tasks do t.ContinueWith (fun t -> tcs.TrySetResult t |> ignore) |> ignore\n        tcs.Task\n            \n    [<Inline>]                         \n    static member WhenAny(tasks: seq<Task>) = TaskProxy.WhenAny(Array.ofSeq tasks)\n\n    static member WhenAny(tasks: Task<'T>[]) =\n        let tcs = System.Threading.Tasks.TaskCompletionSource<Task<'T>>()\n        for t in tasks do t.ContinueWith (fun t -> tcs.TrySetResult t |> ignore) |> ignore\n        tcs.Task\n            \n    [<Inline>]                         \n    static member WhenAny(tasks: seq<Task<'T>>) = TaskProxy.WhenAny(Array.ofSeq tasks)\n\n    static member WhenAll(tasks: Task[]) =\n        let target = tasks.Length\n        let completed = ref 0\n        let tcs = System.Threading.Tasks.TaskCompletionSource<_>()\n        for i = 0 to target - 1 do\n            tasks.[i].ContinueWith (fun t -> \n                if t.IsFaulted then\n                    tcs.TrySetException t.Exception |> ignore\n                elif t.IsCanceled then\n                    tcs.TrySetCanceled() |> ignore\n                else\n                    incr completed\n                    if !completed = target then tcs.TrySetResult() |> ignore \n            ) |> ignore\n        tcs.Task :> Task\n\n    [<Inline>]                         \n    static member WhenAll(tasks: seq<Task>) = TaskProxy.WhenAll(Array.ofSeq tasks)\n\n    static member WhenAll(tasks: Task<'T>[]) =\n        let target = tasks.Length\n        let completed = ref 0\n        let results = JavaScript.Array(target)\n        let tcs = System.Threading.Tasks.TaskCompletionSource<_>()\n        for i = 0 to target - 1 do\n            tasks.[i].ContinueWith (fun (t: Task<'T>) -> \n                if t.IsFaulted then\n                    tcs.TrySetException t.Exception |> ignore\n                elif t.IsCanceled then\n                    tcs.TrySetCanceled() |> ignore\n                else\n                    incr completed\n                    results.[i] <- t.Result\n                    if !completed = target then tcs.SetResult results.Self\n            ) |> ignore\n        tcs.Task\n\n    [<Inline>]                         \n    static member WhenAll(tasks: seq<Task<'T>>) = TaskProxy.WhenAll(Array.ofSeq tasks)\n\n    static member Yield() =\n        new Task(fun () -> ()) |> As<System.Runtime.CompilerServices.YieldAwaitable>  \n\nand [<Proxy(typeof<Task<_>>); Name \"Task1\">] private TaskProxy<'T>(func: System.Func<'T>, token: CT, status, exc, result) =\n    inherit TaskProxy(null, token, status, exc)\n    \n    [<Name \"result\">]\n    let mutable result = result\n\n    new (func) = TaskProxy<'T>(func, CT.None, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    new (func, ct) = TaskProxy<'T>(func, ct, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    new (func: System.Func<obj, 'T>, obj: obj) = TaskProxy<'T>((fun () -> func.Invoke obj), CT.None, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    new (func: System.Func<obj, 'T>, obj: obj, ct: CT) = TaskProxy<'T>((fun () -> func.Invoke obj), ct, TaskStatus.Created, null, As<'T> JS.Undefined)\n\n    member this.Result = \n        match this.Status with\n        | TaskStatus.RanToCompletion -> result\n        | TaskStatus.Faulted\n        | TaskStatus.Canceled -> raise this.Exception \n        | _ -> invalidOp \"Task has not been completed, has no Result\"\n\n    override this.Execute () =\n        result <- func.Invoke()\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>>) =\n        this.ContinueWith(As<System.Action<Task>> action)\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>>, ct) =\n        this.ContinueWith(As<System.Action<Task>> action, ct)\n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, 'R>) =\n        this.ContinueWith(As<System.Func<Task, 'R>> func) \n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, 'R>, ct) =\n        this.ContinueWith(As<System.Func<Task, 'R>> func, ct) \n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>, obj>, obj: obj) =\n        this.ContinueWith(System.Action<Task<'T>>(fun t -> action.Invoke(t, obj)))\n\n    [<Inline>]\n    member this.ContinueWith(action: System.Action<Task<'T>, obj>, obj: obj, ct) =\n        this.ContinueWith(System.Action<Task<'T>>(fun t -> action.Invoke(t, obj)), ct)\n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, obj, 'R>, obj: obj) =\n        this.ContinueWith(fun t -> func.Invoke(t, obj)) \n\n    [<Inline>]\n    member this.ContinueWith<'R>(func: System.Func<Task<'T>, obj, 'R>, obj: obj, ct) =\n        this.ContinueWith((fun t -> func.Invoke(t, obj)), ct) \n\n[<Proxy(typeof<TaskCompletionSource<_>>)>]\n[<Name \"TaskCompletionSource\">]\ntype private TaskCompletionSourceProxy<'T>() =\n    let task = new TaskProxy<'T>(null, CT.None, TaskStatus.WaitingForActivation, null, JS.Undefined)\n\n    member this.Task = As<Task<'T>> task\n\n    member this.SetCanceled() =\n        if task.IsCompleted then\n            failwith \"Task already completed.\"\n        task?status <- TaskStatus.Canceled\n        task.RunContinuations()\n\n    member this.SetException(exc: exn) =\n        if task.IsCompleted then\n            failwith \"Task already completed.\"\n        task?status <- TaskStatus.Faulted\n        task?exc <- System.AggregateException(exc)\n        task.RunContinuations()\n\n    member this.SetException(exs : seq<exn>) =\n        this.SetException(System.AggregateException(exs))\n\n    member this.SetResult(res: 'T) =\n        if task.IsCompleted then\n            failwith \"Task already completed.\"\n        task?status <- TaskStatus.RanToCompletion\n        task?result <- res \n        task.RunContinuations()\n\n    member this.TrySetCanceled() =\n        if not task.IsCompleted then\n            task?status <- TaskStatus.Canceled\n            task.RunContinuations()\n            true\n        else false\n\n    member this.TrySetCanceled(ct: CT) =\n        if not task.IsCompleted then\n            task?status <- TaskStatus.Canceled\n            task?token <- ct\n            task.RunContinuations()\n            true\n        else false\n\n    member this.TrySetException(exc: exn) =\n        if not task.IsCompleted then\n            task?status <- TaskStatus.Faulted\n            task?exc <- System.AggregateException(exc)\n            task.RunContinuations()\n            true\n        else false\n\n    member this.TrySetException(exs : seq<exn>) =\n        this.TrySetException(System.AggregateException(exs))\n\n    member this.TrySetResult(res: 'T) =        \n        if not task.IsCompleted then\n            task?status <- TaskStatus.RanToCompletion\n            task?result <- res \n            task.RunContinuations()\n            true\n        else false\n    ", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n/// Implements generic comparison, equality and hashing.\n[<WebSharper.Name \"Unchecked\">]\n[<WebSharper.Proxy\n    \"Microsoft.FSharp.Core.Operators+Unchecked, \\\n     FSharp.Core, Culture=neutral, \\\n     PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private WebSharper.UncheckedProxy\n\nopen WebSharper.JavaScript\nmodule M = WebSharper.Core.Macros\n\n[<Inline \"$a instanceof Array\">]\nlet isArray (a: obj) = X<bool>\n\n[<Inline \"$a instanceof Date\">]\nlet isDate (a: obj) = X<bool>\n\nlet rec compareArrays (a: obj []) (b: obj []) =\n    if a.Length < b.Length   then -1\n    elif a.Length > b.Length then 1\n    else\n        let mutable cmp = 0\n        let mutable i = 0\n        while cmp = 0 && i < a.Length do\n            cmp <- Unchecked.compare a.[i] b.[i]\n            i <- i + 1\n        cmp\n\n[<Inline \"$d.getTime()\">]\nlet getTime (d: obj) : int = X\n\nlet rec compareDates (a: obj) (b: obj) =\n    compare (getTime a) (getTime b)\n\n/// Compares two values generically.\nlet Compare<'T> (a: 'T) (b: 'T) : int =\n    let objCompare (a: obj) (b: obj) =\n        let cmp = ref 0\n        JS.ForEach a (fun k ->\n            if not (JS.HasOwnProperty a k) then\n                false\n            elif not (JS.HasOwnProperty b k) then\n                cmp := 1; true\n            else\n                cmp := Unchecked.compare a?(k) b?(k); !cmp <> 0)\n        if !cmp = 0 then\n            JS.ForEach b (fun k ->\n                if not (JS.HasOwnProperty b k) then\n                    false\n                elif not (JS.HasOwnProperty a k) then\n                    cmp := -1; true\n                else false)\n        !cmp\n    if a ===. b then 0 else\n        match JS.TypeOf a with\n        | JS.Undefined ->\n            match JS.TypeOf b with\n            | JS.Undefined -> 0\n            | _ -> -1\n        | JS.Function ->\n            failwith \"Cannot compare function values.\"\n        | JS.Boolean | JS.Number | JS.String ->\n            if a <. b then -1 else 1\n        | JS.Object ->\n            if a ===. null then -1\n            elif b ===. null then 1\n            elif JS.In \"CompareTo\" a then (As<System.IComparable<_>> a).CompareTo(b)\n            elif JS.In \"CompareTo0\" a then (As<System.IComparable> a).CompareTo(b)\n            elif isArray a && isArray b then compareArrays (As a) (As b)\n            elif isDate a && isDate b then compareDates a b\n            else objCompare (As a) (As b)\n\n/// Produces an undefined value.\n[<Macro(typeof<M.DefaultOf>)>]\n[<Inline \"undefined\">]\nlet DefaultOf<'T> = X<'T>\n\nlet arrayEquals (a: obj []) (b: obj []) =\n    if a.Length = b.Length then\n        let mutable eq = true\n        let mutable i = 0\n        while eq && i < a.Length do\n            if not (Unchecked.equals a.[i] b.[i]) then\n                eq <- false\n            i <- i + 1\n        eq\n    else\n        false\n\nlet dateEquals a b =\n    getTime a ===. getTime b\n\n[<Inline \"$a.Equals($b)\">]\nlet private equals (a: obj) (b: obj) = X<bool>\n\n/// Tests if two values are equal.\nlet Equals (a: 'T) (b: 'T) : bool =\n    let objEquals (a: obj) (b: obj) =\n        let eqR = ref true\n        JS.ForEach a (fun k ->\n            eqR := not (JS.HasOwnProperty a k) || JS.HasOwnProperty b k && Unchecked.equals a?(k) b?(k)\n            not !eqR)\n        if !eqR then\n            JS.ForEach b (fun k ->\n                eqR := not (JS.HasOwnProperty b k) || JS.HasOwnProperty a k\n                not !eqR)\n        !eqR\n    if a ===. b then true else\n        match JS.TypeOf a with\n        | JS.Object ->\n            if a ===. null || a ===. JS.Undefined || b ===. null || b ===. JS.Undefined then false\n            elif JS.In \"Equals\" a then equals a b\n            elif isArray a && isArray b then arrayEquals (As a) (As b)\n            elif isDate a && isDate b then dateEquals a b\n            else objEquals (As a) (As b)\n        | JS.Function ->\n            if JS.In \"$Func\" a then\n                a?``$Func`` ===. b?``$Func`` && a?``$Target`` ===. b?``$Target``\n            elif JS.In \"$Invokes\" a && JS.In \"$Invokes\" b then\n                arrayEquals a?``$Invokes`` b?``$Invokes``  \n            else false\n        | _ ->\n            false\n\nlet hashMix (x: int) (y: int) : int =\n    (x <<< 5) + x + y\n\nlet hashArray (o: obj []) =\n    let mutable h = -34948909\n    for i in 0 .. o.Length - 1 do\n        h <- hashMix h (Unchecked.hash o.[i])\n    h\n\nlet hashString (s: string) : int =\n    if s ===. null then 0 else\n        let mutable hash = 5381\n        for i = 0 to s.Length - 1 do\n            hash <- hashMix hash (int s.[i])\n        hash\n\n[<Inline \"$o.GetHashCode()\">]\nlet getHashCode(o: obj) = X<int>\n\nlet hashObject (o: obj) =\n    if JS.In \"GetHashCode\" o then getHashCode o else\n        let (++) = hashMix\n        let h = ref 0\n        JS.ForEach o (fun key ->\n            h := !h ++ hashString key ++ Unchecked.hash ((?) o key)\n            false)\n        !h\n\n/// Computes the hash of an object.\nlet Hash<'T> (o: 'T) : int =\n    match JS.TypeOf o with\n    | JS.Undefined -> 0\n    | JS.Function  -> 0\n    | JS.Boolean   -> if As o then 1 else 0\n    | JS.Number    -> As o\n    | JS.String    -> hashString (As o)\n    | JS.Object    -> if o ==. null then 0\n                      elif isArray o then hashArray (As o)\n                      else hashObject o\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\n[<Proxy(typeof<voption<_>>)>]\n[<RequireQualifiedAccess>]\ntype private ValueOptionProxy<'T> =\n    | ValueNone \n    | ValueSome of 'T\n\n    member this.Value =\n        match this with \n        | ValueNone -> invalidOp \"ValueOption.Value\"\n        | ValueSome x -> x \n\n    static member Test =\n        (ValueSome 2).Value\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper\n\nopen WebSharper.JavaScript\n\nmodule M = WebSharper.Core.Macros\n\n[<JavaScript>]\n[<Name \"Numeric\">]\ntype internal N =\n    static member Parse<'T>(s: string, min: 'T, max: 'T, overflowMsg) =\n        let x : float = JS.Plus s\n        if x !==. (x -. (x %. 1)) then\n            raise (System.FormatException \"Input string was not in a correct format.\")\n        elif (x <. min) || (x >. max) then\n            raise (System.OverflowException overflowMsg)\n        else As<'T> x\n\n    static member TryParse<'T>(s: string, min: 'T, max: 'T, r: byref<'T>) =\n        let x : float = JS.Plus s\n        let ok = x ===. (x -. (x %. 1)) && (x >=. min) && (x <=. max)\n        if ok then r <- As<'T> x\n        ok\n\n    static member ParseBool(s: string) =\n        match s.ToLower() with\n        | \"true\" -> true\n        | \"false\" -> false\n        | _ -> raise (System.FormatException \"String was not recognized as a valid Boolean.\")\n\n    static member TryParseBool(s: string, r: byref<bool>) =\n        match s.ToLower() with\n        | \"true\" -> r <- true; true\n        | \"false\" -> r <- false; true\n        | _ -> false\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Byte>)>]\ntype internal NB =\n\n    [<Name \"WebSharper.Numeric.ParseByte\">]\n    static member Parse(s: string) : System.Byte =\n        N.Parse(s, System.Byte.MinValue, System.Byte.MaxValue, \"Value was either too large or too small for an unsigned byte.\")\n\n    [<Name \"WebSharper.Numeric.TryParseByte\">]\n    static member TryParse(s: string, r: byref<System.Byte>) : bool =\n        N.TryParse(s, System.Byte.MinValue, System.Byte.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.SByte>)>]\ntype internal NSB =\n\n    [<Name \"WebSharper.Numeric.ParseSByte\">]\n    static member Parse(s: string) : System.SByte =\n        N.Parse(s, System.SByte.MinValue, System.SByte.MaxValue, \"Value was either too large or too small for a signed byte.\")\n\n    [<Name \"WebSharper.Numeric.TryParseSByte\">]\n    static member TryParse(s: string, r: byref<System.SByte>) : bool =\n        N.TryParse(s, System.SByte.MinValue, System.SByte.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Int16>)>]\n[<Name \"Int16\">]\ntype internal NI16 =\n\n    [<Name \"WebSharper.Numeric.ParseInt16\">]\n    static member Parse(s: string) : System.Int16 =\n        N.Parse(s, System.Int16.MinValue, System.Int16.MaxValue, \"Value was either too large or too small for an Int16.\")\n\n    [<Name \"WebSharper.Numeric.TryParseInt16\">]\n    static member TryParse(s: string, r: byref<System.Int16>) : bool =\n        N.TryParse(s, System.Int16.MinValue, System.Int16.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Int32>)>]\n[<Name \"Int32\">]\ntype internal NI32 =\n\n    [<Name \"WebSharper.Numeric.ParseInt32\">]\n    static member Parse(s: string) : System.Int32 =\n        N.Parse(s, System.Int32.MinValue, System.Int32.MaxValue, \"Value was either too large or too small for an Int32.\")\n\n    [<Name \"WebSharper.Numeric.TryParseInt32\">]\n    static member TryParse(s: string, r: byref<System.Int32>) : bool =\n        N.TryParse(s, System.Int32.MinValue, System.Int32.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.UInt16>)>]\n[<Name \"UInt16\">]\ntype internal NUI16 =\n\n    [<Name \"WebSharper.Numeric.ParseUInt16\">]\n    static member Parse(s: string) : System.UInt16 =\n        N.Parse(s, System.UInt16.MinValue, System.UInt16.MaxValue, \"Value was either too large or too small for an UInt16.\")\n\n    [<Name \"WebSharper.Numeric.TryParseUInt16\">]\n    static member TryParse(s: string, r: byref<System.UInt16>) : bool =\n        N.TryParse(s, System.UInt16.MinValue, System.UInt16.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.UInt32>)>]\n[<Name \"UInt32\">]\ntype internal NUI32 =\n\n    [<Name \"WebSharper.Numeric.ParseUInt32\">]\n    static member Parse(s: string) : System.UInt32 =\n        N.Parse(s, System.UInt32.MinValue, System.UInt32.MaxValue, \"Value was either too large or too small for an UInt32.\")\n\n    [<Name \"WebSharper.Numeric.TryParseUInt32\">]\n    static member TryParse(s: string, r: byref<System.UInt32>) : bool =\n        N.TryParse(s, System.UInt32.MinValue, System.UInt32.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Int64>)>]\n[<Name \"Int64\">]\ntype internal NI64 =\n\n    [<Name \"WebSharper.Numeric.ParseInt64\">]\n    static member Parse(s: string) : System.Int64 =\n        N.Parse(s, System.Int64.MinValue, System.Int64.MaxValue, \"Value was either too large or too small for an Int64.\")\n\n    [<Name \"WebSharper.Numeric.TryParseInt64\">]\n    static member TryParse(s: string, r: byref<System.Int64>) : bool =\n        N.TryParse(s, System.Int64.MinValue, System.Int64.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.UInt64>)>]\n[<Name \"UInt64\">]\ntype internal NUI64 =\n\n    [<Name \"WebSharper.Numeric.ParseUInt64\">]\n    static member Parse(s: string) : System.UInt64 =\n        N.Parse(s, System.UInt64.MinValue, System.UInt64.MaxValue, \"Value was either too large or too small for an UInt64.\")\n\n    [<Name \"WebSharper.Numeric.TryParseUInt64\">]\n    static member TryParse(s: string, r: byref<System.UInt64>) : bool =\n        N.TryParse(s, System.UInt64.MinValue, System.UInt64.MaxValue, &r)\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Single>)>]\ntype internal NS =\n\n    [<Inline \"Math.abs($0) === Infinity\">]\n    static member IsInfinity(f: single) = X<bool>\n\n    [<Inline \"isNaN($0)\">]\n    static member IsNaN(f: single) = X<bool>\n\n    [<Inline \"$0 === -Infinity\">]\n    static member IsNegativeInfinity (f: single) = X<bool>\n\n    [<Inline \"$0 === Infinity\">]\n    static member IsPositiveInfinity (f: single) = X<bool>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member Parse(x: string) = X<System.Single>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member TryParse(x: string, r: byref<System.Single>) = X<bool>\n\n[<Macro(typeof<M.NumericMacro>)>]\n[<Proxy(typeof<System.Double>)>]\ntype internal ND =\n\n    [<Inline \"Math.abs($0) === Infinity\">]\n    static member IsInfinity(f: double) = X<bool>\n\n    [<Inline \"isNaN($0)\">]\n    static member IsNaN(f: double) = X<bool>\n\n    [<Inline \"$0 === -Infinity\">]\n    static member IsNegativeInfinity (f: double) = X<bool>\n\n    [<Inline \"$0 === Infinity\">]\n    static member IsPositiveInfinity (f: double) = X<bool>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member Parse(x: string) = X<System.Double>\n\n    [<Macro(typeof<M.NumericMacro>)>]\n    static member TryParse(x: string, r: byref<System.Double>) = X<bool>\n\n[<Proxy(typeof<System.Boolean>)>]\ntype internal B = \n    [<Inline>]\n    static member op_LogicalNot(a: bool) = not a\n\n    [<Inline \"$this == $x\">]\n    member this.Equals(x: bool) = X<bool>\n\n    [<Inline \"$this === $x\">]\n    override this.Equals(x: obj) = X<bool>\n\n    [<Inline \"$a == $b\">]\n    static member op_Equality(a: bool, b: bool) = X<bool>\n\n    [<Inline \"$a != $b\">]\n    static member op_Inequality(a: bool, b: bool) = X<bool>\n\n    [<Inline>]\n    override this.GetHashCode() = hash this\n\n    [<Constant \"true\">]\n    static member TrueString = X<string>\n\n    [<Constant \"false\">]\n    static member FalseString = X<string>\n\n    [<Inline>]\n    override this.ToString() = string this\n\n    [<Inline>]\n    member this.CompareTo(x: bool) =\n        Unchecked.compare (this :> obj) (x :> obj)\n\n    [<Inline>]\n    member this.CompareTo(x: obj) =\n        Unchecked.compare (this :> obj) x\n\n    [<Inline>]\n    static member Parse(x: string) =\n        N.ParseBool x\n\n    [<Inline>]\n    static member TryParse(x: string, r: byref<bool>) =\n        N.TryParseBool(x, &r)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nmodule internal WebSharper.ClientSideJson\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\n\ntype OptionalFieldKind =\n    /// The field doesn't have type option<'T>\n    | NotOption = 0\n    /// The field has type option<'T>\n    | NormalOption = 1\n    /// The field has type option<'T> and is marked [<OptionalField>]\n    | MarkedOption = 2\n    /// The field has type Optional<'T>\n    | ErasedOption = 3\n\nlet ServerSideProvider = WebSharper.Core.Json.Provider.Create ()\n\n[<JavaScript>]\nmodule Provider =\n    let Id () = \n        ()\n        fun () -> id\n\n    let EncodeTuple (encs: (unit -> obj -> obj)[]) : (unit -> obj[] -> obj) =\n        ()\n        fun () args ->\n            box (Array.map2 (fun f x -> f () x) encs args)\n\n    let EncodeDateTime () =\n        ()\n        fun () (x: System.DateTime) ->\n            box (x.JS.ToISOString())\n\n    let EncodeDateTimeOffset () =\n        ()\n        fun () (x: System.DateTimeOffset) ->\n            box (New [ \"d\" => x.DateTime.JS.ToISOString(); \"o\" => x?o ])\n\n    let EncodeList (encEl: unit -> 'T -> obj) : (unit -> list<'T> -> obj) =\n        ()\n        fun () (l: list<'T>) ->\n            let a : obj[] = [||]\n            let e = encEl()\n            l |> List.iter (fun x -> a.JS.Push (e x) |> ignore)\n            box a\n\n    let EncodeRecord (_: obj) (fields: (string * (unit -> obj -> obj) * OptionalFieldKind)[]) : (unit -> 'T -> obj) =\n        ()\n        fun () x ->\n            let o = New []\n            fields |> Array.iter (fun (name, enc, kind) ->\n                match kind with\n                | OptionalFieldKind.NotOption ->\n                    o?(name) <- enc () x?(name)\n                | OptionalFieldKind.NormalOption ->\n                    match x?(name) with\n                    | Some x -> o?(name) <- enc () x\n                    | None -> ()\n                | OptionalFieldKind.MarkedOption ->\n                    if JS.HasOwnProperty x name then\n                        o?(name) <- enc () x?(name)\n                | OptionalFieldKind.ErasedOption ->\n                    if x?(name) ===. JS.Undefined then\n                        o?(name) <- enc () x?(name)\n                | _ -> failwith \"Invalid field option kind\")\n            o\n\n    let EncodeUnion (_: obj) (discr: string) (cases: (string * (string * string * (unit -> obj -> obj) * OptionalFieldKind)[])[]) : (unit -> 'T -> obj) =\n        ()\n        fun () x ->\n            if JS.TypeOf x ===. JS.Object && x !=. null then\n                let o = New []\n                let tag = x?(\"$\")\n                let tagName, fields = cases.[tag]\n                if JS.TypeOf discr = JS.Kind.String then o?(discr) <- tagName\n                fields |> Array.iter (fun (from, ``to``, enc, kind) ->\n                    match from with\n                    | null -> // inline record\n                        let record = enc () (x?(\"$0\"))\n                        JS.ForEach record (fun f -> o?(f) <- record?(f); false)\n                    | from -> // normal args\n                        match kind with\n                        | OptionalFieldKind.NotOption ->\n                            o?(``to``) <- enc () (x?(from))\n                        | OptionalFieldKind.NormalOption ->\n                            match x?(from) with\n                            | Some x -> o?(``to``) <- enc () x\n                            | None -> ()\n                        | _ -> failwith \"Invalid field option kind\")\n                o\n            else box x // [<Constant>]\n\n    let EncodeArray (encEl: (unit -> 'T -> obj)) : (unit -> 'T[] -> obj) =\n        ()\n        fun () (a: 'T[]) ->\n            let e = encEl()\n            box (Array.map e a)\n\n    let EncodeSet (encEl: (unit -> 'T -> obj)) : (unit -> Set<'T> -> obj) =\n        ()\n        fun () (s: Set<'T>) ->\n            let a : obj[] = [||]\n            let e = encEl()\n            s |> Set.iter (fun x -> a.JS.Push (e x) |> ignore)\n            box a\n\n    let EncodeStringMap (encEl:(unit -> 'T -> obj)) : (unit -> Map<string, 'T> -> obj) =\n        ()\n        fun () (m: Map<string, 'T>) ->\n            let o = New []\n            let e = encEl()\n            m |> Map.iter (fun k v -> o?(k) <- e v)\n            o\n\n    let EncodeArrayMap (encKey:(unit -> 'K -> obj)) (encEl:(unit -> 'V -> obj)) : (unit -> Map<'K, 'V> -> obj) =\n        ()\n        fun () (m: Map<'K, 'V>) ->\n            let a : obj[][] = [||]\n            let k = encKey()\n            let e = encEl()\n            m |> Map.iter (fun key el -> a.JS.Push([| [| k key; e el |] |]) |> ignore)\n            box a\n\n    let EncodeStringDictionary (encEl:(unit -> 'T -> obj)) : (unit -> Dictionary<string, 'T> -> obj) =\n        ()\n        fun () (d: Dictionary<string, 'T>) ->\n            let o = New []\n            let e = encEl()\n            for KeyValue(k, v) in d :> seq<_> do o?(k) <- e v\n            o\n\n    let EncodeArrayDictionary (encKey: (unit -> 'K -> obj)) (encEl: (unit -> 'V -> obj)) : (unit -> Dictionary<'K, 'V> -> obj) =\n        ()\n        fun () (d: Dictionary<'K, 'V>) ->\n            let a : obj[][] = [||]\n            let k = encKey()\n            let e = encEl()\n            for KeyValue(key, el) in d do a.JS.Push([| [| k key; e el |] |]) |> ignore\n            box a\n\n    let EncodeLinkedList (encEl:(unit -> 'T -> obj)) : (unit -> LinkedList<'T> -> obj) =\n        ()\n        fun () (d: LinkedList<'T>) ->\n            let o = Array<'T>()\n            let e = encEl()\n            for x in d :> seq<'T> do o.Push(e x) |> ignore\n            box o\n\n    let DecodeTuple (decs: (unit -> obj -> obj)[]) : (unit -> obj -> obj[]) =\n        As (EncodeTuple decs)\n\n    let DecodeDateTime() =\n        ()\n        fun () (x: obj) ->\n            if JS.HasOwnProperty x \"d\" then\n                Date(x?d: string).Self\n            else \n                Date(x :?> string).Self\n\n    let DecodeDateTimeOffset() =\n        ()\n        fun () (x: obj) ->\n            if JS.HasOwnProperty x \"d\" then\n                System.DateTimeOffset(Date(x?d: string).Self, System.TimeSpan.FromMinutes x?o)\n            else \n                System.DateTimeOffset(Date(x :?> string).Self, System.TimeSpan.Zero)\n\n    let DecodeList (decEl: (unit -> obj -> 'T)) : (unit -> obj -> list<'T>) =\n        ()\n        fun () (a : obj) ->\n            let e = decEl()\n            List.init (a :?> obj[]).Length (fun i -> e (a :?> obj[]).[i])\n\n    let DecodeSet (decEl: unit -> obj -> 'T) : (unit -> obj -> Set<'T>) =\n        ()\n        fun () (a : obj) ->\n            let e = decEl()\n            Set.ofArray(Array.map e (a :?> obj[]))\n\n    let DecodeRecord (t: obj) (fields: (string * (unit -> obj -> obj) * OptionalFieldKind)[]) : (unit -> obj -> 'T) =\n        ()\n        fun () (x: obj) ->\n            let o = if t ===. JS.Undefined then New [] else JS.New t\n            fields |> Array.iter (fun (name, dec, kind) ->\n                match kind with\n                | OptionalFieldKind.NotOption ->\n                    if JS.HasOwnProperty x name then\n                        o?(name) <- dec () x?(name)\n                    else failwith (\"Missing mandatory field: \" + name)\n                | OptionalFieldKind.NormalOption ->\n                    o?(name) <-\n                        if JS.HasOwnProperty x name\n                        then Some (dec () x?(name))\n                        else None\n                | OptionalFieldKind.MarkedOption ->\n                    if JS.HasOwnProperty x name then\n                        o?(name) <- (dec () x?(name))\n                | OptionalFieldKind.ErasedOption ->\n                    if x?(name) ===. JS.Undefined then\n                        o?(name) <- (dec () x?(name))\n                | _ -> failwith \"Invalid field option kind\")\n            o\n\n    let DecodeUnion (t: obj) (discr: string) (cases: (string * (string * string * (unit -> obj -> obj) * OptionalFieldKind)[])[]) : (unit -> obj -> 'T) =\n        ()\n        fun () (x: obj) ->\n            if JS.TypeOf x ===. JS.Object && x !=. null then\n                let o = if t ===. JS.Undefined then New [] else JS.New t\n                let tag =\n                    // [<NamedUnionCases(discr)>]\n                    if JS.TypeOf discr = JS.Kind.String then\n                        let tagName = x?(discr)\n                        cases |> Array.findIndex (fun (name, _) -> name = tagName)\n                    else // [<NamedUnionCases>]\n                        let r = ref JS.Undefined\n                        JS.ForEach discr (fun k ->\n                            if JS.HasOwnProperty x k then r := discr?(k); true else false)\n                        !r\n                o?(\"$\") <- tag\n                cases.[tag] |> snd |> Array.iter (fun (from, ``to``, dec, kind) ->\n                    match from with\n                    | null -> // inline record\n                        let r = dec () x\n                        // eliminate tag field if record deserializer is identity\n                        if As<bool> ``to`` then \n                            JS.Delete r discr\n                        o?(\"$0\") <- r\n                    | from -> // normal args\n                        match kind with\n                        | OptionalFieldKind.NotOption ->\n                            o?(from) <- dec () (x?(``to``))\n                        | OptionalFieldKind.NormalOption ->\n                            o?(from) <-\n                                if JS.HasOwnProperty x ``to``\n                                then Some (dec () x?(``to``))\n                                else None\n                        | _ -> failwith \"Invalid field option kind\")\n                o\n            else x :?> 'T // [<Constant>]\n\n    let DecodeArray (decEl :(unit -> obj -> 'T)) : (unit -> obj -> 'T[]) =\n        As (EncodeArray (As decEl))\n\n    let DecodeStringMap (decEl :(unit -> obj -> 'T)) : (unit -> obj -> Map<string, 'T>) =\n        ()\n        fun () (o: obj) ->\n            let m = ref Map.empty\n            let decEl = decEl ()\n            JS.ForEach o (fun k -> m := Map.add k (decEl o?(k)) !m; false)\n            !m\n\n    let DecodeArrayMap (decKey :(unit -> obj -> 'K)) (decEl :(unit -> obj -> 'V)) : (unit -> obj -> Map<'K, 'V>) =\n        ()\n        fun () (o: obj) ->\n            let decKey = decKey()\n            let decEl = decEl()\n            let mutable m = Map<'K, 'V> []\n            for k, v in o :?> (obj * obj)[] do m <- Map.add (decKey k) (decEl v) m\n            m\n\n    let DecodeStringDictionary (decEl: unit -> obj -> 'T) : (unit -> obj -> Dictionary<string, 'T>) =\n        ()\n        fun () (o: obj) ->\n            let d = System.Collections.Generic.Dictionary()\n            let decEl = decEl ()\n            JS.ForEach o (fun k -> d.Add(k, decEl o?(k)); false)\n            d\n\n    let DecodeArrayDictionary (decKey :(unit -> obj -> 'K)) (decEl :(unit -> obj -> 'V)) : (unit -> obj -> Dictionary<'K, 'V>) =\n        ()\n        fun () (o: obj) ->\n            let decKey = decKey()\n            let decEl = decEl()\n            let d = Dictionary<'K, 'V>()\n            for k, v in o :?> (obj * obj)[] do d.Add(decKey k, decEl v)\n            d\n\n    let DecodeLinkedList (decEl: unit -> obj -> 'T) : (unit -> obj -> LinkedList<'T>) =\n        ()\n        fun () (o: obj) ->\n            let l = LinkedList<'T>()\n            let decEl = decEl()\n            for x in o :?> obj[] do l.AddLast(decEl x) |> ignore\n            l\n\nmodule Macro =\n\n    module M = WebSharper.Core.Metadata\n    open WebSharper.Core.AST\n    module JI = WebSharper.Core.Json.Internal\n    type private BF = System.Reflection.BindingFlags\n\n    type Parameters =\n        {\n            Warnings : ResizeArray<string>\n            Dependencies : ResizeArray<M.Node>\n            Compilation : M.ICompilation\n        }\n\n    [<AutoOpen>]\n    module private Internals =\n\n        let cString s = !~ (Literal.String s)\n        let inline cInt i = !~ (Int i)\n\n        let mainJsonModule =\n            TypeDefinition {\n                FullName = \"WebSharper.Json\"\n                Assembly = \"WebSharper.Main\"\n            }\n        let mJson (comp: M.ICompilation) f args =\n            let m = comp.GetClassInfo(mainJsonModule).Value.Methods.Keys |> Seq.find (fun m -> m.Value.MethodName = f)\n            Call(None, NonGeneric mainJsonModule, NonGeneric m, args)\n\n        let (|T|) (t: TypeDefinition) = t.Value.FullName\n        let (|C|_|) (t: Type) =\n            match t with \n            | ConcreteType { Entity = e; Generics = g} -> Some (e, g)\n            | _ -> None\n\n        let providerType = \n            TypeDefinition {\n                FullName = \"WebSharper.ClientSideJson+Provider\"\n                Assembly = \"WebSharper.Web\"\n            }\n        let invoke (comp: M.ICompilation) isEnc n args = \n            let f = (if isEnc then \"Encode\" else \"Decode\") + n\n            let m = comp.GetClassInfo(providerType).Value.Methods.Keys |> Seq.find (fun m -> m.Value.MethodName = f)\n            Call(None, NonGeneric providerType, NonGeneric m, args)\n        let invokeId (comp: M.ICompilation) = \n            let m = comp.GetClassInfo(providerType).Value.Methods.Keys |> Seq.find (fun m -> m.Value.MethodName = \"Id\")\n            Call(None, NonGeneric providerType, NonGeneric m, [])\n\n        type EncodeResult = Choice<Expression, string, Type>\n\n        let (>>=) (x: EncodeResult) (f: Expression -> EncodeResult) =\n            match x with\n            | Choice1Of3 e -> f e\n            | _ -> x\n        let ok x = Choice1Of3 x : EncodeResult\n        let fail x = Choice2Of3 x : EncodeResult\n        let generic t = Choice3Of3 t : EncodeResult\n\n        let mapOk f x =\n            match x with\n            | Choice1Of3 x -> Choice1Of3 (f x) \n            | _ -> x\n\n        /// Returns None if MacroNeedsResolvedTypeArg.\n        let getEncoding name isEnc param (t: Type) : EncodeResult =\n            let warn msg = param.Warnings.Add msg\n            let addTypeDep td = param.Dependencies.Add (M.TypeNode td)\n            let comp = param.Compilation\n            let call = invoke comp isEnc\n            let ident = invokeId comp \n            let isIdent r =\n                match r with \n                | Choice1Of3 e when obj.ReferenceEquals(e, ident) -> true\n                | _ -> false\n            let rec encode t =\n                match t with\n                | ArrayType (t, 1)\n                | C (T \"System.Collections.Generic.List`1\", [t])\n                | C (T \"System.Collections.Generic.Queue`1\", [t])\n                | C (T \"System.Collections.Generic.Stack`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"Array\" [e])\n                | ArrayType _ ->\n                    fail \"JSON serialization for multidimensional arrays is not supported.\"\n                | VoidType\n                | C (T (\"Microsoft.FSharp.Core.Unit\"\n                            | \"System.Boolean\"\n                            | \"System.SByte\"   | \"System.Byte\"\n                            | \"System.Int16\"   | \"System.UInt16\"\n                            | \"System.Int32\"   | \"System.UInt32\"\n                            | \"System.Int64\"   | \"System.UInt64\"\n                            | \"System.Single\"  | \"System.Double\"\n                            | \"System.String\"  | \"System.Guid\"\n                            | \"WebSharper.Core.Json+Encoded\"), []) ->\n                    ok ident\n                | C (T \"System.Object\", []) ->\n                    if isEnc then \n                        fail \"JSON serialization for System.Object is not supported; only deserialization.\" \n                    else ok ident\n                | C (T \"Microsoft.FSharp.Collections.FSharpList`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"List\" [e])\n                | C (T \"Microsoft.FSharp.Collections.FSharpSet`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"Set\" [e])\n                | C (T \"Microsoft.FSharp.Collections.FSharpMap`2\", [k; t]) ->\n                    match k with\n                    | C (T \"System.String\", []) ->\n                        encode t >>= fun e -> \n                        ok (call \"StringMap\" [e])\n                    | _ ->\n                        encode k >>= fun k -> \n                        encode t >>= fun e -> \n                        ok (call \"ArrayMap\" [k; e])\n                | C (T \"System.Collections.Generic.Dictionary`2\", [k; t]) ->\n                    match k with\n                    | C (T \"System.String\", []) ->\n                        encode t >>= fun e ->\n                        ok (call \"StringDictionary\" [e])\n                    | _ ->\n                        encode k >>= fun k ->\n                        encode t >>= fun e ->\n                        ok (call \"ArrayDictionary\" [k; e])\n                | C (T \"System.Collections.Generic.LinkedList`1\", [t]) ->\n                    encode t >>= fun e ->\n                    ok (call \"LinkedList\" [e])\n                | TupleType (ts, _) ->\n                    ((fun es -> ok (call \"Tuple\" [NewArray es])), ts)\n                    ||> List.fold (fun k t ->\n                        fun es -> encode t >>= fun e -> k (e :: es))\n                    <| []\n                | C (T \"System.DateTime\", []) ->\n                    ok (call \"DateTime\" [])\n                | C (T \"System.DateTimeOffset\", []) ->\n                    ok (call \"DateTimeOffset\" [])\n                | C (td, args) ->                    \n                    let top = comp.AssemblyName.Replace(\".\",\"$\") + if isEnc then \"_JsonEncoder\" else \"_JsonDecoder\"\n                    let key = M.CompositeEntry [ M.StringEntry top; M.TypeEntry t ]\n                    match comp.GetMetadataEntries key with                    \n                    | M.StringEntry \"id\" :: _ ->\n                        ok ident\n                    | M.CompositeEntry [ M.TypeDefinitionEntry gtd; M.MethodEntry gm ] :: _ ->\n                        Lambda([], Call(None, NonGeneric gtd, NonGeneric gm, [])) |> ok\n                    | _ ->\n                        let gtd, gm, _ = comp.NewGenerated([top; \"j\"])\n                        let _, gv, va = comp.NewGenerated([top; \"_\" + \"v\"])\n                        comp.AddGeneratedCode(gv, Undefined)\n                        comp.AddMetadataEntry(key, M.CompositeEntry [ M.TypeDefinitionEntry gtd; M.MethodEntry gm ])\n                        ((fun es ->\n                            let enc = encRecType t args es\n                            if isIdent enc then\n                                comp.AddMetadataEntry(key, M.StringEntry \"id\")\n                                comp.AddGeneratedInline(gm, ident)\n                                enc\n                            else\n                                enc >>= fun e ->\n                                let v = Lambda([], Call (None, NonGeneric gtd, NonGeneric gv, []))\n                                let vn = Value (String va.Value.Head)\n                                let b = Lambda ([], Conditional(v, v, ItemSet(Global [top], vn, Application(e, [], NonPure, Some 0))))\n                                comp.AddGeneratedCode(gm, b)\n                                Lambda([], Call(None, NonGeneric gtd, NonGeneric gm, [])) |> ok\n                         ), args)\n                        ||> List.fold (fun k t es ->\n                            encode t >>= fun e -> k ((t, e) :: es))\n                        <| []\n                | ConcreteType _ -> failwith \"impossible\"\n                | FSharpFuncType _ -> \n                    fail (name + \": Cannot de/serialize a function value.\")\n                | ByRefType _ ->\n                    fail (name + \": Cannot de/serialize a byref value.\")\n                | LocalTypeParameter\n                | StaticTypeParameter _ \n                | TypeParameter _ ->\n                    generic t\n            // Encode a type that might be recursively defined\n            and encRecType t targs args =\n                let td = t.TypeDefinition\n                match comp.GetCustomTypeInfo td with\n                | M.EnumInfo _ -> ok ident\n                | M.FSharpRecordInfo fields ->\n                    let fieldEncoders =\n                        fields\n                        |> List.map (fun f ->\n                            if Option.isSome f.DateTimeFormat then\n                                warn (sprintf \"Warning: This record field has a custom DateTime format: %s.%s. \\\n                                    Client-side JSON serialization does not support custom DateTime formatting. \\\n                                    This field will be serialized using ISO format.\"\n                                    f.RecordFieldType.TypeDefinition.Value.FullName f.Name)\n                            let t, optionKind =\n                                match f.RecordFieldType with\n                                | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\" ->\n                                    if f.Optional then p, OptionalFieldKind.MarkedOption\n                                    else p, OptionalFieldKind.NormalOption\n                                | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"WebSharper.JavaScript.Optional`1\" ->\n                                    p, OptionalFieldKind.ErasedOption\n                                | t ->    \n                                    t, OptionalFieldKind.NotOption\n                            f.JSName, optionKind, encode (t.SubstituteGenerics (Array.ofList targs))\n                        )  \n                    let pr =\n                        match comp.GetClassInfo td with\n                        | Some cls -> \n                            addTypeDep td \n                            if cls.HasWSPrototype then\n                                GlobalAccess cls.Address.Value\n                            else Undefined\n                        | _ -> Undefined\n                    if pr = Undefined && fieldEncoders |> List.forall (fun (_, fo, fe) ->\n                        fo <> OptionalFieldKind.NormalOption && isIdent fe\n                    )\n                    then ok ident\n                    else\n                        ((fun es ->\n                            let es, tts = List.unzip es\n                            ok (call \"Record\" [pr; NewArray es])\n                            ), fieldEncoders)\n                        ||> List.fold (fun k (fn, fo, fe) es ->                     \n                                fe >>= fun e ->\n                                k ((NewArray [cString fn; e; cInt (int fo)], t) :: es))\n                        <| []\n                // TODO: handle nested case type (possible when using from C#)\n                | M.FSharpUnionInfo u ->\n                    let tryGetInlinableRecordInfo (uci: M.FSharpUnionCaseInfo) =\n                        match uci.Kind with \n                        | M.NormalFSharpUnionCase [f] when f.Name = \"Item\" ->\n                            let rec inl uft =\n                                match uft with\n                                | ConcreteType { Entity = fTd } as ft ->\n                                    match comp.GetCustomTypeInfo fTd with\n                                    | M.FSharpRecordInfo fRec -> Some (ft, fRec)\n                                    | _ -> None\n                                | TypeParameter i -> inl (targs.[i])\n                                | _ -> None\n                            inl f.UnionFieldType\n                        | _ -> None\n                    let isOption (t: Type) =\n                        match t with\n                        | ConcreteType { Entity = e } ->\n                            e.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\"\n                        | _ -> false\n                    let discr =\n                        match u.NamedUnionCases with\n                        | None -> JI.StandardField\n                        | Some None -> \n                            let allCases =\n                                u.Cases |> Seq.mapi (fun i uci ->\n                                    i,\n                                    match tryGetInlinableRecordInfo uci with\n                                    | Some (_, fRec) ->\n                                        fRec |> Seq.filter (fun rf -> not (isOption rf.RecordFieldType))\n                                        |> Seq.map (fun rf -> rf.JSName) |> Set.ofSeq\n                                    | None ->\n                                        match uci.Kind with \n                                        | M.NormalFSharpUnionCase fs ->\n                                            fs\n                                            |> List.choose (fun f ->\n                                                if isOption f.UnionFieldType then None else Some f.Name)\n                                            |> Set.ofList\n                                        | _ -> Set.empty\n                                )\n                                |> Map.ofSeq\n                            let findDistinguishingCase (cases: Map<int, Set<string>>) =\n                                cases\n                                |> Map.tryPick (fun t fs ->\n                                    let allOtherFields =\n                                        allCases\n                                        |> Seq.choose (fun (KeyValue(t', fs)) ->\n                                            if t = t' then None else Some fs)\n                                        |> Set.unionMany\n                                    let uniqueCases = fs - allOtherFields\n                                    if Set.isEmpty uniqueCases then\n                                        None\n                                    else Some (Seq.head uniqueCases, t)\n                                )\n                            let rec buildTable acc cases =\n                                if Map.isEmpty cases then acc else\n                                match findDistinguishingCase cases with\n                                | None -> failwithf \"No decoder for %s\" t.AssemblyQualifiedName\n                                | Some (name, tag) ->\n                                    buildTable\n                                        <| (name, tag) :: acc\n                                        <| Map.remove tag cases\n                            buildTable [] allCases |> JI.NoField\n                        | Some (Some n) -> JI.NamedField n\n                    let cases = u.Cases\n                    ((0, fun cases ->\n                        let cases = NewArray cases\n                        let discr =\n                            match discr with\n                            | JI.NoField discrFields ->\n                                discrFields\n                                |> List.map (fun (name, id) -> name, cInt id)\n                                |> Object\n                            | JI.StandardField -> cString \"$\"\n                            | JI.NamedField n -> cString n\n                        let tn =\n                            match comp.GetClassInfo td with\n                            | Some cls -> \n                                addTypeDep td\n                                if cls.HasWSPrototype then\n                                    GlobalAccess cls.Address.Value\n                                else\n                                    Undefined\n                            | _ -> Undefined\n                        ok (call \"Union\" [tn; discr; cases])\n                        ), cases)\n                    ||> List.fold (fun (i, k) case ->\n                        i + 1, fun es ->\n                            match tryGetInlinableRecordInfo case with\n                            | Some (ft, _) -> \n                                let tag =\n                                    match discr with\n                                    | JI.StandardField -> cInt i\n                                    | _ -> cString (match case.JsonName with Some n -> n | _ -> case.Name)\n                                let encF = encode ft \n                                let elimTag =\n                                    if isIdent encF then !~(Bool true) else !~Null\n                                encF >>= fun e ->\n                                k (NewArray [tag; NewArray [NewArray [!~Null; elimTag; e]]] :: es)\n                            | _ ->\n                            match case.Kind with\n                            | M.NormalFSharpUnionCase fields ->\n                                ((0, fun argNames ->\n                                    let tag =\n                                        match u.NamedUnionCases with\n                                        | None -> cInt i\n                                        | _ -> cString (match case.JsonName with Some n -> n | _ -> case.Name)\n                                    k (NewArray [tag; NewArray argNames] :: es)\n                                    ), fields)\n                                ||> List.fold (fun (j, k) f -> //(argName, argT, argFlags) ->\n                                    if Option.isSome f.DateTimeFormat then\n                                        warn (sprintf \"Warning: This union case field has a custom DateTime format: %s.%s [%s]. \\\n                                            Client-side JSON serialization does not support custom DateTime formatting. \\\n                                            This field will be serialized using ISO format.\"\n                                            f.UnionFieldType.TypeDefinition.Value.FullName case.Name f.Name)\n                                    let argT, optionKind =\n                                        match f.UnionFieldType with\n                                        | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\" ->\n                                            p, cInt (int OptionalFieldKind.NormalOption)\n                                        | t ->    \n                                            t, cInt (int OptionalFieldKind.NotOption)\n                                    j + 1, fun es ->\n                                        encode (argT.SubstituteGenerics (Array.ofList targs)) >>= fun e ->\n                                        k (NewArray [cString (\"$\" + string j); cString f.Name; e; optionKind] :: es))\n                                |> snd\n                                <| []\n                            | M.SingletonFSharpUnionCase ->\n                                let tag =\n                                    match u.NamedUnionCases with\n                                    | None -> cInt i\n                                    | _ -> cString (match case.JsonName with Some n -> n | _ -> case.Name)\n                                k (NewArray [tag; NewArray []] :: es)\n                            | M.ConstantFSharpUnionCase _ -> k (!~Null :: es)\n                    )\n                    |> snd\n                    <| []\n                | _ -> \n                    match comp.GetClassInfo td with\n                    | Some cls ->\n                        let fieldEncoders =\n                            cls.Fields.Values\n                            |> Seq.choose (fun (f, _, ft) ->\n                                let jsNameTypeAndOption =\n                                    let isOption name isMarked =\n                                        match ft with\n                                        | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"Microsoft.FSharp.Core.FSharpOption`1\" ->\n                                            if isMarked then\n                                                Some (name, p, OptionalFieldKind.MarkedOption) \n                                            else\n                                                Some (name, p, OptionalFieldKind.NormalOption) \n                                        | ConcreteType { Entity = d; Generics = [p] } when d.Value.FullName = \"WebSharper.JavaScript.Optional`1\" ->\n                                            Some (name, p, OptionalFieldKind.ErasedOption) \n                                        | ft ->    \n                                            Some (name, ft, OptionalFieldKind.NotOption)\n                                    match f with\n                                    | M.InstanceField n -> isOption n false\n                                    | M.IndexedField i -> isOption (string i) false\n                                    | M.OptionalField n -> isOption n true\n                                    | M.StaticField _ -> None\n                                jsNameTypeAndOption |> Option.map (fun (jsName, t, optionKind) ->\n                                    jsName, optionKind, encode (t.SubstituteGenerics (Array.ofList targs))\n                                )\n                            ) |> List.ofSeq\n                        let pr =\n                            match comp.GetClassInfo td with\n                            | Some cls -> \n                                addTypeDep td \n                                if cls.HasWSPrototype then\n                                    GlobalAccess cls.Address.Value\n                                else Undefined\n                            | _ -> Undefined\n                        if pr = Undefined && fieldEncoders |> List.forall (fun (_, fo, fe) ->\n                            fo <> OptionalFieldKind.NormalOption && isIdent fe\n                        )\n                        then ok ident\n                        else\n                            ((fun es ->\n                                let es, tts = List.unzip es\n                                ok (call \"Record\" [pr; NewArray es])\n                                ), fieldEncoders)\n                            ||> List.fold (fun k (fn, fo, fe) es ->                     \n                                    fe >>= fun e ->\n                                    k ((NewArray [cString fn; e; cInt (int fo)], t) :: es))\n                            <| []\n                    | _ ->\n                        fail (name + \": Type not supported: \" + t.TypeDefinition.Value.FullName)\n            encode t\n\n        let encodeLambda name param t =\n            getEncoding name true param t\n            |> mapOk (fun x -> Application(x, [], Pure, Some 0))\n\n        let encode name param t arg =\n            encodeLambda name param t\n            |> mapOk (fun x -> Application(x, [arg], Pure, Some 1))\n\n        let decodeLambda name param t =\n            getEncoding name false param t\n            |> mapOk (fun x -> Application(x, [], Pure, Some 0))\n\n        let decode name param t arg =\n            decodeLambda name param t\n            |> mapOk (fun x -> Application(x, [arg], Pure, Some 1))\n\n    let Encode param t arg =\n        // ENCODE()(arg)\n        encode \"Encode\" param t arg\n\n    let EncodeLambda warn t =\n        // ENCODE()\n        encodeLambda \"EncodeLambda\" warn t\n\n    let Serialize param t arg =\n        // JSON.stringify(ENCODE()(arg))\n        encode \"Serialize\" param t arg\n        |> mapOk (fun x -> mJson param.Compilation \"Stringify\" [x])\n\n    let SerializeLambda param t =\n        encodeLambda \"SerializeLambda\" param t\n        |> mapOk (fun x ->\n            let enc = Id.New(mut = false)\n            let arg = Id.New(mut = false)\n            // let enc = ENCODE() in fun arg -> JSON.stringify(enc(arg))\n            Let(enc, x,\n                Lambda([arg],\n                    mJson param.Compilation \"Stringify\" [Application(Var enc, [Var arg], Pure, Some 1)])))\n\n    let Decode param t arg =\n        // DECODE()(arg)\n        decode \"Decode\" param t arg\n\n    let DecodeLambda param t =\n        // DECODE()\n        decodeLambda \"DecodeLambda\" param t\n\n    let Deserialize param t arg =\n        // DECODE()(JSON.parse(arg))\n        decode \"Deserialize\" param t (mJson param.Compilation \"Parse\" [arg])\n\n    let DeserializeLambda param t =\n        decodeLambda \"DeserializeLambda\" param t\n        |> mapOk (fun x ->\n            let dec = Id.New(mut = false)\n            let arg = Id.New(mut = false)\n            // let dec = DECODE() in fun arg -> dec(JSON.parse(arg))\n            Let(dec, x,\n                Lambda([arg],\n                    Application(Var dec, [mJson param.Compilation \"Parse\" [Var arg]], Pure, Some 1))))\n\n    type SerializeMacro() =\n        inherit WebSharper.Core.Macro()\n\n        static let rec last = function\n            | [x] -> x\n            | x :: l -> last l\n            | _ -> failwith \"\"\n\n        override this.TranslateCall(c) =\n            let f =\n                match c.Method.Entity.Value.MethodName with\n                | \"Encode\" -> Encode\n                | \"Decode\" -> Decode\n                | \"Serialize\" -> Serialize\n                | \"Deserialize\" -> Deserialize\n                | _ -> failwith \"Invalid macro invocation\"\n            let param = \n                {\n                    Compilation = c.Compilation\n                    Warnings = ResizeArray()\n                    Dependencies = ResizeArray()\n                }\n            let res =\n                match f param c.Method.Generics.Head (last c.Arguments) with\n                | Choice1Of3 x -> WebSharper.Core.MacroOk x\n                | Choice2Of3 e -> WebSharper.Core.MacroError e\n                | Choice3Of3 t -> WebSharper.Core.MacroNeedsResolvedTypeArg t\n            let resWithWarnings =\n                if param.Warnings.Count > 0 then\n                    param.Warnings |> Seq.fold (fun res msg -> \n                        WebSharper.Core.MacroWarning (msg, res)) res\n                else res\n            if param.Dependencies.Count > 0 then\n                WebSharper.Core.MacroDependencies (List.ofSeq param.Dependencies, resWithWarnings)\n            else resWithWarnings    \n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Web\n\nopen WebSharper\nopen WebSharper.Core\n\nmodule M = WebSharper.Core.Metadata\nmodule R = WebSharper.Core.AST.Reflection\n\n/// A server-side control that adds a runtime dependency on a given resource.\ntype Require (t: System.Type, [<System.ParamArray>] parameters: obj[]) =\n#if NET461 // ASP.NET: Control\n    inherit System.Web.UI.Control()\n#endif\n\n    let t = AST.Reflection.ReadTypeDefinition t\n    let req = \n        [M.ResourceNode (t, \n            if parameters.Length = 0 then None else Some(M.ParameterObject.OfObj parameters))]\n\n    interface INode with\n        member this.Write(_, _) = ()\n        member this.IsAttribute = false\n\n    interface IRequiresResources with\n        member this.Encode(_, _) = []\n        member this.Requires(_) = req :> _\n\n#if NET461 // ASP.NET: Control\n    override this.OnLoad _ =\n        this.ID <-\n            ScriptManager.Find(base.Page)\n                .Register(None, this, Shared.Metadata, Shared.Json)\n\n    override this.Render _ = ()\n#endif\n\n/// A server-side control that adds a runtime dependency on a given resource.\ntype Require<'T when 'T :> Resources.IResource>() =\n    inherit Require(typeof<'T>)\n\n/// A base class for defining custom ASP.NET controls. Inherit from this class,\n/// override the Body property and use the new class as a Server ASP.NET\n/// control in your application.\n[<AbstractClass>]\ntype Control() =\n#if NET461 // ASP.NET: Control\n    inherit System.Web.UI.Control()\n#endif\n\n    static let gen = System.Random()\n    [<System.NonSerialized>]\n    let mutable id = System.String.Format(\"ws{0:x}\", gen.Next().ToString())\n\n#if NET461 // ASP.NET: Control\n    override this.ID\n#else\n    member this.ID\n#endif\n        with get () = id\n        and set x = id <- x\n\n#if NET461 // ASP.NET: Control\n    override this.OnLoad _ =\n        this.ID <-\n            ScriptManager.Find(base.Page)\n                .Register(Some id, this, Shared.Metadata, Shared.Json)\n#endif\n\n    interface INode with\n        member this.IsAttribute = false\n        member this.Write (_, w) =\n            w.Write(\"\"\"<div id=\"{0}\"></div>\"\"\", this.ID)\n\n    [<JavaScript>]\n    abstract member Body : IControlBody\n\n    interface IControl with\n        [<JavaScript>]\n        member this.Body = this.Body\n        member this.Id = this.ID\n\n    member this.GetBodyNode() =\n        let t = this.GetType()\n        let t = if t.IsGenericType then t.GetGenericTypeDefinition() else t\n        let m = t.GetProperty(\"Body\").GetGetMethod()\n        M.MethodNode (R.ReadTypeDefinition t, R.ReadMethod m)\n\n    interface IRequiresResources with\n        member this.Requires(_) =\n            this.GetBodyNode() |> Seq.singleton\n\n        member this.Encode(meta, json) =\n            [this.ID, json.GetEncoder(this.GetType()).Encode this]\n\n#if NET461 // ASP.NET: Control\n    override this.Render writer =\n#else\n    member this.Render (writer: WebSharper.Core.Resources.HtmlTextWriter) =\n#endif\n        writer.WriteLine(\"<div id='{0}'></div>\", this.ID)\n\nopen WebSharper.JavaScript\nopen Microsoft.FSharp.Quotations\nopen Microsoft.FSharp.Quotations.Patterns\n\nmodule ClientSideInternals =\n\n    module M = WebSharper.Core.Metadata\n    module R = WebSharper.Core.AST.Reflection\n    module J = WebSharper.Core.Json\n    module P = FSharp.Quotations.Patterns\n\n    let getLocation' (q: Expr) =\n        let (|Val|_|) e : 't option =\n            match e with\n            | Quotations.Patterns.Value(:? 't as v,_) -> Some v\n            | _ -> None\n        let l =\n            q.CustomAttributes |> Seq.tryPick (function\n                | NewTuple [ Val \"DebugRange\";\n                             NewTuple [ Val (file: string)\n                                        Val (startLine: int)\n                                        Val (startCol: int)\n                                        Val (endLine: int)\n                                        Val (endCol: int) ] ] ->\n                    Some (sprintf \"%s: %i.%i-%i.%i\" file startLine startCol endLine endCol)\n                | _ -> None)\n        defaultArg l \"(no location)\"\n\n    let (|Val|_|) e : 't option =\n        match e with\n        | Quotations.Patterns.Value(:? 't as v,_) -> Some v\n        | _ -> None\n\n    let getLocation (q: Expr) =\n        q.CustomAttributes |> Seq.tryPick (function\n            | P.NewTuple [ Val \"DebugRange\";\n                           P.NewTuple [ Val (file: string)\n                                        Val (startLine: int)\n                                        Val (startCol: int)\n                                        Val (endLine: int)\n                                        Val (endCol: int) ] ] ->\n                ({\n                    FileName = System.IO.Path.GetFileName(file)\n                    Start = (startLine, startCol)\n                    End = (endLine, endCol)\n                } : WebSharper.Core.AST.SourcePos)\n                |> Some\n            | _ -> None)\n\n    let rec findArgs (env: Set<string>) (setArg: string -> obj -> unit) (q: Expr) =\n        match q with\n        | P.ValueWithName (v, _, n) when not (env.Contains n) -> setArg n v\n        | P.AddressOf q\n        | P.Coerce (q, _)\n        | P.FieldGet (Some q, _)\n        | P.QuoteRaw q\n        | P.QuoteTyped q\n        | P.VarSet (_, q)\n        | P.WithValue (_, _, q)\n        | P.TupleGet (q, _)\n        | P.TypeTest (q, _)\n        | P.UnionCaseTest (q, _)\n            -> findArgs env setArg q\n        | P.AddressSet (q1, q2)\n        | P.Application (q1, q2)\n        | P.Sequential (q1, q2)\n        | P.TryFinally (q1, q2)\n        | P.WhileLoop (q1, q2)\n            -> findArgs env setArg q1; findArgs env setArg q2\n        | P.PropertyGet (q, _, qs)\n        | P.Call (q, _, qs) ->\n            Option.iter (findArgs env setArg) q\n            List.iter (findArgs env setArg) qs\n        | P.FieldSet (q1, _, q2) ->\n            Option.iter (findArgs env setArg) q1; findArgs env setArg q2\n        | P.ForIntegerRangeLoop (v, q1, q2, q3) ->\n            findArgs env setArg q1\n            findArgs env setArg q2\n            findArgs (Set.add v.Name env) setArg q3\n        | P.IfThenElse (q1, q2, q3)\n            -> findArgs env setArg q1; findArgs env setArg q2; findArgs env setArg q3\n        | P.Lambda (v, q) ->\n            findArgs (Set.add v.Name env) setArg q\n        | P.Let (v, q1, q2) ->\n            findArgs env setArg q1\n            findArgs (Set.add v.Name env) setArg q2\n        | P.LetRecursive (vqs, q) ->\n            let vs, qs = List.unzip vqs\n            let env = (env, vs) ||> List.fold (fun env v -> Set.add v.Name env)\n            List.iter (findArgs env setArg) qs\n            findArgs env setArg q\n        | P.NewObject (_, qs)\n        | P.NewRecord (_, qs)\n        | P.NewTuple qs\n        | P.NewUnionCase (_, qs)\n        | P.NewArray (_, qs) ->\n            List.iter (findArgs env setArg) qs\n        | P.NewDelegate (_, vs, q) ->\n            let env = (env, vs) ||> List.fold (fun env v -> Set.add v.Name env)\n            findArgs env setArg q\n        | P.PropertySet (q1, _, qs, q2) ->\n            Option.iter (findArgs env setArg) q1\n            List.iter (findArgs env setArg) qs\n            findArgs env setArg q2\n        | P.TryWith (q, v1, q1, v2, q2) ->\n            findArgs env setArg q\n            findArgs (Set.add v1.Name env) setArg q1\n            findArgs (Set.add v2.Name env) setArg q2\n        | _ -> ()\n    \n    let internal compileClientSide (meta: M.Info) (reqs: list<M.Node>) (q: Expr) : (obj[] * _) =\n        let rec compile (reqs: list<M.Node>) (q: Expr) =\n            match getLocation q with\n            | Some p ->\n                match meta.Quotations.TryGetValue(p) with\n                | false, _ ->\n                    let ex =\n                        meta.Quotations.Keys\n                        |> Seq.map (sprintf \"  %O\")\n                        |> String.concat \"\\n\"\n                    failwithf \"Failed to find compiled quotation at position %O\\nExisting ones:\\n%s\" p ex\n                | true, (declType, meth, argNames) ->\n                    match meta.Classes.TryGetValue declType with\n                    | false, _ -> failwithf \"Error in ClientSide: Couldn't find JavaScript address for method %s.%s\" declType.Value.FullName meth.Value.MethodName\n                    | true, c ->\n                        let argIndices = Map (argNames |> List.mapi (fun i x -> x, i))\n                        let args = Array.create argNames.Length null\n                        let reqs = ref (M.MethodNode (declType, meth) :: M.TypeNode declType :: reqs)\n                        let setArg (name: string) (value: obj) =\n                            let i = argIndices.[name]\n                            if isNull args.[i] then\n                                args.[i] <-\n                                    match value with\n                                    | :? Expr as q ->\n                                        failwith \"Error in ClientSide: Spliced expressions are not allowed in InlineControl\"\n                                    | value ->\n                                        let typ = value.GetType ()\n                                        reqs := M.TypeNode (WebSharper.Core.AST.Reflection.ReadTypeDefinition typ) :: !reqs\n                                        value\n                        if not (List.isEmpty argNames) then\n                            findArgs Set.empty setArg q\n                        args, !reqs\n            | None -> failwithf \"Failed to find location of quotation: %A\" q\n        compile reqs q \n\n    type private FSV = Reflection.FSharpValue\n\n    let internal compileClientSideFallback (elt: Expr) = \n        let declType, meth, args, fReqs, subs =\n            let elt =\n                match elt with\n                | Coerce (e, _) -> e\n                | e -> e\n            let rec get subs expr =\n                match expr with\n                | PropertyGet(None, p, args) ->\n                    let m = p.GetGetMethod(true)\n                    let dt = R.ReadTypeDefinition p.DeclaringType\n                    let meth = R.ReadMethod m\n                    dt, meth, args, [M.MethodNode (dt, meth)], subs\n                | Call(None, m, args) ->\n                    let dt = R.ReadTypeDefinition m.DeclaringType\n                    let meth = R.ReadMethod m\n                    dt, meth, args, [M.MethodNode (dt, meth)], subs\n                | Let(var, value, body) ->\n                    get (subs |> Map.add var value) body\n                | e -> failwithf \"Wrong format for InlineControl at %s: expected global value or function access, got: %A\" (getLocation' elt) e\n            get Map.empty elt\n        let args, argReqs =\n            args\n            |> List.mapi (fun i value ->\n                let rec get expr =\n                    match expr with\n                    | Value (v, t) ->\n                        let v = match v with null -> WebSharper.Core.Json.Internal.MakeTypedNull t | _ -> v\n                        v, M.TypeNode (R.ReadTypeDefinition t)\n                    | TupleGet(v, i) ->\n                        let v, n = get v\n                        FSV.GetTupleField(v, i), n\n                    | Var v when subs.ContainsKey v ->\n                        get subs.[v]   \n                    | _ -> failwithf \"Wrong format for InlineControl at %s: argument #%i is not a literal or a local variable\" (getLocation' elt) (i+1)\n                get value\n            )\n            |> List.unzip\n        let args = Array.ofList args\n        args, declType, meth, fReqs @ argReqs\n\nopen ClientSideInternals\n\n/// Implements a web control based on a quotation-wrapped top-level body.\n/// Use the function ClientSide or ctx.ClientSide to create an InlineControl.\n[<CompiledName \"FSharpInlineControl\">]\ntype InlineControl<'T when 'T :> IControlBody>(elt: Expr<'T>) =\n    inherit Control()\n\n    [<System.NonSerialized>]\n    let elt = elt\n\n    let mutable args = [||]\n    let mutable funcName = [||]\n\n    [<JavaScript>]\n    override this.Body =\n        let f = Array.fold (?) JS.Window funcName\n        As<Function>(f).ApplyUnsafe(null, args) :?> _\n\n    interface IRequiresResources with\n        member this.Requires(meta) =\n            let declType, meth, reqs =\n                match getLocation elt with\n                | None -> failwith \"Failed to find location of quotation\"\n                | Some p ->\n                    match meta.Quotations.TryGetValue p with\n                    | true, (ty, m, _) ->\n                        let argVals, deps = compileClientSide meta [] elt\n                        args <- argVals\n                        ty, m, deps\n                    | false, _ ->\n                        let argVals, ty, m, deps = compileClientSideFallback elt\n                        args <- argVals\n                        ty, m, deps\n\n            // set funcName\n            let fail() =\n                failwithf \"Error in InlineControl at %s: Couldn't find translation of method %s.%s. The method or type should have JavaScript attribute or a proxy, and the assembly needs to be compiled with WsFsc.exe\" \n                    (getLocation' elt) declType.Value.FullName meth.Value.MethodName\n            match meta.Classes.TryFind declType with\n            | None -> fail()\n            | Some cls ->\n                match cls.Methods.TryFind meth with\n                | Some (M.Static a, _, _) ->\n                    funcName <- Array.ofList (List.rev a.Value)\n                | Some _ ->\n                    failwithf \"Error in InlineControl at %s: Method %s.%s must be static and not inlined\"\n                        (getLocation' elt) declType.Value.FullName meth.Value.MethodName\n                | None -> fail()\n\n            this.GetBodyNode() :: reqs |> Seq.ofList\n\n        member this.Encode(meta, json) =\n            [this.ID, json.GetEncoder(this.GetType()).Encode this]\n\n\nopen System\nopen System.Reflection\nopen System.Linq.Expressions\n\n// TODO: test in arguments: needs .NET 4.5\n// open System.Runtime.CompilerServices\n//[<CallerFilePath; Optional>] sourceFilePath \n//[<CallerLineNumber; Optional>] sourceLineNumber\n[<CompiledName \"InlineControl\">]\ntype CSharpInlineControl(elt: System.Linq.Expressions.Expression<Func<IControlBody>>) =\n    inherit Control()\n\n    [<System.NonSerialized>]\n    let elt = elt\n\n    static let ctrlReq = M.TypeNode (R.ReadTypeDefinition typeof<InlineControl<IControlBody>>)\n\n    [<System.NonSerialized>]\n    let bodyAndReqs =\n        let reduce (e: Expression) = if e.CanReduce then e.Reduce() else e\n        let declType, meth, args, fReqs =\n            match reduce elt.Body with\n            | :? MemberExpression as e ->\n                match e.Member with\n                | :? PropertyInfo as p ->\n                    let m = p.GetGetMethod(true)\n                    let dt = R.ReadTypeDefinition p.DeclaringType\n                    let meth = R.ReadMethod m\n                    dt, meth, [], [M.MethodNode (dt, meth)]\n                | _ -> failwith \"member must be a property\"\n            | :? MethodCallExpression as e -> \n                let m = e.Method\n                let dt = R.ReadTypeDefinition m.DeclaringType\n                let meth = R.ReadMethod m\n                dt, meth, e.Arguments |> List.ofSeq, [M.MethodNode (dt, meth)]\n            | e -> failwithf \"Wrong format for InlineControl: expected global value or function access, got: %A\"  e\n        let args, argReqs =\n            args\n            |> List.mapi (fun i a -> \n                let rec get needType (a: Expression) =\n                    match reduce a with\n                    | :? ConstantExpression as e ->\n                        let v = match e.Value with null -> WebSharper.Core.Json.Internal.MakeTypedNull e.Type | _ -> e.Value\n                        v, if needType then M.TypeNode (R.ReadTypeDefinition e.Type) else M.EntryPointNode\n                    | :? MemberExpression as e ->\n                        let o = \n                            match e.Expression with\n                            | null -> null\n                            | ee -> fst (get false ee)\n                        match e.Member with\n                        | :? FieldInfo as f ->\n                            f.GetValue(o), if needType then M.TypeNode (R.ReadTypeDefinition f.FieldType) else M.EntryPointNode\n                        | :? PropertyInfo as p ->\n                            if p.GetIndexParameters().Length > 0 then\n                                failwithf \"Wrong format for InlineControl in argument #%i, indexed property not allowed\" (i+1)\n                            p.GetValue(o, null), if needType then M.TypeNode (R.ReadTypeDefinition p.PropertyType) else M.EntryPointNode\n                        | m -> failwithf \"Wrong format for InlineControl in argument #%i, member access not allowed: %s\" (i+1) (m.GetType().Name)\n                    | a -> failwithf \"Wrong format for InlineControl in argument #%i, expression type: %s\" (i+1) (a.GetType().Name)\n                get true a\n            )\n            |> List.unzip\n        let args = Array.ofList args\n        let reqs = ctrlReq :: fReqs @ argReqs\n        args, (declType, meth, reqs)\n\n    let args = fst bodyAndReqs\n    let mutable funcName = [||]\n\n    [<JavaScript>]\n    override this.Body =\n        let f = Array.fold (?) JS.Window funcName\n        As<Function>(f).ApplyUnsafe(null, args) :?> _\n\n    interface IRequiresResources with\n        member this.Encode(meta, json) =\n            if funcName.Length = 0 then\n                let declType, meth, reqs = snd bodyAndReqs\n                let fail() =\n                    failwithf \"Error in InlineControl: Couldn't find translation of method %s.%s. The method or type should have JavaScript attribute or a proxy, and the project file needs to include WebSharper.CSharp.targets\" \n                        declType.Value.FullName meth.Value.MethodName\n                match meta.Classes.TryFind declType with\n                | None -> fail()\n                | Some cls ->\n                    match cls.Methods.TryFind meth with\n                    | Some (M.Static a, _, _) ->\n                        funcName <- Array.ofList (List.rev a.Value)\n                    | Some _ -> \n                        failwithf \"Error in InlineControl: Method %s.%s must be static and not inlined\"\n                            declType.Value.FullName meth.Value.MethodName\n                    | None -> fail()\n            [this.ID, json.GetEncoder(this.GetType()).Encode this]\n\n        member this.Requires(_) =\n            let _, _, reqs = snd bodyAndReqs \n            this.GetBodyNode() :: reqs |> Seq.ofList\n\nnamespace WebSharper\n\n[<AutoOpen>]\nmodule WebExtensions =\n\n    open Microsoft.FSharp.Quotations\n    open WebSharper.Web\n\n    /// Embed the given client-side control body in a server-side control.\n    /// The client-side control body must be an implicit or explicit quotation expression.\n    /// It can capture local variables, of the same types which are serializable by WebSharper as RPC results.\n    let ClientSide ([<JavaScript; ReflectedDefinition>] e: Expr<#IControlBody>) =\n        new InlineControl<_>(e)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Sitelets\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.JQuery\nopen System.Collections.Generic\nopen System.Text\n\n#nowarn \"64\" // type parameter renaming warnings \n\n[<NamedUnionCases \"result\"; RequireQualifiedAccess>]\ntype ParseRequestResult<'T> =\n    | [<CompiledName \"success\">]\n      Success of endpoint: 'T\n    | [<CompiledName \"invalidMethod\">]\n      InvalidMethod of endpoint: 'T * ``method``: string\n    | [<CompiledName \"invalidJson\">]\n      InvalidJson of endpoint: 'T\n    | [<CompiledName \"missingQueryParameter\">]\n      MissingQueryParameter of endpoint: 'T * queryParam: string\n    | [<CompiledName \"missingFormData\">]\n      MissingFormData of endpoint: 'T * formFieldName: string\n\n    member this.Value =\n        match this with\n        | Success a\n        | InvalidMethod (a, _)\n        | InvalidJson a\n        | MissingQueryParameter (a, _)\n        | MissingFormData (a, _) -> a\n\n    [<System.Obsolete \"Use Value instead\">]\n    member this.Action = this.Value\n\n[<System.Obsolete \"Use ParseRequestResult instead of ActionEncoding.DecodeResult\">]\n/// For back-compatibility only, use ParseRequestResult instead of ActionEncoding.DecodeResult\nmodule ActionEncoding =\n\n    type DecodeResult<'T> = ParseRequestResult<'T>\n\n    let Success endpoint = ParseRequestResult.Success endpoint\n    let InvalidMethod (endpoint, ``method``) = ParseRequestResult.InvalidMethod(endpoint, ``method``)\n    let InvalidJson endpoint = ParseRequestResult.InvalidJson endpoint\n    let MissingQueryParameter (endpoint, queryParam) = ParseRequestResult.MissingQueryParameter(endpoint, queryParam)\n    let MissingFormData (endpoint, formFieldName) = ParseRequestResult.MissingFormData(endpoint, formFieldName)\n\nmodule StringEncoding =\n\n    [<JavaScript>]\n    let isUnreserved isLast c =\n        match c with\n        | '-' | '_' -> true\n        | '.' -> not isLast\n        | c when c >= 'A' && c <= 'Z' -> true\n        | c when c >= 'a' && c <= 'z' -> true\n        | c when c >= '0' && c <= '9' -> true\n        | _ -> false\n    \n    let writeEscaped (w: System.Text.StringBuilder) isLast c =\n        let k = int c\n        if isUnreserved isLast c then w.Append c\n        elif k < 256 then w.AppendFormat(\"~{0:x2}\", k)\n        else w.AppendFormat(\"~u{0:x4}\", k)\n        |> ignore\n\n    [<JavaScript>]\n    let writeEscapedAsString isLast c =\n        let k = int c\n        if isUnreserved isLast c then string c\n        elif k < 256 then \"~\" + k.JS.ToString(16).PadLeft(2, '0')\n        else \"~u\" + k.JS.ToString(16).PadLeft(4, '0')\n\n    [<JavaScript>]\n    let write (s: string) = \n        if IsClient then\n            s |> Seq.mapi (fun i c ->\n                writeEscapedAsString (i + 1 = s.Length) c\n            )\n            |> String.concat \"\"\n        else\n            let b = System.Text.StringBuilder()\n            s |> Seq.iteri (fun i c ->\n                writeEscaped b (i + 1 = s.Length) c)\n            string b\n\n    [<JavaScript>]\n    let inline ( ++ ) (a: int) (b: int) = (a <<< 4) + b\n\n    [<Literal>]\n    let EOF = -1\n\n    [<Literal>]\n    let ERROR = -2\n\n    let readEscaped (r: System.IO.TextReader) =\n        let hex x =\n            match x with\n            | x when x >= int '0' && x <= int '9' -> x - int '0'\n            | x when x >= int 'a' && x <= int 'f' -> x - int 'a' + 10\n            | x when x >= int 'A' && x <= int 'F' -> x - int 'A' + 10\n            | _ -> ERROR\n        match r.Read() with\n        | x when x = int '~' ->\n            match r.Read() with\n            | x when x = int 'u' ->\n                let a = r.Read()\n                let b = r.Read()\n                let c = r.Read()\n                let d = r.Read()\n                if a >= 0 && b >= 0 && c >= 0 && d >= 0 then\n                    hex a ++ hex b ++ hex c ++ hex d\n                else ERROR\n            | x ->\n                let y = r.Read()\n                if x >= 0 && y >= 0 then\n                    hex x ++ hex y\n                else ERROR\n        | x ->\n            x\n\n    [<JavaScript>]\n    let readEscapedFromChars (chars: int list) =\n        let mutable chars = chars\n        let read() =\n            match chars with\n            | [] -> -1\n            | h :: t ->\n                chars <- t\n                h\n        let hex x =\n            match x with\n            | x when x >= int '0' && x <= int '9' -> x - int '0'\n            | x when x >= int 'a' && x <= int 'f' -> x - int 'a' + 10\n            | x when x >= int 'A' && x <= int 'F' -> x - int 'A' + 10\n            | _ -> ERROR\n        match read() with\n        | x when x = int '~' ->\n            match read() with\n            | x when x = int 'u' ->\n                let a = read()\n                let b = read()\n                let c = read()\n                let d = read()\n                if a >= 0 && b >= 0 && c >= 0 && d >= 0 then\n                    hex a ++ hex b ++ hex c ++ hex d\n                else ERROR\n            | x ->\n                let y = read()\n                if x >= 0 && y >= 0 then\n                    hex x ++ hex y\n                else ERROR\n        | x ->\n            x\n        , chars\n\n    [<JavaScript>]\n    let read (s: string) = \n        if IsClient then\n            let buf = ResizeArray()\n            let rec loop chars =\n                match readEscapedFromChars chars with\n                | ERROR, _ -> None\n                | EOF, _ -> Some (buf |> String.concat \"\")\n                | x, chars -> \n                    buf.Add(string (char x))\n                    loop chars\n            s |> Seq.map int |> List.ofSeq |> loop\n        else\n            let buf = System.Text.StringBuilder()\n            use i = new System.IO.StringReader(s)\n            let rec loop () =\n                match readEscaped i with\n                | ERROR -> None\n                | EOF -> Some (string buf)\n                | x -> buf.Append(char x) |> ignore; loop ()\n            loop ()\n\ntype internal PathUtil =\n    static member WriteQuery q =\n        let sb = StringBuilder 128\n        let mutable start = true\n        q |> Map.toSeq |> Seq.iter (fun (k: string, v: string) ->\n            if start then\n                start <- false\n            else \n                sb.Append('&') |> ignore                    \n            sb.Append(k).Append('=').Append(v) |> ignore\n        )\n        sb.ToString()\n\n    static member WriteLink s q =\n        let sb = StringBuilder 128\n        if List.isEmpty s then\n            sb.Append('/') |> ignore\n        else\n            s |> List.iter (fun x ->\n                if not (System.String.IsNullOrEmpty x) then\n                    sb.Append('/').Append(x) |> ignore\n            )\n        if Map.isEmpty q then () \n        else \n            let mutable start = true\n            sb.Append('?') |> ignore                    \n            q |> Map.toSeq |> Seq.iter (fun (k: string, v: string) ->\n                if start then\n                    start <- false\n                else \n                    sb.Append('&') |> ignore                    \n                sb.Append(k).Append('=').Append(v) |> ignore\n            )\n        sb.ToString()\n\n[<Proxy(typeof<PathUtil>)>]\ntype internal PathUtilProxy =\n    static member Concat xs = \n        let sb = System.Collections.Generic.Queue()\n        let mutable start = true\n        xs |> List.iter (fun x ->\n            if not (System.String.IsNullOrEmpty x) then\n                if start then\n                    start <- false\n                else \n                    sb.Enqueue(\"/\") |> ignore                    \n                sb.Enqueue(x) |> ignore\n        )\n        sb |> System.String.Concat\n\n    static member WriteQuery q =\n        q |> Map.toSeq |> Seq.map (fun (k, v) -> k + \"=\" + v) |> String.concat \"&\"\n\n    static member WriteLink s q =\n        let query = \n            if Map.isEmpty q then \"\" \n            else \"?\" + PathUtil.WriteQuery(q)\n        \"/\" + PathUtilProxy.Concat s + query\n\n[<JavaScript>]\ntype Route =\n    {\n        Segments : list<string>\n        QueryArgs : Map<string, string>\n        FormData : Map<string, string>\n        Method : option<string> \n        Body : Lazy<string>\n    }\n\n    static member Empty =\n        {\n            Segments = []\n            QueryArgs = Map.empty\n            FormData = Map.empty\n            Method = None\n            Body = Lazy.CreateFromValue null\n        }\n    \n    static member Segment s =\n        { Route.Empty with\n            Segments = [ s ]\n        }\n\n    static member Segment s =\n        { Route.Empty with\n            Segments = s\n        }\n\n    static member Segment (s, m) =\n        { Route.Empty with\n            Segments = s\n            Method = m\n        }\n\n    static member Combine (paths: seq<Route>) =\n        let paths = Seq.toArray paths\n        match paths.Length with\n        | 1 -> paths.[0]\n        | 0 -> Route.Empty\n        | _ ->\n        let mutable method = None\n        let mutable body = null\n        let segments = System.Collections.Generic.Queue()\n        let mutable queryArgs = Map.empty\n        let mutable formData = Map.empty\n        let mutable i = 0\n        let l = paths.Length\n        while i < l do\n            let p = paths.[i]\n            match p.Method with\n            | Some _ as m ->\n                method <- m\n            | _ -> ()\n            match p.Body.Value with\n            | null -> ()\n            | b ->\n                body <- b\n            queryArgs <- p.QueryArgs |> Map.foldBack Map.add queryArgs \n            formData <- p.FormData |> Map.foldBack Map.add formData \n            p.Segments |> List.iter segments.Enqueue\n            i <- i + 1\n        {\n            Segments = List.ofSeq segments\n            QueryArgs = queryArgs\n            FormData = formData\n            Method = method\n            Body = Lazy.CreateFromValue body\n        }\n\n    static member ParseQuery(q: string) =\n        q.Split('&') |> Array.choose (fun kv ->\n            match kv.Split('=') with\n            | [| k; v |] -> Some (k, v)\n            | _ -> \n                printfn \"wrong format for query argument: %s\" kv\n                None\n        ) |> Map.ofSeq\n    \n    static member WriteQuery(q) = PathUtil.WriteQuery q\n\n    static member FromUrl(path: string, ?strict: bool) =\n        let s, q = \n            match path.IndexOf '?' with\n            | -1 -> path, Map.empty\n            | i -> \n                path.Substring(0, i),\n                path.Substring(i + 1) |> Route.ParseQuery\n        let splitOptions =\n            if Option.isSome strict && strict.Value then \n                System.StringSplitOptions.None\n            else\n                System.StringSplitOptions.RemoveEmptyEntries\n        { Route.Empty with\n            Segments = \n                s.Split([| '/' |], splitOptions) |> List.ofArray\n            QueryArgs = q\n        }\n\n    [<JavaScript false>]\n    static member FromRequest(r: Http.Request) =\n        let u = r.Uri\n        let p =\n            if u.IsAbsoluteUri then \n                u.AbsolutePath \n            else \n                let s = u.OriginalString\n                match s.IndexOf('?') with\n                | -1 -> s\n                | q -> s.Substring(0, q)\n        {\n            Segments = p.Split([| '/' |], System.StringSplitOptions.RemoveEmptyEntries) |> List.ofArray\n            QueryArgs = r.Get.ToList() |> Map.ofList\n            FormData = r.Post.ToList() |> Map.ofList\n            Method = Some (r.Method.ToString())\n            Body = lazy r.BodyText\n        }\n\n    static member FromHash(path: string, ?strict: bool) =\n        match path.IndexOf \"#\" with\n        | -1 -> Route.Empty\n        | i -> \n            let h = path.Substring(i + 1)\n            if Option.isSome strict && strict.Value then \n                if h = \"\" || h = \"/\" then\n                    Route.Empty\n                elif h.StartsWith \"/\" then\n                    Route.FromUrl(h.Substring(1), true)\n                else\n                    Route.Segment(h)                    \n            else\n                Route.FromUrl(path.Substring(i), false)\n\n    member this.ToLink() = PathUtil.WriteLink this.Segments this.QueryArgs\n\n[<JavaScript>]\nmodule internal List =\n    let rec startsWith s l =\n        match s, l with\n        | [], _ -> Some l\n        | sh :: sr, lh :: lr when sh = lh -> startsWith sr lr\n        | _ -> None\n\ntype IRouter<'T> =\n    abstract Route : Http.Request -> option<'T>\n    abstract Link : 'T -> option<System.Uri>\n\n[<JavaScript>]\ntype Router =\n    {\n        Parse : Route -> Route seq\n        Segment : seq<Route> \n    }\n    \n    static member FromString (name: string) =\n        let parts = name.Split([| '/' |], System.StringSplitOptions.RemoveEmptyEntries)\n        if Array.isEmpty parts then \n            {\n                Parse = fun path -> Seq.singleton path\n                Segment = Seq.empty\n            }\n        else\n            let parts = List.ofArray parts\n            {\n                Parse = fun path ->\n                    match path.Segments |> List.startsWith parts with\n                    | Some p -> \n                        Seq.singleton ({ path with Segments = p })\n                    | _ -> Seq.empty\n                Segment = \n                    Seq.singleton (Route.Segment parts)\n            }\n\n    static member (/) (before: Router, after: Router) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect after.Parse\n            Segment = \n                Seq.append before.Segment after.Segment\n        }\n\n    [<Inline>]\n    static member (/) (before: string, after: Router) = Router.FromString before / after\n\n    [<Inline>]\n    static member (/) (before: Router, after: string) = before / Router.FromString after\n\n    static member (+) (a: Router, b: Router) =\n        {\n            Parse = fun path ->\n                Seq.append (a.Parse path) (b.Parse path) \n            Segment = a.Segment\n        }\n\n    [<Inline>]\n    static member Combine<'A, 'B when 'A: equality and 'B: equality>(a: Router<'A>, b: Router<'B>) : Router<'A * 'B> =\n        a / b\n\nand [<JavaScript>] Router<'T when 'T: equality> =\n    {\n        Parse : Route -> (Route * 'T) seq\n        Write : 'T -> option<seq<Route>> \n    }\n    \n    static member (/) (before: Router<'T>, after: Router<'U>) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect (fun (p, x) -> after.Parse p |> Seq.map (fun (p, y) -> (p, (x, y))))\n            Write = fun (v1, v2) ->\n                match before.Write v1, after.Write v2 with\n                | Some p1, Some p2 -> Some (Seq.append p1 p2)\n                | _ -> None\n        }\n\n    static member (/) (before: Router, after: Router<'T>) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect after.Parse\n            Write = fun v ->\n                after.Write v |> Option.map (Seq.append before.Segment)\n        }\n\n    static member (/) (before: Router<'T>, after: Router) =\n        {\n            Parse = fun path ->\n                before.Parse path |> Seq.collect (fun (p, x) -> after.Parse p |> Seq.map (fun p -> (p, x)))\n            Write = fun v ->\n                before.Write v |> Option.map (fun x -> Seq.append x after.Segment)\n        }\n\n    [<Inline>]\n    static member (/) (before: string, after: Router<'T>) = Router.FromString before / after\n\n    [<Inline>]\n    static member (/) (before: Router<'T>, after: string) = before / Router.FromString after\n\n    static member (+) (a: Router<'T>, b: Router<'T>) =\n        {\n            Parse = fun path ->\n                Seq.append (a.Parse path) (b.Parse path) \n            Write = fun value ->\n                match a.Write value with\n                | None -> b.Write value\n                | p -> p\n        }\n\n    interface IRouter<'T> with\n        [<JavaScript false>]\n        member this.Route req = \n            let path = Route.FromRequest req\n            this.Parse path\n            |> Seq.tryPick (fun (path, value) -> if List.isEmpty path.Segments then Some value else None)\n        [<JavaScript false>]\n        member this.Link ep =\n            this.Write ep |> Option.map (fun p -> System.Uri((Route.Combine p).ToLink(), System.UriKind.Relative))\n        \n[<JavaScript>]\nmodule Router =\n    [<Inline>]\n    let Combine (a: Router<'A>) (b: Router<'B>) = a / b\n    \n    [<Inline>]\n    let Shift (prefix: string) (router: Router<'A>) =\n        prefix / router\n\n    let Empty<'A when 'A: equality> : Router<'A> =\n        {\n            Parse = fun _ -> Seq.empty\n            Write = fun _ -> None\n        }\n\n    /// Creates a fully customized router.\n    let New (route: Http.Request -> option<'T>) (link: 'T -> option<System.Uri>) =\n        { new IRouter<'T> with\n            member this.Route req = route req\n            member this.Link e = link e\n        }\n\n    /// Creates a router for parsing/writing a full route using URL segments.\n    let Create (ser: 'T -> list<string>) (des: list<string> -> option<'T>) =\n        {\n            Parse = fun path ->\n                match des path.Segments with\n                | Some ep ->\n                    Seq.singleton ({ path with Segments = [] }, ep)\n                | None ->\n                    Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment(ser value)))\n        } : Router<'T>\n\n    /// Creates a router for parsing/writing a full route using URL segments and query parameters.\n    let CreateWithQuery (ser: 'T -> list<string> * Map<string, string>) (des: list<string> * Map<string, string> -> option<'T>) =\n        {\n            Parse = fun path ->\n                match des (path.Segments, path.QueryArgs) with\n                | Some ep ->\n                    Seq.singleton ({ path with Segments = [] }, ep)\n                | None ->\n                    Seq.empty\n            Write = fun value ->\n                let s, q = ser value\n                Some (Seq.singleton { Route.Empty with Segments = s; QueryArgs = q })\n        }\n    \n    /// Parses/writes a single value from a query argument with the given key instead of url path.\n    let Query key (item: Router<'A>) : Router<'A> =\n        {\n            Parse = fun path ->\n                match path.QueryArgs.TryFind key with\n                | None -> Seq.empty\n                | Some q -> \n                    let newQa = path.QueryArgs |> Map.remove key\n                    item.Parse { Route.Empty with Segments = [ q ] }\n                    |> Seq.map (fun (p, v) ->\n                        { path with QueryArgs = newQa }, v\n                    )\n            Write = fun value ->\n                item.Write value |> Option.map (fun p -> \n                    let p = Route.Combine p\n                    match p.Segments with\n                    | [ v ] -> Seq.singleton { Route.Empty with QueryArgs = Map.ofList [ key, v ] }\n                    | _ -> Seq.empty\n                )\n        }\n\n    /// Parses/writes a single option value from an optional query argument with the given key instead of url path.\n    let QueryOption key (item: Router<'A>) : Router<option<'A>> =\n        {\n            Parse = fun path ->\n                match path.QueryArgs.TryFind key with\n                | None -> Seq.singleton (path, None)\n                | Some q -> \n                    let newQa = path.QueryArgs |> Map.remove key\n                    item.Parse { Route.Empty with Segments = [ q ] }\n                    |> Seq.map (fun (_, v) ->\n                        { path with QueryArgs = newQa }, Some v\n                    )\n            Write = fun value ->\n                match value with\n                | None -> Some Seq.empty\n                | Some v ->\n                    item.Write v |> Option.map (fun p -> \n                        let p = Route.Combine p\n                        match p.Segments with\n                        | [ v ] -> Seq.singleton { Route.Empty with QueryArgs = Map.ofList [ key, v ] }\n                        | _ -> Seq.empty\n                    )\n        }\n\n    /// Parses/writes a single nullable value from an optional query argument with the given key instead of url path.\n    let QueryNullable key (item: Router<'A>) : Router<System.Nullable<'A>> =\n        {\n            Parse = fun path ->\n                match path.QueryArgs.TryFind key with\n                | None -> Seq.singleton (path, System.Nullable())\n                | Some q -> \n                    let newQa = path.QueryArgs |> Map.remove key\n                    item.Parse { Route.Empty with Segments = [ q ] }\n                    |> Seq.map (fun (_, v) ->\n                        { path with QueryArgs = newQa }, System.Nullable v\n                    )\n            Write = fun value ->\n                if value.HasValue then\n                    item.Write value.Value |> Option.map (fun p -> \n                        let p = Route.Combine p\n                        match p.Segments with\n                        | [ v ] -> Seq.singleton { Route.Empty with QueryArgs = Map.ofList [ key, v ] }\n                        | _ -> Seq.empty\n                    )\n                else\n                    Some Seq.empty\n        }\n\n    let Method (m: string) : Router =\n        {\n            Parse = fun path ->\n                match path.Method with\n                | Some pm when pm = m -> Seq.singleton path\n                | _ -> Seq.empty\n            Segment =\n                Seq.singleton { Route.Empty with Method = Some m }\n        }\n\n    let Body (deserialize: string -> option<'A>) (serialize: 'A -> string) : Router<'A> =\n        {\n            Parse = fun path ->\n                match path.Body.Value with\n                | null -> Seq.empty\n                | x ->\n                    match deserialize x with\n                    | Some b -> Seq.singleton ({ path with Body = Lazy.CreateFromValue null}, b)\n                    | _ -> Seq.empty\n            Write = fun value ->\n                Some <| Seq.singleton { Route.Empty with Body = Lazy.CreateFromValue (serialize value) }\n        }\n\n    let FormData (item: Router<'A>) : Router<'A> =\n        {\n            Parse = fun path ->\n                item.Parse { path with QueryArgs = path.FormData }\n                |> Seq.map (fun (_, r) -> path, r)\n            Write = fun value ->\n                item.Write value\n                |> Option.map (Seq.map (fun p -> { p with QueryArgs = Map.empty; FormData = p.QueryArgs }))  \n        }\n    \n    let Parse (router: Router<'A>) path =\n        router.Parse path\n        |> Seq.tryPick (fun (path, value) -> if List.isEmpty path.Segments then Some value else None)\n\n    let Write (router: Router<'A>) endpoint =\n        router.Write endpoint |> Option.map Route.Combine \n\n    let TryLink (router: Router<'A>) endpoint =\n        match Write router endpoint with\n        | Some p -> Some (p.ToLink())\n        | None -> None\n\n    let Link (router: Router<'A>) endpoint =\n        match Write router endpoint with\n        | Some p -> p.ToLink()\n        | None -> \"\"\n\n    let Ajax (router: Router<'A>) endpoint =\n        match Write router endpoint with\n        | Some path ->\n            let settings = AjaxSettings(DataType = DataType.Text)\n            match path.Method with\n            | Some m -> settings.Type <- As m\n            | _ -> ()\n            match path.Body.Value with\n            | null ->\n                if not (Map.isEmpty path.FormData) then\n                    let fd = JavaScript.FormData()\n                    path.FormData |> Map.iter (fun k v -> fd.Append(k, v))\n                    settings.ContentType <- Union1Of2 false\n                    settings.Data <- fd\n                    settings.ProcessData <- false\n            | b ->\n                settings.ContentType <- Union2Of2 \"application/json\"\n                settings.Data <- b\n                settings.ProcessData <- false\n            if Option.isNone path.Method then settings.Type <- RequestType.POST \n            Async.FromContinuations (fun (ok, err, cc) ->\n                settings.Success <- fun res _ _ -> ok (As<string> res) \n                settings.Error <- fun _ _ msg -> err (exn msg)\n                // todo: cancellation\n                let url = path.ToLink()\n                JQuery.Ajax(url, settings) |> ignore\n            )\n        | _ -> \n            failwith \"Failed to map endpoint to request\" \n\n    let Fetch (router: Router<'A>) endpoint : Promise<Response> =\n        match Write router endpoint with\n        | Some path ->\n            let options = RequestOptions()\n            match path.Method with\n            | Some m -> options.Method <- m\n            | None -> ()\n            match path.Body.Value with\n            | null ->\n                if not (Map.isEmpty path.FormData) then\n                    let fd = JavaScript.FormData()\n                    path.FormData |> Map.iter (fun k v -> fd.Append(k, v))\n                    options.Body <- fd\n            | b ->\n                options.Body <- b\n            if Option.isNone path.Method then options.Method <- \"POST\"\n            JS.Fetch(path.ToLink(), options)\n        | _ -> \n            failwith \"Failed to map endpoint to request\" \n\n    let HashLink (router: Router<'A>)  endpoint =\n        \"#\" + Link router endpoint\n    \n    /// Maps a router to a narrower router type. The decode function must return None if the\n    /// value can't be mapped to a value of the target.\n    let Slice (decode: 'T -> 'U option) (encode: 'U -> 'T) (router: Router<'T>) : Router<'U> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> decode v |> Option.map (fun v -> p, v)) \n            Write = fun value ->\n                encode value |> router.Write\n        }\n\n    /// Maps a router to a wider router type. The encode function must return None if the\n    /// value can't be mapped back to a value of the source.\n    let Embed (decode: 'A -> 'B) (encode: 'B -> 'A option) router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun (p, v) -> p, decode v) \n            Write = fun value ->\n                encode value |> Option.bind router.Write\n        }\n\n    /// Maps a router with a bijection.\n    let Map (decode: 'A -> 'B) (encode: 'B -> 'A) router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun (p, v) -> p, decode v) \n            Write = fun value ->\n                encode value |> router.Write\n        }\n\n    /// Combination of Slice and Embed, a mapping from a subset of source values to\n    /// a subset of target values. Both encode and decode must return None if\n    /// there is no mapping to a value of the other type.\n    let TryMap (decode: 'A -> 'B option) (encode: 'B -> 'A option) router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> decode v |> Option.map (fun v -> p, v)) \n            Write = fun value ->\n                encode value |> Option.bind router.Write\n        }\n\n    /// Filters a router, only parsing/writing values that pass the predicate check.\n    let Filter predicate router =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.filter (snd >> predicate)\n            Write = fun value ->\n                if predicate value then router.Write value else None\n        }\n\n    [<Name \"Box\">]\n    let private BoxImpl tryUnbox (router: Router<'A>): Router<obj> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun (p, v) -> p, box v) \n            Write = fun value ->\n                tryUnbox value |> Option.bind router.Write\n        }\n\n    [<Inline>]\n    /// Converts to Router<obj>. When writing, a type check against type A is performed.\n    let Box (router: Router<'A>): Router<obj> =\n        BoxImpl (function :? 'A as v -> Some v | _ -> None) router\n\n    [<Inline>]\n    let Json<'T when 'T: equality> : Router<'T> =\n        Body (fun s -> try Some (Json.Deserialize<'T> s) with _ -> None) Json.Serialize<'T>\n\n    [<Name \"Unbox\">]\n    let UnboxImpl<'A when 'A: equality> tryUnbox (router: Router<obj>) : Router<'A> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> match tryUnbox v with Some v -> Some (p, v) | _ -> None) \n            Write = fun value ->\n                box value |> router.Write\n        }\n\n    [<Inline>]\n    /// Converts from Router<obj>. When parsing, a type check against type A is performed.\n    let Unbox<'A when 'A: equality> (router: Router<obj>) : Router<'A> =\n        UnboxImpl (function :? 'A as v -> Some v | _ -> None) router\n\n    [<Name \"Cast\">]\n    let private CastImpl tryParseCast tryWriteCast (router: Router<'A>): Router<'B> =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.choose (fun (p, v) -> match tryParseCast v with Some v -> Some (p, v) | _ -> None) \n            Write = fun value ->\n                tryWriteCast value |> Option.bind router.Write\n        }\n\n    [<Inline>]\n    /// Converts a Router<A> to Router<B>. When parsing and writing, type checks are performed.\n    /// Upcasting do not change set of parsed routes, downcasting restricts it within the target type.\n    let Cast (router: Router<'A>): Router<'B> =\n        CastImpl (fun v -> match box v with :? 'B as v -> Some v | _ -> None) (fun v -> match box v with :? 'A as v -> Some v | _ -> None) router\n\n    /// Maps a single-valued (non-generic) Router to a specific value.\n    let MapTo value (router: Router) =\n        {\n            Parse = fun path ->\n                router.Parse path |> Seq.map (fun p -> p, value) \n            Write = fun v ->\n                if v = value then Some router.Segment else None\n        }\n\n    /// Parses/writes using any of the routers, attempts are made in the given order.\n    let Sum (routers: seq<Router<_>>) =\n        let routers = Array.ofSeq routers\n        {\n            Parse = fun path ->\n                routers |> Seq.collect (fun r -> r.Parse path)\n            Write = fun value ->\n                routers |> Seq.tryPick (fun r -> r.Write value)\n        }\n    \n    // todo: optimize\n    let Table<'T when 'T : equality> (mapping: seq<'T * string>) : Router<'T> =\n        mapping |> Seq.map (fun (v, s) -> Router.FromString s |> MapTo v) |> Sum \n\n    let Single<'T when 'T : equality> (endpoint: 'T) (route: string) : Router<'T> =\n        let parts = route.Split([| '/' |], System.StringSplitOptions.RemoveEmptyEntries)\n        if Array.isEmpty parts then \n            {\n                Parse = fun path -> Seq.singleton (path, endpoint)\n                Write = fun value -> if value = endpoint then Some Seq.empty else None\n            }\n        else\n            let parts = List.ofArray parts\n            {\n                Parse = fun path ->\n                    match path.Segments |> List.startsWith parts with\n                    | Some p -> \n                        Seq.singleton ({ path with Segments = p }, endpoint)\n                    | _ -> Seq.empty\n                Write = fun value ->\n                    if value = endpoint then Some (Seq.singleton (Route.Segment parts)) else None\n            }\n\n    let Delay<'T when 'T: equality> (getRouter: unit -> Router<'T>) : Router<'T> =\n        let r = lazy getRouter()\n        {\n            Parse = fun path -> r.Value.Parse path\n            Write = fun value -> r.Value.Write value\n        }\n\n    /// Creates a router for parsing/writing an Array of values.\n    let Array (item: Router<'A>) : Router<'A[]> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match System.Int32.TryParse h with\n                    | true, l ->\n                        let rec collect l path acc =\n                            if l = 0 then Seq.singleton (path, Array.ofList (List.rev acc))\n                            else item.Parse path |> Seq.collect(fun (p, a) -> collect (l - 1) p (a :: acc))\n                        collect l { path with Segments = t } []\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                let parts = value |> Array.map item.Write\n                if Array.forall Option.isSome parts then\n                    Some (Seq.append (Seq.singleton (Route.Segment (string value.Length))) (parts |> Seq.collect Option.get))\n                else None                      \n        }\n\n    /// Creates a router for parsing/writing a Nullable value.\n    let Nullable (item: Router<'A>) : Router<System.Nullable<'A>> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | \"null\" :: p -> \n                    Seq.singleton ({ path with Segments = p }, System.Nullable())\n                | _ ->\n                    item.Parse path |> Seq.map (fun (p, v) -> p, System.Nullable v)\n            Write = fun value ->\n                if value.HasValue then \n                    item.Write value.Value\n                else \n                    Some (Seq.singleton (Route.Segment \"null\"))\n        }\n\n    /// Creates a router for parsing/writing an F# option of a value.\n    let Option (item: Router<'A>) : Router<'A option> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | \"None\" :: p -> \n                    Seq.singleton ({ path with Segments = p }, None)\n                | \"Some\" :: p ->\n                    item.Parse { path with Segments = p } |> Seq.map (fun (p, v) -> p, Some v)\n                | _ ->\n                    Seq.empty\n            Write = fun value ->\n                match value with \n                | None -> Some (Seq.singleton (Route.Segment \"None\"))\n                | Some v -> \n                    item.Write v |> Option.map (Seq.append (Seq.singleton (Route.Segment \"Some\")))\n        }\n\n    module FArray = Collections.Array\n\n    type IListArrayConverter =\n        abstract OfArray: obj -> obj\n        abstract ToArray: obj -> obj\n\n    type ListArrayConverter<'T>() =\n        interface IListArrayConverter with\n            member this.OfArray a = List.ofArray (unbox<'T []> a) |> box\n            member this.ToArray l = List.toArray (unbox<'T list> l) |> box\n\n    /// Creates a router for parsing/writing an F# list of a value.\n    let List (item: Router<'A>) : Router<'A list> =\n        Array item |> Map List.ofArray FArray.ofList\n\ntype Router with\n    [<Inline>]\n    member this.MapTo(value: 'T) =\n        Router.MapTo value this\n\n    [<Inline>]\n    static member Sum ([<System.ParamArray>] routers: Router<'T>[]) =\n        Router.Sum routers\n\n    [<Inline>]\n    static member Empty<'T when 'T: equality>() =\n        Router.Empty<'T>\n\n    [<JavaScript false>]\n    static member New(route: System.Func<Http.Request, 'T>, link: System.Func<'T, System.Uri>) =\n        Router.New (route.Invoke >> Option.ofObj) (link.Invoke >> Option.ofObj)\n\n    [<Inline>]\n    static member Method(method:string) =\n        Router.Method method\n\n    [<Inline>]\n    static member Body(des:System.Func<string, 'T>, ser: System.Func<'T, string>) =\n        Router.Body (fun s -> des.Invoke s |> Option.ofObj) ser.Invoke \n\n    [<Inline>]\n    static member Json<'T when 'T: equality>() =\n        Router.Json<'T>\n\n    [<Inline>]\n    static member Table([<System.ParamArray>] mapping: ('T * string)[]) =\n        Router.Table mapping\n\n    [<Inline>]\n    static member Single(endpoint, route) =\n        Router.Single endpoint route\n\n    [<Inline>]\n    static member Delay(getRouter: System.Func<Router<'T>>) =\n        Router.Delay getRouter.Invoke\n\ntype Router<'T when 'T: equality> with\n\n    [<Inline>]\n    member this.Query(key: string) =\n        Router.Query key this\n\n    [<Inline>]\n    member this.Link(endpoint: 'T) =\n        Router.Link this endpoint\n\n    [<Inline>]\n    member this.TryLink(endpoint: 'T, link: byref<string>) =\n        match Router.TryLink this endpoint with\n        | Some l ->\n            link <- l\n            true\n        | _ -> false\n               \n    [<Inline>]\n    member this.HashLink(endpoint: 'T) =\n        Router.HashLink this endpoint\n\n    [<Inline>]\n    member this.Map(decode: System.Func<'T, 'U>, encode: System.Func<'U, 'T>) =\n        Router.TryMap (decode.Invoke >> ofObjNoConstraint) (encode.Invoke >> ofObjNoConstraint) this\n\n    [<Inline>]\n    member this.Filter(predicate: System.Func<'T, bool>) =\n        Router.Filter predicate.Invoke this\n\n    [<Inline>]\n    member this.Cast<'U when 'U: equality>() : Router<'U> =\n        Router.Cast this\n\n    [<Inline>]\n    member this.FormData() =\n        Router.FormData this\n\n    [<Inline>]\n    member this.Ajax(endpoint) =\n        Router.Ajax this endpoint |> Async.StartAsTask\n\n    [<Inline>]\n    member this.Box() =\n        Router.Box this\n\n    [<Inline>]\n    member this.Array() =\n        Router.Array this\n\nopen System.Runtime.CompilerServices\n    \n[<Extension>]\ntype RouterExtensions =\n    [<Inline>]\n    static member QueryNullable(router, key) =\n        Router.QueryNullable key router\n\n    [<Inline>]\n    static member Unbox<'T when 'T: equality>(router) =\n        Router.Unbox<'T> router\n\n    [<Inline>]\n    static member Nullable(router) =\n        Router.Nullable router\n\nmodule IRouter =\n    open System\n\n    let Empty : IRouter<'T> =\n        { new IRouter<'T> with\n            member this.Route _ = None\n            member this.Link _ = None\n        }        \n\n    let Add (r1: IRouter<'T>) (r2: IRouter<'T>) =\n        { new IRouter<'T> with\n            member this.Route req = match r1.Route req with Some _ as l -> l | _ -> r2.Route req\n            member this.Link e = match r1.Link e with Some _ as l -> l | _ -> r2.Link e\n        }        \n\n    let Sum (routers: seq<IRouter<'T>>) : IRouter<'T> =\n        let routers = Array.ofSeq routers\n        if Seq.isEmpty routers then Empty else\n            { new IRouter<'T> with\n                member this.Route req = routers |> Array.tryPick (fun r -> r.Route req)\n                member this.Link e = routers |> Array.tryPick (fun r -> r.Link e)\n            }        \n            \n    let Map encode decode (router: IRouter<'T>) : IRouter<'U> =\n        { new IRouter<'U> with\n            member this.Route req = router.Route req |> Option.map encode\n            member this.Link e = decode e |> router.Link\n        } \n        \n    let TryMap encode decode (router: IRouter<'T>) : IRouter<'U> =\n        { new IRouter<'U> with\n            member this.Route req = router.Route req |> Option.bind encode\n            member this.Link e = decode e |> Option.bind router.Link\n        } \n\n    let Embed encode decode (router: IRouter<'T>) : IRouter<'U> =\n        { new IRouter<'U> with\n            member this.Route req = router.Route req |> Option.map encode\n            member this.Link e = decode e |> Option.bind router.Link\n        } \n\n    let private makeUri uri =\n        let mutable res = null\n        if Uri.TryCreate(uri, UriKind.Relative, &res) then res else\n            Uri(uri, UriKind.Absolute)\n    \n    let private path (uri: Uri) =\n        if uri.IsAbsoluteUri\n        then uri.AbsolutePath\n        else uri.OriginalString |> joinWithSlash \"/\"\n        \n    let private trimFinalSlash (s: string) =\n        match s.TrimEnd('/') with\n        | \"\" -> \"/\"\n        | s -> s\n    \n    let Shift prefix (router: IRouter<'T>) =\n        let prefix = joinWithSlash \"/\" prefix\n        let shift (loc: System.Uri) =\n            if loc.IsAbsoluteUri then loc else\n                makeUri (joinWithSlash prefix (path loc) |> trimFinalSlash)\n        { new IRouter<'T> with\n            member this.Route req =\n                let builder = UriBuilder req.Uri\n                if builder.Path.StartsWith prefix then\n                    builder.Path <- builder.Path.Substring prefix.Length\n                    router.Route (req.WithUri(builder.Uri))\n                else\n                    None\n            member this.Link e = router.Link e |> Option.map shift\n        }     \n        \n    let Box (router: IRouter<'T>) : IRouter<obj> =\n        { new IRouter<obj> with\n            member this.Route req = router.Route req |> Option.map box\n            member this.Link e = tryUnbox<'T> e |> Option.bind router.Link\n        } \n\n    let Unbox (router: IRouter<obj>) : IRouter<'T> =\n        { new IRouter<'T> with\n            member this.Route req = router.Route req |> Option.bind tryUnbox<'T>\n            member this.Link e = box e |> router.Link\n        } \n\n[<JavaScript>]\nmodule RouterOperators =\n    let rRoot : Router =\n        {\n            Parse = fun path -> Seq.singleton path\n            Segment = Seq.empty\n        }\n    \n    [<Inline>]\n    /// Parse/write a specific string.\n    let r name : Router = Router.FromString name\n\n    /// Parse/write a string using URL encode/decode.\n    let rString : Router<string> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match StringEncoding.read h with\n                    | Some s ->\n                        Seq.singleton ({ path with Segments = t }, s)\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (if isNull value then \"null\" else StringEncoding.write value)))\n        }\n\n    /// Parse/write a char.\n    let rChar : Router<char> =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match StringEncoding.read h with\n                    | Some c when c.Length = 1 ->\n                        Seq.singleton ({ path with Segments = t }, char c)\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (string value)))\n        }\n\n    [<Inline>]\n    let inline rTryParse< ^T when ^T: (static member TryParse: string * byref< ^T> -> bool) and ^T: equality>() =\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    let mutable res = Unchecked.defaultof< ^T>\n                    let ok = (^T: (static member TryParse: string * byref< ^T> -> bool) (h, &res))\n                    if ok then \n                        Seq.singleton ({ path with Segments = t }, res)\n                    else Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (string value)))\n        }\n\n    /// Parse/write a Guid.\n    let rGuid = rTryParse<System.Guid>()\n    /// Parse/write an int.\n    let rInt = rTryParse<int>()\n    /// Parse/write a double.\n    let rDouble = rTryParse<double>()\n    /// Parse/write a signed byte.\n    let rSByte = rTryParse<sbyte>() \n    /// Parse/write a byte.\n    let rByte = rTryParse<byte>() \n    /// Parse/write a 16-bit int.\n    let rInt16 = rTryParse<int16>() \n    /// Parse/write a 16-bit unsigned int.\n    let rUInt16 = rTryParse<uint16>() \n    /// Parse/write an unsigned int.\n    let rUInt = rTryParse<uint32>() \n    /// Parse/write a 64-bit int.\n    let rInt64 = rTryParse<int64>() \n    /// Parse/write a 64-bit unsigned int.\n    let rUInt64 = rTryParse<uint64>() \n    /// Parse/write a single.\n    let rSingle = rTryParse<single>() \n\n    /// Parse/write a bool.\n    let rBool : Router<bool> =\n        // we define rBool not with rTryParse so that fragments are capitalized\n        // to be fully consistent on client+server\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    match System.Boolean.TryParse h with\n                    | true, g ->\n                        Seq.singleton ({ path with Segments = t }, g)\n                    | _ -> Seq.empty\n                | _ -> Seq.empty\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment (if value then \"True\" else \"False\")))\n        }\n\n    /// Parses any remaining part of the URL as a string, no URL encode/decode is done.\n    let rWildcard : Router<string> = \n        {\n            Parse = fun path ->\n                let s = path.Segments |> String.concat \"/\"\n                Seq.singleton ({ path with Segments = [] }, s)\n            Write = fun value ->\n                Some (Seq.singleton (Route.Segment value))\n        }\n    \n    let rWildcardArray (item: Router<'A>) : Router<'A[]> =\n        {\n            Parse = fun path ->\n                let rec collect path acc =\n                    match path.Segments with\n                    | [] -> Seq.singleton (path, Array.ofList (List.rev acc))\n                    | _ ->\n                        item.Parse path |> Seq.collect(fun (p, a) -> collect p (a :: acc))\n                collect path []\n            Write = fun value ->\n                let parts = value |> Array.map item.Write\n                if Array.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n\n    let rWildcardList (item: Router<'A>) : Router<'A list> = \n        {\n            Parse = fun path ->\n                let rec collect path acc =\n                    match path.Segments with\n                    | [] -> Seq.singleton (path, List.rev acc)\n                    | _ ->\n                        item.Parse path |> Seq.collect(fun (p, a) -> collect p (a :: acc))\n                collect path []\n            Write = fun value ->\n                let parts = value |> List.map item.Write\n                if List.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n\n    /// Parse/write a DateTime in `YYYY-MM-DD-HH.mm.ss` format.\n    let rDateTime : Router<System.DateTime> =\n        let pInt x =\n            match System.Int32.TryParse x with\n            | true, i -> Some i\n            | _ -> None\n        {\n            Parse = fun path ->\n                match path.Segments with\n                | h :: t -> \n                    if h.Length = 19 && h.[4] = '-' && h.[7] = '-' && h.[10] = '-' && h.[13] = '.' && h.[16] = '.' then\n                        match pInt h.[0 .. 3], pInt h.[5 .. 6], pInt h.[8 .. 9], pInt h.[11 .. 12], pInt h.[14 .. 15], pInt h.[17 .. 18] with\n                        | Some y, Some m, Some d, Some h, Some mi, Some s  ->\n                            Seq.singleton ({ path with Segments = t }, System.DateTime(y, m, d, h, mi, s))\n                        | _ -> Seq.empty\n                    else Seq.empty\n                | _ -> Seq.empty\n            Write = fun d ->\n                let pad2 (x: int) =\n                    let s = string x\n                    if s.Length = 1 then \"0\" + s else s\n                let pad4 (x: int) =\n                    let s = string x\n                    match s.Length with\n                    | 1 -> \"000\" + s\n                    | 2 -> \"00\" + s\n                    | 3 -> \"0\" + s\n                    | _ -> s\n                let s = \n                    pad4 d.Year + \"-\" + pad2 d.Month + \"-\" + pad2 d.Day\n                    + \"-\" + pad2 d.Hour + \".\" + pad2 d.Minute + \".\" + pad2 d.Second\n                Some (Seq.singleton (Route.Segment s))\n        }\n      \n    let internal Tuple (readItems: obj -> obj[]) (createTuple: obj[] -> obj) (items: Router<obj>[]) =\n        {\n            Parse = fun path ->\n                let rec collect elems path acc =\n                    match elems with \n                    | [] -> Seq.singleton (path, createTuple (Array.ofList (List.rev acc)))\n                    | h :: t -> h.Parse path |> Seq.collect(fun (p, a) -> collect t p (a :: acc))\n                collect (List.ofArray items) path []\n            Write = fun value ->\n                let parts =\n                    (readItems value, items) ||> Array.map2 (fun v r ->\n                        r.Write v\n                    )\n                if Array.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n\n    let internal JSTuple (items: Router<obj>[]) : Router<obj> =\n        let readItems (value: obj) =\n            Array.init items.Length (fun i ->\n                (As<Array<obj>> value).[i]\n            )\n        Tuple readItems box items\n\n    [<Inline>]\n    let internal JSEmpty () : Router<obj> = Router.Empty<obj>\n\n    [<Inline>]\n    let internal JSArray item = Router.Array item\n    \n    [<Inline>]\n    let internal JSList item = Router.List item\n\n    [<Inline>]\n    let internal JSOption item = Router.Option item\n\n    [<Inline>]\n    let internal JSNullable item = Router.Nullable item\n\n    [<Inline>]\n    let internal JSQuery key item = Router.Query key item\n\n    [<Inline>]\n    let internal JSQueryOption key item = Router.QueryOption key item\n\n    [<Inline>]\n    let internal JSQueryNullable key item = Router.QueryNullable key item\n\n    [<Inline>]\n    let internal JSFormData item = Router.FormData item\n\n    [<Inline>]\n    let internal JSJson<'T when 'T: equality> = Router.Json<'T>\n\n    [<Inline>]\n    let internal JSBox item = Router.Box item\n\n    [<Inline>]\n    let internal JSDelayed getRouter = Router.Delay getRouter\n        \n    let internal JSRecord (t: obj) (fields: (string * bool * Router<obj>)[]) : Router<obj> =\n        let readFields value =\n            fields |> Array.map (fun (fn, opt, _) ->\n                if opt then\n                    let v = value?(fn)\n                    if v = JS.Undefined then box None else box (Some v)\n                else\n                    value?(fn)\n            )\n        let createRecord fieldValues =\n            let o = if isNull t then New [] else JS.New t\n            (fields, fieldValues) ||> Array.iter2 (fun (fn, opt, _) v ->\n                if opt then\n                    match As<option<obj>> v with\n                    | None -> ()\n                    | Some v ->\n                        o?(fn) <- v\n                else\n                    o?(fn) <- v\n            )\n            o\n        let fields = fields |> Array.map (fun (_, _, r) -> r)\n        let fieldsList =  List.ofArray fields        \n        {\n            Parse = fun path ->\n                let rec collect fields path acc =\n                    match fields with \n                    | [] -> Seq.singleton (path, createRecord (Array.ofList (List.rev acc)))\n                    | h :: t -> h.Parse path |> Seq.collect(fun (p, a) -> collect t p (a :: acc))\n                collect fieldsList path []\n            Write = fun value ->\n                let parts =\n                    (readFields value, fields) ||> Array.map2 (fun v r ->\n                        r.Write v\n                    )\n                if Array.forall Option.isSome parts then\n                    Some (parts |> Seq.collect Option.get)\n                else None                      \n        }\n    \n    let internal isCorrectMethod m p =\n        match p, m with\n        | Some pm, Some m -> pm = m\n        | _, Some _ -> false\n        | _ -> true\n\n    let internal JSUnion (t: obj) (cases: (option<obj> * (option<string> * string[])[] * Router<obj>[])[]) : Router<obj> = \n        let getTag value = \n            let constIndex =\n                cases |> Seq.tryFindIndex (\n                    function\n                    | Some c, _, _ -> value = c\n                    | _ -> false\n                )\n            match constIndex with\n            | Some i -> i\n            | _ -> value?(\"$\") \n        let readFields tag value =\n            let _, _, fields = cases.[tag]\n            Array.init fields.Length (fun i ->\n                value?(\"$\" + string i)\n            )\n        let createCase tag fieldValues =\n            let o = if isNull t then New [] else JS.New t\n            match cases.[tag] with\n            | Some constant, _, _ -> constant\n            | _ ->\n                o?(\"$\") <- tag\n                fieldValues |> Seq.iteri (fun i v ->\n                    o?(\"$\" + string i) <- v\n                )\n                o\n        let parseCases =\n            cases |> Seq.indexed |> Seq.collect (fun (i, (_, eps, fields)) ->\n                eps |> Seq.map (fun (m, p) -> i, m, p, fields)    \n            )\n        {                                                    \n            Parse = fun path ->\n                parseCases |> Seq.collect (fun (i, m, s, fields) ->\n                    if isCorrectMethod m path.Method then\n                        match path.Segments |> List.startsWith (List.ofArray s) with\n                        | Some p -> \n                            match List.ofArray fields with\n                            | [] -> Seq.singleton ({ path with Segments = p }, createCase i [||])\n                            | fields -> \n                                let rec collect fields path acc =\n                                    match fields with \n                                    | [] -> Seq.singleton (path, createCase i (Array.ofList (List.rev acc)))\n                                    | h :: t -> h.Parse path |> Seq.collect(fun (p, a) -> collect t p (a :: acc))\n                                collect fields { path with Segments = p } []\n                        | None -> Seq.empty\n                    else\n                        Seq.empty\n                )\n            Write = fun value ->\n                let tag = getTag value\n                let _, eps, fields = cases.[tag]\n                let method, path = eps.[0]\n                let casePath = Seq.singleton (Route.Segment (List.ofArray path, method))\n                match fields with\n                | [||] -> Some casePath\n                | _ ->\n                    let fieldParts =\n                        (readFields tag value, fields) ||> Array.map2 (fun v f -> f.Write v)\n                    if Array.forall Option.isSome fieldParts then\n                        Some (Seq.append casePath (fieldParts |> Seq.collect Option.get))\n                    else None                      \n        }\n\n    let internal JSClass (ctor: unit -> obj) (fields: (string * bool * Router<obj>)[]) (endpoints: (option<string> * Union<string, int>[])[]) (subClasses: Router<obj>[]) : Router<obj> =\n        let readFields value =\n            fields |> Array.map (fun (fn, opt, _) ->\n                if opt then\n                    let v = value?(fn)\n                    if v = JS.Undefined then box None else box (Some v)\n                else\n                    value?(fn)\n            )\n        let createObject fieldValues =\n            let o = ctor()\n            (fields, fieldValues) ||> Array.iter2 (fun (fn, opt, _) v ->\n                if opt then\n                    match As<option<obj>> v with\n                    | None -> ()\n                    | Some v ->\n                        o?(fn) <- v\n                else\n                    o?(fn) <- v\n            )\n            o\n        let partsAndRoutersLists =\n            endpoints |> Array.map (fun (m, ep) ->\n                m, \n                ep |> Seq.map (fun p ->\n                    match p with\n                    | Union1Of2 s -> Choice1Of2 s\n                    | Union2Of2 i -> \n                        let _, _, r = fields.[i]\n                        Choice2Of2 (i, r)\n                ) |> List.ofSeq\n            )\n        let thisClass =\n            {\n                Parse = fun path ->\n                    let rec collect fields path arr =\n                        match fields with \n                        | [] -> \n                            Seq.singleton (path, createObject arr)\n                        | Choice1Of2 p :: t -> \n                            match path.Segments with\n                            | pp :: pr when pp = p ->\n                                collect t { path with Segments = pr } arr\n                            | _ -> Seq.empty\n                        | Choice2Of2 (i, h) :: t -> \n                            h.Parse path |> Seq.collect(fun (p, a) -> \n                                let narr = Array.copy arr\n                                narr.[i] <- a\n                                collect t p narr\n                            )\n                    partsAndRoutersLists |> Seq.collect (fun (m, ps) -> \n                        if isCorrectMethod m path.Method then\n                            let arr = Array.zeroCreate fields.Length\n                            collect ps path arr\n                        else Seq.empty\n                    )\n                Write = fun value ->\n                    let values = readFields value\n                    let method, ep = endpoints.[0]\n                    let parts =\n                        ep |> Array.map (function\n                            | Union1Of2 p -> Some (Seq.singleton (Route.Segment(p)))\n                            | Union2Of2 i ->\n                                let _, _, r = fields.[i] \n                                r.Write(values.[i])\n                        )\n                    if Array.forall Option.isSome parts then\n                        let w = parts |> Seq.collect Option.get\n                        match method with\n                        | Some _ -> Some (Seq.append (Seq.singleton { Route.Empty with Method = method }) w)\n                        | None -> Some w\n                    else None                      \n            }\n        if Array.isEmpty subClasses then\n            thisClass\n        else\n            Router.Sum (Seq.append subClasses (Seq.singleton thisClass))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<JavaScript>]\nmodule internal Observer =\n\n    type Message<'T> =\n        | Message of 'T\n        | Error of exn\n        | Completed\n\n    let Of f : IObserver<_> =\n        { new IObserver<'T> with\n            member __.OnNext x = f x\n            member __.OnError x = raise x\n            member __.OnCompleted() = ()\n        }\n\n    let New (f, e, c) : IObserver<_> =\n        { new IObserver<'T> with\n            member __.OnNext x = f x\n            member __.OnError x = e x\n            member __.OnCompleted() = c()\n        }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\nmodule internal HotStream =\n    open System\n\n    /// Implementation for \"hot stream\".\n    /// Subscribers to hot streams will only observe the latest\n    /// and future values.\n    [<JavaScript>]\n    type HotStream<'T> =\n        internal\n            {\n                Latest  : ref<option<'T>>\n                Event   : Event<'T>\n            }\n        interface IObservable<'T> with\n            member this.Subscribe(o) =\n                if this.Latest.Value.IsSome then\n                    o.OnNext this.Latest.Value.Value\n                let disp =\n                    this.Event.Publish.Subscribe(fun v ->\n                        o.OnNext(v)\n                    )\n                disp\n\n        member this.Trigger(v) =\n            this.Latest := Some v\n            this.Event.Trigger v\n\n        static member New<'U>() : HotStream<'U> =\n            {\n                Latest = ref None\n                Event = Event<_>()\n            }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\n[<WebSharper.JavaScript>]\nmodule internal WebSharper.Control.Observable\n\nopen System\nopen WebSharper\n\n[<Inline>]\nlet New f : IObservable<'T> = { new IObservable<'T> with member __.Subscribe o = f o }\n\nlet Of (f: ('T -> unit) -> (unit -> unit)) : IObservable<_> =\n    New (fun o -> Disposable.Of (f (fun x -> o.OnNext x)))\n\nlet Return<'T> (x: 'T) : IObservable<'T> =\n    let f (o : IObserver<'T>) =\n        o.OnNext x\n        o.OnCompleted ()\n        Disposable.Of ignore\n    New f\n\nlet Never<'T> () : IObservable<'T> =\n    New(fun _ ->\n        Disposable.Of ignore\n    )\n\nlet Protect f succeed fail =\n    match (try Choice1Of2 (f ()) with e -> Choice2Of2 e) with\n    | Choice1Of2 x -> (succeed x)\n    | Choice2Of2 e -> (fail e)\n\nlet Map (f: 'T -> 'U) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) o1.OnNext o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\n\nlet Filter (f: 'T -> bool) (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let on v = \n            Protect (fun () -> if f v then Some v else None)\n                (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <|  Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Choose  (f: 'T -> option<'U>) (io: IObservable<'T>) : IObservable<'U> =\n    New <| fun o1 ->\n        let on v = Protect (fun () -> f v) (Option.iter o1.OnNext) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Drop count (io: IObservable<'T>) : IObservable<'T> =\n    New <| fun o1 ->\n        let index = ref 0\n        let on v =\n            incr index\n            if index.Value > count then\n                o1.OnNext v\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)\n\nlet Merge (io1: IObservable<'T>) (io2: IObservable<'T>) : IObservable<'T> =\n    New <| fun o ->\n        let completed1 = ref false\n        let completed2 = ref false\n        let disp1 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed1 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io1.Subscribe\n        let disp2 =\n            Observer.New(o.OnNext, ignore, fun () ->\n                completed2 := true\n                if completed1.Value && completed2.Value then\n                    o.OnCompleted ()\n            )\n            |> io2.Subscribe\n        Disposable.Of (fun () -> disp1.Dispose(); disp2.Dispose())\n\nlet Concat (io1: IObservable<'T>) (io2: IObservable<'T>) =\n    New <| fun o ->\n        let innerDisp = ref None\n        let outerDisp =\n            io1.Subscribe(\n                Observer.New(o.OnNext, ignore, fun () ->\n                    innerDisp := Some <| io2.Subscribe(o)\n                )\n            )\n        Disposable.Of <| fun () ->\n            if innerDisp.Value.IsSome then\n                innerDisp.Value.Value.Dispose ()\n            outerDisp.Dispose()\n\n\nlet Range (start: int , count: int) : IObservable<int> =\n    New <| fun o ->\n        for i = start to start + count do\n            o.OnNext i\n        Disposable.Of ignore\n\n\nlet CombineLatest   (io1 : IObservable<'T>)\n                    (io2: IObservable<'U>)\n                    (f: 'T -> 'U -> 'S) : IObservable<'S> =\n    New <| fun o ->\n        let lv1 = ref None\n        let lv2 = ref None\n        let update () =\n            match !lv1, !lv2 with\n            | Some v1, Some v2  ->\n                Protect (fun () -> f v1 v2) o.OnNext o.OnError\n            | _                 ->\n                ()\n        let o1 =\n            let onNext x =\n                lv1 := Some x\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let o2 =\n            let onNext y =\n                lv2 := Some y\n                update ()\n            Observer.New(onNext, ignore, ignore)\n        let d1 = io1.Subscribe(o1)\n        let d2 = io2.Subscribe(o2)\n        Disposable.Of (fun () -> d1.Dispose() ; d2.Dispose())\n\nlet Switch (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp =\n            let index = ref 0\n            let disp : option<IDisposable> ref = ref None\n\n            // Subscribe to outer stream\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Update counter\n                incr index\n\n                // Dispose old observer\n                if disp.Value.IsSome then\n                    disp.Value.Value.Dispose ()\n\n                let currentIndex = index.Value\n                let d =\n                    o1.Subscribe (fun v ->\n                        if currentIndex = index.Value then\n                            o.OnNext(v)\n                    ) |> Some\n                // Update dispose\n                disp := d\n            )\n        disp\n    )\n\nlet SelectMany (io: IObservable<IObservable<'T>>) : IObservable<'T> =\n    New (fun o ->\n        let disp = ref ignore\n        // Subscribe to outer stream\n        let d =\n            io.Subscribe(fun (o1 : IObservable<'T>) ->\n                // Subscribe to inner stream\n                let d =\n                    o1.Subscribe (fun v ->\n                        o.OnNext v\n                    )\n                disp := fun () ->\n                    disp.Value ()\n                    d.Dispose ()\n            )\n        Disposable.Of (fun () ->\n            disp.Value ()\n            d.Dispose ()\n        )\n    )\n\nlet Aggregate (io: IObservable<'T>) (seed: 'S) (fold: 'S -> 'T -> 'S) =\n    New <| fun o1 ->\n        let state = ref seed\n        let on v = \n            Protect (fun () -> fold !state v) \n                (fun s -> state := s; o1.OnNext s) o1.OnError\n        io.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n////    let CollectLatest (outer: IObservable<IObservable<'T>>) : IObservable<seq<'T>> =\n//        New (fun o ->\n//            let dict = System.Collections.Generic.Dictionary<int, 'T>()\n//            let index = ref 0\n//\n//            // Outer subscription\n//            outer.Subscribe(fun (inner: IObservable<'T>) ->\n//                incr index\n//                let currentIndex = index.Value\n//\n//                // Inner subscription\n//                inner.Subscribe(fun value ->\n//                    dict.[currentIndex] <- value\n//                    seq {for pair in dict do yield pair.Value}\n//                    |> o.OnNext\n//                )|> ignore\n//            )\n//        )\n\nlet Sequence (ios: seq<IObservable<'T>>) : IObservable<List<'T>> =\n    let rec sequence (ios: list<IObservable<'T>>) =\n        match ios with\n        | []        ->\n            Return []\n        | x::xs  ->\n            let rest = sequence xs\n            CombineLatest x rest  (fun x y -> x :: y)\n    sequence (List.ofSeq ios)\n\n\n[<Inline>]\nlet Heat (io: IObservable<'T>) : IObservable<'T> =\n    let formStream = HotStream.HotStream<_>.New()\n    let disp =\n        io.Subscribe formStream.Trigger\n    formStream :> IObservable<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.ObservableModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private ObservableModule =\n\n    [<Inline>]\n    let Add (f: 'T -> unit) (o: IObservable<'T>) =\n        ignore (o.Subscribe (Observer.Of f))\n\n    [<Inline>]\n    let Choose (c: 'T -> option<'U>) (e: IObservable<'T>) =\n        Observable.Choose c e\n\n    [<Inline>]\n    let Filter (ok: 'T -> bool) (e: IObservable<'T>) : IObservable<'T> =\n        Observable.Filter ok e\n\n    [<Inline>]\n    let Map (f: 'T -> 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.Map f e\n\n    [<Inline>]\n    let Merge (e1: IObservable<'T>) (e2: IObservable<'T>) =\n        Observable.Merge e1 e2\n\n    let Pairwise (e: IObservable<'T>) : IObservable<'T * 'T> =\n        Observable.New <| fun o1 ->\n            let last = ref None\n            let on v =\n                match !last with\n                | None -> ()\n                | Some l -> o1.OnNext(l, v)\n                last := Some v\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    let Partition (f: 'T -> bool) (e: IObservable<'T>) :\n            IObservable<'T> * IObservable<'T> =\n        (Observable.Filter f e, Observable.filter (f >> not) e)\n\n    let Scan (fold: 'U -> 'T -> 'U) (seed: 'U) (e: IObservable<'T>) : IObservable<'U> =\n        Observable.New <| fun o1 ->\n            let state = ref seed\n            let on v = \n                Observable.Protect (fun () -> fold !state v) \n                    (fun s -> state := s; o1.OnNext s) o1.OnError\n            e.Subscribe <| Observer.New(on, o1.OnError, o1.OnCompleted)  \n\n    let Split (f: 'T -> Core.Choice<'U1,'U2>) (e: IObservable<'T>) :\n            IObservable<'U1> * IObservable<'U2> =\n        let left =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _ -> None)\n        let right =\n            e\n            |> Observable.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _ -> None)\n        (left, right)\n\n    [<Inline>]\n    let Subscribe (f: 'T -> unit) (e: IObservable<'T>) =\n        e.Subscribe f\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nmodule internal Event =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    type Event<'T> = private { Handlers : ResizeArray<Handler<'T>> } with\n\n        member this.Trigger(x: 'T) =\n            for h in this.Handlers.ToArray() do\n                h.Invoke(null, x)\n\n        member this.AddHandler(h: Handler<'T>) =\n            this.Handlers.Add h\n\n        member this.RemoveHandler(h: Handler<'T>) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        member this.Subscribe(observer: IObserver<'T>) =\n            let h = new Handler<'T>(fun _ x -> observer.OnNext x)\n            this.AddHandler h\n            Disposable.Of (fun () -> this.RemoveHandler h)\n\n        interface IDisposable with\n                member this.Dispose() = ()\n\n        interface IObservable<'T> with\n                member this.Subscribe observer = this.Subscribe observer\n\n        interface IDelegateEvent<Handler<'T>> with\n                member this.AddHandler x = this.AddHandler x\n                member this.RemoveHandler x = this.RemoveHandler x\n\n        interface IEvent<'T>\n\n    [<Inline>]\n    let New () = { Handlers = ResizeArray() }\n\nmodule internal DelegateEvent =\n    open System\n    open WebSharper\n    open WebSharper.JavaScript\n\n    [<JavaScript>]\n    type DelegateEvent<'T when 'T :> System.Delegate and 'T: equality> = private { Handlers : ResizeArray<'T> } with\n\n        member this.Trigger(x: obj[]) =\n            for h in this.Handlers.ToArray() do\n                h.DynamicInvoke(x) |> ignore\n\n        member this.AddHandler(h: 'T) =\n            this.Handlers.Add h\n\n        member this.RemoveHandler(h: 'T) =\n            this.Handlers\n            |> Seq.tryFindIndex ((=) h)\n            |> Option.iter this.Handlers.RemoveAt\n\n        interface IDisposable with\n                member this.Dispose() = ()\n\n        interface IDelegateEvent<'T> with\n                member this.AddHandler x = this.AddHandler x\n                member this.RemoveHandler x = this.RemoveHandler x\n\n    [<Inline>]\n    let New () = { Handlers = ResizeArray() }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen WebSharper\n\n[<Proxy(typeof<Event<_>>)>]\n[<Name \"WebSharper.Control.FSharpEvent\">]\ntype private FSharpEvent<'T> [<JavaScript>] () =\n    let event = Event.New ()\n\n    [<Inline>]\n    member this.Trigger(x: 'T) = event.Trigger x\n\n    member this.Publish with [<Inline>] get () = event :> IEvent<_>\n\n[<Proxy(typeof<DelegateEvent<_>>)>]\n[<Name \"WebSharper.Control.FSharpDelegateEvent\">]\ntype private FSharpDelegateEvent<'T when 'T :> System.Delegate and 'T: equality> [<JavaScript>] () =\n    let event = DelegateEvent.New ()\n\n    [<Inline>]\n    member this.Trigger(args: obj[]) = event.Trigger args\n\n    member this.Publish with [<Inline>] get () = event :> IDelegateEvent<'T>\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System\nopen WebSharper\n\n[<Proxy \"Microsoft.FSharp.Control.EventModule, \\\n    FSharp.Core, Culture=neutral, \\\n    PublicKeyToken=b03f5f7f11d50a3a\">]\nmodule private EventModule =\n\n    [<Inline>]\n    let Add f (e: IEvent<_,_>) = e.Add f\n\n    let Choose c (e: IEvent<_,_>) : IEvent<_> =\n        // let r = Event.New ()\n        let r = Event<_>()\n        e.Add (fun x ->\n            match c x with\n            | Some y    -> r.Trigger y\n            | None      -> ())\n        r.Publish :> _\n\n    let Filter ok (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> if ok x then r.Trigger x)\n        r :> _\n\n    let Map f (e: IEvent<_,_>) : IEvent<_> =\n        let r = Event.New ()\n        e.Add (fun x -> r.Trigger (f x))\n        r :> _\n\n    let Merge<'D1,'T,'D2 when 'D1 :> Delegate\n                          and 'D1 :  delegate<'T,unit>\n                          and 'D2 :> Delegate\n                          and 'D2 :  delegate<'T,unit>>\n            (e1: IEvent<'D1,'T>) (e2: IEvent<'D2,'T>) : IEvent<_> =\n        let r = Event.New ()\n        e1.Add r.Trigger\n        e2.Add r.Trigger\n        r :> _\n\n    let Pairwise (e: IEvent<_,_>) : IEvent<_> =\n        let buf = ref None\n        let ev  = Event.New ()\n        e.Add (fun x ->\n            match buf.Value with\n            | None ->\n                buf := Some x\n            | Some old ->\n                buf := Some x\n                ev.Trigger(old, x))\n        ev :> _\n\n    let Partition f e =\n        (Event.filter f e, Event.filter (f >> not) e)\n\n    let Scan fold seed e =\n        let state = ref seed\n        let f value =\n            state := fold !state value\n            !state\n        Event.map f e\n\n    let Split (f: 'T -> Choice<'U1,'U2>) (e: IEvent<'Del,'T>) =\n        (\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice1Of2 x -> Some x\n                | _                 -> None),\n            e |> Event.choose (fun x ->\n                match f x with\n                | Core.Choice2Of2 x -> Some x\n                | _                 -> None)\n        )\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2016 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.Control\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Threading\n\n[<Proxy(typeof<AsyncReplyChannel<_>>)>]\ntype private ChannelProxy<'T> =\n    [<Inline \"$this($res)\">]\n    member this.Reply(res: 'T) = X<unit>\n\n[<Proxy(typeof<MailboxProcessor<_>>)>]\n[<Name \"MailboxProcessor\">]\ntype private MailboxProcessorProxy<'T> (initial, ?token: CancellationToken) =\n    let mutable started = false\n    let errorEvent = Event<exn>()\n    let mailbox = LinkedList<'T>()\n    let mutable savedCont = None\n\n    let startAsync a =\n        Async.Start(a, ?cancellationToken = token)\n\n    let resume() =\n        match savedCont with\n        | None -> ()\n        | Some c ->\n            savedCont <- None\n            c |> startAsync\n\n    do  match token with\n        | Some ct -> \n            ct.Register(fun () -> resume()) |> ignore\n        | None -> ()\n\n    let dequeue() =\n        let f = mailbox.First.Value\n        mailbox.RemoveFirst()\n        f\n\n    [<CLIEvent>]\n    member this.Error = errorEvent.Publish\n\n    member val DefaultTimeout = -1 with get, set    \n\n    member this.Start() =\n        if started then\n            failwith \"The MailboxProcessor has already been started.\"\n        else\n            started <- true\n            async {\n                try do! initial (As<MailboxProcessor<'T>> this)\n                with err -> errorEvent.Trigger err\n            } |> startAsync\n\n    static member Start(initial, ?token: CancellationToken) =\n        let mb = new MailboxProcessor<'T>(initial, ?cancellationToken = token)\n        mb.Start()\n        mb\n\n    [<Inline>]\n    member this.Post(msg: 'T) =\n        mailbox.AddLast msg |> ignore\n        resume()\n\n    member this.TryReceive(?timeout: int) =        \n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if mailbox.First = null then\n                if timeout < 0 then\n                    savedCont <- Some <| async { dequeue() |> Some |> ok }\n                else  \n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout \n                    savedCont <- Some <| async { \n                        if !waiting then do\n                            waiting := false  \n                            JS.ClearTimeout pending\n                            dequeue() |> Some |> ok \n                    }\n            else dequeue() |> Some |> ok\n\n    member this.Receive(?timeout: int) =\n        async {\n            let! x = this.TryReceive(?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n                              \n    member this.CurrentQueueLength = mailbox.Count\n\n    member this.PostAndTryAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R option> =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        Async.FromContinuations <| fun (ok, _, _) ->\n            if timeout < 0 then\n                As (Some >> ok) |> msgf |> this.Post\n            else\n                let waiting = ref true\n                As (fun res ->\n                    if !waiting then\n                        waiting := false\n                        ok (Some res)\n                ) |> msgf |> this.Post\n                JS.SetTimeout (fun () ->\n                    if !waiting then\n                        waiting := false\n                        ok None        \n                ) timeout |> ignore               \n\n    member this.PostAndAsyncReply(msgf: AsyncReplyChannel<'R> -> 'T, ?timeout: int) : Async<'R> =\n        async {\n            let! x = this.PostAndTryAsyncReply(msgf, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n\n    member this.TryScan(scanner, ?timeout: int) =\n        let timeout = defaultArg timeout this.DefaultTimeout\n        async {\n            let scanInbox() =\n                let mutable m = mailbox.First\n                let mutable found = None\n                while m <> null do \n                    match scanner m.Value with\n                    | None ->\n                        m <- m.Next\n                    | _ as a ->\n                        mailbox.Remove m\n                        m <- null\n                        found <- a\n                found\n            match scanInbox() with\n            | Some found -> \n                let! res = found\n                return Some res\n            | _ -> return! Async.FromContinuations <| fun (ok, _, _) -> \n                if timeout < 0 then\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                ok (Some res)\n                        }\n                    scanNext()\n                else\n                    let waiting = ref true\n                    let pending = \n                        JS.SetTimeout(fun () ->\n                            if !waiting then\n                                waiting := false\n                                savedCont <- None\n                                ok None\n                        ) timeout\n                    let rec scanNext() =\n                        savedCont <- Some <| async {\n                            match scanner mailbox.First.Value with\n                            | None -> scanNext()\n                            | Some c ->\n                                mailbox.RemoveFirst()\n                                let! res = c\n                                if !waiting then do\n                                    waiting := false\n                                    JS.ClearTimeout pending\n                                    ok (Some res)\n                        }\n                    scanNext()\n        }\n        \n    member this.Scan(scanner, ?timeout: int) =\n        async {\n            let! x = this.TryScan(scanner, ?timeout = timeout)\n            return\n                match x with\n                | None -> raise (System.TimeoutException())\n                | Some x -> x\n        }\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\n\nmodule Array =\n\n    /// Returns defaultValue if array is empty.\n    /// Otherwise makes a binary tree of the array elements and uses reduction to combine\n    /// all items into a single value.\n    [<JavaScript>]\n    let TreeReduce (defaultValue: 'A) (reduction: 'A -> 'A -> 'A) (array: 'A[]) : 'A =\n        let l = array.Length\n        let rec loop off len =\n            match len with\n            | n when n <= 0 -> defaultValue\n            | 1 when off >= 0 && off < l ->\n                array.[off]\n            | n ->\n                let l2 = len / 2\n                let a = loop off l2\n                let b = loop (off + l2) (len - l2)\n                reduction a b\n        loop 0 l\n\n    /// Returns defaultValue if array is empty.\n    /// Otherwise makes a binary tree of the array elements and uses reduction to combine \n    /// all items into a single value using the mapping function first on each item.\n    [<JavaScript>]\n    let MapTreeReduce (mapping: 'A -> 'B) (defaultValue: 'B) (reduction: 'B -> 'B -> 'B) (array: 'A[]) : 'B =\n        let l = array.Length\n        let rec loop off len =\n            match len with\n            | n when n <= 0 -> defaultValue\n            | 1 when off >= 0 && off < l ->\n                mapping array.[off]\n            | n ->\n                let l2 = len / 2\n                let a = loop off l2\n                let b = loop (off + l2) (len - l2)\n                reduction a b\n        loop 0 l\n\n    [<JavaScript>]\n    /// Same as Array.ofSeq, but if argument is an array, it does not copy it.\n    let ofSeqNonCopying (xs: seq<'T>) : 'T [] =\n        if xs :? System.Array then\n            xs :?> 'T[]\n        elif xs :? _ list then\n            Array.ofList (xs :?> 'T list)\n        elif obj.ReferenceEquals(xs, null) then\n            [||]\n        else\n            let q : 'T [] = [||]\n            use o = xs.GetEnumerator()\n            while o.MoveNext() do\n                q.JS.Push(o.Current) |> ignore\n            q\n\n    [<JavaScript>]\n    /// Unsafe operation, modifies each element of an array by a mapping function.\n    let mapInPlace (f: 'T1 -> 'T2) (arr: 'T1 []) =\n        if IsClient then\n            for i = 0 to Array.length arr - 1 do\n                arr.JS.[i] <- As (f arr.JS.[i])\n            As<'T2[]> arr\n        else Array.map f arr\n\nmodule internal String =\n\n    [<JavaScript>]\n    let isBlank s =\n        String.forall Char.IsWhiteSpace s\n\nmodule internal List =\n\n    // TODO: better impl only going to n?\n    [<JavaScript>]\n    let replaceFirst (k: 'A -> bool) (f: 'A -> 'A) (l: list<'A>) =\n        let didIt = ref false\n        l |> List.map (fun x -> if not !didIt && k x then f x else x)\n\n    // TODO: better impl only going to n?\n    [<JavaScript>]\n    let maybeReplaceFirst (k: 'A -> bool) (f: 'A -> option<'A>) (l: list<'A>) =\n        let didIt = ref false\n        l |> List.map (fun x -> if not !didIt && k x then defaultArg (f x) x else x)\n\n/// Abbreviations and small utilities for this assembly.\n[<AutoOpen>]\nmodule internal Abbrev =\n\n    [<JavaScript>]\n    module Fresh =\n\n        let mutable private counter = 0\n\n        let Int () =\n            counter <- counter + 1\n            counter\n\n        let Id () =\n            counter <- counter + 1\n            \"uid\" + string counter\n\n    [<JavaScript>]\n    module HashSet =\n\n        let ToArray (set: HashSet<'T>) =\n            let arr = Array.create set.Count JS.Undefined\n            set.CopyTo(arr)\n            arr\n\n        let Except (excluded: HashSet<'T>) (included: HashSet<'T>) =\n            let set = HashSet<'T>(ToArray included)\n            set.ExceptWith(ToArray excluded)\n            set\n\n        let Intersect (a: HashSet<'T>) (b: HashSet<'T>) =\n            let set = HashSet<'T>(ToArray a)\n            set.IntersectWith(ToArray b)\n            set\n\n        let Filter (ok: 'T -> bool) (set: HashSet<'T>) =\n            HashSet<'T>(ToArray set |> Array.filter ok)\n\n    [<JavaScript>]\n    module Dict =\n\n        let ToKeyArray (d: Dictionary<_,_>) =\n            let arr = Array.create d.Count JS.Undefined\n            d |> Seq.iteri (fun i kv -> arr.[i] <- kv.Key)\n            arr\n\n        let ToValueArray (d: Dictionary<_,_>) =\n            let arr = Array.create d.Count JS.Undefined\n            d |> Seq.iteri (fun i kv -> arr.[i] <- kv.Value)\n            arr\n\n    module Queue =\n\n        [<Inline \"$q\">]\n        let ToArray (q: Queue<_>) = q.ToArray()\n\n    [<JavaScript>]\n    [<Sealed>]\n    type Slot<'T,'K when 'K : equality>(key: 'T -> 'K, value: 'T) =\n        member s.Value = value\n\n        override s.Equals(o: obj) =\n            key value = key (o :?> Slot<'T,'K>).Value\n\n        override s.GetHashCode() = hash (key value)\n\n    [<JavaScript>]\n    type Slot =\n        static member Create key value = Slot(key, value)\n\n    [<JavaScript>]\n    module Async =\n\n        [<Direct \"console.log('WebSharper UI: Uncaught asynchronous exception', $e)\">]\n        let OnError (e: exn) = ()\n\n        let StartTo comp k =\n            Async.StartWithContinuations (comp, k, OnError, ignore)\n\n        [<Inline \"WebSharper.Concurrency.scheduler().Fork($f)\">]\n        let Schedule f =\n            async { return f () }\n            |> Async.Start\n\n    [<JavaScript>]\n    module Mailbox =\n\n        type MailboxState =\n            | Idle = 0\n            | Working = 1\n            | WorkingMore = 2\n\n        /// Simplified MailboxProcessor implementation.\n        let StartProcessor procAsync =\n            let st = ref MailboxState.Idle\n            let rec work() =\n                async {\n                    do! procAsync\n                    match !st with\n                    | MailboxState.Working -> \n                        st := MailboxState.Idle\n                    | MailboxState.WorkingMore ->\n                        st := MailboxState.Working\n                        return! work() \n                    | _ -> ()\n                }\n            let post() =\n                match !st with\n                | MailboxState.Idle ->\n                    st := MailboxState.Working\n                    Async.Start (work()) \n                | MailboxState.Working -> \n                    st := MailboxState.WorkingMore\n                | _ -> ()\n            post\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\nopen WebSharper\n\nopen System.Collections.Generic\n\ntype AppendList<'T> =\n    | AL0\n    | AL1 of 'T\n    | AL2 of AppendList<'T> * AppendList<'T>\n    | AL3 of 'T []\n\n[<JavaScript>]\nmodule AppendList =\n\n    type T<'T> = AppendList<'T>\n\n    let Empty<'T> : T<'T> = AL0\n\n    let Append x y =\n        match x, y with\n        | AL0, x | x, AL0 -> x\n        | _ -> AL2 (x, y)\n\n    let Concat xs =\n        Array.ofSeqNonCopying xs\n        |> Array.TreeReduce Empty Append\n\n    let Single x =\n        AL1 x\n\n    let ToArray xs =\n        let out = Queue()\n        let rec loop xs =\n            match xs with\n            | AL0 -> ()\n            | AL1 x -> out.Enqueue x\n            | AL2 (x, y) -> loop x; loop y\n            | AL3 xs -> Array.iter (fun v -> out.Enqueue v) xs\n        loop xs\n        out.ToArray()\n\n    let FromArray xs =\n        match Array.length xs with\n        | 0 -> AL0\n        | 1 -> AL1 xs.[0]\n        | _ -> AL3 (Array.copy xs)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// Utility functions for manipulating DOM.\n[<JavaScript>]\nmodule internal DomUtility =\n\n    /// The current DOM Document.\n    let Doc = JS.Document\n\n    /// Appends a child node to the given DOM element.\n    let AppendTo (ctx: Dom.Element) node =\n        ctx.AppendChild(node) |> ignore\n\n    /// Removes all attributes from the given DOM element.\n    let ClearAttrs (ctx: Dom.Element) =\n        while ctx.HasAttributes() do\n            ctx.RemoveAttributeNode(ctx.Attributes.[0] :?> _) |> ignore\n\n    /// Removes all child nodes from the given DOM element.\n    let Clear (ctx: Dom.Element) =\n        while ctx.HasChildNodes() do\n            ctx.RemoveChild(ctx.FirstChild) |> ignore\n\n    /// Creates a new DOM element.\n    let CreateElement (name: string) =\n        Doc.CreateElement name\n\n    /// Creates an element in the SVG namespace.\n    let CreateSvgElement (name: string) =\n        Doc.CreateElementNS(\"http://www.w3.org/2000/svg\", name)\n\n    /// Creates a new DOM text node with the given value.\n    let CreateText s =\n        Doc.CreateTextNode(s)\n\n    /// Creates a new DOM attribute.\n    let CreateAttr name value =\n        let a = Doc.CreateAttribute(name)\n        a.Value <- value\n        a\n\n    /// Removes a DOM attribute.\n    let RemoveAttr (el: Dom.Element) (attrName: string) =\n        el.RemoveAttribute attrName\n\n    /// Sets the value of the attribute given by\n    /// `name` to `value` in element `el`.\n    let SetAttr (el: Dom.Element) name value =\n        el.SetAttribute(name, value)\n\n    [<Direct \"$target.setProperty($name, $value)\">]\n    let private SetProperty (target: obj) (name: string) (value: string) = ()\n\n    /// Sets a style property.\n    let SetStyle (el: Dom.Element) name value =\n        SetProperty el?style name value\n\n    /// Safe remove of a node\n    let RemoveNode (parent: Dom.Element) (el: Dom.Node) =\n        // make sure not to remove already removed nodes\n        if obj.ReferenceEquals(el.ParentNode, parent) then\n            parent.RemoveChild(el) |> ignore\n\n    /// Position in a `children` list of a DOM Element\n    /// where a node can be inserted.\n    [<AllowNullLiteral>]\n    type InsertPos [<Inline \"$x\">] private (x: Dom.Node) =\n        [<Inline>]\n        static member AtEnd = null : InsertPos\n        [<Inline>]\n        static member BeforeNode n = InsertPos n\n    [<Inline>]\n    let AtEnd = InsertPos.AtEnd\n    [<Inline>]\n    let BeforeNode n = InsertPos.BeforeNode n\n\n    /// Inserts a new child node into the tree under\n    /// a given `parent` at given `pos`.\n    let InsertAt (parent: Dom.Element) (pos: InsertPos) (node: Dom.Node) =\n        let currentPos (node: Dom.Node) =\n            match node.NextSibling with\n            | null -> AtEnd\n            | s -> BeforeNode s\n        let canSkip =\n            node.ParentNode ===. parent\n            && pos ===. currentPos node\n        if not canSkip then\n            parent.InsertBefore(node, As pos) |> ignore\n\n    let private clsRE cls =\n        new RegExp(@\"(\\s+|^)\" + cls + @\"(?:\\s+\" + cls + \")*(\\s+|$)\", \"g\")\n\n    [<Inline \"$element instanceof SVGElement\">]\n    let private isSvg (element: Dom.Element) = X<bool>\n\n    let private getClass (element: Dom.Element) =\n        if isSvg element then\n            element.GetAttribute(\"class\")\n        else\n            element.ClassName\n\n    let private setClass (element: Dom.Element) (value: string) =\n        if isSvg element then\n            element.SetAttribute(\"class\", value)\n        else\n            element.ClassName <- value\n\n    /// Adds a class.\n    let AddClass (element: Dom.Element) (cl: string) =\n        let c = getClass element\n        if c = \"\" then\n            setClass element cl\n        elif not <| (clsRE cl).Test(c) then\n            setClass element (c + \" \" + cl)\n\n    /// Removes a class.\n    let RemoveClass (element: Dom.Element) (cl: string) =\n        setClass element <|\n            (clsRE cl).Replace(getClass element, FuncWithArgs(fun (_fullStr, before, after) ->\n                if before = \"\" || after = \"\" then \"\" else \" \"\n            ))\n\n    /// Retrieve the children of an element as an array.\n    let ChildrenArray (element: Dom.Element) : Dom.Node[] =\n        let a = [||]\n        for i = 0 to element.ChildNodes.Length - 1 do\n            a.JS.Push(element.ChildNodes.[i]) |> ignore\n        a\n\n    /// Iterate through a NodeList assuming it's all Elements.\n    let IterSelector (el: Dom.Element) (selector: string) (f: Dom.Element -> unit) =\n        let l = el.QuerySelectorAll(selector)\n        for i = 0 to l.Length - 1 do f (l.[i] :?> Dom.Element)\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\nopen WebSharper\n\nopen System.Collections.Generic\nmodule M = Map\n\n/// Trie lookup structure.\ntype Trie<'K,'V when 'K : comparison> =\n    | TrieBranch of Map<'K,Trie<'K,'V>> // invariant: not empty\n    | TrieEmpty\n    | TrieLeaf of 'V\n\n/// Trie combinators.\n[<JavaScript>]\nmodule Trie =\n\n    /// Branch trie, maintaining invariant.\n    let TrieBranch xs =\n        if M.isEmpty xs then TrieEmpty else TrieBranch xs\n\n    /// Singleton trie.\n    let Leaf v =\n        TrieLeaf v\n\n    /// Prefix a trie - becomes a branch.\n    let Prefix key trie =\n        TrieBranch (Map [key, trie])\n\n    /// Finds a value in a multi-map.\n    let MultiFind key map =\n        defaultArg (M.tryFind key map) []\n\n    /// Adds a value to a multi-map.\n    let MultiAdd key value map =\n        Map.add key (value :: MultiFind key map) map\n\n    /// Makes sure all results are Some.\n    let AllSome (xs: seq<option<'T>>) =\n        let e = xs.GetEnumerator()\n        let r = ResizeArray()\n        let mutable ok = true\n        while ok && e.MoveNext() do\n            match e.Current with\n            | None -> ok <- false\n            | Some x -> r.Add(x)\n        if ok then Some (r.ToArray() :> seq<_>) else None\n\n    /// Merges multiple maps into one given a merge function on values.\n    let MergeMaps merge maps =\n        Seq.collect M.toSeq maps\n        |> Seq.fold (fun s (k, v) -> MultiAdd k v s) M.empty\n        |> M.toSeq\n        |> Seq.map (fun (k, vs) -> merge vs |> Option.map (fun v -> (k, v)))\n        |> AllSome\n        |> Option.map Map.ofSeq\n\n    /// Checks for leaves.\n    let IsLeaf t =\n        match t with\n        | TrieLeaf _ -> true\n        | _ -> false\n\n    /// Merges tries.\n    let rec Merge (ts: seq<_>) =\n        let ts = Array.ofSeqNonCopying ts\n        match ts.Length with\n        | 0 -> Some TrieEmpty\n        | 1 -> Some ts.[0]\n        | _ ->\n            // leaves do not merge\n            if Array.exists IsLeaf ts then None else\n                ts\n                |> Seq.choose (function\n                    | TrieBranch map -> Some map\n                    | _ -> None)\n                |> MergeMaps Merge\n                |> Option.map TrieBranch\n\n    /// Inner loop for Map function.\n    let rec MapLoop loc f trie =\n        match trie with\n        | TrieBranch mp ->\n            mp\n            |> M.map (fun k v -> MapLoop (loc @ [k]) f v)\n            |> TrieBranch\n        | TrieEmpty -> TrieEmpty\n        | TrieLeaf x -> TrieLeaf (f loc x)\n\n    /// Maps a function.\n    let Map f trie =\n        MapLoop [] f trie\n\n    /// Map with a counter.\n    let Mapi f trie =\n        let counter = ref 0\n        let next () =\n            let c = !counter\n            counter := c + 1\n            c\n        Map (fun x -> f (next ()) x) trie\n\n    /// Collects all values.\n    let ToArray trie =\n        // TODO: more efficient than this.\n        let all = Queue()\n        Map (fun _ v -> all.Enqueue v) trie\n        |> ignore\n        all.ToArray()\n\n    /// Result of lookup function.\n    type LookupResult<'K,'V> =\n        | Found of value: 'V * remainder: list<'K>\n        | NotFound\n\n    /// Lookup main loop.\n    let rec Look key trie =\n        match trie, key with\n        | TrieLeaf v, _ -> Found (v, key)\n        | TrieBranch map, k :: ks ->\n            match M.tryFind k map with\n            | Some trie -> Look ks trie\n            | None -> NotFound\n        | _ -> NotFound\n\n    /// Looks up a value in the trie.\n    let Lookup trie key =\n        Look (Seq.toList key) trie\n\n    /// Empty trie.\n    let Empty<'K,'V when 'K : comparison> : Trie<'K,'V> =\n        TrieEmpty\n\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\n\n(*\n\nSnap implements a snapshot of a time-varying value.\n\nFinal states:\n\n    Forever     -- will never be obsolete\n    Obsolete    -- is obsolete\n\nDistinguishing Forever state is important as it avoids a class of\nmemory leaks connected with waiting on a Snap to become obsolete\nwhen it will never do so.\n\nState transitions:\n\n    Waiting         -> Forever      // MarkForever\n    Waiting         -> Obsolete     // MarkObsolete\n    Waiting         -> Ready        // MarkReady\n    Ready           -> Obsolete     // MarkObsolete\n\n*)\n\n[<JavaScript false>]\ntype ISnap =\n    abstract Obsolete : unit -> unit\n    abstract IsNotObsolete : unit -> bool\n\ntype OnObsoleted = Union<ISnap, unit -> unit>\n\n[<JavaScript>]\ntype SnapState<'T> =\n    | Forever of 'T\n    | [<Constant null>] Obsolete\n    | Ready of 'T * Queue<OnObsoleted>\n    | Waiting of Queue<'T -> unit> * Queue<OnObsoleted>\n\n[<JavaScript; AutoOpen>]\nmodule SnapInternals =\n\n    [<Inline \"typeof $o == 'object' ? $doObs($o) : $o()\">]\n    let obs (o: OnObsoleted) doObs =  \n        match o with\n        | Union1Of2 sn -> doObs sn\n        | Union2Of2 f -> f()\n\n    [<Inline \"typeof $o == 'object' ? $doObs($o) : $doFunc($o)\">]\n    let clean (o: OnObsoleted) doObs doFunc =  \n        match o with\n        | Union1Of2 sn -> doObs sn\n        | Union2Of2 f -> doFunc f\n\ntype Snap<'T> =\n    {\n        [<Name \"s\">] mutable State : SnapState<'T>\n    }\n\n    [<JavaScript>]\n    static member Obsolete(sn: Snap<'T>) =\n        match sn.State with\n        | Forever _ | Obsolete -> ()\n        | Ready (_, q) | Waiting (_, q) ->\n            sn.State <- Obsolete\n            let qa = Queue.ToArray q\n            for i = 0 to qa.Length - 1 do \n                obs qa.[i] (fun sn -> sn.Obsolete())\n\n    interface ISnap with\n        member this.Obsolete() =\n            Snap.Obsolete(this)\n\n        member this.IsNotObsolete() =\n            match this.State with\n            | Obsolete -> false\n            | _ -> true\n\n[<Proxy(typeof<ISnap>)>]\ntype internal ISnapProxy =\n    [<Inline>]\n    member this.Obsolete() =\n        Snap.Obsolete(As<Snap<obj>> this)\n\n    [<Inline \"$this.s\">]\n    member this.IsNotObsolete() = X<bool>\n\n[<JavaScript>]\nmodule Snap =\n\n  // constructors\n\n    [<Inline>]\n    let Make st = { State = st }\n\n    [<Inline>]\n    let Create () = Make (Waiting (Queue(), Queue()))\n\n    [<Inline>]\n    let CreateForever v = Make (Forever v)\n\n    [<Inline>]\n    let CreateWithValue v = Make (Ready (v, Queue()))\n\n  // misc\n\n    [<Inline>]\n    let IsForever snap =\n        match snap.State with\n        | Forever _ -> true\n        | _ -> false\n\n    [<Inline>]\n    let IsObsolete snap =\n        match snap.State with\n        | Obsolete -> true\n        | _ -> false\n\n    [<Inline>]\n    let IsDone snap =\n        match snap.State with\n        | Forever _ | Ready _ -> true\n        | _ -> false\n\n    let TryGet snap =\n        match snap.State with\n        | Forever x | Ready (x, _) -> Some x\n        | _ -> None\n\n  // transitions\n\n    let MarkForever sn v =\n        match sn.State with\n        | Waiting (q, _) ->\n            sn.State <- Forever v\n            let qa = Queue.ToArray q\n            for i = 0 to qa.Length - 1 do \n                qa.[i] v\n        | _ -> ()\n\n    [<Inline>]\n    let MarkObsolete (sn: Snap<_>) =\n        (sn :> ISnap).Obsolete()\n\n    let MarkReady sn v =\n        match sn.State with\n        | Waiting (q1, q2) ->\n            sn.State <- Ready (v, q2)\n            let qa = Queue.ToArray q1\n            for i = 0 to qa.Length - 1 do \n                qa.[i] v\n        | _ -> ()\n\n    let MarkDone res sn v =\n        if IsForever sn then\n            MarkForever res v\n        else\n            MarkReady res v\n\n    let EnqueueSafe (q: Queue<_>) x =\n        q.Enqueue x\n        if q.Count % 20 = 0 then\n            let qcopy = q.ToArray()\n            q.Clear()\n            for i = 0 to qcopy.Length - 1 do\n                clean qcopy.[i]\n                    (fun sn -> if sn.IsNotObsolete() then q.Enqueue (Union1Of2 sn))\n                    (fun f -> q.Enqueue (Union2Of2 f)) \n\n  // eliminators\n\n    let When snap avail (obs: ISnap) =\n        match snap.State with\n        | Forever v -> avail v\n        | Obsolete -> obs.Obsolete()\n        | Ready (v, q1) -> EnqueueSafe q1 (Union1Of2 obs); avail v\n        | Waiting (q1, q2) -> q1.Enqueue avail; EnqueueSafe q2 (Union1Of2 obs)\n\n    let WhenRun snap avail obs =\n        match snap.State with\n        | Forever v -> avail v\n        | Obsolete -> obs()\n        | Ready (v, q1) -> q1.Enqueue (Union2Of2 obs); avail v\n        | Waiting (q1, q2) -> q1.Enqueue avail; q2.Enqueue (Union2Of2 obs)\n\n    let WhenReady snap avail =\n        match snap.State with\n        | Forever v\n        | Ready (v, _) -> avail v\n        | Obsolete -> ()\n        | Waiting (q1, _) -> q1.Enqueue avail\n\n    let WhenObsolete snap (obs: ISnap) =\n        match snap.State with\n        | Forever v -> ()\n        | Obsolete -> obs.Obsolete()\n        | Ready (v, q) -> EnqueueSafe q (Union1Of2 obs)\n        | Waiting (q1, q2) -> EnqueueSafe q2 (Union1Of2 obs)\n\n    let WhenObsoleteRun snap obs =\n        match snap.State with\n        | Forever v -> ()\n        | Obsolete -> obs()\n        | Ready (v, q) -> q.Enqueue (Union2Of2 obs)\n        | Waiting (q1, q2) -> q2.Enqueue (Union2Of2 obs)\n\n    let ValueAndForever snap =\n        match snap.State with\n        | Forever v -> Some (v, true)\n        | Ready (v, _) -> Some (v, false)\n        | _ -> None\n\n  // combinators\n\n    let Join snap =\n        let res = Create ()\n        let onReady x =\n            let y = x ()\n            When y (fun v ->\n                if IsForever y && IsForever snap then\n                    MarkForever res v\n                else\n                    MarkReady res v) res\n        When snap onReady res\n        res\n\n    let JoinInner snap =\n        let res = Create ()\n        let onReady x =\n            let y = x ()\n            When y (fun v ->\n                if IsForever y && IsForever snap then\n                    MarkForever res v\n                else\n                    MarkReady res v) res\n            WhenObsolete snap y\n        When snap onReady res\n        res\n\n    let CreateForeverAsync a =\n        let o = Make (Waiting (Queue(), Queue()))\n        Async.StartTo a (MarkForever o)\n        o\n\n    let Sequence (snaps : seq<Snap<'T>>) =\n        let snaps = Array.ofSeq snaps\n        if Array.isEmpty snaps then CreateForever Seq.empty\n        else\n            let res = Create () : Snap<seq<'T>>\n            let w = ref (snaps.Length - 1)\n            let cont _ =\n                if !w = 0 then\n                    // all source snaps should have a value\n                    let vs = \n                        snaps |> Array.map (fun s -> \n                            match s.State with\n                            | Forever v | Ready (v, _) -> v\n                            | _ -> failwith \"value not found by View.Sequence\")\n                    if Array.forall IsForever snaps then\n                        MarkForever res (vs :> seq<_>)\n                    else\n                        MarkReady res (vs :> seq<_>)\n                else\n                    decr w\n            snaps\n            |> Array.iter (fun s -> When s cont res)\n            res\n\n    let Map fn sn =\n        match sn.State with\n        | Forever x -> CreateForever (fn x) // optimization\n        | _ ->\n            let res = Create ()\n            When sn (fun a -> MarkDone res sn (fn a)) res\n            res\n\n    let WithInit x sn =\n        match sn.State with\n        | Forever _\n        | Obsolete -> sn // optimization\n        | Ready (v, _) ->\n            let res = CreateWithValue v\n            WhenObsolete sn res\n            res\n        | Waiting _ ->\n            let res = CreateWithValue x\n            When sn (fun _ -> Snap.Obsolete res) res\n            res\n\n    let WithInitOption sn =\n        match sn.State with\n        | Forever x -> CreateForever (Some x) // optimization\n        | Obsolete -> { State = Obsolete }\n        | Ready (v, _) ->\n            let res = CreateWithValue (Some v)\n            WhenObsolete sn res\n            res\n        | Waiting _ ->\n            let res = CreateWithValue None\n            When sn (fun _ -> Snap.Obsolete res) res\n            res\n\n    let Copy sn =\n        match sn.State with\n        | Forever _ \n        | Obsolete -> sn // optimization\n        | Ready (v, _) ->\n            let res = CreateWithValue v\n            WhenObsolete sn res\n            res\n        | Waiting _ ->\n            let res = Create ()\n            When sn (MarkDone res sn) res\n            res\n\n    let MapCachedBy eq prev fn sn =\n        let fn x =\n            match !prev with\n            | Some (x', y) when eq x x' -> y\n            | _ ->\n                let y = fn x\n                prev := Some (x, y)\n                y\n        Map fn sn\n\n    let Map2Opt1 fn x sn2 = Map (fun y -> fn x y) sn2\n    let Map2Opt2 fn y sn1 = Map (fun x -> fn x y) sn1\n    let Map2 fn sn1 sn2 =\n        match sn1.State, sn2.State with\n        | Forever x, Forever y -> CreateForever (fn x y) // optimization\n        | Forever x, _ -> Map2Opt1 fn x sn2 // optimize for known sn1\n        | _, Forever y -> Map2Opt2 fn y sn1 // optimize for known s2\n        | _ ->\n            let res = Create ()\n            let cont _ =\n                if not (IsDone res) then \n                    match ValueAndForever sn1, ValueAndForever sn2 with\n                    | Some (x, f1), Some (y, f2) ->\n                        if f1 && f2 then\n                            MarkForever res (fn x y)\n                        else\n                            MarkReady res (fn x y) \n                    | _ -> ()\n            When sn1 cont res\n            When sn2 cont res\n            res\n\n    let Map2Unit sn1 sn2 =\n        match sn1.State, sn2.State with\n        | Forever (), Forever () -> CreateForever () // optimization\n        | Forever (), _ -> sn2 // optimize for known sn1\n        | _, Forever () -> sn1 // optimize for known s2\n        | _ ->\n            let res = Create ()\n            let cont () =\n                if not (IsDone res) then \n                    match ValueAndForever sn1, ValueAndForever sn2 with\n                    | Some (_, f1), Some (_, f2) ->\n                        if f1 && f2 then\n                            MarkForever res ()\n                        else\n                            MarkReady res () \n                    | _ -> ()\n            When sn1 cont res\n            When sn2 cont res\n            res\n\n    let Map3Opt1 fn x y sn3   = Map (fun z -> fn x y z) sn3\n    let Map3Opt2 fn x z sn2   = Map (fun y -> fn x y z) sn2\n    let Map3Opt3 fn x sn2 sn3 = Map2 (fun y z -> fn x y z) sn2 sn3\n    let Map3Opt4 fn y z sn1   = Map (fun x -> fn x y z) sn1\n    let Map3Opt5 fn y sn1 sn3 = Map2 (fun x z -> fn x y z) sn1 sn3\n    let Map3Opt6 fn z sn1 sn2 = Map2 (fun x y -> fn x y z) sn1 sn2\n    let Map3 fn sn1 sn2 sn3 =\n        match sn1.State, sn2.State, sn3.State with\n        | Forever x, Forever y, Forever z -> CreateForever (fn x y z)\n        | Forever x, Forever y, _         -> Map3Opt1 fn x y sn3  \n        | Forever x, _,         Forever z -> Map3Opt2 fn x z sn2  \n        | Forever x, _,         _         -> Map3Opt3 fn x sn2 sn3\n        | _,         Forever y, Forever z -> Map3Opt4 fn y z sn1  \n        | _,         Forever y, _         -> Map3Opt5 fn y sn1 sn3\n        | _,         _,         Forever z -> Map3Opt6 fn z sn1 sn2    \n        | _,         _,         _         ->\n            let res = Create ()\n            let cont _ =\n                if not (IsDone res) then \n                    match ValueAndForever sn1, ValueAndForever sn2, ValueAndForever sn3 with\n                    | Some (x, f1), Some (y, f2), Some (z, f3) ->\n                        if f1 && f2 && f3 then\n                            MarkForever res (fn x y z)\n                        else\n                            MarkReady res (fn x y z) \n                    | _ -> ()\n            When sn1 cont res\n            When sn2 cont res\n            When sn3 cont res\n            res\n\n    let SnapshotOn sn1 sn2 =\n        let res = Create ()\n        let cont _ =\n            if not (IsDone res) then \n                match ValueAndForever sn1, ValueAndForever sn2 with\n                | Some (_, f1), Some (y, f2) ->\n                    if f1 || f2 then\n                        MarkForever res y \n                    else\n                        MarkReady res y\n                | _ -> ()\n        When sn1 cont res\n        WhenReady sn2 cont\n        res\n\n    let MapAsync fn snap =\n        let res = Create ()\n        When snap\n            (fun v -> Async.StartTo (fn v) (MarkDone res snap))\n            res\n        res\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\n#nowarn \"40\" // AsyncAwait let rec\n\nopen System.Collections.Generic\nopen WebSharper\ntype private JS = WebSharper.JavaScript.JS\n\n[<JavaScript; AbstractClass>]\ntype Var<'T>() =\n    abstract Get : unit -> 'T\n    abstract Set : 'T -> unit\n    abstract SetFinal : 'T -> unit\n    member this.Value\n        with [<Inline>] get() = this.Get()\n        and [<Inline>] set v = this.Set v\n    abstract Update : ('T -> 'T) -> unit\n    abstract UpdateMaybe : ('T -> 'T option) -> unit\n    abstract View : View<'T>\n    abstract Id : string\n\nand [<JavaScript>] View<'T> =\n    | View of (unit -> Snap<'T>)\n\n[<AutoOpen>]\nmodule ViewOptimization =\n    open WebSharper.JavaScript\n    [<Inline \"$x\">]\n    let V (x: unit -> Snap<'T>) = View x\n    [<Inline \"$x\">]\n    let (|V|) (x: View<'T>) = let (View v) = x in v\n    [<Inline \"$x\">]\n    let getSnapV (x: Snap<View<'T>>) = Snap.Map (|V|) x\n    [<Inline \"$x\">]\n    let getSnapF (x: 'A -> View<'T>) = x >> (|V|)\n    [<Inline \"null\">]\n    let jsNull<'T>() = Unchecked.defaultof<'T>\n    [<Inline \"Error().stack\">]\n    let jsStack<'T>() = \"\"\n    \n/// Var either holds a Snap or is in Const state.\n[<JavaScript>]\ntype ConcreteVar<'T>(isConst: bool, initSnap: Snap<'T>, initValue: 'T) =\n    inherit Var<'T>()\n\n    let mutable isConst = isConst\n    let mutable current = initValue\n    let mutable snap = initSnap\n    let view = V (fun () -> snap)\n    let id = Fresh.Int()\n\n    override this.Get() = current\n\n    override this.Set(v) =\n        if isConst then\n            printfn \"WebSharper.UI: invalid attempt to change value of a Var after calling SetFinal\"\n        else\n            Snap.MarkObsolete snap\n            current <- v\n            snap <- Snap.CreateWithValue v\n\n    override this.SetFinal(v) =\n        if isConst then\n            printfn \"WebSharper.UI: invalid attempt to change value of a Var after calling SetFinal\"\n        else\n            Snap.MarkObsolete snap\n            isConst <- true\n            current <- v\n            snap <- Snap.CreateForever v\n\n    override this.Update(f) =\n        this.Set (f (this.Get()))\n\n    override this.UpdateMaybe(f) =\n        match f (this.Get()) with\n        | None -> ()\n        | Some v -> this.Set(v)\n\n    override this.View = view\n\n    override this.Id = \"uinref\" + string id\n\nand [<JavaScript; Sealed>] Var private () =\n\n    [<Inline>]\n    static let (?) x f = WebSharper.JavaScript.Pervasives.(?) x f\n\n    [<Inline>]\n    static let (?<-) x f v = WebSharper.JavaScript.Pervasives.(?<-) x f v\n\n    static member Create v =\n        ConcreteVar<'T>(false, Snap.CreateWithValue v, v)\n        :> Var<'T>\n\n    static member CreateLogged (name: string) v =\n        if IsClient then\n            if not (JS.Global?UINVars) then\n                JS.Global?UINVars <- [||]\n            let res = Var.Create v\n            JS.Global?UINVars?push([| name; unbox res |])\n            res\n        else\n            Var.Create v\n\n    static member Create() =\n        ConcreteVar<unit>(false, Snap.CreateWithValue(), ())\n        :> Var<unit>\n\n    static member CreateWaiting<'T>() =\n        ConcreteVar<'T>(false, Snap.Create(), jsNull<'T>())\n        :> Var<'T>\n\n    [<Inline>]\n    static member Get (var: Var<'T>) =\n        var.Get()\n\n    static member Set (var: Var<'T>) value =\n        var.Set(value)\n\n    static member SetFinal (var: Var<'T>) value =\n        var.SetFinal(value)\n\n    static member Update var fn =\n        Var.Set var (fn (Var.Get var))\n\n    [<Inline>]\n    static member GetId (var: Var<'T>) =\n        var.Id\n\ntype [<JavaScript>] Updates = \n    {\n        [<Name \"c\">] mutable Current : View<unit>\n        [<Name \"s\">] mutable Snap : Snap<unit>\n        [<Name \"v\">] VarView : View<unit>\n    }\n\n    [<Inline>]\n    member this.View = this.VarView\n\n    static member Create v =\n        let mutable var = jsNull()\n        var <-\n            {\n                Current = v\n                Snap = jsNull()\n                VarView = \n                    let obs () =\n                        let mutable c = var.Snap\n                        if obj.ReferenceEquals(c, null) then\n                            let (V observe) = var.Current\n                            c <- observe() |> Snap.Copy\n                            var.Snap <- c\n                            Snap.WhenObsoleteRun c (fun () -> \n                                var.Snap <- jsNull())\n                            c\n                        else c\n                    \n                    V obs\n            }\n        var\n\n    member this.Value\n        with [<Inline>] get() = this.Current\n        and set v =\n            let sn = this.Snap\n            if not (obj.ReferenceEquals(sn, null)) then\n                Snap.MarkObsolete sn\n            this.Current <- v\n\ntype ViewNode<'A,'B> =\n    {\n        [<Name \"e\">] NValue : 'B\n        [<Name \"r\">] NVar : Var<'A>\n        [<Name \"w\">] NView : View<'A>\n    }\n\ntype LazyView<'T> =\n    {\n        [<Name \"c\">] mutable Current : Snap<'T>\n        [<Name \"o\">] mutable Observe : unit -> Snap<'T>  \n    } \n\n[<JavaScript>]\n[<Sealed>]\ntype View =\n\n    [<Inline>]\n    static member FromVar (var: Var<'T>) =\n        var.View\n\n    static member CreateLazy observe =\n        let lv =\n            {\n                Current = jsNull()\n                Observe = observe \n            }\n        let obs () =\n            let mutable c = lv.Current\n            if obj.ReferenceEquals(c, null) then\n                c <- lv.Observe()\n                lv.Current <- c\n                if Snap.IsForever c then \n                    lv.Observe <- jsNull()\n                else\n                    Snap.WhenObsoleteRun c (fun () -> \n                        lv.Current <- jsNull()) \n                c\n            else c\n        V obs\n\n    static member Map fn (V observe) =\n        View.CreateLazy (fun () ->\n            observe () |> Snap.Map fn)\n\n    static member MapCachedBy eq fn (V observe) =\n        let vref = ref None\n        View.CreateLazy (fun () ->\n            observe () |> Snap.MapCachedBy eq vref fn)\n\n    static member MapCached fn v =\n        View.MapCachedBy (=) fn v\n\n    static member Map2 fn (V o1) (V o2) =\n        View.CreateLazy (fun () ->\n            let s1 = o1 ()\n            let s2 = o2 ()\n            Snap.Map2 fn s1 s2)\n\n    static member Map2Unit (V o1) (V o2) =\n        View.CreateLazy (fun () ->\n            let s1 = o1 ()\n            let s2 = o2 ()\n            Snap.Map2Unit s1 s2)\n\n    static member Map3 fn (V o1) (V o2) (V o3) =\n        View.CreateLazy (fun () ->\n            let s1 = o1 ()\n            let s2 = o2 ()\n            let s3 = o3 ()\n            Snap.Map3 fn s1 s2 s3)\n\n    static member MapAsync fn (V observe) =\n        View.CreateLazy (fun () -> observe () |> Snap.MapAsync fn)\n\n    static member MapAsync2 fn v1 v2 =\n        View.Map2 fn v1 v2 |> View.MapAsync id\n\n    static member TryGet (V observe) =\n        Snap.TryGet (observe ())\n\n    static member Get (f: 'T -> unit) (V observe) =\n        let ok = ref false\n        let rec obs () =\n            Snap.WhenRun (observe ())\n                (fun v ->\n                    if not !ok then\n                        ok := true\n                        f v)\n                (fun () -> if not !ok then obs ())\n        obs ()\n\n    static member WithInit (x: 'T) (V observe) =\n        View.CreateLazy (fun () -> observe () |> Snap.WithInit x)\n\n    static member WithInitOption (V observe) =\n        View.CreateLazy (fun () -> observe () |> Snap.WithInitOption)\n\n    static member GetAsync v =\n        Async.FromContinuations (fun (ok, _, _) -> View.Get ok v)\n\n    static member SnapshotOn def (V o1) (V o2) =\n        let sInit = Snap.CreateWithValue def\n\n        let obs () =\n            let s1 = o1 ()\n            if Snap.IsObsolete sInit then\n                let s2 = o2 ()\n                Snap.SnapshotOn s1 s2\n            else\n                Snap.WhenObsolete s1 sInit\n                sInit\n\n        View.CreateLazy obs\n\n     // Collections --------------------------------------------------------------\n\n    static member MapSeqCachedBy<'A,'B,'K,'SeqA when 'K : equality and 'SeqA :> seq<'A>>\n            (key: 'A -> 'K) (conv: 'A -> 'B) (view: View<'SeqA>) =\n        // Save history only for t - 1, discard older history.\n        let state = ref (Dictionary())\n        view\n        |> View.Map (fun xs ->\n            let prevState = !state\n            let newState = Dictionary()\n            let result =\n                Seq.toArray xs\n                |> Array.mapInPlace (fun x ->\n                    let k = key x\n                    let res =\n                        if prevState.ContainsKey k\n                            then prevState.[k]\n                            else conv x\n                    newState.[k] <- res\n                    res)\n                :> seq<_>\n            state := newState\n            result)\n\n    static member MapSeqCached conv view =\n        View.MapSeqCachedBy (fun x -> x) conv view\n\n    static member ConvertSeqNode conv value =\n        let var = Var.Create value\n        let view = View.FromVar var\n        {\n            NValue = conv view\n            NVar = var\n            NView = view\n        }\n\n    static member MapSeqCachedViewBy<'A,'B,'K,'SeqA when 'K : equality and 'SeqA :> seq<'A>>\n            (key: 'A -> 'K) (conv: 'K -> View<'A> -> 'B) (view: View<'SeqA>) =\n        // Save history only for t - 1, discard older history.\n        let state = ref (Dictionary())\n        view\n        |> View.Map (fun xs ->\n            let prevState = !state\n            let newState = Dictionary()\n            let result =\n                Seq.toArray xs\n                |> Array.mapInPlace (fun x ->\n                    let k = key x\n                    let node =\n                        if prevState.ContainsKey k then\n                            let n = prevState.[k]\n                            Var.Set n.NVar x\n                            n\n                        else\n                            View.ConvertSeqNode (fun v -> conv k v) x\n                    newState.[k] <- node\n                    node.NValue)\n                :> seq<_>\n            state := newState\n            result)\n\n    static member MapSeqCachedView conv view =\n        View.MapSeqCachedViewBy (fun x -> x) (fun _ v -> conv v) view\n\n    [<Inline>]\n    static member Convert<'A, 'B when 'A : equality> (f: 'A -> 'B) v =\n        View.MapSeqCached f v\n\n    [<Inline>]\n    static member ConvertBy<'A, 'B, 'K when 'K : equality> (k: 'A -> 'K) (f: 'A -> 'B) v =\n        View.MapSeqCachedBy k f v\n\n    [<Inline>]\n    static member ConvertSeq<'A, 'B when 'A : equality> (f: View<'A> -> 'B) v =\n        View.MapSeqCachedView f v\n\n    [<Inline>]\n    static member ConvertSeqBy<'A, 'B, 'K when 'K : equality> (k: 'A -> 'K) (f: 'K -> View<'A> -> 'B) v =\n        View.MapSeqCachedViewBy k f v\n\n  // More cominators ------------------------------------------------------------\n\n    static member Join (V observe : View<View<'T>>) : View<'T> =\n        View.CreateLazy (fun () ->\n            Snap.Join (getSnapV (observe ())))\n\n    static member Bind (fn: 'A -> View<'B>) view =\n        View.Join (View.Map fn view)\n\n    static member JoinInner (V observe : View<View<'T>>) : View<'T> =\n        View.CreateLazy (fun () ->\n            Snap.JoinInner (getSnapV (observe ())))\n\n    static member BindInner fn view =\n        View.JoinInner (View.Map fn view)\n\n    static member UpdateWhile def v1 v2 =\n        let value = ref def\n        View.BindInner (fun pred ->\n            if pred then\n                View.Map (fun v ->\n                    value := v\n                    v\n                ) v2   \n            else View.Const (!value) \n        ) v1\n\n    static member Sequence views =\n        View.CreateLazy(fun () ->\n            views\n            |> Seq.map (fun (V observe) -> observe ())\n            |> Snap.Sequence)\n\n    static member Const x =\n        let o = Snap.CreateForever x\n        V (fun () -> o)\n\n    static member ConstAsync a =\n        let o = Snap.CreateForeverAsync a\n        V (fun () -> o)\n\n    static member TryWith (f: exn -> View<'T>) (V observe: View<'T>) : View<'T> =\n        View.CreateLazy (fun () ->\n            try\n                observe ()\n            with exn ->\n                let (V obs) = f exn\n                obs ()\n        )\n\n    static member TryFinally (f: unit -> unit) (V observe: View<'T>) : View<'T> =\n        View.CreateLazy (fun () ->\n            try\n                observe ()\n            finally\n                f ()\n        )\n\n    static member Sink act (V observe) =\n        let rec loop () =\n            let sn = observe ()\n            Snap.WhenRun sn act (fun () ->\n                Async.Schedule loop)\n        Async.Schedule loop\n\n    static member RemovableSink act (V observe) =\n        let cont = ref true\n        let rec loop () =\n            let sn = observe ()\n            Snap.WhenRun sn\n                (fun x -> if !cont then act x)\n                (fun () -> if !cont then Async.Schedule loop)\n        Async.Schedule loop\n        fun () -> cont := false\n\n    static member AsyncAwait filter view =\n        Async.FromContinuations <| fun (ok, _, _) ->\n            let rec remove =\n                View.RemovableSink (fun value ->\n                    if filter value then\n                        remove ()\n                        ok value\n                ) view\n            ()\n\n    static member Apply fn view =\n        View.Map2 (fun f x -> f x) fn view\n\ntype Var with\n\n    [<JavaScript>]\n    static member Lens (var: Var<_>) get update =\n        let id = Fresh.Id()\n        let view = var.View |> View.Map get\n\n        { new Var<'V>() with\n\n            member this.Get() =\n                get (var.Get())\n\n            member this.Set(v) =\n                var.Update(fun t -> update t v)\n\n            member this.SetFinal(v) =\n                this.Set(v)\n\n            member this.Update(f) =\n                var.Update(fun t -> update t (f (get t)))\n\n            member this.UpdateMaybe(f) =\n                var.UpdateMaybe(fun t -> Option.map (fun x -> update t x) (f (get t)))\n\n            member this.View =\n                view\n\n            member this.Id =\n                id\n        }\n\n    static member MapLens<'A, 'B, 'K when 'K : equality> (getKey: 'A -> 'K) (f: Var<'A> -> 'B) (var: Var<list<'A>>) : View<seq<'B>> =\n        var.View |> View.MapSeqCachedViewBy getKey (fun k v ->\n            let id = Fresh.Id()\n            let isThis a =\n                getKey a = k\n            f { new Var<'A>() with\n\n                member this.Get() =\n                    List.find isThis var.Value\n\n                member this.Set(v) =\n                    var.Update (List.replaceFirst isThis (fun _ -> v))\n\n                member this.SetFinal(v) =\n                    this.Set(v)\n\n                member this.Update(f) =\n                    var.Update(List.replaceFirst isThis f)\n\n                member this.UpdateMaybe(f) =\n                    var.Update(List.maybeReplaceFirst isThis f)\n\n                member this.View =\n                    v\n\n                member this.Id =\n                    id\n            }\n        )\n\n\n// These methods apply to any View<'A>, so we can use `type View with`\n// and they'll be compiled as normal instance methods on View<'A>.\ntype View<'T> with\n\n    [<JavaScript; Inline>]\n    member v.Map f = View.Map f v\n\n    //[<JavaScript; Inline>]\n    //member v.Map (f: System.Func<_, 'B>) =\n    //    View.Map (FSharpConvert.Fun f) v\n\n    [<JavaScript; Inline>]\n    member v.MapAsync f = View.MapAsync f v\n\n    //member v.MapAsync (f: System.Func<_, System.Threading.Tasks.Task<'B>>) =\n    //    v |> View.MapAsync (fun a ->\n    //        async {\n    //            let! res = f.Invoke(a) |> Async.AwaitTask\n    //            return res\n    //        })\n\n    [<JavaScript; Inline>]\n    member v.Bind f = View.Bind f v\n\n    [<JavaScript; Inline>]\n    member v.BindInner f = View.BindInner f v\n\n    //[<JavaScript; Inline>]\n    //member v.Bind (f: System.Func<_, View<'B>>) =\n    //    View.Bind (FSharpConvert.Fun f) v\n\n    [<JavaScript; Inline>]\n    member v.SnapshotOn init v' = View.SnapshotOn init v' v\n\n    [<JavaScript; Inline>]\n    member v.UpdateWhile init vPred = View.UpdateWhile init vPred v\n\n    [<JavaScript; Macro(typeof<Macros.VProp>)>]\n    member v.V = failwith \"View<'T>.V can only be called in an argument to a V-enabled function or if 'T = Doc.\" : 'T\n\ntype Var<'T> with\n\n    [<Macro(typeof<Macros.VProp>)>]\n    member this.V = this.View.V\n\n    [<JavaScript; Inline>]\n    member var.Lens get update =\n        Var.Lens var get update\n\n[<JavaScript>]\ntype FromView<'T>(view: View<'T>, set: 'T -> unit) =\n    inherit Var<'T>()\n\n    let id = Fresh.Int()\n    let mutable current =\n        match View.TryGet view with\n        | Some x -> x\n        | None -> jsNull<'T>()\n    let view = view |> View.Map (fun x -> current <- x; x)\n\n    override this.View = view\n\n    override this.Get() = current\n\n    override this.Set(x) = set x\n\n    override this.UpdateMaybe(f) =\n        view |> View.Get (fun x ->\n            match f x with\n            | None -> ()\n            | Some x -> set x\n        )\n\n    override this.Update(f) =\n        view |> View.Get (f >> set)\n\n    override this.SetFinal(x) = set x\n\n    override this.Id = \"uinref\" + string id\n\ntype Var with\n\n    [<JavaScript; Inline>]\n    static member Make view set =\n        FromView(view, set) :> Var<_>\n\ntype ViewBuilder =\n    | B\n\n    [<JavaScript; Inline>]\n    member b.Bind(x, f) = View.Bind f x\n\n    [<JavaScript; Inline>]\n    member b.Return x = View.Const x\n\n    [<JavaScript; Inline>]\n    member b.ReturnFrom(v: View<'T>) = v\n\n    [<JavaScript; Inline>]\n    member b.TryWith(v, f) = View.TryWith f v\n\n    [<JavaScript; Inline>]\n    member b.TryFinally(v, f) = View.TryFinally f v\n\ntype View with\n    [<JavaScript>]\n    static member Do = B\n\n[<Sealed; JavaScript>]\ntype Submitter<'T> (input: View<'T>, init: 'T) =\n    let var = Var.Create ()\n    let view = View.SnapshotOn init var.View input\n\n    [<Inline>]\n    member this.View = view\n\n    member this.Trigger() = var.Value <- ()\n\n    [<Inline>]\n    member this.Input = input\n\n[<Sealed; JavaScript>]\ntype Submitter =\n\n    [<Inline>]\n    static member CreateDefault input =\n        Submitter<_>(input, Unchecked.defaultof<_>)\n\n    [<Inline>]\n    static member Create input init =\n        Submitter<_>(input, init)\n\n    static member CreateOption input =\n        Submitter<_>(View.Map Some input, None)\n\n    [<Inline>]\n    static member View (s: Submitter<_>) =\n        s.View\n\n    [<Inline>]\n    static member Trigger (s: Submitter<_>) =\n        s.Trigger()\n\n    [<Inline>]\n    static member Input (s: Submitter<_>) =\n        s.Input\n\n[<AutoOpen>]\nmodule V =\n\n    [<Macro(typeof<Macros.V>)>]\n    let V (x: 'T) = View.Const x\n\n[<assembly:System.Runtime.CompilerServices.Extension>]\ndo ()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\n\n[<JavaScript>]\ntype Key =\n    | Key of int\n\n    static member Fresh () = Key (Fresh.Int ())\n\n[<JavaScript>]\ntype Model<'I,'M>(var: Var<'M>, view: View<'I>) =\n\n    new (proj: Func<'M, 'I>, init: 'M) =\n        let var = Var.Create init\n        let view = View.Map proj.Invoke var.View\n        Model(var, view)\n\n    [<Inline>]\n    member this.Var = var\n    [<Inline>]\n    member this.View = view\n\n[<JavaScript>]\n[<Sealed>]\ntype Model =\n\n    static member Create proj init =\n        Model(Func<_,_>(proj), init)\n\n    static member Update update (m: Model<'I, 'M>) =\n        Var.Update m.Var (fun x -> update x; x)\n\n    [<Inline>]\n    static member View (m: Model<'I, 'M>) =\n        m.View\n\ntype Storage<'T> =\n    [<Name \"SAppend\">]\n    abstract member Append : appending: 'T -> ``to``: 'T[] -> 'T[]\n    [<Name \"SAppendMany\">]\n    abstract member AppendMany : appending: seq<'T> -> ``to``: 'T[] -> 'T[]\n    [<Name \"SPrepend\">]\n    abstract member Prepend : appending: 'T -> ``to``: 'T[] -> 'T[]\n    [<Name \"SPrependMany\">]\n    abstract member PrependMany : appending: seq<'T> -> ``to``: 'T[] -> 'T[]\n    [<Name \"SInit\">]\n    abstract member Init : unit -> 'T[]\n    [<Name \"SRemoveIf\">]\n    abstract member RemoveIf : ('T -> bool) -> 'T [] -> 'T[]\n    [<Name \"SSetAt\">]\n    abstract member SetAt : int -> 'T -> 'T[] -> 'T[]\n    [<Name \"SSet\">]\n    abstract member Set : 'T seq -> 'T[]\n\ntype Serializer<'T> =\n    {\n        Encode : 'T -> obj\n        Decode : obj -> 'T\n    }\n\n[<JavaScript>]\nmodule Serializer =\n    open WebSharper\n    open WebSharper.JavaScript\n\n    let Default =\n        {\n            Encode = box\n            Decode = unbox\n        }\n\n    [<Inline>]\n    let Typed =\n        {\n            Encode = WebSharper.Json.Encode<'T>\n            Decode = WebSharper.Json.Decode<'T>\n        }\n\n[<JavaScript>]\nmodule Storage =\n    open WebSharper\n    open WebSharper.JavaScript\n    \n    type private ArrayStorage<'T>(init) =\n\n        interface Storage<'T> with\n            member x.Append i arr = arr.JS.Push i |> ignore; arr\n            member x.AppendMany is arr = arr.JS.Push (Array.ofSeqNonCopying is) |> ignore; arr\n            member x.Prepend i arr = arr.JS.Unshift i |> ignore; arr\n            member x.PrependMany is arr = arr.JS.Unshift (Array.ofSeqNonCopying is) |> ignore; arr\n            member x.Init () = init\n            member x.RemoveIf pred arr = Array.filter (fun i -> not (pred i)) arr\n            member x.SetAt idx elem arr = arr.[idx] <- elem; arr\n            member x.Set coll = Seq.toArray coll\n\n    type private LocalStorageBackend<'T>(id : string, serializer : Serializer<'T>) =\n        let storage = JS.Window.LocalStorage\n        let set (arr : 'T[]) = \n            storage.SetItem(id, arr |> Array.map serializer.Encode |> Json.Stringify)\n            arr\n        let clear () = storage.RemoveItem(id)\n\n        interface Storage<'T> with\n            member x.Append i arr = arr.JS.Push i |> ignore; set arr\n            member x.AppendMany is arr = arr.JS.Push (Array.ofSeqNonCopying is) |> ignore; set arr\n            member x.Prepend i arr = arr.JS.Unshift i |> ignore; set arr\n            member x.PrependMany is arr = arr.JS.Unshift (Array.ofSeqNonCopying is) |> ignore; set arr\n\n            member x.Init () =\n                let item = storage.GetItem(id)\n                if item = null then [||]\n                else \n                    try\n                        let arr = As<obj []> <| Json.Parse(item)\n                        arr |> Array.map serializer.Decode\n                    with _ -> [||]\n\n            member x.RemoveIf pred arr = set <| Array.filter (fun i -> not (pred i)) arr\n            member x.SetAt idx elem arr = arr.[idx] <- elem; set arr\n            member x.Set coll = set <| Seq.toArray coll\n\n    let InMemory init =\n        new ArrayStorage<_>(init) :> Storage<_>\n\n    let LocalStorage id serializer =\n        new LocalStorageBackend<_>(id, serializer) :> Storage<_>\n\ntype ListModelState<'T> =\n    [<Inline>]\n    member this.Length =\n        JavaScript.Pervasives.As<'T[]>(this).Length\n    [<Inline>]\n    member this.Item\n        with get i = JavaScript.Pervasives.As<'T[]>(this).[i]\n    [<Inline>]\n    member this.ToArray() =                             \n        Array.copy (JavaScript.Pervasives.As<'T[]>(this))\n    [<Inline>]\n    member this.ToArray(pred: Predicate<'T>) =\n        Array.filter pred.Invoke (JavaScript.Pervasives.As<'T[]>(this))\n    interface seq<'T> with\n        member this.GetEnumerator() = (JavaScript.Pervasives.As<'T[]>(this)).GetEnumerator()\n        member this.GetEnumerator() = (JavaScript.Pervasives.As<'T seq>(this)).GetEnumerator()\n\n[<JavaScript>]\ntype ListModel<'Key, 'T when 'Key : equality>\n    (\n        key : System.Func<'T, 'Key>,\n        var: Var<'T[]>,\n        storage : Storage<'T>\n    ) =\n\n    let v = var.View.Map(fun x -> Array.copy x :> _ seq)\n           \n    let it = Dictionary<'Key, Snap<option<'T>>>()\n\n    new (key: System.Func<'T, 'Key>, init: seq<'T>) =\n        let init = Seq.toArray init\n        ListModel<'Key, 'T>(key, Var.Create init, Storage.InMemory init)\n\n    new (key: System.Func<'T, 'Key>) =\n        ListModel<'Key, 'T>(key, [||])\n\n    new (key: System.Func<'T, 'Key>, storage: Storage<'T>) =\n        let var =\n            Seq.distinctBy key.Invoke (storage.Init ())\n            |> Seq.toArray\n            |> Var.Create\n        ListModel<'Key, 'T>(key, var, storage)\n\n    [<Inline>]\n    member this.key x = key.Invoke x\n    [<Inline>]\n    member this.Var = var\n    [<Inline>]\n    member this.Storage = storage\n    [<Inline>]\n    member this.View = v\n    [<Inline>]\n    member this.ViewState = JavaScript.Pervasives.As<View<ListModelState<'T>>> var.View\n    [<Inline>]\n    member this.itemSnaps = it\n\n    interface seq<'T> with\n        member this.GetEnumerator() =\n            (Seq.ofArray var.Value).GetEnumerator()\n\n        member this.GetEnumerator() =\n            var.Value.GetEnumerator()\n\n[<JavaScript>]\nmodule ListModels =\n               \n    let Contains keyFn item xs =\n        let t = keyFn item\n        Array.exists (fun it -> keyFn it = t) xs\n\ntype ListModel<'Key,'T when 'Key : equality> with\n\n    [<Inline>]\n    member m.Key x = m.key x\n\n    [<Inline>]\n    member m.Add item =\n        m.Append item\n\n    member m.ObsoleteKey key =\n        match m.itemSnaps.TryGetValue(key) with\n        | true, sn ->\n            Snap.MarkObsolete sn \n            m.itemSnaps.Remove key |> ignore\n        | _ -> ()\n\n    member m.ObsoleteAll() =\n        m.itemSnaps |> Seq.iter (fun ksn -> Snap.MarkObsolete ksn.Value)\n        m.itemSnaps.Clear()\n\n    member m.Append item =\n        let v = m.Var.Value\n        let t = m.Key item\n        match Array.tryFindIndex (fun it -> m.Key it = t) v with\n        | None -> m.Var.Value <- m.Storage.Append item v\n        | Some index -> \n            m.Var.Value <- m.Storage.SetAt index item v\n        m.ObsoleteKey t\n\n    member m.AppendMany items =\n        let toAppend = ResizeArray()\n        let v =\n            (m.Var.Value, items)\n            ||> Seq.fold (fun v item ->\n                let t = m.Key item\n                m.ObsoleteKey t\n                match Array.tryFindIndex (fun it -> m.Key it = t) v with\n                | Some index ->\n                    m.Storage.SetAt index item v\n                | None -> toAppend.Add item; v)\n        m.Var.Value <- m.Storage.AppendMany toAppend v\n\n    member m.Prepend item =\n        let v = m.Var.Value\n        let t = m.Key item\n        match Array.tryFindIndex (fun it -> m.Key it = t) v with\n        | None -> m.Var.Value <- m.Storage.Prepend item v\n        | Some index -> \n            m.Var.Value <- m.Storage.SetAt index item v\n        m.ObsoleteKey t\n\n    member m.PrependMany items =\n        let toPrepend = ResizeArray()\n        let v =\n            (m.Var.Value, items)\n            ||> Seq.fold (fun v item ->\n                let t = m.Key item\n                m.ObsoleteKey t\n                match Array.tryFindIndex (fun it -> m.Key it = t) v with\n                | Some index -> \n                    m.Storage.SetAt index item v\n                | None -> toPrepend.Add item; v)\n        m.Var.Value <- m.Storage.PrependMany toPrepend v\n\n    member m.Remove item =\n        let v = m.Var.Value\n        if ListModels.Contains m.key item v then\n            let keyFn = m.key\n            let k = keyFn item\n            m.Var.Value <- m.Storage.RemoveIf (fun i -> keyFn i = k) v\n            m.ObsoleteKey k\n\n    member m.RemoveBy (f: 'T -> bool) =\n        for v in m.Var.Value do\n            if f v then\n                m.ObsoleteKey (m.key v)\n        m.Var.Value <- m.Storage.RemoveIf f m.Var.Value\n\n    member m.RemoveByKey key =\n        m.Var.Value <- m.Storage.RemoveIf (fun i -> m.Key i = key) m.Var.Value\n        m.ObsoleteKey key\n\n    member m.Iter fn =\n        Array.iter fn m.Var.Value\n\n    member m.Set lst =\n        m.Var.Value <- m.Storage.Set lst\n        m.ObsoleteAll()\n\n    member m.ContainsKey key =\n        Array.exists (fun it -> m.key it = key) m.Var.Value\n\n    member m.ContainsKeyAsView key =\n        m.Var.View |> View.Map (Array.exists (fun it -> m.key it = key))\n\n    member m.Find pred =\n        Array.find pred m.Var.Value\n\n    member m.TryFind pred =\n        Array.tryFind pred m.Var.Value\n\n    member m.FindAsView pred =\n        m.Var.View |> View.Map (Array.find pred)\n\n    member m.TryFindAsView pred =\n        m.Var.View |> View.Map (Array.tryFind pred)\n\n    member m.FindByKey key =\n        Array.find (fun it -> m.key it = key) m.Var.Value\n\n    member m.TryFindByKey key =\n        Array.tryFind (fun it -> m.key it = key) m.Var.Value\n\n    member m.TryFindByKeyAsView key =\n        ViewOptimization.V (fun () -> \n            match m.itemSnaps.TryGetValue(key) with\n            | true, snap -> snap                \n            | _ ->\n                let it = m.TryFindByKey(key)\n                let sn = Snap.CreateWithValue it\n                m.itemSnaps.Add(key, sn)\n                sn\n        )\n\n    member m.FindByKeyAsView key =\n        m.TryFindByKeyAsView key |> View.Map Option.get\n\n    member m.UpdateAll fn =\n        m.Var.Update <| fun a ->\n            a |> Array.iteri (fun i x ->\n                fn x |> Option.iter (fun y -> a.[i] <- y))\n            m.Storage.Set a\n        m.ObsoleteAll()\n\n    member m.UpdateBy fn key =\n        let v = m.Var.Value\n        match Array.tryFindIndex (fun it -> m.key it = key) v with\n        | None -> ()\n        | Some index ->\n            match fn v.[index] with\n            | None -> ()\n            | Some value ->\n                m.Var.Value <- m.Storage.SetAt index value v\n                m.ObsoleteKey key\n\n    [<Inline>]\n    member m.UpdateByU(fn, key) =\n        m.UpdateBy fn key\n\n    member m.Clear () =\n        m.Var.Value <- m.Storage.Set Seq.empty\n        m.ObsoleteAll()\n\n    member m.Length =\n        m.Var.Value.Length\n\n    member m.LengthAsView =\n        m.Var.View |> View.Map (fun arr -> arr.Length)\n\n    member private m.LensInto'(get: 'T -> 'V, update: 'T -> 'V -> 'T, key : 'Key, view: View<'V>) : Var<'V> =\n        let id = Fresh.Id()\n    \n        { new Var<'V>() with\n\n            member r.Get() =\n                m.FindByKey key |> get\n\n            member r.Set(v) =\n                m.UpdateBy (fun i -> Some (update i v)) key\n\n            member r.SetFinal(v) =\n                r.Set(v)\n\n            member r.Update(f) =\n                m.UpdateBy (fun i -> Some (update i (f (get i)))) key\n\n            member r.UpdateMaybe(f) =\n                m.UpdateBy (fun i -> Option.map (fun v -> update i v) (f (get i))) key\n\n            member r.View =\n                view\n\n            member r.Id =\n                id\n        }\n\n    member m.LensInto (get: 'T -> 'V) (update: 'T -> 'V -> 'T) (key : 'Key) : Var<'V> =\n        let view = m.FindByKeyAsView(key) |> View.Map get\n        m.LensInto'(get, update, key, view)\n\n    [<Inline>]\n    member m.LensIntoU<'V> (get: 'T -> 'V, update: 'T -> 'V -> 'T, key : 'Key) : Var<'V> =\n        m.LensInto get update key\n\n    member m.Lens (key: 'Key) =\n        m.LensInto id (fun _ -> id) key\n\n    member m.Value\n        with [<Inline>] get () = m.Var.Value :> seq<_>\n        and [<Inline>] set v = m.Set(v)\n\n    [<Inline>]\n    member m.Map (f: 'T -> 'V) : View<seq<'V>> =\n        View.MapSeqCachedBy m.key f m.ViewState\n\n    [<Inline>]\n    member m.Map (f: 'Key -> View<'T> -> 'V) : View<seq<'V>> =\n        View.MapSeqCachedViewBy m.key f m.ViewState\n\n    member m.MapLens (f: 'Key -> Var<'T> -> 'V) =\n        let get k v =\n            f k (m.LensInto'(id, (fun _ -> id), k, v))\n        View.MapSeqCachedViewBy m.key get m.ViewState\n\n[<JavaScript>]\ntype ListModel =\n\n    static member CreateWithStorage<'Key,'T when 'Key : equality>\n            (key: 'T -> 'Key) (storage : Storage<'T>) =\n        ListModel<'Key, 'T>(key, storage)\n\n    static member Create<'Key, 'T when 'Key : equality> (key: 'T -> 'Key) init =\n        ListModel.CreateWithStorage key (Storage.InMemory <| Seq.toArray init)\n\n    static member FromSeq init =\n        ListModel.Create id init\n\n    static member Wrap<'Key, 'T, 'U when 'Key : equality>\n            (underlying: ListModel<'Key, 'U>)\n            (extract: 'T -> 'U)\n            (createItem: 'U -> 'T)\n            (updateItem: 'T -> 'U -> 'T) =\n        let state = ref (Dictionary<'Key, 'T>())\n        let init =\n            underlying.Var.Value |> Array.map (fun u ->\n                let t = createItem u\n                (!state).[underlying.Key u] <- t\n                t)\n        let var : Var<'T[]> =\n            underlying.Var.Lens\n                <| fun us ->\n                    let newState = Dictionary<'Key, 'T>()\n                    let ts =\n                        us |> Array.map (fun u ->\n                            let k = underlying.Key u\n                            let t =\n                                if (!state).ContainsKey(k) then\n                                    updateItem (!state).[k] u\n                                else\n                                    createItem u\n                            newState.[k] <- t\n                            t\n                        )\n                    state := newState\n                    ts\n                <| fun us ts ->\n                    let newState = Dictionary<'Key, 'T>()\n                    let us =\n                        ts |> Array.map (fun t ->\n                            let u = extract t\n                            newState.[underlying.Key u] <- t\n                            u)\n                    state := newState\n                    us\n        ListModel<'Key, 'T>(Func<_,_>(extract >> underlying.Key), var, Storage.InMemory init)\n\n    [<Inline>]\n    static member View (m: ListModel<_,_>) =\n        m.View\n\n    [<Inline>]\n    static member ViewState (m: ListModel<_,_>) =\n        m.ViewState\n\n    [<Inline>]\n    static member Key (m: ListModel<_,_>) =\n        m.key\n\n    [<Inline>]\n    static member Map f (m: ListModel<_, _>) =\n        View.MapSeqCachedBy m.key f m.ViewState\n\n    [<Inline>]\n    static member MapView f (m: ListModel<_, _>) =\n        View.MapSeqCachedViewBy m.key f m.ViewState\n\n    [<Inline>]\n    static member MapLens f (m: ListModel<_, _>) =\n        m.MapLens f\n\ntype ListModel<'Key,'T when 'Key : equality> with\n\n    member this.Wrap extract wrap update =\n        ListModel.Wrap this extract wrap update\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System.Runtime.CompilerServices\nopen WebSharper\nopen WebSharper.JavaScript\ntype private KV<'K, 'V> = System.Collections.Generic.KeyValuePair<'K, 'V>\n\n[<AutoOpen>]\nmodule VarModule =\n\n    [<Macro(typeof<Macros.LensFunction>)>]\n    let Lens (x: 'T) = Var.Create x\n\n// These methods apply to specific types of View (such as View<seq<'A>> when 'A : equality)\n/// so we need to use C#-style extension methods.\n[<Extension; JavaScript>]\ntype ReactiveExtensions() =\n\n    [<Extension; Inline>]\n    static member MapCached (v, f) = View.MapCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<seq<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<seq<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<seq<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<seq<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<list<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<list<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<list<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<list<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<array<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<array<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<array<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<array<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<ListModelState<'A>>, f: 'A -> 'B) = View.MapSeqCached f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<ListModelState<'A>>, k: 'A -> 'K, f: 'A -> 'B) = View.MapSeqCachedBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B when 'A : equality>\n        (v: View<ListModelState<'A>>, f: View<'A> -> 'B) = View.MapSeqCachedView f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality>\n        (v: View<ListModelState<'A>>, k: 'A -> 'K, f: 'K -> View<'A> -> 'B) = View.MapSeqCachedViewBy k f v\n\n    [<Extension; Inline>]\n    static member MapSeqCached<'A, 'B, 'K when 'K : equality and 'K : comparison>\n        (v: View<Map<'K, 'A>>, f: 'K -> View<'A> -> 'B) =\n        View.MapSeqCachedViewBy\n            (fun (kv: KV<'K, 'A>) -> kv.Key)\n            (fun k v -> f k (View.Map (fun (kv: KV<'K, 'A>) -> kv.Value) v))\n            v\n\n    [<Extension; Macro(typeof<Macros.LensMethod>)>]\n    static member LensAuto<'T, 'U>(ref: Var<'T>, getter: 'T -> 'U) = X<Var<'U>>\n\n    [<Extension; Inline>]\n    static member MapLens<'A, 'B, 'K when 'K : equality>(v: Var<list<'A>>, k: 'A -> 'K, f: Var<'A> -> 'B) = Var.MapLens k f v\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen WebSharper\nopen WebSharper.JavaScript\nopen System.Runtime.InteropServices\n\ntype Time = double\ntype NormalizedTime = double\n\n// Interpolation --------------------------------------------------------------\n\ntype Interpolation<'T> =\n    [<Name \"Interpolate\">]\n    abstract Interpolate : NormalizedTime -> 'T -> 'T -> 'T\n\n[<JavaScript>]\ntype DoubleInterpolation =\n    | DoubleInterpolation\n\n    interface Interpolation<double> with\n        member d.Interpolate t x y =\n            x + t * (y - x)\n\n[<JavaScript>]\n[<Sealed>]\ntype Interpolation =\n    static member Double = DoubleInterpolation :> Interpolation<_>\n\n// Easing ---------------------------------------------------------------------\n\n[<JavaScript>]\ntype Easing (transformTime : Converter<NormalizedTime, NormalizedTime>) =\n\n    member this.TransformTime t = transformTime.Invoke t\n    static member Custom f = Easing (fun t -> f t)\n\n[<JavaScript>]\nmodule Easings =\n\n    let CubicInOut =\n        let f t =\n            let t2 = t * t\n            let t3 = t2 * t\n            3. * t2 - 2. * t3\n        Easing.Custom f\n\ntype Easing with\n    static member CubicInOut = Easings.CubicInOut\n\n// Animation ------------------------------------------------------------------\n\ntype Anim<'T> =\n    private {\n        Compute : Time -> 'T\n        Duration : Time\n    }\n\ntype Animation =\n    | Finally of (unit -> unit)\n    | Work of Anim<unit>\n\n[<JavaScript>]\n[<Name \"An\">]\ntype Anim =\n    | Anim of AppendList<Animation>\n\n[<JavaScript>]\nmodule Anims =\n\n    let List (Anim xs) =\n        xs\n\n    let Finalize (Anim all) =\n        AppendList.ToArray all\n        |> Array.iter (function\n            | Finally f -> f ()\n            | _ -> ())\n\n    let Def d f =\n        { Compute = f; Duration = d}\n\n    let Const v =\n        Def 0. (fun t -> v)\n\n    // \"Prolongs\" an animation to the given time by adding in several\n    // no-ops after the animation finishes.\n    let Prolong nextDuration anim =\n        let comp = anim.Compute\n        let dur = anim.Duration\n        let last = lazy anim.Compute anim.Duration\n        let compute t = if t >= dur then last.Value else comp t\n\n        {\n            Compute = compute\n            Duration = nextDuration\n        }\n\n    let ConcatActions xs =\n        let xs = Array.ofSeqNonCopying xs\n        match xs.Length with\n        | 0 -> Const ()\n        | 1 -> xs.[0]\n        | _ ->\n            let dur = xs |> Seq.map (fun anim -> anim.Duration) |> Seq.max\n            let xs = Array.map (Prolong dur) xs\n            Def dur (fun t -> Array.iter (fun anim -> anim.Compute t) xs)\n\n    let Actions (Anim all) =\n        AppendList.ToArray all\n        |> Array.choose (function\n            | Work w -> Some w\n            | _ -> None)\n        |> ConcatActions\n\n    let mutable UseAnimations = true\n\ntype Anim with\n\n    static member UseAnimations \n        with get() = Anims.UseAnimations\n        and set v = Anims.UseAnimations <- v \n\n    static member Append (Anim a) (Anim b) =\n        Anim (AppendList.Append a b)\n\n    static member Concat xs =\n        xs\n        |> Seq.map Anims.List\n        |> AppendList.Concat\n        |> Anim\n\n    static member Const v =\n        Anims.Const v\n\n    static member Simple (inter: Interpolation<'T>) (easing: Easing) dur x y=\n        {\n            Duration = dur\n            Compute = fun t ->\n                let t = easing.TransformTime (t / dur)\n                inter.Interpolate t x y\n        }\n\n    static member Delayed (inter: Interpolation<'T>) (easing: Easing) dur delay x y =\n        {\n            Duration = dur + delay\n            Compute = fun t ->\n              //  JavaScript.Log <| \"T: \" + (string t) + \", delay: \" + (string delay)\n                if t <= delay then\n                    x\n                else\n                    let normalisedTime = easing.TransformTime ((t - delay) / dur)\n                    inter.Interpolate normalisedTime x y\n        }\n\n    static member Map f anim =\n        Anims.Def anim.Duration (anim.Compute >> f)\n\n    static member Pack anim =\n        Anim (AppendList.Single (Work anim))\n\n    static member Play anim =\n        async {\n            do! Anims.Actions anim\n                |> Anim.Run ignore\n            return Anims.Finalize anim\n        }\n\n    static member Run k anim =\n        let dur = anim.Duration\n        if dur = 0. then async.Zero() else\n        Async.FromContinuations <| fun (ok, _, _) ->\n            let rec loop start now =\n                let t = now - start\n                k (anim.Compute t)\n                if t <= dur then\n                    JS.RequestAnimationFrame (fun t -> loop start t) |> ignore\n                else ok ()\n            JS.RequestAnimationFrame (fun t -> loop t t) |> ignore\n\n    static member WhenDone f main =\n        main\n        |> Anim.Append (Anim (AppendList.Single (Finally f)))\n\n    static member Empty =\n        Anim AppendList.Empty\n\n// Transitions ----------------------------------------------------------------\n\ntype TFlags =\n    | TTrivial = 0\n    | TChange = 1\n    | TEnter = 2\n    | TExit = 4\n\n[<JavaScript>]\ntype Trans<'T>\n    (\n        change: Func<'T, 'T, Anim<'T>>,\n        enter: Func<'T, Anim<'T>>,\n        exit: Func<'T, Anim<'T>>,\n        flags: TFlags\n    ) =\n\n    new () =\n        Trans(\n            (fun x y -> Anim.Const y),\n            (fun t -> Anim.Const t),\n            (fun t -> Anim.Const t),\n            TFlags.TTrivial\n        )\n\n    new (ch: Func<'T, 'T, Anim<'T>>) =\n        Trans(\n            ch,\n            (fun t -> Anim.Const t),\n            (fun t -> Anim.Const t),\n            TFlags.TChange\n        )\n\n    new (ch: Func<'T, 'T, Anim<'T>>, enter, exit) =\n        Trans(\n            ch,\n            (if enter = null then Func<_,_>(fun t -> Anim.Const t) else enter),\n            (if exit = null then Func<_,_>(fun t -> Anim.Const t) else exit),\n            TFlags.TChange ||| \n                (if enter = null then TFlags.TTrivial else TFlags.TEnter) |||\n                (if exit = null then TFlags.TTrivial else TFlags.TExit)\n        )\n\n    member this.TChange x y = change.Invoke(x, y)\n    member this.TEnter = enter.Invoke\n    member this.TExit = exit.Invoke\n    member this.TFlags = flags\n\n    member this.Copy(?change, ?enter, ?exit, ?flags) =\n        let ch = defaultArg change this.TChange\n        let en = defaultArg enter this.TEnter\n        let ex = defaultArg exit this.TExit\n        let fl = defaultArg flags this.TFlags\n        Trans(Func<_,_,_>(ch), Func<_,_>(en),\n            Func<_,_>(ex), fl)\n\n[<JavaScript>]\n[<Sealed>]\ntype Trans =\n\n  // Using a Trans ---------------\n\n    static member AnimateChange (tr: Trans<'T>) x y = tr.TChange x y\n    static member AnimateEnter (tr: Trans<'T>) x = tr.TEnter x\n    static member AnimateExit (tr: Trans<'T>) x = tr.TExit x\n    static member CanAnimateChange (tr: Trans<'T>) = tr.TFlags.HasFlag(TFlags.TChange)\n    static member CanAnimateEnter (tr: Trans<'T>) = tr.TFlags.HasFlag(TFlags.TEnter)\n    static member CanAnimateExit (tr: Trans<'T>) = tr.TFlags.HasFlag(TFlags.TExit)\n\n  // Creating a Trans ------------\n\n    static member Trivial () =\n        Trans()\n\n    static member Create (ch: 'T -> 'T -> Anim<'T>) =\n        Trans(Func<_,_,_>(ch))\n\n    static member Change ch (tr: Trans<'T>) =\n        tr.Copy(change = ch, flags = (tr.TFlags ||| TFlags.TChange))\n\n    static member Enter f (tr: Trans<'T>) =\n        tr.Copy(enter = f, flags = (tr.TFlags ||| TFlags.TEnter))\n\n    static member Exit f (tr: Trans<'T>) =\n        tr.Copy(exit = f, flags = (tr.TFlags ||| TFlags.TExit))\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen System\nopen System.Linq.Expressions\nopen Microsoft.FSharp.Quotations\nopen Microsoft.FSharp.Quotations.Patterns\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Core.Resources\nmodule M = WebSharper.Core.Metadata\nmodule R = WebSharper.Core.AST.Reflection\nmodule J = WebSharper.Core.Json\nmodule P = FSharp.Quotations.Patterns\n\nmodule private Internal =\n\n    open WebSharper.Core\n    open WebSharper.Web.ClientSideInternals\n\n    let activateNode =\n        M.MethodNode(\n            AST.TypeDefinition {\n                Assembly = \"WebSharper.Main\"\n                FullName = \"WebSharper.Activator\"\n            },\n            AST.Method {\n                MethodName = \"Activate\"\n                Parameters = []\n                ReturnType = AST.VoidType\n                Generics = 0\n            } \n        )\n\n    let compile (meta: M.Info) (json: J.Provider) (q: Expr) (doCall: string -> string) =\n        let reqs = ResizeArray<M.Node>()\n        let rec compile' (q: Expr) =\n            match getLocation q with\n            | Some p ->\n                match meta.Quotations.TryGetValue(p) with\n                | false, _ ->\n                    None\n                | true, (declType, meth, argNames) ->\n                    match meta.Classes.TryGetValue declType with\n                    | false, _ -> failwithf \"Error in Handler: Couldn't find JavaScript address for method %s.%s\" declType.Value.FullName meth.Value.MethodName\n                    | true, c ->\n                        let argIndices = Map (argNames |> List.mapi (fun i x -> x, i))\n                        let args = Array.create argNames.Length null\n                        reqs.Add(M.MethodNode (declType, meth))\n                        reqs.Add(M.TypeNode declType)\n                        let setArg (name: string) (value: obj) =\n                            let i = argIndices.[name]\n                            if isNull args.[i] then\n                                args.[i] <-\n                                    match value with\n                                    | :? Expr as q ->\n                                        compile' q |> Option.get\n                                    | value ->\n                                        let typ = value.GetType()\n                                        reqs.Add(M.TypeNode (WebSharper.Core.AST.Reflection.ReadTypeDefinition typ))\n                                        let packed = json.GetEncoder(typ).Encode(value) |> json.Pack\n                                        let s =\n                                            WebSharper.Core.Json.Stringify(packed)\n                                                .Replace(\"&\", \"&amp;\")\n                                                .Replace(\"\\\"\", \"&quot;\")\n                                        match packed with\n                                        | WebSharper.Core.Json.Object (((\"$TYPES\" | \"$DATA\"), _) :: _) ->\n                                            \"WebSharper.Json.Activate(\" + s + \")\"\n                                        | _ -> s\n                        findArgs Set.empty setArg q\n                        let addr =\n                            match c.Methods.TryGetValue meth with\n                            | true, (M.CompiledMember.Static x, _, _) -> x.Value\n                            | _ -> failwithf \"Error in Handler: Couldn't find JavaScript address for method %s.%s\" declType.Value.FullName meth.Value.MethodName\n                        let funcall = String.concat \".\" (List.rev addr)\n                        let args = String.concat \",\" args\n                        Some (sprintf \"%s(%s)\" funcall args)\n            | None -> None\n        compile' q\n        |> Option.map (fun s ->\n            reqs.Add(activateNode)\n            doCall s, reqs :> seq<_>\n        )\n\ntype private OnAfterRenderControl() =\n    inherit Web.Control()\n\n    [<JavaScript>]\n    override this.Body =\n        let l = JS.Document.QuerySelectorAll(\"[ws-runafterrender]\")\n        for i = 0 to l.Length - 1 do\n            let x = l.[i] :?> Dom.Element\n            let f = JS.Eval(x.GetAttribute(\"ws-runafterrender\")) :?> (Dom.Element -> unit)\n            x.RemoveAttribute(\"ws-runafterrender\")\n            f x\n        { new IControlBody with member this.ReplaceInDom(_) = () }\n\n// We would have wanted to use UseNullAsTrueValue so that EmptyAttr = null,\n// which makes things much easier when it comes to optional arguments in Templating.\n// The problem is that for some reason UNATV is ignored if there are 4 or more cases.\n// So we end up having to do explicit null checks everywhere :(\ntype Attr =\n    | AppendAttr of list<Attr>\n    | SingleAttr of string * string\n    | DepAttr of string * (M.Info -> string) * (M.Info -> seq<M.Node>) * (M.Info -> J.Provider -> list<string * J.Encoded>)\n\n    member this.Write(meta, w: HtmlTextWriter, removeWsHole) =\n        match this with\n        | AppendAttr attrs ->\n            attrs |> List.iter (fun a ->\n                if not (obj.ReferenceEquals(a, null))\n                then a.Write(meta, w, removeWsHole))\n        | SingleAttr (n, v) ->\n            if not (removeWsHole && n = \"ws-hole\") then\n                w.WriteAttribute(n, v)\n        | DepAttr (n, v, _, _) ->\n            w.WriteAttribute(n, v meta)\n\n    interface IRequiresResources with\n\n        member this.Requires(meta) =\n            match this with\n            | AppendAttr attrs ->\n                attrs |> Seq.collect (fun a ->\n                    if obj.ReferenceEquals(a, null)\n                    then Seq.empty\n                    else (a :> IRequiresResources).Requires(meta))\n            | DepAttr (_, _, reqs, _) -> reqs meta\n            | SingleAttr _ -> Seq.empty\n\n        member this.Encode (meta, json) =\n            match this with\n            | AppendAttr attrs ->\n                attrs |> List.collect (fun a ->\n                    if obj.ReferenceEquals(a, null)\n                    then []\n                    else (a :> IRequiresResources).Encode(meta, json))\n            | DepAttr (_, _, _, enc) -> enc meta json\n            | SingleAttr _ -> []\n\n    member this.WithName(n) =\n        match this with\n        | AppendAttr _ -> this\n        | SingleAttr(_, v) -> SingleAttr(n, v)\n        | DepAttr(_, v, d, e) -> DepAttr(n, v, d, e)\n\n    static member Create name value =\n        SingleAttr (name, value)\n\n    static member Append a b =\n        AppendAttr [a; b]\n\n    static member Empty =\n        AppendAttr []\n\n    static member Concat (xs: seq<Attr>) =\n        AppendAttr (List.ofSeq xs)\n\n    static member WithDependencies(name, getValue, deps) =\n        DepAttr (name, getValue, deps, fun _ _ -> [])\n\n    static member OnAfterRenderImpl(q: Expr<Dom.Element -> unit>) =\n        let json = WebSharper.Web.Shared.Json // TODO: fix?\n        let value = ref None\n        let init meta =\n            if Option.isNone !value then\n                value :=\n                    match Internal.compile meta json q id with\n                    | Some _ as v -> v\n                    | _ ->\n                        let m =\n                            match q with\n                            | Lambda (x1, Call(None, m, [Var x2])) when x1 = x2 -> m\n                            | _ -> failwithf \"Invalid handler function: %A\" q\n                        let loc = WebSharper.Web.ClientSideInternals.getLocation' q\n                        let func, reqs = Attr.HandlerFallback(m, loc, id)\n                        Some (func meta, reqs)\n        let getValue (meta: M.Info) =\n            init meta\n            fst (Option.get !value)\n        let getReqs (meta: M.Info) =\n            init meta\n            snd (Option.get !value)\n        let enc (meta: M.Info) (json: J.Provider) =\n            init meta\n            (new OnAfterRenderControl() :> IRequiresResources).Encode(meta, json)\n        DepAttr(\"ws-runafterrender\", getValue, getReqs, enc)\n\n    static member HandlerImpl(event: string, q: Expr<Dom.Element -> #Dom.Event -> unit>) =\n        let json = WebSharper.Web.Shared.Json // TODO: fix?\n        let value = ref None\n        let init meta =\n            if Option.isNone !value then\n                value :=\n                    match Internal.compile meta json q (fun s -> s + \"(this)(event)\") with\n                    | Some _ as v -> v\n                    | _ ->\n                        let m =\n                            match q with\n                            | Lambda (x1, Lambda (y1, Call(None, m, [Var x2; (Var y2 | Coerce(Var y2, _))]))) when x1 = x2 && y1 = y2 -> m\n                            | _ -> failwithf \"Invalid handler function: %A\" q\n                        let loc = WebSharper.Web.ClientSideInternals.getLocation' q\n                        let func, reqs = Attr.HandlerFallback(m, loc, fun s -> s + \"(this, event)\")\n                        Some (func meta, reqs)\n        let getValue (meta: M.Info) =\n            init meta\n            fst (Option.get !value)\n        let getReqs (meta: M.Info) =\n            init meta\n            snd (Option.get !value)\n        Attr.WithDependencies(\"on\" + event, getValue, getReqs)\n\n    static member Handler (event: string) ([<JavaScript>] q: Expr<Dom.Element -> #Dom.Event -> unit>) =\n        Attr.HandlerImpl(event, q)\n\n    static member HandlerFallback(m, location, doCall) =\n        let meth = R.ReadMethod m\n        let declType = R.ReadTypeDefinition m.DeclaringType\n        let reqs = [M.MethodNode (declType, meth); M.TypeNode declType]\n        let value = ref None\n        let fail() =\n            failwithf \"Error in Handler%s: Couldn't find JavaScript address for method %s.%s\"\n                location declType.Value.FullName meth.Value.MethodName\n        let func (meta: M.Info) =\n            match !value with\n            | None ->\n                match meta.Classes.TryGetValue declType with\n                | true, c ->\n                    let addr =\n                        match c.Methods.TryGetValue meth with\n                        | true, (M.CompiledMember.Static x, _, _) -> x.Value\n                        | _ -> fail()\n                    let s = String.concat \".\" (List.rev addr) |> doCall\n                    value := Some s\n                    s\n                | _ -> fail()\n            | Some v -> v\n        func, reqs :> seq<_>\n\n    static member HandlerLinqImpl(event, m, location) =\n        let func, reqs = Attr.HandlerFallback(m, location, fun s -> s + \"(this, event)\")\n        DepAttr (\"on\" + event, func, (fun _ -> reqs), (fun _ _ -> []))\n\n    static member HandlerLinq (event: string) (q: Expression<Action<Dom.Element, #Dom.Event>>) =\n        let meth =\n            match q.Body with\n            | :? MethodCallExpression as e -> e.Method\n            | _ -> failwithf \"Invalid handler function: %A\" q\n        Attr.HandlerLinqImpl(event, meth, \"\")\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI.Client\n\nopen System.Collections.Generic\nopen Microsoft.FSharp.Quotations\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nmodule DU = DomUtility\n\ntype IAttrNode =\n    [<Name \"NChanged\">]\n    abstract Changed : View<unit>\n    [<Name \"NGetChangeAnim\">]\n    abstract GetChangeAnim : Dom.Element -> Anim\n    [<Name \"NGetEnterAnim\">]\n    abstract GetEnterAnim : Dom.Element -> Anim\n    [<Name \"NGetExitAnim\">]\n    abstract GetExitAnim : Dom.Element -> Anim\n    [<Name \"NSync\">]\n    abstract Sync : Dom.Element -> unit\n\n[<JavaScript; Sealed; Name \"WebSharper.UI.AnimatedAttrNode\">]\ntype AnimatedAttrNode<'T>(tr: Trans<'T>, view: View<'T>, push: Dom.Element -> 'T -> unit) =\n    let mutable logical : option<'T> = None // current logical value\n    let mutable visible : option<'T> = None // current value pushed to the parent element\n    let mutable dirty = true // logical <> visible\n\n    let updates =\n        view\n        |> View.Map (fun x ->\n            logical <- Some x\n            dirty <- true)\n\n    let pushVisible el v =\n        visible <- Some v\n        dirty <- true\n        push el v\n\n    let sync p =\n        if dirty then\n            Option.iter (fun v -> push p v) logical\n            visible <- logical\n            dirty <- false\n\n    interface IAttrNode with\n\n        member a.GetChangeAnim parent =\n            match visible, logical with\n            | Some v, Some l when dirty ->\n                Trans.AnimateChange tr v l\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | _ -> Anim.Empty\n            |> Anim.WhenDone (fun () -> sync parent)\n\n        member a.GetEnterAnim parent =\n            match visible, logical with\n            | Some vi, Some lo when dirty ->\n                Trans.AnimateChange tr vi lo\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | None, Some lo ->\n                Trans.AnimateEnter tr lo\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | _ -> Anim.Empty\n            |> Anim.WhenDone (fun () -> sync parent)\n\n        member a.GetExitAnim parent =\n            match visible with\n            | Some cur ->\n                Trans.AnimateExit tr cur\n                |> Anim.Map (pushVisible parent)\n                |> Anim.Pack\n            | _ -> Anim.Empty\n            |> Anim.WhenDone (fun () -> dirty <- true; visible <- None)\n\n        /// NOTE: enter or change animation will do the sync.\n        member a.Sync parent = ()\n\n        member a.Changed = updates\n\n[<JavaScript; Sealed; Name \"WebSharper.UI.DynamicAttrNode\">]\ntype DynamicAttrNode<'T>(view: View<'T>, push: Dom.Element -> 'T -> unit) =\n    let mutable value = JS.Undefined\n    let mutable dirty = false\n    let updates = view |> View.Map (fun x -> value <- x; dirty <- true)\n    interface IAttrNode with\n        member a.GetChangeAnim parent = Anim.Empty\n        member a.GetEnterAnim parent = Anim.Empty\n        member a.GetExitAnim parent = Anim.Empty\n        member a.Sync parent = if dirty then push parent value; dirty <- false\n        member a.Changed = updates\n\ntype AttrFlags =\n    | Defaults = 0\n    | HasEnterAnim = 1\n    | HasExitAnim = 2\n    | HasChangeAnim = 4\n\n[<JavaScript; Proxy(typeof<Attr>); Name \"WebSharper.UI.AttrProxy\"; Prototype>]\ntype internal AttrProxy =\n    | [<Constant(null)>] A0\n    | A1 of IAttrNode\n    | A2 of AttrProxy * AttrProxy\n    | A3 of init: (Dom.Element -> unit)\n    | A4 of onAfterRender: (Dom.Element -> unit)\n\n[<JavaScript; Name \"WebSharper.UI.Attrs\">]\nmodule Attrs =\n\n    type Dyn =\n        {\n            DynElem : Dom.Element\n            DynFlags : AttrFlags\n            DynNodes : IAttrNode []\n            [<OptionalField>]\n            OnAfterRender : option<Dom.Element -> unit>\n        }\n\n    let HasChangeAnim attr =\n        attr.DynFlags.HasFlag AttrFlags.HasChangeAnim\n\n    let HasEnterAnim attr =\n        attr.DynFlags.HasFlag AttrFlags.HasEnterAnim\n\n    let HasExitAnim attr =\n        attr.DynFlags.HasFlag AttrFlags.HasExitAnim\n\n    let Flags a =\n        if a !==. null && JS.HasOwnProperty a \"flags\"\n        then a?flags\n        else AttrFlags.Defaults\n\n    let SetFlags (a: AttrProxy) (f: AttrFlags) =\n        a?flags <- f\n\n    /// Synchronizes dynamic attributes.\n    let Sync elem dyn =\n        dyn.DynNodes\n        |> Array.iter (fun d ->\n            d.Sync elem)\n\n    /// Inserts static attributes and computes dynamic attributes.\n    let Insert elem (tree: Attr) =\n        let nodes = Queue()\n        let oar = Queue()\n        let rec loop node =\n          if not (obj.ReferenceEquals(node, null)) then // work around WS issue with UseNullAsTrueValue\n            match node with\n            | A0 -> ()\n            | A1 n -> nodes.Enqueue n\n            | A2 (a, b) -> loop a; loop b\n            | A3 mk -> mk elem\n            | A4 cb -> oar.Enqueue cb\n        loop (As<AttrProxy> tree)\n        let arr = nodes.ToArray()\n        {\n            DynElem = elem\n            DynFlags = Flags tree\n            DynNodes = arr\n            OnAfterRender =\n                if oar.Count = 0 then None else\n                Some (fun el -> Seq.iter (fun f -> f el) oar)\n        }\n\n    let Empty e =\n        {\n            DynElem = e\n            DynFlags = AttrFlags.Defaults\n            DynNodes = [||]\n            OnAfterRender = None\n        }\n\n    let Updates dyn =\n        dyn.DynNodes\n        |> Array.MapTreeReduce (fun x -> x.Changed) (View.Const ()) View.Map2Unit\n\n    let GetAnim dyn f =\n        dyn.DynNodes\n        |> Array.map (fun n -> f n dyn.DynElem)\n        |> Anim.Concat\n\n    let GetEnterAnim dyn =\n        GetAnim dyn (fun n -> n.GetEnterAnim)\n\n    let GetExitAnim dyn =\n        GetAnim dyn (fun n -> n.GetExitAnim)\n\n    let GetChangeAnim dyn =\n        GetAnim dyn (fun n -> n.GetChangeAnim)\n\n    [<Inline>]\n    let GetOnAfterRender dyn =\n        dyn.OnAfterRender\n\n    let AppendTree a b =\n        // work around WS issue with UseNullAsTrueValue\n        if obj.ReferenceEquals(a, null) then b\n        elif obj.ReferenceEquals(b, null) then a\n        else\n        let x = A2 (a, b)\n        SetFlags x (Flags a ||| Flags b)\n        x\n//        match a, b with\n//        | A0, x | x, A0 -> x\n//        | _ -> A2 (a, b)\n\n    let internal EmptyAttr = A0\n\n    let internal Animated tr view set =\n        let node = AnimatedAttrNode (tr, view, set)\n        let mutable flags = AttrFlags.HasChangeAnim\n        if Trans.CanAnimateEnter tr then\n            flags <- flags ||| AttrFlags.HasEnterAnim\n        if Trans.CanAnimateExit tr then\n            flags <- flags ||| AttrFlags.HasExitAnim\n        let n = A1 node\n        SetFlags n flags\n        n\n\n    let internal Dynamic view set =\n        A1 (DynamicAttrNode (view, set))\n\n    let internal Static attr =\n        A3 attr\n\n\n[<JavaScript>]\ntype AttrProxy with\n\n    static member Create name value =\n        As<Attr> (Attrs.Static (fun el -> DU.SetAttr el name value))\n\n    static member Append (a: Attr) (b: Attr) =\n        As<Attr> (Attrs.AppendTree (As a) (As b))\n\n    [<Inline>]\n    static member Empty =\n        As<Attr> Attrs.EmptyAttr\n\n    static member Concat (xs: seq<Attr>) =\n        Array.ofSeqNonCopying xs\n        |> Array.TreeReduce Attr.Empty Attr.Append\n\n    static member OnAfterRenderImpl(q: Expr<Dom.Element -> unit>) =\n        As<Attr> (A4 (As q))\n\n    static member HandlerImpl(event: string, q: Expr<Dom.Element -> #Dom.Event-> unit>) =\n        As<Attr> (Attrs.Static (fun el -> el.AddEventListener(event, (As<Dom.Element -> Dom.Event -> unit> q) el, false)))\n\n    static member Handler (event: string) (q: Expr<Dom.Element -> #Dom.Event-> unit>) =\n        AttrProxy.HandlerImpl(event, q)\n\n[<JavaScript; Name \"WebSharper.UI.CheckedInput\">]\ntype CheckedInput<'T> =\n    | Valid of value: 'T * inputText: string\n    | Invalid of inputText: string\n    | Blank of inputText: string\n\n    static member Make(x: 'T) =\n        Valid (x, x.ToString())\n\n    member this.Input =\n        match this with\n        | Valid (_, x)\n        | Invalid x\n        | Blank x -> x\n\n[<JavaScript; Name \"WebSharper.UI.AttrModule\">]\nmodule Attr =\n\n    [<JavaScript; Macro(typeof<Macros.AttrStyle>)>]\n    let Style name value =\n        As<Attr> (Attrs.Static (fun el -> DU.SetStyle el name value))\n\n    let Animated name tr view attr =\n        As<Attr> (Attrs.Animated tr view (fun el v -> DU.SetAttr el name (attr v)))\n\n    let AnimatedStyle name tr view attr =\n        As<Attr> (Attrs.Animated tr view (fun el v -> DU.SetStyle el name (attr v)))\n\n    let Dynamic name view =\n        As<Attr> (Attrs.Dynamic view (fun el v -> DU.SetAttr el name v))\n\n    let DynamicCustom set view =\n        As<Attr> (Attrs.Dynamic view set)\n\n    let DynamicStyle name view =\n        As<Attr> (Attrs.Dynamic view (fun el v -> DU.SetStyle el name v))\n\n    let Handler name (callback: Dom.Element -> #Dom.Event -> unit) =\n        As<Attr> (Attrs.Static (fun el -> el.AddEventListener(name, As<Dom.Event -> unit> (callback el), false)))\n\n    let HandlerView name (view: View<'T>) (callback: Dom.Element -> #Dom.Event -> 'T -> unit) =\n        let init (el: Dom.Element) =\n            let callback = callback el\n            el.AddEventListener(name, (fun (ev: Dom.Event) -> View.Get (callback (As ev)) view), false)\n        As<Attr> (Attrs.Static init)\n\n    let OnAfterRender (callback: Dom.Element -> unit) =\n        As<Attr> (A4 callback)\n\n    let OnAfterRenderView (v: View<'T>) (callback: Dom.Element -> 'T -> unit) =\n        let id = Fresh.Id()\n        Attr.Append\n            (OnAfterRender (fun el -> callback el el?(id)))\n            (DynamicCustom (fun el x -> el?(id) <- x) v)\n\n    let DynamicClassPred name view =\n        As<Attr> (Attrs.Dynamic view (fun el v ->\n            if v then DU.AddClass el name else DU.RemoveClass el name))\n\n    [<JavaScript; Macro(typeof<Macros.AttrClass>)>]\n    let ClassPred name isSet =\n        As<Attr> (Attrs.Static (fun el ->\n            if isSet then DU.AddClass el name else DU.RemoveClass el name))\n\n    let Class name = ClassPred name true\n\n    let DynamicClass name view ok =\n        DynamicClassPred name (View.Map ok view)\n\n    let DynamicPred name predView valView =\n        let viewFn el (p, v) =\n            if p then\n                DU.SetAttr el name v\n            else\n                DU.RemoveAttr el name\n        let tupleView = View.Map2 (fun pred value -> (pred, value)) predView valView\n        As<Attr> (Attrs.Dynamic tupleView viewFn)\n\n    let DynamicProp name view =\n        As<Attr> (Attrs.Dynamic view (fun el v ->\n            el?(name) <- v))\n\n    let CustomVar (var: Var<'a>) (set: Dom.Element -> 'a -> unit) (get: Dom.Element -> 'a option) =\n        let onChange (el: Dom.Element) (e: Dom.Event) =\n            var.UpdateMaybe(fun v ->\n                match get el with\n                | Some x as o when x <> v -> o\n                | _ -> None)\n        let set e v =\n            match get e with\n            | Some x when x = v -> ()\n            | _ -> set e v\n        Attr.Concat [\n            Handler \"change\" onChange\n            Handler \"input\" onChange\n            Handler \"keypress\" onChange\n            DynamicCustom set var.View\n        ]\n\n    let CustomValue (var: Var<'a>) (toString : 'a -> string) (fromString : string -> 'a option) =\n        CustomVar var (fun e v -> e?value <- toString v) (fun e -> fromString e?value)\n\n    let ContentEditableText (var: Var<string>) =\n        CustomVar var (fun e v -> e.TextContent <- v) (fun e -> Some e.TextContent)\n        |> Attr.Append (Attr.Create \"contenteditable\" \"true\")\n\n    let ContentEditableHtml (var: Var<string>) =\n        CustomVar var (fun e v -> e?innerHTML <- v) (fun e -> Some e?innerHTML)\n        |> Attr.Append (Attr.Create \"contenteditable\" \"true\")\n\n    let Value (var: Var<string>) =\n        CustomValue var id (id >> Some)\n\n    [<JavaScript; Inline \"$e.checkValidity?$e.checkValidity():true\">]\n    let CheckValidity (e: Dom.Element) = X<bool>\n\n    let IntValueUnchecked (var: Var<int>) =\n        let parseInt (s: string) =\n            if String.isBlank s then Some 0 else\n            let pd : int = JS.Plus s\n            if pd !==. (pd >>. 0) then None else Some pd\n        CustomValue var string parseInt\n\n    let IntValue (var: Var<CheckedInput<int>>) =\n        let parseCheckedInt (el: Dom.Element) : option<CheckedInput<int>> =\n            let s = el?value\n            if String.isBlank s then\n                if CheckValidity el then Blank s else Invalid s\n            else\n                match System.Int32.TryParse(s) with\n                | true, i -> Valid (i, s)\n                | false, _ -> Invalid s\n            |> Some\n        CustomVar var\n            (fun el i ->\n                let i = i.Input\n                if el?value <> i then el?value <- i)\n            parseCheckedInt\n\n    let FloatValueUnchecked (var: Var<float>) =\n        let parseFloat (s: string) =\n            if String.isBlank s then Some 0. else\n            let pd : float = JS.Plus s\n            if JS.IsNaN pd then None else Some pd\n        CustomValue var string parseFloat\n\n    let FloatValue (var: Var<CheckedInput<float>>) =\n        let parseCheckedFloat (el: Dom.Element) : option<CheckedInput<float>> =\n            let s = el?value\n            if String.isBlank s then\n                if CheckValidity el then Blank s else Invalid s\n            else\n                let i = JS.Plus s\n                if JS.IsNaN i then Invalid s else Valid (i, s)\n            |> Some\n        CustomVar var\n            (fun el i ->\n                let i = i.Input\n                if el?value <> i then el?value <- i)\n            parseCheckedFloat\n\n    let Checked (var: Var<bool>) =\n        let onSet (el: Dom.Element) (ev: Dom.Event) =\n            if var.Value <> el?``checked`` then\n                var.Value <- el?``checked``\n        Attr.Concat [\n            DynamicProp \"checked\" var.View\n            Handler \"change\" onSet\n        ]\n\n    let ValidateForm () =\n        OnAfterRender Resources.H5F.Setup\n\n[<assembly:System.Reflection.AssemblyVersionAttribute(\"4.0.0.0\")>]\ndo()\n", "namespace WebSharper.UI.Client\n\n#nowarn \"44\" // HTML deprecated\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\n\nmodule DU = DomUtility\ntype private A = Attr\n\n[<JavaScript>]\nmodule Settings =\n    let mutable BatchUpdatesEnabled = true\n\n[<JavaScript>]\ntype internal DocNode =\n    | AppendDoc of DocNode * DocNode\n    | ElemDoc of DocElemNode\n    | EmbedDoc of DocEmbedNode\n    | [<Constant(null)>] EmptyDoc\n    | TextDoc of DocTextNode\n    | TextNodeDoc of Dom.Text\n    | TreeDoc of DocTreeNode\n\nand [<CustomEquality>]\n    [<JavaScript>]\n    [<NoComparison>]\n    [<Name \"WebSharper.UI.DocElemNode\">]\n    internal DocElemNode =\n    {\n        Attr : Attrs.Dyn\n        mutable Children : DocNode\n        [<OptionalField>]\n        Delimiters : (Dom.Node * Dom.Node) option\n        El : Dom.Element\n        ElKey : int\n        [<OptionalField>]\n        mutable Render : option<Dom.Element -> unit>\n    }\n\n    override this.Equals(o: obj) =\n        this.ElKey = (o :?> DocElemNode).ElKey\n\n    override this.GetHashCode() =\n        this.ElKey\n\nand internal DocEmbedNode =\n    {\n        mutable Current : DocNode\n        mutable Dirty : bool\n    }\n\nand internal DocTextNode =\n    {\n        Text : Dom.Text\n        mutable Dirty : bool\n        mutable Value : string\n    }\n\nand internal DocTreeNode =\n    {\n        mutable Els : Union<Dom.Node, DocNode>[]\n        mutable Dirty : bool\n        mutable Holes : DocElemNode[]\n        Attrs : (Dom.Element * Attrs.Dyn)[]\n        [<OptionalField>]\n        mutable Render : option<Dom.Element -> unit>\n        [<OptionalField>]\n        El : option<Dom.Element>\n    }\n\ntype EltUpdater =\n    inherit Elt\n\n    member this.AddUpdated(doc: Elt) = ()\n    member this.RemoveUpdated(doc: Elt) = ()\n    member this.RemoveAllUpdated() = ()\n\n[<JavaScript; Name \"WebSharper.UI.Docs\">]\nmodule internal Docs =\n\n    /// Sets of DOM nodes.\n    type DomNodes =\n        | DomNodes of Dom.Node[]\n\n        /// Actual chidlren of an element.\n        static member Children (elem: Dom.Element) (delims: option<Dom.Node * Dom.Node>) =\n            match delims with\n            | None ->\n                DomNodes (Array.init elem.ChildNodes.Length elem.ChildNodes.Item)\n            | Some (ldelim, rdelim) ->\n                let a = Array<_>()\n                let mutable n = ldelim.NextSibling\n                while n !==. rdelim do\n                    a.Push(n) |> ignore\n                    n <- n.NextSibling\n                DomNodes (As a)\n\n        /// Shallow children of an element node.\n        static member DocChildren node =\n            let q = Queue()\n            let rec loop doc =\n                match doc with\n                | AppendDoc (a, b) -> loop a; loop b\n                | EmbedDoc d -> loop d.Current\n                | ElemDoc e -> q.Enqueue (e.El :> Dom.Node)\n                | EmptyDoc -> ()\n                | TextNodeDoc tn -> q.Enqueue (tn :> Dom.Node)\n                | TextDoc t -> q.Enqueue (t.Text :> Dom.Node)\n                | TreeDoc t ->\n                    t.Els |> Array.iter (function\n                        | Union1Of2 e -> q.Enqueue e\n                        | Union2Of2 n -> loop n\n                    )\n            loop node.Children\n            DomNodes (Array.ofSeqNonCopying q)\n\n        /// Set difference - currently only using equality O(N^2).\n        /// Can do better? Can store <hash> data on every node?\n        static member Except (DomNodes excluded) (DomNodes included) =\n            included\n            |> Array.filter (fun n ->\n                excluded\n                |> Array.forall (fun k -> not (n ===. k)))\n            |> DomNodes\n\n        /// Iteration.\n        static member Iter f (DomNodes ns) =\n            Array.iter f ns\n\n        /// Iteration.\n        static member FoldBack f (DomNodes ns) z =\n            Array.foldBack f ns z\n\n    /// Inserts a node at position.\n    let InsertNode parent node pos =\n        DU.InsertAt parent pos node\n        DU.BeforeNode node\n\n    /// Inserts a doc at position.\n    let rec InsertDoc parent doc pos =\n        match doc with\n        | AppendDoc (a, b) -> InsertDoc parent a (InsertDoc parent b pos)\n        | ElemDoc e -> InsertNode parent e.El pos\n        | EmbedDoc d -> d.Dirty <- false; InsertDoc parent d.Current pos\n        | EmptyDoc -> pos\n        | TextDoc t -> InsertNode parent t.Text pos\n        | TextNodeDoc t -> InsertNode parent t pos\n        | TreeDoc t ->\n            Array.foldBack (fun el pos ->\n                match el with\n                | Union1Of2 e -> InsertNode parent e pos\n                | Union2Of2 n -> InsertDoc parent n pos\n            ) t.Els pos\n\n    /// Synchronizes an element with its children (shallow).\n    let DoSyncElement (el : DocElemNode) =\n        let parent = el.El\n        let rec ins doc pos =\n            match doc with\n            | AppendDoc (a, b) -> ins a (ins b pos)\n            | ElemDoc e -> DU.BeforeNode e.El\n            | EmbedDoc d ->\n                if d.Dirty then\n                    d.Dirty <- false\n                    InsertDoc parent d.Current pos\n                else\n                    ins d.Current pos\n            | EmptyDoc -> pos\n            | TextDoc t -> DU.BeforeNode t.Text\n            | TextNodeDoc t -> DU.BeforeNode t\n            | TreeDoc t ->\n                if t.Dirty then t.Dirty <- false\n                Array.foldBack (fun el pos ->\n                    match el with\n                    | Union1Of2 e -> DU.BeforeNode e\n                    | Union2Of2 n -> ins n pos\n                ) t.Els pos\n        let ch = DomNodes.DocChildren el\n        // remove children that are not in the current set\n        DomNodes.Children el.El el.Delimiters\n        |> DomNodes.Except ch\n        |> DomNodes.Iter (DU.RemoveNode el.El)\n        // insert current children\n        let pos =\n            match el.Delimiters with\n            | None -> DU.AtEnd\n            | Some (_, rdelim) -> DU.BeforeNode rdelim\n        ins el.Children pos |> ignore\n\n    /// Optimized version of DoSyncElement.\n    let SyncElement (el: DocElemNode) =\n        /// Test if any children have changed.\n        let rec hasDirtyChildren el =\n            let rec dirty doc =\n                match doc with\n                | AppendDoc (a, b) -> dirty a || dirty b\n                | EmbedDoc d -> d.Dirty || dirty d.Current\n                | TreeDoc t -> t.Dirty || Array.exists hasDirtyChildren t.Holes\n                | _ -> false\n            dirty el.Children\n        Attrs.Sync el.El el.Attr\n        if hasDirtyChildren el then\n            DoSyncElement el\n\n    /// Links an element to children by inserting them.\n    let LinkElement el children =\n        InsertDoc el children DU.AtEnd |> ignore\n\n    /// Links an element to previous siblings by inserting them.\n    let LinkPrevElement (el: Dom.Node) children =\n        InsertDoc (el.ParentNode :?> _) children (DU.BeforeNode el) |> ignore\n\n    let InsertBeforeDelim (afterDelim: Dom.Node) (doc: DocNode) =\n        let p = afterDelim.ParentNode\n        let before = JS.Document.CreateTextNode(\"\") :> Dom.Node\n        p.InsertBefore(before, afterDelim) |> ignore\n        LinkPrevElement afterDelim doc\n        before\n\n    /// Invokes and clears an element's afterRender callback(s).\n    let AfterRender (el: DocElemNode) =\n        match el.Render with\n        | None -> ()\n        | Some f -> f el.El; el.Render <- None\n\n    /// Synchronizes the document (deep).\n    let rec Sync doc =\n        match doc with\n        | AppendDoc (a, b) -> Sync a; Sync b\n        | ElemDoc el -> SyncElemNode false el\n        | EmbedDoc n -> Sync n.Current\n        | EmptyDoc\n        | TextNodeDoc _ -> ()\n        | TextDoc d ->\n            if d.Dirty then\n                d.Text.NodeValue <- d.Value\n                d.Dirty <- false\n        | TreeDoc t ->\n            Array.iter (SyncElemNode false) t.Holes\n            Array.iter (fun (e, a) -> Attrs.Sync e a) t.Attrs\n            AfterRender (As t)\n\n    /// Synchronizes an element node (deep).\n    and SyncElemNode childrenOnly el =\n        if not childrenOnly then\n            SyncElement el\n        Sync el.Children\n        AfterRender el\n\n    /// A set of node element nodes.\n    type NodeSet =\n        | NodeSet of HashSet<DocElemNode>\n\n        /// Filters out only nodes that have on-remove animations.\n        static member Filter f (NodeSet set) =\n            NodeSet (HashSet.Filter f set)\n\n        /// Finds all node elements in a tree.\n        static member FindAll doc =\n            let q = Queue()\n            let rec loop node =\n                match node with\n                | AppendDoc (a, b) -> loop a; loop b\n                | ElemDoc el -> loopEN el\n                | EmbedDoc em -> loop em.Current\n                | TreeDoc t -> t.Holes |> Array.iter loopEN\n                | _ -> ()\n            and loopEN el =\n                q.Enqueue el\n                loop el.Children\n            loop doc\n            NodeSet (HashSet q)\n\n        /// Set difference.\n        static member Except (NodeSet excluded) (NodeSet included) =\n            NodeSet (included |> HashSet.Except excluded)\n\n        /// Set intersection.\n        static member Intersect (NodeSet a) (NodeSet b) =\n            NodeSet (HashSet.Intersect a b)\n\n        /// Checks if empty.\n        static member IsEmpty (NodeSet ns) =\n            ns.Count = 0\n\n        /// The empty set.\n        static member Empty =\n            NodeSet (HashSet ())\n\n        /// Converts to array.\n        static member ToArray (NodeSet ns) =\n            HashSet.ToArray ns\n\n    /// State of the Doc.Run (updator) proces.\n    type RunState =\n        {\n            mutable PreviousNodes : NodeSet\n            Top : DocElemNode\n        }\n\n    /// Creates an element node.\n    let CreateElemNode el attr children =\n        LinkElement el children\n        let attr = Attrs.Insert el attr\n        {\n            Attr = attr\n            Children = children\n            Delimiters = None\n            El = el\n            ElKey = Fresh.Int ()\n            Render = Attrs.GetOnAfterRender attr\n        }\n\n    /// Creates an element node that handles a delimited subset of its children.\n    let CreateDelimitedElemNode (ldelim: Dom.Node) (rdelim: Dom.Node) attr children =\n        let el = ldelim.ParentNode :?> Dom.Element\n        LinkPrevElement rdelim children\n        let attr = Attrs.Insert el attr\n        {\n            Attr = attr\n            Children = children\n            Delimiters = Some (ldelim, rdelim)\n            El = el\n            ElKey = Fresh.Int ()\n            Render = Attrs.GetOnAfterRender attr\n        }\n\n    /// Creates a new RunState.\n    let CreateRunState parent doc =\n        {\n            PreviousNodes = NodeSet.Empty\n            Top = CreateElemNode parent Attr.Empty doc\n        }\n\n    /// Creates a new RunState for a delimited subset of the children of a node.\n    let CreateDelimitedRunState ldelim rdelim doc =\n        {\n            PreviousNodes = NodeSet.Empty\n            Top = CreateDelimitedElemNode ldelim rdelim Attr.Empty doc\n        }\n\n    /// Computes the animation of nodes that animate removal.\n    let ComputeExitAnim st cur =\n        st.PreviousNodes\n        |> NodeSet.Filter (fun n -> Attrs.HasExitAnim n.Attr)\n        |> NodeSet.Except cur\n        |> NodeSet.ToArray\n        |> Array.map (fun n -> Attrs.GetExitAnim n.Attr)\n        |> Anim.Concat\n\n    /// Computes the animation for changed nodes.\n    let ComputeChangeAnim st cur =\n        let relevant = NodeSet.Filter (fun n -> Attrs.HasChangeAnim n.Attr)\n        NodeSet.Intersect (relevant st.PreviousNodes) (relevant cur)\n        |> NodeSet.ToArray\n        |> Array.map (fun n -> Attrs.GetChangeAnim n.Attr)\n        |> Anim.Concat\n\n    /// Computes the animation for entering nodes.\n    let ComputeEnterAnim st cur =\n        cur\n        |> NodeSet.Filter (fun n -> Attrs.HasEnterAnim n.Attr)\n        |> NodeSet.Except st.PreviousNodes\n        |> NodeSet.ToArray\n        |> Array.map (fun n -> Attrs.GetEnterAnim n.Attr)\n        |> Anim.Concat\n\n    let SyncElemNodesNextFrame childrenOnly st =\n        if Settings.BatchUpdatesEnabled then\n            Async.FromContinuations <| fun (ok, _, _) ->\n                JS.RequestAnimationFrame (fun _ ->\n                    SyncElemNode childrenOnly st.Top\n                    ok()\n                ) |> ignore\n        else\n            async.Return(SyncElemNode childrenOnly st.Top)\n\n    /// The main function: how to perform an animated top-level document update.\n    let PerformAnimatedUpdate childrenOnly st doc =\n        if Anim.UseAnimations then\n            async {\n                let cur = NodeSet.FindAll doc\n                let change = ComputeChangeAnim st cur\n                let enter = ComputeEnterAnim st cur\n                let exit = ComputeExitAnim st cur\n                do! Anim.Play (Anim.Append change exit)\n                do! SyncElemNodesNextFrame childrenOnly st\n                do! Anim.Play enter\n                return st.PreviousNodes <- cur\n            }\n        else\n            SyncElemNodesNextFrame childrenOnly st\n\n    let PerformSyncUpdate childrenOnly st doc =\n        let cur = NodeSet.FindAll doc\n        SyncElemNode childrenOnly st.Top\n        st.PreviousNodes <- cur\n\n    /// EmbedNode constructor.\n    let CreateEmbedNode () =\n        {\n            Current = EmptyDoc\n            Dirty = false\n        }\n\n    /// EmbedNode update (marks dirty).\n    let UpdateEmbedNode node upd =\n        node.Current <- upd\n        node.Dirty <- true\n\n    /// Text node constructor.\n    let CreateTextNode () =\n        {\n            Dirty = false\n            Text = DU.CreateText \"\"\n            Value = \"\"\n        }\n\n    /// Text node update (marks dirty).\n    let UpdateTextNode n t =\n        n.Value <- t\n        n.Dirty <- true\n\n// We implement the Doc interface, the Doc module proxy and the Client.Doc module proxy\n// all in this so that it all neatly looks like Doc.* in javascript.\n[<Name \"WebSharper.UI.Doc\"; Proxy(typeof<Doc>)>]\ntype internal Doc' [<JavaScript>] (docNode, updates) =\n\n    [<JavaScript; Inline>]\n    member this.DocNode = docNode\n    [<JavaScript; Inline>]\n    member this.Updates = updates\n\n    interface IControlBody with\n\n        [<JavaScript>]\n        member this.ReplaceInDom(elt) =\n            // Insert empty text nodes that will serve as delimiters for the Doc.\n            let rdelim = JS.Document.CreateTextNode \"\"\n            elt.ParentNode.ReplaceChild(rdelim, elt) |> ignore\n            Doc'.RunBefore rdelim this\n\n    [<JavaScript>]\n    static member Mk node updates =\n        Doc'(node, updates)\n\n    [<JavaScript>]\n    static member Append (a: Doc') (b: Doc') =\n        (a.Updates, b.Updates)\n        ||> View.Map2Unit\n        |> Doc'.Mk (AppendDoc (a.DocNode, b.DocNode))\n\n    [<JavaScript>]\n    static member Concat xs =\n        Array.ofSeqNonCopying xs\n        |> Array.TreeReduce Doc'.Empty Doc'.Append\n\n    [<JavaScript>]\n    static member Empty\n        with get () =\n            Doc'.Mk EmptyDoc (View.Const ())\n\n    [<JavaScript; Inline>]\n    static member Elem el attr (children: Doc') =\n        Elt'.New(el, attr, children)\n\n    [<JavaScript>]\n    static member TextNode v =\n        Doc'.Mk (TextNodeDoc (DU.CreateText v)) (View.Const ())\n\n    [<JavaScript>]\n    static member StaticProxy el : Elt' =\n        Doc'.Elem el Attr.Empty Doc'.Empty\n\n    [<JavaScript; Inline>]\n    static member Static el : Elt = As (Doc'.StaticProxy el)\n\n    [<JavaScript>]\n    static member Verbatim html =\n        let a =\n            match JQuery.JQuery.ParseHTML html with\n            | null -> [||]\n            | a -> a\n        let elem (n: Dom.Node) =\n            if n.NodeType = Dom.NodeType.Text then\n                TextNodeDoc (n :?> Dom.Text)\n            else\n                ElemDoc (Docs.CreateElemNode (n :?> Dom.Element) Attr.Empty EmptyDoc)\n        let append x y = AppendDoc (x, y)\n        let es = Array.MapTreeReduce elem EmptyDoc append a\n        Doc'.Mk es (View.Const ())\n\n    [<JavaScript>]\n    static member EmbedView (view: View<Doc'>) =\n        let node = Docs.CreateEmbedNode ()\n        view\n        |> View.Bind (fun doc ->\n            Docs.UpdateEmbedNode node doc.DocNode\n            doc.Updates)\n        |> View.Map ignore\n        |> Doc'.Mk (EmbedDoc node)\n\n    [<JavaScript>]\n    static member BindView (f: 'T -> Doc') (view: View<'T>) =\n        Doc'.EmbedView (View.Map f view)\n\n    [<JavaScript>]\n    static member Async (a: Async<Doc'>) : Doc' =\n        View.Const a\n        |> View.MapAsync id\n        |> Doc'.EmbedView\n\n    [<JavaScript>]\n    static member RunBetween ldelim rdelim (doc: Doc') =\n        Docs.LinkPrevElement rdelim doc.DocNode\n        let st = Docs.CreateDelimitedRunState ldelim rdelim doc.DocNode\n        let p =\n            if Anim.UseAnimations || Settings.BatchUpdatesEnabled then\n                Mailbox.StartProcessor (Docs.PerformAnimatedUpdate false st doc.DocNode)\n            else\n                fun () -> Docs.PerformSyncUpdate false st doc.DocNode\n        View.Sink p doc.Updates\n\n    [<JavaScript>]\n    static member RunBefore (rdelim: Dom.Node) (doc: Doc') =\n        let ldelim = JS.Document.CreateTextNode(\"\")\n        rdelim.ParentNode.InsertBefore(ldelim, rdelim) |> ignore\n        Doc'.RunBetween ldelim rdelim doc\n\n    [<JavaScript>]\n    static member RunBeforeById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunBefore el doc\n\n    [<JavaScript>]\n    static member RunAfter (ldelim : Dom.Node) (doc: Doc') =\n        let rdelim = JS.Document.CreateTextNode(\"\")\n        ldelim.ParentNode.InsertBefore(rdelim, ldelim.NextSibling) |> ignore\n        Doc'.RunBetween ldelim rdelim doc\n\n    [<JavaScript>]\n    static member RunAfterById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunAfter el doc\n\n    [<JavaScript>]\n    static member RunAppend (parent: Dom.Element) (doc: Doc') =\n        let rdelim = JS.Document.CreateTextNode \"\"\n        parent.AppendChild(rdelim) |> ignore\n        Doc'.RunBefore rdelim doc\n\n    [<JavaScript>]\n    static member RunAppendById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunAppend el doc\n\n    [<JavaScript>]\n    static member RunPrepend (parent: Dom.Element) (doc: Doc') =\n        let rdelim = JS.Document.CreateTextNode \"\"\n        parent.InsertBefore(rdelim, parent.FirstChild) |> ignore\n        Doc'.RunBefore rdelim doc\n\n    [<JavaScript>]\n    static member RunPrependById id doc =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.RunPrepend el doc\n\n    [<JavaScript>]\n    static member RunInPlace childrenOnly parent (doc: Doc') =\n        let d = doc.DocNode\n        let st = Docs.CreateRunState parent d\n        let p =\n            if Anim.UseAnimations || Settings.BatchUpdatesEnabled then\n                Mailbox.StartProcessor (Docs.PerformAnimatedUpdate childrenOnly st doc.DocNode)\n            else\n                fun () -> Docs.PerformSyncUpdate childrenOnly st doc.DocNode\n        View.Sink p doc.Updates\n\n    [<JavaScript>]\n    static member Run parent (doc: Doc') =\n        Docs.LinkElement parent doc.DocNode\n        Doc'.RunInPlace false parent doc\n\n    [<JavaScript>]\n    static member RunById id tr =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> Doc'.Run el tr\n\n    [<JavaScript>]\n    static member RunReplaceById id (tr: Doc') =\n        match DU.Doc.GetElementById(id) with\n        | null -> failwith (\"invalid id: \" + id)\n        | el -> (tr :> IControlBody).ReplaceInDom(el)\n\n    [<JavaScript>]\n    static member TextView txt =\n        let node = Docs.CreateTextNode ()\n        txt\n        |> View.Map (Docs.UpdateTextNode node)\n        |> Doc'.Mk (TextDoc node)\n\n    [<JavaScript>]\n    static member Flatten view =\n        view\n        |> View.Map Doc'.Concat\n        |> Doc'.EmbedView\n\n    [<JavaScript>]\n    static member Convert render view =\n        View.MapSeqCached render view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertBy key render view =\n        View.MapSeqCachedBy key render view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertSeq render view =\n        View.MapSeqCachedView render view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertSeqBy key render view =\n        View.MapSeqCachedViewBy key (As render) view |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member ConvertSeqVarBy key render var =\n        Var.MapLens key (As render) var |> Doc'.Flatten\n\n    [<JavaScript>]\n    static member InputInternal elemTy attr =\n        let el = DU.CreateElement elemTy\n        Doc'.Elem el (Attr.Concat (attr el)) Doc'.Empty\n\n    [<JavaScript>]\n    static member Input attr (var: Var<string>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [| Attr.Value var |])\n\n    [<JavaScript>]\n    static member PasswordBox attr (var: Var<string>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [|\n                Attr.Value var\n                Attr.Create \"type\" \"password\"\n            |])\n\n    [<JavaScript>]\n    static member IntInputUnchecked attr (var: Var<int>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [|\n                (if var.Get() = 0 then Attr.Create \"value\" \"0\" else Attr.Empty)\n                Attr.IntValueUnchecked var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member IntInput attr (var: Var<CheckedInput<int>>) =\n        Doc'.InputInternal \"input\" (fun el ->\n            Seq.append attr [|\n                Attr.IntValue var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member FloatInputUnchecked attr (var: Var<float>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attr [|\n                (if var.Get() = 0. then Attr.Create \"value\" \"0\" else Attr.Empty)\n                Attr.FloatValueUnchecked var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member FloatInput attr (var: Var<CheckedInput<float>>) =\n        Doc'.InputInternal \"input\" (fun el ->\n            Seq.append attr [|\n                Attr.FloatValue var\n                Attr.Create \"type\" \"number\"\n            |])\n\n    [<JavaScript>]\n    static member InputArea attr (var: Var<string>) =\n        Doc'.InputInternal \"textarea\" (fun _ ->\n            Seq.append attr [| Attr.Value var |])\n\n    [<JavaScript>]\n    static member SelectImpl attrs (show: 'T -> string) (optionElements) (current: Var<'T>) =\n        let options = ref []\n        let getIndex (el: Dom.Element) =\n            el?selectedIndex : int\n        let setIndex (el: Dom.Element) (i: int) =\n            el?selectedIndex <- i\n        let getSelectedItem el =\n            let i = getIndex el\n            (!options).[i]\n        let itemIndex x =\n            List.findIndex ((=) x) !options\n        let setSelectedItem (el: Dom.Element) item =\n            setIndex el (itemIndex item)\n        let el = DU.CreateElement \"select\"\n        let selectedItemAttr =\n            current.View\n            |> Attr.DynamicCustom setSelectedItem\n        let onChange (x: Dom.Event) =\n            current.UpdateMaybe(fun x ->\n                let y = getSelectedItem el\n                if x = y then None else Some y\n            )\n        el.AddEventListener(\"change\", onChange, false)\n        let attrs =\n            Attr.Concat attrs\n            |> Attr.Append selectedItemAttr\n            |> Attr.Append (Attr.OnAfterRender (fun el -> \n                setSelectedItem el <| current.Get()))\n        Doc'.Elem el attrs (optionElements options)\n\n    [<JavaScript>]\n    static member SelectDyn attrs (show: 'T -> string) (vOptions: View<list<'T>>) (current: Var<'T>) =\n        let optionElements options =\n            vOptions\n            |> View.Map (fun l ->\n                options := l\n                l |> Seq.mapi (fun i x -> i, x)\n            )\n            |> Doc'.Convert (fun (i, o) ->\n                Doc'.Element \"option\" [\n                    Attr.Create \"value\" (string i)\n                ] [Doc'.TextNode (show o)]\n                :> Doc'\n            )\n        Doc'.SelectImpl attrs show optionElements current\n\n    [<JavaScript>]\n    static member Select attrs show options current =\n        let optionElements rOptions =\n            rOptions := options\n            options\n            |> List.mapi (fun i o ->\n                Doc'.Element \"option\" [\n                    Attr.Create \"value\" (string i)\n                ] [Doc'.TextNode (show o)]\n                :> Doc'\n            )\n            |> Doc'.Concat\n        Doc'.SelectImpl attrs show optionElements current\n\n    [<JavaScript>]\n    static member SelectOptional attrs noneText show options current =\n        Doc'.Select attrs\n            (function None -> noneText | Some x -> show x)\n            (None :: List.map Some options)\n            current\n\n    [<JavaScript>]\n    static member SelectDynOptional attrs noneText show vOptions current =\n        Doc'.SelectDyn attrs\n            (function None -> noneText | Some x -> show x)\n            (vOptions |> View.Map (fun options -> None :: List.map Some options))\n            current\n\n    [<JavaScript>]\n    static member CheckBox attrs (chk: Var<bool>) =\n        Doc'.InputInternal \"input\" (fun _ ->\n            Seq.append attrs [\n                Attr.Create \"type\" \"checkbox\"\n                Attr.Checked chk\n            ])\n\n    [<JavaScript>]\n    static member CheckBoxGroup attrs (item: 'T) (chk: Var<list<'T>>) =\n        let rv =\n            chk.Lens\n                (List.exists ((=) item))\n                (fun l b ->\n                    if b then\n                        if List.exists ((=) item) l then l else item :: l\n                    else\n                        List.filter ((<>) item) l\n                )\n        Doc'.CheckBox attrs rv\n\n    [<JavaScript>]\n    static member Clickable elem action =\n        let el = DU.CreateElement elem\n        el.AddEventListener(\"click\", (fun (ev: Dom.Event) ->\n            ev.PreventDefault()\n            action ()), false)\n        el\n\n    [<JavaScript>]\n    static member Button caption attrs action =\n        let attrs = Attr.Concat attrs\n        let el = Doc'.Clickable \"button\" action\n        Doc'.Elem el attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member ButtonView caption attrs view action =\n        let evAttr = Attr.HandlerView \"click\" view (fun _ _ -> action)\n        let attrs = Attr.Concat (Seq.append [|evAttr|] attrs)\n        Doc'.Elem (DU.CreateElement \"button\") attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member Link caption attrs action =\n        let attrs = Attr.Concat attrs |> Attr.Append (Attr.Create \"href\" \"#\")\n        let el = Doc'.Clickable \"a\" action\n        Doc'.Elem el attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member LinkView caption attrs view action =\n        let evAttr = Attr.HandlerView \"click\" view (fun _ _ -> action)\n        let attrs = Attr.Concat (Seq.append [|evAttr; Attr.Create \"href\" \"#\"|] attrs)\n        Doc'.Elem (DU.CreateElement \"a\") attrs (Doc'.TextNode caption)\n\n    [<JavaScript>]\n    static member Radio attrs value (var: Var<_>) =\n        // Radio buttons work by taking a common var, which is given a unique ID.\n        // This ID is serialised and used as the name, giving us the \"grouping\"\n        // behaviour.\n        let el = DU.CreateElement \"input\"\n        el.AddEventListener(\"click\", (fun (x : Dom.Event) -> var.Set value), false)\n        let predView = View.Map (fun x -> x = value) var.View\n        let valAttr = Attr.DynamicProp \"checked\" predView\n        let (==>) k v = Attr.Create k v\n        let attr =\n            [\n                \"type\" ==> \"radio\"\n                \"name\" ==> var.Id\n                valAttr\n            ] @ (List.ofSeq attrs) |> Attr.Concat\n        Doc'.Elem el attr Doc'.Empty\n\n    // Actual proxy members\n\n    [<JavaScript>]\n    static member Element (name: string) (attr: seq<Attr>) (children: seq<Doc'>) : Elt' =\n        let attr = Attr.Concat attr\n        let children = Doc'.Concat children\n        Doc'.Elem (DU.CreateElement name) attr children\n\n    static member ToMixedDoc (o: obj) =\n        match o with\n        | :? Doc' as d -> d\n        | :? string as t -> Doc'.TextNode t\n        | :? Dom.Element as e -> Doc'.StaticProxy e :> Doc'\n        | :? Function as v ->\n            Doc'.EmbedView ((As<View<_>>v).Map Doc'.ToMixedDoc)\n        | :? Var<obj> as v ->\n            Doc'.EmbedView (v.View.Map Doc'.ToMixedDoc)\n        | null -> Doc'.Empty\n        | o -> Doc'.TextNode (string o)\n\n    static member MixedNodes (nodes: seq<obj>) =\n        let attrs = ResizeArray()\n        let children = ResizeArray()\n        for n in nodes do\n            match n with\n            | :? Attr as a -> attrs.Add a\n            | _ -> children.Add (Doc'.ToMixedDoc n)\n        attrs :> _ seq, children :> _ seq \n\n    static member ConcatMixed (elts: obj[]) =\n        Doc'.Concat (Seq.map Doc'.ToMixedDoc elts)\n\n    [<JavaScript>]\n    static member ElementMixed (tagname: string) (nodes: seq<obj>) =\n        let attrs, children = Doc'.MixedNodes nodes\n        Doc'.Element tagname attrs children \n\n    [<JavaScript>]\n    static member SvgElement (name: string) (attr: seq<Attr>) (children: seq<Doc'>) : Elt' =\n        let attr = Attr.Concat attr\n        let children = Doc'.Concat children\n        Doc'.Elem (DU.CreateSvgElement name) attr children\n\n    [<JavaScript>]\n    static member SvgElementMixed (tagname: string) (nodes: seq<obj>) =\n        let attrs, children = Doc'.MixedNodes nodes\n        Doc'.SvgElement tagname attrs children \n\n    [<JavaScript; Inline>]\n    static member ClientSide (expr: Microsoft.FSharp.Quotations.Expr<#IControlBody>) : Doc' =\n        As expr\n\nand [<JavaScript; Proxy(typeof<Elt>); Name \"WebSharper.UI.Elt\">]\n    internal Elt'(docNode, updates, elt: Dom.Element, rvUpdates: Updates) =\n    inherit Doc'(docNode, updates)\n\n    static member New(el: Dom.Element, attr: Attr, children: Doc') =\n        let node = Docs.CreateElemNode el attr children.DocNode\n        let rvUpdates = Updates.Create children.Updates\n        let attrUpdates = Attrs.Updates node.Attr\n        let updates = View.Map2Unit attrUpdates rvUpdates.View\n        new Elt'(ElemDoc node, updates, el, rvUpdates)\n\n    /// Assumes tree.Els = [| Union1Of2 someDomElement |]\n    static member TreeNode(tree: DocTreeNode, updates) =\n        let rvUpdates = Updates.Create updates\n        let attrUpdates =\n            tree.Attrs\n            |> Array.map (snd >> Attrs.Updates)\n            |> Array.TreeReduce (View.Const ()) View.Map2Unit\n        let updates = View.Map2Unit attrUpdates rvUpdates.View\n        new Elt'(TreeDoc tree, updates, tree.Els.[0].Value1 :?> _, rvUpdates)\n\n    [<Inline \"$0.elt\">]\n    member this.Element = elt\n\n    member this.on (ev: string, cb: Dom.Element -> #Dom.Event -> unit) =\n        elt.AddEventListener(ev, (fun (ev: Dom.Event) -> cb elt (ev :?> _)), false)\n        this\n\n    member this.onView (ev: string, view: View<'T>, cb: Dom.Element -> #Dom.Event -> 'T -> unit) =\n        let cb = cb elt\n        elt.AddEventListener(ev, (fun (ev: Dom.Event) -> View.Get (cb (ev :?> _)) view), false)\n        this\n\n    [<Name \"On\"; Inline>]\n    member this.onExpr (ev: string, cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> #Dom.Event -> unit>) =\n        this.on (ev, As<_ -> _ -> _> cb)\n\n    member this.OnAfterRender' (cb: Dom.Element -> unit) =\n        match docNode with\n        | ElemDoc e ->\n            e.Render <-\n                match e.Render with\n                | None -> Some cb\n                | Some f -> Some (fun el -> f el; cb el)\n        | TreeDoc e ->\n            e.Render <-\n                match e.Render with\n                | None -> Some cb\n                | Some f -> Some (fun el -> f el; cb el)\n        | _ -> failwith \"Invalid docNode in Elt\"\n        this\n\n    member this.OnAfterRender (cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> unit>) =\n        this.OnAfterRender' (As<Dom.Element -> unit> cb)\n\n    member this.OnAfterRenderView (view: View<'T>, cb: Dom.Element -> 'T -> unit) =\n        let id = Fresh.Id()\n        this.AppendDoc(Doc'.BindView (fun x -> this.Element?(id) <- x; Doc'.Empty) view)\n        this.OnAfterRender'(fun e -> cb e e?(id))\n\n    abstract AddHole : DocElemNode -> unit \n    default this.AddHole h = \n        match docNode with\n        | TreeDoc e ->\n            e.Holes.JS.Push h |> ignore\n        | _ -> ()\n\n    abstract ClearHoles : unit -> unit \n    default this.ClearHoles() = \n        match docNode with\n        | TreeDoc e ->\n            e.Holes <- [||]\n        | _ -> ()\n\n    [<Name \"Append\">]\n    member this.AppendDoc(doc: Doc') =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- AppendDoc(e.Children, doc.DocNode)\n            Docs.InsertDoc elt doc.DocNode DU.AtEnd |> ignore\n        | TreeDoc e ->\n            let after = elt.AppendChild(JS.Document.CreateTextNode \"\")\n            let before = Docs.InsertBeforeDelim after doc.DocNode\n            this.AddHole {\n                El = elt\n                Attr = Attrs.Empty elt\n                Children = doc.DocNode\n                Delimiters = Some (before, after)\n                ElKey = Fresh.Int()\n                Render = None\n            } \n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Map2Unit rvUpdates.Value doc.Updates\n\n    [<Name \"Prepend\">]\n    member this.PrependDoc(doc: Doc') =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- AppendDoc(doc.DocNode, e.Children)\n            let pos =\n                match elt.FirstChild with\n                | null -> DU.AtEnd\n                | n -> DU.BeforeNode n\n            Docs.InsertDoc elt doc.DocNode pos |> ignore\n        | TreeDoc e ->\n            let after = elt.InsertBefore(JS.Document.CreateTextNode \"\", elt.FirstChild)\n            let before = Docs.InsertBeforeDelim after doc.DocNode\n            this.AddHole {\n                El = elt\n                Attr = Attrs.Empty elt\n                Children = doc.DocNode\n                Delimiters = Some (before, after)\n                ElKey = Fresh.Int()\n                Render = None\n            }\n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Map2Unit rvUpdates.Value doc.Updates\n\n    [<Name \"Clear\">]\n    member this.Clear'() =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- EmptyDoc\n        | TreeDoc e ->\n            e.Els <- [||]\n            this.ClearHoles()\n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Const()\n        while (elt.HasChildNodes()) do elt.RemoveChild(elt.FirstChild) |> ignore\n\n    [<JavaScript>]\n    member this.ToUpdater() =\n        let docTreeNode : DocTreeNode =\n            match docNode with\n            | ElemDoc e ->\n                {\n                    Els = [| Union1Of2 (upcast elt) |]\n                    Holes = [||]\n                    Attrs = [| elt, e.Attr |]\n                    Render = None\n                    Dirty = true\n                    El = Some elt\n                }\n            | TreeDoc e -> e\n            | _ -> failwith \"Invalid docNode in Elt\"\n\n        EltUpdater'(docTreeNode, updates, elt, rvUpdates, Var.Create [||])\n\n    [<Name \"Html\">]\n    member this.Html'() : string =\n        elt?outerHTML\n\n    [<Name \"Id\">]\n    member this.Id'() : string =\n        elt?id\n\n    [<Name \"GetValue\">]\n    member this.GetValue() : string =\n        elt?value\n\n    [<Name \"SetValue\">]\n    member this.SetValue(v: string) : unit =\n        elt?value <- v\n\n    [<Name \"GetText\">]\n    member this.GetText() : string =\n        elt.TextContent\n\n    [<Name \"SetText\">]\n    member this.SetText(v: string) : unit =\n        match docNode with\n        | ElemDoc e ->\n            e.Children <- EmptyDoc\n        | TreeDoc e ->\n            e.Els <- [||]\n            this.ClearHoles()\n        | _ -> failwith \"Invalid docNode in Elt\"\n        rvUpdates.Value <- View.Const()\n        elt.TextContent <- v\n\n    [<Name \"SetAttribute\">]\n    member this.SetAttribute'(name: string, value: string) =\n        elt.SetAttribute(name, value)\n\n    [<Name \"GetAttribute\">]\n    member this.GetAttribute'(name) =\n        elt.GetAttribute(name)\n\n    [<Name \"HasAttribute\">]\n    member this.HasAttribute'(name) =\n        elt.HasAttribute(name)\n\n    [<Name \"RemoveAttribute\">]\n    member this.RemoveAttribute'(name) =\n        elt.RemoveAttribute(name)\n\n    [<Name \"SetProperty\">]\n    member this.SetProperty'(name: string, value: 'T) =\n        elt?(name) <- value\n\n    [<Name \"GetProperty\">]\n    member this.GetProperty'(name: string) : 'T =\n        elt?(name)\n\n    [<Inline>]\n    member this.AddClass'(cls: string) =\n        DU.AddClass elt cls\n\n    [<Inline>]\n    member this.RemoveClass'(cls: string) =\n        DU.RemoveClass elt cls\n\n    [<Name \"HasClass\">]\n    member this.HasClass'(cls: string) =\n        (new RegExp(@\"(\\s|^)\" + cls + @\"(\\s|$)\")).Test(elt?className)\n\n    [<Name \"SetStyle\">]\n    member this.SetStyle'(style: string, value: string) =\n        elt?style?(style) <- value\n\n    // {{ event\n    [<Inline>]\n    member this.OnAbort(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"abort\", cb)\n    [<Inline>]\n    member this.OnAfterPrint(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"afterprint\", cb)\n    [<Inline>]\n    member this.OnAnimationEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"animationend\", cb)\n    [<Inline>]\n    member this.OnAnimationIteration(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"animationiteration\", cb)\n    [<Inline>]\n    member this.OnAnimationStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"animationstart\", cb)\n    [<Inline>]\n    member this.OnAudioProcess(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"audioprocess\", cb)\n    [<Inline>]\n    member this.OnBeforePrint(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"beforeprint\", cb)\n    [<Inline>]\n    member this.OnBeforeUnload(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"beforeunload\", cb)\n    [<Inline>]\n    member this.OnBeginEvent(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"beginEvent\", cb)\n    [<Inline>]\n    member this.OnBlocked(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"blocked\", cb)\n    [<Inline>]\n    member this.OnBlur(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.FocusEvent -> unit>) = this.onExpr(\"blur\", cb)\n    [<Inline>]\n    member this.OnCached(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"cached\", cb)\n    [<Inline>]\n    member this.OnCanPlay(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"canplay\", cb)\n    [<Inline>]\n    member this.OnCanPlayThrough(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"canplaythrough\", cb)\n    [<Inline>]\n    member this.OnChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"change\", cb)\n    [<Inline>]\n    member this.OnChargingChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"chargingchange\", cb)\n    [<Inline>]\n    member this.OnChargingTimeChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"chargingtimechange\", cb)\n    [<Inline>]\n    member this.OnChecking(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"checking\", cb)\n    [<Inline>]\n    member this.OnClick(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"click\", cb)\n    [<Inline>]\n    member this.OnClose(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"close\", cb)\n    [<Inline>]\n    member this.OnComplete(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"complete\", cb)\n    [<Inline>]\n    member this.OnCompositionEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.CompositionEvent -> unit>) = this.onExpr(\"compositionend\", cb)\n    [<Inline>]\n    member this.OnCompositionStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.CompositionEvent -> unit>) = this.onExpr(\"compositionstart\", cb)\n    [<Inline>]\n    member this.OnCompositionUpdate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.CompositionEvent -> unit>) = this.onExpr(\"compositionupdate\", cb)\n    [<Inline>]\n    member this.OnContextMenu(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"contextmenu\", cb)\n    [<Inline>]\n    member this.OnCopy(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"copy\", cb)\n    [<Inline>]\n    member this.OnCut(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"cut\", cb)\n    [<Inline>]\n    member this.OnDblClick(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"dblclick\", cb)\n    [<Inline>]\n    member this.OnDeviceLight(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"devicelight\", cb)\n    [<Inline>]\n    member this.OnDeviceMotion(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"devicemotion\", cb)\n    [<Inline>]\n    member this.OnDeviceOrientation(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"deviceorientation\", cb)\n    [<Inline>]\n    member this.OnDeviceProximity(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"deviceproximity\", cb)\n    [<Inline>]\n    member this.OnDischargingTimeChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dischargingtimechange\", cb)\n    [<Inline>]\n    member this.OnDOMActivate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"DOMActivate\", cb)\n    [<Inline>]\n    member this.OnDOMAttributeNameChanged(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"DOMAttributeNameChanged\", cb)\n    [<Inline>]\n    member this.OnDOMAttrModified(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMAttrModified\", cb)\n    [<Inline>]\n    member this.OnDOMCharacterDataModified(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMCharacterDataModified\", cb)\n    [<Inline>]\n    member this.OnDOMContentLoaded(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"DOMContentLoaded\", cb)\n    [<Inline>]\n    member this.OnDOMElementNameChanged(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"DOMElementNameChanged\", cb)\n    [<Inline>]\n    member this.OnDOMNodeInserted(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeInserted\", cb)\n    [<Inline>]\n    member this.OnDOMNodeInsertedIntoDocument(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeInsertedIntoDocument\", cb)\n    [<Inline>]\n    member this.OnDOMNodeRemoved(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeRemoved\", cb)\n    [<Inline>]\n    member this.OnDOMNodeRemovedFromDocument(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMNodeRemovedFromDocument\", cb)\n    [<Inline>]\n    member this.OnDOMSubtreeModified(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MutationEvent -> unit>) = this.onExpr(\"DOMSubtreeModified\", cb)\n    [<Inline>]\n    member this.OnDownloading(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"downloading\", cb)\n    [<Inline>]\n    member this.OnDrag(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"drag\", cb)\n    [<Inline>]\n    member this.OnDragEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragend\", cb)\n    [<Inline>]\n    member this.OnDragEnter(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragenter\", cb)\n    [<Inline>]\n    member this.OnDragLeave(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragleave\", cb)\n    [<Inline>]\n    member this.OnDragOver(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragover\", cb)\n    [<Inline>]\n    member this.OnDragStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"dragstart\", cb)\n    [<Inline>]\n    member this.OnDrop(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"drop\", cb)\n    [<Inline>]\n    member this.OnDurationChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"durationchange\", cb)\n    [<Inline>]\n    member this.OnEmptied(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"emptied\", cb)\n    [<Inline>]\n    member this.OnEnded(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"ended\", cb)\n    [<Inline>]\n    member this.OnEndEvent(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"endEvent\", cb)\n    [<Inline>]\n    member this.OnError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"error\", cb)\n    [<Inline>]\n    member this.OnFocus(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.FocusEvent -> unit>) = this.onExpr(\"focus\", cb)\n    [<Inline>]\n    member this.OnFullScreenChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"fullscreenchange\", cb)\n    [<Inline>]\n    member this.OnFullScreenError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"fullscreenerror\", cb)\n    [<Inline>]\n    member this.OnGamepadConnected(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"gamepadconnected\", cb)\n    [<Inline>]\n    member this.OnGamepadDisconnected(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"gamepaddisconnected\", cb)\n    [<Inline>]\n    member this.OnHashChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"hashchange\", cb)\n    [<Inline>]\n    member this.OnInput(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"input\", cb)\n    [<Inline>]\n    member this.OnInvalid(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"invalid\", cb)\n    [<Inline>]\n    member this.OnKeyDown(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.KeyboardEvent -> unit>) = this.onExpr(\"keydown\", cb)\n    [<Inline>]\n    member this.OnKeyPress(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.KeyboardEvent -> unit>) = this.onExpr(\"keypress\", cb)\n    [<Inline>]\n    member this.OnKeyUp(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.KeyboardEvent -> unit>) = this.onExpr(\"keyup\", cb)\n    [<Inline>]\n    member this.OnLanguageChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"languagechange\", cb)\n    [<Inline>]\n    member this.OnLevelChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"levelchange\", cb)\n    [<Inline>]\n    member this.OnLoad(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"load\", cb)\n    [<Inline>]\n    member this.OnLoadedData(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadeddata\", cb)\n    [<Inline>]\n    member this.OnLoadedMetadata(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadedmetadata\", cb)\n    [<Inline>]\n    member this.OnLoadEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadend\", cb)\n    [<Inline>]\n    member this.OnLoadStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"loadstart\", cb)\n    [<Inline>]\n    member this.OnMessage(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"message\", cb)\n    [<Inline>]\n    member this.OnMouseDown(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mousedown\", cb)\n    [<Inline>]\n    member this.OnMouseEnter(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseenter\", cb)\n    [<Inline>]\n    member this.OnMouseLeave(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseleave\", cb)\n    [<Inline>]\n    member this.OnMouseMove(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mousemove\", cb)\n    [<Inline>]\n    member this.OnMouseOut(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseout\", cb)\n    [<Inline>]\n    member this.OnMouseOver(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseover\", cb)\n    [<Inline>]\n    member this.OnMouseUp(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"mouseup\", cb)\n    [<Inline>]\n    member this.OnNoUpdate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"noupdate\", cb)\n    [<Inline>]\n    member this.OnObsolete(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"obsolete\", cb)\n    [<Inline>]\n    member this.OnOffline(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"offline\", cb)\n    [<Inline>]\n    member this.OnOnline(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"online\", cb)\n    [<Inline>]\n    member this.OnOpen(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"open\", cb)\n    [<Inline>]\n    member this.OnOrientationChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"orientationchange\", cb)\n    [<Inline>]\n    member this.OnPageHide(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pagehide\", cb)\n    [<Inline>]\n    member this.OnPageShow(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pageshow\", cb)\n    [<Inline>]\n    member this.OnPaste(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"paste\", cb)\n    [<Inline>]\n    member this.OnPause(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pause\", cb)\n    [<Inline>]\n    member this.OnPlay(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"play\", cb)\n    [<Inline>]\n    member this.OnPlaying(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"playing\", cb)\n    [<Inline>]\n    member this.OnPointerLockChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pointerlockchange\", cb)\n    [<Inline>]\n    member this.OnPointerLockError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"pointerlockerror\", cb)\n    [<Inline>]\n    member this.OnPopState(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"popstate\", cb)\n    [<Inline>]\n    member this.OnProgress(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"progress\", cb)\n    [<Inline>]\n    member this.OnRateChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"ratechange\", cb)\n    [<Inline>]\n    member this.OnReadyStateChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"readystatechange\", cb)\n    [<Inline>]\n    member this.OnRepeatEvent(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"repeatEvent\", cb)\n    [<Inline>]\n    member this.OnReset(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"reset\", cb)\n    [<Inline>]\n    member this.OnResize(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"resize\", cb)\n    [<Inline>]\n    member this.OnScroll(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"scroll\", cb)\n    [<Inline>]\n    member this.OnSeeked(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"seeked\", cb)\n    [<Inline>]\n    member this.OnSeeking(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"seeking\", cb)\n    [<Inline>]\n    member this.OnSelect(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"select\", cb)\n    [<Inline>]\n    member this.OnShow(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.MouseEvent -> unit>) = this.onExpr(\"show\", cb)\n    [<Inline>]\n    member this.OnStalled(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"stalled\", cb)\n    [<Inline>]\n    member this.OnStorage(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"storage\", cb)\n    [<Inline>]\n    member this.OnSubmit(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"submit\", cb)\n    [<Inline>]\n    member this.OnSuccess(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"success\", cb)\n    [<Inline>]\n    member this.OnSuspend(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"suspend\", cb)\n    [<Inline>]\n    member this.OnSVGAbort(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGAbort\", cb)\n    [<Inline>]\n    member this.OnSVGError(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGError\", cb)\n    [<Inline>]\n    member this.OnSVGLoad(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGLoad\", cb)\n    [<Inline>]\n    member this.OnSVGResize(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGResize\", cb)\n    [<Inline>]\n    member this.OnSVGScroll(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGScroll\", cb)\n    [<Inline>]\n    member this.OnSVGUnload(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGUnload\", cb)\n    [<Inline>]\n    member this.OnSVGZoom(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"SVGZoom\", cb)\n    [<Inline>]\n    member this.OnTimeOut(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"timeout\", cb)\n    [<Inline>]\n    member this.OnTimeUpdate(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"timeupdate\", cb)\n    [<Inline>]\n    member this.OnTouchCancel(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchcancel\", cb)\n    [<Inline>]\n    member this.OnTouchEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchend\", cb)\n    [<Inline>]\n    member this.OnTouchEnter(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchenter\", cb)\n    [<Inline>]\n    member this.OnTouchLeave(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchleave\", cb)\n    [<Inline>]\n    member this.OnTouchMove(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchmove\", cb)\n    [<Inline>]\n    member this.OnTouchStart(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"touchstart\", cb)\n    [<Inline>]\n    member this.OnTransitionEnd(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"transitionend\", cb)\n    [<Inline>]\n    member this.OnUnload(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.UIEvent -> unit>) = this.onExpr(\"unload\", cb)\n    [<Inline>]\n    member this.OnUpdateReady(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"updateready\", cb)\n    [<Inline>]\n    member this.OnUpgradeNeeded(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"upgradeneeded\", cb)\n    [<Inline>]\n    member this.OnUserProximity(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"userproximity\", cb)\n    [<Inline>]\n    member this.OnVersionChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"versionchange\", cb)\n    [<Inline>]\n    member this.OnVisibilityChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"visibilitychange\", cb)\n    [<Inline>]\n    member this.OnVolumeChange(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"volumechange\", cb)\n    [<Inline>]\n    member this.OnWaiting(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.Event -> unit>) = this.onExpr(\"waiting\", cb)\n    [<Inline>]\n    member this.OnWheel(cb: Microsoft.FSharp.Quotations.Expr<Dom.Element -> Dom.WheelEvent -> unit>) = this.onExpr(\"wheel\", cb)\n    // }}\n\nand [<JavaScript; Proxy(typeof<EltUpdater>)>] \n    internal EltUpdater'(treeNode : DocTreeNode, updates, elt, rvUpdates: Updates, holeUpdates: Var<(int * View<unit>)[]>) =\n    inherit Elt'(\n        TreeDoc treeNode, \n        View.Map2Unit updates (holeUpdates.View |> View.BindInner (Array.map snd >> Array.TreeReduce (View.Const ()) View.Map2Unit)),\n        elt, rvUpdates)\n\n    let mutable origHoles = treeNode.Holes\n\n    override this.AddHole h =\n        origHoles.JS.Push h |> ignore\n        treeNode.Holes <- Array.append treeNode.Holes [| h |]\n\n    override this.ClearHoles() =\n        origHoles <- [||]\n        treeNode.Holes <- [||]\n        holeUpdates.Value <- [||]\n\n    member this.AddUpdated(doc: Elt') =\n        match doc.DocNode with\n        | ElemDoc e ->\n            treeNode.Holes <- Array.append treeNode.Holes [| e |]\n            let hu = holeUpdates.Value\n            hu.JS.Push ((e.ElKey, doc.Updates)) |> ignore\n            holeUpdates.Value <- hu\n        | _ -> failwith \"DocUpdater.AddUpdated expects a single element node\"\n\n    member this.RemoveUpdated(doc: Elt') =\n        match doc.DocNode with\n        | ElemDoc e ->\n            let k = e.ElKey\n            treeNode.Holes <-\n                treeNode.Holes |> Array.filter (fun h -> h.ElKey <> k)\n            holeUpdates.Value <-\n                holeUpdates.Value |> Array.filter (function\n                    | uk, _ when uk = k -> false\n                    | _ -> true\n                )  \n        | _ -> failwith \"DocUpdater.RemoveUpdated expects a single element node\"\n\n    member this.RemoveAllUpdated() =\n        treeNode.Holes <- origHoles\n        holeUpdates.Value <- [||]\n", "namespace WebSharper.UI.Client\n\nopen System\nopen System.Collections.Generic\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\n\n[<JavaScript>]\nmodule internal Templates =\n\n    let LoadedTemplates = Dictionary<string, Dictionary<string, Dom.Element>>()\n    let LoadedTemplateFile name =\n        match LoadedTemplates.TryGetValue name with\n        | true, d -> d\n        | false, _ ->\n            let d = Dictionary()\n            LoadedTemplates.[name] <- d\n            d\n    let mutable LocalTemplatesLoaded = false\n\n    let TextHoleRE = \"\"\"\\${([^}]+)}\"\"\"\n\n    let InlineTemplate (el: Dom.Element) (fillWith: seq<TemplateHole>) =\n        let holes : DocElemNode[] = [||]\n        let updates : View<unit>[] = [||]\n        let attrs : (Dom.Element * Attrs.Dyn)[] = [||]\n        let afterRender : (Dom.Element -> unit)[] = [||]\n        let fw = Dictionary()\n        for x in fillWith do fw.[TemplateHole.Name x] <- x\n        let els = As<Union<Dom.Node, DocNode>[]> (DomUtility.ChildrenArray el)\n        let addAttr (el: Dom.Element) (attr: Attr) =\n            let attr = Attrs.Insert el attr\n            updates.JS.Push (Attrs.Updates attr) |> ignore\n            attrs.JS.Push ((el, attr)) |> ignore\n            match Attrs.GetOnAfterRender attr with\n            | Some f -> afterRender.JS.Push(fun _ -> f el) |> ignore\n            | None -> ()\n        let tryGetAsDoc name =\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.Elt (_, doc) -> Some (As<Doc'> doc)\n            | true, TemplateHole.Text (_, text) -> Some (Doc'.TextNode text)\n            | true, TemplateHole.TextView (_, tv) -> Some (Doc'.TextView tv)\n            | true, TemplateHole.VarStr (_, v) -> Some (Doc'.TextView v.View)\n            | true, TemplateHole.VarBool (_, v) -> Some (Doc'.TextView (v.View.Map string))\n            | true, TemplateHole.VarInt (_, v) -> Some (Doc'.TextView (v.View.Map (fun i -> i.Input)))\n            | true, TemplateHole.VarIntUnchecked (_, v) -> Some (Doc'.TextView (v.View.Map string))\n            | true, TemplateHole.VarFloat (_, v) -> Some (Doc'.TextView (v.View.Map (fun i -> i.Input)))\n            | true, TemplateHole.VarFloatUnchecked (_, v) -> Some (Doc'.TextView (v.View.Map string))\n            | true, _ -> Console.Warn(\"Content hole filled with attribute data\", name); None\n            | false, _ -> None\n\n        DomUtility.IterSelector el \"[ws-hole]\" <| fun p ->\n            let name = p.GetAttribute(\"ws-hole\")\n            p.RemoveAttribute(\"ws-hole\")\n            while (p.HasChildNodes()) do\n                p.RemoveChild(p.LastChild) |> ignore\n            match tryGetAsDoc name with\n            | None -> ()\n            | Some doc ->\n                Docs.LinkElement p doc.DocNode\n                holes.JS.Push {\n                    Attr = Attrs.Empty p\n                    Children = doc.DocNode\n                    Delimiters = None\n                    El = p\n                    ElKey = Fresh.Int()\n                    Render = None\n                }\n                |> ignore\n                updates.JS.Push doc.Updates |> ignore\n\n        DomUtility.IterSelector el \"[ws-replace]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-replace\")\n            match tryGetAsDoc name with\n            | None -> ()\n            | Some doc ->\n                let p = e.ParentNode :?> Dom.Element\n                let after = JS.Document.CreateTextNode(\"\") :> Dom.Node\n                p.ReplaceChild(after, e) |> ignore\n                let before = Docs.InsertBeforeDelim after doc.DocNode\n                els\n                |> Array.tryFindIndex ((===.) e)\n                |> Option.iter (fun i -> els.[i] <- Union2Of2 doc.DocNode)\n                holes.JS.Push {\n                    Attr = Attrs.Empty p\n                    Children = doc.DocNode\n                    Delimiters = Some (before, after)\n                    El = p\n                    ElKey = Fresh.Int()\n                    Render = None\n                }\n                |> ignore\n                updates.JS.Push doc.Updates |> ignore\n\n        DomUtility.IterSelector el \"[ws-attr]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-attr\")\n            e.RemoveAttribute(\"ws-attr\")\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.Attribute (_, attr) -> addAttr e attr\n            | true, _ -> Console.Warn(\"Attribute hole filled with non-attribute data\", name)\n            | false, _ -> ()\n\n        DomUtility.IterSelector el \"[ws-on]\" <| fun e ->\n            e.GetAttribute(\"ws-on\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            |> Array.choose (fun x ->\n                let a = x.Split([|':'|], StringSplitOptions.RemoveEmptyEntries)\n                match fw.TryGetValue(a.[1]) with\n                | true, TemplateHole.Event (_, handler) -> Some (Attr.Handler a.[0] handler)\n                | true, TemplateHole.EventQ (_, _, handler) -> Some (A.Handler a.[0] handler)\n                | true, _ ->\n                    Console.Warn(\"Event hole on\" + a.[0] + \" filled with non-event data\", a.[1])\n                    None\n                | false, _ -> None\n            )\n            |> Attr.Concat\n            |> addAttr e\n            e.RemoveAttribute(\"ws-on\")\n\n        DomUtility.IterSelector el \"[ws-onafterrender]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-onafterrender\")\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.AfterRender (_, handler) ->\n                e.RemoveAttribute(\"ws-onafterrender\")\n                addAttr e (Attr.OnAfterRender handler)\n            | true, TemplateHole.AfterRenderQ (_, handler) ->\n                e.RemoveAttribute(\"ws-onafterrender\")\n                addAttr e (Attr.OnAfterRender (As handler))\n            | true, _ -> Console.Warn(\"onafterrender hole filled with non-onafterrender data\", name)\n            | false, _ -> ()\n\n        DomUtility.IterSelector el \"[ws-var]\" <| fun e ->\n            let name = e.GetAttribute(\"ws-var\")\n            e.RemoveAttribute(\"ws-var\")\n            match fw.TryGetValue(name) with\n            | true, TemplateHole.VarStr (_, var) -> addAttr e (Attr.Value var)\n            | true, TemplateHole.VarBool (_, var) -> addAttr e (Attr.Checked var)\n            | true, TemplateHole.VarInt (_, var) -> addAttr e (Attr.IntValue var)\n            | true, TemplateHole.VarIntUnchecked (_, var) -> addAttr e (Attr.IntValueUnchecked var)\n            | true, TemplateHole.VarFloat (_, var) -> addAttr e (Attr.FloatValue var)\n            | true, TemplateHole.VarFloatUnchecked (_, var) -> addAttr e (Attr.FloatValueUnchecked var)\n            | true, _ -> Console.Warn(\"Var hole filled with non-Var data\", name)\n            | false, _ -> ()\n\n        DomUtility.IterSelector el \"[ws-attr-holes]\" <| fun e ->\n            let re = new RegExp(TextHoleRE, \"g\")\n            let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n            e.RemoveAttribute(\"ws-attr-holes\")\n            for attrName in holeAttrs do\n                let s = e.GetAttribute(attrName)\n                let mutable m = null\n                let mutable lastIndex = 0\n                let res : (string * string)[] = [||]\n                while (m <- re.Exec s; m !==. null) do\n                    let textBefore = s.[lastIndex .. re.LastIndex-m.[0].Length-1]\n                    lastIndex <- re.LastIndex\n                    let holeName = m.[1]\n                    res.JS.Push((textBefore, holeName)) |> ignore\n                let finalText = s.[lastIndex..]\n                re.LastIndex <- 0\n                let value =\n                    Array.foldBack (fun (textBefore, holeName: string) (textAfter, views) ->\n                        let holeContent =\n                            match fw.TryGetValue(holeName) with\n                            | true, TemplateHole.Text (_, t) -> Choice1Of2 t\n                            | true, TemplateHole.TextView (_, v) -> Choice2Of2 v\n                            | true, TemplateHole.VarStr (_, v) -> Choice2Of2 v.View\n                            | true, TemplateHole.VarBool (_, v) -> Choice2Of2 (v.View.Map string)\n                            | true, TemplateHole.VarInt (_, v) -> Choice2Of2 (v.View.Map (fun i -> i.Input))\n                            | true, TemplateHole.VarIntUnchecked (_, v) -> Choice2Of2 (v.View.Map string)\n                            | true, TemplateHole.VarFloat (_, v) -> Choice2Of2 (v.View.Map (fun i -> i.Input))\n                            | true, TemplateHole.VarFloatUnchecked (_, v) -> Choice2Of2 (v.View.Map string)\n                            | true, _ ->\n                                Console.Warn(\"Attribute value hole filled with non-text data\", holeName)\n                                Choice1Of2 \"\"\n                            | false, _ -> Choice1Of2 \"\"\n                        match holeContent with\n                        | Choice1Of2 text -> textBefore + text + textAfter, views\n                        | Choice2Of2 v ->\n                            let v =\n                                if textAfter = \"\" then v else\n                                View.Map (fun s -> s + textAfter) v\n                            textBefore, v :: views\n                    ) res (finalText, [])\n                match value with\n                | s, [] -> Attr.Create attrName s\n                | \"\", [v] -> Attr.Dynamic attrName v\n                | s, [v] -> Attr.Dynamic attrName (View.Map (fun v -> s + v) v)\n                | s, [v1; v2] -> Attr.Dynamic attrName (View.Map2 (fun v1 v2 -> s + v1 + v2) v1 v2)\n                | s, [v1; v2; v3] -> Attr.Dynamic attrName (View.Map3 (fun v1 v2 v3 -> s + v1 + v2 + v3) v1 v2 v3)\n                | s, vs ->\n                    View.Sequence vs\n                    |> View.Map (fun vs -> s + String.concat \"\" vs)\n                    |> Attr.Dynamic attrName\n                |> addAttr e\n\n        let docTreeNode : DocTreeNode =\n            {\n                Els = els\n                Holes = holes\n                Attrs = attrs\n                Render =\n                    if Array.isEmpty afterRender\n                    then None\n                    else Some (fun el -> Array.iter (fun f -> f el) afterRender)\n                Dirty = true\n                El =\n                    match els with\n                    | [| Union1Of2 (:? Dom.Element as el) |] -> Some el\n                    | _ -> None\n            }\n        let updates =\n            updates |> Array.TreeReduce (View.Const ()) View.Map2Unit\n        docTreeNode, updates\n\n    let ChildrenTemplate (el: Dom.Element) (fillWith: seq<TemplateHole>) =\n        let docTreeNode, updates = InlineTemplate el fillWith\n        match docTreeNode.Els with\n        | [| Union1Of2 e |] when e.NodeType = Dom.NodeType.Element ->\n            Elt'.TreeNode(docTreeNode, updates) :> Doc'\n        | _ ->\n            Doc'.Mk (TreeDoc docTreeNode) updates\n\n    let FakeRoot (els: Dom.Node[]) =\n        let fakeroot = JS.Document.CreateElement(\"div\")\n        for el in els do fakeroot.AppendChild el |> ignore\n        fakeroot\n\n    let FakeRootSingle (el: Dom.Element) =\n        el.RemoveAttribute(\"ws-template\")\n        match el.GetAttribute(\"ws-replace\") with\n        | null -> ()\n        | replace ->\n            el.RemoveAttribute(\"ws-replace\")\n            match el.ParentNode with\n            | null -> ()\n            | p ->\n                let n = JS.Document.CreateElement(el.TagName)\n                n.SetAttribute(\"ws-replace\", replace)\n                p.ReplaceChild(n, el) |> ignore\n        FakeRoot [| el |]\n\n    module private Prepare =\n\n        let convertAttrs (el: Dom.Element) =\n            let attrs = el.Attributes\n            let toRemove = [||]\n            let events = [||]\n            let holedAttrs = [||]\n            for i = 0 to attrs.Length - 1 do\n                let a = attrs.[i]\n                if a.NodeName.StartsWith \"ws-on\" && a.NodeName <> \"ws-onafterrender\" && a.NodeName <> \"ws-on\" then\n                    toRemove.JS.Push(a.NodeName) |> ignore\n                    events.JS.Push(a.NodeName.[\"ws-on\".Length..] + \":\" + a.NodeValue.ToLower()) |> ignore\n                elif not (a.NodeName.StartsWith \"ws-\") && RegExp(TextHoleRE).Test(a.NodeValue) then\n                    a.NodeValue <-\n                        RegExp(TextHoleRE, \"g\")\n                            .Replace(a.NodeValue, FuncWithArgs (fun (_, h: string) ->\n                                \"${\" + h.ToLower() + \"}\"))\n                    holedAttrs.JS.Push(a.NodeName) |> ignore\n            if not (Array.isEmpty events) then\n                el.SetAttribute(\"ws-on\", String.concat \" \" events)\n            if not (Array.isEmpty holedAttrs) then\n                el.SetAttribute(\"ws-attr-holes\", String.concat \" \" holedAttrs)\n            let lowercaseAttr name =\n                match el.GetAttribute(name) with\n                | null -> ()\n                | x -> el.SetAttribute(name, x.ToLower())\n            lowercaseAttr \"ws-hole\"\n            lowercaseAttr \"ws-replace\"\n            lowercaseAttr \"ws-attr\"\n            lowercaseAttr \"ws-onafterrender\"\n            lowercaseAttr \"ws-var\"\n            Array.iter el.RemoveAttribute toRemove\n\n        let convertTextNode (n: Dom.Node) =\n            let mutable m = null\n            let mutable li = 0\n            let s = n.TextContent\n            let strRE = RegExp(TextHoleRE, \"g\")\n            while (m <- strRE.Exec s; m !==. null) do\n                n.ParentNode.InsertBefore(JS.Document.CreateTextNode(s.[li..strRE.LastIndex-m.[0].Length-1]), n) |> ignore\n                li <- strRE.LastIndex\n                let hole = JS.Document.CreateElement(\"span\")\n                hole.SetAttribute(\"ws-replace\", m.[1].ToLower())\n                n.ParentNode.InsertBefore(hole, n) |> ignore\n            strRE.LastIndex <- 0\n            n.TextContent <- s.[li..]\n\n        let mapHoles (t: Dom.Element) (mappings: Dictionary<string, string>) =\n            let run attrName =\n                DomUtility.IterSelector t (\"[\" + attrName + \"]\") <| fun e ->\n                    match mappings.TryGetValue(e.GetAttribute(attrName).ToLower()) with\n                    | true, m -> e.SetAttribute(attrName, m)\n                    | false, _ -> ()\n            run \"ws-hole\"\n            run \"ws-replace\"\n            run \"ws-attr\"\n            run \"ws-onafterrender\"\n            run \"ws-var\"\n            DomUtility.IterSelector t \"[ws-on]\" <| fun e ->\n                let a =\n                    e.GetAttribute(\"ws-on\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                    |> Array.map (fun x ->\n                        let a = x.Split([|':'|], StringSplitOptions.RemoveEmptyEntries)\n                        match mappings.TryGetValue(a.[1]) with\n                        | true, x -> a.[0] + \":\" + x\n                        | false, _ -> x\n                    )\n                    |> String.concat \" \"\n                e.SetAttribute(\"ws-on\", a)\n            DomUtility.IterSelector t \"[ws-attr-holes]\" <| fun e ->\n                let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                for attrName in holeAttrs do\n                    let s =\n                        (e.GetAttribute(attrName), mappings)\n                        ||> Seq.fold (fun s (KeyValue(a, m)) ->\n                            RegExp(\"\\\\${\" + a + \"}\", \"ig\").Replace(s, \"${\" + m + \"}\")\n                        )\n                    e.SetAttribute(attrName, s)\n\n        let fillInstanceAttrs (instance: Dom.Element) (fillWith: Dom.Element) =\n            convertAttrs fillWith\n            let name = fillWith.NodeName.ToLower()\n            match instance.QuerySelector(\"[ws-attr=\" + name + \"]\") with\n            | null -> Console.Warn(\"Filling non-existent attr hole\", name)\n            | e ->\n                e.RemoveAttribute(\"ws-attr\")\n                for i = 0 to fillWith.Attributes.Length - 1 do\n                    let a = fillWith.Attributes.[i]\n                    if a.Name = \"class\" && e.HasAttribute(\"class\") then\n                        e.SetAttribute(\"class\", e.GetAttribute(\"class\") + \" \" + a.NodeValue)\n                    else\n                        e.SetAttribute(a.Name, a.NodeValue)\n\n        let removeHolesExcept (instance: Dom.Element) (dontRemove: HashSet<string>) =\n            let run attrName =\n                DomUtility.IterSelector instance (\"[\" + attrName + \"]\") <| fun e ->\n                    if not (dontRemove.Contains(e.GetAttribute attrName)) then\n                        e.RemoveAttribute(attrName)\n            run \"ws-attr\"\n            run \"ws-onafterrender\"\n            run \"ws-var\"\n            DomUtility.IterSelector instance \"[ws-hole]\" <| fun e ->\n                if not (dontRemove.Contains(e.GetAttribute \"ws-hole\")) then\n                    e.RemoveAttribute(\"ws-hole\")\n                    while e.HasChildNodes() do\n                        e.RemoveChild(e.LastChild) |> ignore\n            DomUtility.IterSelector instance \"[ws-replace]\" <| fun e ->\n                if not (dontRemove.Contains(e.GetAttribute \"ws-replace\")) then\n                    e.ParentNode.RemoveChild(e) |> ignore\n            DomUtility.IterSelector instance \"[ws-on]\" <| fun e ->\n                let a =\n                    e.GetAttribute(\"ws-on\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                    |> Array.filter (fun x ->\n                        let a = x.Split([|':'|], StringSplitOptions.RemoveEmptyEntries)\n                        dontRemove.Contains a.[1]\n                    )\n                    |> String.concat \" \"\n                e.SetAttribute(\"ws-on\", a)\n            DomUtility.IterSelector instance \"[ws-attr-holes]\" <| fun e ->\n                let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                for attrName in holeAttrs do\n                    let s =\n                        RegExp(TextHoleRE, \"g\")\n                            .Replace(e.GetAttribute(attrName), FuncWithArgs(fun (full: string, h: string) ->\n                                if dontRemove.Contains h then full else \"\"\n                            ))\n                    e.SetAttribute(attrName, s)\n\n        let fillTextHole (instance: Dom.Element) (fillWith: string) (templateName: string) =\n            match instance.QuerySelector \"[ws-replace]\" with\n            | null ->\n                Console.Warn(\"Filling non-existent text hole\", templateName)\n                None\n            | n ->\n                n.ParentNode.ReplaceChild(Dom.Text fillWith, n) |> ignore\n                Some <| n.GetAttribute(\"ws-replace\")\n\n        let rec fill (fillWith: Dom.Element) (p: Dom.Node) n =\n            if fillWith.HasChildNodes() then\n                fill fillWith p (p.InsertBefore(fillWith.LastChild, n))\n\n        let failNotLoaded (name: string) =\n            Console.Warn(\"Instantiating non-loaded template\", name)\n\n    let rec PrepareTemplateStrict (baseName: string) (name: option<string>) (els: Dom.Node[]) (root: option<Dom.Element>) (prepareLocalTemplate: option<string -> unit>) =\n        let rec fillDocHole (instance: Dom.Element) (fillWith: Dom.Element) =\n            let name = fillWith.NodeName.ToLower()\n            let fillHole (p: Dom.Node) (n: Dom.Node) =\n                // The \"title\" node is treated specially by HTML, its content is considered pure text,\n                // so we need to re-parse it.\n                if name = \"title\" && fillWith.HasChildNodes() then\n                    let parsed = JQuery.JQuery.ParseHTML fillWith.TextContent\n                    fillWith.RemoveChild(fillWith.FirstChild) |> ignore\n                    for i in parsed do\n                        fillWith.AppendChild(i) |> ignore\n                convertElement fillWith\n                Prepare.fill fillWith p n\n            DomUtility.IterSelector instance \"[ws-attr-holes]\" <| fun e ->\n                let holeAttrs = e.GetAttribute(\"ws-attr-holes\").Split([|' '|], StringSplitOptions.RemoveEmptyEntries)\n                for attrName in holeAttrs do\n                    e.SetAttribute(attrName,\n                        RegExp(\"\\\\${\" + name + \"}\", \"ig\").\n                            Replace(e.GetAttribute(attrName), fillWith.TextContent)\n                    )\n            match instance.QuerySelector(\"[ws-hole=\" + name + \"]\") with\n            | null ->\n                match instance.QuerySelector(\"[ws-replace=\" + name + \"]\") with\n                | null -> ()\n                | e ->\n                    fillHole e.ParentNode e\n                    e.ParentNode.RemoveChild(e) |> ignore\n            | e ->\n                while e.HasChildNodes() do\n                    e.RemoveChild(e.LastChild) |> ignore\n                e.RemoveAttribute(\"ws-hole\")\n                fillHole e null\n\n        and convertElement (el: Dom.Element) =\n            if el.NodeName.ToLower().StartsWith \"ws-\" then\n                convertInstantiation el\n            else\n                Prepare.convertAttrs el\n                convertNodeAndSiblings el.FirstChild\n\n        and convertNodeAndSiblings (n: Dom.Node) =\n            if n !==. null then\n                let next = n.NextSibling\n                if n.NodeType = Dom.NodeType.Text then\n                    Prepare.convertTextNode n\n                elif n.NodeType = Dom.NodeType.Element then\n                    convertElement (n :?> Dom.Element)\n                convertNodeAndSiblings next\n\n        and convertInstantiation (el: Dom.Element) =\n            let name = el.NodeName.[3..].ToLower()\n            let instBaseName, instName =\n                match name.IndexOf('.') with\n                | -1 -> baseName, name\n                | n -> name.[..n-1], name.[n+1..]\n            if instBaseName <> \"\" && not (LoadedTemplates.ContainsKey instBaseName) then\n                Prepare.failNotLoaded instName\n            else\n            if instBaseName = \"\" && prepareLocalTemplate.IsSome then\n                prepareLocalTemplate.Value instName\n            let d = LoadedTemplates.[instBaseName]\n            if not (d.ContainsKey instName) then Prepare.failNotLoaded instName else\n            let t = d.[instName]\n            let instance = t.CloneNode(true) :?> Dom.Element\n            let usedHoles = HashSet()\n            let mappings = Dictionary()\n            // 1. gather mapped and filled holes.\n            let attrs = el.Attributes\n            for i = 0 to attrs.Length - 1 do\n                let name = attrs.[i].Name.ToLower()\n                let mappedName = match attrs.[i].NodeValue with \"\" -> name | s -> s.ToLower()\n                mappings.[name] <- mappedName\n                if not (usedHoles.Add(name)) then\n                    Console.Warn(\"Hole mapped twice\", name)\n            for i = 0 to el.ChildNodes.Length - 1 do\n                let n = el.ChildNodes.[i]\n                if n.NodeType = Dom.NodeType.Element then\n                    let n = n :?> Dom.Element\n                    if not (usedHoles.Add(n.NodeName.ToLower())) then\n                        Console.Warn(\"Hole filled twice\", instName)\n            // 2. If single text hole, apply it.\n            let singleTextFill = el.ChildNodes.Length = 1 && el.FirstChild.NodeType = Dom.NodeType.Text\n            if singleTextFill then\n                Prepare.fillTextHole instance el.FirstChild.TextContent instName\n                |> Option.iter (usedHoles.Add >> ignore)\n            // 3. eliminate non-mapped/filled holes.\n            Prepare.removeHolesExcept instance usedHoles\n            // 4. apply mappings/fillings.\n            if not singleTextFill then\n                for i = 0 to el.ChildNodes.Length - 1 do\n                    let n = el.ChildNodes.[i]\n                    if n.NodeType = Dom.NodeType.Element then\n                        let n = n :?> Dom.Element\n                        if n.HasAttributes() then\n                            Prepare.fillInstanceAttrs instance n\n                        else\n                            fillDocHole instance n\n            Prepare.mapHoles instance mappings\n            // 5. insert result.\n            Prepare.fill instance el.ParentNode el\n            el.ParentNode.RemoveChild(el) |> ignore\n\n        let rec convertNestedTemplates (el: Dom.Element) =\n            match el.QuerySelector \"[ws-template]\" with\n            | null ->\n                match el.QuerySelector \"[ws-children-template]\" with\n                | null -> ()\n                | n ->\n                    let name = n.GetAttribute \"ws-children-template\"\n                    n.RemoveAttribute \"ws-children-template\"\n                    PrepareTemplateStrict baseName (Some name) (DomUtility.ChildrenArray n) None None\n                    convertNestedTemplates el\n            | n ->\n                let name = n.GetAttribute \"ws-template\"\n                PrepareSingleTemplate baseName (Some name) n None\n                convertNestedTemplates el\n\n        let fakeroot = root |> Option.defaultWith (fun () -> FakeRoot els)\n        let name = (defaultArg name \"\").ToLower()\n        LoadedTemplateFile(baseName).[name] <- fakeroot\n        if els.Length > 0 then\n            convertNestedTemplates fakeroot\n            convertNodeAndSiblings els.[0]\n\n    and PrepareSingleTemplate (baseName: string) (name: option<string>) (el: Dom.Element) =\n        let root = FakeRootSingle el\n        PrepareTemplateStrict baseName name [| el |] (Some root)\n\n    let PrepareTemplate (baseName: string) (name: option<string>) (els: unit -> Dom.Node[]) =\n        if not (LoadedTemplateFile(baseName).ContainsKey(defaultArg name \"\")) then\n            let els = els()\n            for el in els do\n                match el.ParentNode :?> Dom.Element with\n                | null -> ()\n                | p -> p.RemoveChild(el) |> ignore\n            PrepareTemplateStrict baseName name els None None\n\n    /// Load all the templates declared nested under `root` into `baseName`.\n    let LoadNestedTemplates (root: Dom.Element) baseName =\n        let loadedTpls = LoadedTemplateFile baseName\n        let rawTpls = Dictionary()\n        let wsTemplates = root.QuerySelectorAll \"[ws-template]\"\n        for i = 0 to wsTemplates.Length - 1 do\n            let node = wsTemplates.[i] :?> Dom.Element\n            let name = node.GetAttribute(\"ws-template\").ToLower()\n            node.RemoveAttribute(\"ws-template\")\n            rawTpls.[name] <- ([| node :> Dom.Node |], FakeRootSingle node)\n        let wsChildrenTemplates = root.QuerySelectorAll \"[ws-children-template]\"\n        for i = 0 to wsChildrenTemplates.Length - 1 do\n            let node = wsChildrenTemplates.[i] :?> Dom.Element\n            let name = node.GetAttribute(\"ws-children-template\").ToLower()\n            node.RemoveAttribute(\"ws-children-template\")\n            rawTpls.[name] <-\n                let els = DomUtility.ChildrenArray node\n                (els, FakeRoot els)\n        let instantiated = HashSet()\n        let rec prepareTemplate name =\n            if not (loadedTpls.ContainsKey name) then\n                match rawTpls.TryGetValue(name) with\n                | false, _ ->\n                    Console.Warn(\n                        if instantiated.Contains(name)\n                        then \"Encountered loop when instantiating \" + name\n                        else \"Local template does not exist: \" + name)\n                | true, (els, root) ->\n                    instantiated.Add(name) |> ignore\n                    rawTpls.Remove(name) |> ignore\n                    PrepareTemplateStrict baseName (Some name) els (Some root) (Some prepareTemplate)\n        while rawTpls.Count > 0 do\n            prepareTemplate (Seq.head rawTpls.Keys)\n\n    let LoadLocalTemplates (baseName: string) =\n        if not LocalTemplatesLoaded then\n            LocalTemplatesLoaded <- true\n            LoadNestedTemplates JS.Document.Body \"\"\n        LoadedTemplates.[baseName] <- LoadedTemplateFile(\"\")\n\n    let RunFullDocTemplate (fillWith: seq<TemplateHole>) =\n        LoadLocalTemplates \"\"\n        PrepareTemplateStrict \"\" None (DomUtility.ChildrenArray JS.Document.Body) (Some JS.Document.Body) None\n        ChildrenTemplate JS.Document.Body fillWith\n        |>! Doc'.RunInPlace true JS.Document.Body\n\n    let Template (els: Dom.Node[]) (fillWith: seq<TemplateHole>) =\n        ChildrenTemplate (FakeRoot els) fillWith\n\n    let NamedTemplate (baseName: string) (name: option<string>) (fillWith: seq<TemplateHole>) =\n        match LoadedTemplateFile(baseName).TryGetValue(defaultArg name \"\") with\n        | true, t -> ChildrenTemplate (t.CloneNode(true) :?> Dom.Element) fillWith\n        | false, _ -> Console.Warn(\"Local template doesn't exist\", name); Doc'.Empty\n\n    let GetOrLoadTemplate (baseName: string) (name: option<string>) (els: unit -> Dom.Node[]) (fillWith: seq<TemplateHole>) =\n        LoadLocalTemplates \"\"\n        PrepareTemplate baseName name els\n        NamedTemplate baseName name fillWith\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\nopen WebSharper\n\nopen System\nopen WebSharper.UI.Client\n\n[<JavaScript>]\ntype Flow<'T>(render: Var<Doc> -> ('T -> unit) -> unit) =\n\n    new (define: Func<Func<'T, unit>, Doc>) =\n        Flow(fun var cont -> Var.Set var (define.Invoke (Func<_,_>(cont))))\n\n    member this.Render = render\n\n[<JavaScript>]\n[<Sealed>]\ntype Flow =\n\n    static member Map f (x: Flow<'A>) =\n        Flow(fun var cont -> x.Render var (fun r -> (f r) |> cont))\n\n    // \"Unwrap\" the value from the flowlet, use it as an argument to the\n    // continuation k, and return the value of the applied continuation.\n\n    // Semantically, what we're doing here is running the form (or other\n    // input mechanism, but let's stick with thinking about forms), getting\n    // the result, and then using this as an input to the continuation.\n    static member Bind (m: Flow<'A>) (k: 'A -> Flow<'B>) =\n        Flow(fun var cont -> m.Render var (fun r -> (k r).Render var cont))\n\n    static member Return x =\n        Flow(fun var cont -> cont x)\n\n    static member Embed (fl: Flow<'A>) =\n        let var = Var.Create Doc.Empty\n        fl.Render var ignore\n        Doc.EmbedView var.View\n\n    static member Define (f: ('A -> unit) -> Doc) =\n        Flow(Func<_,_>(fun (x: Func<'A, unit>) -> f x.Invoke))\n\n    static member Static doc =\n        Flow(fun var cont -> Var.Set var doc; cont ())\n\n[<JavaScript>]\n[<Sealed>]\ntype FlowBuilder() =\n    member x.Bind(comp, func) = Flow.Bind comp func\n    member x.Return(value) = Flow.Return value\n    member x.ReturnFrom(inner: Flow<'A>) = inner\n\ntype Flow with\n\n    static member Do =\n        FlowBuilder()\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\n#nowarn \"44\" // HTML deprecated\n\nopen WebSharper\nopen WebSharper.JavaScript\n\n/// This is an auto-generated module providing HTML5 vocabulary.\n/// Generated using tags.csv from WebSharper;\n/// See tools/UpdateElems.fsx for the code-generation logic.\n// Warning: don't mark this module as JavaScript: some submodules _must_ not\n// be JavaScript because they are proxied.\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Html =\n\n    /// Create a text node with constant content, or with dynamic content using `view.V`.\n    [<JavaScript; Inline; Macro(typeof<Macros.TextView>)>]\n    let text t = Doc.TextNode t\n\n    /// Create a text node with dynamic content.\n    [<JavaScript; Inline>]\n    let textView v = Client.Doc.TextView v\n\n    /// Insert a client-side Doc.\n    [<JavaScript; Inline>]\n    let client ([<ReflectedDefinition; JavaScript>] q) = Doc.ClientSide q\n\n    module Elt =\n\n        // {{ tag normal colliding deprecated [elt]\n        /// Create an HTML element <a> with attributes and children.\n        [<JavaScript; Inline>]\n        let a ats ch = Doc.Element \"a\" ats ch\n        /// Create an HTML element <abbr> with attributes and children.\n        [<JavaScript; Inline>]\n        let abbr ats ch = Doc.Element \"abbr\" ats ch\n        /// Create an HTML element <acronym> with attributes and children.\n        [<JavaScript; Inline>]\n        let acronym ats ch = Doc.Element \"acronym\" ats ch\n        /// Create an HTML element <address> with attributes and children.\n        [<JavaScript; Inline>]\n        let address ats ch = Doc.Element \"address\" ats ch\n        /// Create an HTML element <applet> with attributes and children.\n        [<JavaScript; Inline>]\n        let applet ats ch = Doc.Element \"applet\" ats ch\n        /// Create an HTML element <area> with attributes and children.\n        [<JavaScript; Inline>]\n        let area ats ch = Doc.Element \"area\" ats ch\n        /// Create an HTML element <article> with attributes and children.\n        [<JavaScript; Inline>]\n        let article ats ch = Doc.Element \"article\" ats ch\n        /// Create an HTML element <aside> with attributes and children.\n        [<JavaScript; Inline>]\n        let aside ats ch = Doc.Element \"aside\" ats ch\n        /// Create an HTML element <audio> with attributes and children.\n        [<JavaScript; Inline>]\n        let audio ats ch = Doc.Element \"audio\" ats ch\n        /// Create an HTML element <b> with attributes and children.\n        [<JavaScript; Inline>]\n        let b ats ch = Doc.Element \"b\" ats ch\n        /// Create an HTML element <base> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``base`` ats ch = Doc.Element \"base\" ats ch\n        /// Create an HTML element <basefont> with attributes and children.\n        [<JavaScript; Inline>]\n        let basefont ats ch = Doc.Element \"basefont\" ats ch\n        /// Create an HTML element <bdi> with attributes and children.\n        [<JavaScript; Inline>]\n        let bdi ats ch = Doc.Element \"bdi\" ats ch\n        /// Create an HTML element <bdo> with attributes and children.\n        [<JavaScript; Inline>]\n        let bdo ats ch = Doc.Element \"bdo\" ats ch\n        /// Create an HTML element <big> with attributes and children.\n        [<JavaScript; Inline>]\n        let big ats ch = Doc.Element \"big\" ats ch\n        /// Create an HTML element <blockquote> with attributes and children.\n        [<JavaScript; Inline>]\n        let blockquote ats ch = Doc.Element \"blockquote\" ats ch\n        /// Create an HTML element <body> with attributes and children.\n        [<JavaScript; Inline>]\n        let body ats ch = Doc.Element \"body\" ats ch\n        /// Create an HTML element <br> with attributes and children.\n        [<JavaScript; Inline>]\n        let br ats ch = Doc.Element \"br\" ats ch\n        /// Create an HTML element <button> with attributes and children.\n        [<JavaScript; Inline>]\n        let button ats ch = Doc.Element \"button\" ats ch\n        /// Create an HTML element <canvas> with attributes and children.\n        [<JavaScript; Inline>]\n        let canvas ats ch = Doc.Element \"canvas\" ats ch\n        /// Create an HTML element <caption> with attributes and children.\n        [<JavaScript; Inline>]\n        let caption ats ch = Doc.Element \"caption\" ats ch\n        /// Create an HTML element <center> with attributes and children.\n        [<JavaScript; Inline>]\n        let center ats ch = Doc.Element \"center\" ats ch\n        /// Create an HTML element <cite> with attributes and children.\n        [<JavaScript; Inline>]\n        let cite ats ch = Doc.Element \"cite\" ats ch\n        /// Create an HTML element <code> with attributes and children.\n        [<JavaScript; Inline>]\n        let code ats ch = Doc.Element \"code\" ats ch\n        /// Create an HTML element <col> with attributes and children.\n        [<JavaScript; Inline>]\n        let col ats ch = Doc.Element \"col\" ats ch\n        /// Create an HTML element <colgroup> with attributes and children.\n        [<JavaScript; Inline>]\n        let colgroup ats ch = Doc.Element \"colgroup\" ats ch\n        /// Create an HTML element <command> with attributes and children.\n        [<JavaScript; Inline>]\n        let command ats ch = Doc.Element \"command\" ats ch\n        /// Create an HTML element <content> with attributes and children.\n        [<JavaScript; Inline>]\n        let content ats ch = Doc.Element \"content\" ats ch\n        /// Create an HTML element <data> with attributes and children.\n        [<JavaScript; Inline>]\n        let data ats ch = Doc.Element \"data\" ats ch\n        /// Create an HTML element <datalist> with attributes and children.\n        [<JavaScript; Inline>]\n        let datalist ats ch = Doc.Element \"datalist\" ats ch\n        /// Create an HTML element <dd> with attributes and children.\n        [<JavaScript; Inline>]\n        let dd ats ch = Doc.Element \"dd\" ats ch\n        /// Create an HTML element <del> with attributes and children.\n        [<JavaScript; Inline>]\n        let del ats ch = Doc.Element \"del\" ats ch\n        /// Create an HTML element <details> with attributes and children.\n        [<JavaScript; Inline>]\n        let details ats ch = Doc.Element \"details\" ats ch\n        /// Create an HTML element <dfn> with attributes and children.\n        [<JavaScript; Inline>]\n        let dfn ats ch = Doc.Element \"dfn\" ats ch\n        /// Create an HTML element <dir> with attributes and children.\n        [<JavaScript; Inline>]\n        let dir ats ch = Doc.Element \"dir\" ats ch\n        /// Create an HTML element <div> with attributes and children.\n        [<JavaScript; Inline>]\n        let div ats ch = Doc.Element \"div\" ats ch\n        /// Create an HTML element <dl> with attributes and children.\n        [<JavaScript; Inline>]\n        let dl ats ch = Doc.Element \"dl\" ats ch\n        /// Create an HTML element <dt> with attributes and children.\n        [<JavaScript; Inline>]\n        let dt ats ch = Doc.Element \"dt\" ats ch\n        /// Create an HTML element <em> with attributes and children.\n        [<JavaScript; Inline>]\n        let em ats ch = Doc.Element \"em\" ats ch\n        /// Create an HTML element <embed> with attributes and children.\n        [<JavaScript; Inline>]\n        let embed ats ch = Doc.Element \"embed\" ats ch\n        /// Create an HTML element <fieldset> with attributes and children.\n        [<JavaScript; Inline>]\n        let fieldset ats ch = Doc.Element \"fieldset\" ats ch\n        /// Create an HTML element <figcaption> with attributes and children.\n        [<JavaScript; Inline>]\n        let figcaption ats ch = Doc.Element \"figcaption\" ats ch\n        /// Create an HTML element <figure> with attributes and children.\n        [<JavaScript; Inline>]\n        let figure ats ch = Doc.Element \"figure\" ats ch\n        /// Create an HTML element <font> with attributes and children.\n        [<JavaScript; Inline>]\n        let font ats ch = Doc.Element \"font\" ats ch\n        /// Create an HTML element <footer> with attributes and children.\n        [<JavaScript; Inline>]\n        let footer ats ch = Doc.Element \"footer\" ats ch\n        /// Create an HTML element <form> with attributes and children.\n        [<JavaScript; Inline>]\n        let form ats ch = Doc.Element \"form\" ats ch\n        /// Create an HTML element <frame> with attributes and children.\n        [<JavaScript; Inline>]\n        let frame ats ch = Doc.Element \"frame\" ats ch\n        /// Create an HTML element <frameset> with attributes and children.\n        [<JavaScript; Inline>]\n        let frameset ats ch = Doc.Element \"frameset\" ats ch\n        /// Create an HTML element <h1> with attributes and children.\n        [<JavaScript; Inline>]\n        let h1 ats ch = Doc.Element \"h1\" ats ch\n        /// Create an HTML element <h2> with attributes and children.\n        [<JavaScript; Inline>]\n        let h2 ats ch = Doc.Element \"h2\" ats ch\n        /// Create an HTML element <h3> with attributes and children.\n        [<JavaScript; Inline>]\n        let h3 ats ch = Doc.Element \"h3\" ats ch\n        /// Create an HTML element <h4> with attributes and children.\n        [<JavaScript; Inline>]\n        let h4 ats ch = Doc.Element \"h4\" ats ch\n        /// Create an HTML element <h5> with attributes and children.\n        [<JavaScript; Inline>]\n        let h5 ats ch = Doc.Element \"h5\" ats ch\n        /// Create an HTML element <h6> with attributes and children.\n        [<JavaScript; Inline>]\n        let h6 ats ch = Doc.Element \"h6\" ats ch\n        /// Create an HTML element <head> with attributes and children.\n        [<JavaScript; Inline>]\n        let head ats ch = Doc.Element \"head\" ats ch\n        /// Create an HTML element <header> with attributes and children.\n        [<JavaScript; Inline>]\n        let header ats ch = Doc.Element \"header\" ats ch\n        /// Create an HTML element <hgroup> with attributes and children.\n        [<JavaScript; Inline>]\n        let hgroup ats ch = Doc.Element \"hgroup\" ats ch\n        /// Create an HTML element <hr> with attributes and children.\n        [<JavaScript; Inline>]\n        let hr ats ch = Doc.Element \"hr\" ats ch\n        /// Create an HTML element <html> with attributes and children.\n        [<JavaScript; Inline>]\n        let html ats ch = Doc.Element \"html\" ats ch\n        /// Create an HTML element <i> with attributes and children.\n        [<JavaScript; Inline>]\n        let i ats ch = Doc.Element \"i\" ats ch\n        /// Create an HTML element <iframe> with attributes and children.\n        [<JavaScript; Inline>]\n        let iframe ats ch = Doc.Element \"iframe\" ats ch\n        /// Create an HTML element <img> with attributes and children.\n        [<JavaScript; Inline>]\n        let img ats ch = Doc.Element \"img\" ats ch\n        /// Create an HTML element <input> with attributes and children.\n        [<JavaScript; Inline>]\n        let input ats ch = Doc.Element \"input\" ats ch\n        /// Create an HTML element <ins> with attributes and children.\n        [<JavaScript; Inline>]\n        let ins ats ch = Doc.Element \"ins\" ats ch\n        /// Create an HTML element <isindex> with attributes and children.\n        [<JavaScript; Inline>]\n        let isindex ats ch = Doc.Element \"isindex\" ats ch\n        /// Create an HTML element <kbd> with attributes and children.\n        [<JavaScript; Inline>]\n        let kbd ats ch = Doc.Element \"kbd\" ats ch\n        /// Create an HTML element <keygen> with attributes and children.\n        [<JavaScript; Inline>]\n        let keygen ats ch = Doc.Element \"keygen\" ats ch\n        /// Create an HTML element <label> with attributes and children.\n        [<JavaScript; Inline>]\n        let label ats ch = Doc.Element \"label\" ats ch\n        /// Create an HTML element <legend> with attributes and children.\n        [<JavaScript; Inline>]\n        let legend ats ch = Doc.Element \"legend\" ats ch\n        /// Create an HTML element <li> with attributes and children.\n        [<JavaScript; Inline>]\n        let li ats ch = Doc.Element \"li\" ats ch\n        /// Create an HTML element <link> with attributes and children.\n        [<JavaScript; Inline>]\n        let link ats ch = Doc.Element \"link\" ats ch\n        /// Create an HTML element <main> with attributes and children.\n        [<JavaScript; Inline>]\n        let main ats ch = Doc.Element \"main\" ats ch\n        /// Create an HTML element <map> with attributes and children.\n        [<JavaScript; Inline>]\n        let map ats ch = Doc.Element \"map\" ats ch\n        /// Create an HTML element <mark> with attributes and children.\n        [<JavaScript; Inline>]\n        let mark ats ch = Doc.Element \"mark\" ats ch\n        /// Create an HTML element <menu> with attributes and children.\n        [<JavaScript; Inline>]\n        let menu ats ch = Doc.Element \"menu\" ats ch\n        /// Create an HTML element <menuitem> with attributes and children.\n        [<JavaScript; Inline>]\n        let menuitem ats ch = Doc.Element \"menuitem\" ats ch\n        /// Create an HTML element <meta> with attributes and children.\n        [<JavaScript; Inline>]\n        let meta ats ch = Doc.Element \"meta\" ats ch\n        /// Create an HTML element <meter> with attributes and children.\n        [<JavaScript; Inline>]\n        let meter ats ch = Doc.Element \"meter\" ats ch\n        /// Create an HTML element <nav> with attributes and children.\n        [<JavaScript; Inline>]\n        let nav ats ch = Doc.Element \"nav\" ats ch\n        /// Create an HTML element <noframes> with attributes and children.\n        [<JavaScript; Inline>]\n        let noframes ats ch = Doc.Element \"noframes\" ats ch\n        /// Create an HTML element <noscript> with attributes and children.\n        [<JavaScript; Inline>]\n        let noscript ats ch = Doc.Element \"noscript\" ats ch\n        /// Create an HTML element <object> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``object`` ats ch = Doc.Element \"object\" ats ch\n        /// Create an HTML element <ol> with attributes and children.\n        [<JavaScript; Inline>]\n        let ol ats ch = Doc.Element \"ol\" ats ch\n        /// Create an HTML element <optgroup> with attributes and children.\n        [<JavaScript; Inline>]\n        let optgroup ats ch = Doc.Element \"optgroup\" ats ch\n        /// Create an HTML element <option> with attributes and children.\n        [<JavaScript; Inline>]\n        let option ats ch = Doc.Element \"option\" ats ch\n        /// Create an HTML element <output> with attributes and children.\n        [<JavaScript; Inline>]\n        let output ats ch = Doc.Element \"output\" ats ch\n        /// Create an HTML element <p> with attributes and children.\n        [<JavaScript; Inline>]\n        let p ats ch = Doc.Element \"p\" ats ch\n        /// Create an HTML element <param> with attributes and children.\n        [<JavaScript; Inline>]\n        let param ats ch = Doc.Element \"param\" ats ch\n        /// Create an HTML element <picture> with attributes and children.\n        [<JavaScript; Inline>]\n        let picture ats ch = Doc.Element \"picture\" ats ch\n        /// Create an HTML element <pre> with attributes and children.\n        [<JavaScript; Inline>]\n        let pre ats ch = Doc.Element \"pre\" ats ch\n        /// Create an HTML element <progress> with attributes and children.\n        [<JavaScript; Inline>]\n        let progress ats ch = Doc.Element \"progress\" ats ch\n        /// Create an HTML element <q> with attributes and children.\n        [<JavaScript; Inline>]\n        let q ats ch = Doc.Element \"q\" ats ch\n        /// Create an HTML element <rp> with attributes and children.\n        [<JavaScript; Inline>]\n        let rp ats ch = Doc.Element \"rp\" ats ch\n        /// Create an HTML element <rt> with attributes and children.\n        [<JavaScript; Inline>]\n        let rt ats ch = Doc.Element \"rt\" ats ch\n        /// Create an HTML element <rtc> with attributes and children.\n        [<JavaScript; Inline>]\n        let rtc ats ch = Doc.Element \"rtc\" ats ch\n        /// Create an HTML element <ruby> with attributes and children.\n        [<JavaScript; Inline>]\n        let ruby ats ch = Doc.Element \"ruby\" ats ch\n        /// Create an HTML element <s> with attributes and children.\n        [<JavaScript; Inline>]\n        let s ats ch = Doc.Element \"s\" ats ch\n        /// Create an HTML element <samp> with attributes and children.\n        [<JavaScript; Inline>]\n        let samp ats ch = Doc.Element \"samp\" ats ch\n        /// Create an HTML element <script> with attributes and children.\n        [<JavaScript; Inline>]\n        let script ats ch = Doc.Element \"script\" ats ch\n        /// Create an HTML element <section> with attributes and children.\n        [<JavaScript; Inline>]\n        let section ats ch = Doc.Element \"section\" ats ch\n        /// Create an HTML element <select> with attributes and children.\n        [<JavaScript; Inline>]\n        let select ats ch = Doc.Element \"select\" ats ch\n        /// Create an HTML element <shadow> with attributes and children.\n        [<JavaScript; Inline>]\n        let shadow ats ch = Doc.Element \"shadow\" ats ch\n        /// Create an HTML element <small> with attributes and children.\n        [<JavaScript; Inline>]\n        let small ats ch = Doc.Element \"small\" ats ch\n        /// Create an HTML element <source> with attributes and children.\n        [<JavaScript; Inline>]\n        let source ats ch = Doc.Element \"source\" ats ch\n        /// Create an HTML element <span> with attributes and children.\n        [<JavaScript; Inline>]\n        let span ats ch = Doc.Element \"span\" ats ch\n        /// Create an HTML element <strike> with attributes and children.\n        [<JavaScript; Inline>]\n        let strike ats ch = Doc.Element \"strike\" ats ch\n        /// Create an HTML element <strong> with attributes and children.\n        [<JavaScript; Inline>]\n        let strong ats ch = Doc.Element \"strong\" ats ch\n        /// Create an HTML element <style> with attributes and children.\n        [<JavaScript; Inline>]\n        let style ats ch = Doc.Element \"style\" ats ch\n        /// Create an HTML element <sub> with attributes and children.\n        [<JavaScript; Inline>]\n        let sub ats ch = Doc.Element \"sub\" ats ch\n        /// Create an HTML element <summary> with attributes and children.\n        [<JavaScript; Inline>]\n        let summary ats ch = Doc.Element \"summary\" ats ch\n        /// Create an HTML element <sup> with attributes and children.\n        [<JavaScript; Inline>]\n        let sup ats ch = Doc.Element \"sup\" ats ch\n        /// Create an HTML element <table> with attributes and children.\n        [<JavaScript; Inline>]\n        let table ats ch = Doc.Element \"table\" ats ch\n        /// Create an HTML element <tbody> with attributes and children.\n        [<JavaScript; Inline>]\n        let tbody ats ch = Doc.Element \"tbody\" ats ch\n        /// Create an HTML element <td> with attributes and children.\n        [<JavaScript; Inline>]\n        let td ats ch = Doc.Element \"td\" ats ch\n        /// Create an HTML element <template> with attributes and children.\n        [<JavaScript; Inline>]\n        let template ats ch = Doc.Element \"template\" ats ch\n        /// Create an HTML element <textarea> with attributes and children.\n        [<JavaScript; Inline>]\n        let textarea ats ch = Doc.Element \"textarea\" ats ch\n        /// Create an HTML element <tfoot> with attributes and children.\n        [<JavaScript; Inline>]\n        let tfoot ats ch = Doc.Element \"tfoot\" ats ch\n        /// Create an HTML element <th> with attributes and children.\n        [<JavaScript; Inline>]\n        let th ats ch = Doc.Element \"th\" ats ch\n        /// Create an HTML element <thead> with attributes and children.\n        [<JavaScript; Inline>]\n        let thead ats ch = Doc.Element \"thead\" ats ch\n        /// Create an HTML element <time> with attributes and children.\n        [<JavaScript; Inline>]\n        let time ats ch = Doc.Element \"time\" ats ch\n        /// Create an HTML element <title> with attributes and children.\n        [<JavaScript; Inline>]\n        let title ats ch = Doc.Element \"title\" ats ch\n        /// Create an HTML element <tr> with attributes and children.\n        [<JavaScript; Inline>]\n        let tr ats ch = Doc.Element \"tr\" ats ch\n        /// Create an HTML element <track> with attributes and children.\n        [<JavaScript; Inline>]\n        let track ats ch = Doc.Element \"track\" ats ch\n        /// Create an HTML element <tt> with attributes and children.\n        [<JavaScript; Inline>]\n        let tt ats ch = Doc.Element \"tt\" ats ch\n        /// Create an HTML element <u> with attributes and children.\n        [<JavaScript; Inline>]\n        let u ats ch = Doc.Element \"u\" ats ch\n        /// Create an HTML element <ul> with attributes and children.\n        [<JavaScript; Inline>]\n        let ul ats ch = Doc.Element \"ul\" ats ch\n        /// Create an HTML element <var> with attributes and children.\n        [<JavaScript; Inline>]\n        let var ats ch = Doc.Element \"var\" ats ch\n        /// Create an HTML element <video> with attributes and children.\n        [<JavaScript; Inline>]\n        let video ats ch = Doc.Element \"video\" ats ch\n        /// Create an HTML element <wbr> with attributes and children.\n        [<JavaScript; Inline>]\n        let wbr ats ch = Doc.Element \"wbr\" ats ch\n        // }}\n\n    // {{ tag normal [doc]\n    /// Create an HTML element <a> with attributes and children.\n    [<JavaScript; Inline>]\n    let a ats ch = Elt.a ats ch :> Doc\n    /// Create an HTML element <abbr> with attributes and children.\n    [<JavaScript; Inline>]\n    let abbr ats ch = Elt.abbr ats ch :> Doc\n    /// Create an HTML element <address> with attributes and children.\n    [<JavaScript; Inline>]\n    let address ats ch = Elt.address ats ch :> Doc\n    /// Create an HTML element <area> with attributes and children.\n    [<JavaScript; Inline>]\n    let area ats ch = Elt.area ats ch :> Doc\n    /// Create an HTML element <article> with attributes and children.\n    [<JavaScript; Inline>]\n    let article ats ch = Elt.article ats ch :> Doc\n    /// Create an HTML element <aside> with attributes and children.\n    [<JavaScript; Inline>]\n    let aside ats ch = Elt.aside ats ch :> Doc\n    /// Create an HTML element <audio> with attributes and children.\n    [<JavaScript; Inline>]\n    let audio ats ch = Elt.audio ats ch :> Doc\n    /// Create an HTML element <b> with attributes and children.\n    [<JavaScript; Inline>]\n    let b ats ch = Elt.b ats ch :> Doc\n    /// Create an HTML element <base> with attributes and children.\n    [<JavaScript; Inline>]\n    let ``base`` ats ch = Elt.``base`` ats ch :> Doc\n    /// Create an HTML element <bdi> with attributes and children.\n    [<JavaScript; Inline>]\n    let bdi ats ch = Elt.bdi ats ch :> Doc\n    /// Create an HTML element <bdo> with attributes and children.\n    [<JavaScript; Inline>]\n    let bdo ats ch = Elt.bdo ats ch :> Doc\n    /// Create an HTML element <blockquote> with attributes and children.\n    [<JavaScript; Inline>]\n    let blockquote ats ch = Elt.blockquote ats ch :> Doc\n    /// Create an HTML element <body> with attributes and children.\n    [<JavaScript; Inline>]\n    let body ats ch = Elt.body ats ch :> Doc\n    /// Create an HTML element <br> with attributes and children.\n    [<JavaScript; Inline>]\n    let br ats ch = Elt.br ats ch :> Doc\n    /// Create an HTML element <button> with attributes and children.\n    [<JavaScript; Inline>]\n    let button ats ch = Elt.button ats ch :> Doc\n    /// Create an HTML element <canvas> with attributes and children.\n    [<JavaScript; Inline>]\n    let canvas ats ch = Elt.canvas ats ch :> Doc\n    /// Create an HTML element <caption> with attributes and children.\n    [<JavaScript; Inline>]\n    let caption ats ch = Elt.caption ats ch :> Doc\n    /// Create an HTML element <cite> with attributes and children.\n    [<JavaScript; Inline>]\n    let cite ats ch = Elt.cite ats ch :> Doc\n    /// Create an HTML element <code> with attributes and children.\n    [<JavaScript; Inline>]\n    let code ats ch = Elt.code ats ch :> Doc\n    /// Create an HTML element <col> with attributes and children.\n    [<JavaScript; Inline>]\n    let col ats ch = Elt.col ats ch :> Doc\n    /// Create an HTML element <colgroup> with attributes and children.\n    [<JavaScript; Inline>]\n    let colgroup ats ch = Elt.colgroup ats ch :> Doc\n    /// Create an HTML element <command> with attributes and children.\n    [<JavaScript; Inline>]\n    let command ats ch = Elt.command ats ch :> Doc\n    /// Create an HTML element <datalist> with attributes and children.\n    [<JavaScript; Inline>]\n    let datalist ats ch = Elt.datalist ats ch :> Doc\n    /// Create an HTML element <dd> with attributes and children.\n    [<JavaScript; Inline>]\n    let dd ats ch = Elt.dd ats ch :> Doc\n    /// Create an HTML element <del> with attributes and children.\n    [<JavaScript; Inline>]\n    let del ats ch = Elt.del ats ch :> Doc\n    /// Create an HTML element <details> with attributes and children.\n    [<JavaScript; Inline>]\n    let details ats ch = Elt.details ats ch :> Doc\n    /// Create an HTML element <dfn> with attributes and children.\n    [<JavaScript; Inline>]\n    let dfn ats ch = Elt.dfn ats ch :> Doc\n    /// Create an HTML element <div> with attributes and children.\n    [<JavaScript; Inline>]\n    let div ats ch = Elt.div ats ch :> Doc\n    /// Create an HTML element <dl> with attributes and children.\n    [<JavaScript; Inline>]\n    let dl ats ch = Elt.dl ats ch :> Doc\n    /// Create an HTML element <dt> with attributes and children.\n    [<JavaScript; Inline>]\n    let dt ats ch = Elt.dt ats ch :> Doc\n    /// Create an HTML element <em> with attributes and children.\n    [<JavaScript; Inline>]\n    let em ats ch = Elt.em ats ch :> Doc\n    /// Create an HTML element <embed> with attributes and children.\n    [<JavaScript; Inline>]\n    let embed ats ch = Elt.embed ats ch :> Doc\n    /// Create an HTML element <fieldset> with attributes and children.\n    [<JavaScript; Inline>]\n    let fieldset ats ch = Elt.fieldset ats ch :> Doc\n    /// Create an HTML element <figcaption> with attributes and children.\n    [<JavaScript; Inline>]\n    let figcaption ats ch = Elt.figcaption ats ch :> Doc\n    /// Create an HTML element <figure> with attributes and children.\n    [<JavaScript; Inline>]\n    let figure ats ch = Elt.figure ats ch :> Doc\n    /// Create an HTML element <footer> with attributes and children.\n    [<JavaScript; Inline>]\n    let footer ats ch = Elt.footer ats ch :> Doc\n    /// Create an HTML element <form> with attributes and children.\n    [<JavaScript; Inline>]\n    let form ats ch = Elt.form ats ch :> Doc\n    /// Create an HTML element <h1> with attributes and children.\n    [<JavaScript; Inline>]\n    let h1 ats ch = Elt.h1 ats ch :> Doc\n    /// Create an HTML element <h2> with attributes and children.\n    [<JavaScript; Inline>]\n    let h2 ats ch = Elt.h2 ats ch :> Doc\n    /// Create an HTML element <h3> with attributes and children.\n    [<JavaScript; Inline>]\n    let h3 ats ch = Elt.h3 ats ch :> Doc\n    /// Create an HTML element <h4> with attributes and children.\n    [<JavaScript; Inline>]\n    let h4 ats ch = Elt.h4 ats ch :> Doc\n    /// Create an HTML element <h5> with attributes and children.\n    [<JavaScript; Inline>]\n    let h5 ats ch = Elt.h5 ats ch :> Doc\n    /// Create an HTML element <h6> with attributes and children.\n    [<JavaScript; Inline>]\n    let h6 ats ch = Elt.h6 ats ch :> Doc\n    /// Create an HTML element <head> with attributes and children.\n    [<JavaScript; Inline>]\n    let head ats ch = Elt.head ats ch :> Doc\n    /// Create an HTML element <header> with attributes and children.\n    [<JavaScript; Inline>]\n    let header ats ch = Elt.header ats ch :> Doc\n    /// Create an HTML element <hgroup> with attributes and children.\n    [<JavaScript; Inline>]\n    let hgroup ats ch = Elt.hgroup ats ch :> Doc\n    /// Create an HTML element <hr> with attributes and children.\n    [<JavaScript; Inline>]\n    let hr ats ch = Elt.hr ats ch :> Doc\n    /// Create an HTML element <html> with attributes and children.\n    [<JavaScript; Inline>]\n    let html ats ch = Elt.html ats ch :> Doc\n    /// Create an HTML element <i> with attributes and children.\n    [<JavaScript; Inline>]\n    let i ats ch = Elt.i ats ch :> Doc\n    /// Create an HTML element <iframe> with attributes and children.\n    [<JavaScript; Inline>]\n    let iframe ats ch = Elt.iframe ats ch :> Doc\n    /// Create an HTML element <img> with attributes and children.\n    [<JavaScript; Inline>]\n    let img ats ch = Elt.img ats ch :> Doc\n    /// Create an HTML element <input> with attributes and children.\n    [<JavaScript; Inline>]\n    let input ats ch = Elt.input ats ch :> Doc\n    /// Create an HTML element <ins> with attributes and children.\n    [<JavaScript; Inline>]\n    let ins ats ch = Elt.ins ats ch :> Doc\n    /// Create an HTML element <kbd> with attributes and children.\n    [<JavaScript; Inline>]\n    let kbd ats ch = Elt.kbd ats ch :> Doc\n    /// Create an HTML element <keygen> with attributes and children.\n    [<JavaScript; Inline>]\n    let keygen ats ch = Elt.keygen ats ch :> Doc\n    /// Create an HTML element <label> with attributes and children.\n    [<JavaScript; Inline>]\n    let label ats ch = Elt.label ats ch :> Doc\n    /// Create an HTML element <legend> with attributes and children.\n    [<JavaScript; Inline>]\n    let legend ats ch = Elt.legend ats ch :> Doc\n    /// Create an HTML element <li> with attributes and children.\n    [<JavaScript; Inline>]\n    let li ats ch = Elt.li ats ch :> Doc\n    /// Create an HTML element <link> with attributes and children.\n    [<JavaScript; Inline>]\n    let link ats ch = Elt.link ats ch :> Doc\n    /// Create an HTML element <mark> with attributes and children.\n    [<JavaScript; Inline>]\n    let mark ats ch = Elt.mark ats ch :> Doc\n    /// Create an HTML element <meta> with attributes and children.\n    [<JavaScript; Inline>]\n    let meta ats ch = Elt.meta ats ch :> Doc\n    /// Create an HTML element <meter> with attributes and children.\n    [<JavaScript; Inline>]\n    let meter ats ch = Elt.meter ats ch :> Doc\n    /// Create an HTML element <nav> with attributes and children.\n    [<JavaScript; Inline>]\n    let nav ats ch = Elt.nav ats ch :> Doc\n    /// Create an HTML element <noframes> with attributes and children.\n    [<JavaScript; Inline>]\n    let noframes ats ch = Elt.noframes ats ch :> Doc\n    /// Create an HTML element <noscript> with attributes and children.\n    [<JavaScript; Inline>]\n    let noscript ats ch = Elt.noscript ats ch :> Doc\n    /// Create an HTML element <ol> with attributes and children.\n    [<JavaScript; Inline>]\n    let ol ats ch = Elt.ol ats ch :> Doc\n    /// Create an HTML element <optgroup> with attributes and children.\n    [<JavaScript; Inline>]\n    let optgroup ats ch = Elt.optgroup ats ch :> Doc\n    /// Create an HTML element <output> with attributes and children.\n    [<JavaScript; Inline>]\n    let output ats ch = Elt.output ats ch :> Doc\n    /// Create an HTML element <p> with attributes and children.\n    [<JavaScript; Inline>]\n    let p ats ch = Elt.p ats ch :> Doc\n    /// Create an HTML element <param> with attributes and children.\n    [<JavaScript; Inline>]\n    let param ats ch = Elt.param ats ch :> Doc\n    /// Create an HTML element <picture> with attributes and children.\n    [<JavaScript; Inline>]\n    let picture ats ch = Elt.picture ats ch :> Doc\n    /// Create an HTML element <pre> with attributes and children.\n    [<JavaScript; Inline>]\n    let pre ats ch = Elt.pre ats ch :> Doc\n    /// Create an HTML element <progress> with attributes and children.\n    [<JavaScript; Inline>]\n    let progress ats ch = Elt.progress ats ch :> Doc\n    /// Create an HTML element <q> with attributes and children.\n    [<JavaScript; Inline>]\n    let q ats ch = Elt.q ats ch :> Doc\n    /// Create an HTML element <rp> with attributes and children.\n    [<JavaScript; Inline>]\n    let rp ats ch = Elt.rp ats ch :> Doc\n    /// Create an HTML element <rt> with attributes and children.\n    [<JavaScript; Inline>]\n    let rt ats ch = Elt.rt ats ch :> Doc\n    /// Create an HTML element <rtc> with attributes and children.\n    [<JavaScript; Inline>]\n    let rtc ats ch = Elt.rtc ats ch :> Doc\n    /// Create an HTML element <ruby> with attributes and children.\n    [<JavaScript; Inline>]\n    let ruby ats ch = Elt.ruby ats ch :> Doc\n    /// Create an HTML element <samp> with attributes and children.\n    [<JavaScript; Inline>]\n    let samp ats ch = Elt.samp ats ch :> Doc\n    /// Create an HTML element <script> with attributes and children.\n    [<JavaScript; Inline>]\n    let script ats ch = Elt.script ats ch :> Doc\n    /// Create an HTML element <section> with attributes and children.\n    [<JavaScript; Inline>]\n    let section ats ch = Elt.section ats ch :> Doc\n    /// Create an HTML element <select> with attributes and children.\n    [<JavaScript; Inline>]\n    let select ats ch = Elt.select ats ch :> Doc\n    /// Create an HTML element <shadow> with attributes and children.\n    [<JavaScript; Inline>]\n    let shadow ats ch = Elt.shadow ats ch :> Doc\n    /// Create an HTML element <small> with attributes and children.\n    [<JavaScript; Inline>]\n    let small ats ch = Elt.small ats ch :> Doc\n    /// Create an HTML element <source> with attributes and children.\n    [<JavaScript; Inline>]\n    let source ats ch = Elt.source ats ch :> Doc\n    /// Create an HTML element <span> with attributes and children.\n    [<JavaScript; Inline>]\n    let span ats ch = Elt.span ats ch :> Doc\n    /// Create an HTML element <strong> with attributes and children.\n    [<JavaScript; Inline>]\n    let strong ats ch = Elt.strong ats ch :> Doc\n    /// Create an HTML element <sub> with attributes and children.\n    [<JavaScript; Inline>]\n    let sub ats ch = Elt.sub ats ch :> Doc\n    /// Create an HTML element <summary> with attributes and children.\n    [<JavaScript; Inline>]\n    let summary ats ch = Elt.summary ats ch :> Doc\n    /// Create an HTML element <sup> with attributes and children.\n    [<JavaScript; Inline>]\n    let sup ats ch = Elt.sup ats ch :> Doc\n    /// Create an HTML element <table> with attributes and children.\n    [<JavaScript; Inline>]\n    let table ats ch = Elt.table ats ch :> Doc\n    /// Create an HTML element <tbody> with attributes and children.\n    [<JavaScript; Inline>]\n    let tbody ats ch = Elt.tbody ats ch :> Doc\n    /// Create an HTML element <td> with attributes and children.\n    [<JavaScript; Inline>]\n    let td ats ch = Elt.td ats ch :> Doc\n    /// Create an HTML element <textarea> with attributes and children.\n    [<JavaScript; Inline>]\n    let textarea ats ch = Elt.textarea ats ch :> Doc\n    /// Create an HTML element <tfoot> with attributes and children.\n    [<JavaScript; Inline>]\n    let tfoot ats ch = Elt.tfoot ats ch :> Doc\n    /// Create an HTML element <th> with attributes and children.\n    [<JavaScript; Inline>]\n    let th ats ch = Elt.th ats ch :> Doc\n    /// Create an HTML element <thead> with attributes and children.\n    [<JavaScript; Inline>]\n    let thead ats ch = Elt.thead ats ch :> Doc\n    /// Create an HTML element <time> with attributes and children.\n    [<JavaScript; Inline>]\n    let time ats ch = Elt.time ats ch :> Doc\n    /// Create an HTML element <tr> with attributes and children.\n    [<JavaScript; Inline>]\n    let tr ats ch = Elt.tr ats ch :> Doc\n    /// Create an HTML element <track> with attributes and children.\n    [<JavaScript; Inline>]\n    let track ats ch = Elt.track ats ch :> Doc\n    /// Create an HTML element <ul> with attributes and children.\n    [<JavaScript; Inline>]\n    let ul ats ch = Elt.ul ats ch :> Doc\n    /// Create an HTML element <video> with attributes and children.\n    [<JavaScript; Inline>]\n    let video ats ch = Elt.video ats ch :> Doc\n    /// Create an HTML element <wbr> with attributes and children.\n    [<JavaScript; Inline>]\n    let wbr ats ch = Elt.wbr ats ch :> Doc\n    // }}\n\n    /// HTML5 element functions.\n    module Tags =\n\n        // {{ tag colliding deprecated [doc]\n        /// Create an HTML element <acronym> with attributes and children.\n        [<JavaScript; Inline>]\n        let acronym ats ch = Elt.acronym ats ch :> Doc\n        /// Create an HTML element <applet> with attributes and children.\n        [<JavaScript; Inline>]\n        let applet ats ch = Elt.applet ats ch :> Doc\n        /// Create an HTML element <basefont> with attributes and children.\n        [<JavaScript; Inline>]\n        let basefont ats ch = Elt.basefont ats ch :> Doc\n        /// Create an HTML element <big> with attributes and children.\n        [<JavaScript; Inline>]\n        let big ats ch = Elt.big ats ch :> Doc\n        /// Create an HTML element <center> with attributes and children.\n        [<JavaScript; Inline>]\n        let center ats ch = Elt.center ats ch :> Doc\n        /// Create an HTML element <content> with attributes and children.\n        [<JavaScript; Inline>]\n        let content ats ch = Elt.content ats ch :> Doc\n        /// Create an HTML element <data> with attributes and children.\n        [<JavaScript; Inline>]\n        let data ats ch = Elt.data ats ch :> Doc\n        /// Create an HTML element <dir> with attributes and children.\n        [<JavaScript; Inline>]\n        let dir ats ch = Elt.dir ats ch :> Doc\n        /// Create an HTML element <font> with attributes and children.\n        [<JavaScript; Inline>]\n        let font ats ch = Elt.font ats ch :> Doc\n        /// Create an HTML element <frame> with attributes and children.\n        [<JavaScript; Inline>]\n        let frame ats ch = Elt.frame ats ch :> Doc\n        /// Create an HTML element <frameset> with attributes and children.\n        [<JavaScript; Inline>]\n        let frameset ats ch = Elt.frameset ats ch :> Doc\n        /// Create an HTML element <isindex> with attributes and children.\n        [<JavaScript; Inline>]\n        let isindex ats ch = Elt.isindex ats ch :> Doc\n        /// Create an HTML element <main> with attributes and children.\n        [<JavaScript; Inline>]\n        let main ats ch = Elt.main ats ch :> Doc\n        /// Create an HTML element <map> with attributes and children.\n        [<JavaScript; Inline>]\n        let map ats ch = Elt.map ats ch :> Doc\n        /// Create an HTML element <menu> with attributes and children.\n        [<JavaScript; Inline>]\n        let menu ats ch = Elt.menu ats ch :> Doc\n        /// Create an HTML element <menuitem> with attributes and children.\n        [<JavaScript; Inline>]\n        let menuitem ats ch = Elt.menuitem ats ch :> Doc\n        /// Create an HTML element <object> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``object`` ats ch = Elt.``object`` ats ch :> Doc\n        /// Create an HTML element <option> with attributes and children.\n        [<JavaScript; Inline>]\n        let option ats ch = Elt.option ats ch :> Doc\n        /// Create an HTML element <s> with attributes and children.\n        [<JavaScript; Inline>]\n        let s ats ch = Elt.s ats ch :> Doc\n        /// Create an HTML element <strike> with attributes and children.\n        [<JavaScript; Inline>]\n        let strike ats ch = Elt.strike ats ch :> Doc\n        /// Create an HTML element <style> with attributes and children.\n        [<JavaScript; Inline>]\n        let style ats ch = Elt.style ats ch :> Doc\n        /// Create an HTML element <template> with attributes and children.\n        [<JavaScript; Inline>]\n        let template ats ch = Elt.template ats ch :> Doc\n        /// Create an HTML element <title> with attributes and children.\n        [<JavaScript; Inline>]\n        let title ats ch = Elt.title ats ch :> Doc\n        /// Create an HTML element <tt> with attributes and children.\n        [<JavaScript; Inline>]\n        let tt ats ch = Elt.tt ats ch :> Doc\n        /// Create an HTML element <u> with attributes and children.\n        [<JavaScript; Inline>]\n        let u ats ch = Elt.u ats ch :> Doc\n        /// Create an HTML element <var> with attributes and children.\n        [<JavaScript; Inline>]\n        let var ats ch = Elt.var ats ch :> Doc\n        // }}\n\n    /// SVG elements.\n    module SvgElements =\n\n        module Elt =\n\n            // {{ svgtag normal [elt]\n            /// Create an SVG element <a> with attributes and children.\n            [<JavaScript; Inline>]\n            let a ats ch = Doc.SvgElement \"a\" ats ch\n            /// Create an SVG element <altglyph> with attributes and children.\n            [<JavaScript; Inline>]\n            let altglyph ats ch = Doc.SvgElement \"altglyph\" ats ch\n            /// Create an SVG element <altglyphdef> with attributes and children.\n            [<JavaScript; Inline>]\n            let altglyphdef ats ch = Doc.SvgElement \"altglyphdef\" ats ch\n            /// Create an SVG element <altglyphitem> with attributes and children.\n            [<JavaScript; Inline>]\n            let altglyphitem ats ch = Doc.SvgElement \"altglyphitem\" ats ch\n            /// Create an SVG element <animate> with attributes and children.\n            [<JavaScript; Inline>]\n            let animate ats ch = Doc.SvgElement \"animate\" ats ch\n            /// Create an SVG element <animatecolor> with attributes and children.\n            [<JavaScript; Inline>]\n            let animatecolor ats ch = Doc.SvgElement \"animatecolor\" ats ch\n            /// Create an SVG element <animatemotion> with attributes and children.\n            [<JavaScript; Inline>]\n            let animatemotion ats ch = Doc.SvgElement \"animatemotion\" ats ch\n            /// Create an SVG element <animatetransform> with attributes and children.\n            [<JavaScript; Inline>]\n            let animatetransform ats ch = Doc.SvgElement \"animatetransform\" ats ch\n            /// Create an SVG element <circle> with attributes and children.\n            [<JavaScript; Inline>]\n            let circle ats ch = Doc.SvgElement \"circle\" ats ch\n            /// Create an SVG element <clippath> with attributes and children.\n            [<JavaScript; Inline>]\n            let clippath ats ch = Doc.SvgElement \"clippath\" ats ch\n            /// Create an SVG element <color-profile> with attributes and children.\n            [<JavaScript; Inline>]\n            let colorProfile ats ch = Doc.SvgElement \"color-profile\" ats ch\n            /// Create an SVG element <cursor> with attributes and children.\n            [<JavaScript; Inline>]\n            let cursor ats ch = Doc.SvgElement \"cursor\" ats ch\n            /// Create an SVG element <defs> with attributes and children.\n            [<JavaScript; Inline>]\n            let defs ats ch = Doc.SvgElement \"defs\" ats ch\n            /// Create an SVG element <desc> with attributes and children.\n            [<JavaScript; Inline>]\n            let desc ats ch = Doc.SvgElement \"desc\" ats ch\n            /// Create an SVG element <ellipse> with attributes and children.\n            [<JavaScript; Inline>]\n            let ellipse ats ch = Doc.SvgElement \"ellipse\" ats ch\n            /// Create an SVG element <feblend> with attributes and children.\n            [<JavaScript; Inline>]\n            let feblend ats ch = Doc.SvgElement \"feblend\" ats ch\n            /// Create an SVG element <fecolormatrix> with attributes and children.\n            [<JavaScript; Inline>]\n            let fecolormatrix ats ch = Doc.SvgElement \"fecolormatrix\" ats ch\n            /// Create an SVG element <fecomponenttransfer> with attributes and children.\n            [<JavaScript; Inline>]\n            let fecomponenttransfer ats ch = Doc.SvgElement \"fecomponenttransfer\" ats ch\n            /// Create an SVG element <fecomposite> with attributes and children.\n            [<JavaScript; Inline>]\n            let fecomposite ats ch = Doc.SvgElement \"fecomposite\" ats ch\n            /// Create an SVG element <feconvolvematrix> with attributes and children.\n            [<JavaScript; Inline>]\n            let feconvolvematrix ats ch = Doc.SvgElement \"feconvolvematrix\" ats ch\n            /// Create an SVG element <fediffuselighting> with attributes and children.\n            [<JavaScript; Inline>]\n            let fediffuselighting ats ch = Doc.SvgElement \"fediffuselighting\" ats ch\n            /// Create an SVG element <fedisplacementmap> with attributes and children.\n            [<JavaScript; Inline>]\n            let fedisplacementmap ats ch = Doc.SvgElement \"fedisplacementmap\" ats ch\n            /// Create an SVG element <fedistantlight> with attributes and children.\n            [<JavaScript; Inline>]\n            let fedistantlight ats ch = Doc.SvgElement \"fedistantlight\" ats ch\n            /// Create an SVG element <feflood> with attributes and children.\n            [<JavaScript; Inline>]\n            let feflood ats ch = Doc.SvgElement \"feflood\" ats ch\n            /// Create an SVG element <fefunca> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefunca ats ch = Doc.SvgElement \"fefunca\" ats ch\n            /// Create an SVG element <fefuncb> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefuncb ats ch = Doc.SvgElement \"fefuncb\" ats ch\n            /// Create an SVG element <fefuncg> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefuncg ats ch = Doc.SvgElement \"fefuncg\" ats ch\n            /// Create an SVG element <fefuncr> with attributes and children.\n            [<JavaScript; Inline>]\n            let fefuncr ats ch = Doc.SvgElement \"fefuncr\" ats ch\n            /// Create an SVG element <fegaussianblur> with attributes and children.\n            [<JavaScript; Inline>]\n            let fegaussianblur ats ch = Doc.SvgElement \"fegaussianblur\" ats ch\n            /// Create an SVG element <feimage> with attributes and children.\n            [<JavaScript; Inline>]\n            let feimage ats ch = Doc.SvgElement \"feimage\" ats ch\n            /// Create an SVG element <femerge> with attributes and children.\n            [<JavaScript; Inline>]\n            let femerge ats ch = Doc.SvgElement \"femerge\" ats ch\n            /// Create an SVG element <femergenode> with attributes and children.\n            [<JavaScript; Inline>]\n            let femergenode ats ch = Doc.SvgElement \"femergenode\" ats ch\n            /// Create an SVG element <femorphology> with attributes and children.\n            [<JavaScript; Inline>]\n            let femorphology ats ch = Doc.SvgElement \"femorphology\" ats ch\n            /// Create an SVG element <feoffset> with attributes and children.\n            [<JavaScript; Inline>]\n            let feoffset ats ch = Doc.SvgElement \"feoffset\" ats ch\n            /// Create an SVG element <fepointlight> with attributes and children.\n            [<JavaScript; Inline>]\n            let fepointlight ats ch = Doc.SvgElement \"fepointlight\" ats ch\n            /// Create an SVG element <fespecularlighting> with attributes and children.\n            [<JavaScript; Inline>]\n            let fespecularlighting ats ch = Doc.SvgElement \"fespecularlighting\" ats ch\n            /// Create an SVG element <fespotlight> with attributes and children.\n            [<JavaScript; Inline>]\n            let fespotlight ats ch = Doc.SvgElement \"fespotlight\" ats ch\n            /// Create an SVG element <fetile> with attributes and children.\n            [<JavaScript; Inline>]\n            let fetile ats ch = Doc.SvgElement \"fetile\" ats ch\n            /// Create an SVG element <feturbulence> with attributes and children.\n            [<JavaScript; Inline>]\n            let feturbulence ats ch = Doc.SvgElement \"feturbulence\" ats ch\n            /// Create an SVG element <filter> with attributes and children.\n            [<JavaScript; Inline>]\n            let filter ats ch = Doc.SvgElement \"filter\" ats ch\n            /// Create an SVG element <font> with attributes and children.\n            [<JavaScript; Inline>]\n            let font ats ch = Doc.SvgElement \"font\" ats ch\n            /// Create an SVG element <font-face> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFace ats ch = Doc.SvgElement \"font-face\" ats ch\n            /// Create an SVG element <font-face-format> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceFormat ats ch = Doc.SvgElement \"font-face-format\" ats ch\n            /// Create an SVG element <font-face-name> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceName ats ch = Doc.SvgElement \"font-face-name\" ats ch\n            /// Create an SVG element <font-face-src> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceSrc ats ch = Doc.SvgElement \"font-face-src\" ats ch\n            /// Create an SVG element <font-face-uri> with attributes and children.\n            [<JavaScript; Inline>]\n            let fontFaceUri ats ch = Doc.SvgElement \"font-face-uri\" ats ch\n            /// Create an SVG element <foreignobject> with attributes and children.\n            [<JavaScript; Inline>]\n            let foreignobject ats ch = Doc.SvgElement \"foreignobject\" ats ch\n            /// Create an SVG element <g> with attributes and children.\n            [<JavaScript; Inline>]\n            let g ats ch = Doc.SvgElement \"g\" ats ch\n            /// Create an SVG element <glyph> with attributes and children.\n            [<JavaScript; Inline>]\n            let glyph ats ch = Doc.SvgElement \"glyph\" ats ch\n            /// Create an SVG element <glyphref> with attributes and children.\n            [<JavaScript; Inline>]\n            let glyphref ats ch = Doc.SvgElement \"glyphref\" ats ch\n            /// Create an SVG element <hkern> with attributes and children.\n            [<JavaScript; Inline>]\n            let hkern ats ch = Doc.SvgElement \"hkern\" ats ch\n            /// Create an SVG element <image> with attributes and children.\n            [<JavaScript; Inline>]\n            let image ats ch = Doc.SvgElement \"image\" ats ch\n            /// Create an SVG element <line> with attributes and children.\n            [<JavaScript; Inline>]\n            let line ats ch = Doc.SvgElement \"line\" ats ch\n            /// Create an SVG element <lineargradient> with attributes and children.\n            [<JavaScript; Inline>]\n            let lineargradient ats ch = Doc.SvgElement \"lineargradient\" ats ch\n            /// Create an SVG element <marker> with attributes and children.\n            [<JavaScript; Inline>]\n            let marker ats ch = Doc.SvgElement \"marker\" ats ch\n            /// Create an SVG element <mask> with attributes and children.\n            [<JavaScript; Inline>]\n            let mask ats ch = Doc.SvgElement \"mask\" ats ch\n            /// Create an SVG element <metadata> with attributes and children.\n            [<JavaScript; Inline>]\n            let metadata ats ch = Doc.SvgElement \"metadata\" ats ch\n            /// Create an SVG element <missing-glyph> with attributes and children.\n            [<JavaScript; Inline>]\n            let missingGlyph ats ch = Doc.SvgElement \"missing-glyph\" ats ch\n            /// Create an SVG element <mpath> with attributes and children.\n            [<JavaScript; Inline>]\n            let mpath ats ch = Doc.SvgElement \"mpath\" ats ch\n            /// Create an SVG element <path> with attributes and children.\n            [<JavaScript; Inline>]\n            let path ats ch = Doc.SvgElement \"path\" ats ch\n            /// Create an SVG element <pattern> with attributes and children.\n            [<JavaScript; Inline>]\n            let pattern ats ch = Doc.SvgElement \"pattern\" ats ch\n            /// Create an SVG element <polygon> with attributes and children.\n            [<JavaScript; Inline>]\n            let polygon ats ch = Doc.SvgElement \"polygon\" ats ch\n            /// Create an SVG element <polyline> with attributes and children.\n            [<JavaScript; Inline>]\n            let polyline ats ch = Doc.SvgElement \"polyline\" ats ch\n            /// Create an SVG element <radialgradient> with attributes and children.\n            [<JavaScript; Inline>]\n            let radialgradient ats ch = Doc.SvgElement \"radialgradient\" ats ch\n            /// Create an SVG element <rect> with attributes and children.\n            [<JavaScript; Inline>]\n            let rect ats ch = Doc.SvgElement \"rect\" ats ch\n            /// Create an SVG element <script> with attributes and children.\n            [<JavaScript; Inline>]\n            let script ats ch = Doc.SvgElement \"script\" ats ch\n            /// Create an SVG element <set> with attributes and children.\n            [<JavaScript; Inline>]\n            let set ats ch = Doc.SvgElement \"set\" ats ch\n            /// Create an SVG element <stop> with attributes and children.\n            [<JavaScript; Inline>]\n            let stop ats ch = Doc.SvgElement \"stop\" ats ch\n            /// Create an SVG element <style> with attributes and children.\n            [<JavaScript; Inline>]\n            let style ats ch = Doc.SvgElement \"style\" ats ch\n            /// Create an SVG element <svg> with attributes and children.\n            [<JavaScript; Inline>]\n            let svg ats ch = Doc.SvgElement \"svg\" ats ch\n            /// Create an SVG element <switch> with attributes and children.\n            [<JavaScript; Inline>]\n            let switch ats ch = Doc.SvgElement \"switch\" ats ch\n            /// Create an SVG element <symbol> with attributes and children.\n            [<JavaScript; Inline>]\n            let symbol ats ch = Doc.SvgElement \"symbol\" ats ch\n            /// Create an SVG element <text> with attributes and children.\n            [<JavaScript; Inline>]\n            let text ats ch = Doc.SvgElement \"text\" ats ch\n            /// Create an SVG element <textpath> with attributes and children.\n            [<JavaScript; Inline>]\n            let textpath ats ch = Doc.SvgElement \"textpath\" ats ch\n            /// Create an SVG element <title> with attributes and children.\n            [<JavaScript; Inline>]\n            let title ats ch = Doc.SvgElement \"title\" ats ch\n            /// Create an SVG element <tref> with attributes and children.\n            [<JavaScript; Inline>]\n            let tref ats ch = Doc.SvgElement \"tref\" ats ch\n            /// Create an SVG element <tspan> with attributes and children.\n            [<JavaScript; Inline>]\n            let tspan ats ch = Doc.SvgElement \"tspan\" ats ch\n            /// Create an SVG element <use> with attributes and children.\n            [<JavaScript; Inline>]\n            let ``use`` ats ch = Doc.SvgElement \"use\" ats ch\n            /// Create an SVG element <view> with attributes and children.\n            [<JavaScript; Inline>]\n            let view ats ch = Doc.SvgElement \"view\" ats ch\n            /// Create an SVG element <vkern> with attributes and children.\n            [<JavaScript; Inline>]\n            let vkern ats ch = Doc.SvgElement \"vkern\" ats ch\n            // }}\n\n        // {{ svgtag normal [doc]\n        /// Create an SVG element <a> with attributes and children.\n        [<JavaScript; Inline>]\n        let a ats ch = Elt.a ats ch :> Doc\n        /// Create an SVG element <altglyph> with attributes and children.\n        [<JavaScript; Inline>]\n        let altglyph ats ch = Elt.altglyph ats ch :> Doc\n        /// Create an SVG element <altglyphdef> with attributes and children.\n        [<JavaScript; Inline>]\n        let altglyphdef ats ch = Elt.altglyphdef ats ch :> Doc\n        /// Create an SVG element <altglyphitem> with attributes and children.\n        [<JavaScript; Inline>]\n        let altglyphitem ats ch = Elt.altglyphitem ats ch :> Doc\n        /// Create an SVG element <animate> with attributes and children.\n        [<JavaScript; Inline>]\n        let animate ats ch = Elt.animate ats ch :> Doc\n        /// Create an SVG element <animatecolor> with attributes and children.\n        [<JavaScript; Inline>]\n        let animatecolor ats ch = Elt.animatecolor ats ch :> Doc\n        /// Create an SVG element <animatemotion> with attributes and children.\n        [<JavaScript; Inline>]\n        let animatemotion ats ch = Elt.animatemotion ats ch :> Doc\n        /// Create an SVG element <animatetransform> with attributes and children.\n        [<JavaScript; Inline>]\n        let animatetransform ats ch = Elt.animatetransform ats ch :> Doc\n        /// Create an SVG element <circle> with attributes and children.\n        [<JavaScript; Inline>]\n        let circle ats ch = Elt.circle ats ch :> Doc\n        /// Create an SVG element <clippath> with attributes and children.\n        [<JavaScript; Inline>]\n        let clippath ats ch = Elt.clippath ats ch :> Doc\n        /// Create an SVG element <color-profile> with attributes and children.\n        [<JavaScript; Inline>]\n        let colorProfile ats ch = Elt.colorProfile ats ch :> Doc\n        /// Create an SVG element <cursor> with attributes and children.\n        [<JavaScript; Inline>]\n        let cursor ats ch = Elt.cursor ats ch :> Doc\n        /// Create an SVG element <defs> with attributes and children.\n        [<JavaScript; Inline>]\n        let defs ats ch = Elt.defs ats ch :> Doc\n        /// Create an SVG element <desc> with attributes and children.\n        [<JavaScript; Inline>]\n        let desc ats ch = Elt.desc ats ch :> Doc\n        /// Create an SVG element <ellipse> with attributes and children.\n        [<JavaScript; Inline>]\n        let ellipse ats ch = Elt.ellipse ats ch :> Doc\n        /// Create an SVG element <feblend> with attributes and children.\n        [<JavaScript; Inline>]\n        let feblend ats ch = Elt.feblend ats ch :> Doc\n        /// Create an SVG element <fecolormatrix> with attributes and children.\n        [<JavaScript; Inline>]\n        let fecolormatrix ats ch = Elt.fecolormatrix ats ch :> Doc\n        /// Create an SVG element <fecomponenttransfer> with attributes and children.\n        [<JavaScript; Inline>]\n        let fecomponenttransfer ats ch = Elt.fecomponenttransfer ats ch :> Doc\n        /// Create an SVG element <fecomposite> with attributes and children.\n        [<JavaScript; Inline>]\n        let fecomposite ats ch = Elt.fecomposite ats ch :> Doc\n        /// Create an SVG element <feconvolvematrix> with attributes and children.\n        [<JavaScript; Inline>]\n        let feconvolvematrix ats ch = Elt.feconvolvematrix ats ch :> Doc\n        /// Create an SVG element <fediffuselighting> with attributes and children.\n        [<JavaScript; Inline>]\n        let fediffuselighting ats ch = Elt.fediffuselighting ats ch :> Doc\n        /// Create an SVG element <fedisplacementmap> with attributes and children.\n        [<JavaScript; Inline>]\n        let fedisplacementmap ats ch = Elt.fedisplacementmap ats ch :> Doc\n        /// Create an SVG element <fedistantlight> with attributes and children.\n        [<JavaScript; Inline>]\n        let fedistantlight ats ch = Elt.fedistantlight ats ch :> Doc\n        /// Create an SVG element <feflood> with attributes and children.\n        [<JavaScript; Inline>]\n        let feflood ats ch = Elt.feflood ats ch :> Doc\n        /// Create an SVG element <fefunca> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefunca ats ch = Elt.fefunca ats ch :> Doc\n        /// Create an SVG element <fefuncb> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefuncb ats ch = Elt.fefuncb ats ch :> Doc\n        /// Create an SVG element <fefuncg> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefuncg ats ch = Elt.fefuncg ats ch :> Doc\n        /// Create an SVG element <fefuncr> with attributes and children.\n        [<JavaScript; Inline>]\n        let fefuncr ats ch = Elt.fefuncr ats ch :> Doc\n        /// Create an SVG element <fegaussianblur> with attributes and children.\n        [<JavaScript; Inline>]\n        let fegaussianblur ats ch = Elt.fegaussianblur ats ch :> Doc\n        /// Create an SVG element <feimage> with attributes and children.\n        [<JavaScript; Inline>]\n        let feimage ats ch = Elt.feimage ats ch :> Doc\n        /// Create an SVG element <femerge> with attributes and children.\n        [<JavaScript; Inline>]\n        let femerge ats ch = Elt.femerge ats ch :> Doc\n        /// Create an SVG element <femergenode> with attributes and children.\n        [<JavaScript; Inline>]\n        let femergenode ats ch = Elt.femergenode ats ch :> Doc\n        /// Create an SVG element <femorphology> with attributes and children.\n        [<JavaScript; Inline>]\n        let femorphology ats ch = Elt.femorphology ats ch :> Doc\n        /// Create an SVG element <feoffset> with attributes and children.\n        [<JavaScript; Inline>]\n        let feoffset ats ch = Elt.feoffset ats ch :> Doc\n        /// Create an SVG element <fepointlight> with attributes and children.\n        [<JavaScript; Inline>]\n        let fepointlight ats ch = Elt.fepointlight ats ch :> Doc\n        /// Create an SVG element <fespecularlighting> with attributes and children.\n        [<JavaScript; Inline>]\n        let fespecularlighting ats ch = Elt.fespecularlighting ats ch :> Doc\n        /// Create an SVG element <fespotlight> with attributes and children.\n        [<JavaScript; Inline>]\n        let fespotlight ats ch = Elt.fespotlight ats ch :> Doc\n        /// Create an SVG element <fetile> with attributes and children.\n        [<JavaScript; Inline>]\n        let fetile ats ch = Elt.fetile ats ch :> Doc\n        /// Create an SVG element <feturbulence> with attributes and children.\n        [<JavaScript; Inline>]\n        let feturbulence ats ch = Elt.feturbulence ats ch :> Doc\n        /// Create an SVG element <filter> with attributes and children.\n        [<JavaScript; Inline>]\n        let filter ats ch = Elt.filter ats ch :> Doc\n        /// Create an SVG element <font> with attributes and children.\n        [<JavaScript; Inline>]\n        let font ats ch = Elt.font ats ch :> Doc\n        /// Create an SVG element <font-face> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFace ats ch = Elt.fontFace ats ch :> Doc\n        /// Create an SVG element <font-face-format> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceFormat ats ch = Elt.fontFaceFormat ats ch :> Doc\n        /// Create an SVG element <font-face-name> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceName ats ch = Elt.fontFaceName ats ch :> Doc\n        /// Create an SVG element <font-face-src> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceSrc ats ch = Elt.fontFaceSrc ats ch :> Doc\n        /// Create an SVG element <font-face-uri> with attributes and children.\n        [<JavaScript; Inline>]\n        let fontFaceUri ats ch = Elt.fontFaceUri ats ch :> Doc\n        /// Create an SVG element <foreignobject> with attributes and children.\n        [<JavaScript; Inline>]\n        let foreignobject ats ch = Elt.foreignobject ats ch :> Doc\n        /// Create an SVG element <g> with attributes and children.\n        [<JavaScript; Inline>]\n        let g ats ch = Elt.g ats ch :> Doc\n        /// Create an SVG element <glyph> with attributes and children.\n        [<JavaScript; Inline>]\n        let glyph ats ch = Elt.glyph ats ch :> Doc\n        /// Create an SVG element <glyphref> with attributes and children.\n        [<JavaScript; Inline>]\n        let glyphref ats ch = Elt.glyphref ats ch :> Doc\n        /// Create an SVG element <hkern> with attributes and children.\n        [<JavaScript; Inline>]\n        let hkern ats ch = Elt.hkern ats ch :> Doc\n        /// Create an SVG element <image> with attributes and children.\n        [<JavaScript; Inline>]\n        let image ats ch = Elt.image ats ch :> Doc\n        /// Create an SVG element <line> with attributes and children.\n        [<JavaScript; Inline>]\n        let line ats ch = Elt.line ats ch :> Doc\n        /// Create an SVG element <lineargradient> with attributes and children.\n        [<JavaScript; Inline>]\n        let lineargradient ats ch = Elt.lineargradient ats ch :> Doc\n        /// Create an SVG element <marker> with attributes and children.\n        [<JavaScript; Inline>]\n        let marker ats ch = Elt.marker ats ch :> Doc\n        /// Create an SVG element <mask> with attributes and children.\n        [<JavaScript; Inline>]\n        let mask ats ch = Elt.mask ats ch :> Doc\n        /// Create an SVG element <metadata> with attributes and children.\n        [<JavaScript; Inline>]\n        let metadata ats ch = Elt.metadata ats ch :> Doc\n        /// Create an SVG element <missing-glyph> with attributes and children.\n        [<JavaScript; Inline>]\n        let missingGlyph ats ch = Elt.missingGlyph ats ch :> Doc\n        /// Create an SVG element <mpath> with attributes and children.\n        [<JavaScript; Inline>]\n        let mpath ats ch = Elt.mpath ats ch :> Doc\n        /// Create an SVG element <path> with attributes and children.\n        [<JavaScript; Inline>]\n        let path ats ch = Elt.path ats ch :> Doc\n        /// Create an SVG element <pattern> with attributes and children.\n        [<JavaScript; Inline>]\n        let pattern ats ch = Elt.pattern ats ch :> Doc\n        /// Create an SVG element <polygon> with attributes and children.\n        [<JavaScript; Inline>]\n        let polygon ats ch = Elt.polygon ats ch :> Doc\n        /// Create an SVG element <polyline> with attributes and children.\n        [<JavaScript; Inline>]\n        let polyline ats ch = Elt.polyline ats ch :> Doc\n        /// Create an SVG element <radialgradient> with attributes and children.\n        [<JavaScript; Inline>]\n        let radialgradient ats ch = Elt.radialgradient ats ch :> Doc\n        /// Create an SVG element <rect> with attributes and children.\n        [<JavaScript; Inline>]\n        let rect ats ch = Elt.rect ats ch :> Doc\n        /// Create an SVG element <script> with attributes and children.\n        [<JavaScript; Inline>]\n        let script ats ch = Elt.script ats ch :> Doc\n        /// Create an SVG element <set> with attributes and children.\n        [<JavaScript; Inline>]\n        let set ats ch = Elt.set ats ch :> Doc\n        /// Create an SVG element <stop> with attributes and children.\n        [<JavaScript; Inline>]\n        let stop ats ch = Elt.stop ats ch :> Doc\n        /// Create an SVG element <style> with attributes and children.\n        [<JavaScript; Inline>]\n        let style ats ch = Elt.style ats ch :> Doc\n        /// Create an SVG element <svg> with attributes and children.\n        [<JavaScript; Inline>]\n        let svg ats ch = Elt.svg ats ch :> Doc\n        /// Create an SVG element <switch> with attributes and children.\n        [<JavaScript; Inline>]\n        let switch ats ch = Elt.switch ats ch :> Doc\n        /// Create an SVG element <symbol> with attributes and children.\n        [<JavaScript; Inline>]\n        let symbol ats ch = Elt.symbol ats ch :> Doc\n        /// Create an SVG element <text> with attributes and children.\n        [<JavaScript; Inline>]\n        let text ats ch = Elt.text ats ch :> Doc\n        /// Create an SVG element <textpath> with attributes and children.\n        [<JavaScript; Inline>]\n        let textpath ats ch = Elt.textpath ats ch :> Doc\n        /// Create an SVG element <title> with attributes and children.\n        [<JavaScript; Inline>]\n        let title ats ch = Elt.title ats ch :> Doc\n        /// Create an SVG element <tref> with attributes and children.\n        [<JavaScript; Inline>]\n        let tref ats ch = Elt.tref ats ch :> Doc\n        /// Create an SVG element <tspan> with attributes and children.\n        [<JavaScript; Inline>]\n        let tspan ats ch = Elt.tspan ats ch :> Doc\n        /// Create an SVG element <use> with attributes and children.\n        [<JavaScript; Inline>]\n        let ``use`` ats ch = Elt.``use`` ats ch :> Doc\n        /// Create an SVG element <view> with attributes and children.\n        [<JavaScript; Inline>]\n        let view ats ch = Elt.view ats ch :> Doc\n        /// Create an SVG element <vkern> with attributes and children.\n        [<JavaScript; Inline>]\n        let vkern ats ch = Elt.vkern ats ch :> Doc\n        // }}\n\n    [<JavaScript; Sealed>]\n    type attr private () =\n\n        /// Create an HTML attribute \"data-name\" with the given value.\n        [<JavaScript; Inline>]\n        static member ``data-`` name value = Attr.Create (\"data-\" + name) value\n\n        // {{ attr normal colliding deprecated\n        /// Create an HTML attribute \"accept\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accept\")>]\n        static member accept value = Attr.Create \"accept\" value\n        /// Create an HTML attribute \"accept-charset\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accept-charset\")>]\n        static member acceptCharset value = Attr.Create \"accept-charset\" value\n        /// Create an HTML attribute \"accesskey\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accesskey\")>]\n        static member accesskey value = Attr.Create \"accesskey\" value\n        /// Create an HTML attribute \"action\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"action\")>]\n        static member action value = Attr.Create \"action\" value\n        /// Create an HTML attribute \"align\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"align\")>]\n        static member align value = Attr.Create \"align\" value\n        /// Create an HTML attribute \"alink\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"alink\")>]\n        static member alink value = Attr.Create \"alink\" value\n        /// Create an HTML attribute \"alt\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"alt\")>]\n        static member alt value = Attr.Create \"alt\" value\n        /// Create an HTML attribute \"altcode\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"altcode\")>]\n        static member altcode value = Attr.Create \"altcode\" value\n        /// Create an HTML attribute \"archive\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"archive\")>]\n        static member archive value = Attr.Create \"archive\" value\n        /// Create an HTML attribute \"async\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"async\")>]\n        static member async value = Attr.Create \"async\" value\n        /// Create an HTML attribute \"autocomplete\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autocomplete\")>]\n        static member autocomplete value = Attr.Create \"autocomplete\" value\n        /// Create an HTML attribute \"autofocus\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autofocus\")>]\n        static member autofocus value = Attr.Create \"autofocus\" value\n        /// Create an HTML attribute \"autoplay\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autoplay\")>]\n        static member autoplay value = Attr.Create \"autoplay\" value\n        /// Create an HTML attribute \"autosave\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"autosave\")>]\n        static member autosave value = Attr.Create \"autosave\" value\n        /// Create an HTML attribute \"axis\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"axis\")>]\n        static member axis value = Attr.Create \"axis\" value\n        /// Create an HTML attribute \"background\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"background\")>]\n        static member background value = Attr.Create \"background\" value\n        /// Create an HTML attribute \"bgcolor\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"bgcolor\")>]\n        static member bgcolor value = Attr.Create \"bgcolor\" value\n        /// Create an HTML attribute \"border\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"border\")>]\n        static member border value = Attr.Create \"border\" value\n        /// Create an HTML attribute \"bordercolor\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"bordercolor\")>]\n        static member bordercolor value = Attr.Create \"bordercolor\" value\n        /// Create an HTML attribute \"buffered\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"buffered\")>]\n        static member buffered value = Attr.Create \"buffered\" value\n        /// Create an HTML attribute \"cellpadding\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cellpadding\")>]\n        static member cellpadding value = Attr.Create \"cellpadding\" value\n        /// Create an HTML attribute \"cellspacing\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cellspacing\")>]\n        static member cellspacing value = Attr.Create \"cellspacing\" value\n        /// Create an HTML attribute \"challenge\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"challenge\")>]\n        static member challenge value = Attr.Create \"challenge\" value\n        /// Create an HTML attribute \"char\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"char\")>]\n        static member char value = Attr.Create \"char\" value\n        /// Create an HTML attribute \"charoff\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"charoff\")>]\n        static member charoff value = Attr.Create \"charoff\" value\n        /// Create an HTML attribute \"charset\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"charset\")>]\n        static member charset value = Attr.Create \"charset\" value\n        /// Create an HTML attribute \"checked\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"checked\")>]\n        static member ``checked`` value = Attr.Create \"checked\" value\n        /// Create an HTML attribute \"cite\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cite\")>]\n        static member cite value = Attr.Create \"cite\" value\n        /// Create an HTML attribute \"class\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"class\")>]\n        static member ``class`` value = Attr.Create \"class\" value\n        /// Create an HTML attribute \"classid\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"classid\")>]\n        static member classid value = Attr.Create \"classid\" value\n        /// Create an HTML attribute \"clear\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clear\")>]\n        static member clear value = Attr.Create \"clear\" value\n        /// Create an HTML attribute \"code\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"code\")>]\n        static member code value = Attr.Create \"code\" value\n        /// Create an HTML attribute \"codebase\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"codebase\")>]\n        static member codebase value = Attr.Create \"codebase\" value\n        /// Create an HTML attribute \"codetype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"codetype\")>]\n        static member codetype value = Attr.Create \"codetype\" value\n        /// Create an HTML attribute \"color\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color\")>]\n        static member color value = Attr.Create \"color\" value\n        /// Create an HTML attribute \"cols\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cols\")>]\n        static member cols value = Attr.Create \"cols\" value\n        /// Create an HTML attribute \"colspan\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"colspan\")>]\n        static member colspan value = Attr.Create \"colspan\" value\n        /// Create an HTML attribute \"compact\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"compact\")>]\n        static member compact value = Attr.Create \"compact\" value\n        /// Create an HTML attribute \"content\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"content\")>]\n        static member content value = Attr.Create \"content\" value\n        /// Create an HTML attribute \"contenteditable\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contenteditable\")>]\n        static member contenteditable value = Attr.Create \"contenteditable\" value\n        /// Create an HTML attribute \"contextmenu\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contextmenu\")>]\n        static member contextmenu value = Attr.Create \"contextmenu\" value\n        /// Create an HTML attribute \"controls\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"controls\")>]\n        static member controls value = Attr.Create \"controls\" value\n        /// Create an HTML attribute \"coords\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"coords\")>]\n        static member coords value = Attr.Create \"coords\" value\n        /// Create an HTML attribute \"data\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"data\")>]\n        static member data value = Attr.Create \"data\" value\n        /// Create an HTML attribute \"datetime\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"datetime\")>]\n        static member datetime value = Attr.Create \"datetime\" value\n        /// Create an HTML attribute \"declare\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"declare\")>]\n        static member declare value = Attr.Create \"declare\" value\n        /// Create an HTML attribute \"default\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"default\")>]\n        static member ``default`` value = Attr.Create \"default\" value\n        /// Create an HTML attribute \"defer\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"defer\")>]\n        static member defer value = Attr.Create \"defer\" value\n        /// Create an HTML attribute \"dir\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dir\")>]\n        static member dir value = Attr.Create \"dir\" value\n        /// Create an HTML attribute \"disabled\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"disabled\")>]\n        static member disabled value = Attr.Create \"disabled\" value\n        /// Create an HTML attribute \"download\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"download\")>]\n        static member download value = Attr.Create \"download\" value\n        /// Create an HTML attribute \"draggable\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"draggable\")>]\n        static member draggable value = Attr.Create \"draggable\" value\n        /// Create an HTML attribute \"dropzone\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dropzone\")>]\n        static member dropzone value = Attr.Create \"dropzone\" value\n        /// Create an HTML attribute \"enctype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"enctype\")>]\n        static member enctype value = Attr.Create \"enctype\" value\n        /// Create an HTML attribute \"face\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"face\")>]\n        static member face value = Attr.Create \"face\" value\n        /// Create an HTML attribute \"for\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"for\")>]\n        static member ``for`` value = Attr.Create \"for\" value\n        /// Create an HTML attribute \"form\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"form\")>]\n        static member form value = Attr.Create \"form\" value\n        /// Create an HTML attribute \"formaction\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formaction\")>]\n        static member formaction value = Attr.Create \"formaction\" value\n        /// Create an HTML attribute \"formenctype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formenctype\")>]\n        static member formenctype value = Attr.Create \"formenctype\" value\n        /// Create an HTML attribute \"formmethod\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formmethod\")>]\n        static member formmethod value = Attr.Create \"formmethod\" value\n        /// Create an HTML attribute \"formnovalidate\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formnovalidate\")>]\n        static member formnovalidate value = Attr.Create \"formnovalidate\" value\n        /// Create an HTML attribute \"formtarget\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"formtarget\")>]\n        static member formtarget value = Attr.Create \"formtarget\" value\n        /// Create an HTML attribute \"frame\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"frame\")>]\n        static member frame value = Attr.Create \"frame\" value\n        /// Create an HTML attribute \"frameborder\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"frameborder\")>]\n        static member frameborder value = Attr.Create \"frameborder\" value\n        /// Create an HTML attribute \"headers\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"headers\")>]\n        static member headers value = Attr.Create \"headers\" value\n        /// Create an HTML attribute \"height\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"height\")>]\n        static member height value = Attr.Create \"height\" value\n        /// Create an HTML attribute \"hidden\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"hidden\")>]\n        static member hidden value = Attr.Create \"hidden\" value\n        /// Create an HTML attribute \"high\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"high\")>]\n        static member high value = Attr.Create \"high\" value\n        /// Create an HTML attribute \"href\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"href\")>]\n        static member href value = Attr.Create \"href\" value\n        /// Create an HTML attribute \"hreflang\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"hreflang\")>]\n        static member hreflang value = Attr.Create \"hreflang\" value\n        /// Create an HTML attribute \"hspace\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"hspace\")>]\n        static member hspace value = Attr.Create \"hspace\" value\n        /// Create an HTML attribute \"http\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"http\")>]\n        static member http value = Attr.Create \"http\" value\n        /// Create an HTML attribute \"icon\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"icon\")>]\n        static member icon value = Attr.Create \"icon\" value\n        /// Create an HTML attribute \"id\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"id\")>]\n        static member id value = Attr.Create \"id\" value\n        /// Create an HTML attribute \"ismap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ismap\")>]\n        static member ismap value = Attr.Create \"ismap\" value\n        /// Create an HTML attribute \"itemprop\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"itemprop\")>]\n        static member itemprop value = Attr.Create \"itemprop\" value\n        /// Create an HTML attribute \"keytype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"keytype\")>]\n        static member keytype value = Attr.Create \"keytype\" value\n        /// Create an HTML attribute \"kind\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kind\")>]\n        static member kind value = Attr.Create \"kind\" value\n        /// Create an HTML attribute \"label\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"label\")>]\n        static member label value = Attr.Create \"label\" value\n        /// Create an HTML attribute \"lang\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"lang\")>]\n        static member lang value = Attr.Create \"lang\" value\n        /// Create an HTML attribute \"language\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"language\")>]\n        static member language value = Attr.Create \"language\" value\n        /// Create an HTML attribute \"link\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"link\")>]\n        static member link value = Attr.Create \"link\" value\n        /// Create an HTML attribute \"list\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"list\")>]\n        static member list value = Attr.Create \"list\" value\n        /// Create an HTML attribute \"longdesc\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"longdesc\")>]\n        static member longdesc value = Attr.Create \"longdesc\" value\n        /// Create an HTML attribute \"loop\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"loop\")>]\n        static member loop value = Attr.Create \"loop\" value\n        /// Create an HTML attribute \"low\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"low\")>]\n        static member low value = Attr.Create \"low\" value\n        /// Create an HTML attribute \"manifest\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"manifest\")>]\n        static member manifest value = Attr.Create \"manifest\" value\n        /// Create an HTML attribute \"marginheight\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marginheight\")>]\n        static member marginheight value = Attr.Create \"marginheight\" value\n        /// Create an HTML attribute \"marginwidth\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marginwidth\")>]\n        static member marginwidth value = Attr.Create \"marginwidth\" value\n        /// Create an HTML attribute \"max\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"max\")>]\n        static member max value = Attr.Create \"max\" value\n        /// Create an HTML attribute \"maxlength\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"maxlength\")>]\n        static member maxlength value = Attr.Create \"maxlength\" value\n        /// Create an HTML attribute \"media\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"media\")>]\n        static member media value = Attr.Create \"media\" value\n        /// Create an HTML attribute \"method\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"method\")>]\n        static member ``method`` value = Attr.Create \"method\" value\n        /// Create an HTML attribute \"min\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"min\")>]\n        static member min value = Attr.Create \"min\" value\n        /// Create an HTML attribute \"multiple\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"multiple\")>]\n        static member multiple value = Attr.Create \"multiple\" value\n        /// Create an HTML attribute \"name\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"name\")>]\n        static member name value = Attr.Create \"name\" value\n        /// Create an HTML attribute \"nohref\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"nohref\")>]\n        static member nohref value = Attr.Create \"nohref\" value\n        /// Create an HTML attribute \"noresize\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"noresize\")>]\n        static member noresize value = Attr.Create \"noresize\" value\n        /// Create an HTML attribute \"noshade\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"noshade\")>]\n        static member noshade value = Attr.Create \"noshade\" value\n        /// Create an HTML attribute \"novalidate\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"novalidate\")>]\n        static member novalidate value = Attr.Create \"novalidate\" value\n        /// Create an HTML attribute \"nowrap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"nowrap\")>]\n        static member nowrap value = Attr.Create \"nowrap\" value\n        /// Create an HTML attribute \"object\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"object\")>]\n        static member ``object`` value = Attr.Create \"object\" value\n        /// Create an HTML attribute \"open\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"open\")>]\n        static member ``open`` value = Attr.Create \"open\" value\n        /// Create an HTML attribute \"optimum\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"optimum\")>]\n        static member optimum value = Attr.Create \"optimum\" value\n        /// Create an HTML attribute \"pattern\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pattern\")>]\n        static member pattern value = Attr.Create \"pattern\" value\n        /// Create an HTML attribute \"ping\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ping\")>]\n        static member ping value = Attr.Create \"ping\" value\n        /// Create an HTML attribute \"placeholder\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"placeholder\")>]\n        static member placeholder value = Attr.Create \"placeholder\" value\n        /// Create an HTML attribute \"poster\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"poster\")>]\n        static member poster value = Attr.Create \"poster\" value\n        /// Create an HTML attribute \"preload\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"preload\")>]\n        static member preload value = Attr.Create \"preload\" value\n        /// Create an HTML attribute \"profile\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"profile\")>]\n        static member profile value = Attr.Create \"profile\" value\n        /// Create an HTML attribute \"prompt\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"prompt\")>]\n        static member prompt value = Attr.Create \"prompt\" value\n        /// Create an HTML attribute \"pubdate\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pubdate\")>]\n        static member pubdate value = Attr.Create \"pubdate\" value\n        /// Create an HTML attribute \"radiogroup\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"radiogroup\")>]\n        static member radiogroup value = Attr.Create \"radiogroup\" value\n        /// Create an HTML attribute \"readonly\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"readonly\")>]\n        static member readonly value = Attr.Create \"readonly\" value\n        /// Create an HTML attribute \"rel\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rel\")>]\n        static member rel value = Attr.Create \"rel\" value\n        /// Create an HTML attribute \"required\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"required\")>]\n        static member required value = Attr.Create \"required\" value\n        /// Create an HTML attribute \"rev\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rev\")>]\n        static member rev value = Attr.Create \"rev\" value\n        /// Create an HTML attribute \"reversed\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"reversed\")>]\n        static member reversed value = Attr.Create \"reversed\" value\n        /// Create an HTML attribute \"rows\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rows\")>]\n        static member rows value = Attr.Create \"rows\" value\n        /// Create an HTML attribute \"rowspan\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rowspan\")>]\n        static member rowspan value = Attr.Create \"rowspan\" value\n        /// Create an HTML attribute \"rules\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rules\")>]\n        static member rules value = Attr.Create \"rules\" value\n        /// Create an HTML attribute \"sandbox\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"sandbox\")>]\n        static member sandbox value = Attr.Create \"sandbox\" value\n        /// Create an HTML attribute \"scheme\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scheme\")>]\n        static member scheme value = Attr.Create \"scheme\" value\n        /// Create an HTML attribute \"scope\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scope\")>]\n        static member scope value = Attr.Create \"scope\" value\n        /// Create an HTML attribute \"scoped\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scoped\")>]\n        static member scoped value = Attr.Create \"scoped\" value\n        /// Create an HTML attribute \"scrolling\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scrolling\")>]\n        static member scrolling value = Attr.Create \"scrolling\" value\n        /// Create an HTML attribute \"seamless\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"seamless\")>]\n        static member seamless value = Attr.Create \"seamless\" value\n        /// Create an HTML attribute \"selected\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"selected\")>]\n        static member selected value = Attr.Create \"selected\" value\n        /// Create an HTML attribute \"shape\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"shape\")>]\n        static member shape value = Attr.Create \"shape\" value\n        /// Create an HTML attribute \"size\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"size\")>]\n        static member size value = Attr.Create \"size\" value\n        /// Create an HTML attribute \"sizes\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"sizes\")>]\n        static member sizes value = Attr.Create \"sizes\" value\n        /// Create an HTML attribute \"span\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"span\")>]\n        static member span value = Attr.Create \"span\" value\n        /// Create an HTML attribute \"spellcheck\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"spellcheck\")>]\n        static member spellcheck value = Attr.Create \"spellcheck\" value\n        /// Create an HTML attribute \"src\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"src\")>]\n        static member src value = Attr.Create \"src\" value\n        /// Create an HTML attribute \"srcdoc\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"srcdoc\")>]\n        static member srcdoc value = Attr.Create \"srcdoc\" value\n        /// Create an HTML attribute \"srclang\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"srclang\")>]\n        static member srclang value = Attr.Create \"srclang\" value\n        /// Create an HTML attribute \"standby\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"standby\")>]\n        static member standby value = Attr.Create \"standby\" value\n        /// Create an HTML attribute \"start\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"start\")>]\n        static member start value = Attr.Create \"start\" value\n        /// Create an HTML attribute \"step\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"step\")>]\n        static member step value = Attr.Create \"step\" value\n        /// Create an HTML attribute \"style\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"style\")>]\n        static member style value = Attr.Create \"style\" value\n        /// Create an HTML attribute \"subject\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"subject\")>]\n        static member subject value = Attr.Create \"subject\" value\n        /// Create an HTML attribute \"summary\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"summary\")>]\n        static member summary value = Attr.Create \"summary\" value\n        /// Create an HTML attribute \"tabindex\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"tabindex\")>]\n        static member tabindex value = Attr.Create \"tabindex\" value\n        /// Create an HTML attribute \"target\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"target\")>]\n        static member target value = Attr.Create \"target\" value\n        /// Create an HTML attribute \"text\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text\")>]\n        static member text value = Attr.Create \"text\" value\n        /// Create an HTML attribute \"title\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"title\")>]\n        static member title value = Attr.Create \"title\" value\n        /// Create an HTML attribute \"type\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"type\")>]\n        static member ``type`` value = Attr.Create \"type\" value\n        /// Create an HTML attribute \"usemap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"usemap\")>]\n        static member usemap value = Attr.Create \"usemap\" value\n        /// Create an HTML attribute \"valign\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"valign\")>]\n        static member valign value = Attr.Create \"valign\" value\n        /// Create an HTML attribute \"value\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"value\")>]\n        static member value value = Attr.Create \"value\" value\n        /// Create an HTML attribute \"valuetype\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"valuetype\")>]\n        static member valuetype value = Attr.Create \"valuetype\" value\n        /// Create an HTML attribute \"version\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"version\")>]\n        static member version value = Attr.Create \"version\" value\n        /// Create an HTML attribute \"vlink\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"vlink\")>]\n        static member vlink value = Attr.Create \"vlink\" value\n        /// Create an HTML attribute \"vspace\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"vspace\")>]\n        static member vspace value = Attr.Create \"vspace\" value\n        /// Create an HTML attribute \"width\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"width\")>]\n        static member width value = Attr.Create \"width\" value\n        /// Create an HTML attribute \"wrap\" with the given value.\n        /// The value can be reactive using `view.V`.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"wrap\")>]\n        static member wrap value = Attr.Create \"wrap\" value\n        // }}\n\n    type on =\n\n        /// Adds a callback to be called after the element has been inserted in the DOM.\n        /// The callback is guaranteed to be called only once, even if the element is moved or removed and reinserted.\n        static member afterRender ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> unit>) = Attr.OnAfterRenderImpl(f)\n\n        // {{ event\n        /// Create a handler for the event \"abort\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member abort ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"abort\", f)\n        /// Create a handler for the event \"afterprint\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member afterPrint ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"afterprint\", f)\n        /// Create a handler for the event \"animationend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member animationEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"animationend\", f)\n        /// Create a handler for the event \"animationiteration\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member animationIteration ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"animationiteration\", f)\n        /// Create a handler for the event \"animationstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member animationStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"animationstart\", f)\n        /// Create a handler for the event \"audioprocess\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member audioProcess ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"audioprocess\", f)\n        /// Create a handler for the event \"beforeprint\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member beforePrint ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"beforeprint\", f)\n        /// Create a handler for the event \"beforeunload\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member beforeUnload ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"beforeunload\", f)\n        /// Create a handler for the event \"beginEvent\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member beginEvent ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"beginEvent\", f)\n        /// Create a handler for the event \"blocked\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member blocked ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"blocked\", f)\n        /// Create a handler for the event \"blur\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member blur ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.FocusEvent -> unit>) = Attr.HandlerImpl(\"blur\", f)\n        /// Create a handler for the event \"cached\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member cached ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"cached\", f)\n        /// Create a handler for the event \"canplay\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member canPlay ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"canplay\", f)\n        /// Create a handler for the event \"canplaythrough\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member canPlayThrough ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"canplaythrough\", f)\n        /// Create a handler for the event \"change\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member change ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"change\", f)\n        /// Create a handler for the event \"chargingchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member chargingChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"chargingchange\", f)\n        /// Create a handler for the event \"chargingtimechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member chargingTimeChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"chargingtimechange\", f)\n        /// Create a handler for the event \"checking\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member checking ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"checking\", f)\n        /// Create a handler for the event \"click\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member click ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"click\", f)\n        /// Create a handler for the event \"close\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member close ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"close\", f)\n        /// Create a handler for the event \"complete\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member complete ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"complete\", f)\n        /// Create a handler for the event \"compositionend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member compositionEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.CompositionEvent -> unit>) = Attr.HandlerImpl(\"compositionend\", f)\n        /// Create a handler for the event \"compositionstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member compositionStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.CompositionEvent -> unit>) = Attr.HandlerImpl(\"compositionstart\", f)\n        /// Create a handler for the event \"compositionupdate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member compositionUpdate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.CompositionEvent -> unit>) = Attr.HandlerImpl(\"compositionupdate\", f)\n        /// Create a handler for the event \"contextmenu\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member contextMenu ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"contextmenu\", f)\n        /// Create a handler for the event \"copy\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member copy ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"copy\", f)\n        /// Create a handler for the event \"cut\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member cut ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"cut\", f)\n        /// Create a handler for the event \"dblclick\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dblClick ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"dblclick\", f)\n        /// Create a handler for the event \"devicelight\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceLight ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"devicelight\", f)\n        /// Create a handler for the event \"devicemotion\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceMotion ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"devicemotion\", f)\n        /// Create a handler for the event \"deviceorientation\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceOrientation ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"deviceorientation\", f)\n        /// Create a handler for the event \"deviceproximity\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member deviceProximity ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"deviceproximity\", f)\n        /// Create a handler for the event \"dischargingtimechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dischargingTimeChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dischargingtimechange\", f)\n        /// Create a handler for the event \"DOMActivate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMActivate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"DOMActivate\", f)\n        /// Create a handler for the event \"DOMAttributeNameChanged\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMAttributeNameChanged ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"DOMAttributeNameChanged\", f)\n        /// Create a handler for the event \"DOMAttrModified\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMAttrModified ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMAttrModified\", f)\n        /// Create a handler for the event \"DOMCharacterDataModified\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMCharacterDataModified ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMCharacterDataModified\", f)\n        /// Create a handler for the event \"DOMContentLoaded\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMContentLoaded ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"DOMContentLoaded\", f)\n        /// Create a handler for the event \"DOMElementNameChanged\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMElementNameChanged ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"DOMElementNameChanged\", f)\n        /// Create a handler for the event \"DOMNodeInserted\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeInserted ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeInserted\", f)\n        /// Create a handler for the event \"DOMNodeInsertedIntoDocument\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeInsertedIntoDocument ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeInsertedIntoDocument\", f)\n        /// Create a handler for the event \"DOMNodeRemoved\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeRemoved ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeRemoved\", f)\n        /// Create a handler for the event \"DOMNodeRemovedFromDocument\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMNodeRemovedFromDocument ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMNodeRemovedFromDocument\", f)\n        /// Create a handler for the event \"DOMSubtreeModified\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member DOMSubtreeModified ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MutationEvent -> unit>) = Attr.HandlerImpl(\"DOMSubtreeModified\", f)\n        /// Create a handler for the event \"downloading\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member downloading ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"downloading\", f)\n        /// Create a handler for the event \"drag\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member drag ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"drag\", f)\n        /// Create a handler for the event \"dragend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragend\", f)\n        /// Create a handler for the event \"dragenter\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragEnter ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragenter\", f)\n        /// Create a handler for the event \"dragleave\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragLeave ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragleave\", f)\n        /// Create a handler for the event \"dragover\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragOver ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragover\", f)\n        /// Create a handler for the event \"dragstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member dragStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"dragstart\", f)\n        /// Create a handler for the event \"drop\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member drop ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"drop\", f)\n        /// Create a handler for the event \"durationchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member durationChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"durationchange\", f)\n        /// Create a handler for the event \"emptied\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member emptied ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"emptied\", f)\n        /// Create a handler for the event \"ended\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member ended ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"ended\", f)\n        /// Create a handler for the event \"endEvent\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member endEvent ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"endEvent\", f)\n        /// Create a handler for the event \"error\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member error ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"error\", f)\n        /// Create a handler for the event \"focus\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member focus ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.FocusEvent -> unit>) = Attr.HandlerImpl(\"focus\", f)\n        /// Create a handler for the event \"fullscreenchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member fullScreenChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"fullscreenchange\", f)\n        /// Create a handler for the event \"fullscreenerror\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member fullScreenError ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"fullscreenerror\", f)\n        /// Create a handler for the event \"gamepadconnected\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member gamepadConnected ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"gamepadconnected\", f)\n        /// Create a handler for the event \"gamepaddisconnected\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member gamepadDisconnected ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"gamepaddisconnected\", f)\n        /// Create a handler for the event \"hashchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member hashChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"hashchange\", f)\n        /// Create a handler for the event \"input\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member input ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"input\", f)\n        /// Create a handler for the event \"invalid\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member invalid ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"invalid\", f)\n        /// Create a handler for the event \"keydown\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member keyDown ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.KeyboardEvent -> unit>) = Attr.HandlerImpl(\"keydown\", f)\n        /// Create a handler for the event \"keypress\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member keyPress ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.KeyboardEvent -> unit>) = Attr.HandlerImpl(\"keypress\", f)\n        /// Create a handler for the event \"keyup\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member keyUp ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.KeyboardEvent -> unit>) = Attr.HandlerImpl(\"keyup\", f)\n        /// Create a handler for the event \"languagechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member languageChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"languagechange\", f)\n        /// Create a handler for the event \"levelchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member levelChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"levelchange\", f)\n        /// Create a handler for the event \"load\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member load ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"load\", f)\n        /// Create a handler for the event \"loadeddata\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadedData ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadeddata\", f)\n        /// Create a handler for the event \"loadedmetadata\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadedMetadata ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadedmetadata\", f)\n        /// Create a handler for the event \"loadend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadend\", f)\n        /// Create a handler for the event \"loadstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member loadStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"loadstart\", f)\n        /// Create a handler for the event \"message\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member message ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"message\", f)\n        /// Create a handler for the event \"mousedown\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseDown ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mousedown\", f)\n        /// Create a handler for the event \"mouseenter\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseEnter ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseenter\", f)\n        /// Create a handler for the event \"mouseleave\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseLeave ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseleave\", f)\n        /// Create a handler for the event \"mousemove\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseMove ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mousemove\", f)\n        /// Create a handler for the event \"mouseout\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseOut ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseout\", f)\n        /// Create a handler for the event \"mouseover\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseOver ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseover\", f)\n        /// Create a handler for the event \"mouseup\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member mouseUp ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"mouseup\", f)\n        /// Create a handler for the event \"noupdate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member noUpdate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"noupdate\", f)\n        /// Create a handler for the event \"obsolete\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member obsolete ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"obsolete\", f)\n        /// Create a handler for the event \"offline\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member offline ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"offline\", f)\n        /// Create a handler for the event \"online\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member online ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"online\", f)\n        /// Create a handler for the event \"open\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member ``open`` ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"open\", f)\n        /// Create a handler for the event \"orientationchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member orientationChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"orientationchange\", f)\n        /// Create a handler for the event \"pagehide\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pageHide ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pagehide\", f)\n        /// Create a handler for the event \"pageshow\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pageShow ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pageshow\", f)\n        /// Create a handler for the event \"paste\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member paste ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"paste\", f)\n        /// Create a handler for the event \"pause\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pause ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pause\", f)\n        /// Create a handler for the event \"play\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member play ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"play\", f)\n        /// Create a handler for the event \"playing\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member playing ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"playing\", f)\n        /// Create a handler for the event \"pointerlockchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pointerLockChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pointerlockchange\", f)\n        /// Create a handler for the event \"pointerlockerror\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member pointerLockError ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"pointerlockerror\", f)\n        /// Create a handler for the event \"popstate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member popState ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"popstate\", f)\n        /// Create a handler for the event \"progress\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member progress ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"progress\", f)\n        /// Create a handler for the event \"ratechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member rateChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"ratechange\", f)\n        /// Create a handler for the event \"readystatechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member readyStateChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"readystatechange\", f)\n        /// Create a handler for the event \"repeatEvent\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member repeatEvent ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"repeatEvent\", f)\n        /// Create a handler for the event \"reset\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member reset ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"reset\", f)\n        /// Create a handler for the event \"resize\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member resize ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"resize\", f)\n        /// Create a handler for the event \"scroll\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member scroll ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"scroll\", f)\n        /// Create a handler for the event \"seeked\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member seeked ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"seeked\", f)\n        /// Create a handler for the event \"seeking\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member seeking ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"seeking\", f)\n        /// Create a handler for the event \"select\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member select ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"select\", f)\n        /// Create a handler for the event \"show\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member show ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.MouseEvent -> unit>) = Attr.HandlerImpl(\"show\", f)\n        /// Create a handler for the event \"stalled\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member stalled ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"stalled\", f)\n        /// Create a handler for the event \"storage\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member storage ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"storage\", f)\n        /// Create a handler for the event \"submit\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member submit ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"submit\", f)\n        /// Create a handler for the event \"success\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member success ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"success\", f)\n        /// Create a handler for the event \"suspend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member suspend ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"suspend\", f)\n        /// Create a handler for the event \"SVGAbort\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGAbort ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGAbort\", f)\n        /// Create a handler for the event \"SVGError\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGError ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGError\", f)\n        /// Create a handler for the event \"SVGLoad\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGLoad ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGLoad\", f)\n        /// Create a handler for the event \"SVGResize\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGResize ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGResize\", f)\n        /// Create a handler for the event \"SVGScroll\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGScroll ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGScroll\", f)\n        /// Create a handler for the event \"SVGUnload\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGUnload ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGUnload\", f)\n        /// Create a handler for the event \"SVGZoom\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member SVGZoom ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"SVGZoom\", f)\n        /// Create a handler for the event \"timeout\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member timeOut ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"timeout\", f)\n        /// Create a handler for the event \"timeupdate\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member timeUpdate ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"timeupdate\", f)\n        /// Create a handler for the event \"touchcancel\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchCancel ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchcancel\", f)\n        /// Create a handler for the event \"touchend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchend\", f)\n        /// Create a handler for the event \"touchenter\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchEnter ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchenter\", f)\n        /// Create a handler for the event \"touchleave\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchLeave ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchleave\", f)\n        /// Create a handler for the event \"touchmove\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchMove ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchmove\", f)\n        /// Create a handler for the event \"touchstart\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member touchStart ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"touchstart\", f)\n        /// Create a handler for the event \"transitionend\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member transitionEnd ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"transitionend\", f)\n        /// Create a handler for the event \"unload\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member unload ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.UIEvent -> unit>) = Attr.HandlerImpl(\"unload\", f)\n        /// Create a handler for the event \"updateready\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member updateReady ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"updateready\", f)\n        /// Create a handler for the event \"upgradeneeded\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member upgradeNeeded ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"upgradeneeded\", f)\n        /// Create a handler for the event \"userproximity\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member userProximity ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"userproximity\", f)\n        /// Create a handler for the event \"versionchange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member versionChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"versionchange\", f)\n        /// Create a handler for the event \"visibilitychange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member visibilityChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"visibilitychange\", f)\n        /// Create a handler for the event \"volumechange\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member volumeChange ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"volumechange\", f)\n        /// Create a handler for the event \"waiting\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member waiting ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.Event -> unit>) = Attr.HandlerImpl(\"waiting\", f)\n        /// Create a handler for the event \"wheel\".\n        /// When called on the server side, the handler must be a top-level function or a static member.\n        static member wheel ([<JavaScript; ReflectedDefinition>] f: Microsoft.FSharp.Quotations.Expr<JavaScript.Dom.Element -> JavaScript.Dom.WheelEvent -> unit>) = Attr.HandlerImpl(\"wheel\", f)\n        // }}\n\n    /// SVG attributes.\n    module SvgAttributes =\n\n        // {{ svgattr normal\n        /// Create an SVG attribute \"accent-height\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accent-height\")>]\n        let accentHeight value = Attr.Create \"accent-height\" value\n        /// Create an SVG attribute \"accumulate\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"accumulate\")>]\n        let accumulate value = Attr.Create \"accumulate\" value\n        /// Create an SVG attribute \"additive\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"additive\")>]\n        let additive value = Attr.Create \"additive\" value\n        /// Create an SVG attribute \"alignment-baseline\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"alignment-baseline\")>]\n        let alignmentBaseline value = Attr.Create \"alignment-baseline\" value\n        /// Create an SVG attribute \"ascent\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ascent\")>]\n        let ascent value = Attr.Create \"ascent\" value\n        /// Create an SVG attribute \"attributeName\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"attributeName\")>]\n        let attributeName value = Attr.Create \"attributeName\" value\n        /// Create an SVG attribute \"attributeType\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"attributeType\")>]\n        let attributeType value = Attr.Create \"attributeType\" value\n        /// Create an SVG attribute \"azimuth\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"azimuth\")>]\n        let azimuth value = Attr.Create \"azimuth\" value\n        /// Create an SVG attribute \"baseFrequency\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"baseFrequency\")>]\n        let baseFrequency value = Attr.Create \"baseFrequency\" value\n        /// Create an SVG attribute \"baseline-shift\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"baseline-shift\")>]\n        let baselineShift value = Attr.Create \"baseline-shift\" value\n        /// Create an SVG attribute \"begin\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"begin\")>]\n        let ``begin`` value = Attr.Create \"begin\" value\n        /// Create an SVG attribute \"bias\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"bias\")>]\n        let bias value = Attr.Create \"bias\" value\n        /// Create an SVG attribute \"calcMode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"calcMode\")>]\n        let calcMode value = Attr.Create \"calcMode\" value\n        /// Create an SVG attribute \"class\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"class\")>]\n        let ``class`` value = Attr.Create \"class\" value\n        /// Create an SVG attribute \"clip\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clip\")>]\n        let clip value = Attr.Create \"clip\" value\n        /// Create an SVG attribute \"clip-path\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clip-path\")>]\n        let clipPath value = Attr.Create \"clip-path\" value\n        /// Create an SVG attribute \"clipPathUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clipPathUnits\")>]\n        let clipPathUnits value = Attr.Create \"clipPathUnits\" value\n        /// Create an SVG attribute \"clip-rule\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"clip-rule\")>]\n        let clipRule value = Attr.Create \"clip-rule\" value\n        /// Create an SVG attribute \"color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color\")>]\n        let color value = Attr.Create \"color\" value\n        /// Create an SVG attribute \"color-interpolation\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-interpolation\")>]\n        let colorInterpolation value = Attr.Create \"color-interpolation\" value\n        /// Create an SVG attribute \"color-interpolation-filters\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-interpolation-filters\")>]\n        let colorInterpolationFilters value = Attr.Create \"color-interpolation-filters\" value\n        /// Create an SVG attribute \"color-profile\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-profile\")>]\n        let colorProfile value = Attr.Create \"color-profile\" value\n        /// Create an SVG attribute \"color-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"color-rendering\")>]\n        let colorRendering value = Attr.Create \"color-rendering\" value\n        /// Create an SVG attribute \"contentScriptType\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contentScriptType\")>]\n        let contentScriptType value = Attr.Create \"contentScriptType\" value\n        /// Create an SVG attribute \"contentStyleType\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"contentStyleType\")>]\n        let contentStyleType value = Attr.Create \"contentStyleType\" value\n        /// Create an SVG attribute \"cursor\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cursor\")>]\n        let cursor value = Attr.Create \"cursor\" value\n        /// Create an SVG attribute \"cx\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cx\")>]\n        let cx value = Attr.Create \"cx\" value\n        /// Create an SVG attribute \"cy\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"cy\")>]\n        let cy value = Attr.Create \"cy\" value\n        /// Create an SVG attribute \"d\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"d\")>]\n        let d value = Attr.Create \"d\" value\n        /// Create an SVG attribute \"diffuseConstant\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"diffuseConstant\")>]\n        let diffuseConstant value = Attr.Create \"diffuseConstant\" value\n        /// Create an SVG attribute \"direction\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"direction\")>]\n        let direction value = Attr.Create \"direction\" value\n        /// Create an SVG attribute \"display\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"display\")>]\n        let display value = Attr.Create \"display\" value\n        /// Create an SVG attribute \"divisor\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"divisor\")>]\n        let divisor value = Attr.Create \"divisor\" value\n        /// Create an SVG attribute \"dominant-baseline\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dominant-baseline\")>]\n        let dominantBaseline value = Attr.Create \"dominant-baseline\" value\n        /// Create an SVG attribute \"dur\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dur\")>]\n        let dur value = Attr.Create \"dur\" value\n        /// Create an SVG attribute \"dx\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dx\")>]\n        let dx value = Attr.Create \"dx\" value\n        /// Create an SVG attribute \"dy\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"dy\")>]\n        let dy value = Attr.Create \"dy\" value\n        /// Create an SVG attribute \"edgeMode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"edgeMode\")>]\n        let edgeMode value = Attr.Create \"edgeMode\" value\n        /// Create an SVG attribute \"elevation\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"elevation\")>]\n        let elevation value = Attr.Create \"elevation\" value\n        /// Create an SVG attribute \"end\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"end\")>]\n        let ``end`` value = Attr.Create \"end\" value\n        /// Create an SVG attribute \"externalResourcesRequired\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"externalResourcesRequired\")>]\n        let externalResourcesRequired value = Attr.Create \"externalResourcesRequired\" value\n        /// Create an SVG attribute \"fill\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"fill\")>]\n        let fill value = Attr.Create \"fill\" value\n        /// Create an SVG attribute \"fill-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"fill-opacity\")>]\n        let fillOpacity value = Attr.Create \"fill-opacity\" value\n        /// Create an SVG attribute \"fill-rule\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"fill-rule\")>]\n        let fillRule value = Attr.Create \"fill-rule\" value\n        /// Create an SVG attribute \"filter\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"filter\")>]\n        let filter value = Attr.Create \"filter\" value\n        /// Create an SVG attribute \"filterRes\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"filterRes\")>]\n        let filterRes value = Attr.Create \"filterRes\" value\n        /// Create an SVG attribute \"filterUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"filterUnits\")>]\n        let filterUnits value = Attr.Create \"filterUnits\" value\n        /// Create an SVG attribute \"flood-color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"flood-color\")>]\n        let floodColor value = Attr.Create \"flood-color\" value\n        /// Create an SVG attribute \"flood-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"flood-opacity\")>]\n        let floodOpacity value = Attr.Create \"flood-opacity\" value\n        /// Create an SVG attribute \"font-family\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-family\")>]\n        let fontFamily value = Attr.Create \"font-family\" value\n        /// Create an SVG attribute \"font-size\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-size\")>]\n        let fontSize value = Attr.Create \"font-size\" value\n        /// Create an SVG attribute \"font-size-adjust\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-size-adjust\")>]\n        let fontSizeAdjust value = Attr.Create \"font-size-adjust\" value\n        /// Create an SVG attribute \"font-stretch\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-stretch\")>]\n        let fontStretch value = Attr.Create \"font-stretch\" value\n        /// Create an SVG attribute \"font-style\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-style\")>]\n        let fontStyle value = Attr.Create \"font-style\" value\n        /// Create an SVG attribute \"font-variant\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-variant\")>]\n        let fontVariant value = Attr.Create \"font-variant\" value\n        /// Create an SVG attribute \"font-weight\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"font-weight\")>]\n        let fontWeight value = Attr.Create \"font-weight\" value\n        /// Create an SVG attribute \"from\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"from\")>]\n        let from value = Attr.Create \"from\" value\n        /// Create an SVG attribute \"gradientTransform\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"gradientTransform\")>]\n        let gradientTransform value = Attr.Create \"gradientTransform\" value\n        /// Create an SVG attribute \"gradientUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"gradientUnits\")>]\n        let gradientUnits value = Attr.Create \"gradientUnits\" value\n        /// Create an SVG attribute \"height\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"height\")>]\n        let height value = Attr.Create \"height\" value\n        /// Create an SVG attribute \"image-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"image-rendering\")>]\n        let imageRendering value = Attr.Create \"image-rendering\" value\n        /// Create an SVG attribute \"in\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"in\")>]\n        let ``in`` value = Attr.Create \"in\" value\n        /// Create an SVG attribute \"in2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"in2\")>]\n        let in2 value = Attr.Create \"in2\" value\n        /// Create an SVG attribute \"k1\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k1\")>]\n        let k1 value = Attr.Create \"k1\" value\n        /// Create an SVG attribute \"k2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k2\")>]\n        let k2 value = Attr.Create \"k2\" value\n        /// Create an SVG attribute \"k3\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k3\")>]\n        let k3 value = Attr.Create \"k3\" value\n        /// Create an SVG attribute \"k4\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"k4\")>]\n        let k4 value = Attr.Create \"k4\" value\n        /// Create an SVG attribute \"kernelMatrix\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kernelMatrix\")>]\n        let kernelMatrix value = Attr.Create \"kernelMatrix\" value\n        /// Create an SVG attribute \"kernelUnitLength\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kernelUnitLength\")>]\n        let kernelUnitLength value = Attr.Create \"kernelUnitLength\" value\n        /// Create an SVG attribute \"kerning\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"kerning\")>]\n        let kerning value = Attr.Create \"kerning\" value\n        /// Create an SVG attribute \"keySplines\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"keySplines\")>]\n        let keySplines value = Attr.Create \"keySplines\" value\n        /// Create an SVG attribute \"keyTimes\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"keyTimes\")>]\n        let keyTimes value = Attr.Create \"keyTimes\" value\n        /// Create an SVG attribute \"letter-spacing\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"letter-spacing\")>]\n        let letterSpacing value = Attr.Create \"letter-spacing\" value\n        /// Create an SVG attribute \"lighting-color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"lighting-color\")>]\n        let lightingColor value = Attr.Create \"lighting-color\" value\n        /// Create an SVG attribute \"limitingConeAngle\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"limitingConeAngle\")>]\n        let limitingConeAngle value = Attr.Create \"limitingConeAngle\" value\n        /// Create an SVG attribute \"local\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"local\")>]\n        let local value = Attr.Create \"local\" value\n        /// Create an SVG attribute \"marker-end\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marker-end\")>]\n        let markerEnd value = Attr.Create \"marker-end\" value\n        /// Create an SVG attribute \"markerHeight\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"markerHeight\")>]\n        let markerHeight value = Attr.Create \"markerHeight\" value\n        /// Create an SVG attribute \"marker-mid\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marker-mid\")>]\n        let markerMid value = Attr.Create \"marker-mid\" value\n        /// Create an SVG attribute \"marker-start\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"marker-start\")>]\n        let markerStart value = Attr.Create \"marker-start\" value\n        /// Create an SVG attribute \"markerUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"markerUnits\")>]\n        let markerUnits value = Attr.Create \"markerUnits\" value\n        /// Create an SVG attribute \"markerWidth\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"markerWidth\")>]\n        let markerWidth value = Attr.Create \"markerWidth\" value\n        /// Create an SVG attribute \"mask\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"mask\")>]\n        let mask value = Attr.Create \"mask\" value\n        /// Create an SVG attribute \"maskContentUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"maskContentUnits\")>]\n        let maskContentUnits value = Attr.Create \"maskContentUnits\" value\n        /// Create an SVG attribute \"maskUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"maskUnits\")>]\n        let maskUnits value = Attr.Create \"maskUnits\" value\n        /// Create an SVG attribute \"max\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"max\")>]\n        let max value = Attr.Create \"max\" value\n        /// Create an SVG attribute \"min\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"min\")>]\n        let min value = Attr.Create \"min\" value\n        /// Create an SVG attribute \"mode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"mode\")>]\n        let mode value = Attr.Create \"mode\" value\n        /// Create an SVG attribute \"numOctaves\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"numOctaves\")>]\n        let numOctaves value = Attr.Create \"numOctaves\" value\n        /// Create an SVG attribute \"opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"opacity\")>]\n        let opacity value = Attr.Create \"opacity\" value\n        /// Create an SVG attribute \"operator\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"operator\")>]\n        let operator value = Attr.Create \"operator\" value\n        /// Create an SVG attribute \"order\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"order\")>]\n        let order value = Attr.Create \"order\" value\n        /// Create an SVG attribute \"overflow\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"overflow\")>]\n        let overflow value = Attr.Create \"overflow\" value\n        /// Create an SVG attribute \"paint-order\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"paint-order\")>]\n        let paintOrder value = Attr.Create \"paint-order\" value\n        /// Create an SVG attribute \"pathLength\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pathLength\")>]\n        let pathLength value = Attr.Create \"pathLength\" value\n        /// Create an SVG attribute \"patternContentUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"patternContentUnits\")>]\n        let patternContentUnits value = Attr.Create \"patternContentUnits\" value\n        /// Create an SVG attribute \"patternTransform\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"patternTransform\")>]\n        let patternTransform value = Attr.Create \"patternTransform\" value\n        /// Create an SVG attribute \"patternUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"patternUnits\")>]\n        let patternUnits value = Attr.Create \"patternUnits\" value\n        /// Create an SVG attribute \"pointer-events\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointer-events\")>]\n        let pointerEvents value = Attr.Create \"pointer-events\" value\n        /// Create an SVG attribute \"points\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"points\")>]\n        let points value = Attr.Create \"points\" value\n        /// Create an SVG attribute \"pointsAtX\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointsAtX\")>]\n        let pointsAtX value = Attr.Create \"pointsAtX\" value\n        /// Create an SVG attribute \"pointsAtY\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointsAtY\")>]\n        let pointsAtY value = Attr.Create \"pointsAtY\" value\n        /// Create an SVG attribute \"pointsAtZ\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"pointsAtZ\")>]\n        let pointsAtZ value = Attr.Create \"pointsAtZ\" value\n        /// Create an SVG attribute \"preserveAlpha\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"preserveAlpha\")>]\n        let preserveAlpha value = Attr.Create \"preserveAlpha\" value\n        /// Create an SVG attribute \"preserveAspectRatio\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"preserveAspectRatio\")>]\n        let preserveAspectRatio value = Attr.Create \"preserveAspectRatio\" value\n        /// Create an SVG attribute \"primitiveUnits\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"primitiveUnits\")>]\n        let primitiveUnits value = Attr.Create \"primitiveUnits\" value\n        /// Create an SVG attribute \"r\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"r\")>]\n        let r value = Attr.Create \"r\" value\n        /// Create an SVG attribute \"radius\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"radius\")>]\n        let radius value = Attr.Create \"radius\" value\n        /// Create an SVG attribute \"repeatCount\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"repeatCount\")>]\n        let repeatCount value = Attr.Create \"repeatCount\" value\n        /// Create an SVG attribute \"repeatDur\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"repeatDur\")>]\n        let repeatDur value = Attr.Create \"repeatDur\" value\n        /// Create an SVG attribute \"requiredFeatures\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"requiredFeatures\")>]\n        let requiredFeatures value = Attr.Create \"requiredFeatures\" value\n        /// Create an SVG attribute \"restart\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"restart\")>]\n        let restart value = Attr.Create \"restart\" value\n        /// Create an SVG attribute \"result\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"result\")>]\n        let result value = Attr.Create \"result\" value\n        /// Create an SVG attribute \"rx\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"rx\")>]\n        let rx value = Attr.Create \"rx\" value\n        /// Create an SVG attribute \"ry\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"ry\")>]\n        let ry value = Attr.Create \"ry\" value\n        /// Create an SVG attribute \"scale\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"scale\")>]\n        let scale value = Attr.Create \"scale\" value\n        /// Create an SVG attribute \"seed\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"seed\")>]\n        let seed value = Attr.Create \"seed\" value\n        /// Create an SVG attribute \"shape-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"shape-rendering\")>]\n        let shapeRendering value = Attr.Create \"shape-rendering\" value\n        /// Create an SVG attribute \"specularConstant\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"specularConstant\")>]\n        let specularConstant value = Attr.Create \"specularConstant\" value\n        /// Create an SVG attribute \"specularExponent\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"specularExponent\")>]\n        let specularExponent value = Attr.Create \"specularExponent\" value\n        /// Create an SVG attribute \"stdDeviation\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stdDeviation\")>]\n        let stdDeviation value = Attr.Create \"stdDeviation\" value\n        /// Create an SVG attribute \"stitchTiles\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stitchTiles\")>]\n        let stitchTiles value = Attr.Create \"stitchTiles\" value\n        /// Create an SVG attribute \"stop-color\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stop-color\")>]\n        let stopColor value = Attr.Create \"stop-color\" value\n        /// Create an SVG attribute \"stop-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stop-opacity\")>]\n        let stopOpacity value = Attr.Create \"stop-opacity\" value\n        /// Create an SVG attribute \"stroke\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke\")>]\n        let stroke value = Attr.Create \"stroke\" value\n        /// Create an SVG attribute \"stroke-dasharray\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-dasharray\")>]\n        let strokeDasharray value = Attr.Create \"stroke-dasharray\" value\n        /// Create an SVG attribute \"stroke-dashoffset\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-dashoffset\")>]\n        let strokeDashoffset value = Attr.Create \"stroke-dashoffset\" value\n        /// Create an SVG attribute \"stroke-linecap\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-linecap\")>]\n        let strokeLinecap value = Attr.Create \"stroke-linecap\" value\n        /// Create an SVG attribute \"stroke-linejoin\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-linejoin\")>]\n        let strokeLinejoin value = Attr.Create \"stroke-linejoin\" value\n        /// Create an SVG attribute \"stroke-miterlimit\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-miterlimit\")>]\n        let strokeMiterlimit value = Attr.Create \"stroke-miterlimit\" value\n        /// Create an SVG attribute \"stroke-opacity\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-opacity\")>]\n        let strokeOpacity value = Attr.Create \"stroke-opacity\" value\n        /// Create an SVG attribute \"stroke-width\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"stroke-width\")>]\n        let strokeWidth value = Attr.Create \"stroke-width\" value\n        /// Create an SVG attribute \"style\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"style\")>]\n        let style value = Attr.Create \"style\" value\n        /// Create an SVG attribute \"surfaceScale\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"surfaceScale\")>]\n        let surfaceScale value = Attr.Create \"surfaceScale\" value\n        /// Create an SVG attribute \"targetX\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"targetX\")>]\n        let targetX value = Attr.Create \"targetX\" value\n        /// Create an SVG attribute \"targetY\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"targetY\")>]\n        let targetY value = Attr.Create \"targetY\" value\n        /// Create an SVG attribute \"text-anchor\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text-anchor\")>]\n        let textAnchor value = Attr.Create \"text-anchor\" value\n        /// Create an SVG attribute \"text-decoration\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text-decoration\")>]\n        let textDecoration value = Attr.Create \"text-decoration\" value\n        /// Create an SVG attribute \"text-rendering\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"text-rendering\")>]\n        let textRendering value = Attr.Create \"text-rendering\" value\n        /// Create an SVG attribute \"to\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"to\")>]\n        let ``to`` value = Attr.Create \"to\" value\n        /// Create an SVG attribute \"transform\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"transform\")>]\n        let transform value = Attr.Create \"transform\" value\n        /// Create an SVG attribute \"type\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"type\")>]\n        let ``type`` value = Attr.Create \"type\" value\n        /// Create an SVG attribute \"values\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"values\")>]\n        let values value = Attr.Create \"values\" value\n        /// Create an SVG attribute \"viewBox\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"viewBox\")>]\n        let viewBox value = Attr.Create \"viewBox\" value\n        /// Create an SVG attribute \"visibility\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"visibility\")>]\n        let visibility value = Attr.Create \"visibility\" value\n        /// Create an SVG attribute \"width\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"width\")>]\n        let width value = Attr.Create \"width\" value\n        /// Create an SVG attribute \"word-spacing\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"word-spacing\")>]\n        let wordSpacing value = Attr.Create \"word-spacing\" value\n        /// Create an SVG attribute \"writing-mode\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"writing-mode\")>]\n        let writingMode value = Attr.Create \"writing-mode\" value\n        /// Create an SVG attribute \"x\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"x\")>]\n        let x value = Attr.Create \"x\" value\n        /// Create an SVG attribute \"x1\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"x1\")>]\n        let x1 value = Attr.Create \"x1\" value\n        /// Create an SVG attribute \"x2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"x2\")>]\n        let x2 value = Attr.Create \"x2\" value\n        /// Create an SVG attribute \"xChannelSelector\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"xChannelSelector\")>]\n        let xChannelSelector value = Attr.Create \"xChannelSelector\" value\n        /// Create an SVG attribute \"y\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"y\")>]\n        let y value = Attr.Create \"y\" value\n        /// Create an SVG attribute \"y1\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"y1\")>]\n        let y1 value = Attr.Create \"y1\" value\n        /// Create an SVG attribute \"y2\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"y2\")>]\n        let y2 value = Attr.Create \"y2\" value\n        /// Create an SVG attribute \"yChannelSelector\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"yChannelSelector\")>]\n        let yChannelSelector value = Attr.Create \"yChannelSelector\" value\n        /// Create an SVG attribute \"z\" with the given value.\n        [<JavaScript; Inline; Macro(typeof<Macros.AttrCreate>, \"z\")>]\n        let z value = Attr.Create \"z\" value\n        // }}\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.Sitelets\n\n[<CompiledName \"InstallRouter\">]\n[<JavaScript>]\nmodule Router =\n\n    let private getCurrent parse onParseError =\n        let loc = JS.Window.Location\n        let p = loc.Pathname + loc.Search |> Route.FromUrl\n        match parse p with\n        | Some a -> a\n        | None ->\n            printfn \"Failed to parse route: %s\" (p.ToLink()) \n            onParseError\n\n    /// Trim the #fragment, if any, from a URL.\n    let private trimFragment (url: string) =\n        match url.IndexOf('#') with\n        | -1 -> url\n        | i -> url.[..i-1]\n\n    /// Transform the url from an <a href=\"XYZ\"> tag into an absolute path+query,\n    /// if it is indeed a URL that Install wants to handle.\n    let private hrefToAbsolute (href: string) =\n        if href.StartsWith(\"?\") then\n            // Query only, just add it to the current path\n            Some (JS.Window.Location.Pathname + href |> trimFragment)\n        elif href.StartsWith(\"#\") then\n            // Fragment only, Install doesn't handle it\n            None\n        elif href.StartsWith(\"/\") then\n            // Absolute path, just use it\n            Some (href |> trimFragment)\n        elif RegExp(\"^[a-zA-Z0-9]:\").Test(href) then\n            // Full URL (eg: \"http://foo.bar\"), we don't handle it\n            None\n        else\n            // Relative URL, combine it with the current path\n            let s = JS.Window.Location.Pathname\n            Some (s.[..s.LastIndexOf('/')] + href |> trimFragment)\n\n    let rec private findLinkHref (n: Dom.Element) =\n        if n.TagName = \"A\" then\n            n.GetAttribute(\"href\") |> Option.ofObj\n        elif n ===. JS.Document.Body then\n            None\n        else\n            findLinkHref (n.ParentNode :?> Dom.Element)\n\n    /// Installs client-side routing on the full URL. \n    /// If initials URL parse fails, value is left as the initial value of `var`.\n    let InstallInto (var: Var<'T>) onParseError (router: Router<'T>) : unit =\n        let parse p = Router.Parse router p\n        let cur() : 'T = getCurrent parse onParseError\n\n        let set value =\n            if var.Value <> value then\n                var.Value <- value\n        \n        JS.Window.AddEventListener(\"popstate\", (fun () -> set (cur())), false)\n\n        JS.Document.Body.AddEventListener(\"click\", (fun (ev: Dom.Event) ->\n            findLinkHref (As ev.Target)\n            |> Option.bind hrefToAbsolute\n            |> Option.bind (Route.FromUrl >> parse)\n            |> Option.iter (fun a ->\n                set a\n                ev.PreventDefault()\n            )\n        ), false)\n        \n        var.View\n        |> View.Sink (fun value ->\n            if value <> cur() then \n                let url = Router.Link router value\n                JS.Window.History.PushState(null, null, url)\n        )\n\n    /// Installs client-side routing on the full URL. \n    /// If initials URL parse fails, value is set to `onParseError`. \n    let Install onParseError (router: Router<'T>) : Var<'T> =\n        let parse p = Router.Parse router p\n        let var = Var.Create (getCurrent parse onParseError)\n        InstallInto var onParseError router\n        var\n\n    let private getCurrentHash parse onParseError =\n        let h = JS.Window.Location.Hash\n        match parse h with\n        | Some a -> \n            a\n        | None ->\n            printfn \"Failed to parse route: %s\" h \n            onParseError\n\n    /// Installs client-side routing on the hash part of the URL. \n    /// If initials URL parse fails, value is left as the initial value of `var`.\n    let InstallHashInto (var: Var<'T>) onParseError (router: Router<'T>) =\n        let parse h = \n            let p = Route.FromHash(h, true)\n            Router.Parse router p\n        let cur() : 'T = getCurrentHash parse onParseError\n        let set value =\n            if var.Value <> value then\n                var.Value <- value\n       \n        JS.Window.AddEventListener(\"popstate\", (fun () -> set (cur())), false)\n        JS.Window.AddEventListener(\"hashchange\", (fun () -> set (cur())), false)\n\n        JS.Document.Body.AddEventListener(\"click\", (fun (ev: Dom.Event) ->\n            findLinkHref (As ev.Target)\n            |> Option.bind (fun href -> if href.StartsWith \"#\" then parse href else None)\n            |> Option.iter (fun a ->\n                set a\n                ev.PreventDefault()\n            )\n        ), false)\n\n        var.View\n        |> View.Sink (fun value ->\n            if value <> cur() then \n                let url = Router.HashLink router value\n                JS.Window.History.PushState(null, null, url)\n        )\n\n    /// Installs client-side routing on the hash part of the URL. \n    /// If initials URL parse fails, value is set to `onParseError`. \n    let InstallHash onParseError (router: Router<'T>) =\n        let parse h = \n            let p = Route.FromHash(h, true)\n            Router.Parse router p\n        let cur() : 'T = getCurrentHash parse onParseError\n        let var = Var.Create (cur())\n        InstallHashInto var onParseError router\n        var\n\nopen System.Runtime.CompilerServices\n\n[<Extension; JavaScript>]\ntype RouterExtensions =\n\n    [<Extension; Inline>]\n    static member Install(router, onParseError) =\n        Router.Install onParseError router\n\n    [<Extension; Inline>]\n    static member InstallHash(router, onParseError) =\n        Router.InstallHash onParseError router\n", "// $begin{copyright}\n//\n// This file is part of WebSharper\n//\n// Copyright (c) 2008-2014 IntelliFactory\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\"); you\n// may not use this file except in compliance with the License.  You may\n// obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n// implied.  See the License for the specific language governing\n// permissions and limitations under the License.\n//\n// $end{copyright}\n\nnamespace WebSharper.UI\n\n// NOTES: need better facilities for the user to construct routers. In particular,\n// should be possible to encode numbers, semi-automatically provide bijections,\n// and so on.\n\nopen WebSharper\nopen WebSharper.JavaScript\nmodule A = AppendList\nmodule T = Trie\n\ntype RouteMap<'T> =\n    {\n        Des : (list<string> * Map<string, string>) -> 'T\n        Ser : 'T -> (list<string> * Map<string, string>)\n    }\n\n[<JavaScript>]\nmodule Route =\n\n    let private NoHash (s: string) =\n        if s.StartsWith(\"#\") then s.Substring(1) else s\n\n    [<Inline \"decodeURIComponent($x)\">]\n    let private Decode (x: string) : string = JS.Undefined\n\n    [<Inline \"encodeURIComponent($x)\">]\n    let private Encode (x: string) : string = JS.Undefined\n\n    type T =\n        private\n        | Route of AppendList<string> * Map<string, string>\n\n    let ParseHash (hash: string) =\n        let hash = NoHash hash\n        let path, query =\n            match hash.IndexOf '?' with\n            | -1 -> hash, \"\"\n            | i -> hash.[..i-1], hash.[i+1..]\n        let path =\n            if path = \"\" then [||] \n            else path.Split('/') |> Array.map Decode\n            |> A.FromArray\n        let query =\n            query.Split('&')\n            |> Array.map (fun s ->\n                match s.IndexOf '=' with\n                | -1 -> Decode s, \"\"\n                | i -> Decode (s.[..i-1]), Decode (s.[i+1..]))\n            |> Map.ofArray\n        Route (path, query)\n\n    let MakeHash (Route (path, query)) =\n        let path =\n            A.ToArray path\n            |> Array.map Encode\n            |> String.concat \"/\"\n        if Map.isEmpty query then\n            path\n        else\n            path + \"?\" +\n            (query\n            |> Seq.map (fun (KeyValue(k, v)) -> Encode k + \"=\" + Encode v)\n            |> String.concat \"&\")\n\n    let SameHash a b =\n        NoHash a = NoHash b\n\n    let ToList (Route (rt, q)) =\n        let path =\n            A.ToArray rt\n            |> Array.toList\n        path, q\n\n    let FromList (xs, q) =\n        let a =\n            List.toArray xs\n            |> A.FromArray\n        Route(a, q)\n\n    let Append (Route (pa, qa)) (Route (pb, qb)) =\n        Route (A.Append pa pb, Map.foldBack Map.add qa qb)\n\n[<JavaScript>]\nmodule Routing =\n\n    let InstallMap (rt: RouteMap<'T>) : Var<'T> =\n        let win = JS.Window\n        let same a b = rt.Ser a = rt.Ser b\n        let cur () =\n            Route.ParseHash win.Location.Hash\n            |> Route.ToList\n            |> rt.Des\n        let var = Var.Create (cur ())\n        let set value =\n            if not (same var.Value value) then\n                var.Value <- value\n        let onUpdate = System.Action<_>(fun (evt: Dom.Event) -> set (cur ()))\n        win.Onpopstate <- onUpdate\n        win.Onhashchange <- onUpdate\n        var.View\n        |> View.Sink (fun loc ->\n            let ha = Route.MakeHash (Route.FromList (rt.Ser loc))\n            if not (Route.SameHash win.Location.Hash ha) then\n                win.Location.Replace (\"#\" + ha))\n        var\n\n    let DoRoute map route =\n        map.Des (Route.ToList route)\n\n    let DoLink map va =\n        Route.FromList (map.Ser va)\n\n[<JavaScript>]\n[<Sealed>]\ntype RouteMap =\n\n    static member CreateWithQuery ser des =\n        { Ser = ser; Des = des }\n\n    static member Create ser des =\n        { Ser = (fun x -> ser x, Map.empty); Des = fst >> des }\n\n    static member Install map =\n        Routing.InstallMap map\n", "namespace WebSharper.UI\n\nopen WebSharper\nopen WebSharper.JavaScript\nopen WebSharper.UI\nopen WebSharper.UI.Notation\nopen WebSharper.JQuery\n\n[<JavaScript>]\nmodule Input =\n\n    type MousePosSt =\n        {\n            mutable Active : bool\n            PosV : Var<int * int>\n        }\n\n    type MouseBtnSt =\n        {\n            mutable Active : bool\n            Left : Var<bool>\n            Middle : Var<bool>\n            Right : Var<bool>\n        }\n\n    let MousePosSt = { Active = false; PosV = Var.Create (0, 0) }\n    let MouseBtnSt =\n        {\n            Active = false;\n            Left = Var.Create false\n            Middle = Var.Create false\n            Right = Var.Create false\n        }\n\n    // Add the button listener if it hasn't been added already.\n    // Button listener adds mousedown and mouseup events, which modify\n    // MouseBtnSt vars.\n    let ActivateButtonListener =\n        let buttonListener (evt: Dom.MouseEvent) down =\n            match evt.Button with\n            | 0 -> Var.Set MouseBtnSt.Left down\n            | 1 -> Var.Set MouseBtnSt.Middle down\n            | 2 -> Var.Set MouseBtnSt.Right down\n            | _ -> ()\n\n        if not MouseBtnSt.Active then\n            MouseBtnSt.Active <- true\n            JS.Document.AddEventListener(\"mousedown\",\n                (fun (evt: Dom.Event) -> buttonListener (evt :?> Dom.MouseEvent) true), false)\n            JS.Document.AddEventListener(\"mouseup\",\n                (fun (evt: Dom.Event) -> buttonListener (evt :?> Dom.MouseEvent) false), false)\n\n    [<Sealed>]\n    type Mouse =\n\n        static member Position =\n\n            let onMouseMove (evt: Dom.Event) =\n                // We know this is a mouse event, so safe to downcast\n                let mEvt = evt :?> Dom.MouseEvent\n                Var.Set MousePosSt.PosV (mEvt.ClientX, mEvt.ClientY)\n\n            // Add the mouse movement event if it's not there already.\n            if not MousePosSt.Active then\n                JS.Document.AddEventListener(\"mousemove\", onMouseMove, false)\n                MousePosSt.Active <- true\n\n            View.FromVar MousePosSt.PosV\n\n        static member LeftPressed =\n            ActivateButtonListener\n            MouseBtnSt.Left.View\n\n        static member MiddlePressed =\n            ActivateButtonListener\n            MouseBtnSt.Middle.View\n\n        static member RightPressed =\n            ActivateButtonListener\n            MouseBtnSt.Right.View\n\n        static member MousePressed =\n            ActivateButtonListener\n            // True if any button is pressed\n            View.Const (fun l m r -> l || m || r)\n            <*> MouseBtnSt.Left.View\n            <*> MouseBtnSt.Middle.View\n            <*> MouseBtnSt.Right.View\n\n    type Key = int\n\n    // State for keyboard listener: which keys are pressed, whether the listener\n    // is active, and the last key that has been presed\n    type KeyListenerSt =\n        {\n            KeysPressed : Var<Key list>\n            mutable KeyListenerActive : bool\n            LastPressed : Var<Key>\n        }\n\n    let KeyListenerState =\n        {\n            KeysPressed = Var.Create []\n            KeyListenerActive = false\n            LastPressed = Var.Create (-1)\n        }\n\n    let ActivateKeyListener =\n        if not KeyListenerState.KeyListenerActive then\n            // Using JQuery for cross-compatibility.\n            JQuery.Of(JS.Document).Keydown(fun el evt ->\n                let keyCode = evt.Which\n                Var.Set KeyListenerState.LastPressed keyCode\n                let xs = Var.Get KeyListenerState.KeysPressed\n                if not (List.exists (fun x -> x = keyCode) xs) then\n                    KeyListenerState.KeysPressed.Value <- xs @ [keyCode]\n            ) |> ignore\n\n            JQuery.Of(JS.Document).Keyup(fun el evt ->\n                let keyCode = evt.Which\n                Var.Update KeyListenerState.KeysPressed\n                    (List.filter (fun x -> x <> keyCode))\n            ) |> ignore\n\n    [<Sealed>]\n    type Keyboard =\n\n        static member KeysPressed =\n            ActivateKeyListener\n            KeyListenerState.KeysPressed.View\n\n        static member LastPressed =\n            ActivateKeyListener\n            KeyListenerState.LastPressed.View\n\n        static member IsPressed key =\n            ActivateKeyListener\n            View.Map (List.exists (fun x -> x = key))\n                KeyListenerState.KeysPressed.View\n"],
"names": [],
"mappings": "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"
}
