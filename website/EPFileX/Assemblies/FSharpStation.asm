{
  "asName": "FSharpStation",
  "dependencies": [
    "WebSharper.Main.asm",
    "WebSharper.Collections.asm",
    "WebSharper.Web.asm",
    "WebSharper.Sitelets.asm",
    "WebSharper.Control.asm",
    "WebSharper.UI.asm",
    "WebSharper.UI.Templating.Runtime.asm",
    "WebSharper.Owin.WebSocket.asm"
  ],
  "resources": [
    "<script src=\"/EPFileX/monaco/package/min/vs/loader.js\" type=\"text/javascript\" charset=\"UTF-8\"></script>"
  ],
  "modules": [
    {
      "moName": "FsRoot.Library+StringId`1",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+GuidId`1",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Log",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Dict",
      "methods": [
        {
          "meName": "add",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "Dictionary<'a, 'b>",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+LDict",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+ResultMessage`1",
      "methods": [
        {
          "meName": "_unique_NoMsg",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+ResultMessageHelpers",
      "methods": [
        {
          "meName": "infof",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PrintfFormat<'a, unit, string, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "warningf",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PrintfFormat<'a, unit, string, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "errorMsgf",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PrintfFormat<'a, unit, string, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+ResultMessage",
      "methods": [
        {
          "meName": "summarizedI",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "summarizedW",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "summarized",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "summarizedF",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> (int * int * int))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "summaryF",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> (int * int * int))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "reduceMsgs",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+ResultMessage<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addMsg",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "countI",
          "isField": 0,
          "type": {
            "tName": "(int * int * int)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "countW",
          "isField": 0,
          "type": {
            "tName": "(int * int * int)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "count",
          "isField": 0,
          "type": {
            "tName": "(int * int * int)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "countF",
          "isField": 0,
          "type": {
            "tName": "(int * int * int)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> (int * int * int))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isFatalW",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isFatal",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isFatalF",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isWarningOrInfoW",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isWarningOrInfo",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isWarningOrInfoF",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isInfoI",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isInfo",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isInfoF",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessageI",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessageW",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessageF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+ResultMessage<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+ResultMessage<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "exclnoMsg",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<FsRoot.Library+ResultMessage<'a>>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+ResultMessage<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "noMsg",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Memoize",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+Seq",
      "methods": [
        {
          "meName": "ofOption",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<'a>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "Option<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "absorbR",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<'a>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<Result<'a, 'b>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<'a>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<Option<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<Result<'b, 'c>>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "Result<'a, 'c>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<Option<'b>>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "Option<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 1,
          "type": {
            "tName": "('a -> IEnumerable<'a>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+Option",
      "methods": [
        {
          "meName": "absorbR",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<Result<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "Option<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<Option<'a>, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "Option<IEnumerable<'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<Option<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "Option<IEnumerable<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Option<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Option<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Option<'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bindNone",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> Option<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mapNone",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "Option<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<('a -> 'b)>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "join",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<Option<'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iter",
          "isField": 0,
          "type": {
            "tName": "(Option<'a> -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+Async",
      "methods": [
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<Async<'a>, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "Async<Option<'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<Async<'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sequenceSeqS",
          "isField": 0,
          "type": {
            "tName": "Async<IEnumerable<'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<Async<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "Async<IEnumerable<'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<Async<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "Async<IEnumerable<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Async<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sleepThen",
          "isField": 0,
          "type": {
            "tName": "Async<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "Async<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<('a -> 'b)>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+State+CEBuilder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+State+Operators",
      "methods": [
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "('b -> ('b * 'c))",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('b -> ('b * 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> 'c)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "('b -> ('b * 'c))",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('b -> ('b * 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> ('b -> ('b * 'c)))",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+State",
      "methods": [
        {
          "meName": "state",
          "isField": 1,
          "type": {
            "tName": "CEBuilder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "(('c -> ('c * 'a)) -> ('c -> ('c * 'b)))",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "('c * 'b)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> ('c -> ('c * 'b)))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('c -> ('c * 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'c",
              "asm": ""
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "('b * 'a)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+Result+Builder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+Result+Operators",
      "methods": [
        {
          "meName": "result",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Result+Builder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Result<'a, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterEqualsGreater",
          "isField": 0,
          "type": {
            "tName": "Result<'d, 'c>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Result<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> Result<'d, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_RightShift",
          "isField": 0,
          "type": {
            "tName": "Result<'d, 'c>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Result<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> 'd)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Result<'c, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Result<'c, 'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "Result<'c, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> 'c)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+Result+BuilderP",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+Result",
      "methods": [
        {
          "meName": "resultP",
          "isField": 1,
          "type": {
            "tName": "BuilderP",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "iterP",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<'b, FsRoot.Library+ResultMessage<'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mapP",
          "isField": 0,
          "type": {
            "tName": "Result<'b, FsRoot.Library+ResultMessage<'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bindP",
          "isField": 0,
          "type": {
            "tName": "Result<'b, FsRoot.Library+ResultMessage<'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Result<'b, FsRoot.Library+ResultMessage<'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "Result<'a, FsRoot.Library+ResultMessage<'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "result",
          "isField": 1,
          "type": {
            "tName": "Builder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "Result<IEnumerable<'a>, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<Result<'a, 'b>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "Result<IEnumerable<'b>, 'c>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Result<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Result<'c, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Result<'c, 'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "Result<'b, 'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<Option<'b>, 'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "Result<Option<'a>, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<Result<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofOption",
          "isField": 0,
          "type": {
            "tName": "Result<'b, 'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "get",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "Result<'a, Object>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iter",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<'b, 'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "failIfFalse",
          "isField": 0,
          "type": {
            "tName": "Result<unit, 'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "failIfTrue",
          "isField": 0,
          "type": {
            "tName": "Result<unit, 'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "defaultValue",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defaultWith",
          "isField": 0,
          "type": {
            "tName": "'b",
            "asm": ""
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<'b, 'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "toOption",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "flatten",
          "isField": 0,
          "type": {
            "tName": "Result<'a, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<Result<'a, 'b>, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "join",
          "isField": 0,
          "type": {
            "tName": "Result<'a, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<Result<'a, 'b>, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Result<'a, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "errorf",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PrintfFormat<'a, unit, string, Result<'b, string>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+Depend+Depend`1",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+Depend+DependBuilder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+Depend+Operators",
      "methods": [
        {
          "meName": "op_GreaterMultiplyGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<('a -> 'c)>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<('b -> 'c)>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "op_LessMultiplyGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<('a -> 'b)>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "op_GreaterEqualsMultiply",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<('a -> 'b)>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "op_BarMultiplyGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<('a -> 'b)>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+Depend+Depend<'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "depend",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+DependBuilder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "rtn",
          "isField": 1,
          "type": {
            "tName": "('a -> FsRoot.Library+Monads+Depend+Depend<'a>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+Depend",
      "methods": [
        {
          "meName": "toString",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getDependencies",
          "isField": 0,
          "type": {
            "tName": "List<Depend<'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "depend",
          "isField": 1,
          "type": {
            "tName": "DependBuilder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "resolver",
          "isField": 0,
          "type": {
            "tName": "'b",
            "asm": ""
          },
          "parms": [
            {
              "tName": "IEnumerable<(string * 'a)>",
              "asm": "netstandard"
            },
            {
              "tName": "Depend<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "replacerDef",
          "isField": 0,
          "type": {
            "tName": "Depend<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<(string * (string * Object))>",
              "asm": "netstandard"
            },
            {
              "tName": "Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "replacer",
          "isField": 0,
          "type": {
            "tName": "Depend<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<(string * Object)>",
              "asm": "netstandard"
            },
            {
              "tName": "Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Depend<('a -> 'b)>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "(Depend<'a> -> Depend<'b>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Depend<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> Depend<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "dependByName",
          "isField": 0,
          "type": {
            "tName": "Depend<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+FusionM`3",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+FusionM+Operators",
      "methods": [
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterEqualsGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'e, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> FsRoot.Library+Monads+FusionM<'e, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_RightShift",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'e, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> 'e)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'d, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionM<'d, 'b, 'c>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'d, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> 'd)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_LessMultiplyGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<('a -> 'b), 'c, 'd>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+FusionM+Builder+Builder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+FusionM+Builder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+FusionM",
      "methods": [
        {
          "meName": "fusion",
          "isField": 1,
          "type": {
            "tName": "Builder+Builder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<Option<'b>, 'c, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "absorbR",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<Result<'a, FsRoot.Library+ResultMessage<'b>>, 'c, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "insertSnd",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<('a * 'd), 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'d",
              "asm": ""
            }
          ]
        },
        {
          "meName": "insertFst",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<('a * 'b), 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Result<'a, 'd>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<FsRoot.Library+Monads+FusionM<'a, 'b, 'c>, 'd>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<'a>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.Library+Monads+FusionM<'a, 'b, 'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterResultPrint",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, unit, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iterResult",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, unit, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "runResult",
          "isField": 0,
          "type": {
            "tName": "Result<('a * FsRoot.Library+ResultMessage<'b>), FsRoot.Library+ResultMessage<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, unit, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "runReader",
          "isField": 0,
          "type": {
            "tName": "Result<('b * FsRoot.Library+ResultMessage<'c>), FsRoot.Library+ResultMessage<'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, 'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapReader",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'd, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, 'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "readerFun",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'a, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<'a>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+Monads+FusionM<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<'b>, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'d, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionM<'d, 'b, 'c>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<('a -> 'b), 'c, 'd>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "memoizeRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'c, 'a, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> (('b -> Option<'c>) * ('b -> (('b -> 'c) -> 'c))))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> FsRoot.Library+Monads+FusionM<'c, 'a, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "iterReader",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'c",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapState",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'c, 'a, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> ('b -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'c, 'b, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessageW",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessageF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'c, 'd, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+ResultMessage<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'c, 'd, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofFusionM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofResultMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, 'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, 'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "ofOption",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResult",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultS",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, string>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultRM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "inling",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<'b>, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "check",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "putS",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getR",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<FsRoot.Library+ResultMessage<'a>, 'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getS",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "ErrorF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "OkFMsg",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "OkF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "run",
          "isField": 0,
          "type": {
            "tName": "(Option<'b> * 'a * FsRoot.Library+ResultMessage<'c>)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, 'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "from",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getFun",
          "isField": 0,
          "type": {
            "tName": "(('b * FsRoot.Library+ResultMessage<'c>) -> (Option<'a> * 'b * FsRoot.Library+ResultMessage<'c>))",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "wrap",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'c, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(('a * FsRoot.Library+ResultMessage<'b>) -> (Option<'c> * 'a * FsRoot.Library+ResultMessage<'b>))",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+FusionAsyncM`3",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+FusionAsyncM+Operators",
      "methods": [
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterEqualsGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'e, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> FsRoot.Library+Monads+FusionAsyncM<'e, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_RightShift",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'e, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> 'e)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'d, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionAsyncM<'d, 'b, 'c>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'d, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> 'd)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_LessMultiplyGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<('a -> 'b), 'c, 'd>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+FusionAsyncM+Builder+Builder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+FusionAsyncM+Builder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+FusionAsyncM",
      "methods": [
        {
          "meName": "fusion",
          "isField": 1,
          "type": {
            "tName": "Builder+Builder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "iterResultPrintA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, unit, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iterResultPrint",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, unit, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iterResultA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, unit, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iterResult",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, unit, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "runResult",
          "isField": 0,
          "type": {
            "tName": "Async<Result<('a * FsRoot.Library+ResultMessage<'b>), FsRoot.Library+ResultMessage<'b>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, unit, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "runReader",
          "isField": 0,
          "type": {
            "tName": "Async<Result<('b * FsRoot.Library+ResultMessage<'c>), FsRoot.Library+ResultMessage<'c>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapReader",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'd, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<Option<'b>, 'c, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "absorbR",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<Result<'a, FsRoot.Library+ResultMessage<'b>>, 'c, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "insertSnd",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<('a * 'd), 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'d",
              "asm": ""
            }
          ]
        },
        {
          "meName": "insertFst",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<('a * 'b), 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<Result<'a, 'd>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>, 'd>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<Option<'a>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "readerFun",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'a, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "freeMessageW",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<IEnumerable<'a>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<IEnumerable<'b>, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'d, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionAsyncM<'d, 'b, 'c>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<('a -> 'b), 'c, 'd>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "memoizeRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, 'a, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> (('b -> Option<'c>) * ('b -> (('b -> 'c) -> 'c))))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> FsRoot.Library+Monads+FusionAsyncM<'c, 'a, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "iterReaderA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'c",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iterReader",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'c",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapState",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, 'a, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> ('b -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, 'b, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessageF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, 'd, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+ResultMessage<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, 'd, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofFusionM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofAsyncResultRM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'b>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofAsync",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<unit, 'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<unit, 'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "ofOption",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResult",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultS",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, string>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, 'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResultRM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getOption",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<Option<'a>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "check",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<unit, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "putS",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<unit, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getR",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<FsRoot.Library+ResultMessage<'a>, 'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getS",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "ErrorF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "OkFMsg",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "OkF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "run",
          "isField": 0,
          "type": {
            "tName": "Async<(Option<'b> * 'a * FsRoot.Library+ResultMessage<'c>)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "from",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getFun",
          "isField": 0,
          "type": {
            "tName": "(('b * FsRoot.Library+ResultMessage<'c>) -> Async<(Option<'a> * 'b * FsRoot.Library+ResultMessage<'c>)>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "wrap",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(('a * FsRoot.Library+ResultMessage<'b>) -> Async<(Option<'c> * 'a * FsRoot.Library+ResultMessage<'b>)>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+FusionAsyncM<'b, 'c, 'd>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'c, 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+ResultM`2",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+ResultM+CheckError`1",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+ResultM+Builder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+ResultM+Operators",
      "methods": [
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterEqualsGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'d, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> FsRoot.Library+Monads+ResultM<'d, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_RightShift",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'d, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> 'd)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'c, 'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> 'c)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+ResultM",
      "methods": [
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<IEnumerable<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<IEnumerable<'b>, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'c, 'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "failIfFatalMsgW",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "failIfFatalMsg",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "failIfFatalMsgF",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "addMsg",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<Option<'b>, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<Option<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofResult",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "ofOption",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<'b>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "get",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iter",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapP",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "check",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "CheckError<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+Monads+ResultM<'a, 'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindP",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.Library+Monads+ResultM<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapMessage",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'c, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> FsRoot.Library+ResultMessage<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'c, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defaultValue",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defaultWith",
          "isField": 0,
          "type": {
            "tName": "'b",
            "asm": ""
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'b, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "toOption",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "toResultD",
          "isField": 0,
          "type": {
            "tName": "Result<('a * FsRoot.Library+ResultMessage<'b>), FsRoot.Library+ResultMessage<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "toResult",
          "isField": 0,
          "type": {
            "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "Result<'a, FsRoot.Library+ResultMessage<'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtnr",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtnM",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<unit, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "checkErrorW",
          "isField": 0,
          "type": {
            "tName": "CheckError<'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "checkError",
          "isField": 0,
          "type": {
            "tName": "CheckError<'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+ResultMAutoOpen",
      "methods": [
        {
          "meName": "resultM",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+ResultM+Builder",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResult",
      "methods": [
        {
          "meName": "tryFinally",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(unit -> Async<Result<'a, 'b>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "tryWith",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> Async<Result<'a, 'b>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(unit -> Async<Result<'a, 'b>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, 'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<Option<'b>, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "absorbR",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<Result<Result<'a, 'b>, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "Async<Result<Result<'a, 'c>, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<Async<Result<'a, 'b>>, 'c>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "Async<Result<Option<'a>, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<Async<Result<'a, 'b>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sequenceSeqS",
          "isField": 0,
          "type": {
            "tName": "(IEnumerable<Async<Result<'b, 'a>>> -> Async<Result<IEnumerable<'b>, 'c>>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> bool)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "Async<Result<IEnumerable<'a>, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<Async<Result<'a, 'b>>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "Async<Result<IEnumerable<'b>, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<Result<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'c, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, 'b>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<Result<'c, 'b>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "whileLoop",
          "isField": 0,
          "type": {
            "tName": "Async<Result<unit, 'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(unit -> Async<Result<unit, 'a>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getResult",
          "isField": 0,
          "type": {
            "tName": "Async<Result<Result<'a, 'b>, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mapP",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, FsRoot.Library+ResultMessage<'c>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'c>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'a, 'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bindP",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, FsRoot.Library+ResultMessage<'c>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<Result<'b, FsRoot.Library+ResultMessage<'c>>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'c>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<Result<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'a, 'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'b, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterS",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'b, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtnR",
          "isField": 0,
          "type": {
            "tName": "Async<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'c>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'b>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mapError",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'c, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'c, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResultBuilder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResultBuilderP",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+Extensions",
      "methods": [
        {
          "meName": "AsyncResultBuilderP.Combine",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, FsRoot.Library+ResultMessage<'a>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultBuilderP",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<Result<'b, FsRoot.Library+ResultMessage<'a>>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultBuilderP.Bind",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, FsRoot.Library+ResultMessage<'a>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultBuilderP",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<Result<'b, FsRoot.Library+ResultMessage<'a>>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultBuilderP.ReturnFrom",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'a>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultBuilderP",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultBuilder.Combine",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultBuilder",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<Result<'b, 'c>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultBuilder.Bind",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultBuilder",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<Result<'b, 'c>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultBuilder.ReturnFrom",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultBuilder",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResultM+AsyncResultMBuilder",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResultM+Operators",
      "methods": [
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterEqualsGreater",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'d, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> Async<FsRoot.Library+Monads+ResultM<'d, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterMinusGreater",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'d, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> 'd)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'c, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'c, 'b>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_BarGreaterGreater",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'c, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> 'c)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResultM",
      "methods": [
        {
          "meName": "getResultM",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<FsRoot.Library+Monads+ResultM<'a, 'b>, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "absorbO",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> FsRoot.Library+ResultMessage<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<Option<'b>, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "absorbR",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<FsRoot.Library+Monads+ResultM<'a, 'b>, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertR",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<Result<'a, 'c>, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<Async<FsRoot.Library+Monads+ResultM<'a, 'b>>, 'c>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "insertO",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<Option<'a>, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<Async<FsRoot.Library+Monads+ResultM<'a, 'b>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<IEnumerable<'a>, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<Async<FsRoot.Library+Monads+ResultM<'a, 'b>>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<IEnumerable<'b>, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'c, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'c, 'b>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "whileLoop",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<unit, 'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(unit -> Async<FsRoot.Library+Monads+ResultM<unit, 'a>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bindR",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+ResultM<'a, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindrA",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'c>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bindM",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> Async<FsRoot.Library+Monads+ResultM<'a, 'b>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindr",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'c>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterpA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterpS",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterS",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "errorMsgf",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PrintfFormat<'a, unit, string, Async<FsRoot.Library+Monads+ResultM<'b, 'c>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtnrA",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'b>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtnM",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<unit, 'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "rtnR",
          "isField": 0,
          "type": {
            "tName": "Async<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "rtnr",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "freeMessage",
          "isField": 0,
          "type": {
            "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'c>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, FsRoot.Library+ResultMessage<'b>>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mapError",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'c, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> FsRoot.Library+ResultMessage<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'c, 'a>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads+AsyncResultMAutoOpen",
      "methods": [
        {
          "meName": "AsyncResultMBuilder.Combine",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultM+AsyncResultMBuilder",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultMBuilder.Bind",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'b, 'c>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultM+AsyncResultMBuilder",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<FsRoot.Library+Monads+ResultM<'b, 'c>>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "AsyncResultMBuilder.ReturnFrom",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+AsyncResultM+AsyncResultMBuilder",
              "asm": "FSharpStation"
            },
            {
              "tName": "Async<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "asyncResultM",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+AsyncResultM+AsyncResultMBuilder",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Monads",
      "methods": [
        {
          "meName": "asyncResultP",
          "isField": 1,
          "type": {
            "tName": "AsyncResultBuilderP",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "asyncResult",
          "isField": 1,
          "type": {
            "tName": "AsyncResultBuilder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "|OkM|ErrorM|",
          "isField": 0,
          "type": {
            "tName": "FSharpChoice<('a * FsRoot.Library+ResultMessage<'b>), FsRoot.Library+ResultMessage<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "ResultM<'a, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ErrorM",
          "isField": 0,
          "type": {
            "tName": "ResultM<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "OkMWithMsg",
          "isField": 0,
          "type": {
            "tName": "ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+ResultMessage<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "OkM",
          "isField": 0,
          "type": {
            "tName": "ResultM<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+String",
      "methods": [
        {
          "meName": "thousands",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "|WhiteSpace|_|",
          "isField": 0,
          "type": {
            "tName": "Option<unit>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "|EndsWith|_|",
          "isField": 0,
          "type": {
            "tName": "Option<string>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "|StartsWith|_|",
          "isField": 0,
          "type": {
            "tName": "Option<string>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "skipLastLine",
          "isField": 1,
          "type": {
            "tName": "(string -> string)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "indentStr",
          "isField": 0,
          "type": {
            "tName": "(string -> string)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "unindentStr",
          "isField": 1,
          "type": {
            "tName": "(string -> string)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "indent",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<string>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "unindent",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<string>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "skipFirstLine",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "append",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "right",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "left",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "trim",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "contains",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "delimitedO",
          "isField": 0,
          "type": {
            "tName": "Option<(string * string * string)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "splitInTwoO",
          "isField": 0,
          "type": {
            "tName": "Option<(string * string)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "splitByChar",
          "isField": 0,
          "type": {
            "tName": "string[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "Char",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+ParseO",
      "methods": [
        {
          "meName": "|Guid|_|",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Guid>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Double|_|",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Double>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Single|_|",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Single>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Int64|_|",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Int64>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Int|_|",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<int>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Date|_|",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<DateTime>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseGuidO",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Guid>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseDoubleO",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Double>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseSingleO",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Single>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseInt64O",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<Int64>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseIntO",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<int>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseDateO",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<DateTime>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parseDateO2",
          "isField": 1,
          "type": {
            "tName": "(string -> Option<DateTime>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "tryParseWith",
          "isField": 0,
          "type": {
            "tName": "('a -> Option<'b>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> (bool * 'b))",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+MailboxProcessorExt",
      "methods": [
        {
          "meName": "PostAndAsyncReply",
          "isField": 0,
          "type": {
            "tName": "Async<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FSharpMailboxProcessor<(FSharpAsyncReplyChannel<'a> * 'b)>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "Option<int>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Mailbox+StateFull",
      "methods": [
        {
          "meName": "applyReply",
          "isField": 0,
          "type": {
            "tName": "Async<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> ('a * 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "applyReplyA",
          "isField": 0,
          "type": {
            "tName": "Async<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<('a * 'b)>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "applyA",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "('a -> Async<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "setState",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getStateA",
          "isField": 0,
          "type": {
            "tName": "Async<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Mailbox",
      "methods": [
        {
          "meName": "defHandler",
          "isField": 0,
          "type": {
            "tName": "'b",
            "asm": ""
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "stateFull",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<('a -> Async<'a>)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> ('a -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "fold",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> ('a -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> ('b -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "foldA",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> ('a -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> ('b -> Async<'a>))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "call",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<(FSharpAsyncReplyChannel<'b> * 'a)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "callA",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<(FSharpAsyncReplyChannel<'b> * 'a)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iter",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterA",
          "isField": 0,
          "type": {
            "tName": "FSharpMailboxProcessor<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(Exception -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> Async<unit>)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+ResourceAgentState`2",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+ResourceAgent`2",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+AgentReaderM",
      "methods": [
        {
          "meName": "runSameConfig",
          "isField": 0,
          "type": {
            "tName": "Async<Result<('c * FsRoot.Library+ResultMessage<'d>), FsRoot.Library+ResultMessage<'d>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResourceAgent<'a, 'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, (FsRoot.Library+ResourceAgent<'a, 'b> * 'b), 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "run",
          "isField": 0,
          "type": {
            "tName": "Async<Result<('c * FsRoot.Library+ResultMessage<'d>), FsRoot.Library+ResultMessage<'d>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, ('a * 'b), 'd>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ofResourceRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, (FsRoot.Library+ResourceAgent<'b, 'd> * 'd), 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionAsyncM<'a, 'b, 'c>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "createAgentRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<'c, (FsRoot.Library+ResourceAgent<'a, 'd> * 'd), 'e>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> ('b -> Async<'c>))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+CommArgRoot+CommArgId",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+CommArgRoot+CommArg",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+CommArgRoot+CommArgCollection`1",
      "methods": [
        {
          "meName": "op_Addition",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "op_Addition",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>)",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_Addition",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>)>",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+CommArgRoot+TypedCommArg`1",
      "methods": [
        {
          "meName": "op_DivisionAssignment",
          "isField": 0,
          "type": {
            "tName": "(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.Library+CommArgRoot+CommArgCollection<'b> -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_DivisionAssignment",
          "isField": 0,
          "type": {
            "tName": "(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "op_DivisionAssignment",
          "isField": 0,
          "type": {
            "tName": "(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+CommArgRoot+CommArgModule",
      "methods": [
        {
          "meName": "getFloatR",
          "isField": 0,
          "type": {
            "tName": "Result<Double, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<Double>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getBoolR",
          "isField": 0,
          "type": {
            "tName": "Result<bool, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<bool>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getStringR",
          "isField": 0,
          "type": {
            "tName": "Result<string, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<string>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getIntR",
          "isField": 0,
          "type": {
            "tName": "Result<int, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<int>",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getValueR",
          "isField": 0,
          "type": {
            "tName": "Result<'a, 'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Object",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getVRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "argumentTRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArg",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "argumentRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArg",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "NewFloat",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<Double>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "(Double -> string)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "NewBool",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<bool>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "(bool -> string)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "NewString",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<string>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "(string -> string)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "NewInt",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<int>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "(int -> string)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "New",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+CommArgRoot+CommArgCollection",
      "methods": [
        {
          "meName": "addPairsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>)>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "appendRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "addPairs",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>)>",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "append",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "addPair",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArg",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getBoolR",
          "isField": 0,
          "type": {
            "tName": "Result<bool, FsRoot.Library+ResultMessage<'a>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<bool>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "buildArgRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getBoolRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<bool, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<bool>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getFloatRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Double, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<Double>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getStringRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getIntRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<int, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<int>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getValueRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<'a, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "findArgRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<(FsRoot.Library+CommArgRoot+CommArg * Object), FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryBuildArgORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<string>, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetFloatORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<Double>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<Double>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetBoolORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<bool>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<bool>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetStringORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<string>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetIntORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<int>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<int>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetValueORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<'a>, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryFindArgORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<(FsRoot.Library+CommArgRoot+CommArg * Object)>, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryFindArgO",
          "isField": 0,
          "type": {
            "tName": "Option<(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'b>, 'b>)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "argumentNotFound",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+ResultMessage<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "unit",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "containsAnyOfRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<bool, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Set<FsRoot.Library+CommArgRoot+CommArgId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "argumentsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<string>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "((FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>) -> bool)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "filterRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>)>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "((FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>) -> bool)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "existsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<bool, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "((FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>) -> bool)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "argsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<(FsRoot.Library+CommArgRoot+CommArg * FsRoot.Library+Monads+FusionM<Object, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'a>)>, FsRoot.Library+CommArgRoot+CommArgCollection<'a>, 'b>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "contains",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+CommArgRoot+TypedCommArg<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+CommArgRoot+CommArgCollection<'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "trueForAll",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+CommArgRoot",
      "methods": [
        {
          "meName": "CommArgCollection",
          "isField": 0,
          "type": {
            "tName": "CommArgCollection<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<(CommArg * FsRoot.Library+Monads+FusionM<Object, CommArgCollection<'a>, 'a>)>",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+FsCode",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+FsCodeModule+PreproDirective",
      "methods": [
        {
          "meName": "_unique_NoPrepo",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_PrepoEndIf",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_PrepoElse",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+FsCodeModule+PrepState",
      "methods": [
        {
          "meName": "_unique_LevelZero",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+FsCodeModule",
      "methods": [
        {
          "meName": "getSourceDir",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "separateDirectives",
          "isField": 0,
          "type": {
            "tName": "(string[] * string[] * string[] * string[] * Option<string>)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<PreproDirective>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getTopDirectives",
          "isField": 0,
          "type": {
            "tName": "(string[] * PreproDirective[])",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<(string * PreproDirective)>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "filterPreps",
          "isField": 0,
          "type": {
            "tName": "PreproDirective[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<PreproDirective>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "prev",
          "isField": 0,
          "type": {
            "tName": "PrepState",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PrepState",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isActive",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "PrepState",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "separatePrepros",
          "isField": 0,
          "type": {
            "tName": "(string * PreproDirective)[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "extractDefines",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+FsCode",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library+SnippetId",
      "methods": [
        {
          "meName": "get_Empty",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+SnippetId",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Snippet",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+SnippetReference",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+SnippetCollection",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+SnippetModule",
      "methods": [
        {
          "meName": "codeFsxRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "fastCodeRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<(string * ((FsRoot.Library+SnippetId * string) * (int * int * int))[]), FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "fastReducedRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[]), FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "reducedOthersORmMemo",
          "isField": 0,
          "type": {
            "tName": "((bool * FsRoot.Library+SnippetId * Set<FsRoot.Library+SnippetId>) -> FsRoot.Library+Monads+FusionM<Option<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[])>, FsRoot.Library+SnippetCollection, 'a>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "reducedOthersORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[])>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            },
            {
              "tName": "Set<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "finishCode",
          "isField": 0,
          "type": {
            "tName": "(string * ((FsRoot.Library+SnippetId * string) * (int * int * int))[])",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+SnippetId * string * int * int)[]",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+FsCodeModule+PreproDirective[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "reducedCodeRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[]), FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+Snippet>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addSeps",
          "isField": 0,
          "type": {
            "tName": "((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[])",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+SnippetId * string * int * int)[]",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+FsCodeModule+PreproDirective[]",
              "asm": "netstandard"
            },
            {
              "tName": "(FsRoot.Library+SnippetId * string * int * int)[]",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+FsCodeModule+PreproDirective[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "separateCodeRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[]), FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "ancestorsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<List<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "levelRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<int, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "indentRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<int, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "propertyHierORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<(FsRoot.Library+Snippet * (string * string))>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "modifiedRecRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<bool, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "predsGenerationRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<DateTime, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "uniquePredsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<List<FsRoot.Library+SnippetId>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "predsLRmMemo",
          "isField": 0,
          "type": {
            "tName": "(FsRoot.Library+SnippetId -> FsRoot.Library+Monads+FusionM<List<FsRoot.Library+SnippetId>, FsRoot.Library+SnippetCollection, 'a>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "predsLRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<List<FsRoot.Library+SnippetId>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetFromRefORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetReference",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetFromPathORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "pathRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<List<FsRoot.Library+SnippetId>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetNameRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<FsRoot.Library+Snippet, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "prepareCodeRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "orderedRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "childrenRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "modifiedRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<bool, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "maxGenerationRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<DateTime, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "predecessorsRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "parentORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetORm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<FsRoot.Library+Snippet>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "propertyPairO",
          "isField": 0,
          "type": {
            "tName": "Option<(string * string)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "propertyPair",
          "isField": 0,
          "type": {
            "tName": "(string * string)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "tieFighter",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "propertyO",
          "isField": 0,
          "type": {
            "tName": "Option<string>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "nameSanitized",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetName",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "defaultSnippet",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Snippet",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "New",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Snippet",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "Option<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getNextModified",
          "isField": 0,
          "type": {
            "tName": "DateTime",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+Hole",
      "methods": [
        {
          "meName": "_unique_Hole",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library+TreeReader+Node`3",
      "methods": []
    },
    {
      "moName": "FsRoot.Library+TreeReader",
      "methods": [
        {
          "meName": "removeNodeOutdentChildren",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "outdentNode",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "indentNode",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addChild",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "moveToSibling2",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "moveToSibling",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "tryFindId",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "tryFind",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Option<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(Node<'a, 'b, 'c> -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addSibling",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addToParent",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<Node<'a, 'b, 'c>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "(Node<'a, 'b, 'c> -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addNodeToSeq",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<Node<'a, 'b, 'c>>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "(Node<'a, 'b, 'c> -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "removeNodes",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<List<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(Node<'a, 'b, 'c> -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "removeNode",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<Node<'a, 'b, 'c>>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Node<'a, 'b, 'c>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "listNodes",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<IEnumerable<(Node<'a, 'b, 'c> * int)>, 'b, 'c>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "IEnumerable<Node<'a, 'b, 'c>>",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library",
      "methods": [
        {
          "meName": "String.Right",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "String.Left",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "String.Substring2",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "delayedVar",
          "isField": 0,
          "type": {
            "tName": "Var<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "Var<'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "delayed",
          "isField": 0,
          "type": {
            "tName": "('a -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "delayedA",
          "isField": 0,
          "type": {
            "tName": "('a -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> Async<unit>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "print",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "Error",
          "isField": 0,
          "type": {
            "tName": "Result<'b, 'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Promise",
      "methods": [
        {
          "meName": "ofAsyncResult",
          "isField": 0,
          "type": {
            "tName": "WebSharper.JavaScript.Promise<'a>",
            "asm": "WebSharper.JavaScript"
          },
          "parms": [
            {
              "tName": "Async<Result<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+PromiseM",
      "methods": [
        {
          "meName": "ofAsyncResultM",
          "isField": 0,
          "type": {
            "tName": "WebSharper.JavaScript.Promise<'a>",
            "asm": "WebSharper.JavaScript"
          },
          "parms": [
            {
              "tName": "Async<FsRoot.Library+Monads+ResultM<'a, 'b>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+View",
      "methods": [
        {
          "meName": "sequenceListApp",
          "isField": 0,
          "type": {
            "tName": "View<List<'a>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "List<View<'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "traverseListApp",
          "isField": 0,
          "type": {
            "tName": "View<List<'b>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "('a -> View<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "List<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_LessMultiplyGreater",
          "isField": 0,
          "type": {
            "tName": "View<'b>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<('a -> 'b)>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "View<'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "sequenceSeq",
          "isField": 0,
          "type": {
            "tName": "View<IEnumerable<'a>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "IEnumerable<View<'a>>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "traverseSeq",
          "isField": 0,
          "type": {
            "tName": "View<IEnumerable<'b>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "('a -> View<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_GreaterGreaterEquals",
          "isField": 0,
          "type": {
            "tName": "View<'b>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<'a>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "('a -> View<'b>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "View<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "View<'b>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "View<'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "bind",
          "isField": 0,
          "type": {
            "tName": "View<'b>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "('a -> View<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "View<'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "insertWO",
          "isField": 0,
          "type": {
            "tName": "View<Option<'a>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "Option<View<'a>>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Var",
      "methods": [
        {
          "meName": "lensView",
          "isField": 0,
          "type": {
            "tName": "Var<'b>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> ('b -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "View<'c>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Var<'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "freshId",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "counter",
          "isField": 1,
          "type": {
            "tName": "int",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "set_counter",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+ListModel",
      "methods": [
        {
          "meName": "MapLens",
          "isField": 0,
          "type": {
            "tName": "View<IEnumerable<'c>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "Option<View<('a -> bool)>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> (Var<'a> -> 'c))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "ListModel<'b, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "refreshLM",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "ListModel<'a, 'b>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "IEnumerable<'b>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "currentLens",
          "isField": 0,
          "type": {
            "tName": "Var<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "View<Option<'b>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "ListModel<'b, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "currentLensUpd'",
          "isField": 0,
          "type": {
            "tName": "Var<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "View<Option<'b>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "('a -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "ListModel<'b, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "currentLensUpd",
          "isField": 0,
          "type": {
            "tName": "Var<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "Var<Option<'b>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "('a -> ('b -> unit))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "ListModel<'b, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "lensDef",
          "isField": 0,
          "type": {
            "tName": "Var<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "ListModel<'b, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "docLensMapViewO",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "(IEnumerable<'a> -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('c -> (Var<'a> -> 'd))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "ListModel<'c, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "docLensMapView",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(IEnumerable<'a> -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('c -> (Var<'a> -> 'd))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "ListModel<'c, 'a>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "lensIntoO'",
          "isField": 0,
          "type": {
            "tName": "Var<'c>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "ListModel<'a, 'b>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "(Option<'b> -> 'c)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> ('c -> 'b))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "View<'c>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "lensInto'",
          "isField": 0,
          "type": {
            "tName": "Var<'c>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "ListModel<'a, 'b>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "('b -> 'c)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> ('c -> 'b))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "View<'c>",
              "asm": "WebSharper.UI"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Pojo",
      "methods": [
        {
          "meName": "newPojoOpt",
          "isField": 0,
          "type": {
            "tName": "WebSharper.JSObject",
            "asm": "WebSharper.Main"
          },
          "parms": [
            {
              "tName": "IEnumerable<(string * Option<Object>)>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "newPojo",
          "isField": 0,
          "type": {
            "tName": "WebSharper.JSObject",
            "asm": "WebSharper.Main"
          },
          "parms": [
            {
              "tName": "IEnumerable<(string * 'a)>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addProp",
          "isField": 0,
          "type": {
            "tName": "WebSharper.JSObject",
            "asm": "WebSharper.Main"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "WebSharper.JSObject",
              "asm": "WebSharper.Main"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor+Position",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor+AnnotationType",
      "methods": [
        {
          "meName": "_unique_Hint",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_Info",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_Warning",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_Error",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor+Annotation",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor+Completion",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor+GenEditorHook`1",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor+GenEditor`1",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+GenEditor",
      "methods": [
        {
          "meName": "generateDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "GenEditor<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindVarEditor",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(('a -> unit) -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(unit -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Var<'b>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "newVarO",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "GenEditorHook<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Var<Option<string>>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "newText",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "GenEditorHook<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "newVar",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "GenEditorHook<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "var",
          "isField": 0,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "GenEditor<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "disabled",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "View<bool>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "GenEditor<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "onRender",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(GenEditor<'a> -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "GenEditor<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "onChange",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Option<(GenEditor<'a> -> (string -> unit))>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "GenEditor<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setVar",
          "isField": 0,
          "type": {
            "tName": "GenEditor<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "GenEditor<'a>",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Serializer",
      "methods": [
        {
          "meName": "serLMdField",
          "isField": 0,
          "type": {
            "tName": "(string * ('a -> string) * ('a -> (Object -> 'a)))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> ListModel<'b, 'c>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('c -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'c)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serVarField",
          "isField": 0,
          "type": {
            "tName": "(string * ('a -> string) * ('a -> (Object -> 'a)))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> Var<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serMap",
          "isField": 0,
          "type": {
            "tName": "((Map<'a, 'b> -> string) * (Object -> Map<'a, 'b>))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serDup",
          "isField": 0,
          "type": {
            "tName": "((('a * 'b) -> string) * (Object -> ('a * 'b)))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serOpt",
          "isField": 0,
          "type": {
            "tName": "((Option<'a> -> string) * (Object -> Option<'a>))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serSet",
          "isField": 0,
          "type": {
            "tName": "((Set<'a> -> string) * (Object -> Set<'a>))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serLst",
          "isField": 0,
          "type": {
            "tName": "((List<'a> -> string) * (Object -> List<'a>))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serArr",
          "isField": 0,
          "type": {
            "tName": "(('a[] -> string) * (Object -> 'a[]))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serSeq",
          "isField": 0,
          "type": {
            "tName": "((IEnumerable<'a> -> string) * (Object -> IEnumerable<'a>))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "('a -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serFieldO",
          "isField": 0,
          "type": {
            "tName": "(string * ('a -> Option<string>) * ('a -> ('c -> 'a)))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> Option<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Option<'b> -> ('a -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serField",
          "isField": 0,
          "type": {
            "tName": "(string * ('a -> Option<string>) * ('a -> (Object -> 'a)))",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> ('a -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(Object -> 'b)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serDate",
          "isField": 1,
          "type": {
            "tName": "((DateTime -> string) * (Object -> DateTime))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serString",
          "isField": 1,
          "type": {
            "tName": "((string -> string) * (Object -> string))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serBool",
          "isField": 1,
          "type": {
            "tName": "((bool -> string) * (Object -> bool))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serInt",
          "isField": 1,
          "type": {
            "tName": "((int -> string) * (Object -> int))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serFloat",
          "isField": 1,
          "type": {
            "tName": "((Double -> string) * (Object -> Double))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "sprintA",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<string>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "deserGuid",
          "isField": 1,
          "type": {
            "tName": "(Guid -> Guid)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Exists|_|",
          "isField": 0,
          "type": {
            "tName": "Option<'b>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "ifUndefF",
          "isField": 0,
          "type": {
            "tName": "'b",
            "asm": ""
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "ifUndef",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+REGEX",
      "methods": [
        {
          "meName": "|Identifier|_|",
          "isField": 0,
          "type": {
            "tName": "Option<string>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getEndWord",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getStartWord",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Hoverable+Hoverable",
      "methods": [
        {
          "meName": "get_Demo",
          "isField": 0,
          "type": {
            "tName": "Elt",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "Content$3203$81",
          "isField": 0,
          "type": {
            "tName": "Elt",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "Elt",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "get_Attributes$3199$69",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+Hoverable+Hoverable",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "get_Attributes$3198$69",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+Hoverable+Hoverable",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "New",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Hoverable+Hoverable",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Hoverable",
      "methods": [
        {
          "meName": "hoverable",
          "isField": 0,
          "type": {
            "tName": "Elt",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "Elt",
              "asm": "WebSharper.UI"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+ResizeObserver",
      "methods": [
        {
          "meName": "addResizeObserver",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(unit -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "dimsChanged",
          "isField": 0,
          "type": {
            "tName": "(unit -> bool)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "domRect2Tuple",
          "isField": 0,
          "type": {
            "tName": "(Double * Double * Double * Double)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.DomRect",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "observers",
          "isField": 1,
          "type": {
            "tName": "List<Object>",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "set_observers",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "List<Object>",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+WebComponent+WcTabStrip+WcTabStripT",
      "methods": [
        {
          "meName": "Constructor",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+WebComponent+WcTabStrip",
      "methods": [
        {
          "meName": "init",
          "isField": 1,
          "type": {
            "tName": "Lazy<unit>",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "tabStrip$3347$64",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "Var<int>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "tabStrip",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "Var<int>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "IEnumerable<(string * 'a)>",
              "asm": "netstandard"
            },
            {
              "tName": "Doc",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "css",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+WebComponent+WcSplitter+WcSplitterT",
      "methods": [
        {
          "meName": "Constructor",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+WebComponent+WcSplitter",
      "methods": [
        {
          "meName": "init",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(View<string> -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.MouseEvent -> unit) -> (View<string> -> Doc)))))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(View<string> -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.MouseEvent -> unit) -> (View<string> -> Doc)))))",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "layoutVertical",
          "isField": 1,
          "type": {
            "tName": "(View<string> -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.MouseEvent -> unit) -> (View<string> -> Doc)))))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "set_layoutVertical",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(View<string> -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.MouseEvent -> unit) -> (View<string> -> Doc)))))",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "layoutHorizontal",
          "isField": 1,
          "type": {
            "tName": "(View<string> -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.MouseEvent -> unit) -> (View<string> -> Doc)))))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "set_layoutHorizontal",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(View<string> -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.Element -> unit) -> ((WebSharper.JavaScript.Dom.MouseEvent -> unit) -> (View<string> -> Doc)))))",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+WebComponent",
      "methods": [
        {
          "meName": "defineWebComponent",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "'c",
              "asm": ""
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Position",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Range",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Uri",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Location",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+FindMatch",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+WordAtPosition",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Model",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+MarkDownString",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+MarkerSeverity",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+MarkerData",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+CompletionItemKind",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+CompletionItem",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Hover",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+Editor",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco+MonacoConfig",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+Monaco",
      "methods": [
        {
          "meName": "newVarO",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Var<Option<string>>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "newText",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "var",
          "isField": 0,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "disabled",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "View<bool>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "onRender",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(Editor -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "onChange",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(string -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setVar",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "render$3716$48",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "render",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "MonacoConfig",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "loader",
          "isField": 1,
          "type": {
            "tName": "Async<unit>",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "newVar",
          "isField": 0,
          "type": {
            "tName": "MonacoConfig",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+MonacoGenAdapter+MonacoRT",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+MonacoGenAdapter+CompletionItemProvider",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+MonacoGenAdapter+HoverProvider",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+MonacoGenAdapter+DefinitionProvider",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+MonacoGenAdapter",
      "methods": [
        {
          "meName": "newVar",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+GenEditor+GenEditor<FsRoot.LibraryJS+Monaco+Editor>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "newRT",
          "isField": 0,
          "type": {
            "tName": "MonacoRT",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "newHook",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+GenEditor+GenEditorHook<FsRoot.LibraryJS+Monaco+Editor>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "showAnnotations",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<FsRoot.LibraryJS+GenEditor+Annotation>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getSelect",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getWordAt",
          "isField": 0,
          "type": {
            "tName": "Option<(string * FsRoot.LibraryJS+GenEditor+Position)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+GenEditor+Position",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setValue",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getValue",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setUri",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getUri",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "generateDoc$3858$48",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.LibraryJS+Monaco+Editor -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.LibraryJS+GenEditor+GenEditor<_>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "generateDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+GenEditor+GenEditor<'a>",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.LibraryJS+Monaco+Editor -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "convertGlyphChar",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Monaco+CompletionItemKind",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "posFromIndex",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+GenEditor+Position",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "indexFromPos",
          "isField": 0,
          "type": {
            "tName": "int",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+GenEditor+Position",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "posEd2Gen",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+GenEditor+Position",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+Monaco+Position",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "posGen2Ed",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Monaco+Position",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+GenEditor+Position",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindEditor",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.LibraryJS+Monaco+Editor -> Option<'a>)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mapEditor",
          "isField": 0,
          "type": {
            "tName": "Option<'a>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.LibraryJS+Monaco+Editor -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "iterEditor",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "MonacoRT",
              "asm": "FSharpStation"
            },
            {
              "tName": "(FsRoot.LibraryJS+Monaco+Editor -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+AppFrameworkTemplate",
      "methods": [
        {
          "meName": "html",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlgElemName",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInName",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInVar",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInView",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+DocFunction",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInDoc",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+ActFunction",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInAction",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInQuery",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugIn",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+PlugInBuilder",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+TextData",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+Fun`2",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+Val`1",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+P`1",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+Val",
      "methods": [
        {
          "meName": "textAtt",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "textDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "addAtt",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<IEnumerable<Attr>>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Attr",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<IEnumerable<Attr>>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "addDoc",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<IEnumerable<Doc>>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Doc",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<IEnumerable<Doc>>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "toView",
          "isField": 0,
          "type": {
            "tName": "View<'a>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "sequenceListApp",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<List<'a>>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "List<FsRoot.LibraryJS+AppFramework+Val<'a>>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "traverseListApp",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<List<'b>>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> FsRoot.LibraryJS+AppFramework+Val<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "List<'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "op_LessMultiplyGreater",
          "isField": 1,
          "type": {
            "tName": "(FsRoot.LibraryJS+AppFramework+Val<('a -> 'b)> -> (FsRoot.LibraryJS+AppFramework+Val<'a> -> FsRoot.LibraryJS+AppFramework+Val<'b>))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "apply",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<('a -> 'b)>",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "rtn",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "map",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Val<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+Val<'a>",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+AAttr",
      "methods": [
        {
          "meName": "_unique_AEmpty",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+Extract0+TextType",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+Extract0",
      "methods": [
        {
          "meName": "extractTextD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> View<string>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "extractAtsD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> IEnumerable<Attr>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getTextValD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> FsRoot.LibraryJS+AppFramework+Val<string>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getTextValFromSeqD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(List<TextType> -> FsRoot.LibraryJS+AppFramework+Val<string>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "extractDocD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getDocFromTextTypesD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(List<TextType> -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getTextActViewFromReferenceD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> View<FSharpChoice<string, FsRoot.LibraryJS+AppFramework+PlugInAction>>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getDocFromReferenceD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getTextData",
          "isField": 0,
          "type": {
            "tName": "List<TextType>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getOneTextData",
          "isField": 0,
          "type": {
            "tName": "List<TextType>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getTextActViewFromReference",
          "isField": 0,
          "type": {
            "tName": "View<FSharpChoice<string, FsRoot.LibraryJS+AppFramework+PlugInAction>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getDocFromReference",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework+ListModelData`2",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+AppFramework",
      "methods": [
        {
          "meName": "mapVarO",
          "isField": 0,
          "type": {
            "tName": "Var<Option<'a>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "('a -> Option<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "('b -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Var<Option<'b>>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "lensStrO",
          "isField": 0,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "Var<Option<string>>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "concatMainDocs",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "IEnumerable<PlugIn>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "op_Dereference",
          "isField": 0,
          "type": {
            "tName": "P<Val<'a>>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getMainDoc",
          "isField": 1,
          "type": {
            "tName": "Lazy<Doc>",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "splitterPerc",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> (string -> (string -> (string -> Doc)))))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "addPlugIn",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugIn",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "select",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> (string -> (string -> Doc))))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "delayAction",
          "isField": 1,
          "type": {
            "tName": "(Object -> (Object -> unit))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "callAction",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "callAction0",
          "isField": 1,
          "type": {
            "tName": "(string -> (Object -> (Object -> unit)))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "trigActChange",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "trigAct",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "dragSplitter",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "dragSplitter0",
          "isField": 1,
          "type": {
            "tName": "((string * WebSharper.JavaScript.Dom.MouseEvent) -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "draggingEvent",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "WebSharper.JavaScript.Dom.MouseEvent",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "getValDirect",
          "isField": 1,
          "type": {
            "tName": "(string -> string)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "setVarDirectD",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "setVarDirect",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "setVarDirect0",
          "isField": 1,
          "type": {
            "tName": "((Object * Object) -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "setVar",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "setVar0",
          "isField": 1,
          "type": {
            "tName": "((Object * Object) -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "docReference",
          "isField": 1,
          "type": {
            "tName": "(string -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "|Lazy|",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "Lazy<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "htmlDoc",
          "isField": 1,
          "type": {
            "tName": "(string -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "textArea",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "input",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "inputLabel",
          "isField": 1,
          "type": {
            "tName": "(string -> (string -> (string -> Doc)))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "inputFile$5090$67",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInAction",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "inputFile$5089$67",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "inputFile",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "docWithVar",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Var<string> -> Doc)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "depWithExtracts",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "(((string -> IEnumerable<Attr>) * (string -> Doc) * (string -> View<string>)) -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getParmRef",
          "isField": 0,
          "type": {
            "tName": "(PlugInName * PlgElemName)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "runDef",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defPlugInName",
          "isField": 1,
          "type": {
            "tName": "PlugInName",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "extractAttD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> Attr)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "extractAtsD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> IEnumerable<Attr>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "extractDocD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "extractTextD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> View<string>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "run",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "errDocf",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "PrintfFormat<'a, unit, string, Doc>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "errDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getTextActViewD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> View<FSharpChoice<string, PlugInAction>>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getDocD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getDocwD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(string -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "currentPlugInNameD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<PlugInName>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "currentPlugInNameDef",
          "isField": 1,
          "type": {
            "tName": "PlugInName",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "valToAttr",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "Val<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "valToStyle",
          "isField": 0,
          "type": {
            "tName": "Attr",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "Val<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "choiceToString",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FSharpChoice<string, 'a>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "makeAViewDoc0",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "makeAViewDocL",
          "isField": 0,
          "type": {
            "tName": "Lazy<Doc>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "makeAViewDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "baseView",
          "isField": 1,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainX",
          "isField": 1,
          "type": {
            "tName": "Val<int>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "a11V",
          "isField": 1,
          "type": {
            "tName": "Var<int>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "add1",
          "isField": 0,
          "type": {
            "tName": "int",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "unwrapBindWrap",
          "isField": 0,
          "type": {
            "tName": "P<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "P<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "bindWrap",
          "isField": 0,
          "type": {
            "tName": "P<'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> P<'b>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+Depend+Depend<'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getAttrs",
          "isField": 0,
          "type": {
            "tName": "List<Attr>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getTextData",
          "isField": 0,
          "type": {
            "tName": "View<TextData>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getOneTextData",
          "isField": 0,
          "type": {
            "tName": "View<TextData>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "tryGetWoW",
          "isField": 0,
          "type": {
            "tName": "Option<View<string>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetVoV",
          "isField": 0,
          "type": {
            "tName": "Option<Var<string>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetDoc",
          "isField": 0,
          "type": {
            "tName": "Option<PlugInDoc>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetQry",
          "isField": 0,
          "type": {
            "tName": "Option<PlugInQuery>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetAct",
          "isField": 0,
          "type": {
            "tName": "Option<PlugInAction>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetViw",
          "isField": 0,
          "type": {
            "tName": "Option<PlugInView>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetVar",
          "isField": 0,
          "type": {
            "tName": "Option<PlugInVar>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetPlugIn",
          "isField": 0,
          "type": {
            "tName": "Option<PlugIn>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetWoWW",
          "isField": 0,
          "type": {
            "tName": "View<Option<string>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetVoVW",
          "isField": 0,
          "type": {
            "tName": "View<Option<Var<string>>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetDocW",
          "isField": 0,
          "type": {
            "tName": "View<Option<PlugInDoc>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetQryW",
          "isField": 0,
          "type": {
            "tName": "View<Option<PlugInQuery>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetActW",
          "isField": 0,
          "type": {
            "tName": "View<Option<PlugInAction>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetViwW",
          "isField": 0,
          "type": {
            "tName": "View<Option<PlugInView>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetVarW",
          "isField": 0,
          "type": {
            "tName": "View<Option<PlugInVar>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "tryGetPlugInW",
          "isField": 0,
          "type": {
            "tName": "View<Option<PlugIn>>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "plugin",
          "isField": 1,
          "type": {
            "tName": "PlugInBuilder",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "newDocF",
          "isField": 0,
          "type": {
            "tName": "PlugInDoc",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "DocFunction",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "newDocL",
          "isField": 0,
          "type": {
            "tName": "PlugInDoc",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "Lazy<DocFunction>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "newActF",
          "isField": 0,
          "type": {
            "tName": "PlugInAction",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "ActFunction",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "newAct",
          "isField": 0,
          "type": {
            "tName": "PlugInAction",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "(unit -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "newQry",
          "isField": 0,
          "type": {
            "tName": "PlugInQuery",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "(Object -> Object)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "newDoc0",
          "isField": 0,
          "type": {
            "tName": "PlugInDoc",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "(unit -> Doc)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "newDoc",
          "isField": 0,
          "type": {
            "tName": "PlugInDoc",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "Lazy<Doc>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "newViw",
          "isField": 0,
          "type": {
            "tName": "PlugInView",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "View<string>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "newVar",
          "isField": 0,
          "type": {
            "tName": "PlugInVar",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "PlgElemName",
              "asm": "FSharpStation"
            },
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "vertical$4568$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(WebSharper.JavaScript.Dom.MouseEvent -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "vertical$4567$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "vertical$4566$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "vertical",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(WebSharper.JavaScript.Dom.MouseEvent -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "View<string>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "horizontal$4560$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(WebSharper.JavaScript.Dom.MouseEvent -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "horizontal$4559$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "horizontal$4558$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "horizontal",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(WebSharper.JavaScript.Dom.MouseEvent -> unit)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "View<string>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "mainDoc$4549$42",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "getMainClientDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "getActualDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInDoc",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "AppFwkClient",
          "isField": 1,
          "type": {
            "tName": "Lazy<Doc>",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "renderQueries$4512$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInQuery",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "renderQueries",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "renderActions$4501$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInAction",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "renderActions",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "callFunction",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "ActFunction",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "renderDocs$4481$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInDoc",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "renderDocs",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "docParms",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "PlugInDoc",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "renderViews",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "renderVars",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "renderPlugIns$4440$35",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "renderPlugIns",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "currentPlugInV",
          "isField": 1,
          "type": {
            "tName": "Var<PlugIn>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "currentPlugInW",
          "isField": 1,
          "type": {
            "tName": "View<PlugIn>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "selectionPlugInO",
          "isField": 1,
          "type": {
            "tName": "Var<Option<PlugInName>>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "splitName",
          "isField": 0,
          "type": {
            "tName": "(string -> (PlugInName * PlgElemName))",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "PlugInName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defaultPlugIn",
          "isField": 0,
          "type": {
            "tName": "PlugIn",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "TemplateFileName",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "mainDocV",
          "isField": 1,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "plugIns",
          "isField": 1,
          "type": {
            "tName": "ListModel<PlugInName, PlugIn>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+LM",
      "methods": [
        {
          "meName": "addElements",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, 'b>",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<'b>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getDoc",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'b, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "('a -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "(unit -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<View<('a -> bool)>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(FsRoot.LibraryJS+AppFramework+ListModelData<'b, 'a> -> (View<Option<'b>> -> (Var<'a> -> 'c)))",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getDocFor",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "ListModel<'a, 'b>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "(unit -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<View<('b -> bool)>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(FsRoot.LibraryJS+AppFramework+ListModelData<'a, 'b> -> (View<Option<'a>> -> (Var<'b> -> 'c)))",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "getDocForW",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "View<ListModel<'a, 'b>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "('b -> 'a)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "(unit -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<View<('b -> bool)>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "(FsRoot.LibraryJS+AppFramework+ListModelData<'a, 'b> -> (View<Option<'a>> -> (Var<'b> -> 'c)))",
              "asm": "FSharp.Core"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+StartAppFramework",
      "methods": [
        {
          "meName": "startWith",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "startWithHtmlD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(unit -> unit)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "htmlD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<Object>",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+AppFrameworkUI",
      "methods": [
        {
          "meName": "failCreate",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "unit",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defAct",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugInAction",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "defViw",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugInView",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "defVar",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugInVar",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "defDoc",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugInDoc",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "defPlg",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugIn",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "showDoc$5637$35",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<Option<_>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<_, FsRoot.LibraryJS+AppFramework+PlugInDoc>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "showDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, FsRoot.LibraryJS+AppFramework+PlugInDoc>",
              "asm": "FSharpStation"
            },
            {
              "tName": "View<Option<'a>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Var<FsRoot.LibraryJS+AppFramework+PlugInDoc>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "showAct$5630$35",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<Option<_>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<_, FsRoot.LibraryJS+AppFramework+PlugInAction>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "showAct",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, FsRoot.LibraryJS+AppFramework+PlugInAction>",
              "asm": "FSharpStation"
            },
            {
              "tName": "View<Option<'a>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Var<FsRoot.LibraryJS+AppFramework+PlugInAction>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "showView$5618$35",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<Option<_>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<_, FsRoot.LibraryJS+AppFramework+PlugInView>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "showView",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, FsRoot.LibraryJS+AppFramework+PlugInView>",
              "asm": "FSharpStation"
            },
            {
              "tName": "View<Option<'a>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Var<FsRoot.LibraryJS+AppFramework+PlugInView>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "showVar$5606$35",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<Option<_>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<_, FsRoot.LibraryJS+AppFramework+PlugInVar>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "showVar",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, FsRoot.LibraryJS+AppFramework+PlugInVar>",
              "asm": "FSharpStation"
            },
            {
              "tName": "View<Option<'a>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Var<FsRoot.LibraryJS+AppFramework+PlugInVar>",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "showPlugIn$5594$35",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "View<Option<_>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<_, FsRoot.LibraryJS+AppFramework+PlugIn>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "showPlugIn",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+ListModelData<'a, FsRoot.LibraryJS+AppFramework+PlugIn>",
              "asm": "FSharpStation"
            },
            {
              "tName": "View<Option<'a>>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Var<FsRoot.LibraryJS+AppFramework+PlugIn>",
              "asm": "WebSharper.UI"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngine",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+LayoutEntry",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Token",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Measures",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ItemRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+VarRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ViwRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+TextVal",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+NodeRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+RefType",
      "methods": [
        {
          "meName": "_unique_RPlg",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_RAct",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_RViw",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_RVar",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_RDoc",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+SplitterDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ButtonDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+InputDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+TextAreaDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocFDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ConcatDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ElementDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+TemplateDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActDefs",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+VarDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ViwDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+VJSDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+PlgDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+Entry",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+EntryDef",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax",
      "methods": [
        {
          "meName": "createEntryO2",
          "isField": 0,
          "type": {
            "tName": "(string -> Option<Result<(string * Entry), string>>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "Dictionary<string, Entry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "createEntryO",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "(ItemRef -> (RefType * Option<Entry>))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "|R|_|",
          "isField": 0,
          "type": {
            "tName": "Option<ItemRef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryRef",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "RefType",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryPlg",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "PlgDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryVar",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "VarDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryVJS",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "VJSDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryView",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "ViwDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryActs",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "ActDefs",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryAct",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "ActDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryDoc",
          "isField": 0,
          "type": {
            "tName": "Option<EntryDef>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "DocDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "entryDef",
          "isField": 0,
          "type": {
            "tName": "EntryDef",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "Entry",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "templateDef",
          "isField": 0,
          "type": {
            "tName": "TemplateDef",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "ParmRef",
              "asm": "FSharpStation"
            },
            {
              "tName": "(string * VarRef)[]",
              "asm": "netstandard"
            },
            {
              "tName": "(string * ParmRef)[]",
              "asm": "netstandard"
            },
            {
              "tName": "(string * DocRef)[]",
              "asm": "netstandard"
            },
            {
              "tName": "(string * ActRef)[]",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Layout+Node",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Layout+Splitter",
      "methods": []
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule+Layout",
      "methods": [
        {
          "meName": "createLayoutDefinitions",
          "isField": 0,
          "type": {
            "tName": "(string * string[])",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "Node",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "extractNodes",
          "isField": 0,
          "type": {
            "tName": "Node",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "cleanSpaces",
          "isField": 0,
          "type": {
            "tName": "string[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "verticalSplit",
          "isField": 0,
          "type": {
            "tName": "Option<(string[] * string[] * FsRoot.LibraryJS+LayoutEngineModule+Measures)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "transpose",
          "isField": 0,
          "type": {
            "tName": "string[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "horizontalSplit",
          "isField": 0,
          "type": {
            "tName": "Option<(string[] * string[] * FsRoot.LibraryJS+LayoutEngineModule+Measures)>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "extractMeasuresO",
          "isField": 0,
          "type": {
            "tName": "Option<FsRoot.LibraryJS+LayoutEngineModule+Measures>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+LayoutEngineModule",
      "methods": [
        {
          "meName": "newLyt",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+LayoutEngine",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "refreshEntries",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "IEnumerable<LayoutEntry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "none",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getQueryEntries",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<FsRoot.LibraryJS+AppFramework+PlugInQuery>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<LayoutEntry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getActionEntries",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<FsRoot.LibraryJS+AppFramework+PlugInAction>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<LayoutEntry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getViewEntries",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<FsRoot.LibraryJS+AppFramework+PlugInView>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<LayoutEntry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getVarEntries",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<FsRoot.LibraryJS+AppFramework+PlugInVar>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<LayoutEntry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getDocEntries",
          "isField": 0,
          "type": {
            "tName": "IEnumerable<FsRoot.LibraryJS+AppFramework+PlugInDoc>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "IEnumerable<LayoutEntry>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getText",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "parseEntries",
          "isField": 0,
          "type": {
            "tName": "Result<(string * Syntax+Entry), string>[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "processText",
          "isField": 0,
          "type": {
            "tName": "'a[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(string -> Option<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "processLines",
          "isField": 0,
          "type": {
            "tName": "'a[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(string -> Option<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "createLines",
          "isField": 0,
          "type": {
            "tName": "(string[] * string[])",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getExtraLines",
          "isField": 0,
          "type": {
            "tName": "(string[] * string[])",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(string -> bool)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "notEmpty",
          "isField": 1,
          "type": {
            "tName": "(string -> bool)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "emptyLine",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "splitTokens",
          "isField": 0,
          "type": {
            "tName": "List<Token>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "doubleQuote",
          "isField": 0,
          "type": {
            "tName": "List<Token>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "List<Token>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "variableSplitter",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Double",
              "asm": "netstandard"
            },
            {
              "tName": "Double",
              "asm": "netstandard"
            },
            {
              "tName": "Double",
              "asm": "netstandard"
            },
            {
              "tName": "Doc",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Doc",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "fixedSplitter",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Double",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "Doc",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Doc",
              "asm": "WebSharper.UI"
            }
          ]
        },
        {
          "meName": "|Measures|_|",
          "isField": 0,
          "type": {
            "tName": "Option<Measures>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "splitInTwo",
          "isField": 0,
          "type": {
            "tName": "(string -> string[])",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Char",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "splitSemiColon",
          "isField": 1,
          "type": {
            "tName": "(string -> IEnumerable<string>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "splitChar",
          "isField": 0,
          "type": {
            "tName": "(string -> IEnumerable<string>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Char",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "|Var|Doc|View|ViewJS|Docs|Action|Nothing|",
          "isField": 0,
          "type": {
            "tName": "FSharpChoice`7<unit, unit, unit, unit, unit, unit, unit>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "|PlugIn|Button|Input|TextArea|Select|Actions|Nothing|",
          "isField": 0,
          "type": {
            "tName": "FSharpChoice`7<unit, unit, unit, unit, unit, unit, unit>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "|Vertical|Horizontal|Layout|Grid|Template|Elem|Nothing|",
          "isField": 0,
          "type": {
            "tName": "FSharpChoice`7<unit, unit, unit, unit, unit, string, unit>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "|I|_|",
          "isField": 0,
          "type": {
            "tName": "Option<string>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "|Identifier|_|",
          "isField": 0,
          "type": {
            "tName": "Option<string>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "|S|",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "Token",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+NewLY+P",
      "methods": [
        {
          "meName": "run",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+AppFramework+P<'a>",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS+NewLY",
      "methods": [
        {
          "meName": "addNewLayoutAct",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Object",
              "asm": "netstandard"
            },
            {
              "tName": "Object",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addLayout",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addNewLayout",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+LayoutEngine",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "generateEntries",
          "isField": 0,
          "type": {
            "tName": "(IEnumerable<(string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+Entry)> -> IEnumerable<FsRoot.LibraryJS+LayoutEngineModule+LayoutEntry>)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defTemplateM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+TemplateDef) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defSplitterM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * bool * FsRoot.LibraryJS+LayoutEngineModule+Measures * FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef * FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defViewJSM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>) -> View<string>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defViewM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>) -> View<string>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defConcatM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+NodeRef>) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defElementM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+NodeRef>) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defTextAreaM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+VarRef * FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal[]) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defInputM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+VarRef * FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal[]) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defButtonM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef * FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal[] * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+TextVal>) -> (unit -> Doc))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defActionsM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef>) -> FsRoot.LibraryJS+AppFramework+ActFunction)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defActionM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>) -> FsRoot.LibraryJS+AppFramework+ActFunction)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defDocFM",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef * List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>) -> Lazy<FsRoot.LibraryJS+AppFramework+DocFunction>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "defVarM",
          "isField": 0,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "defVarM0",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.LibraryJS+AppFramework+PlugInName * string * string) -> Var<string>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "initVal",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "defTemplate",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+TemplateDef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defSplitter",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Measures",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "defButton",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "IEnumerable<FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal>",
              "asm": "netstandard"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+TextVal>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defDocF",
          "isField": 0,
          "type": {
            "tName": "Lazy<FsRoot.LibraryJS+AppFramework+DocFunction>",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+DocRef",
              "asm": "FSharpStation"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defConcat",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+NodeRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defElement",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef",
              "asm": "FSharpStation"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+NodeRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defTextArea",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "IEnumerable<FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "defInput",
          "isField": 0,
          "type": {
            "tName": "(unit -> Doc)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'b",
              "asm": ""
            },
            {
              "tName": "IEnumerable<FsRoot.LibraryJS+LayoutEngineModule+Syntax+AttrVal>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "defViewJS",
          "isField": 0,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defView",
          "isField": 0,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defActions",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+ActFunction",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defAction",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+ActFunction",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef",
              "asm": "FSharpStation"
            },
            {
              "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "defVar",
          "isField": 0,
          "type": {
            "tName": "Var<'b>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "getParamTextD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef -> ((Object -> unit) -> unit))>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "getParam2D",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef -> string)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "itemRefToAbsolute",
          "isField": 0,
          "type": {
            "tName": "(FsRoot.LibraryJS+LayoutEngineModule+Syntax+ItemRef -> string)",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getParamD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(FsRoot.LibraryJS+LayoutEngineModule+Syntax+ParmRef -> View<Object>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "actRefToActD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef -> FsRoot.LibraryJS+AppFramework+PlugInAction)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "varRefToVarD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(FsRoot.LibraryJS+LayoutEngineModule+Syntax+VarRef -> Var<string>)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "nodeRefToDocD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<(FsRoot.LibraryJS+LayoutEngineModule+Syntax+NodeRef -> Doc)>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "|ActRVs|",
          "isField": 0,
          "type": {
            "tName": "List<FsRoot.LibraryJS+LayoutEngineModule+Syntax+TextVal>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ActRef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "textValToTextType",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Extract0+TextType",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+TextVal",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "itemRefToString",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ItemRef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "itemRefToTextType",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+Extract0+TextType",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+LayoutEngineModule+Syntax+ItemRef",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "currentPlugInNameD",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library+Monads+Depend+Depend<FsRoot.LibraryJS+AppFramework+PlugInName>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "currentPlugInNameDef",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "pb",
          "isField": 1,
          "type": {
            "tName": "Double",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "pa",
          "isField": 1,
          "type": {
            "tName": "View<int>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "aV",
          "isField": 1,
          "type": {
            "tName": "Var<int>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "concat",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "Double",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.LibraryJS",
      "methods": [
        {
          "meName": "rexEmail",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "rexGuid",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "|REGEX|_|",
          "isField": 0,
          "type": {
            "tName": "Option<string[]>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+FsiAgent+Config",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsiAgent",
      "methods": [
        {
          "meName": "extractConfig",
          "isField": 0,
          "type": {
            "tName": "Config",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.Library+FsCode",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+Address",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets+BrokerRequest",
      "methods": [
        {
          "meName": "_unique_BRGetProcessId",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_BRGetConnections",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+BrokerReply",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets+MessageType",
      "methods": [
        {
          "meName": "_unique_MsgRequestForEcho",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_MsgRequestForId",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_MsgFromBroker",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_MsgReply",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_MsgRequest",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_MsgInformation",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+BrokerMessage",
      "methods": [
        {
          "meName": "_unique_BMReceiverCantReply",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_BMOnlyBrokerShouldUse",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_BMOk",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+Replier",
      "methods": [
        {
          "meName": "_unique_Receiver",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_Broker",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_NoReply",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+MessageGeneric",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets+ClientTypeFSharp",
      "methods": [
        {
          "meName": "_unique_FSharp",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+ClientTypeFSStation",
      "methods": [
        {
          "meName": "_unique_FSStation",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+ClientTypeJScript",
      "methods": [
        {
          "meName": "_unique_JScript",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+WebSockets+ReplyHandler+WaitForReplyMsg",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets+ReplyHandler+Handler",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets+ReplyHandler",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets+WSMessagingClient",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+WebSockets",
      "methods": [
        {
          "meName": "extractEndPoint",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "makeReply",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "mapPayload",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "(string -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "msgId",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Guid",
              "asm": "netstandard"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "replier",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Replier",
              "asm": "FSharpStation"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "subtype",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "msgType",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "MessageType",
              "asm": "FSharpStation"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "destination",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Address",
              "asm": "FSharpStation"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "from",
          "isField": 0,
          "type": {
            "tName": "MessageGeneric",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "Address",
              "asm": "FSharpStation"
            },
            {
              "tName": "MessageGeneric",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "MessageBrokerAddress",
          "isField": 1,
          "type": {
            "tName": "Address",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "MessageBrokerId",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+FSMessage",
      "methods": [
        {
          "meName": "_unique_MsgGetUrl",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "_unique_MsgGetId",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+FSResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FSharpStationClient",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+ResponseError",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+Location",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+CompletionResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+OverloadDescription",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+OverloadParameter",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+Overload",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+Parameter",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+SignatureData",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+MethodResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+SymbolUseRange",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+SymbolUseResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+HelpTextResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+CompilerLocationResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+FSharpErrorInfo",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+ErrorResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+Colorization",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+Declaration",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+DeclarationResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+OpenNamespace",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+QualifySymbol",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+ResolveNamespaceResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+UnionCaseResponse",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes+Kind",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+CommTypes",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+ParseRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+DeclarationsRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+CompletionRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+PositionRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+ProjectRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+LintRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+HelptextRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+WorkspacePeekRequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes+FARequest",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+MsgTypes",
      "methods": []
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete+Calls",
      "methods": [
        {
          "meName": "symbolUseProject",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+SymbolUseResponse * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "symbolUse",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+SymbolUseResponse * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "helpText",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+HelpTextResponse * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "declarations",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+DeclarationResponse[] * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "findDeclaration",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+Location * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "findTypeDecl",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+Location * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "completion",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+CompletionResponse[] * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "signatureData",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+SignatureData * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "signature",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(string * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "toolTip",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+OverloadDescription[][] * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "parseCode",
          "isField": 0,
          "type": {
            "tName": "Async<Result<(FsRoot.Library2+FsAutoComplete+CommTypes+ErrorResponse * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string[]",
              "asm": "netstandard"
            },
            {
              "tName": "bool",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "FSAutocompleteCall",
          "isField": 0,
          "type": {
            "tName": "Async<Result<('a * FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]), FsRoot.Library+ResultMessage<FsRoot.Library2+FsAutoComplete+CommTypes+Kind[]>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "(FsRoot.Library2+FsAutoComplete+CommTypes+Kind -> Option<'a>)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library2+FsAutoComplete+MsgTypes+FARequest",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.Library2+FsAutoComplete",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+FStation",
      "methods": [
        {
          "meName": "appendMsgs",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "appendText",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "outputMsgs",
          "isField": 1,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "annotationsV",
          "isField": 1,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "srcDir",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "set_srcDir",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "rootDir",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "set_rootDir",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "id",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Snippets",
      "methods": [
        {
          "meName": "setProperty",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "toggleCollapse",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "newSnippet",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "addSnippetRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, FsRoot.Library+SnippetCollection, string>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setSnippetsGen",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+Snippet>",
              "asm": "netstandard"
            },
            {
              "tName": "Set<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "updateGeneration",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "moveNode",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "indentOut",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "indentIn",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "deleteCurrentSnippet",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "expandClassW",
          "isField": 0,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "expandClassRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<string, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "togglePredecessor",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isIncludedPredecessorW",
          "isField": 0,
          "type": {
            "tName": "View<bool>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "isIndirectPredecessorW",
          "isField": 0,
          "type": {
            "tName": "View<bool>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "treenode",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+TreeReader+Node<FsRoot.Library+SnippetId, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setChildrenRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionM<unit, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+TreeReader+Node<FsRoot.Library+SnippetId, 'a, 'b>[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "currentLayoutJSDW",
          "isField": 1,
          "type": {
            "tName": "View<Option<(FsRoot.Library+SnippetId * string)>>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "currentLayoutDW",
          "isField": 1,
          "type": {
            "tName": "View<Option<(string * string)>>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "currentPathW",
          "isField": 1,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "SaveAsClassW",
          "isField": 1,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "hasChangedW",
          "isField": 0,
          "type": {
            "tName": "View<bool>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "codeStartsW",
          "isField": 1,
          "type": {
            "tName": "View<((FsRoot.Library+SnippetId * string) * (int * int * int))[]>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "FsCodeW",
          "isField": 1,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "codeAndStartsW",
          "isField": 1,
          "type": {
            "tName": "View<(string * ((FsRoot.Library+SnippetId * string) * (int * int * int))[])>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "getHierarchyW",
          "isField": 1,
          "type": {
            "tName": "View<(FsRoot.Library+SnippetId * int)[]>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "findSnippetV",
          "isField": 0,
          "type": {
            "tName": "Var<FsRoot.Library+Snippet>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "findSnippetW",
          "isField": 0,
          "type": {
            "tName": "View<FsRoot.Library+Snippet>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "codeSnippetClassW",
          "isField": 0,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "selectedClassW",
          "isField": 0,
          "type": {
            "tName": "View<string>",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "currentSnippetV",
          "isField": 1,
          "type": {
            "tName": "Var<FsRoot.Library+Snippet>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "codeSnippetW",
          "isField": 1,
          "type": {
            "tName": "View<FsRoot.Library+Snippet>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "currentSnippetW",
          "isField": 1,
          "type": {
            "tName": "View<FsRoot.Library+Snippet>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "CurrentSnippetIdW",
          "isField": 1,
          "type": {
            "tName": "View<FsRoot.Library+SnippetId>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "isDescendantOf",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getParentIdO",
          "isField": 1,
          "type": {
            "tName": "(FsRoot.Library+SnippetId -> Option<FsRoot.Library+SnippetId>)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "getParentIdONotMemo",
          "isField": 0,
          "type": {
            "tName": "Option<FsRoot.Library+SnippetId>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getSnippetsGen",
          "isField": 0,
          "type": {
            "tName": "(IEnumerable<FsRoot.Library+Snippet> * DateTime * Set<FsRoot.Library+SnippetId>)",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "setSnippet",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setCurrentSnippetIdO",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "expandParents",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "runReader",
          "isField": 0,
          "type": {
            "tName": "'b",
            "asm": ""
          },
          "parms": [
            {
              "tName": "(FsRoot.Library+ResultMessage<'a> -> 'b)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "FsRoot.Library+Monads+FusionM<'b, FsRoot.Library+SnippetCollection, 'a>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "runReaderResult",
          "isField": 0,
          "type": {
            "tName": "Result<'a, FsRoot.Library+ResultMessage<'b>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<'a, FsRoot.Library+SnippetCollection, 'b>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "iterReader",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Monads+FusionM<unit, FsRoot.Library+SnippetCollection, string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "handleError",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "FsRoot.Library+ResultMessage<string>",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippetsColl",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+SnippetCollection",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "prepCode",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "prepAnyCode",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "clearPredsCache",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "clearParent",
          "isField": 1,
          "type": {
            "tName": "(unit -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "parentCache",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+SnippetId -> Option<Option<FsRoot.Library+SnippetId>>) * (FsRoot.Library+SnippetId -> ((FsRoot.Library+SnippetId -> Option<FsRoot.Library+SnippetId>) -> Option<FsRoot.Library+SnippetId>)))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "clearReduc",
          "isField": 1,
          "type": {
            "tName": "(unit -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "reducCache",
          "isField": 1,
          "type": {
            "tName": "(((bool * FsRoot.Library+SnippetId * Set<FsRoot.Library+SnippetId>) -> Option<Option<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[])>>) * ((bool * FsRoot.Library+SnippetId * Set<FsRoot.Library+SnippetId>) -> (((bool * FsRoot.Library+SnippetId * Set<FsRoot.Library+SnippetId>) -> Option<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[])>) -> Option<((FsRoot.Library+SnippetId * string * int * int)[] * string[] * FsRoot.Library+FsCodeModule+PreproDirective[])>)))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "clearPreds",
          "isField": 1,
          "type": {
            "tName": "(unit -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "predsCache",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+SnippetId -> Option<List<FsRoot.Library+SnippetId>>) * (FsRoot.Library+SnippetId -> ((FsRoot.Library+SnippetId -> List<FsRoot.Library+SnippetId>) -> List<FsRoot.Library+SnippetId>)))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "collapsedV",
          "isField": 1,
          "type": {
            "tName": "Var<Set<FsRoot.Library+SnippetId>>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "codeSnippetIdOV",
          "isField": 1,
          "type": {
            "tName": "Var<Option<FsRoot.Library+SnippetId>>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "currentSnippetIdOV",
          "isField": 1,
          "type": {
            "tName": "Var<Option<FsRoot.Library+SnippetId>>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "generation",
          "isField": 1,
          "type": {
            "tName": "Var<DateTime>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "hierarchy",
          "isField": 1,
          "type": {
            "tName": "Var<FsRoot.Library+TreeReader+Node<FsRoot.Library+SnippetId, FsRoot.Library+SnippetCollection, string>[]>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "snippets",
          "isField": 1,
          "type": {
            "tName": "ListModel<FsRoot.Library+SnippetId, FsRoot.Library+Snippet>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+DragDrop+DragInfo",
      "methods": [
        {
          "meName": "_unique_DragNone",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+DragDrop",
      "methods": [
        {
          "meName": "getDragNIdO",
          "isField": 0,
          "type": {
            "tName": "Option<FsRoot.Library+SnippetId>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setDragNode",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setDragNone",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "drag",
          "isField": 1,
          "type": {
            "tName": "DragInfo",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "set_drag",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "DragInfo",
              "asm": "FSharpStation"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Templating",
      "methods": [
        {
          "meName": "TemplatesFileName",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "rootdir",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+RenderSnippets",
      "methods": [
        {
          "meName": "render",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "snippets$8781$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets$8780$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets$8779$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets$8778$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets$8777$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets$8776$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets$8775$40",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "snippets",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "scrollIntoView",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "View<bool>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+RenderProperties",
      "methods": [
        {
          "meName": "render$8820$34",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "render",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "properties$8813$33",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "properties",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "remProperty",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "addProperty",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Markdown",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Monaco+HoverProvider",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Monaco+CompletionItemProvider",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Monaco+DefinitionProvider",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Monaco+MonacoOptions",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Monaco+ITextModelService",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Monaco",
      "methods": [
        {
          "meName": "getSelection",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "goto",
          "isField": 0,
          "type": {
            "tName": "Async<unit>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "editorDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "editorConfigO",
          "isField": 1,
          "type": {
            "tName": "Option<FsRoot.LibraryJS+Monaco+MonacoConfig>",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "set_editorConfigO",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Option<FsRoot.LibraryJS+Monaco+MonacoConfig>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "parse",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "((FsRoot.Library+SnippetId * string) * (int * int * int))[]",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "monacoNew",
          "isField": 0,
          "type": {
            "tName": "Async<FsRoot.LibraryJS+Monaco+MonacoConfig>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "Var<string>",
              "asm": "WebSharper.UI"
            },
            {
              "tName": "Option<View<FsRoot.LibraryJS+Monaco+MarkerData[]>>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<(string -> (int -> (int -> unit)))>",
              "asm": "FSharp.Core"
            },
            {
              "tName": "Option<(((string * string * string)[] -> ((int * int) -> ((int * int) -> unit))) -> (string -> (int -> (int -> unit))))>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "textModelResolverService",
          "isField": 0,
          "type": {
            "tName": "ITextModelService",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "openCodeEditor",
          "isField": 0,
          "type": {
            "tName": "WebSharper.JavaScript.Promise<FsRoot.LibraryJS+Monaco+Editor>",
            "asm": "WebSharper.JavaScript"
          },
          "parms": [
            {
              "tName": "Object",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.LibraryJS+Monaco+Editor",
              "asm": "FSharpStation"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "gotoEditor",
          "isField": 0,
          "type": {
            "tName": "Async<unit>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.LibraryJS+Monaco+Editor",
              "asm": "FSharpStation"
            },
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            },
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "transformAnnotations",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Monaco+MarkerData[]",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "convertGlyphChar",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Monaco+CompletionItemKind",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "fileName",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "set_fileName",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "overDescriptions",
          "isField": 0,
          "type": {
            "tName": "Async<IEnumerable<string>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "IEnumerable<'a>",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "fixMarkDown",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getSnippetModel",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Monaco+Model",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+SnippetId",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getModelUri",
          "isField": 0,
          "type": {
            "tName": "FsRoot.LibraryJS+Monaco+Model",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "FsRoot.LibraryJS+Monaco+Uri",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "getSnipIdIndentAndFirst",
          "isField": 0,
          "type": {
            "tName": "(FsRoot.Library+SnippetId * int * int)",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "int",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getIndentAndFirst",
          "isField": 0,
          "type": {
            "tName": "(int * int)",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "defaultStart",
          "isField": 1,
          "type": {
            "tName": "(Option<((FsRoot.Library+SnippetId * string) * (int * int * int))> -> ((FsRoot.Library+SnippetId * string) * (int * int * int)))",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "startsV",
          "isField": 1,
          "type": {
            "tName": "Var<((FsRoot.Library+SnippetId * string) * (int * int * int))[]>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+JumpTo",
      "methods": [
        {
          "meName": "jumpToRef",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "jumpToLine",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "rexGuid",
          "isField": 1,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+CustomAction",
      "methods": [
        {
          "meName": "setScrollToBottom",
          "isField": 1,
          "type": {
            "tName": "(WebSharper.JavaScript.Dom.Element -> unit)",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "scrollToBottom",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "setCurrentProperty",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getCurrentProperty",
          "isField": 0,
          "type": {
            "tName": "Async<Result<string, FsRoot.Library+ResultMessage<'a>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "buttonClick",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "actionClick",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "actionSnp",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "actionSnpRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<Result<(string * FsRoot.Library+ResultMessage<FsRoot.LibraryNoJS+RunProcess+ShellResponse>), FsRoot.Library+ResultMessage<FsRoot.LibraryNoJS+RunProcess+ShellResponse>>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "setSnippetContent",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "actionClickRm",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<Result<(string * FsRoot.Library+ResultMessage<FsRoot.LibraryNoJS+RunProcess+ShellResponse>), FsRoot.Library+ResultMessage<FsRoot.LibraryNoJS+RunProcess+ShellResponse>>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "fetchValue",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getCode",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<string, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "codeModule",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<string, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getBaseSnippet",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<FsRoot.Library+Snippet, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "translateString",
          "isField": 0,
          "type": {
            "tName": "string",
            "asm": "netstandard"
          },
          "parms": [
            {
              "tName": "(string -> string)",
              "asm": "FSharp.Core"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "propO",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<Option<string>, FsRoot.Library+SnippetCollection, 'a>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "FsRoot.Library+Snippet",
              "asm": "FSharpStation"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Serializer+Model",
      "methods": []
    },
    {
      "moName": "FsRoot.FSharpStation+Serializer",
      "methods": [
        {
          "meName": "serModel",
          "isField": 1,
          "type": {
            "tName": "((Model -> string) * (Object -> Model))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "getModel",
          "isField": 0,
          "type": {
            "tName": "Model",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "IEnumerable<FsRoot.Library+Snippet>",
              "asm": "netstandard"
            },
            {
              "tName": "DateTime",
              "asm": "netstandard"
            },
            {
              "tName": "Set<FsRoot.Library+SnippetId>",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "serSnippet",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+Snippet -> string) * (Object -> FsRoot.Library+Snippet))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serSnippetId",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+SnippetId -> string) * (Object -> FsRoot.Library+SnippetId))",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+LoadSave",
      "methods": [
        {
          "meName": "saveAs",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "loadTextFile",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "parseText",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "canLoad",
          "isField": 0,
          "type": {
            "tName": "bool",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "fileName",
          "isField": 1,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Importer",
      "methods": [
        {
          "meName": "importFile",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "WebSharper.JavaScript.Dom.Element",
              "asm": "WebSharper.JavaScript"
            }
          ]
        },
        {
          "meName": "parseText",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "serSnippets",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+Snippet[] -> string) * (Object -> FsRoot.Library+Snippet[]))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serSnippet2",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+Snippet -> string) * (Object -> FsRoot.Library+Snippet))",
            "asm": "netstandard"
          },
          "parms": []
        },
        {
          "meName": "serSnippetId2",
          "isField": 1,
          "type": {
            "tName": "((FsRoot.Library+SnippetId -> string) * (Object -> FsRoot.Library+SnippetId))",
            "asm": "netstandard"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+MainProgram+EndPoint",
      "methods": [
        {
          "meName": "_unique_NoSnippet",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+MainProgram",
      "methods": [
        {
          "meName": "mainProgram",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "contentV",
          "isField": 1,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "snippetNameV",
          "isField": 1,
          "type": {
            "tName": "Var<string>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc$9584$78",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Templating.Runtime.Server+TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent> -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "mainDoc$9575$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc$9574$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc$9573$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc$9572$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc$9571$39",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "mainDoc",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "buttonsRight$9557$74",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Templating.Runtime.Server+TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent> -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "buttonsRight$9556$74",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Templating.Runtime.Server+TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent> -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "buttonsRight$9555$74",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Templating.Runtime.Server+TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent> -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "buttonsRight$9554$74",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Templating.Runtime.Server+TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent> -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "buttonsRight$9553$74",
          "isField": 0,
          "type": {
            "tName": "TemplateHole",
            "asm": "WebSharper.UI"
          },
          "parms": [
            {
              "tName": "(Templating.Runtime.Server+TemplateEvent<Vars, WebSharper.JavaScript.Dom.MouseEvent> -> unit)",
              "asm": "FSharp.Core"
            }
          ]
        },
        {
          "meName": "buttonsRight",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        },
        {
          "meName": "hookDoc",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> (Doc -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "hookAct",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> (('b -> unit) -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "hookViw",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> (View<string> -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "hookVar",
          "isField": 0,
          "type": {
            "tName": "'a",
            "asm": ""
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "('a -> (Var<string> -> 'a))",
              "asm": "FSharp.Core"
            },
            {
              "tName": "'a",
              "asm": ""
            }
          ]
        },
        {
          "meName": "FStationLyt",
          "isField": 1,
          "type": {
            "tName": "FsRoot.LibraryJS+AppFramework+PlugInName",
            "asm": "FSharpStation"
          },
          "parms": []
        },
        {
          "meName": "deleteSnippet",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "selectionToFsi",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "runFsCode",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "endPointV",
          "isField": 1,
          "type": {
            "tName": "Var<EndPoint>",
            "asm": "WebSharper.UI"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Messaging",
      "methods": [
        {
          "meName": "processMessage",
          "isField": 0,
          "type": {
            "tName": "Async<Result<FsRoot.Library2+FSResponse, FsRoot.Library+ResultMessage<string>>>",
            "asm": "FSharp.Core"
          },
          "parms": [
            {
              "tName": "FsRoot.Library2+FSMessage",
              "asm": "FSharpStation"
            }
          ]
        },
        {
          "meName": "setValue",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<FsRoot.Library2+FSResponse, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "getValue",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<FsRoot.Library2+FSResponse, 'a, 'b>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            }
          ]
        },
        {
          "meName": "actionCall",
          "isField": 0,
          "type": {
            "tName": "FsRoot.Library+Monads+FusionAsyncM<FsRoot.Library2+FSResponse, 'c, 'd>",
            "asm": "FSharpStation"
          },
          "parms": [
            {
              "tName": "string",
              "asm": "netstandard"
            },
            {
              "tName": "'a",
              "asm": ""
            },
            {
              "tName": "'b",
              "asm": ""
            }
          ]
        },
        {
          "meName": "wsStationClient",
          "isField": 1,
          "type": {
            "tName": "FsRoot.Library2+WebSockets+WSMessagingClient",
            "asm": "FSharpStation"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation+Server",
      "methods": [
        {
          "meName": "content$9852$54",
          "isField": 0,
          "type": {
            "tName": "Doc",
            "asm": "WebSharper.UI"
          },
          "parms": []
        }
      ]
    },
    {
      "moName": "FsRoot.FSharpStation",
      "methods": []
    },
    {
      "moName": "StartupCode$FSharpStation$FSharpStation",
      "methods": []
    },
    {
      "moName": "Generated$FSharpStation",
      "methods": [
        {
          "meName": "FSharpStation_JsonDecoder._v$4",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$4",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$6",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$7",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$8",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.appfwkclient",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.fixedsplitterhor",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$2",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Router.r",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$6",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$5",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$6",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$5",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$4",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$4",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$5",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$5",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.fixedsplitterver",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$8",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$7",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$6",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.wcompsplitterver",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.wcompsplitterhor",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.appframework",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.tile",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.action",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.namevalue",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.namevalueinput",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$3",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$27",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$26",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$25",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$24",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$23",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$22",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$21",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$4",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$20",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$18",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$19",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$16",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$17",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$15",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$14",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$8",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$10",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$11",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$13",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$12",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$9",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$5",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$7",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$6",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$2",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$29",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$28",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.snippetlist",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.snippet",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.propertytable",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.property",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.layout",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.fixedsplitterver$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.fixedsplitterhor$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_Templates.buttonsright",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$30",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$32",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$31",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$9",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$9",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$33",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$7",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$7",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$8",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$8",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$36",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$35",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$3",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$34",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$37",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$38",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_GeneratedPrintf.p$39",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$25",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$24",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$23",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$21",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$19",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$22",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$20",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$17",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$16",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$18",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$15",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$13",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$14",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$10",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$11",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$12",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$8",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$9",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$7",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$5",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$6",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "GeneratedPrintf.p$4",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$2",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$2",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder._v$3",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j$3",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonEncoder.j",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$1",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$2",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$2",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder._v$3",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j$3",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        },
        {
          "meName": "FSharpStation_JsonDecoder.j",
          "isField": 0,
          "type": {
            "tName": "unit",
            "asm": "FSharp.Core"
          },
          "parms": []
        }
      ]
    }
  ],
  "jsModules": [
    {
      "jsName": "WebSharper.js",
      "code": "(function()\r\n{\r\n \"use strict\";\r\n var Global,FsRoot,Library,StringId,GuidId,Dict,ResultMessage,ResultMessageHelpers,Monads,Seq,Option,Async,WebSharper,Obj,State,CEBuilder,Operators,Result,Builder,Operators$1,BuilderP,Depend,DependBuilder,Operators$2,FusionM,Operators$3,Builder$1,Builder$2,FusionAsyncM,Operators$4,Builder$3,Builder$4,ResultM,Builder$5,Operators$5,ResultMAutoOpen,AsyncResult,AsyncResultBuilder,AsyncResultBuilderP,Extensions,AsyncResultM,AsyncResultMBuilder,Operators$6,AsyncResultMAutoOpen,String,ParseO,MailboxProcessorExt,Mailbox,StateFull,ResourceAgentState,ResourceAgent,AgentReaderM,CommArgRoot,CommArg,CommArgCollection,TypedCommArg,CommArgModule,FsCodeModule,PreproDirective,PrepState,SnippetId,Snippet,SnippetCollection,SnippetModule,Hole,TreeReader,Node,LibraryJS,Promise,PromiseM,View,Var,ListModel,Pojo,GenEditor,Position,AnnotationType,Annotation,Completion,GenEditorHook,GenEditor$1,Serializer,REGEX,Hoverable,Hoverable$1,ResizeObserver,WebComponent,WcTabStrip,WcTabStripT,WcSplitter,WcSplitterT,Monaco,Position$1,Range,Uri,Location,FindMatch,WordAtPosition,Model,MarkDownString,MarkerData,CompletionItem,Hover,Editor,MonacoConfig,MonacoGenAdapter,MonacoRT,CompletionItemProvider,HoverProvider,DefinitionProvider,AppFrameworkTemplate,AppFramework,PlgElemName,PlugInName,PlugInVar,PlugInView,PlugInDoc,PlugInAction,PlugInQuery,PlugIn,PlugInBuilder,Fun,P,Val,AAttr,Extract0,ListModelData,LM,StartAppFramework,AppFrameworkUI,LayoutEngine,LayoutEngineModule,Measures,Syntax,RefType,TemplateDef,Layout,NewLY,P$1,Library2,FsiAgent,WebSockets,Address,BrokerRequest,MessageType,BrokerMessage,Replier,MessageGeneric,ClientTypeFSharp,ClientTypeFSStation,ClientTypeJScript,ReplyHandler,Handler,WSMessagingClient,FSMessage,FsAutoComplete,CommTypes,ResponseError,Location$1,CompletionResponse,OverloadDescription,OverloadParameter,Overload,Parameter,SignatureData,MethodResponse,SymbolUseRange,SymbolUseResponse,HelpTextResponse,CompilerLocationResponse,FSharpErrorInfo,ErrorResponse,Colorization,Declaration,DeclarationResponse,OpenNamespace,QualifySymbol,ResolveNamespaceResponse,UnionCaseResponse,MsgTypes,ParseRequest,DeclarationsRequest,CompletionRequest,PositionRequest,ProjectRequest,LintRequest,HelptextRequest,WorkspacePeekRequest,Calls,FSharpStation,FStation,Snippets,DragDrop,DragInfo,Templating,RenderSnippets,RenderProperties,Monaco$1,HoverProvider$1,CompletionItemProvider$1,DefinitionProvider$1,MonacoOptions,ITextModelService,JumpTo,CustomAction,Serializer$1,Model$1,LoadSave,Importer,MainProgram,EndPoint,Messaging,Server,SC$1,FSharpStation_JsonEncoder,FSharpStation_Templates,FSharpStation_GeneratedPrintf,FSharpStation_Router,GeneratedPrintf,FSharpStation_JsonDecoder,IntelliFactory,Runtime,Utils,Strings,Seq$1,List,Arrays,Concurrency,Enumerator,Result$1,Operators$7,Unchecked,Slice,Char,Control,MailboxProcessor,System,Guid,Collections,FSharpSet,Option$1,Date,UI,Var$1,View$1,CancellationTokenSource,console,Var$2,FromView,Doc,FSharpMap,BalancedTree,DomUtility,AttrModule,AttrProxy,Node$1,Client,Templates,Reflect,Object,Lazy,Templating$1,Runtime$1,Server$1,ProviderBuilder,Handler$1,TemplateInstance,ListModel$1,Math,Dictionary,MatchFailureException,Map,JSON,TimeoutException,ClientSideJson,Provider,Owin,WebSocket,Client$1,WithEncoding,Endpoint,location,Remoting,AjaxRemotingProvider,JavaScript,Promise$1,DateUtil,Numeric,Attrs,Input,Mouse,Keyboard,Router,Sitelets,RouterOperators;\r\n Global=self;\r\n FsRoot=Global.FsRoot=Global.FsRoot||{};\r\n Library=FsRoot.Library=FsRoot.Library||{};\r\n StringId=Library.StringId=Library.StringId||{};\r\n GuidId=Library.GuidId=Library.GuidId||{};\r\n Dict=Library.Dict=Library.Dict||{};\r\n ResultMessage=Library.ResultMessage=Library.ResultMessage||{};\r\n ResultMessageHelpers=Library.ResultMessageHelpers=Library.ResultMessageHelpers||{};\r\n Monads=Library.Monads=Library.Monads||{};\r\n Seq=Monads.Seq=Monads.Seq||{};\r\n Option=Monads.Option=Monads.Option||{};\r\n Async=Monads.Async=Monads.Async||{};\r\n WebSharper=Global.WebSharper;\r\n Obj=WebSharper&&WebSharper.Obj;\r\n State=Monads.State=Monads.State||{};\r\n CEBuilder=State.CEBuilder=State.CEBuilder||{};\r\n Operators=State.Operators=State.Operators||{};\r\n Result=Monads.Result=Monads.Result||{};\r\n Builder=Result.Builder=Result.Builder||{};\r\n Operators$1=Result.Operators=Result.Operators||{};\r\n BuilderP=Result.BuilderP=Result.BuilderP||{};\r\n Depend=Monads.Depend=Monads.Depend||{};\r\n DependBuilder=Depend.DependBuilder=Depend.DependBuilder||{};\r\n Operators$2=Depend.Operators=Depend.Operators||{};\r\n FusionM=Monads.FusionM=Monads.FusionM||{};\r\n Operators$3=FusionM.Operators=FusionM.Operators||{};\r\n Builder$1=FusionM.Builder=FusionM.Builder||{};\r\n Builder$2=Builder$1.Builder=Builder$1.Builder||{};\r\n FusionAsyncM=Monads.FusionAsyncM=Monads.FusionAsyncM||{};\r\n Operators$4=FusionAsyncM.Operators=FusionAsyncM.Operators||{};\r\n Builder$3=FusionAsyncM.Builder=FusionAsyncM.Builder||{};\r\n Builder$4=Builder$3.Builder=Builder$3.Builder||{};\r\n ResultM=Monads.ResultM=Monads.ResultM||{};\r\n Builder$5=ResultM.Builder=ResultM.Builder||{};\r\n Operators$5=ResultM.Operators=ResultM.Operators||{};\r\n ResultMAutoOpen=Monads.ResultMAutoOpen=Monads.ResultMAutoOpen||{};\r\n AsyncResult=Monads.AsyncResult=Monads.AsyncResult||{};\r\n AsyncResultBuilder=Monads.AsyncResultBuilder=Monads.AsyncResultBuilder||{};\r\n AsyncResultBuilderP=Monads.AsyncResultBuilderP=Monads.AsyncResultBuilderP||{};\r\n Extensions=Monads.Extensions=Monads.Extensions||{};\r\n AsyncResultM=Monads.AsyncResultM=Monads.AsyncResultM||{};\r\n AsyncResultMBuilder=AsyncResultM.AsyncResultMBuilder=AsyncResultM.AsyncResultMBuilder||{};\r\n Operators$6=AsyncResultM.Operators=AsyncResultM.Operators||{};\r\n AsyncResultMAutoOpen=Monads.AsyncResultMAutoOpen=Monads.AsyncResultMAutoOpen||{};\r\n String=Library.String=Library.String||{};\r\n ParseO=Library.ParseO=Library.ParseO||{};\r\n MailboxProcessorExt=Library.MailboxProcessorExt=Library.MailboxProcessorExt||{};\r\n Mailbox=Library.Mailbox=Library.Mailbox||{};\r\n StateFull=Mailbox.StateFull=Mailbox.StateFull||{};\r\n ResourceAgentState=Library.ResourceAgentState=Library.ResourceAgentState||{};\r\n ResourceAgent=Library.ResourceAgent=Library.ResourceAgent||{};\r\n AgentReaderM=Library.AgentReaderM=Library.AgentReaderM||{};\r\n CommArgRoot=Library.CommArgRoot=Library.CommArgRoot||{};\r\n CommArg=CommArgRoot.CommArg=CommArgRoot.CommArg||{};\r\n CommArgCollection=CommArgRoot.CommArgCollection=CommArgRoot.CommArgCollection||{};\r\n TypedCommArg=CommArgRoot.TypedCommArg=CommArgRoot.TypedCommArg||{};\r\n CommArgModule=CommArgRoot.CommArgModule=CommArgRoot.CommArgModule||{};\r\n FsCodeModule=Library.FsCodeModule=Library.FsCodeModule||{};\r\n PreproDirective=FsCodeModule.PreproDirective=FsCodeModule.PreproDirective||{};\r\n PrepState=FsCodeModule.PrepState=FsCodeModule.PrepState||{};\r\n SnippetId=Library.SnippetId=Library.SnippetId||{};\r\n Snippet=Library.Snippet=Library.Snippet||{};\r\n SnippetCollection=Library.SnippetCollection=Library.SnippetCollection||{};\r\n SnippetModule=Library.SnippetModule=Library.SnippetModule||{};\r\n Hole=Library.Hole=Library.Hole||{};\r\n TreeReader=Library.TreeReader=Library.TreeReader||{};\r\n Node=TreeReader.Node=TreeReader.Node||{};\r\n LibraryJS=FsRoot.LibraryJS=FsRoot.LibraryJS||{};\r\n Promise=LibraryJS.Promise=LibraryJS.Promise||{};\r\n PromiseM=LibraryJS.PromiseM=LibraryJS.PromiseM||{};\r\n View=LibraryJS.View=LibraryJS.View||{};\r\n Var=LibraryJS.Var=LibraryJS.Var||{};\r\n ListModel=LibraryJS.ListModel=LibraryJS.ListModel||{};\r\n Pojo=LibraryJS.Pojo=LibraryJS.Pojo||{};\r\n GenEditor=LibraryJS.GenEditor=LibraryJS.GenEditor||{};\r\n Position=GenEditor.Position=GenEditor.Position||{};\r\n AnnotationType=GenEditor.AnnotationType=GenEditor.AnnotationType||{};\r\n Annotation=GenEditor.Annotation=GenEditor.Annotation||{};\r\n Completion=GenEditor.Completion=GenEditor.Completion||{};\r\n GenEditorHook=GenEditor.GenEditorHook=GenEditor.GenEditorHook||{};\r\n GenEditor$1=GenEditor.GenEditor=GenEditor.GenEditor||{};\r\n Serializer=LibraryJS.Serializer=LibraryJS.Serializer||{};\r\n REGEX=LibraryJS.REGEX=LibraryJS.REGEX||{};\r\n Hoverable=LibraryJS.Hoverable=LibraryJS.Hoverable||{};\r\n Hoverable$1=Hoverable.Hoverable=Hoverable.Hoverable||{};\r\n ResizeObserver=LibraryJS.ResizeObserver=LibraryJS.ResizeObserver||{};\r\n WebComponent=LibraryJS.WebComponent=LibraryJS.WebComponent||{};\r\n WcTabStrip=WebComponent.WcTabStrip=WebComponent.WcTabStrip||{};\r\n WcTabStripT=WcTabStrip.WcTabStripT=WcTabStrip.WcTabStripT||{};\r\n WcSplitter=WebComponent.WcSplitter=WebComponent.WcSplitter||{};\r\n WcSplitterT=WcSplitter.WcSplitterT=WcSplitter.WcSplitterT||{};\r\n Monaco=LibraryJS.Monaco=LibraryJS.Monaco||{};\r\n Position$1=Monaco.Position=Monaco.Position||{};\r\n Range=Monaco.Range=Monaco.Range||{};\r\n Uri=Monaco.Uri=Monaco.Uri||{};\r\n Location=Monaco.Location=Monaco.Location||{};\r\n FindMatch=Monaco.FindMatch=Monaco.FindMatch||{};\r\n WordAtPosition=Monaco.WordAtPosition=Monaco.WordAtPosition||{};\r\n Model=Monaco.Model=Monaco.Model||{};\r\n MarkDownString=Monaco.MarkDownString=Monaco.MarkDownString||{};\r\n MarkerData=Monaco.MarkerData=Monaco.MarkerData||{};\r\n CompletionItem=Monaco.CompletionItem=Monaco.CompletionItem||{};\r\n Hover=Monaco.Hover=Monaco.Hover||{};\r\n Editor=Monaco.Editor=Monaco.Editor||{};\r\n MonacoConfig=Monaco.MonacoConfig=Monaco.MonacoConfig||{};\r\n MonacoGenAdapter=LibraryJS.MonacoGenAdapter=LibraryJS.MonacoGenAdapter||{};\r\n MonacoRT=MonacoGenAdapter.MonacoRT=MonacoGenAdapter.MonacoRT||{};\r\n CompletionItemProvider=MonacoGenAdapter.CompletionItemProvider=MonacoGenAdapter.CompletionItemProvider||{};\r\n HoverProvider=MonacoGenAdapter.HoverProvider=MonacoGenAdapter.HoverProvider||{};\r\n DefinitionProvider=MonacoGenAdapter.DefinitionProvider=MonacoGenAdapter.DefinitionProvider||{};\r\n AppFrameworkTemplate=LibraryJS.AppFrameworkTemplate=LibraryJS.AppFrameworkTemplate||{};\r\n AppFramework=LibraryJS.AppFramework=LibraryJS.AppFramework||{};\r\n PlgElemName=AppFramework.PlgElemName=AppFramework.PlgElemName||{};\r\n PlugInName=AppFramework.PlugInName=AppFramework.PlugInName||{};\r\n PlugInVar=AppFramework.PlugInVar=AppFramework.PlugInVar||{};\r\n PlugInView=AppFramework.PlugInView=AppFramework.PlugInView||{};\r\n PlugInDoc=AppFramework.PlugInDoc=AppFramework.PlugInDoc||{};\r\n PlugInAction=AppFramework.PlugInAction=AppFramework.PlugInAction||{};\r\n PlugInQuery=AppFramework.PlugInQuery=AppFramework.PlugInQuery||{};\r\n PlugIn=AppFramework.PlugIn=AppFramework.PlugIn||{};\r\n PlugInBuilder=AppFramework.PlugInBuilder=AppFramework.PlugInBuilder||{};\r\n Fun=AppFramework.Fun=AppFramework.Fun||{};\r\n P=AppFramework.P=AppFramework.P||{};\r\n Val=AppFramework.Val=AppFramework.Val||{};\r\n AAttr=AppFramework.AAttr=AppFramework.AAttr||{};\r\n Extract0=AppFramework.Extract0=AppFramework.Extract0||{};\r\n ListModelData=AppFramework.ListModelData=AppFramework.ListModelData||{};\r\n LM=LibraryJS.LM=LibraryJS.LM||{};\r\n StartAppFramework=LibraryJS.StartAppFramework=LibraryJS.StartAppFramework||{};\r\n AppFrameworkUI=LibraryJS.AppFrameworkUI=LibraryJS.AppFrameworkUI||{};\r\n LayoutEngine=LibraryJS.LayoutEngine=LibraryJS.LayoutEngine||{};\r\n LayoutEngineModule=LibraryJS.LayoutEngineModule=LibraryJS.LayoutEngineModule||{};\r\n Measures=LayoutEngineModule.Measures=LayoutEngineModule.Measures||{};\r\n Syntax=LayoutEngineModule.Syntax=LayoutEngineModule.Syntax||{};\r\n RefType=Syntax.RefType=Syntax.RefType||{};\r\n TemplateDef=Syntax.TemplateDef=Syntax.TemplateDef||{};\r\n Layout=LayoutEngineModule.Layout=LayoutEngineModule.Layout||{};\r\n NewLY=LibraryJS.NewLY=LibraryJS.NewLY||{};\r\n P$1=NewLY.P=NewLY.P||{};\r\n Library2=FsRoot.Library2=FsRoot.Library2||{};\r\n FsiAgent=Library2.FsiAgent=Library2.FsiAgent||{};\r\n WebSockets=Library2.WebSockets=Library2.WebSockets||{};\r\n Address=WebSockets.Address=WebSockets.Address||{};\r\n BrokerRequest=WebSockets.BrokerRequest=WebSockets.BrokerRequest||{};\r\n MessageType=WebSockets.MessageType=WebSockets.MessageType||{};\r\n BrokerMessage=WebSockets.BrokerMessage=WebSockets.BrokerMessage||{};\r\n Replier=WebSockets.Replier=WebSockets.Replier||{};\r\n MessageGeneric=WebSockets.MessageGeneric=WebSockets.MessageGeneric||{};\r\n ClientTypeFSharp=WebSockets.ClientTypeFSharp=WebSockets.ClientTypeFSharp||{};\r\n ClientTypeFSStation=WebSockets.ClientTypeFSStation=WebSockets.ClientTypeFSStation||{};\r\n ClientTypeJScript=WebSockets.ClientTypeJScript=WebSockets.ClientTypeJScript||{};\r\n ReplyHandler=WebSockets.ReplyHandler=WebSockets.ReplyHandler||{};\r\n Handler=ReplyHandler.Handler=ReplyHandler.Handler||{};\r\n WSMessagingClient=WebSockets.WSMessagingClient=WebSockets.WSMessagingClient||{};\r\n FSMessage=Library2.FSMessage=Library2.FSMessage||{};\r\n FsAutoComplete=Library2.FsAutoComplete=Library2.FsAutoComplete||{};\r\n CommTypes=FsAutoComplete.CommTypes=FsAutoComplete.CommTypes||{};\r\n ResponseError=CommTypes.ResponseError=CommTypes.ResponseError||{};\r\n Location$1=CommTypes.Location=CommTypes.Location||{};\r\n CompletionResponse=CommTypes.CompletionResponse=CommTypes.CompletionResponse||{};\r\n OverloadDescription=CommTypes.OverloadDescription=CommTypes.OverloadDescription||{};\r\n OverloadParameter=CommTypes.OverloadParameter=CommTypes.OverloadParameter||{};\r\n Overload=CommTypes.Overload=CommTypes.Overload||{};\r\n Parameter=CommTypes.Parameter=CommTypes.Parameter||{};\r\n SignatureData=CommTypes.SignatureData=CommTypes.SignatureData||{};\r\n MethodResponse=CommTypes.MethodResponse=CommTypes.MethodResponse||{};\r\n SymbolUseRange=CommTypes.SymbolUseRange=CommTypes.SymbolUseRange||{};\r\n SymbolUseResponse=CommTypes.SymbolUseResponse=CommTypes.SymbolUseResponse||{};\r\n HelpTextResponse=CommTypes.HelpTextResponse=CommTypes.HelpTextResponse||{};\r\n CompilerLocationResponse=CommTypes.CompilerLocationResponse=CommTypes.CompilerLocationResponse||{};\r\n FSharpErrorInfo=CommTypes.FSharpErrorInfo=CommTypes.FSharpErrorInfo||{};\r\n ErrorResponse=CommTypes.ErrorResponse=CommTypes.ErrorResponse||{};\r\n Colorization=CommTypes.Colorization=CommTypes.Colorization||{};\r\n Declaration=CommTypes.Declaration=CommTypes.Declaration||{};\r\n DeclarationResponse=CommTypes.DeclarationResponse=CommTypes.DeclarationResponse||{};\r\n OpenNamespace=CommTypes.OpenNamespace=CommTypes.OpenNamespace||{};\r\n QualifySymbol=CommTypes.QualifySymbol=CommTypes.QualifySymbol||{};\r\n ResolveNamespaceResponse=CommTypes.ResolveNamespaceResponse=CommTypes.ResolveNamespaceResponse||{};\r\n UnionCaseResponse=CommTypes.UnionCaseResponse=CommTypes.UnionCaseResponse||{};\r\n MsgTypes=FsAutoComplete.MsgTypes=FsAutoComplete.MsgTypes||{};\r\n ParseRequest=MsgTypes.ParseRequest=MsgTypes.ParseRequest||{};\r\n DeclarationsRequest=MsgTypes.DeclarationsRequest=MsgTypes.DeclarationsRequest||{};\r\n CompletionRequest=MsgTypes.CompletionRequest=MsgTypes.CompletionRequest||{};\r\n PositionRequest=MsgTypes.PositionRequest=MsgTypes.PositionRequest||{};\r\n ProjectRequest=MsgTypes.ProjectRequest=MsgTypes.ProjectRequest||{};\r\n LintRequest=MsgTypes.LintRequest=MsgTypes.LintRequest||{};\r\n HelptextRequest=MsgTypes.HelptextRequest=MsgTypes.HelptextRequest||{};\r\n WorkspacePeekRequest=MsgTypes.WorkspacePeekRequest=MsgTypes.WorkspacePeekRequest||{};\r\n Calls=FsAutoComplete.Calls=FsAutoComplete.Calls||{};\r\n FSharpStation=FsRoot.FSharpStation=FsRoot.FSharpStation||{};\r\n FStation=FSharpStation.FStation=FSharpStation.FStation||{};\r\n Snippets=FSharpStation.Snippets=FSharpStation.Snippets||{};\r\n DragDrop=FSharpStation.DragDrop=FSharpStation.DragDrop||{};\r\n DragInfo=DragDrop.DragInfo=DragDrop.DragInfo||{};\r\n Templating=FSharpStation.Templating=FSharpStation.Templating||{};\r\n RenderSnippets=FSharpStation.RenderSnippets=FSharpStation.RenderSnippets||{};\r\n RenderProperties=FSharpStation.RenderProperties=FSharpStation.RenderProperties||{};\r\n Monaco$1=FSharpStation.Monaco=FSharpStation.Monaco||{};\r\n HoverProvider$1=Monaco$1.HoverProvider=Monaco$1.HoverProvider||{};\r\n CompletionItemProvider$1=Monaco$1.CompletionItemProvider=Monaco$1.CompletionItemProvider||{};\r\n DefinitionProvider$1=Monaco$1.DefinitionProvider=Monaco$1.DefinitionProvider||{};\r\n MonacoOptions=Monaco$1.MonacoOptions=Monaco$1.MonacoOptions||{};\r\n ITextModelService=Monaco$1.ITextModelService=Monaco$1.ITextModelService||{};\r\n JumpTo=FSharpStation.JumpTo=FSharpStation.JumpTo||{};\r\n CustomAction=FSharpStation.CustomAction=FSharpStation.CustomAction||{};\r\n Serializer$1=FSharpStation.Serializer=FSharpStation.Serializer||{};\r\n Model$1=Serializer$1.Model=Serializer$1.Model||{};\r\n LoadSave=FSharpStation.LoadSave=FSharpStation.LoadSave||{};\r\n Importer=FSharpStation.Importer=FSharpStation.Importer||{};\r\n MainProgram=FSharpStation.MainProgram=FSharpStation.MainProgram||{};\r\n EndPoint=MainProgram.EndPoint=MainProgram.EndPoint||{};\r\n Messaging=FSharpStation.Messaging=FSharpStation.Messaging||{};\r\n Server=FSharpStation.Server=FSharpStation.Server||{};\r\n SC$1=Global.StartupCode$FSharpStation$FSharpStation=Global.StartupCode$FSharpStation$FSharpStation||{};\r\n FSharpStation_JsonEncoder=Global.FSharpStation_JsonEncoder=Global.FSharpStation_JsonEncoder||{};\r\n FSharpStation_Templates=Global.FSharpStation_Templates=Global.FSharpStation_Templates||{};\r\n FSharpStation_GeneratedPrintf=Global.FSharpStation_GeneratedPrintf=Global.FSharpStation_GeneratedPrintf||{};\r\n FSharpStation_Router=Global.FSharpStation_Router=Global.FSharpStation_Router||{};\r\n GeneratedPrintf=Global.GeneratedPrintf=Global.GeneratedPrintf||{};\r\n FSharpStation_JsonDecoder=Global.FSharpStation_JsonDecoder=Global.FSharpStation_JsonDecoder||{};\r\n IntelliFactory=Global.IntelliFactory;\r\n Runtime=IntelliFactory&&IntelliFactory.Runtime;\r\n Utils=WebSharper&&WebSharper.Utils;\r\n Strings=WebSharper&&WebSharper.Strings;\r\n Seq$1=WebSharper&&WebSharper.Seq;\r\n List=WebSharper&&WebSharper.List;\r\n Arrays=WebSharper&&WebSharper.Arrays;\r\n Concurrency=WebSharper&&WebSharper.Concurrency;\r\n Enumerator=WebSharper&&WebSharper.Enumerator;\r\n Result$1=WebSharper&&WebSharper.Result;\r\n Operators$7=WebSharper&&WebSharper.Operators;\r\n Unchecked=WebSharper&&WebSharper.Unchecked;\r\n Slice=WebSharper&&WebSharper.Slice;\r\n Char=WebSharper&&WebSharper.Char;\r\n Control=WebSharper&&WebSharper.Control;\r\n MailboxProcessor=Control&&Control.MailboxProcessor;\r\n System=Global.System;\r\n Guid=System&&System.Guid;\r\n Collections=WebSharper&&WebSharper.Collections;\r\n FSharpSet=Collections&&Collections.FSharpSet;\r\n Option$1=WebSharper&&WebSharper.Option;\r\n Date=Global.Date;\r\n UI=WebSharper&&WebSharper.UI;\r\n Var$1=UI&&UI.Var$1;\r\n View$1=UI&&UI.View;\r\n CancellationTokenSource=WebSharper&&WebSharper.CancellationTokenSource;\r\n console=Global.console;\r\n Var$2=UI&&UI.Var;\r\n FromView=UI&&UI.FromView;\r\n Doc=UI&&UI.Doc;\r\n FSharpMap=Collections&&Collections.FSharpMap;\r\n BalancedTree=Collections&&Collections.BalancedTree;\r\n DomUtility=UI&&UI.DomUtility;\r\n AttrModule=UI&&UI.AttrModule;\r\n AttrProxy=UI&&UI.AttrProxy;\r\n Node$1=Global.Node;\r\n Client=UI&&UI.Client;\r\n Templates=Client&&Client.Templates;\r\n Reflect=Global.Reflect;\r\n Object=Global.Object;\r\n Lazy=WebSharper&&WebSharper.Lazy;\r\n Templating$1=UI&&UI.Templating;\r\n Runtime$1=Templating$1&&Templating$1.Runtime;\r\n Server$1=Runtime$1&&Runtime$1.Server;\r\n ProviderBuilder=Server$1&&Server$1.ProviderBuilder;\r\n Handler$1=Server$1&&Server$1.Handler;\r\n TemplateInstance=Server$1&&Server$1.TemplateInstance;\r\n ListModel$1=UI&&UI.ListModel;\r\n Math=Global.Math;\r\n Dictionary=Collections&&Collections.Dictionary;\r\n MatchFailureException=WebSharper&&WebSharper.MatchFailureException;\r\n Map=Collections&&Collections.Map;\r\n JSON=Global.JSON;\r\n TimeoutException=WebSharper&&WebSharper.TimeoutException;\r\n ClientSideJson=WebSharper&&WebSharper.ClientSideJson;\r\n Provider=ClientSideJson&&ClientSideJson.Provider;\r\n Owin=WebSharper&&WebSharper.Owin;\r\n WebSocket=Owin&&Owin.WebSocket;\r\n Client$1=WebSocket&&WebSocket.Client;\r\n WithEncoding=Client$1&&Client$1.WithEncoding;\r\n Endpoint=WebSocket&&WebSocket.Endpoint;\r\n location=Global.location;\r\n Remoting=WebSharper&&WebSharper.Remoting;\r\n AjaxRemotingProvider=Remoting&&Remoting.AjaxRemotingProvider;\r\n JavaScript=WebSharper&&WebSharper.JavaScript;\r\n Promise$1=JavaScript&&JavaScript.Promise;\r\n DateUtil=WebSharper&&WebSharper.DateUtil;\r\n Numeric=WebSharper&&WebSharper.Numeric;\r\n Attrs=UI&&UI.Attrs;\r\n Input=UI&&UI.Input;\r\n Mouse=Input&&Input.Mouse;\r\n Keyboard=Input&&Input.Keyboard;\r\n Router=UI&&UI.Router;\r\n Sitelets=WebSharper&&WebSharper.Sitelets;\r\n RouterOperators=Sitelets&&Sitelets.RouterOperators;\r\n StringId=Library.StringId=Runtime.Class({\r\n  get_Id:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,StringId);\r\n GuidId=Library.GuidId=Runtime.Class({\r\n  get_Id:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,GuidId);\r\n Dict.add=function(key,v,dict)\r\n {\r\n  if(dict.ContainsKey(key))\r\n   dict.set_Item(key,v);\r\n  else\r\n   dict.Add(key,v);\r\n };\r\n ResultMessage=Library.ResultMessage=Runtime.Class({\r\n  toString:function()\r\n  {\r\n   return this.$==1?(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"Error    : \"+Utils.toSafe($2));\r\n    };\r\n   }(Global.id))(this.$0):this.$==2?(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"Warning  : \"+Utils.toSafe($2));\r\n    };\r\n   }(Global.id))(this.$0):this.$==3?this.$0:this.$==4?(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Global.String($2));\r\n    };\r\n   }(Global.id))(this.$0):this.$==5?(((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"Exception: \"+Utils.toSafe($2)+\", \"+Utils.toSafe($3));\r\n   }))(Global.id))(this.$0))(this.$1):this.$==6?Strings.concat(\"\\n\",Seq$1.map(Global.String,Seq$1.filter(function(a)\r\n   {\r\n    return a.$!=0;\r\n   },this.$0))):\"\";\r\n  }\r\n },null,ResultMessage);\r\n ResultMessage.NoMsg=new ResultMessage({\r\n  $:0\r\n });\r\n ResultMessageHelpers.infof=function(fmt)\r\n {\r\n  return fmt(function(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:3,\r\n    $0:a\r\n   });\r\n  });\r\n };\r\n ResultMessageHelpers.warningf=function(fmt)\r\n {\r\n  return fmt(function(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:2,\r\n    $0:a\r\n   });\r\n  });\r\n };\r\n ResultMessageHelpers.errorMsgf=function(fmt)\r\n {\r\n  return fmt(function(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:1,\r\n    $0:a\r\n   });\r\n  });\r\n };\r\n ResultMessage.summarizedI=function(msg)\r\n {\r\n  return ResultMessage.summarizedF(function()\r\n  {\r\n   return[0,0,1];\r\n  },msg);\r\n };\r\n ResultMessage.summarizedW=function(msg)\r\n {\r\n  return ResultMessage.summarizedF(function()\r\n  {\r\n   return[0,1,0];\r\n  },msg);\r\n };\r\n ResultMessage.summarized=function(msg)\r\n {\r\n  return ResultMessage.summarizedF(function()\r\n  {\r\n   return[1,0,0];\r\n  },msg);\r\n };\r\n ResultMessage.summarizedF=function(f,msg)\r\n {\r\n  return Strings.concat(\"\\n\",Seq$1.filter(function(y)\r\n  {\r\n   return\"\"!==y;\r\n  },List.ofArray([Global.String(msg),ResultMessage.summaryF(f,msg)])));\r\n };\r\n ResultMessage.summaryF=function(f,msg)\r\n {\r\n  var $1,m;\r\n  m=ResultMessage.countF(f,msg);\r\n  switch(m[0]===0?m[1]===0?0:m[1]===1?m[2]===0?0:($1=m[1],2):($1=m[1],2):m[0]===1?m[1]===0?m[2]===0?0:($1=m[0],1):($1=[m[0],m[1]],3):m[1]===0?($1=m[0],1):($1=[m[0],m[1]],3))\r\n  {\r\n   case 0:\r\n    return\"\";\r\n   case 1:\r\n    return(function($2)\r\n    {\r\n     return function($3)\r\n     {\r\n      return $2(\"Errors   : \"+Global.String($3)+\"\\n\");\r\n     };\r\n    }(Global.id))($1);\r\n   case 2:\r\n    return(function($2)\r\n    {\r\n     return function($3)\r\n     {\r\n      return $2(\"Warnings : \"+Global.String($3)+\"\\n\");\r\n     };\r\n    }(Global.id))($1);\r\n   case 3:\r\n    return(((Runtime.Curried3(function($2,$3,$4)\r\n    {\r\n     return $2(\"Errors   : \"+Global.String($3)+\", Warnings: \"+Global.String($4)+\"\\n\");\r\n    }))(Global.id))($1[0]))($1[1]);\r\n  }\r\n };\r\n ResultMessage.reduceMsgs=function(ms)\r\n {\r\n  return Seq$1.fold(ResultMessage.addMsg,ResultMessage.NoMsg,ms);\r\n };\r\n ResultMessage.addMsg=function(a,b)\r\n {\r\n  return a.$==0?b:a.$==6?b.$==0?a:b.$==6?new ResultMessage({\r\n   $:6,\r\n   $0:a.$0.concat(b.$0)\r\n  }):new ResultMessage({\r\n   $:6,\r\n   $0:a.$0.concat([b])\r\n  }):b.$==0?a:b.$==6?new ResultMessage({\r\n   $:6,\r\n   $0:[a].concat(b.$0)\r\n  }):new ResultMessage({\r\n   $:6,\r\n   $0:[a,b]\r\n  });\r\n };\r\n ResultMessage.countI=function(msg)\r\n {\r\n  return ResultMessage.countF(function()\r\n  {\r\n   return[0,0,1];\r\n  },msg);\r\n };\r\n ResultMessage.countW=function(msg)\r\n {\r\n  return ResultMessage.countF(function()\r\n  {\r\n   return[0,1,0];\r\n  },msg);\r\n };\r\n ResultMessage.count=function(msg)\r\n {\r\n  return ResultMessage.countF(function()\r\n  {\r\n   return[1,0,0];\r\n  },msg);\r\n };\r\n ResultMessage.countF=function(f,msg)\r\n {\r\n  function f$1(f$2,w,i)\r\n  {\r\n   return function(t)\r\n   {\r\n    return[f$2+t[0],w+t[1],i+t[2]];\r\n   };\r\n  }\r\n  return msg.$==0?[0,0,0]:msg.$==3?[0,0,1]:msg.$==2?[0,1,0]:msg.$==4?f(msg.$0):msg.$==6?Seq$1.fold(function($1,$2)\r\n  {\r\n   return(function($3)\r\n   {\r\n    return f$1($3[0],$3[1],$3[2]);\r\n   }($1))($2);\r\n  },[0,0,0],Seq$1.map(function(m)\r\n  {\r\n   return ResultMessage.countF(f,m);\r\n  },ResultMessage.exclnoMsg(msg.$0))):[1,0,0];\r\n };\r\n ResultMessage.isFatalW=function(msg)\r\n {\r\n  return ResultMessage.isFatalF(function()\r\n  {\r\n   return false;\r\n  },msg);\r\n };\r\n ResultMessage.isFatal=function(msg)\r\n {\r\n  return ResultMessage.isFatalF(function()\r\n  {\r\n   return true;\r\n  },msg);\r\n };\r\n ResultMessage.isFatalF=function(f,msg)\r\n {\r\n  return msg.$==0?false:msg.$==3?false:msg.$==2?false:msg.$==4?f(msg.$0):msg.$==6?Seq$1.exists(function(m)\r\n  {\r\n   return ResultMessage.isFatalF(f,m);\r\n  },msg.$0):true;\r\n };\r\n ResultMessage.isWarningOrInfoW=function(msg)\r\n {\r\n  return ResultMessage.isWarningOrInfoF(function()\r\n  {\r\n   return true;\r\n  },msg);\r\n };\r\n ResultMessage.isWarningOrInfo=function(msg)\r\n {\r\n  return ResultMessage.isWarningOrInfoF(function()\r\n  {\r\n   return false;\r\n  },msg);\r\n };\r\n ResultMessage.isWarningOrInfoF=function(f,msg)\r\n {\r\n  return msg.$==2||(msg.$==4?f(msg.$0):msg.$==6&&Seq$1.forall(function(m)\r\n  {\r\n   return ResultMessage.isWarningOrInfoF(f,m)||ResultMessage.isInfoF(f,m);\r\n  },ResultMessage.exclnoMsg(msg.$0)));\r\n };\r\n ResultMessage.isInfoI=function(msg)\r\n {\r\n  return ResultMessage.isInfoF(function()\r\n  {\r\n   return true;\r\n  },msg);\r\n };\r\n ResultMessage.isInfo=function(msg)\r\n {\r\n  return ResultMessage.isInfoF(function()\r\n  {\r\n   return false;\r\n  },msg);\r\n };\r\n ResultMessage.isInfoF=function(f,msg)\r\n {\r\n  return msg.$==3||(msg.$==4?f(msg.$0):msg.$==6&&Seq$1.forall(function(m)\r\n  {\r\n   return ResultMessage.isInfoF(f,m);\r\n  },ResultMessage.exclnoMsg(msg.$0)));\r\n };\r\n ResultMessage.freeMessageI=function(msg)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:3,\r\n    $0:a\r\n   });\r\n  }\r\n  return ResultMessage.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),msg);\r\n };\r\n ResultMessage.freeMessageW=function(msg)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:2,\r\n    $0:a\r\n   });\r\n  }\r\n  return ResultMessage.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),msg);\r\n };\r\n ResultMessage.freeMessage=function(msg)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:1,\r\n    $0:a\r\n   });\r\n  }\r\n  return ResultMessage.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),msg);\r\n };\r\n ResultMessage.freeMessageF=function(f,msg)\r\n {\r\n  return ResultMessage.bindMessage(f,msg);\r\n };\r\n ResultMessage.bindMessage=function(f,msg)\r\n {\r\n  return msg.$==4?f(msg.$0):msg.$==1?new ResultMessage({\r\n   $:1,\r\n   $0:msg.$0\r\n  }):msg.$==3?new ResultMessage({\r\n   $:3,\r\n   $0:msg.$0\r\n  }):msg.$==2?new ResultMessage({\r\n   $:2,\r\n   $0:msg.$0\r\n  }):msg.$==5?new ResultMessage({\r\n   $:5,\r\n   $0:msg.$0,\r\n   $1:msg.$1\r\n  }):msg.$==6?new ResultMessage({\r\n   $:6,\r\n   $0:Arrays.map(function(m)\r\n   {\r\n    return ResultMessage.bindMessage(f,m);\r\n   },msg.$0)\r\n  }):ResultMessage.NoMsg;\r\n };\r\n ResultMessage.exclnoMsg=function(ms)\r\n {\r\n  function g(v)\r\n  {\r\n   return!v;\r\n  }\r\n  return Seq$1.filter(function(x)\r\n  {\r\n   return g(ResultMessage.noMsg(x));\r\n  },ms);\r\n };\r\n ResultMessage.noMsg=function(msg)\r\n {\r\n  return msg.$==0;\r\n };\r\n Seq.ofOption=function(vO)\r\n {\r\n  return vO==null?[]:[vO.$0];\r\n };\r\n Seq.absorbR=function(vOS)\r\n {\r\n  return Seq$1.choose(function(a)\r\n  {\r\n   return a.$==0?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },vOS);\r\n };\r\n Seq.absorbO=function(vOS)\r\n {\r\n  return Seq$1.choose(Global.id,vOS);\r\n };\r\n Seq.insertR=function(vSR)\r\n {\r\n  return vSR.$==0?Seq$1.map(function(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  },vSR.$0):(Seq.rtn())(Library.Error(vSR.$0));\r\n };\r\n Seq.insertO=function(vSO)\r\n {\r\n  var o;\r\n  o=vSO==null?null:{\r\n   $:1,\r\n   $0:Seq$1.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vSO.$0)\r\n  };\r\n  return o==null?(Seq.rtn())(null):o.$0;\r\n };\r\n Seq.rtn=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rtn;\r\n };\r\n Option.absorbR=function(vRO)\r\n {\r\n  var $1,c;\r\n  return vRO!=null&&vRO.$==1&&(c=vRO.$0,c.$==0&&($1=c.$0,true))?{\r\n   $:1,\r\n   $0:$1\r\n  }:null;\r\n };\r\n Option.insertR=function(vOR)\r\n {\r\n  var x;\r\n  return vOR.$==0?(x=vOR.$0,x==null?null:{\r\n   $:1,\r\n   $0:{\r\n    $:0,\r\n    $0:x.$0\r\n   }\r\n  }):Option.rtn(Library.Error(vOR.$0));\r\n };\r\n Option.sequenceSeq=function(sq)\r\n {\r\n  return Option.traverseSeq(Global.id,sq);\r\n };\r\n Option.traverseSeq=function(f,sq)\r\n {\r\n  var o;\r\n  o=Arrays.foldBack(function(head,tail)\r\n  {\r\n   return Option.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return Option.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return Option.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),Option.rtn(List.T.Empty));\r\n  return o==null?null:{\r\n   $:1,\r\n   $0:o.$0\r\n  };\r\n };\r\n Option.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return v==null?null:f(v.$0);\r\n };\r\n Option.bindNone=function(f,o)\r\n {\r\n  return o!=null&&o.$==1?{\r\n   $:1,\r\n   $0:o.$0\r\n  }:f();\r\n };\r\n Option.mapNone=function(f,o)\r\n {\r\n  return o==null?f():o.$0;\r\n };\r\n Option.apply=function(fO,vO)\r\n {\r\n  var $1;\r\n  return fO!=null&&fO.$==1&&(vO!=null&&vO.$==1&&($1=[fO.$0,vO.$0],true))?{\r\n   $:1,\r\n   $0:$1[0]($1[1])\r\n  }:null;\r\n };\r\n Option.join=function(o)\r\n {\r\n  return o==null?null:o.$0;\r\n };\r\n Option.iter=function(f)\r\n {\r\n  function f$1(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:f(o.$0)\r\n   };\r\n  }\r\n  function g(o)\r\n  {\r\n   if(o==null)\r\n    ;\r\n  }\r\n  return function(x)\r\n  {\r\n   return g(f$1(x));\r\n  };\r\n };\r\n Option.rtn=function(a)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:a\r\n  };\r\n };\r\n Async.insertR=function(vAR)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return vAR.$==0?Concurrency.Bind(vAR.$0,function(x)\r\n  {\r\n   return g(f(x));\r\n  }):Concurrency.Return(Library.Error(vAR.$0));\r\n };\r\n Async.insertO=function(vAO)\r\n {\r\n  var o;\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  o=vAO==null?null:{\r\n   $:1,\r\n   $0:Concurrency.Bind(vAO.$0,function(x)\r\n   {\r\n    return g(f(x));\r\n   })\r\n  };\r\n  return o==null?Concurrency.Return(null):o.$0;\r\n };\r\n Async.sequenceSeqS=function(sq)\r\n {\r\n  throw\"traverseSeqS cannot be used in JavaScript!\";\r\n };\r\n Async.sequenceSeq=function(sq)\r\n {\r\n  return Async.traverseSeq(Global.id,sq);\r\n };\r\n Async.traverseSeq=function(f,sq)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(Arrays.foldBack(function(head,tail)\r\n  {\r\n   return Async.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return Async.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return Concurrency.Return(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),Concurrency.Return(List.T.Empty)),function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  });\r\n };\r\n Async.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return Concurrency.Bind(v,f);\r\n };\r\n Async.sleepThen=function(f,milliseconds)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Concurrency.Sleep(milliseconds),function()\r\n   {\r\n    return Concurrency.Return(f());\r\n   });\r\n  });\r\n };\r\n Async.apply=function(fA,vA)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Concurrency.StartChild(fA,null),function(a)\r\n   {\r\n    return Concurrency.Bind(Concurrency.StartChild(vA,null),function(a$1)\r\n    {\r\n     return Concurrency.Bind(a,function(a$2)\r\n     {\r\n      return Concurrency.Bind(a$1,function(a$3)\r\n      {\r\n       return Concurrency.Return(a$2(a$3));\r\n      });\r\n     });\r\n    });\r\n   });\r\n  });\r\n };\r\n CEBuilder=State.CEBuilder=Runtime.Class({\r\n  Delay:function(f)\r\n  {\r\n   return f();\r\n  },\r\n  Return:function(v)\r\n  {\r\n   return function(s)\r\n   {\r\n    return State.rtn(v,s);\r\n   };\r\n  },\r\n  Bind:function(m,f)\r\n  {\r\n   return function(s)\r\n   {\r\n    return State.bind(f,m,s);\r\n   };\r\n  }\r\n },Obj,CEBuilder);\r\n CEBuilder.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },CEBuilder);\r\n Operators.op_BarGreaterGreater=function(ma,f)\r\n {\r\n  return(State.map(f))(ma);\r\n };\r\n Operators.op_GreaterGreaterEquals=function(ma,f)\r\n {\r\n  return function(s)\r\n  {\r\n   return State.bind(f,ma,s);\r\n  };\r\n };\r\n State.state=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.state;\r\n };\r\n State.map=function(f)\r\n {\r\n  var f$1;\r\n  f$1=function(x)\r\n  {\r\n   var $1;\r\n   $1=f(x);\r\n   return function($2)\r\n   {\r\n    return State.rtn($1,$2);\r\n   };\r\n  };\r\n  return(Runtime.Curried3(State.bind))(f$1);\r\n };\r\n State.bind=function(f,ma,s1)\r\n {\r\n  var p;\r\n  p=ma(s1);\r\n  return(f(p[1]))(p[0]);\r\n };\r\n State.rtn=function(v,s)\r\n {\r\n  return[s,v];\r\n };\r\n Builder=Result.Builder=Runtime.Class({\r\n  For:function(sequence,body)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(sequence),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return body(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  While:function(guard,body)\r\n  {\r\n   function whileLoop(guard$1,body$1)\r\n   {\r\n    return guard$1()?Result$1.Bind(function()\r\n    {\r\n     return whileLoop(guard$1,body$1);\r\n    },body$1()):Result.rtn();\r\n   }\r\n   return whileLoop(guard,body);\r\n  },\r\n  Using:function(disposable,body)\r\n  {\r\n   try\r\n   {\r\n    return body(disposable);\r\n   }\r\n   finally\r\n   {\r\n    disposable.Dispose();\r\n   }\r\n  },\r\n  TryFinally:function(body,compensation)\r\n  {\r\n   try\r\n   {\r\n    return body();\r\n   }\r\n   finally\r\n   {\r\n    compensation();\r\n   }\r\n  },\r\n  TryWith:function(body,handler)\r\n  {\r\n   try\r\n   {\r\n    return body();\r\n   }\r\n   catch(e)\r\n   {\r\n    return handler(e);\r\n   }\r\n  },\r\n  Run:function(f)\r\n  {\r\n   return Result$1.Bind(f,{\r\n    $:0,\r\n    $0:null\r\n   });\r\n  },\r\n  Combine:function(a,b)\r\n  {\r\n   return Result$1.Bind(b,a);\r\n  },\r\n  Delay:Global.id,\r\n  Zero:function()\r\n  {\r\n   return Result.rtn();\r\n  },\r\n  Bind:function(w,r)\r\n  {\r\n   return Result$1.Bind(r,w);\r\n  },\r\n  ReturnFrom:Global.id,\r\n  Return:function(x)\r\n  {\r\n   return Result.rtn(x);\r\n  }\r\n },Obj,Builder);\r\n Builder.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },Builder);\r\n Operators$1.result=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.result$1;\r\n };\r\n Operators$1.rtn=function(v)\r\n {\r\n  return Result.rtn(v);\r\n };\r\n Operators$1.op_GreaterEqualsGreater=function(f,g,v)\r\n {\r\n  return Operators$1.op_GreaterGreaterEquals(f(v),g);\r\n };\r\n Operators$1.op_RightShift=function(f,g,v)\r\n {\r\n  return Operators$1.op_BarGreaterGreater(f(v),g);\r\n };\r\n Operators$1.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return Result$1.Bind(f,v);\r\n };\r\n Operators$1.op_BarGreaterGreater=function(v,f)\r\n {\r\n  return Result$1.Map(f,v);\r\n };\r\n BuilderP=Result.BuilderP=Runtime.Class({\r\n  For:function(sequence,body)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(sequence),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return body(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  While:function(guard,body)\r\n  {\r\n   function whileLoop(guard$1,body$1)\r\n   {\r\n    return guard$1()?Result$1.Bind(function()\r\n    {\r\n     return whileLoop(guard$1,body$1);\r\n    },body$1()):Result.rtn();\r\n   }\r\n   return whileLoop(guard,body);\r\n  },\r\n  Using:function(disposable,body)\r\n  {\r\n   try\r\n   {\r\n    return body(disposable);\r\n   }\r\n   finally\r\n   {\r\n    disposable.Dispose();\r\n   }\r\n  },\r\n  TryFinally:function(body,compensation)\r\n  {\r\n   try\r\n   {\r\n    return body();\r\n   }\r\n   finally\r\n   {\r\n    compensation();\r\n   }\r\n  },\r\n  TryWith:function(body,handler)\r\n  {\r\n   try\r\n   {\r\n    return body();\r\n   }\r\n   catch(e)\r\n   {\r\n    return handler(e);\r\n   }\r\n  },\r\n  Run:function(f)\r\n  {\r\n   return Result.bindP(f,{\r\n    $:0,\r\n    $0:null\r\n   });\r\n  },\r\n  Combine:function(a,b)\r\n  {\r\n   return Result$1.Bind(b,a);\r\n  },\r\n  Delay:Global.id,\r\n  Zero:function()\r\n  {\r\n   return Result.rtn();\r\n  },\r\n  Bind:function(w,r)\r\n  {\r\n   return Result$1.Bind(r,w);\r\n  },\r\n  ReturnFrom:Global.id,\r\n  Return:function(x)\r\n  {\r\n   return Result.rtn(x);\r\n  }\r\n },Obj,BuilderP);\r\n BuilderP.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },BuilderP);\r\n Result.resultP=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.resultP;\r\n };\r\n Result.iterP=function(fE,f,r)\r\n {\r\n  Result.defaultWith(fE,Result.mapP(f,r));\r\n };\r\n Result.mapP=function(f,m)\r\n {\r\n  return Result.bindP(function(x)\r\n  {\r\n   return Result.rtn(f(x));\r\n  },m);\r\n };\r\n Result.bindP=function(f,r)\r\n {\r\n  if(r.$==1)\r\n   return Library.Error(r.$0);\r\n  else\r\n   try\r\n   {\r\n    return f(r.$0);\r\n   }\r\n   catch(e)\r\n   {\r\n    return Library.Error(new ResultMessage({\r\n     $:5,\r\n     $0:e.message,\r\n     $1:e.stack\r\n    }));\r\n   }\r\n };\r\n Result.freeMessage=function(r)\r\n {\r\n  return r.$==1?Library.Error(ResultMessage.freeMessage(r.$0)):{\r\n   $:0,\r\n   $0:r.$0\r\n  };\r\n };\r\n Result.result=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.result;\r\n };\r\n Result.sequenceSeq=function(sq)\r\n {\r\n  return Result.traverseSeq(Global.id,sq);\r\n };\r\n Result.traverseSeq=function(f,sq)\r\n {\r\n  return Result$1.Map(Global.id,Arrays.foldBack(function(head,tail)\r\n  {\r\n   return Result.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return Result.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return Result.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),Result.rtn(List.T.Empty)));\r\n };\r\n Result.op_GreaterGreaterEquals=function(r,f)\r\n {\r\n  return Result$1.Bind(f,r);\r\n };\r\n Result.absorbO=function(f,vOR)\r\n {\r\n  return Result$1.Bind(function(v)\r\n  {\r\n   return Result.ofOption(f,v);\r\n  },vOR);\r\n };\r\n Result.insertO=function(vRO)\r\n {\r\n  var o;\r\n  o=vRO==null?null:{\r\n   $:1,\r\n   $0:Result$1.Map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vRO.$0)\r\n  };\r\n  return o==null?{\r\n   $:0,\r\n   $0:null\r\n  }:o.$0;\r\n };\r\n Result.ofOption=function(f,vO)\r\n {\r\n  var o;\r\n  o=vO==null?null:{\r\n   $:1,\r\n   $0:{\r\n    $:0,\r\n    $0:vO.$0\r\n   }\r\n  };\r\n  return o==null?function(x)\r\n  {\r\n   return Library.Error(f(x));\r\n  }():o.$0;\r\n };\r\n Result.get=function(r)\r\n {\r\n  return Result.defaultWith(function(x)\r\n  {\r\n   return Operators$7.FailWith(Global.String(x));\r\n  },r);\r\n };\r\n Result.iter=function(fE,f,r)\r\n {\r\n  Result.defaultWith(fE,Result$1.Map(f,r));\r\n };\r\n Result.failIfFalse=function(m,v)\r\n {\r\n  return!v?Library.Error(m):{\r\n   $:0,\r\n   $0:null\r\n  };\r\n };\r\n Result.failIfTrue=function(m,v)\r\n {\r\n  return v?Library.Error(m):{\r\n   $:0,\r\n   $0:null\r\n  };\r\n };\r\n Result.defaultValue=function(d,r)\r\n {\r\n  return r.$==1?d:r.$0;\r\n };\r\n Result.defaultWith=function(f,r)\r\n {\r\n  return r.$==1?f(r.$0):r.$0;\r\n };\r\n Result.toOption=function(r)\r\n {\r\n  return r.$==0?{\r\n   $:1,\r\n   $0:r.$0\r\n  }:null;\r\n };\r\n Result.flatten=function(r)\r\n {\r\n  return Result$1.Bind(Global.id,r);\r\n };\r\n Result.join=function(r)\r\n {\r\n  return Result$1.Bind(Global.id,r);\r\n };\r\n Result.rtn=function(a)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:a\r\n  };\r\n };\r\n Result.errorf=function(fmt)\r\n {\r\n  return fmt(Library.Error);\r\n };\r\n DependBuilder=Depend.DependBuilder=Runtime.Class({\r\n  Delay:function(f)\r\n  {\r\n   return f();\r\n  },\r\n  Return:function(v)\r\n  {\r\n   return Depend.rtn(v);\r\n  },\r\n  Bind:function(m,f)\r\n  {\r\n   return Depend.bind(f,m);\r\n  }\r\n },Obj,DependBuilder);\r\n DependBuilder.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },DependBuilder);\r\n Operators$2.op_GreaterMultiplyGreater=function(g,mf)\r\n {\r\n  var b;\r\n  b=Operators$2.depend();\r\n  return b.Delay(function()\r\n  {\r\n   return b.Bind(mf,function(a)\r\n   {\r\n    return b.Return(function(x)\r\n    {\r\n     return a(g(x));\r\n    });\r\n   });\r\n  });\r\n };\r\n Operators$2.op_LessMultiplyGreater=function(mf,mp)\r\n {\r\n  return Depend.apply(mf,mp);\r\n };\r\n Operators$2.op_GreaterEqualsMultiply=function(mp,mf)\r\n {\r\n  return Depend.apply(mf,mp);\r\n };\r\n Operators$2.op_BarMultiplyGreater=function(p,mf)\r\n {\r\n  return Depend.apply(mf,(Operators$2.rtn())(p));\r\n };\r\n Operators$2.op_BarGreaterGreater=function(ma,f)\r\n {\r\n  return(Depend.map(f))(ma);\r\n };\r\n Operators$2.op_GreaterGreaterEquals=function(ma,f)\r\n {\r\n  return Depend.bind(f,ma);\r\n };\r\n Operators$2.depend=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.depend$1;\r\n };\r\n Operators$2.rtn=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rtn$1;\r\n };\r\n Depend.toString=function(dep)\r\n {\r\n  return Strings.concat(\"\\n\",Seq$1.sort(Seq$1.distinct(Seq$1.map(function(a)\r\n  {\r\n   var $1,$2;\r\n   return(a.$==0?($2=a.$0,$2!=null&&$2.$==1)?($1=[a.$1,a.$0.$0[0],a.$0.$0[1]],true):($1=a,false):($1=a,false))?(((Runtime.Curried3(function($3,$4,$5)\r\n   {\r\n    return $3(Strings.PadRight(Utils.toSafe($4),50)+\" \"+Utils.prettyPrint($5));\r\n   }))(Global.id))($1[1]))($1[2]):Global.String($1);\r\n  },Depend.getDependencies(dep)))));\r\n };\r\n Depend.getDependencies=function(dep)\r\n {\r\n  return List.rev(List.filter(function(a)\r\n  {\r\n   return a.$==0?a.$0!=null:true;\r\n  },function(lst,dep$1)\r\n  {\r\n   var $1,lst2,k,v,k$1;\r\n   while(true)\r\n    {\r\n     lst2=new List.T({\r\n      $:1,\r\n      $0:dep$1,\r\n      $1:lst\r\n     });\r\n     if(dep$1.$==1)\r\n      return lst2;\r\n     else\r\n      if($1=dep$1.$0,$1!=null&&$1.$==1)\r\n       {\r\n        k=dep$1.$1;\r\n        v=dep$1.$0.$0[1];\r\n        lst=lst2;\r\n        dep$1=k(v);\r\n       }\r\n      else\r\n       {\r\n        k$1=dep$1.$1;\r\n        lst=lst2;\r\n        dep$1=k$1(void 0);\r\n       }\r\n    }\r\n  }(List.T.Empty,dep)));\r\n };\r\n Depend.depend=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.depend;\r\n };\r\n Depend.resolver=function(lst,depend)\r\n {\r\n  function resolve(a)\r\n  {\r\n   var $1,k,nm,o,o$1;\r\n   function f(t)\r\n   {\r\n    return t[0];\r\n   }\r\n   function g(y)\r\n   {\r\n    return nm===y;\r\n   }\r\n   return a.$==1?a.$0:($1=a.$0,$1!=null&&$1.$==1)?(k=a.$1,(nm=a.$0.$0[0],resolve((o=(o$1=Seq$1.tryFind(function(x)\r\n   {\r\n    return g(f(x));\r\n   },lst),o$1==null?null:{\r\n    $:1,\r\n    $0:k(o$1.$0[1])\r\n   }),o==null?k(a.$0.$0[1]):o.$0)))):resolve(a.$1(void 0));\r\n  }\r\n  return resolve(depend);\r\n };\r\n Depend.replacerDef=function(lst,depend)\r\n {\r\n  function replace(a)\r\n  {\r\n   var $1,k,nm,o,o$1,$2,f;\r\n   function p(a$1,a$2)\r\n   {\r\n    return a$2[0]===nm;\r\n   }\r\n   return a.$==1?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:($1=a.$0,$1!=null&&$1.$==1)?(k=a.$1,(nm=a.$0.$0[0],(o=(o$1=Seq$1.tryFind(function($3)\r\n   {\r\n    return p($3[0],$3[1]);\r\n   },lst),o$1==null?null:{\r\n    $:1,\r\n    $0:($2=o$1.$0,{\r\n     $:0,\r\n     $0:{\r\n      $:1,\r\n      $0:[$2[0],$2[1][1]]\r\n     },\r\n     $1:function(x)\r\n     {\r\n      return replace(k(x));\r\n     }\r\n    })\r\n   }),o==null?{\r\n    $:0,\r\n    $0:{\r\n     $:1,\r\n     $0:[nm,a.$0.$0[1]]\r\n    },\r\n    $1:function(x)\r\n    {\r\n     return replace(k(x));\r\n    }\r\n   }:o.$0))):{\r\n    $:0,\r\n    $0:null,\r\n    $1:(f=a.$1,function(x)\r\n    {\r\n     return replace(f(x));\r\n    })\r\n   };\r\n  }\r\n  return replace(depend);\r\n };\r\n Depend.replacer=function(lst,depend)\r\n {\r\n  function replace(a)\r\n  {\r\n   var $1,k,nm,o,o$1,f;\r\n   function f$1(t)\r\n   {\r\n    return t[0];\r\n   }\r\n   function g(y)\r\n   {\r\n    return nm===y;\r\n   }\r\n   return a.$==1?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:($1=a.$0,$1!=null&&$1.$==1)?(k=a.$1,(nm=a.$0.$0[0],(o=(o$1=Seq$1.tryFind(function(x)\r\n   {\r\n    return g(f$1(x));\r\n   },lst),o$1==null?null:{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:{\r\n      $:1,\r\n      $0:[nm,o$1.$0[1]]\r\n     },\r\n     $1:function(x)\r\n     {\r\n      return replace(k(x));\r\n     }\r\n    }\r\n   }),o==null?{\r\n    $:0,\r\n    $0:{\r\n     $:1,\r\n     $0:[nm,a.$0.$0[1]]\r\n    },\r\n    $1:function(x)\r\n    {\r\n     return replace(k(x));\r\n    }\r\n   }:o.$0))):{\r\n    $:0,\r\n    $0:null,\r\n    $1:(f=a.$1,function(x)\r\n    {\r\n     return replace(f(x));\r\n    })\r\n   };\r\n  }\r\n  return replace(depend);\r\n };\r\n Depend.apply=function(fR,vR)\r\n {\r\n  return Depend.bind(function(b)\r\n  {\r\n   return(Depend.map(b))(vR);\r\n  },fR);\r\n };\r\n Depend.map=function(f)\r\n {\r\n  var f$1;\r\n  f$1=function(x)\r\n  {\r\n   return Depend.rtn(f(x));\r\n  };\r\n  return function(p)\r\n  {\r\n   return Depend.bind(f$1,p);\r\n  };\r\n };\r\n Depend.rtn=function(a)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:a\r\n  };\r\n };\r\n Depend.bind=function(f,pa)\r\n {\r\n  function bindR(a)\r\n  {\r\n   var v,k;\r\n   return a.$==1?(v=a.$0,{\r\n    $:0,\r\n    $0:null,\r\n    $1:function()\r\n    {\r\n     return f(v);\r\n    }\r\n   }):(k=a.$1,{\r\n    $:0,\r\n    $0:a.$0,\r\n    $1:function(p)\r\n    {\r\n     return bindR(k(p));\r\n    }\r\n   });\r\n  }\r\n  return bindR(pa);\r\n };\r\n Depend.dependByName=function(nm,defF,kf)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:{\r\n    $:1,\r\n    $0:[nm,defF]\r\n   },\r\n   $1:function(f)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:kf(f)\r\n    };\r\n   }\r\n  };\r\n };\r\n Operators$3.rtn=function(v)\r\n {\r\n  return FusionM.rtn(v);\r\n };\r\n Operators$3.op_GreaterEqualsGreater=function(f,g,v)\r\n {\r\n  return Operators$3.op_GreaterGreaterEquals(f(v),g);\r\n };\r\n Operators$3.op_RightShift=function(f,g,v)\r\n {\r\n  return Operators$3.op_BarGreaterGreater(f(v),g);\r\n };\r\n Operators$3.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return FusionM.bind(f,v);\r\n };\r\n Operators$3.op_BarGreaterGreater=function(v,f)\r\n {\r\n  return FusionM.map(f,v);\r\n };\r\n Operators$3.op_LessMultiplyGreater=function(f,v)\r\n {\r\n  return FusionM.apply(f,v);\r\n };\r\n Builder$2=Builder$1.Builder=Runtime.Class({\r\n  For:function(sequence,body)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(sequence),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return body(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  Using:function(disposable,body)\r\n  {\r\n   return this.TryFinally(function()\r\n   {\r\n    return body(disposable);\r\n   },function()\r\n   {\r\n    if(!Unchecked.Equals(disposable,null))\r\n     disposable.Dispose();\r\n   });\r\n  },\r\n  TryFinally:function(body,compensation)\r\n  {\r\n   return FusionM.wrap(function(r)\r\n   {\r\n    try\r\n    {\r\n     return(FusionM.getFun(body()))(r);\r\n    }\r\n    finally\r\n    {\r\n     compensation();\r\n    }\r\n   });\r\n  },\r\n  TryWith:function(body,handler)\r\n  {\r\n   return FusionM.wrap(function(r)\r\n   {\r\n    try\r\n    {\r\n     return(FusionM.getFun(body()))(r);\r\n    }\r\n    catch(e)\r\n    {\r\n     return handler(e);\r\n    }\r\n   });\r\n  },\r\n  While:function(guard,body)\r\n  {\r\n   function whileLoop(guard$1,body$1)\r\n   {\r\n    return guard$1()?FusionM.bind(function()\r\n    {\r\n     return whileLoop(guard$1,body$1);\r\n    },body$1()):FusionM.rtn();\r\n   }\r\n   return whileLoop(guard,body);\r\n  },\r\n  Run:function(f)\r\n  {\r\n   return FusionM.wrap(function(m)\r\n   {\r\n    return(FusionM.getFun(f()))(m);\r\n   });\r\n  },\r\n  Combine:function(a,b)\r\n  {\r\n   return FusionM.bind(b,a);\r\n  },\r\n  Delay:Global.id,\r\n  Zero:function()\r\n  {\r\n   return FusionM.rtn();\r\n  },\r\n  Bind:function(w,r)\r\n  {\r\n   return FusionM.bind(r,w);\r\n  },\r\n  ReturnFrom:function(x)\r\n  {\r\n   return FusionM.from(x);\r\n  },\r\n  Return:function(x)\r\n  {\r\n   return FusionM.rtn(x);\r\n  }\r\n },Obj,Builder$2);\r\n Builder$2.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },Builder$2);\r\n FusionM.fusion=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.fusion;\r\n };\r\n FusionM.absorbO=function(f,vORm)\r\n {\r\n  return FusionM.absorbR(FusionM.map(function(v)\r\n  {\r\n   return Result.ofOption(f,v);\r\n  },vORm));\r\n };\r\n FusionM.absorbR=function(vvRm)\r\n {\r\n  return FusionM.bind(FusionM.ofResultRM,vvRm);\r\n };\r\n FusionM.insertSnd=function(vRm,snd)\r\n {\r\n  return FusionM.map(function(v)\r\n  {\r\n   return[v,snd];\r\n  },vRm);\r\n };\r\n FusionM.insertFst=function(fst,vRm)\r\n {\r\n  return FusionM.map(function(v)\r\n  {\r\n   return[fst,v];\r\n  },vRm);\r\n };\r\n FusionM.insertR=function(vvR)\r\n {\r\n  return vvR.$==0?FusionM.map(function(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  },vvR.$0):FusionM.rtn(Library.Error(vvR.$0));\r\n };\r\n FusionM.insertO=function(vvO)\r\n {\r\n  var o;\r\n  o=vvO==null?null:{\r\n   $:1,\r\n   $0:FusionM.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vvO.$0)\r\n  };\r\n  return o==null?FusionM.rtn(null):o.$0;\r\n };\r\n FusionM.iterResultPrint=function(m)\r\n {\r\n  function g(v)\r\n  {\r\n   Library.print(v);\r\n  }\r\n  FusionM.iterReader(function(x)\r\n  {\r\n   return g(ResultMessage.summarized(x));\r\n  },function(v)\r\n  {\r\n   Library.print(v);\r\n  },null,m);\r\n };\r\n FusionM.iterResult=function(fM,f,m)\r\n {\r\n  FusionM.iterReader(fM,f,null,m);\r\n };\r\n FusionM.runResult=function(m)\r\n {\r\n  return FusionM.runReader(null,m);\r\n };\r\n FusionM.runReader=function(v,m)\r\n {\r\n  var t,m$1,o;\r\n  t=FusionM.run(v,m);\r\n  m$1=t[2];\r\n  return Result.ofOption(function()\r\n  {\r\n   return m$1;\r\n  },(o=t[0],o==null?null:{\r\n   $:1,\r\n   $0:[o.$0,m$1]\r\n  }));\r\n };\r\n FusionM.mapReader=function(v,m)\r\n {\r\n  return FusionM.mapState(function()\r\n  {\r\n   return v;\r\n  },Global.id,m);\r\n };\r\n FusionM.readerFun=function(f)\r\n {\r\n  return FusionM.map(f,FusionM.getS());\r\n };\r\n FusionM.sequenceSeq=function(sq)\r\n {\r\n  return FusionM.traverseSeq(Global.id,sq);\r\n };\r\n FusionM.traverseSeq=function(f,sq)\r\n {\r\n  return FusionM.map(Global.id,Arrays.foldBack(function(head,tail)\r\n  {\r\n   return FusionM.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return FusionM.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return FusionM.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),FusionM.rtn(List.T.Empty)));\r\n };\r\n FusionM.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return FusionM.bind(f,v);\r\n };\r\n FusionM.apply=function(fR,vR)\r\n {\r\n  return FusionM.bind(function(b)\r\n  {\r\n   return FusionM.map(b,vR);\r\n  },fR);\r\n };\r\n FusionM.memoizeRm=function(getStore,fRm,p)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var r,p$1,getOrAdd,o,o$1;\r\n    function store(p$2,v)\r\n    {\r\n     return(getOrAdd(p$2))(function()\r\n     {\r\n      return v;\r\n     });\r\n    }\r\n    r=t[0];\r\n    p$1=getStore(r);\r\n    getOrAdd=p$1[1];\r\n    return FusionM.run(r,(o=(o$1=p$1[0](p),o$1==null?null:{\r\n     $:1,\r\n     $0:FusionM.rtn(o$1.$0)\r\n    }),o==null?FusionM.map(function($1)\r\n    {\r\n     return store(p,$1);\r\n    },fRm(p)):o.$0));\r\n   }\r\n  };\r\n };\r\n FusionM.iterReader=function(fM,f,v,m)\r\n {\r\n  var t,m$1;\r\n  t=FusionM.run(v,FusionM.map(f,m));\r\n  m$1=t[2];\r\n  (Option.iter(Global.ignore))(t[0]);\r\n  m$1.$!==0?fM(m$1):void 0;\r\n };\r\n FusionM.mapState=function(get,set,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,p;\r\n    s1=t[0];\r\n    p=(FusionM.getFun(m))([get(s1),t[1]]);\r\n    return[p[0],set(s1,p[1]),p[2]];\r\n   }\r\n  };\r\n };\r\n FusionM.freeMessageW=function(m)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:2,\r\n    $0:a\r\n   });\r\n  }\r\n  return FusionM.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),m);\r\n };\r\n FusionM.freeMessage=function(m)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:1,\r\n    $0:a\r\n   });\r\n  }\r\n  return FusionM.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),m);\r\n };\r\n FusionM.freeMessageF=function(f,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,m1,p;\r\n    s1=t[0];\r\n    m1=t[1];\r\n    try\r\n    {\r\n     p=m.$0([s1,ResultMessage.freeMessage(m1)]);\r\n     return[p[0],p[1],ResultMessage.freeMessageF(f,p[2])];\r\n    }\r\n    catch(e)\r\n    {\r\n     return[null,s1,ResultMessage.freeMessage(ResultMessage.addMsg(m1,new ResultMessage({\r\n      $:5,\r\n      $0:e.message,\r\n      $1:e.stack\r\n     })))];\r\n    }\r\n   }\r\n  };\r\n };\r\n FusionM.ofFusionM=function(m)\r\n {\r\n  return FusionM.from(m);\r\n };\r\n FusionM.ofResultMessage=function(m)\r\n {\r\n  return FusionM.OkFMsg(null,m);\r\n };\r\n FusionM.ofMessage=function(m)\r\n {\r\n  return FusionM.OkFMsg(null,new ResultMessage({\r\n   $:4,\r\n   $0:m\r\n  }));\r\n };\r\n FusionM.ofOption=function(f,o)\r\n {\r\n  return o==null?FusionM.ErrorF(f()):FusionM.OkF(o.$0);\r\n };\r\n FusionM.ofResult=function(r)\r\n {\r\n  return r.$==1?FusionM.ErrorF(new ResultMessage({\r\n   $:1,\r\n   $0:(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Utils.prettyPrint($2));\r\n    };\r\n   }(Global.id))(r.$0)\r\n  })):FusionM.OkF(r.$0);\r\n };\r\n FusionM.ofResultS=function(r)\r\n {\r\n  return r.$==1?FusionM.ErrorF(new ResultMessage({\r\n   $:1,\r\n   $0:r.$0\r\n  })):FusionM.OkF(r.$0);\r\n };\r\n FusionM.ofResultM=function(r)\r\n {\r\n  return r.$==1?FusionM.ErrorF(new ResultMessage({\r\n   $:4,\r\n   $0:r.$0\r\n  })):FusionM.OkF(r.$0);\r\n };\r\n FusionM.ofResultRM=function(r)\r\n {\r\n  return r.$==1?FusionM.ErrorF(r.$0):FusionM.OkF(r.$0);\r\n };\r\n FusionM.inling=function(getOption,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,m1,p;\r\n    s1=t[0];\r\n    m1=t[1];\r\n    try\r\n    {\r\n     p=m.$0([s1,m1]);\r\n     return[{\r\n      $:1,\r\n      $0:p[0]\r\n     },p[1],p[2]];\r\n    }\r\n    catch(e)\r\n    {\r\n     return[null,s1,ResultMessage.addMsg(m1,new ResultMessage({\r\n      $:5,\r\n      $0:e.message,\r\n      $1:e.stack\r\n     }))];\r\n    }\r\n   }\r\n  };\r\n };\r\n FusionM.check=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return[ResultMessage.isFatal(t[1])?null:{\r\n     $:1,\r\n     $0:null\r\n    },t[0],ResultMessage.NoMsg];\r\n   }\r\n  };\r\n };\r\n FusionM.putS=function(s1)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function()\r\n   {\r\n    return[{\r\n     $:1,\r\n     $0:null\r\n    },s1,ResultMessage.NoMsg];\r\n   }\r\n  };\r\n };\r\n FusionM.getR=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return[{\r\n     $:1,\r\n     $0:t[1]\r\n    },t[0],ResultMessage.NoMsg];\r\n   }\r\n  };\r\n };\r\n FusionM.getS=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s;\r\n    s=t[0];\r\n    return[{\r\n     $:1,\r\n     $0:s\r\n    },s,ResultMessage.NoMsg];\r\n   }\r\n  };\r\n };\r\n FusionM.ErrorF=function(m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return[null,t[0],m];\r\n   }\r\n  };\r\n };\r\n FusionM.OkFMsg=function(v,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return[{\r\n     $:1,\r\n     $0:v\r\n    },t[0],m];\r\n   }\r\n  };\r\n };\r\n FusionM.OkF=function(v)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return[{\r\n     $:1,\r\n     $0:v\r\n    },t[0],ResultMessage.NoMsg];\r\n   }\r\n  };\r\n };\r\n FusionM.run=function(s,m)\r\n {\r\n  return(FusionM.getFun(m))([s,ResultMessage.NoMsg]);\r\n };\r\n FusionM.from=Global.id;\r\n FusionM.getFun=function(a)\r\n {\r\n  return a.$0;\r\n };\r\n FusionM.wrap=function(f)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:f\r\n  };\r\n };\r\n FusionM.map=function(f,m)\r\n {\r\n  return FusionM.bind(function(x)\r\n  {\r\n   return FusionM.rtn(f(x));\r\n  },m);\r\n };\r\n FusionM.bind=function(f,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,m1,p,v2O,s2,m2,p$1;\r\n    s1=t[0];\r\n    m1=t[1];\r\n    try\r\n    {\r\n     p=m.$0([s1,m1]);\r\n     v2O=p[0];\r\n     s2=p[1];\r\n     m2=p[2];\r\n     return v2O!=null&&v2O.$==1?(p$1=f(v2O.$0).$0([s2,ResultMessage.addMsg(m1,m2)]),[p$1[0],p$1[1],ResultMessage.addMsg(m2,p$1[2])]):[null,s2,m2];\r\n    }\r\n    catch(e)\r\n    {\r\n     return[null,s1,ResultMessage.addMsg(m1,new ResultMessage({\r\n      $:5,\r\n      $0:e.message,\r\n      $1:e.stack\r\n     }))];\r\n    }\r\n   }\r\n  };\r\n };\r\n FusionM.rtn=function(v)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return[{\r\n     $:1,\r\n     $0:v\r\n    },t[0],ResultMessage.NoMsg];\r\n   }\r\n  };\r\n };\r\n Operators$4.rtn=function(v)\r\n {\r\n  return FusionAsyncM.rtn(v);\r\n };\r\n Operators$4.op_GreaterEqualsGreater=function(f,g,v)\r\n {\r\n  return Operators$4.op_GreaterGreaterEquals(f(v),g);\r\n };\r\n Operators$4.op_RightShift=function(f,g,v)\r\n {\r\n  return Operators$4.op_BarGreaterGreater(f(v),g);\r\n };\r\n Operators$4.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return FusionAsyncM.bind(f,v);\r\n };\r\n Operators$4.op_BarGreaterGreater=function(v,f)\r\n {\r\n  return FusionAsyncM.map(f,v);\r\n };\r\n Operators$4.op_LessMultiplyGreater=function(f,v)\r\n {\r\n  return FusionAsyncM.apply(f,v);\r\n };\r\n Builder$4=Builder$3.Builder=Runtime.Class({\r\n  For:function(sequence,body)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(sequence),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return body(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  Using:function(disposable,body)\r\n  {\r\n   function x(s,m)\r\n   {\r\n    return Concurrency.Using(disposable,function(u)\r\n    {\r\n     return(FusionAsyncM.getFun(body(u)))([s,m]);\r\n    });\r\n   }\r\n   return FusionAsyncM.wrap(function($1)\r\n   {\r\n    return x($1[0],$1[1]);\r\n   });\r\n  },\r\n  TryFinally:function(body,compensation)\r\n  {\r\n   function x(s,m)\r\n   {\r\n    return Concurrency.TryFinally((FusionAsyncM.getFun(body()))([s,m]),compensation);\r\n   }\r\n   return FusionAsyncM.wrap(function($1)\r\n   {\r\n    return x($1[0],$1[1]);\r\n   });\r\n  },\r\n  TryWith:function(body,handler)\r\n  {\r\n   function x(s,m)\r\n   {\r\n    return Concurrency.TryWith((FusionAsyncM.getFun(body()))([s,m]),handler);\r\n   }\r\n   return FusionAsyncM.wrap(function($1)\r\n   {\r\n    return x($1[0],$1[1]);\r\n   });\r\n  },\r\n  While:function(guard,body)\r\n  {\r\n   function whileLoop(guard$1,body$1)\r\n   {\r\n    return guard$1()?FusionAsyncM.bind(function()\r\n    {\r\n     return whileLoop(guard$1,body$1);\r\n    },body$1()):FusionAsyncM.rtn();\r\n   }\r\n   return whileLoop(guard,body);\r\n  },\r\n  Run:function(f)\r\n  {\r\n   return FusionAsyncM.wrap(function(m)\r\n   {\r\n    return(FusionAsyncM.getFun(f()))(m);\r\n   });\r\n  },\r\n  Combine:function(a,b)\r\n  {\r\n   return FusionAsyncM.bind(b,a);\r\n  },\r\n  Delay:Global.id,\r\n  Zero:function()\r\n  {\r\n   return FusionAsyncM.rtn();\r\n  },\r\n  Bind:function(w,r)\r\n  {\r\n   return FusionAsyncM.bind(r,w);\r\n  },\r\n  ReturnFrom:function(x)\r\n  {\r\n   return FusionAsyncM.from(x);\r\n  },\r\n  Return:function(x)\r\n  {\r\n   return FusionAsyncM.rtn(x);\r\n  }\r\n },Obj,Builder$4);\r\n Builder$4.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },Builder$4);\r\n FusionAsyncM.fusion=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.fusion$1;\r\n };\r\n FusionAsyncM.iterResultPrintA=function(m)\r\n {\r\n  function g(v)\r\n  {\r\n   Library.print(v);\r\n  }\r\n  FusionAsyncM.iterReaderA(function(x)\r\n  {\r\n   return g(ResultMessage.summarized(x));\r\n  },function(v)\r\n  {\r\n   Library.print(v);\r\n  },null,m);\r\n };\r\n FusionAsyncM.iterResultPrint=function(m)\r\n {\r\n  function g(v)\r\n  {\r\n   Library.print(v);\r\n  }\r\n  FusionAsyncM.iterReader(function(x)\r\n  {\r\n   return g(ResultMessage.summarized(x));\r\n  },function(v)\r\n  {\r\n   Library.print(v);\r\n  },null,m);\r\n };\r\n FusionAsyncM.iterResultA=function(fM,f,m)\r\n {\r\n  FusionAsyncM.iterReaderA(fM,f,null,m);\r\n };\r\n FusionAsyncM.iterResult=function(fM,f,m)\r\n {\r\n  FusionAsyncM.iterReader(fM,f,null,m);\r\n };\r\n FusionAsyncM.runResult=function(m)\r\n {\r\n  return FusionAsyncM.runReader(null,m);\r\n };\r\n FusionAsyncM.runReader=function(v,m)\r\n {\r\n  function f(vO,a,m$1)\r\n  {\r\n   return Result.ofOption(function()\r\n   {\r\n    return m$1;\r\n   },vO==null?null:{\r\n    $:1,\r\n    $0:[vO.$0,m$1]\r\n   });\r\n  }\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  return Concurrency.Bind(FusionAsyncM.run(v,m),function(x)\r\n  {\r\n   return g(f.apply(null,x));\r\n  });\r\n };\r\n FusionAsyncM.mapReader=function(v,m)\r\n {\r\n  return FusionAsyncM.mapState(function()\r\n  {\r\n   return v;\r\n  },Global.id,m);\r\n };\r\n FusionAsyncM.absorbO=function(f,vORm)\r\n {\r\n  return FusionAsyncM.absorbR(FusionAsyncM.map(function(v)\r\n  {\r\n   return Result.ofOption(f,v);\r\n  },vORm));\r\n };\r\n FusionAsyncM.absorbR=function(vvRm)\r\n {\r\n  return FusionAsyncM.bind(FusionAsyncM.ofResultRM,vvRm);\r\n };\r\n FusionAsyncM.insertSnd=function(vRm,snd)\r\n {\r\n  return FusionAsyncM.map(function(v)\r\n  {\r\n   return[v,snd];\r\n  },vRm);\r\n };\r\n FusionAsyncM.insertFst=function(fst,vRm)\r\n {\r\n  return FusionAsyncM.map(function(v)\r\n  {\r\n   return[fst,v];\r\n  },vRm);\r\n };\r\n FusionAsyncM.insertR=function(vvR)\r\n {\r\n  return vvR.$==0?FusionAsyncM.map(function(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  },vvR.$0):FusionAsyncM.rtn(Library.Error(vvR.$0));\r\n };\r\n FusionAsyncM.insertO=function(vvO)\r\n {\r\n  var o;\r\n  o=vvO==null?null:{\r\n   $:1,\r\n   $0:FusionAsyncM.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vvO.$0)\r\n  };\r\n  return o==null?FusionAsyncM.rtn(null):o.$0;\r\n };\r\n FusionAsyncM.readerFun=function(f)\r\n {\r\n  return FusionAsyncM.map(f,FusionAsyncM.getS());\r\n };\r\n FusionAsyncM.freeMessageW=function(m)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:2,\r\n    $0:a\r\n   });\r\n  }\r\n  return FusionAsyncM.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),m);\r\n };\r\n FusionAsyncM.freeMessage=function(m)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:1,\r\n    $0:a\r\n   });\r\n  }\r\n  return FusionAsyncM.freeMessageF((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Global.String($2));\r\n   };\r\n  }(Global.id),function(x)\r\n  {\r\n   return g(f(x));\r\n  }),m);\r\n };\r\n FusionAsyncM.sequenceSeq=function(sq)\r\n {\r\n  return FusionAsyncM.traverseSeq(Global.id,sq);\r\n };\r\n FusionAsyncM.traverseSeq=function(f,sq)\r\n {\r\n  return FusionAsyncM.map(Global.id,Arrays.foldBack(function(head,tail)\r\n  {\r\n   return FusionAsyncM.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return FusionAsyncM.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return FusionAsyncM.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),FusionAsyncM.rtn(List.T.Empty)));\r\n };\r\n FusionAsyncM.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return FusionAsyncM.bind(f,v);\r\n };\r\n FusionAsyncM.apply=function(fR,vR)\r\n {\r\n  return FusionAsyncM.bind(function(b)\r\n  {\r\n   return FusionAsyncM.map(b,vR);\r\n  },fR);\r\n };\r\n FusionAsyncM.memoizeRm=function(getStore,fRm,p)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var r,b;\r\n    r=t[0];\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     var p$1,getOrAdd,o,o$1;\r\n     function store(p$2,v)\r\n     {\r\n      return(getOrAdd(p$2))(function()\r\n      {\r\n       return v;\r\n      });\r\n     }\r\n     p$1=getStore(r);\r\n     getOrAdd=p$1[1];\r\n     return FusionAsyncM.run(r,(o=(o$1=p$1[0](p),o$1==null?null:{\r\n      $:1,\r\n      $0:FusionAsyncM.rtn(o$1.$0)\r\n     }),o==null?FusionAsyncM.map(function($1)\r\n     {\r\n      return store(p,$1);\r\n     },fRm(p)):o.$0));\r\n    });\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.iterReaderA=function(fM,f,v,m)\r\n {\r\n  function f$1(vO,a,m$1)\r\n  {\r\n   (Option.iter(Global.ignore))(vO);\r\n   m$1.$!==0?fM(m$1):void 0;\r\n  }\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  Concurrency.Start(Concurrency.Bind(FusionAsyncM.run(v,FusionAsyncM.map(f,m)),function(x)\r\n  {\r\n   return g(f$1.apply(null,x));\r\n  }),null);\r\n };\r\n FusionAsyncM.iterReader=function(fM,f,v,m)\r\n {\r\n  var x;\r\n  x=FusionAsyncM.run(v,FusionAsyncM.map(f,m));\r\n  throw\"iterS cannot be used in JavaScript!\";\r\n };\r\n FusionAsyncM.mapState=function(get,set,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,r,b;\r\n    s1=t[0];\r\n    r=t[1];\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.Bind((FusionAsyncM.getFun(m))([get(s1),r]),function(a)\r\n     {\r\n      return Concurrency.Return([a[0],set(s1,a[1]),a[2]]);\r\n     });\r\n    });\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.freeMessageF=function(f,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,m1,b;\r\n    s1=t[0];\r\n    m1=t[1];\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(m.$0([s1,ResultMessage.freeMessage(m1)]),function(a)\r\n      {\r\n       return Concurrency.Return([a[0],a[1],ResultMessage.freeMessageF(f,a[2])]);\r\n      });\r\n     }),function(a)\r\n     {\r\n      return Concurrency.Return([null,s1,ResultMessage.freeMessage(ResultMessage.addMsg(m1,new ResultMessage({\r\n       $:5,\r\n       $0:a.message,\r\n       $1:a.stack\r\n      })))]);\r\n     });\r\n    });\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.ofFusionM=function(a)\r\n {\r\n  var fm;\r\n  fm=a.$0;\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return(fm([t[0],t[1]]));\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.ofAsyncResultRM=function(a)\r\n {\r\n  return FusionAsyncM.bind(FusionAsyncM.ofResultRM,FusionAsyncM.ofAsync(a));\r\n };\r\n FusionAsyncM.ofAsync=function(a)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s;\r\n    function f(v)\r\n    {\r\n     return[{\r\n      $:1,\r\n      $0:v\r\n     },s,ResultMessage.NoMsg];\r\n    }\r\n    function g(v)\r\n    {\r\n     return Concurrency.Return(v);\r\n    }\r\n    s=t[0];\r\n    return Concurrency.Bind(a,function(x)\r\n    {\r\n     return g(f(x));\r\n    });\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.ofResultMessage=function(m)\r\n {\r\n  return FusionAsyncM.OkFMsg(null,m);\r\n };\r\n FusionAsyncM.ofMessage=function(m)\r\n {\r\n  return FusionAsyncM.OkFMsg(null,new ResultMessage({\r\n   $:4,\r\n   $0:m\r\n  }));\r\n };\r\n FusionAsyncM.ofOption=function(f,o)\r\n {\r\n  var o$1;\r\n  o$1=o==null?null:{\r\n   $:1,\r\n   $0:FusionAsyncM.OkF(o.$0)\r\n  };\r\n  return o$1==null?function(x)\r\n  {\r\n   return FusionAsyncM.ErrorF(f(x));\r\n  }():o$1.$0;\r\n };\r\n FusionAsyncM.ofResult=function(r)\r\n {\r\n  return r.$==1?FusionAsyncM.ErrorF(new ResultMessage({\r\n   $:1,\r\n   $0:(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Utils.prettyPrint($2));\r\n    };\r\n   }(Global.id))(r.$0)\r\n  })):FusionAsyncM.OkF(r.$0);\r\n };\r\n FusionAsyncM.ofResultS=function(r)\r\n {\r\n  return r.$==1?FusionAsyncM.ErrorF(new ResultMessage({\r\n   $:1,\r\n   $0:r.$0\r\n  })):FusionAsyncM.OkF(r.$0);\r\n };\r\n FusionAsyncM.ofResultM=function(r)\r\n {\r\n  return r.$==1?FusionAsyncM.ErrorF(new ResultMessage({\r\n   $:4,\r\n   $0:r.$0\r\n  })):FusionAsyncM.OkF(r.$0);\r\n };\r\n FusionAsyncM.ofResultRM=function(r)\r\n {\r\n  return r.$==1?FusionAsyncM.ErrorF(r.$0):FusionAsyncM.OkF(r.$0);\r\n };\r\n FusionAsyncM.getOption=function(m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,m1,b;\r\n    s1=t[0];\r\n    m1=t[1];\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(m.$0([s1,m1]),function(a)\r\n      {\r\n       return Concurrency.Return([{\r\n        $:1,\r\n        $0:a[0]\r\n       },a[1],a[2]]);\r\n      });\r\n     }),function(a)\r\n     {\r\n      return Concurrency.Return([null,s1,ResultMessage.addMsg(m1,new ResultMessage({\r\n       $:5,\r\n       $0:a.message,\r\n       $1:a.stack\r\n      }))]);\r\n     });\r\n    });\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.check=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return([ResultMessage.isFatal(t[1])?null:{\r\n     $:1,\r\n     $0:null\r\n    },t[0],ResultMessage.NoMsg]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.putS=function(s1)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function()\r\n   {\r\n    return Concurrency.Return([{\r\n     $:1,\r\n     $0:null\r\n    },s1,ResultMessage.NoMsg]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.getR=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return([{\r\n     $:1,\r\n     $0:t[1]\r\n    },t[0],ResultMessage.NoMsg]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.getS=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s;\r\n    s=t[0];\r\n    return Concurrency.Return([{\r\n     $:1,\r\n     $0:s\r\n    },s,ResultMessage.NoMsg]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.ErrorF=function(m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return([null,t[0],m]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.OkFMsg=function(v,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return([{\r\n     $:1,\r\n     $0:v\r\n    },t[0],m]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.OkF=function(v)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return([{\r\n     $:1,\r\n     $0:v\r\n    },t[0],ResultMessage.NoMsg]);\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.run=function(s,m)\r\n {\r\n  return(FusionAsyncM.getFun(m))([s,ResultMessage.NoMsg]);\r\n };\r\n FusionAsyncM.from=Global.id;\r\n FusionAsyncM.getFun=function(a)\r\n {\r\n  return a.$0;\r\n };\r\n FusionAsyncM.wrap=function(f)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:f\r\n  };\r\n };\r\n FusionAsyncM.map=function(f,m)\r\n {\r\n  return FusionAsyncM.bind(function(x)\r\n  {\r\n   return FusionAsyncM.rtn(f(x));\r\n  },m);\r\n };\r\n FusionAsyncM.bind=function(f,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var s1,m1,b;\r\n    s1=t[0];\r\n    m1=t[1];\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(m.$0([s1,m1]),function(a)\r\n      {\r\n       var v2O,s2,m2;\r\n       v2O=a[0];\r\n       s2=a[1];\r\n       m2=a[2];\r\n       return v2O!=null&&v2O.$==1?Concurrency.Bind(f(v2O.$0).$0([s2,ResultMessage.addMsg(m1,m2)]),function(a$1)\r\n       {\r\n        return Concurrency.Return([a$1[0],a$1[1],ResultMessage.addMsg(m2,a$1[2])]);\r\n       }):Concurrency.Return([null,s2,m2]);\r\n      });\r\n     }),function(a)\r\n     {\r\n      return Concurrency.Return([null,s1,ResultMessage.addMsg(m1,new ResultMessage({\r\n       $:5,\r\n       $0:a.message,\r\n       $1:a.stack\r\n      }))]);\r\n     });\r\n    });\r\n   }\r\n  };\r\n };\r\n FusionAsyncM.rtn=function(v)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    return Concurrency.Return([{\r\n     $:1,\r\n     $0:v\r\n    },t[0],ResultMessage.NoMsg]);\r\n   }\r\n  };\r\n };\r\n Builder$5=ResultM.Builder=Runtime.Class({\r\n  For:function(sequence,body)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(sequence),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return body(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  While:function(guard,body)\r\n  {\r\n   function whileLoop(guard$1,body$1)\r\n   {\r\n    return guard$1()?ResultM.bind(function()\r\n    {\r\n     return whileLoop(guard$1,body$1);\r\n    },body$1()):ResultM.rtn();\r\n   }\r\n   return whileLoop(guard,body);\r\n  },\r\n  Using:function(disposable,body)\r\n  {\r\n   try\r\n   {\r\n    return body(disposable);\r\n   }\r\n   finally\r\n   {\r\n    disposable.Dispose();\r\n   }\r\n  },\r\n  TryFinally:function(body,compensation)\r\n  {\r\n   try\r\n   {\r\n    return body();\r\n   }\r\n   finally\r\n   {\r\n    compensation();\r\n   }\r\n  },\r\n  TryWith:function(body,handler)\r\n  {\r\n   try\r\n   {\r\n    return body();\r\n   }\r\n   catch(e)\r\n   {\r\n    return handler(e);\r\n   }\r\n  },\r\n  Run:function(f)\r\n  {\r\n   return ResultM.bindP(f,Monads.OkM$1());\r\n  },\r\n  Combine:function(a,b)\r\n  {\r\n   return ResultM.bind(b,a);\r\n  },\r\n  Delay:Global.id,\r\n  Zero:function()\r\n  {\r\n   return ResultM.rtn();\r\n  },\r\n  Bind:function(w,r)\r\n  {\r\n   return ResultM.bindM(r,w);\r\n  },\r\n  Bind$1:function(w,r)\r\n  {\r\n   return ResultM.bindP(r,w);\r\n  },\r\n  ReturnFrom:function(x)\r\n  {\r\n   return ResultM.rtnM(x);\r\n  },\r\n  ReturnFrom$1:Global.id,\r\n  ReturnFrom$2:Global.id,\r\n  Return:function(x)\r\n  {\r\n   return ResultM.rtn(x);\r\n  }\r\n },Obj,Builder$5);\r\n Builder$5.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },Builder$5);\r\n Operators$5.rtn=function(v)\r\n {\r\n  return ResultM.rtn(v);\r\n };\r\n Operators$5.op_GreaterEqualsGreater=function(f,g,v)\r\n {\r\n  return Operators$5.op_GreaterGreaterEquals(f(v),g);\r\n };\r\n Operators$5.op_RightShift=function(f,g,v)\r\n {\r\n  return Operators$5.op_BarGreaterGreater(f(v),g);\r\n };\r\n Operators$5.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return ResultM.bindP(f,v);\r\n };\r\n Operators$5.op_BarGreaterGreater=function(v,f)\r\n {\r\n  return ResultM.mapP(f,v);\r\n };\r\n ResultM.sequenceSeq=function(sq)\r\n {\r\n  return ResultM.traverseSeq(Global.id,sq);\r\n };\r\n ResultM.traverseSeq=function(f,sq)\r\n {\r\n  return ResultM.map(Global.id,Arrays.foldBack(function(head,tail)\r\n  {\r\n   return ResultM.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return ResultM.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return ResultM.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),ResultM.rtn(List.T.Empty)));\r\n };\r\n ResultM.op_GreaterGreaterEquals=function(r,f)\r\n {\r\n  return ResultM.bind(f,r);\r\n };\r\n ResultM.failIfFatalMsgW=function(r)\r\n {\r\n  var a;\r\n  a=Monads.OkM(r);\r\n  return a.$==0?ResultMessage.isFatalW(a.$0[1])?Monads.ErrorM(a.$0[1]):r:r;\r\n };\r\n ResultM.failIfFatalMsg=function(r)\r\n {\r\n  var a;\r\n  a=Monads.OkM(r);\r\n  return a.$==0?ResultMessage.isFatal(a.$0[1])?Monads.ErrorM(a.$0[1]):r:r;\r\n };\r\n ResultM.failIfFatalMsgF=function(f,r)\r\n {\r\n  var a;\r\n  a=Monads.OkM(r);\r\n  return a.$==0?ResultMessage.isFatalF(f,a.$0[1])?Monads.ErrorM(a.$0[1]):r:r;\r\n };\r\n ResultM.addMsg=function(m,r)\r\n {\r\n  return ResultM.mapMessage(function(b)\r\n  {\r\n   return ResultMessage.addMsg(m,b);\r\n  },r);\r\n };\r\n ResultM.absorbO=function(f,vOR)\r\n {\r\n  return ResultM.bindP(function(v)\r\n  {\r\n   return ResultM.ofOption(f,v);\r\n  },vOR);\r\n };\r\n ResultM.insertO=function(vRO)\r\n {\r\n  var o;\r\n  o=vRO==null?null:{\r\n   $:1,\r\n   $0:ResultM.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vRO.$0)\r\n  };\r\n  return o==null?Monads.OkM$1(null):o.$0;\r\n };\r\n ResultM.ofResult=function(vR)\r\n {\r\n  return ResultM.rtnr(vR);\r\n };\r\n ResultM.ofOption=function(f,vO)\r\n {\r\n  var o;\r\n  o=vO==null?null:{\r\n   $:1,\r\n   $0:Monads.OkM$1(vO.$0)\r\n  };\r\n  return o==null?function(x)\r\n  {\r\n   return Monads.ErrorM(f(x));\r\n  }():o.$0;\r\n };\r\n ResultM.get=function(r)\r\n {\r\n  return ResultM.defaultWith(function(x)\r\n  {\r\n   return Operators$7.FailWith(Global.String(x));\r\n  },r);\r\n };\r\n ResultM.iter=function(fM,f,r)\r\n {\r\n  var a;\r\n  a=ResultM.mapP(f,r);\r\n  a.$0==null?fM(a.$1):void 0;\r\n };\r\n ResultM.mapP=function(f,m)\r\n {\r\n  return ResultM.bindP(function(x)\r\n  {\r\n   return ResultM.rtn(f(x));\r\n  },m);\r\n };\r\n ResultM.check=function(a,vR)\r\n {\r\n  var $1;\r\n  return($1=vR.$0,$1!=null&&$1.$==1)?ResultMessage.isFatalF(a.$0,vR.$1)?Monads.ErrorM(vR.$1):vR:vR;\r\n };\r\n ResultM.bindM=function(f,m)\r\n {\r\n  return ResultM.bindP(f,ResultM.rtnM(m));\r\n };\r\n ResultM.bindP=function(f,r)\r\n {\r\n  var m;\r\n  if(r.$0==null)\r\n   return{\r\n    $:0,\r\n    $0:null,\r\n    $1:r.$1\r\n   };\r\n  else\r\n   {\r\n    m=r.$1;\r\n    try\r\n    {\r\n     return ResultM.mapMessage(function(b)\r\n     {\r\n      return ResultMessage.addMsg(m,b);\r\n     },f(r.$0.$0));\r\n    }\r\n    catch(e)\r\n    {\r\n     return Monads.ErrorM(new ResultMessage({\r\n      $:5,\r\n      $0:e.message,\r\n      $1:e.stack\r\n     }));\r\n    }\r\n   }\r\n };\r\n ResultM.bind=function(f,r)\r\n {\r\n  var m;\r\n  return r.$0==null?{\r\n   $:0,\r\n   $0:null,\r\n   $1:r.$1\r\n  }:(m=r.$1,ResultM.mapMessage(function(b)\r\n  {\r\n   return ResultMessage.addMsg(m,b);\r\n  },f(r.$0.$0)));\r\n };\r\n ResultM.mapMessage=function(fM,a)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:a.$0,\r\n   $1:fM(a.$1)\r\n  };\r\n };\r\n ResultM.map=function(f,a)\r\n {\r\n  var o;\r\n  return{\r\n   $:0,\r\n   $0:(o=a.$0,o==null?null:{\r\n    $:1,\r\n    $0:f(o.$0)\r\n   }),\r\n   $1:a.$1\r\n  };\r\n };\r\n ResultM.defaultValue=function(d,r)\r\n {\r\n  return Result.defaultValue(d,ResultM.toResult(r));\r\n };\r\n ResultM.defaultWith=function(f,r)\r\n {\r\n  return Result.defaultWith(f,ResultM.toResult(r));\r\n };\r\n ResultM.toOption=function(r)\r\n {\r\n  return r.$0;\r\n };\r\n ResultM.toResultD=function(r)\r\n {\r\n  return r.$0==null?Library.Error(r.$1):{\r\n   $:0,\r\n   $0:[r.$0.$0,r.$1]\r\n  };\r\n };\r\n ResultM.toResult=function(r)\r\n {\r\n  return r.$0==null?Library.Error(r.$1):{\r\n   $:0,\r\n   $0:r.$0.$0\r\n  };\r\n };\r\n ResultM.freeMessage=function(r)\r\n {\r\n  return r.$==1?Library.Error(ResultMessage.freeMessage(r.$0)):{\r\n   $:0,\r\n   $0:r.$0\r\n  };\r\n };\r\n ResultM.rtnr=function(vR)\r\n {\r\n  return Result.defaultWith(Monads.ErrorM,Result$1.Map(Monads.OkM$1,vR));\r\n };\r\n ResultM.rtnM=function(m)\r\n {\r\n  return Monads.OkMWithMsg(null,m);\r\n };\r\n ResultM.rtn=function(v)\r\n {\r\n  return Monads.OkM$1(v);\r\n };\r\n ResultM.checkErrorW=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function()\r\n   {\r\n    return false;\r\n   }\r\n  };\r\n };\r\n ResultM.checkError=function()\r\n {\r\n  return{\r\n   $:0,\r\n   $0:function()\r\n   {\r\n    return true;\r\n   }\r\n  };\r\n };\r\n ResultMAutoOpen.resultM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.resultM;\r\n };\r\n AsyncResult.tryFinally=function(fn,fRA)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.TryFinally(Concurrency.Delay(function()\r\n   {\r\n    return fRA();\r\n   }),function()\r\n   {\r\n    fn();\r\n   });\r\n  });\r\n };\r\n AsyncResult.tryWith=function(hnd,fRA)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.TryWith(Concurrency.Delay(function()\r\n   {\r\n    return fRA();\r\n   }),function(a)\r\n   {\r\n    return hnd(a);\r\n   });\r\n  });\r\n };\r\n AsyncResult.absorbO=function(f,vORA)\r\n {\r\n  function f$1(v)\r\n  {\r\n   return Result.absorbO(f,v);\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vORA,function(x)\r\n  {\r\n   return g(f$1(x));\r\n  });\r\n };\r\n AsyncResult.absorbR=function(vRRA)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vRRA,function(x)\r\n  {\r\n   return g(Result.join(x));\r\n  });\r\n };\r\n AsyncResult.insertR=function(vRAR)\r\n {\r\n  return vRAR.$==0?AsyncResult.map(function(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  },vRAR.$0):AsyncResult.rtn(Library.Error(vRAR.$0));\r\n };\r\n AsyncResult.insertO=function(vRAO)\r\n {\r\n  var o;\r\n  o=vRAO==null?null:{\r\n   $:1,\r\n   $0:AsyncResult.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vRAO.$0)\r\n  };\r\n  return o==null?AsyncResult.rtn(null):o.$0;\r\n };\r\n AsyncResult.sequenceSeqS=function(sq)\r\n {\r\n  return function()\r\n  {\r\n   throw\"traverseSeqS cannot be used in JavaScript!\";\r\n  };\r\n };\r\n AsyncResult.sequenceSeq=function(sq)\r\n {\r\n  return AsyncResult.traverseSeq(Global.id,sq);\r\n };\r\n AsyncResult.traverseSeq=function(f,sq)\r\n {\r\n  return Seq$1.fold(function(tail,head)\r\n  {\r\n   return AsyncResult.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return AsyncResult.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return AsyncResult.rtn(Seq$1.append(t,[h]));\r\n    });\r\n   });\r\n  },AsyncResult.rtn([]),sq);\r\n };\r\n AsyncResult.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return AsyncResult.bind(f,v);\r\n };\r\n AsyncResult.whileLoop=function(cond,fRA)\r\n {\r\n  return cond()?AsyncResult.bind(function()\r\n  {\r\n   return AsyncResult.whileLoop(cond,fRA);\r\n  },fRA()):AsyncResult.rtn();\r\n };\r\n AsyncResult.getResult=function(v)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  return Concurrency.Bind(v,function(x)\r\n  {\r\n   return g(f(x));\r\n  });\r\n };\r\n AsyncResult.mapP=function(f,m)\r\n {\r\n  return AsyncResult.bindP(function(x)\r\n  {\r\n   return AsyncResult.rtn(f(x));\r\n  },m);\r\n };\r\n AsyncResult.map=function(f,m)\r\n {\r\n  return AsyncResult.bind(function(x)\r\n  {\r\n   return AsyncResult.rtn(f(x));\r\n  },m);\r\n };\r\n AsyncResult.bindP=function(fRA,vRA)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.TryWith(Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(vRA,function(a)\r\n    {\r\n     return a.$==1?Concurrency.Return(Library.Error(a.$0)):fRA(a.$0);\r\n    });\r\n   }),function(a)\r\n   {\r\n    return Concurrency.Return(Library.Error(new ResultMessage({\r\n     $:5,\r\n     $0:a.message,\r\n     $1:a.stack\r\n    })));\r\n   });\r\n  });\r\n };\r\n AsyncResult.bind=function(fRA,vRA)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(vRA,function(a)\r\n   {\r\n    return a.$==1?Concurrency.Return(Library.Error(a.$0)):fRA(a.$0);\r\n   });\r\n  });\r\n };\r\n AsyncResult.iterA=function(fE,f,vRA)\r\n {\r\n  function f$1(r)\r\n  {\r\n   Result.iter(fE,f,r);\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  Concurrency.Start(Concurrency.Bind(vRA,function(x)\r\n  {\r\n   return g(f$1(x));\r\n  }),null);\r\n };\r\n AsyncResult.iterS=function(fE,f,vRA)\r\n {\r\n  throw\"iterS cannot be used in JavaScript!\";\r\n };\r\n AsyncResult.rtnR=function(vR)\r\n {\r\n  return Concurrency.Return(vR);\r\n };\r\n AsyncResult.rtn=function(v)\r\n {\r\n  return Concurrency.Return({\r\n   $:0,\r\n   $0:v\r\n  });\r\n };\r\n AsyncResult.freeMessage=function(v)\r\n {\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  return Concurrency.Bind(v,function(x)\r\n  {\r\n   return g(Result.freeMessage(x));\r\n  });\r\n };\r\n AsyncResult.mapError=function(fE,v)\r\n {\r\n  function f(r)\r\n  {\r\n   return Result$1.MapError(fE,r);\r\n  }\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  return Concurrency.Bind(v,function(x)\r\n  {\r\n   return g(f(x));\r\n  });\r\n };\r\n AsyncResultBuilder=Monads.AsyncResultBuilder=Runtime.Class({\r\n  For:function(s,fRA)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(s),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return fRA(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  While:function(guard,fRA)\r\n  {\r\n   return AsyncResult.whileLoop(guard,fRA);\r\n  },\r\n  Using:function(resource,fRA)\r\n  {\r\n   return Concurrency.Using(resource,fRA);\r\n  },\r\n  TryFinally:function(fRA,fn)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.TryFinally(Concurrency.Delay(function()\r\n    {\r\n     return fRA();\r\n    }),function()\r\n    {\r\n     fn();\r\n    });\r\n   });\r\n  },\r\n  TryWith:function(fRA,hnd)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.TryWith(Concurrency.Delay(function()\r\n    {\r\n     return fRA();\r\n    }),function(a)\r\n    {\r\n     return hnd(a);\r\n    });\r\n   });\r\n  },\r\n  Run:function(fRA)\r\n  {\r\n   return AsyncResult.bind(fRA,AsyncResult.rtn());\r\n  },\r\n  Delay:Global.id,\r\n  Combine:function(vR,fRA)\r\n  {\r\n   return AsyncResult.bind(fRA,AsyncResult.rtnR(vR));\r\n  },\r\n  Combine$1:function(vRA,fRA)\r\n  {\r\n   return AsyncResult.bind(fRA,vRA);\r\n  },\r\n  Bind:function(vR,fRA)\r\n  {\r\n   return AsyncResult.bind(fRA,AsyncResult.rtnR(vR));\r\n  },\r\n  Bind$1:function(vRA,fRA)\r\n  {\r\n   return AsyncResult.bind(fRA,vRA);\r\n  },\r\n  Zero:function()\r\n  {\r\n   return AsyncResult.rtn();\r\n  },\r\n  Return:function(v)\r\n  {\r\n   return AsyncResult.rtn(v);\r\n  },\r\n  ReturnFrom:function(vR)\r\n  {\r\n   return AsyncResult.rtnR(vR);\r\n  },\r\n  ReturnFrom$1:Global.id\r\n },Obj,AsyncResultBuilder);\r\n AsyncResultBuilder.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },AsyncResultBuilder);\r\n AsyncResultBuilderP=Monads.AsyncResultBuilderP=Runtime.Class({\r\n  For:function(s,fRA)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(s),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return fRA(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  While:function(guard,fRA)\r\n  {\r\n   return AsyncResult.whileLoop(guard,fRA);\r\n  },\r\n  Using:function(resource,fRA)\r\n  {\r\n   return Concurrency.Using(resource,fRA);\r\n  },\r\n  TryFinally:function(fRA,fn)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    try\r\n    {\r\n     return fRA();\r\n    }\r\n    finally\r\n    {\r\n     fn();\r\n    }\r\n   });\r\n  },\r\n  TryWith:function(fRA,hnd)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    try\r\n    {\r\n     return fRA();\r\n    }\r\n    catch(e)\r\n    {\r\n     return hnd(e);\r\n    }\r\n   });\r\n  },\r\n  Run:function(fRA)\r\n  {\r\n   return AsyncResult.bindP(fRA,AsyncResult.rtn());\r\n  },\r\n  Delay:Global.id,\r\n  Combine:function(vR,fRA)\r\n  {\r\n   return AsyncResult.bindP(fRA,AsyncResult.rtnR(vR));\r\n  },\r\n  Combine$1:function(vRA,fRA)\r\n  {\r\n   return AsyncResult.bindP(fRA,vRA);\r\n  },\r\n  Bind:function(vR,fRA)\r\n  {\r\n   return AsyncResult.bindP(fRA,AsyncResult.rtnR(vR));\r\n  },\r\n  Bind$1:function(vRA,fRA)\r\n  {\r\n   return AsyncResult.bindP(fRA,vRA);\r\n  },\r\n  Zero:function()\r\n  {\r\n   return AsyncResult.rtn();\r\n  },\r\n  Return:function(v)\r\n  {\r\n   return AsyncResult.rtn(v);\r\n  },\r\n  ReturnFrom:function(vR)\r\n  {\r\n   return AsyncResult.rtnR(vR);\r\n  },\r\n  ReturnFrom$1:Global.id\r\n },Obj,AsyncResultBuilderP);\r\n AsyncResultBuilderP.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },AsyncResultBuilderP);\r\n Extensions[\"AsyncResultBuilderP.Combine\"]=function(__,vA,fRA)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return AsyncResult.bindP(fRA,Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(f(x));\r\n  }));\r\n };\r\n Extensions[\"AsyncResultBuilderP.Bind\"]=function(__,vA,fRA)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return AsyncResult.bindP(fRA,Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(f(x));\r\n  }));\r\n };\r\n Extensions[\"AsyncResultBuilderP.ReturnFrom\"]=function(__,vA)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(f(x));\r\n  });\r\n };\r\n Extensions[\"AsyncResultBuilder.Combine\"]=function(__,vA,fRA)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return AsyncResult.bind(fRA,Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(f(x));\r\n  }));\r\n };\r\n Extensions[\"AsyncResultBuilder.Bind\"]=function(__,vA,fRA)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return AsyncResult.bind(fRA,Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(f(x));\r\n  }));\r\n };\r\n Extensions[\"AsyncResultBuilder.ReturnFrom\"]=function(__,vA)\r\n {\r\n  function f(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(f(x));\r\n  });\r\n };\r\n AsyncResultMBuilder=AsyncResultM.AsyncResultMBuilder=Runtime.Class({\r\n  For:function(s,fRA)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return this.Using(Enumerator.Get(s),function(_enum)\r\n   {\r\n    return $this.While(function()\r\n    {\r\n     return _enum.MoveNext();\r\n    },$this.Delay(function()\r\n    {\r\n     return fRA(_enum.Current());\r\n    }));\r\n   });\r\n  },\r\n  While:function(guard,fRA)\r\n  {\r\n   return AsyncResultM.whileLoop(guard,fRA);\r\n  },\r\n  Using:function(resource,fRA)\r\n  {\r\n   return Concurrency.Using(resource,fRA);\r\n  },\r\n  TryFinally:function(fRA,fn)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.TryFinally(Concurrency.Delay(function()\r\n    {\r\n     return fRA();\r\n    }),function()\r\n    {\r\n     fn();\r\n    });\r\n   });\r\n  },\r\n  TryWith:function(fRA,hnd)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.TryWith(Concurrency.Delay(function()\r\n    {\r\n     return fRA();\r\n    }),function(a)\r\n    {\r\n     return hnd(a);\r\n    });\r\n   });\r\n  },\r\n  Run:function(fRA)\r\n  {\r\n   return AsyncResultM.bind(fRA,AsyncResultM.rtn());\r\n  },\r\n  Delay:Global.id,\r\n  Combine:function(vR,fRA)\r\n  {\r\n   return AsyncResultM.bind(fRA,AsyncResultM.rtnR(vR));\r\n  },\r\n  Combine$1:function(vRA,fRA)\r\n  {\r\n   return AsyncResultM.bind(fRA,vRA);\r\n  },\r\n  Bind:function(w,r)\r\n  {\r\n   return AsyncResultM.bindrA(r,w);\r\n  },\r\n  Bind$1:function(w,r)\r\n  {\r\n   return AsyncResultM.bindR(r,w);\r\n  },\r\n  Bind$2:function(w,r)\r\n  {\r\n   return AsyncResultM.bindM(r,w);\r\n  },\r\n  Bind$3:function(w,r)\r\n  {\r\n   return AsyncResultM.bindr(r,w);\r\n  },\r\n  Bind$4:function(vRA,fRA)\r\n  {\r\n   return AsyncResultM.bind(fRA,vRA);\r\n  },\r\n  Zero:function()\r\n  {\r\n   return AsyncResultM.rtn();\r\n  },\r\n  Return:function(v)\r\n  {\r\n   return AsyncResultM.rtn(v);\r\n  },\r\n  ReturnFrom:function(vR)\r\n  {\r\n   return AsyncResultM.rtnrA(vR);\r\n  },\r\n  ReturnFrom$1:function(vR)\r\n  {\r\n   return AsyncResultM.rtnR(vR);\r\n  },\r\n  ReturnFrom$2:function(vR)\r\n  {\r\n   return AsyncResultM.rtnM(vR);\r\n  },\r\n  ReturnFrom$3:function(vR)\r\n  {\r\n   return AsyncResultM.rtnr(vR);\r\n  },\r\n  ReturnFrom$4:Global.id\r\n },Obj,AsyncResultMBuilder);\r\n AsyncResultMBuilder.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },AsyncResultMBuilder);\r\n Operators$6.rtn=function(v)\r\n {\r\n  return AsyncResultM.rtn(v);\r\n };\r\n Operators$6.op_GreaterEqualsGreater=function(f,g,v)\r\n {\r\n  return Operators$6.op_GreaterGreaterEquals(f(v),g);\r\n };\r\n Operators$6.op_GreaterMinusGreater=function(f,g,v)\r\n {\r\n  return Operators$6.op_BarGreaterGreater(f(v),g);\r\n };\r\n Operators$6.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return AsyncResultM.bind(f,v);\r\n };\r\n Operators$6.op_BarGreaterGreater=function(v,f)\r\n {\r\n  return AsyncResultM.map(f,v);\r\n };\r\n AsyncResultM.getResultM=function(a)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(a,function(x)\r\n  {\r\n   return g(Monads.OkM$1(x));\r\n  });\r\n };\r\n AsyncResultM.absorbO=function(f,vORA)\r\n {\r\n  function f$1(v)\r\n  {\r\n   return ResultM.absorbO(f,v);\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vORA,function(x)\r\n  {\r\n   return g(f$1(x));\r\n  });\r\n };\r\n AsyncResultM.absorbR=function(vRRA)\r\n {\r\n  var f;\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vRRA,(f=function(r)\r\n  {\r\n   return ResultM.bindP(Global.id,r);\r\n  },function(x)\r\n  {\r\n   return g(f(x));\r\n  }));\r\n };\r\n AsyncResultM.insertR=function(vRAR)\r\n {\r\n  return vRAR.$==0?AsyncResultM.map(function(a)\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:a\r\n   };\r\n  },vRAR.$0):AsyncResultM.rtn(Library.Error(vRAR.$0));\r\n };\r\n AsyncResultM.insertO=function(vRAO)\r\n {\r\n  var o;\r\n  o=vRAO==null?null:{\r\n   $:1,\r\n   $0:AsyncResultM.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },vRAO.$0)\r\n  };\r\n  return o==null?AsyncResultM.rtn(null):o.$0;\r\n };\r\n AsyncResultM.sequenceSeq=function(sq)\r\n {\r\n  return AsyncResultM.traverseSeq(Global.id,sq);\r\n };\r\n AsyncResultM.traverseSeq=function(f,sq)\r\n {\r\n  return AsyncResultM.map(Global.id,Arrays.foldBack(function(head,tail)\r\n  {\r\n   return AsyncResultM.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return AsyncResultM.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return AsyncResultM.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),AsyncResultM.rtn(List.T.Empty)));\r\n };\r\n AsyncResultM.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return AsyncResultM.bind(f,v);\r\n };\r\n AsyncResultM.whileLoop=function(cond,fRA)\r\n {\r\n  return cond()?AsyncResultM.bind(function()\r\n  {\r\n   return AsyncResultM.whileLoop(cond,fRA);\r\n  },fRA()):AsyncResultM.rtn();\r\n };\r\n AsyncResultM.map=function(f,m)\r\n {\r\n  return AsyncResultM.bind(function(x)\r\n  {\r\n   return AsyncResultM.rtn(f(x));\r\n  },m);\r\n };\r\n AsyncResultM.bindR=function(f,a)\r\n {\r\n  return AsyncResultM.bind(f,AsyncResultM.rtnR(a));\r\n };\r\n AsyncResultM.bindrA=function(f,a)\r\n {\r\n  return AsyncResultM.bind(f,AsyncResultM.rtnrA(a));\r\n };\r\n AsyncResultM.bindM=function(f,a)\r\n {\r\n  return AsyncResultM.bind(f,AsyncResultM.rtnM(a));\r\n };\r\n AsyncResultM.bindr=function(f,a)\r\n {\r\n  return AsyncResultM.bind(f,AsyncResultM.rtnr(a));\r\n };\r\n AsyncResultM.bind=function(fRA,vRA)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.TryWith(Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(vRA,function(a)\r\n    {\r\n     var a$1,m;\r\n     function f(r)\r\n     {\r\n      return ResultM.addMsg(m,r);\r\n     }\r\n     function g(v)\r\n     {\r\n      return Concurrency.Return(v);\r\n     }\r\n     a$1=Monads.OkM(a);\r\n     return a$1.$==1?Concurrency.Return(Monads.ErrorM(a$1.$0)):(m=a$1.$0[1],Concurrency.Bind(fRA(a$1.$0[0]),function(x)\r\n     {\r\n      return g(f(x));\r\n     }));\r\n    });\r\n   }),function(a)\r\n   {\r\n    return Concurrency.Return(Monads.ErrorM(new ResultMessage({\r\n     $:5,\r\n     $0:a.message,\r\n     $1:a.stack\r\n    })));\r\n   });\r\n  });\r\n };\r\n AsyncResultM.iterpA=function(f,vRA)\r\n {\r\n  function g(v)\r\n  {\r\n   Library.print(v);\r\n  }\r\n  AsyncResultM.iterA(function(x)\r\n  {\r\n   return g(ResultMessage.summarized(x));\r\n  },f,vRA);\r\n };\r\n AsyncResultM.iterpS=function(f,vRA)\r\n {\r\n  function g(v)\r\n  {\r\n   Library.print(v);\r\n  }\r\n  AsyncResultM.iterS(function(x)\r\n  {\r\n   return g(ResultMessage.summarized(x));\r\n  },f,vRA);\r\n };\r\n AsyncResultM.iterA=function(fE,f,vRA)\r\n {\r\n  function f$1(r)\r\n  {\r\n   ResultM.iter(fE,f,r);\r\n  }\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  Concurrency.Start(Concurrency.Bind(vRA,function(x)\r\n  {\r\n   return g(f$1(x));\r\n  }),null);\r\n };\r\n AsyncResultM.iterS=function(fE,f,vRA)\r\n {\r\n  throw\"iterS cannot be used in JavaScript!\";\r\n };\r\n AsyncResultM.errorMsgf=function(fmt)\r\n {\r\n  var f;\r\n  function f$1(a)\r\n  {\r\n   return new ResultMessage({\r\n    $:1,\r\n    $0:a\r\n   });\r\n  }\r\n  function g(a)\r\n  {\r\n   return Concurrency.Return(a);\r\n  }\r\n  return fmt((f=function(x)\r\n  {\r\n   return Monads.ErrorM(f$1(x));\r\n  },function(x)\r\n  {\r\n   return g(f(x));\r\n  }));\r\n };\r\n AsyncResultM.rtnrA=function(vrA)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vrA,function(x)\r\n  {\r\n   return g(ResultM.ofResult(x));\r\n  });\r\n };\r\n AsyncResultM.rtnM=function(vM)\r\n {\r\n  return Concurrency.Return(ResultM.rtnM(vM));\r\n };\r\n AsyncResultM.rtnR=function(vR)\r\n {\r\n  return Concurrency.Return(vR);\r\n };\r\n AsyncResultM.rtnr=function(vR)\r\n {\r\n  return Concurrency.Return(ResultM.rtnr(vR));\r\n };\r\n AsyncResultM.rtn=function(v)\r\n {\r\n  return Concurrency.Return(Monads.OkM$1(v));\r\n };\r\n AsyncResultM.freeMessage=function(v)\r\n {\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  return Concurrency.Bind(v,function(x)\r\n  {\r\n   return g(ResultM.freeMessage(x));\r\n  });\r\n };\r\n AsyncResultM.mapError=function(fE,v)\r\n {\r\n  function f(a)\r\n  {\r\n   return ResultM.mapMessage(fE,a);\r\n  }\r\n  function g(v$1)\r\n  {\r\n   return Concurrency.Return(v$1);\r\n  }\r\n  return Concurrency.Bind(v,function(x)\r\n  {\r\n   return g(f(x));\r\n  });\r\n };\r\n AsyncResultMAutoOpen[\"AsyncResultMBuilder.Combine\"]=function(__,vA,fRA)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return AsyncResultM.bind(fRA,Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(Monads.OkM$1(x));\r\n  }));\r\n };\r\n AsyncResultMAutoOpen[\"AsyncResultMBuilder.Bind\"]=function(__,vA,fRA)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return AsyncResultM.bind(fRA,Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(Monads.OkM$1(x));\r\n  }));\r\n };\r\n AsyncResultMAutoOpen[\"AsyncResultMBuilder.ReturnFrom\"]=function(__,vA)\r\n {\r\n  function g(v)\r\n  {\r\n   return Concurrency.Return(v);\r\n  }\r\n  return Concurrency.Bind(vA,function(x)\r\n  {\r\n   return g(Monads.OkM$1(x));\r\n  });\r\n };\r\n AsyncResultMAutoOpen.asyncResultM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.asyncResultM;\r\n };\r\n Monads.asyncResultP=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.asyncResultP;\r\n };\r\n Monads.asyncResult=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.asyncResult;\r\n };\r\n Monads.OkM=function(r)\r\n {\r\n  return r.$0==null?{\r\n   $:1,\r\n   $0:r.$1\r\n  }:{\r\n   $:0,\r\n   $0:[r.$0.$0,r.$1]\r\n  };\r\n };\r\n Monads.ErrorM=function(m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:null,\r\n   $1:m\r\n  };\r\n };\r\n Monads.OkMWithMsg=function(v,m)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:{\r\n    $:1,\r\n    $0:v\r\n   },\r\n   $1:m\r\n  };\r\n };\r\n Monads.OkM$1=function(v)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:{\r\n    $:1,\r\n    $0:v\r\n   },\r\n   $1:ResultMessage.NoMsg\r\n  };\r\n };\r\n String.thousands=function(n)\r\n {\r\n  var v,c,r,s;\r\n  v=(c=n<0?-n:n,Global.String(c));\r\n  r=v.length%3;\r\n  s=r===0?3:r;\r\n  return n<0?\"-\"+Strings.concat(\",\",List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append([Slice.string(v,{\r\n    $:1,\r\n    $0:0\r\n   },{\r\n    $:1,\r\n    $0:s-1\r\n   })],Seq$1.delay(function()\r\n   {\r\n    return Seq$1.map(function(i)\r\n    {\r\n     return Slice.string(v,{\r\n      $:1,\r\n      $0:i*3+s\r\n     },{\r\n      $:1,\r\n      $0:i*3+s+2\r\n     });\r\n    },Operators$7.range(0,((v.length-s)/3>>0)-1));\r\n   }));\r\n  }))):Strings.concat(\",\",List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append([Slice.string(v,{\r\n    $:1,\r\n    $0:0\r\n   },{\r\n    $:1,\r\n    $0:s-1\r\n   })],Seq$1.delay(function()\r\n   {\r\n    return Seq$1.map(function(i)\r\n    {\r\n     return Slice.string(v,{\r\n      $:1,\r\n      $0:i*3+s\r\n     },{\r\n      $:1,\r\n      $0:i*3+s+2\r\n     });\r\n    },Operators$7.range(0,((v.length-s)/3>>0)-1));\r\n   }));\r\n  })));\r\n };\r\n String.WhiteSpace=function(s)\r\n {\r\n  function g(v)\r\n  {\r\n   return!v;\r\n  }\r\n  return Seq$1.exists(function(x)\r\n  {\r\n   return g(Char.IsWhiteSpace(x));\r\n  },s)?null:{\r\n   $:1,\r\n   $0:null\r\n  };\r\n };\r\n String.EndsWith=function(ends,s)\r\n {\r\n  return Strings.EndsWith(s,ends)?{\r\n   $:1,\r\n   $0:Slice.string(s,{\r\n    $:1,\r\n    $0:0\r\n   },{\r\n    $:1,\r\n    $0:s.length-ends.length-1\r\n   })\r\n  }:null;\r\n };\r\n String.StartsWith=function(start,s)\r\n {\r\n  return Strings.StartsWith(s,start)?{\r\n   $:1,\r\n   $0:Slice.string(s,{\r\n    $:1,\r\n    $0:start.length\r\n   },null)\r\n  }:null;\r\n };\r\n String.skipLastLine=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.skipLastLine;\r\n };\r\n String.indentStr=function(i)\r\n {\r\n  function f(s)\r\n  {\r\n   return String.indent(i,s);\r\n  }\r\n  function g(s)\r\n  {\r\n   return Strings.concat(\"\\n\",s);\r\n  }\r\n  return function(x)\r\n  {\r\n   return g(f(x));\r\n  };\r\n };\r\n String.unindentStr=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.unindentStr;\r\n };\r\n String.indent=function(n,s)\r\n {\r\n  var x,x$1;\r\n  x=Strings.SplitChars(s,[\"\\n\"],0);\r\n  return Seq$1.map((x$1=Strings.replicate(n,\" \"),function(y)\r\n  {\r\n   return x$1+y;\r\n  }),x);\r\n };\r\n String.unindent=function(s)\r\n {\r\n  var lines,n,o,o$1;\r\n  lines=Strings.SplitChars(s,[\"\\n\"],0);\r\n  n=(o=Seq$1.tryFindIndex(function(y)\r\n  {\r\n   return\" \"!==y;\r\n  },(o$1=Seq$1.tryFind(function(l)\r\n  {\r\n   return Strings.Trim(l)!==\"\";\r\n  },lines),o$1==null?\"\":o$1.$0)),o==null?0:o.$0);\r\n  return Seq$1.filter(function(s$1)\r\n  {\r\n   return!Strings.StartsWith(s$1,\"# 1 \");\r\n  },Seq$1.map(function(l)\r\n  {\r\n   return l.length<=n?\"\":l.substring(n);\r\n  },lines));\r\n };\r\n String.skipFirstLine=function(txt)\r\n {\r\n  var i;\r\n  i=txt.indexOf(\"\\n\");\r\n  return i<0?\"\":Slice.string(txt,{\r\n   $:1,\r\n   $0:i+1\r\n  },null);\r\n };\r\n String.append=function(a,b)\r\n {\r\n  return a+b;\r\n };\r\n String.right=function(n,s)\r\n {\r\n  return Library[\"String.Right\"](s,n);\r\n };\r\n String.left=function(n,s)\r\n {\r\n  return Library[\"String.Left\"](s,n);\r\n };\r\n String.trim=function(s)\r\n {\r\n  return Strings.Trim(s);\r\n };\r\n String.contains=function(sub,whole)\r\n {\r\n  return whole.indexOf(sub)!=-1;\r\n };\r\n String.delimitedO=function(op,cl,txt)\r\n {\r\n  var o,$1,bef,o$1,$2;\r\n  o=String.splitInTwoO(op,txt);\r\n  return o==null?null:($1=o.$0,(bef=$1[0],(o$1=String.splitInTwoO(cl,$1[1]),o$1==null?null:{\r\n   $:1,\r\n   $0:($2=o$1.$0,[bef,$2[0],$2[1]])\r\n  })));\r\n };\r\n String.splitInTwoO=function(spl,txt)\r\n {\r\n  var i;\r\n  i=txt.indexOf(spl);\r\n  return i===-1?null:{\r\n   $:1,\r\n   $0:[Library[\"String.Left\"](txt,i),txt.substring(i+spl.length)]\r\n  };\r\n };\r\n String.splitByChar=function(c,s)\r\n {\r\n  return Strings.SplitChars(s,[c],0);\r\n };\r\n ParseO.Guid=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1[\"|Guid|_|\"];\r\n };\r\n ParseO.Double=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1[\"|Double|_|\"];\r\n };\r\n ParseO.Single=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1[\"|Single|_|\"];\r\n };\r\n ParseO.Int64=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1[\"|Int64|_|\"];\r\n };\r\n ParseO.Int=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1[\"|Int|_|\"];\r\n };\r\n ParseO.Date=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1[\"|Date|_|\"];\r\n };\r\n ParseO.parseGuidO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseGuidO;\r\n };\r\n ParseO.parseDoubleO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseDoubleO;\r\n };\r\n ParseO.parseSingleO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseSingleO;\r\n };\r\n ParseO.parseInt64O=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseInt64O;\r\n };\r\n ParseO.parseIntO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseIntO;\r\n };\r\n ParseO.parseDateO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseDateO;\r\n };\r\n ParseO.parseDateO2=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parseDateO2;\r\n };\r\n ParseO.tryParseWith=function(tryParseFunc)\r\n {\r\n  function g($1,$2)\r\n  {\r\n   return $1?{\r\n    $:1,\r\n    $0:$2\r\n   }:null;\r\n  }\r\n  return function(x)\r\n  {\r\n   return g.apply(null,tryParseFunc(x));\r\n  };\r\n };\r\n MailboxProcessorExt.PostAndAsyncReply=function(agent,msg,timeout)\r\n {\r\n  return agent.PostAndAsyncReply(function(reply)\r\n  {\r\n   return[reply,msg];\r\n  },timeout);\r\n };\r\n StateFull.applyReply=function(f,agent)\r\n {\r\n  return StateFull.applyReplyA(function(v)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Return(f(v));\r\n   });\r\n  },agent);\r\n };\r\n StateFull.applyReplyA=function(f,agent)\r\n {\r\n  return agent.PostAndAsyncReply(function(reply)\r\n  {\r\n   return function(v)\r\n   {\r\n    var b;\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.Bind(f(v),function(a)\r\n     {\r\n      reply(a[1]);\r\n      return Concurrency.Return(a[0]);\r\n     });\r\n    });\r\n   };\r\n  },null);\r\n };\r\n StateFull.apply=function(f,agent)\r\n {\r\n  StateFull.applyA(function(v)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Return(f(v));\r\n   });\r\n  },agent);\r\n };\r\n StateFull.applyA=function(f,agent)\r\n {\r\n  agent.mailbox.AddLast(function(v)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return f(v);\r\n   });\r\n  });\r\n  agent.resume();\r\n };\r\n StateFull.setState=function(v,agent)\r\n {\r\n  agent.mailbox.AddLast(function()\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Return(v);\r\n   });\r\n  });\r\n  agent.resume();\r\n };\r\n StateFull.getStateA=function(agent)\r\n {\r\n  return agent.PostAndAsyncReply(function(reply)\r\n  {\r\n   return function(v)\r\n   {\r\n    var b;\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     reply(v);\r\n     return Concurrency.Return(v);\r\n    });\r\n   };\r\n  },null);\r\n };\r\n Mailbox.defHandler=function(ex,st)\r\n {\r\n  Library.print(ex);\r\n  return st;\r\n };\r\n Mailbox.stateFull=function(hndl,initState)\r\n {\r\n  return MailboxProcessor.Start(function(inbox)\r\n  {\r\n   function loop(state)\r\n   {\r\n    var b;\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(inbox.Receive(null),function(a)\r\n      {\r\n       return Concurrency.Bind(a(state),function(a$1)\r\n       {\r\n        return loop(a$1);\r\n       });\r\n      });\r\n     }),function(a)\r\n     {\r\n      return loop(hndl(a,state));\r\n     });\r\n    });\r\n   }\r\n   return loop(initState);\r\n  },null);\r\n };\r\n Mailbox.fold=function(hndl,f,initState)\r\n {\r\n  return Mailbox.foldA(hndl,function($1,$2)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Return(f($1,$2));\r\n   });\r\n  },initState);\r\n };\r\n Mailbox.foldA=function(hndl,f,initState)\r\n {\r\n  return MailboxProcessor.Start(function(inbox)\r\n  {\r\n   function loop(state)\r\n   {\r\n    var b;\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(inbox.Receive(null),function(a)\r\n      {\r\n       return Concurrency.Bind(f(state,a),function(a$1)\r\n       {\r\n        return loop(a$1);\r\n       });\r\n      });\r\n     }),function(a)\r\n     {\r\n      return loop(hndl(a,state));\r\n     });\r\n    });\r\n   }\r\n   return loop(initState);\r\n  },null);\r\n };\r\n Mailbox.call=function(hndl,f)\r\n {\r\n  return Mailbox.callA(hndl,function(msg)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Return(f(msg));\r\n   });\r\n  });\r\n };\r\n Mailbox.callA=function(hndl,f)\r\n {\r\n  return Mailbox.iterA(hndl,function(t)\r\n  {\r\n   var replyChannel,msg,b;\r\n   replyChannel=t[0];\r\n   msg=t[1];\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(f(msg),function(a)\r\n    {\r\n     replyChannel(a);\r\n     return Concurrency.Zero();\r\n    });\r\n   });\r\n  });\r\n };\r\n Mailbox.iter=function(hndl,f)\r\n {\r\n  return Mailbox.iterA(hndl,function(msg)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    f(msg);\r\n    return Concurrency.Zero();\r\n   });\r\n  });\r\n };\r\n Mailbox.iterA=function(hndl,f)\r\n {\r\n  return MailboxProcessor.Start(function(inbox)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.While(function()\r\n    {\r\n     return true;\r\n    },Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(inbox.Receive(null),function(a)\r\n      {\r\n       return Concurrency.Bind(f(a),function()\r\n       {\r\n        return Concurrency.Return(null);\r\n       });\r\n      });\r\n     }),function(a)\r\n     {\r\n      hndl(a);\r\n      return Concurrency.Zero();\r\n     });\r\n    }));\r\n   });\r\n  },null);\r\n };\r\n ResourceAgentState.New=function(useCount,limitCount,resource,configuration)\r\n {\r\n  return{\r\n   useCount:useCount,\r\n   limitCount:limitCount,\r\n   resource:resource,\r\n   configuration:configuration\r\n  };\r\n };\r\n ResourceAgent=Library.ResourceAgent=Runtime.Class({\r\n  increment:function(state)\r\n  {\r\n   var $this,c;\r\n   $this=this;\r\n   return(this.respawnRightAfter?(c=state.configuration,function(s)\r\n   {\r\n    return $this.check(c,s);\r\n   }):Global.id)(ResourceAgentState.New(state.useCount+1,state.limitCount,state.resource,state.configuration));\r\n  },\r\n  check:function(cfg,state)\r\n  {\r\n   return state.useCount<state.limitCount&&this.alive(state.resource)&&Unchecked.Equals(cfg,state.configuration)?state:this.respawn(ResourceAgentState.New(state.useCount,state.limitCount,state.resource,cfg));\r\n  },\r\n  respawn:function(state)\r\n  {\r\n   this.clean(state.resource);\r\n   return ResourceAgentState.New(0,state.limitCount,this.ctor(state.configuration),state.configuration);\r\n  },\r\n  Respawn:function()\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   StateFull.apply(function(s)\r\n   {\r\n    return $this.respawn(s);\r\n   },this.agent);\r\n  },\r\n  set_Configuration:function(c)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   !Unchecked.Equals(c,this.get_Configuration())?StateFull.apply(function(s)\r\n   {\r\n    return $this.respawn(ResourceAgentState.New(s.useCount,s.limitCount,s.resource,c));\r\n   },this.agent):void 0;\r\n  },\r\n  set_LimitCount:function(n)\r\n  {\r\n   StateFull.apply(function(s)\r\n   {\r\n    return ResourceAgentState.New(s.useCount,n,s.resource,s.configuration);\r\n   },this.agent);\r\n  },\r\n  get_Configuration:function()\r\n  {\r\n   return this.get_State().configuration;\r\n  },\r\n  get_LimitCount:function()\r\n  {\r\n   return this.get_State().limitCount;\r\n  },\r\n  get_State:function()\r\n  {\r\n   throw\"getState not available in JavaScript\";\r\n  },\r\n  ProcessA:function(work,cfg)\r\n  {\r\n   return this.AsyncProcessA(function(v)\r\n   {\r\n    var b;\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.Return(work(v));\r\n    });\r\n   },cfg);\r\n  },\r\n  AsyncProcessA:function(work,cfg)\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return StateFull.applyReplyA(function(st)\r\n   {\r\n    var b;\r\n    b=null;\r\n    return Concurrency.Delay(function()\r\n    {\r\n     var st2;\r\n     st2=$this.check(cfg==null?st.configuration:cfg.$0,st);\r\n     return Concurrency.Bind(work(st2.resource),function(a)\r\n     {\r\n      return Concurrency.Return([$this.increment(st2),a]);\r\n     });\r\n    });\r\n   },this.agent);\r\n  },\r\n  Dispose:function()\r\n  {\r\n   try\r\n   {\r\n    this.clean(this.get_State().resource);\r\n   }\r\n   catch(m)\r\n   {\r\n    null;\r\n   }\r\n  }\r\n },Obj,ResourceAgent);\r\n ResourceAgent.New=Runtime.Ctor(function(maxUseCount,ctor,configuration,cleanup,isAlive,respawnAfter)\r\n {\r\n  var $this;\r\n  $this=this;\r\n  Obj.New.call(this);\r\n  this.ctor=ctor;\r\n  this.clean=cleanup==null?Global.ignore:cleanup.$0;\r\n  this.alive=isAlive==null?function()\r\n  {\r\n   return true;\r\n  }:isAlive.$0;\r\n  this.respawnRightAfter=respawnAfter==null||respawnAfter.$0;\r\n  this.agent=Mailbox.stateFull(function($1,$2)\r\n  {\r\n   Library.print($1);\r\n   return $this.respawn($2);\r\n  },ResourceAgentState.New(0,maxUseCount,this.ctor(configuration),configuration));\r\n },ResourceAgent);\r\n AgentReaderM.runSameConfig=function(agent,m)\r\n {\r\n  return FusionAsyncM.runReader([agent,agent.get_Configuration()],m);\r\n };\r\n AgentReaderM.run=function(agent,cfg,m)\r\n {\r\n  return FusionAsyncM.runReader([agent,cfg],m);\r\n };\r\n AgentReaderM.ofResourceRm=function(a)\r\n {\r\n  var f;\r\n  f=a.$0;\r\n  return{\r\n   $:0,\r\n   $0:function(t)\r\n   {\r\n    var a$1,m,cfg,agent;\r\n    a$1=t[0];\r\n    m=t[1];\r\n    cfg=a$1[1];\r\n    agent=a$1[0];\r\n    return agent.AsyncProcessA(function(resource)\r\n    {\r\n     var b;\r\n     b=null;\r\n     return Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(f([resource,m]),function(a$2)\r\n      {\r\n       return Concurrency.Return([a$2[0],[agent,cfg],a$2[2]]);\r\n      });\r\n     });\r\n    },{\r\n     $:1,\r\n     $0:cfg\r\n    });\r\n   }\r\n  };\r\n };\r\n AgentReaderM.createAgentRm=function(f,v)\r\n {\r\n  return Operators$4.op_GreaterGreaterEquals(FusionAsyncM.readerFun(function(t)\r\n  {\r\n   return t[0].AsyncProcessA(function(resource)\r\n   {\r\n    return f(resource,v);\r\n   },{\r\n    $:1,\r\n    $0:t[1]\r\n   });\r\n  }),FusionAsyncM.ofAsync);\r\n };\r\n CommArg.New=function(cargId,name,unique,build)\r\n {\r\n  return{\r\n   cargId:cargId,\r\n   name:name,\r\n   unique:unique,\r\n   build:build\r\n  };\r\n };\r\n CommArgCollection=CommArgRoot.CommArgCollection=Runtime.Class({\r\n  get_CommArgs:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,CommArgCollection);\r\n CommArgCollection.op_Addition=function(args,a)\r\n {\r\n  return CommArgCollection.addPairs(a.$0,args);\r\n };\r\n CommArgCollection.op_Addition$1=function(args,arg)\r\n {\r\n  return CommArgCollection.addPair(arg[0],arg[1],args);\r\n };\r\n CommArgCollection.op_Addition$2=function(args,args2)\r\n {\r\n  return CommArgCollection.addPairs(args2,args);\r\n };\r\n TypedCommArg=CommArgRoot.TypedCommArg=Runtime.Class({\r\n  get_CommArg:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,TypedCommArg);\r\n TypedCommArg.op_DivisionAssignment=function(arg,f)\r\n {\r\n  return[arg.$0,Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(FusionM.getS(),f),Global.id)];\r\n };\r\n TypedCommArg.op_DivisionAssignment$1=function(arg,v)\r\n {\r\n  return[arg.$0,Operators$3.op_BarGreaterGreater(v,Global.id)];\r\n };\r\n TypedCommArg.op_DivisionAssignment$2=function(arg,v)\r\n {\r\n  return[arg.$0,Operators$3.op_BarGreaterGreater(Operators$3.rtn(v),Global.id)];\r\n };\r\n CommArgModule.getFloatR=function(a,o)\r\n {\r\n  return CommArgModule.getValueR(a,o);\r\n };\r\n CommArgModule.getBoolR=function(a,o)\r\n {\r\n  return CommArgModule.getValueR(a,o);\r\n };\r\n CommArgModule.getStringR=function(a,o)\r\n {\r\n  return CommArgModule.getValueR(a,o);\r\n };\r\n CommArgModule.getIntR=function(a,o)\r\n {\r\n  return CommArgModule.getValueR(a,o);\r\n };\r\n CommArgModule.getValueR=function(a,o)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:o\r\n  };\r\n };\r\n CommArgModule.getVRm=function(a,vRm)\r\n {\r\n  return Operators$3.op_BarGreaterGreater(vRm,Global.id);\r\n };\r\n CommArgModule.argumentTRm=function(a,v)\r\n {\r\n  return CommArgModule.argumentRm(a,v);\r\n };\r\n CommArgModule.argumentRm=function(a,vRm)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(vRm,function(a$1)\r\n   {\r\n    return b.Return(a.build(a$1));\r\n   });\r\n  }));\r\n };\r\n CommArgModule.NewFloat=function(name,unique,build)\r\n {\r\n  return CommArgModule.New(name,unique,build);\r\n };\r\n CommArgModule.NewBool=function(name,unique,build)\r\n {\r\n  return CommArgModule.New(name,unique,build);\r\n };\r\n CommArgModule.NewString=function(name,unique,build)\r\n {\r\n  return CommArgModule.New(name,unique,build);\r\n };\r\n CommArgModule.NewInt=function(name,unique,build)\r\n {\r\n  return CommArgModule.New(name,unique,build);\r\n };\r\n CommArgModule.New=function(name,unique,build)\r\n {\r\n  return new TypedCommArg({\r\n   $:0,\r\n   $0:CommArg.New({\r\n    $:0,\r\n    $0:Guid.NewGuid()\r\n   },name,unique,function(x)\r\n   {\r\n    return build(Global.id(x));\r\n   })\r\n  });\r\n };\r\n CommArgCollection.addPairsRm=function(pairs)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionM.getS(),function(a)\r\n   {\r\n    return b.Bind(FusionM.putS(CommArgCollection.addPairs(pairs,a)),function()\r\n    {\r\n     return b.Return();\r\n    });\r\n   });\r\n  }));\r\n };\r\n CommArgCollection.appendRm=function(args2)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionM.getS(),function(a)\r\n   {\r\n    return b.Bind(FusionM.putS(CommArgCollection.append(a,args2)),function()\r\n    {\r\n     return b.Return();\r\n    });\r\n   });\r\n  }));\r\n };\r\n CommArgCollection.addPairs=function(pairs,collection)\r\n {\r\n  return CommArgCollection.append(collection,CommArgRoot.CommArgCollection$1(pairs));\r\n };\r\n CommArgCollection.append=function(args1,args2)\r\n {\r\n  var f,f$1;\r\n  function g(c,v)\r\n  {\r\n   return function(a)\r\n   {\r\n    return CommArgCollection.addPair(c,v,a);\r\n   };\r\n  }\r\n  f=(f$1=function(x)\r\n  {\r\n   return g.apply(null,Global.id(x));\r\n  },function(a)\r\n  {\r\n   return function(b)\r\n   {\r\n    return(f$1(b))(a);\r\n   };\r\n  });\r\n  return Seq$1.fold(function($1,$2)\r\n  {\r\n   return(f($1))($2);\r\n  },args1,args2.get_CommArgs());\r\n };\r\n CommArgCollection.addPair=function(commArg,vRm,a)\r\n {\r\n  function p(a$1,a$2)\r\n  {\r\n   return!Unchecked.Equals(a$1.cargId,commArg.cargId);\r\n  }\r\n  return CommArgRoot.CommArgCollection$1(Arrays.ofSeq(Seq$1.append((commArg.unique?function(s)\r\n  {\r\n   return Seq$1.filter(function($1)\r\n   {\r\n    return p($1[0],$1[1]);\r\n   },s);\r\n  }:Global.id)(a.$0),List.ofArray([[commArg,vRm]]))));\r\n };\r\n CommArgCollection.getBoolR=function(def,targ,args)\r\n {\r\n  var t,m;\r\n  t=FusionM.run(args,CommArgCollection.getBoolRm(def,targ));\r\n  m=t[2];\r\n  return Result.ofOption(function()\r\n  {\r\n   return m;\r\n  },t[0]);\r\n };\r\n CommArgCollection.buildArgRm=function(targ)\r\n {\r\n  function f()\r\n  {\r\n   return CommArgCollection.argumentNotFound(targ,void 0);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(CommArgCollection.tryBuildArgORm(targ),function(o)\r\n  {\r\n   return FusionM.ofOption(f,o);\r\n  });\r\n };\r\n CommArgCollection.getBoolRm=function(def,targ)\r\n {\r\n  return Operators$3.op_BarGreaterGreater(CommArgCollection.tryGetBoolORm(targ),function(o)\r\n  {\r\n   return o==null?def:o.$0;\r\n  });\r\n };\r\n CommArgCollection.getFloatRm=function(targ)\r\n {\r\n  function f()\r\n  {\r\n   return CommArgCollection.argumentNotFound(targ,void 0);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(CommArgCollection.tryGetFloatORm(targ),function(o)\r\n  {\r\n   return FusionM.ofOption(f,o);\r\n  });\r\n };\r\n CommArgCollection.getStringRm=function(targ)\r\n {\r\n  function f()\r\n  {\r\n   return CommArgCollection.argumentNotFound(targ,void 0);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(CommArgCollection.tryGetStringORm(targ),function(o)\r\n  {\r\n   return FusionM.ofOption(f,o);\r\n  });\r\n };\r\n CommArgCollection.getIntRm=function(targ)\r\n {\r\n  function f()\r\n  {\r\n   return CommArgCollection.argumentNotFound(targ,void 0);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(CommArgCollection.tryGetIntORm(targ),function(o)\r\n  {\r\n   return FusionM.ofOption(f,o);\r\n  });\r\n };\r\n CommArgCollection.getValueRm=function(targ)\r\n {\r\n  function f()\r\n  {\r\n   return CommArgCollection.argumentNotFound(targ,void 0);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(CommArgCollection.tryGetValueORm(targ),function(o)\r\n  {\r\n   return FusionM.ofOption(f,o);\r\n  });\r\n };\r\n CommArgCollection.findArgRm=function(targ)\r\n {\r\n  function f()\r\n  {\r\n   return CommArgCollection.argumentNotFound(targ,void 0);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   return FusionM.ofOption(f,o);\r\n  });\r\n };\r\n CommArgCollection.tryBuildArgORm=function(targ)\r\n {\r\n  function m(c,o)\r\n  {\r\n   return c.build(o);\r\n  }\r\n  return Operators$3.op_BarGreaterGreater(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  });\r\n };\r\n CommArgCollection.tryGetFloatORm=function(targ)\r\n {\r\n  function m(a,o)\r\n  {\r\n   return CommArgModule.getFloatR(targ,o);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  }),Result.insertO),FusionM.ofResultRM);\r\n };\r\n CommArgCollection.tryGetBoolORm=function(targ)\r\n {\r\n  function m(a,o)\r\n  {\r\n   return CommArgModule.getBoolR(targ,o);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  }),Result.insertO),FusionM.ofResultRM);\r\n };\r\n CommArgCollection.tryGetStringORm=function(targ)\r\n {\r\n  function m(a,o)\r\n  {\r\n   return CommArgModule.getStringR(targ,o);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  }),Result.insertO),FusionM.ofResultRM);\r\n };\r\n CommArgCollection.tryGetIntORm=function(targ)\r\n {\r\n  function m(a,o)\r\n  {\r\n   return CommArgModule.getIntR(targ,o);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  }),Result.insertO),FusionM.ofResultRM);\r\n };\r\n CommArgCollection.tryGetValueORm=function(targ)\r\n {\r\n  function m(a,o)\r\n  {\r\n   return CommArgModule.getValueR(targ,o);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(CommArgCollection.tryFindArgORm(targ),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  }),Result.insertO),FusionM.ofResultRM);\r\n };\r\n CommArgCollection.tryFindArgORm=function(targ)\r\n {\r\n  return Operators$3.op_GreaterGreaterEquals(FusionM.readerFun(function(coll)\r\n  {\r\n   var o,$1;\r\n   return FusionM.insertO((o=CommArgCollection.tryFindArgO(targ,coll),o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,FusionM.insertFst($1[0],$1[1]))\r\n   }));\r\n  }),Global.id);\r\n };\r\n CommArgCollection.tryFindArgO=function(a,a$1)\r\n {\r\n  var arg;\r\n  arg=a.$0;\r\n  return Seq$1.tryFind(function(t)\r\n  {\r\n   return Unchecked.Equals(t[0].cargId,arg.cargId);\r\n  },a$1.$0);\r\n };\r\n CommArgCollection.argumentNotFound=function(targ,u)\r\n {\r\n  return new ResultMessage({\r\n   $:1,\r\n   $0:(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"argument not found: \"+Utils.toSafe($2));\r\n    };\r\n   }(Global.id))(targ.$0.name)\r\n  });\r\n };\r\n CommArgCollection.containsAnyOfRm=function(ids)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   function p(a$1,a$2)\r\n   {\r\n    return ids.Contains(a$1.cargId);\r\n   }\r\n   return Seq$1.exists(function($1)\r\n   {\r\n    return p($1[0],$1[1]);\r\n   },a.$0);\r\n  });\r\n };\r\n CommArgCollection.argumentsRm=function(filter)\r\n {\r\n  function p(y)\r\n  {\r\n   return\"\"!==y;\r\n  }\r\n  return Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(CommArgCollection.filterRm(filter),function(s)\r\n  {\r\n   return FusionM.traverseSeq(function($1)\r\n   {\r\n    return CommArgModule.argumentTRm($1[0],$1[1]);\r\n   },s);\r\n  }),function(s)\r\n  {\r\n   return Seq$1.filter(p,s);\r\n  });\r\n };\r\n CommArgCollection.filterRm=function(p)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return Seq$1.filter(p,a.$0);\r\n  });\r\n };\r\n CommArgCollection.existsRm=function(f)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return Seq$1.exists(f,a.$0);\r\n  });\r\n };\r\n CommArgCollection.argsRm=function()\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return a.$0;\r\n  });\r\n };\r\n CommArgCollection.contains=function(a,a$1)\r\n {\r\n  function m(a$2,a$3)\r\n  {\r\n   return a$2.cargId;\r\n  }\r\n  return Seq$1.contains(a.$0.cargId,Seq$1.map(function($1)\r\n  {\r\n   return m($1[0],$1[1]);\r\n  },a$1.$0));\r\n };\r\n CommArgCollection.trueForAll=function(a)\r\n {\r\n  return true;\r\n };\r\n CommArgRoot.CommArgCollection$1=function(agvts)\r\n {\r\n  return new CommArgCollection({\r\n   $:0,\r\n   $0:Seq$1.cache(agvts)\r\n  });\r\n };\r\n PreproDirective.NoPrepo={\r\n  $:13\r\n };\r\n PreproDirective.PrepoEndIf={\r\n  $:10\r\n };\r\n PreproDirective.PrepoElse={\r\n  $:9\r\n };\r\n PrepState.LevelZero={\r\n  $:0\r\n };\r\n FsCodeModule.getSourceDir=function(srcDir,lines)\r\n {\r\n  var $1,$2,$3,a,a$1,a$2,$4,a$3,$5,$6;\r\n  $1=Arrays.get(lines,0);\r\n  $2=Arrays.tryItem(1,lines);\r\n  return(a=String.StartsWith(\"////#cd @\\\"\",$1),a!=null&&a.$==1?($3=a.$0,true):$2!=null&&$2.$==1&&(a$1=String.StartsWith(\"////#cd @\\\"\",$2.$0),a$1!=null&&a$1.$==1&&($3=a$1.$0,true)))?(a$2=Strings.Trim($3),(a$3=String.EndsWith(\"\\\"\",a$2),a$3!=null&&a$3.$==1?$4=a$3.$0:$4=a$2,($5=String.StartsWith(\"\\\\\",$4),$5!=null&&$5.$==1)?$4:($6=String.StartsWith(\"/\",$4),$6!=null&&$6.$==1)?$4:Unchecked.Equals(Seq$1.tryItem(1,$4),{\r\n   $:1,\r\n   $0:\":\"\r\n  })?$4:srcDir+\"/\"+$4)):srcDir;\r\n };\r\n FsCodeModule.separateDirectives=function(fsNass)\r\n {\r\n  var defines,preps;\r\n  defines=Arrays.ofSeq(Seq$1.distinct(Seq$1.choose(function(a)\r\n  {\r\n   return a.$==2?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },fsNass)));\r\n  preps=FsCodeModule.filterPreps(fsNass);\r\n  return[Arrays.ofSeq(Seq$1.distinct(Seq$1.choose(function(a)\r\n  {\r\n   return a.$==1?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },preps))),defines,Arrays.ofSeq(Seq$1.distinct(Seq$1.choose(function(a)\r\n  {\r\n   return a.$==6?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },preps))),Arrays.ofSeq(Seq$1.distinct(Seq$1.choose(function(a)\r\n  {\r\n   return a.$==5?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },preps))),Seq$1.tryHead(Seq$1.choose(function(a)\r\n  {\r\n   return a.$==0?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },preps))];\r\n };\r\n FsCodeModule.getTopDirectives=function(fsNass)\r\n {\r\n  var directs,o,o$1;\r\n  directs=Arrays.ofSeq(Seq$1.append(Seq$1.map(function(a)\r\n  {\r\n   return{\r\n    $:2,\r\n    $0:a\r\n   };\r\n  },(o=(o$1=Seq$1.tryHead(fsNass),o$1==null?null:{\r\n   $:1,\r\n   $0:Strings.SplitStrings(FsCodeModule.extractDefines({\r\n    $:0,\r\n    $0:o$1.$0[0]\r\n   }),[\" \",\"-d:\"],1)\r\n  }),o==null?[]:o.$0)),Seq$1.filter(function(a)\r\n  {\r\n   return a.$==2||(a.$==1||(a.$==6||(a.$==5||(a.$==0||(a.$==7||(a.$==10||(a.$==8||a.$==9)))))));\r\n  },Seq$1.map(function(t)\r\n  {\r\n   return t[1];\r\n  },fsNass))));\r\n  return[Arrays.ofSeq(Seq$1.map(function(t)\r\n  {\r\n   return t[0];\r\n  },fsNass)),directs];\r\n };\r\n FsCodeModule.filterPreps=function(preps)\r\n {\r\n  var defines;\r\n  function isDefined(def)\r\n  {\r\n   var x;\r\n   x=Seq$1.contains(Strings.Trim(Strings.Replace(def,\"!\",\"\")),defines);\r\n   return(Strings.StartsWith(Strings.Trim(def),\"!\")?function(v)\r\n   {\r\n    return!v;\r\n   }:Global.id)(x);\r\n  }\r\n  function m(st,prep)\r\n  {\r\n   var $1;\r\n   switch(st.$==0?prep.$==7?($1=prep.$0,0):prep.$==10?2:7:st.$==2?prep.$==7?1:prep.$==10?2:prep.$==8?($1=[prep.$0,st.$0],4):prep.$==9?($1=st.$0,5):8:st.$==3?prep.$==7?1:prep.$==10?2:prep.$==8?($1=st.$0,6):prep.$==9?($1=st.$0,6):8:prep.$==7?($1=prep.$0,0):prep.$==10?2:prep.$==8?($1=st.$0,3):prep.$==9?($1=st.$0,3):7)\r\n   {\r\n    case 0:\r\n     return[null,isDefined($1)?{\r\n      $:1,\r\n      $0:st\r\n     }:{\r\n      $:2,\r\n      $0:st\r\n     }];\r\n    case 1:\r\n     return[null,{\r\n      $:3,\r\n      $0:st\r\n     }];\r\n    case 2:\r\n     return[null,FsCodeModule.prev(st)];\r\n    case 3:\r\n     return[null,{\r\n      $:3,\r\n      $0:$1\r\n     }];\r\n    case 4:\r\n     return[null,isDefined($1[0])?{\r\n      $:1,\r\n      $0:st\r\n     }:{\r\n      $:2,\r\n      $0:$1[1]\r\n     }];\r\n    case 5:\r\n     return[null,{\r\n      $:1,\r\n      $0:$1\r\n     }];\r\n    case 6:\r\n     return[null,{\r\n      $:3,\r\n      $0:$1\r\n     }];\r\n    case 7:\r\n     return[{\r\n      $:1,\r\n      $0:prep\r\n     },st];\r\n    case 8:\r\n     return[null,st];\r\n   }\r\n  }\r\n  defines=Arrays.ofSeq(Seq$1.distinct(Seq$1.choose(function(a)\r\n  {\r\n   return a.$==2?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },preps)));\r\n  return Arrays.ofSeq(Seq$1.choose(Global.id,((((Runtime.Curried3(Seq$1.mapFold))(m))(PrepState.LevelZero))(preps))[0]));\r\n };\r\n FsCodeModule.prev=function(a)\r\n {\r\n  return a.$==1?a.$0:a.$==2?a.$0:a.$==3?a.$0:PrepState.LevelZero;\r\n };\r\n FsCodeModule.isActive=function(a)\r\n {\r\n  return a.$==1||(a.$==2?false:a.$!=3);\r\n };\r\n FsCodeModule.separatePrepros=function(code)\r\n {\r\n  function quoted(line)\r\n  {\r\n   var o;\r\n   o=Seq$1.tryLast(Strings.SplitStrings(Strings.Trim(line),[\"\\\"\"],1));\r\n   return o==null?line:o.$0;\r\n  }\r\n  function rest(line)\r\n  {\r\n   var o,o$1;\r\n   return Strings.Trim((o=(o$1=String.splitInTwoO(\" \",Strings.Trim(line)),o$1==null?null:{\r\n    $:1,\r\n    $0:o$1.$0[1]\r\n   }),o==null?\"\":o.$0));\r\n  }\r\n  function comment(y)\r\n  {\r\n   return\"//\"+y;\r\n  }\r\n  return Arrays.map(function(line)\r\n  {\r\n   var m,$1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14;\r\n   m=true;\r\n   return m&&Strings.StartsWith(line,\"#define\")?[comment(line),{\r\n    $:2,\r\n    $0:rest(line)\r\n   }]:m&&Strings.StartsWith(line,\"#cd\")?[comment(line),{\r\n    $:0,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(line,\"#r\")?[comment(line),{\r\n    $:1,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(line,\"#load\")?[comment(line),{\r\n    $:3,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(line,\"#nowarn\")?[comment(line),{\r\n    $:5,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(Strings.Trim(line),\"# \")?[comment(line),{\r\n    $:4,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(Strings.Trim(line),\"#line\")?[comment(line),{\r\n    $:4,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(line,\"#I\")?[comment(line),{\r\n    $:6,\r\n    $0:quoted(line)\r\n   }]:m&&Strings.StartsWith(line,\"#if\")?[line,{\r\n    $:7,\r\n    $0:rest(line)\r\n   }]:m&&Strings.StartsWith(line,\"#elif\")?[line,{\r\n    $:8,\r\n    $0:rest(line)\r\n   }]:m&&Strings.StartsWith(line,\"#else\")?[line,PreproDirective.PrepoElse]:m&&Strings.StartsWith(line,\"#endif\")?[line,PreproDirective.PrepoEndIf]:m&&Strings.StartsWith(line,\"#light\")?[line,{\r\n    $:11,\r\n    $0:false\r\n   }]:m&&Strings.StartsWith(line,\"#\")?[comment(line),{\r\n    $:12,\r\n    $0:line\r\n   }]:[line,PreproDirective.NoPrepo];\r\n  },code);\r\n };\r\n FsCodeModule.extractDefines=function(a)\r\n {\r\n  var code,m;\r\n  code=a.$0;\r\n  return Strings.StartsWith(code,\"////-d:\")?Slice.string(code,{\r\n   $:1,\r\n   $0:4\r\n  },{\r\n   $:1,\r\n   $0:(m=code.indexOf(\"\\n\"),m===-1?code.length:m)-1\r\n  }):\"\";\r\n };\r\n SnippetId=Library.SnippetId=Runtime.Class({\r\n  get_Id:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,SnippetId);\r\n SnippetId.get_Empty=function()\r\n {\r\n  return new SnippetId({\r\n   $:0,\r\n   $0:\"00000000-0000-0000-0000-000000000000\"\r\n  });\r\n };\r\n Snippet.New=function(snpId,snpName,snpContent,snpParentIdO,snpPredIds,snpProperties,snpModified)\r\n {\r\n  return{\r\n   snpId:snpId,\r\n   snpName:snpName,\r\n   snpContent:snpContent,\r\n   snpParentIdO:snpParentIdO,\r\n   snpPredIds:snpPredIds,\r\n   snpProperties:snpProperties,\r\n   snpModified:snpModified\r\n  };\r\n };\r\n SnippetCollection.New=function(generation,ordered,fetcher,predecesorsCache,reducedCache,prepCode)\r\n {\r\n  return{\r\n   generation:generation,\r\n   ordered:ordered,\r\n   fetcher:fetcher,\r\n   predecesorsCache:predecesorsCache,\r\n   reducedCache:reducedCache,\r\n   prepCode:prepCode\r\n  };\r\n };\r\n SnippetModule.codeFsxRm=function(curId)\r\n {\r\n  return Operators$3.op_BarGreaterGreater(SnippetModule.fastCodeRm({\r\n   $:1,\r\n   $0:curId\r\n  },{\r\n   $:1,\r\n   $0:curId\r\n  }),function(t)\r\n  {\r\n   return t[0];\r\n  });\r\n };\r\n SnippetModule.fastCodeRm=function(curIdO,lastIdO)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(SnippetModule.fastReducedRm(curIdO,lastIdO),function(a)\r\n   {\r\n    return b.Return(SnippetModule.finishCode(a[0],a[1],a[2]));\r\n   });\r\n  }));\r\n };\r\n SnippetModule.fastReducedRm=function(curIdO,lastIdO)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionM.insertO(curIdO==null?null:{\r\n    $:1,\r\n    $0:SnippetModule.snippetORm(curIdO.$0)\r\n   }),function(a)\r\n   {\r\n    return b.Bind(FusionM.insertO(lastIdO==null?null:{\r\n     $:1,\r\n     $0:SnippetModule.snippetORm(lastIdO.$0)\r\n    }),function(a$1)\r\n    {\r\n     var $1,$2,$3,curSnippet;\r\n     $1=a==null?null:a.$0;\r\n     $2=a$1==null?null:a$1.$0;\r\n     return($2!=null&&$2.$==1?$1!=null&&$1.$==1?($3=[$1.$0,$2.$0],false):true:true)?b.ReturnFrom(SnippetModule.reducedCodeRm([])):(curSnippet=$3[0],b.Bind(SnippetModule.uniquePredsRm($3[1]),function(a$2)\r\n     {\r\n      var preds;\r\n      preds=new FSharpSet.New(a$2);\r\n      return b.Bind((SnippetModule.reducedOthersORmMemo())([true,curSnippet.snpId,preds]),function(a$3)\r\n      {\r\n       return b.Bind((SnippetModule.reducedOthersORmMemo())([false,curSnippet.snpId,preds]),function(a$4)\r\n       {\r\n        return b.Bind(SnippetModule.separateCodeRm(curSnippet),function(a$5)\r\n        {\r\n         var part1,o,o$1,t;\r\n         part1=(o=a$3==null?null:{\r\n          $:1,\r\n          $0:(function(t$1)\r\n          {\r\n           var l,c,d;\r\n           l=t$1[0];\r\n           c=t$1[1];\r\n           d=t$1[2];\r\n           return function(t$2)\r\n           {\r\n            return SnippetModule.addSeps(l,c,d,t$2[0],t$2[1],t$2[2]);\r\n           };\r\n          }(a$3.$0))(a$5)\r\n         },o==null?a$5:o.$0);\r\n         return b.Return((o$1=a$4==null?null:{\r\n          $:1,\r\n          $0:(t=a$4.$0,SnippetModule.addSeps(part1[0],part1[1],part1[2],t[0],t[1],t[2]))\r\n         },o$1==null?part1:o$1.$0));\r\n        });\r\n       });\r\n      });\r\n     }));\r\n    });\r\n   });\r\n  }));\r\n };\r\n SnippetModule.reducedOthersORmMemo=function()\r\n {\r\n  function g(c)\r\n  {\r\n   return c.reducedCache();\r\n  }\r\n  return function(p)\r\n  {\r\n   return FusionM.memoizeRm(g,function($1)\r\n   {\r\n    return SnippetModule.reducedOthersORm($1[0],$1[1],$1[2]);\r\n   },p);\r\n  };\r\n };\r\n SnippetModule.reducedOthersORm=function(before,snpId,snpIds)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   function p(snp)\r\n   {\r\n    return!Unchecked.Equals(snp.snpId,snpId)&&snpIds.Contains(snp.snpId);\r\n   }\r\n   return b.Bind(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(SnippetModule.orderedRm(),(before?function(p$1)\r\n   {\r\n    return function(s)\r\n    {\r\n     return Seq$1.takeWhile(p$1,s);\r\n    };\r\n   }:function(p$1)\r\n   {\r\n    return function(s)\r\n    {\r\n     return Seq$1.skipWhile(p$1,s);\r\n    };\r\n   })(function(snp)\r\n   {\r\n    return!Unchecked.Equals(snp.snpId,snpId);\r\n   })),function(s)\r\n   {\r\n    return Seq$1.filter(p,s);\r\n   }),function(a)\r\n   {\r\n    return Seq$1.isEmpty(a)?b.Return(null):b.Bind(SnippetModule.reducedCodeRm(a),function(a$1)\r\n    {\r\n     return b.Return({\r\n      $:1,\r\n      $0:a$1\r\n     });\r\n    });\r\n   });\r\n  }));\r\n };\r\n SnippetModule.finishCode=function(lines,code,directs)\r\n {\r\n  var p,prepIs,nowarns,cdO,assembs,config,part1;\r\n  p=FsCodeModule.separateDirectives(directs);\r\n  prepIs=p[2];\r\n  nowarns=p[3];\r\n  cdO=p[4];\r\n  assembs=p[0];\r\n  config=Strings.concat(\" \",Seq$1.map(function(y)\r\n  {\r\n   return\"-d:\"+y;\r\n  },Seq$1.sort(p[1])));\r\n  part1=List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append(config!==\"\"?[\"////\"+config]:[],Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(cdO!=null?[(function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(\"////#cd @\\\"\"+Utils.toSafe($2)+\"\\\"\");\r\n     };\r\n    }(Global.id))(cdO.$0)]:[],Seq$1.delay(function()\r\n    {\r\n     return Seq$1.append(Seq$1.map(function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(\"#I @\\\"\"+Utils.toSafe($2)+\"\\\"\");\r\n      };\r\n     }(Global.id),prepIs),Seq$1.delay(function()\r\n     {\r\n      return Seq$1.append(Seq$1.map(function($1)\r\n      {\r\n       return function($2)\r\n       {\r\n        return $1(\"#r @\\\"\"+Utils.toSafe($2)+\"\\\"\");\r\n       };\r\n      }(Global.id),assembs),Seq$1.delay(function()\r\n      {\r\n       return Seq$1.map(function($1)\r\n       {\r\n        return function($2)\r\n        {\r\n         return $1(\"#nowarn \\\"\"+Utils.toSafe($2)+\"\\\"\");\r\n        };\r\n       }(Global.id),nowarns);\r\n      }));\r\n     }));\r\n    }));\r\n   }));\r\n  }));\r\n  return[Strings.concat(\"\\n\",Seq$1.append(part1,code)),Arrays.ofSeq((Seq$1.mapFold(function(firstLine,t)\r\n  {\r\n   var len;\r\n   len=t[2];\r\n   return[[[t[0],t[1]],[t[3],firstLine,firstLine+len]],firstLine+len];\r\n  },part1.get_Length(),lines))[0])];\r\n };\r\n SnippetModule.reducedCodeRm=function(snippets)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionM.traverseSeq(SnippetModule.separateCodeRm,snippets),function(a)\r\n   {\r\n    var t;\r\n    return b.Return((t=Seq$1.reduce(function($1,$2)\r\n    {\r\n     return(function(t$1)\r\n     {\r\n      var l,c,d;\r\n      l=t$1[0];\r\n      c=t$1[1];\r\n      d=t$1[2];\r\n      return function(t$2)\r\n      {\r\n       return SnippetModule.addSeps(l,c,d,t$2[0],t$2[1],t$2[2]);\r\n      };\r\n     }($1))($2);\r\n    },Seq$1.isEmpty(a)?[[[],[],[]]]:a),[t[0],[Strings.concat(\"\\n\",t[1])],t[2]]));\r\n   });\r\n  }));\r\n };\r\n SnippetModule.addSeps=function(lines1,code1,directs1,lines2,code2,directs2)\r\n {\r\n  return[lines1.concat(lines2),code1.concat(code2),directs1.concat(directs2)];\r\n };\r\n SnippetModule.separateCodeRm=function(snp)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(SnippetModule.indentRm(snp),function(a)\r\n   {\r\n    var indentF;\r\n    function m(l,pr)\r\n    {\r\n     return[Strings.replicate(a,\" \")+l,pr];\r\n    }\r\n    indentF=(a===0?[Global.id,\"\"]:[function(a$1)\r\n    {\r\n     return Arrays.map(function($1)\r\n     {\r\n      return m($1[0],$1[1]);\r\n     },a$1);\r\n    },(function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(\"(\"+Global.String($2)+\")\");\r\n     };\r\n    }(Global.id))(a)])[0];\r\n    return b.Bind(SnippetModule.prepareCodeRm(snp),function(a$1)\r\n    {\r\n     var p,code;\r\n     p=FsCodeModule.getTopDirectives(indentF(FsCodeModule.separatePrepros(Strings.SplitChars(a$1,[\"\\n\"],0))));\r\n     code=p[0];\r\n     return b.Return([[[snp.snpId,SnippetModule.snippetName(snp.snpName,snp.snpContent),Arrays.length(code),a]],code,p[1]]);\r\n    });\r\n   });\r\n  }));\r\n };\r\n SnippetModule.ancestorsRm=function(snp)\r\n {\r\n  function ancestorsRm2(snp$1,lst)\r\n  {\r\n   var b;\r\n   b=FusionM.fusion();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind(SnippetModule.parentORm(snp$1),function(a)\r\n    {\r\n     var p;\r\n     return a==null?b.Return(lst):(p=a.$0,b.ReturnFrom(ancestorsRm2(p,new List.T({\r\n      $:1,\r\n      $0:p,\r\n      $1:lst\r\n     }))));\r\n    });\r\n   }));\r\n  }\r\n  return ancestorsRm2(snp,List.T.Empty);\r\n };\r\n SnippetModule.levelRm=function(snp)\r\n {\r\n  function levelRm2(snp$1,lv)\r\n  {\r\n   var b;\r\n   b=FusionM.fusion();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind(SnippetModule.parentORm(snp$1),function(a)\r\n    {\r\n     return a!=null&&a.$==1?b.ReturnFrom(levelRm2(a.$0,lv+1)):b.Return(lv);\r\n    });\r\n   }));\r\n  }\r\n  return levelRm2(snp,0);\r\n };\r\n SnippetModule.indentRm=function(snp)\r\n {\r\n  function indentMeChildNextRm(snp$1)\r\n  {\r\n   var b;\r\n   b=FusionM.fusion();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    var p,a,nextO,currO;\r\n    p=(a=SnippetModule.propertyPairO(\"IndentChildren\",snp$1),a!=null&&a.$==1?[(ParseO.parseIntO())(a.$0[0]),(ParseO.parseIntO())(a.$0[1])]:[null,null]);\r\n    nextO=p[1];\r\n    currO=p[0];\r\n    return b.Bind(SnippetModule.parentORm(snp$1),function(a$1)\r\n    {\r\n     return a$1==null?b.Return([0,[currO==null?4:currO.$0,nextO==null?4:nextO.$0]]):b.Bind(indentMeChildNextRm(a$1.$0),function(a$2)\r\n     {\r\n      var next,me;\r\n      next=a$2[1][1];\r\n      me=a$2[1][0];\r\n      return b.Return([me,[me+(currO==null?next:currO.$0),nextO==null?next:nextO.$0]]);\r\n     });\r\n    });\r\n   }));\r\n  }\r\n  return Operators$3.op_BarGreaterGreater(indentMeChildNextRm(snp),function(t)\r\n  {\r\n   return t[0];\r\n  });\r\n };\r\n SnippetModule.propertyHierORm=function(n,snp)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var m;\r\n   m=SnippetModule.propertyO(n,snp);\r\n   return m==null?b.Bind(SnippetModule.parentORm(snp),function(a)\r\n   {\r\n    return a==null?b.Return(null):b.Bind(SnippetModule.propertyHierORm(n,a.$0),function(a$1)\r\n    {\r\n     var $1,sn,next;\r\n     return b.Return(a$1==null?null:{\r\n      $:1,\r\n      $0:($1=a$1.$0,(sn=$1[0],(next=$1[1][1],[sn,[next,next]])))\r\n     });\r\n    });\r\n   }):b.Return({\r\n    $:1,\r\n    $0:[snp,SnippetModule.propertyPair(m.$0)]\r\n   });\r\n  }));\r\n };\r\n SnippetModule.modifiedRecRm=function(snp)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(SnippetModule.modifiedRm(snp),function(a)\r\n   {\r\n    return a?b.Return(true):b.Bind(SnippetModule.uniquePredsRm(snp),function(a$1)\r\n    {\r\n     return b.Bind(FusionM.sequenceSeq(Seq$1.map(SnippetModule.snippetORm,a$1)),function(a$2)\r\n     {\r\n      return b.Bind(FusionM.sequenceSeq(Seq$1.map(SnippetModule.modifiedRm,Seq$1.choose(Global.id,a$2))),function(a$3)\r\n      {\r\n       return b.Return(Seq$1.contains(true,a$3));\r\n      });\r\n     });\r\n    });\r\n   });\r\n  }));\r\n };\r\n SnippetModule.predsGenerationRm=function(snp)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(Operators$3.op_GreaterGreaterEquals(SnippetModule.uniquePredsRm(snp),function(s)\r\n   {\r\n    return FusionM.traverseSeq(SnippetModule.snippetRm,s);\r\n   }),function(a)\r\n   {\r\n    return b.Return(Seq$1.max(Seq$1.map(function(snp$1)\r\n    {\r\n     return snp$1.snpModified;\r\n    },a)));\r\n   });\r\n  }));\r\n };\r\n SnippetModule.uniquePredsRm=function(snp)\r\n {\r\n  return(SnippetModule.predsLRmMemo())(snp.snpId);\r\n };\r\n SnippetModule.predsLRmMemo=function()\r\n {\r\n  function g(c)\r\n  {\r\n   return c.predecesorsCache();\r\n  }\r\n  return function(p)\r\n  {\r\n   return FusionM.memoizeRm(g,SnippetModule.predsLRm,p);\r\n  };\r\n };\r\n SnippetModule.predsLRm=function(sid)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var ins,outs;\r\n   ins=List.ofArray([sid]);\r\n   outs=List.T.Empty;\r\n   return b.Combine(b.While(function()\r\n   {\r\n    return!(ins.$==0);\r\n   },b.Delay(function()\r\n   {\r\n    var rest,hd;\r\n    return ins.$==1?(rest=ins.$1,(hd=ins.$0,List.contains(hd,outs)?(ins=rest,b.Zero()):b.Bind(SnippetModule.snippetORm(hd),function(a)\r\n    {\r\n     var o,snp;\r\n     ins=List.append(rest,(o=a==null?null:{\r\n      $:1,\r\n      $0:(snp=a.$0,List.append(List.ofSeq(snp.snpPredIds),Option$1.toList(snp.snpParentIdO)))\r\n     },o==null?List.T.Empty:o.$0));\r\n     outs=new List.T({\r\n      $:1,\r\n      $0:hd,\r\n      $1:outs\r\n     });\r\n     return b.Zero();\r\n    }))):b.Zero();\r\n   })),b.Delay(function()\r\n   {\r\n    return b.Return(outs);\r\n   }));\r\n  }));\r\n };\r\n SnippetModule.snippetFromRefORm=function(a)\r\n {\r\n  return a.$==1?SnippetModule.snippetFromPathORm(a.$0):SnippetModule.snippetORm(a.$0);\r\n };\r\n SnippetModule.snippetFromPathORm=function(pth)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(SnippetModule.orderedRm(),function(a)\r\n   {\r\n    function m(path,prntO)\r\n    {\r\n     return function(snp)\r\n     {\r\n      return path.length===0?[null,[[],prntO]]:SnippetModule.snippetName(snp.snpName,snp.snpContent)!==Arrays.get(path,0)||!Unchecked.Equals(snp.snpParentIdO,prntO)?[null,[path,prntO]]:path.length>1?[null,[Slice.array(path,{\r\n       $:1,\r\n       $0:1\r\n      },null),{\r\n       $:1,\r\n       $0:snp.snpId\r\n      }]]:[{\r\n       $:1,\r\n       $0:snp\r\n      },[[],prntO]];\r\n     };\r\n    }\r\n    return b.Return(Seq$1.tryHead(Seq$1.choose(Global.id,(Seq$1.mapFold(function($1,$2)\r\n    {\r\n     return(function($3)\r\n     {\r\n      return m($3[0],$3[1]);\r\n     }($1))($2);\r\n    },[pth,null],a))[0])));\r\n   });\r\n  }));\r\n };\r\n SnippetModule.pathRm=function(sid)\r\n {\r\n  var v;\r\n  function m(prn)\r\n  {\r\n   return Operators$3.op_BarGreaterGreater(SnippetModule.pathRm(prn.snpId),function(rest)\r\n   {\r\n    return new List.T({\r\n     $:1,\r\n     $0:prn.snpId,\r\n     $1:rest\r\n    });\r\n   });\r\n  }\r\n  return Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(SnippetModule.snippetORm(sid),function(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:SnippetModule.parentORm(o.$0)\r\n   };\r\n  }),FusionM.insertO),function(o)\r\n  {\r\n   return o==null?null:Global.id(o.$0);\r\n  }),function(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:m(o.$0)\r\n   };\r\n  }),FusionM.insertO),(v=List.T.Empty,function(o)\r\n  {\r\n   return o==null?v:o.$0;\r\n  }));\r\n };\r\n SnippetModule.snippetNameRm=function(sid)\r\n {\r\n  return Operators$3.op_BarGreaterGreater(SnippetModule.snippetRm(sid),function(snp)\r\n  {\r\n   return SnippetModule.snippetName(snp.snpName,snp.snpContent);\r\n  });\r\n };\r\n SnippetModule.snippetRm=function(sid)\r\n {\r\n  return FusionM.absorbO(function()\r\n  {\r\n   return new ResultMessage({\r\n    $:1,\r\n    $0:(function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(\"Snippet not found \"+FSharpStation_GeneratedPrintf.p$2($2));\r\n     };\r\n    }(Global.id))(sid)\r\n   });\r\n  },SnippetModule.snippetORm(sid));\r\n };\r\n SnippetModule.prepareCodeRm=function(snp)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return a.prepCode(snp);\r\n  });\r\n };\r\n SnippetModule.orderedRm=function()\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return a.ordered;\r\n  });\r\n };\r\n SnippetModule.childrenRm=function(sid)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return Seq$1.filter(function(s)\r\n   {\r\n    return Unchecked.Equals(s.snpParentIdO,{\r\n     $:1,\r\n     $0:sid\r\n    });\r\n   },a.ordered);\r\n  });\r\n };\r\n SnippetModule.modifiedRm=function(snp)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return snp.snpModified>a.generation;\r\n  });\r\n };\r\n SnippetModule.maxGenerationRm=function()\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return Seq$1.max(Seq$1.map(function(s)\r\n   {\r\n    return s.snpModified;\r\n   },a.ordered));\r\n  });\r\n };\r\n SnippetModule.predecessorsRm=function(snp)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return Seq$1.choose(a.fetcher,snp.snpPredIds);\r\n  });\r\n };\r\n SnippetModule.parentORm=function(snp)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   var o;\r\n   o=snp.snpParentIdO;\r\n   return o==null?null:a.fetcher(o.$0);\r\n  });\r\n };\r\n SnippetModule.snippetORm=function(sid)\r\n {\r\n  return FusionM.readerFun(function(a)\r\n  {\r\n   return a.fetcher(sid);\r\n  });\r\n };\r\n SnippetModule.propertyPairO=function(n,snp)\r\n {\r\n  var o;\r\n  o=SnippetModule.propertyO(n,snp);\r\n  return o==null?null:{\r\n   $:1,\r\n   $0:SnippetModule.propertyPair(o.$0)\r\n  };\r\n };\r\n SnippetModule.propertyPair=function(prv)\r\n {\r\n  var vs,x,v;\r\n  vs=Strings.SplitStrings(prv,[SnippetModule.tieFighter()],0);\r\n  return[Arrays.get(vs,0),(x=Arrays.tryItem(1,vs),(v=Arrays.get(vs,0),x==null?v:x.$0))];\r\n };\r\n SnippetModule.tieFighter=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.tieFighter;\r\n };\r\n SnippetModule.propertyO=function(n,snp)\r\n {\r\n  function c(name,value)\r\n  {\r\n   return name===n?{\r\n    $:1,\r\n    $0:value\r\n   }:null;\r\n  }\r\n  return Arrays.tryPick(function($1)\r\n  {\r\n   return c($1[0],$1[1]);\r\n  },snp.snpProperties);\r\n };\r\n SnippetModule.nameSanitized=function(snp)\r\n {\r\n  var illegal,c;\r\n  illegal=[\"\\\"\",\"<\",\">\",\"|\",\"\\u0000\",\"\\u0001\",\"\\u0002\",\"\\u0003\",\"\\u0004\",\"\\u0005\",\"\\u0006\",\"\\u0007\",\"\\u0008\",\"\\u0009\",\"\\n\",\"\\u000b\",\"\\u000c\",\"\\r\",\"\\u000e\",\"\\u000f\",\"\\u0010\",\"\\u0011\",\"\\u0012\",\"\\u0013\",\"\\u0014\",\"\\u0015\",\"\\u0016\",\"\\u0017\",\"\\u0018\",\"\\u0019\",\"\\u001a\",\"\\u001b\",\"\\u001c\",\"\\u001d\",\"\\u001e\",\"\\u001f\",\":\",\"*\",\"?\",\"\\\\\",\"/\"];\r\n  return Strings.Filter(function(c$1)\r\n  {\r\n   return!Arrays.contains(c$1,illegal);\r\n  },snp.snpName)+\" \"+(c=snp.snpId.get_Id(),Global.String(c));\r\n };\r\n SnippetModule.snippetName=function(name,content)\r\n {\r\n  var o;\r\n  return name!==\"\"?name:(o=Seq$1.tryHead(Seq$1.filter(function(l)\r\n  {\r\n   return!(Strings.StartsWith(l,\"#\")||Strings.StartsWith(l,\"[<\")||Strings.StartsWith(l,\"//\"));\r\n  },Seq$1.map(Strings.Trim,Strings.SplitChars(content,[\"\\n\"],1)))),o==null?\"<empty>\":o.$0);\r\n };\r\n SnippetModule.defaultSnippet=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defaultSnippet;\r\n };\r\n SnippetModule.New=function(name,content,parentO)\r\n {\r\n  return Snippet.New(new SnippetId({\r\n   $:0,\r\n   $0:Guid.NewGuid()\r\n  }),name,content,parentO,new FSharpSet.New$1(null),[],SnippetModule.getNextModified());\r\n };\r\n SnippetModule.getNextModified=function()\r\n {\r\n  return Date.now();\r\n };\r\n Hole.Hole={\r\n  $:0\r\n };\r\n Node.New=function(id,isExpandedRm,canHaveChildrenRm,childrenRm,pathRm,parentORm,newChildrenRm)\r\n {\r\n  return{\r\n   id:id,\r\n   isExpandedRm:isExpandedRm,\r\n   canHaveChildrenRm:canHaveChildrenRm,\r\n   childrenRm:childrenRm,\r\n   pathRm:pathRm,\r\n   parentORm:parentORm,\r\n   newChildrenRm:newChildrenRm\r\n  };\r\n };\r\n TreeReader.removeNodeOutdentChildren=function(node,nodes)\r\n {\r\n  var s;\r\n  function f(nodes$1,node$1)\r\n  {\r\n   return Operators$3.op_GreaterGreaterEquals(nodes$1,function(n)\r\n   {\r\n    return TreeReader.outdentNode(node$1,n);\r\n   });\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(node.childrenRm(),Arrays.ofSeq),(s=Operators$3.rtn(nodes),function(s$1)\r\n  {\r\n   return Seq$1.fold(f,s,s$1);\r\n  })),function(n)\r\n  {\r\n   return TreeReader.removeNode(node,n);\r\n  });\r\n };\r\n TreeReader.outdentNode=function(node,nodes)\r\n {\r\n  var v;\r\n  function m(parent)\r\n  {\r\n   return TreeReader.moveToSibling(true,node,parent,nodes);\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(node.parentORm(nodes),function(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:m(o.$0)\r\n   };\r\n  }),(v=Operators$3.rtn(nodes),function(o)\r\n  {\r\n   return o==null?v:o.$0;\r\n  }));\r\n };\r\n TreeReader.indentNode=function(node,nodes)\r\n {\r\n  var s;\r\n  function p(n)\r\n  {\r\n   return!Unchecked.Equals(node.id(),n.id());\r\n  }\r\n  function f(newParentORm,n)\r\n  {\r\n   return Operators$3.op_GreaterGreaterEquals(n.canHaveChildrenRm(),function(can)\r\n   {\r\n    return can?Operators$3.rtn({\r\n     $:1,\r\n     $0:n\r\n    }):newParentORm;\r\n   });\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(node.parentORm(nodes),function(a)\r\n  {\r\n   return a!=null&&a.$==1?Operators$3.op_BarGreaterGreater(a.$0.childrenRm(),function(x)\r\n   {\r\n    var s$1;\r\n    s$1=Arrays.ofSeq(x);\r\n    return s$1;\r\n   }):Operators$3.rtn(nodes);\r\n  }),function(s$1)\r\n  {\r\n   return Seq$1.takeWhile(p,s$1);\r\n  }),(s=Operators$3.rtn(null),function(s$1)\r\n  {\r\n   return Seq$1.fold(f,s,s$1);\r\n  })),function(a)\r\n  {\r\n   var newParent;\r\n   return a!=null&&a.$==1?(newParent=a.$0,Operators$3.op_GreaterGreaterEquals(TreeReader.removeNode(node,nodes),function(n)\r\n   {\r\n    return TreeReader.addChild(true,node,newParent,n);\r\n   })):Operators$3.rtn(nodes);\r\n  });\r\n };\r\n TreeReader.addChild=function(append,node,parentN,nodes)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(parentN.pathRm(),function(a)\r\n   {\r\n    function mapAppend(n)\r\n    {\r\n     var a$1,s;\r\n     return Unchecked.Equals(n.id(),parentN.id())?append?Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),(a$1=List.ofArray([node]),function(b$1)\r\n     {\r\n      return Seq$1.append(b$1,a$1);\r\n     })),Arrays.ofSeq),n.newChildrenRm):Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),(s=List.ofArray([node]),function(s$1)\r\n     {\r\n      return Seq$1.append(s,s$1);\r\n     })),Arrays.ofSeq),n.newChildrenRm):List.contains(n.id(),a)?Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),function(s$1)\r\n     {\r\n      return Seq$1.map(mapAppend,s$1);\r\n     }),FusionM.sequenceSeq),Arrays.ofSeq),n.newChildrenRm):Operators$3.rtn(n);\r\n    }\r\n    return b.ReturnFrom(FusionM.sequenceSeq(Seq$1.map(mapAppend,nodes)));\r\n   });\r\n  }));\r\n };\r\n TreeReader.moveToSibling2=function(after,nodeId,siblingId,nodes)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(TreeReader.tryFindId(nodeId,nodes),function(a)\r\n   {\r\n    var node;\r\n    return a!=null&&a.$==1?(node=a.$0,b.Bind(TreeReader.tryFindId(siblingId,nodes),function(a$1)\r\n    {\r\n     return a$1!=null&&a$1.$==1?b.ReturnFrom(TreeReader.moveToSibling(after,node,a$1.$0,nodes)):b.Return(nodes);\r\n    })):b.Return(nodes);\r\n   });\r\n  }));\r\n };\r\n TreeReader.moveToSibling=function(after,node,sibling,nodes)\r\n {\r\n  return Operators$3.op_GreaterGreaterEquals(TreeReader.removeNode(node,nodes),function(n)\r\n  {\r\n   return TreeReader.addSibling(after,node,sibling,n);\r\n  });\r\n };\r\n TreeReader.tryFindId=function(id,nodes)\r\n {\r\n  return TreeReader.tryFind(function(n)\r\n  {\r\n   return Unchecked.Equals(n.id(),id);\r\n  },nodes);\r\n };\r\n TreeReader.tryFind=function(p,nodes)\r\n {\r\n  function folder(resRm,node)\r\n  {\r\n   return Operators$3.op_GreaterGreaterEquals(resRm,function(a)\r\n   {\r\n    var s;\r\n    return a==null?p(node)?Operators$3.rtn({\r\n     $:1,\r\n     $0:node\r\n    }):Operators$3.op_GreaterGreaterEquals(node.childrenRm(),(s=Operators$3.rtn(null),function(s$1)\r\n    {\r\n     return Seq$1.fold(folder,s,s$1);\r\n    })):Operators$3.rtn({\r\n     $:1,\r\n     $0:a.$0\r\n    });\r\n   });\r\n  }\r\n  return Seq$1.fold(folder,Operators$3.rtn(null),nodes);\r\n };\r\n TreeReader.addSibling=function(after,node,sibling,nodes)\r\n {\r\n  function theSibling(n)\r\n  {\r\n   return Unchecked.Equals(n.id(),sibling.id());\r\n  }\r\n  return Operators$3.op_GreaterGreaterEquals(sibling.pathRm(),function(a)\r\n  {\r\n   var path,parent;\r\n   function mapAdd(n)\r\n   {\r\n    return Unchecked.Equals(n.id(),parent)?Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),function(n$1)\r\n    {\r\n     return TreeReader.addToParent(after,theSibling,node,n,n$1);\r\n    }):List.contains(n.id(),path)?Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),function(s)\r\n    {\r\n     return Seq$1.map(mapAdd,s);\r\n    }),FusionM.sequenceSeq),Arrays.ofSeq),n.newChildrenRm):Operators$3.rtn(n);\r\n   }\r\n   return a.$==1?(path=a.$1,(parent=a.$0,FusionM.sequenceSeq(Seq$1.map(mapAdd,nodes)))):Operators$3.rtn(TreeReader.addNodeToSeq(after,theSibling,node,nodes));\r\n  });\r\n };\r\n TreeReader.addToParent=function(after,p,node,parent,nodes)\r\n {\r\n  return parent.newChildrenRm(Arrays.ofSeq(TreeReader.addNodeToSeq(after,p,node,nodes)));\r\n };\r\n TreeReader.addNodeToSeq=function(after,p,node,nodes)\r\n {\r\n  return List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.collect(function(n)\r\n   {\r\n    return p(n)?after?Seq$1.append([n],Seq$1.delay(function()\r\n    {\r\n     return[node];\r\n    })):Seq$1.append([node],Seq$1.delay(function()\r\n    {\r\n     return[n];\r\n    })):[n];\r\n   },nodes);\r\n  }));\r\n };\r\n TreeReader.removeNodes=function(p,nodes)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   function folder(pair,n)\r\n   {\r\n    var b$1;\r\n    b$1=FusionM.fusion();\r\n    return b$1.Run(b$1.Delay(function()\r\n    {\r\n     return b$1.Bind(pair,function(a)\r\n     {\r\n      var noparent,children;\r\n      noparent=a[1];\r\n      children=a[0];\r\n      return b$1.Bind(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),function(a$1)\r\n      {\r\n       return b$1.Bind(Seq$1.fold(folder,Operators$3.rtn([List.T.Empty,noparent]),a$1),function(a$2)\r\n       {\r\n        var np,ch;\r\n        np=a$2[1];\r\n        ch=a$2[0];\r\n        return p(n)?b$1.Return([children,List.append(ch,np)]):b$1.Bind(n.newChildrenRm(Arrays.ofSeq(Seq$1.rev(ch))),function(a$3)\r\n        {\r\n         return b$1.Return([new List.T({\r\n          $:1,\r\n          $0:a$3,\r\n          $1:children\r\n         }),np]);\r\n        });\r\n       });\r\n      });\r\n     });\r\n    }));\r\n   }\r\n   return b.Bind(Seq$1.fold(folder,Operators$3.rtn([List.T.Empty,List.T.Empty]),nodes),function(a)\r\n   {\r\n    return b.Return(List.rev(List.append(a[1],a[0])));\r\n   });\r\n  }));\r\n };\r\n TreeReader.removeNode=function(node,nodes)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(node.pathRm(),function(a)\r\n   {\r\n    function chRemove(n)\r\n    {\r\n     var b$1;\r\n     b$1=FusionM.fusion();\r\n     return b$1.Run(b$1.Delay(function()\r\n     {\r\n      return Unchecked.Equals(n.id(),node.id())?b$1.Return(null):List.contains(n.id(),a)?b$1.ReturnFrom(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(n.childrenRm(),Arrays.ofSeq),function(s)\r\n      {\r\n       return Seq$1.map(chRemove,s);\r\n      }),FusionM.sequenceSeq),function(s)\r\n      {\r\n       return Seq$1.choose(Global.id,s);\r\n      }),Arrays.ofSeq),n.newChildrenRm),function(a$1)\r\n      {\r\n       return{\r\n        $:1,\r\n        $0:a$1\r\n       };\r\n      })):b$1.Return({\r\n       $:1,\r\n       $0:n\r\n      });\r\n     }));\r\n    }\r\n    return b.ReturnFrom(Operators$3.op_BarGreaterGreater(FusionM.sequenceSeq(Seq$1.map(chRemove,nodes)),function(s)\r\n    {\r\n     return Seq$1.choose(Global.id,s);\r\n    }));\r\n   });\r\n  }));\r\n };\r\n TreeReader.listNodes=function(level,nodes)\r\n {\r\n  return Operators$3.op_BarGreaterGreater(FusionM.sequenceSeq(Seq$1.map(function(node)\r\n  {\r\n   return Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(node.isExpandedRm(),function(exp)\r\n   {\r\n    var l;\r\n    return exp?Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(node.childrenRm(),Arrays.ofSeq),(l=level+1,function(n)\r\n    {\r\n     return TreeReader.listNodes(l,n);\r\n    })):Operators$3.rtn([]);\r\n   }),function(nodes$1)\r\n   {\r\n    return Seq$1.append([[node,level]],nodes$1);\r\n   });\r\n  },nodes)),function(s)\r\n  {\r\n   return Seq$1.collect(Global.id,s);\r\n  });\r\n };\r\n Library[\"String.Right\"]=function(_this,n)\r\n {\r\n  var a,b;\r\n  return Library[\"String.Substring2\"](_this,(a=0,(b=_this.length-n,Unchecked.Compare(a,b)===1?a:b)),_this.length);\r\n };\r\n Library[\"String.Left\"]=function(_this,n)\r\n {\r\n  return n<0?Library[\"String.Substring2\"](_this,0,_this.length+n):Library[\"String.Substring2\"](_this,0,n);\r\n };\r\n Library[\"String.Substring2\"]=function(_this,from,n)\r\n {\r\n  var from$1,b;\r\n  while(true)\r\n   {\r\n    if(n<=0)\r\n     return\"\";\r\n    else\r\n     if(from>=_this.length)\r\n      return\"\";\r\n     else\r\n      if(from<0)\r\n       {\r\n        from$1=from;\r\n        from=0;\r\n        n=n+from$1;\r\n       }\r\n      else\r\n       return Strings.Substring(_this,from,(b=_this.length-from,Unchecked.Compare(n,b)===-1?n:b));\r\n   }\r\n };\r\n Library.delayedVar=function(delay,_var)\r\n {\r\n  var delayedV,x;\r\n  delayedV=Var$1.Create$1(_var.Get());\r\n  x=_var.get_View();\r\n  View$1.Sink(Library.delayed(delay,function(a)\r\n  {\r\n   delayedV.Set(a);\r\n  }),x);\r\n  return delayedV;\r\n };\r\n Library.delayed=function(delay,doF)\r\n {\r\n  function g()\r\n  {\r\n   return Concurrency.Return(null);\r\n  }\r\n  return Library.delayedA(delay,function(x)\r\n  {\r\n   return g(doF(x));\r\n  });\r\n };\r\n Library.delayedA=function(delay,doF)\r\n {\r\n  var cancelTokenO;\r\n  cancelTokenO=null;\r\n  return function(parm)\r\n  {\r\n   var b;\r\n   cancelTokenO==null?void 0:cancelTokenO.$0.Cancel$1();\r\n   cancelTokenO={\r\n    $:1,\r\n    $0:new CancellationTokenSource.New()\r\n   };\r\n   Concurrency.Start((b=null,Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(Concurrency.Sleep(delay),function()\r\n    {\r\n     return Concurrency.Bind(doF(parm),function()\r\n     {\r\n      return Concurrency.Return(null);\r\n     });\r\n    });\r\n   })),{\r\n    $:1,\r\n    $0:cancelTokenO.$0\r\n   });\r\n  };\r\n };\r\n Library.print=function(v)\r\n {\r\n  if(typeof v==\"string\")\r\n   ((function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Utils.toSafe($2));\r\n    };\r\n   }(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(v));\r\n  else\r\n   ((function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Utils.prettyPrint($2));\r\n    };\r\n   }(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(v));\r\n };\r\n Library.Error=function(a)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:a\r\n  };\r\n };\r\n Promise.ofAsyncResult=function(v)\r\n {\r\n  return new Global.Promise(function(resolve,reject)\r\n  {\r\n   Concurrency.StartWithContinuations(v,function(a)\r\n   {\r\n    if(a.$==1)\r\n     reject((function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(Utils.prettyPrint($2));\r\n      };\r\n     }(Global.id))(a.$0));\r\n    else\r\n     resolve(a.$0);\r\n   },function(a)\r\n   {\r\n    reject(a);\r\n   },function(a)\r\n   {\r\n    reject(a);\r\n   },null);\r\n  });\r\n };\r\n PromiseM.ofAsyncResultM=function(v)\r\n {\r\n  return new Global.Promise(function(resolve,reject)\r\n  {\r\n   Concurrency.StartWithContinuations(v,function(a)\r\n   {\r\n    var a$1;\r\n    a$1=Monads.OkM(a);\r\n    a$1.$==1?reject(ResultMessage.summarized(a$1.$0)):resolve(a$1.$0[0]);\r\n   },function(a)\r\n   {\r\n    reject(a);\r\n   },function(a)\r\n   {\r\n    reject(a);\r\n   },null);\r\n  });\r\n };\r\n View.sequenceListApp=function(list)\r\n {\r\n  return View.traverseListApp(Global.id,list);\r\n };\r\n View.traverseListApp=function(f,list)\r\n {\r\n  function cons(head,tail)\r\n  {\r\n   return new List.T({\r\n    $:1,\r\n    $0:head,\r\n    $1:tail\r\n   });\r\n  }\r\n  return List.foldBack(function(head,tail)\r\n  {\r\n   return View.op_LessMultiplyGreater(View.op_LessMultiplyGreater(View.rtn(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return cons($1,$2);\r\n    };\r\n   }),f(head)),tail);\r\n  },list,View.rtn(List.T.Empty));\r\n };\r\n View.op_LessMultiplyGreater=function(a,a$1)\r\n {\r\n  return View$1.Apply(a,a$1);\r\n };\r\n View.sequenceSeq=function(sq)\r\n {\r\n  return View.traverseSeq(Global.id,sq);\r\n };\r\n View.traverseSeq=function(f,sq)\r\n {\r\n  return View.map(Global.id,Arrays.foldBack(function(head,tail)\r\n  {\r\n   return View.op_GreaterGreaterEquals(f(head),function(h)\r\n   {\r\n    return View.op_GreaterGreaterEquals(tail,function(t)\r\n    {\r\n     return View.rtn(new List.T({\r\n      $:1,\r\n      $0:h,\r\n      $1:t\r\n     }));\r\n    });\r\n   });\r\n  },Arrays.ofSeq(sq),View.rtn(List.T.Empty)));\r\n };\r\n View.op_GreaterGreaterEquals=function(v,f)\r\n {\r\n  return View.bind(f,v);\r\n };\r\n View.rtn=function(a)\r\n {\r\n  return View$1.Const(a);\r\n };\r\n View.map=function(a,a$1)\r\n {\r\n  return View$1.Map(a,a$1);\r\n };\r\n View.bind=function(a,a$1)\r\n {\r\n  return View$1.Bind(a,a$1);\r\n };\r\n View.insertWO=function(a)\r\n {\r\n  return a==null?View$1.Const(null):View$1.Map(function(a$1)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a$1\r\n   };\r\n  },a.$0);\r\n };\r\n Var.lensView=function(get,update,view0,_var)\r\n {\r\n  var id,view,$1;\r\n  id=Var.freshId();\r\n  view=View$1.Map2(function(v)\r\n  {\r\n   return get(v);\r\n  },_var.get_View(),view0);\r\n  $1=new UI.Var({\r\n   Get:function()\r\n   {\r\n    return get(_var.Get());\r\n   },\r\n   Set:function(v)\r\n   {\r\n    return _var.Update(function(t)\r\n    {\r\n     return update(t,v);\r\n    });\r\n   },\r\n   SetFinal:function(v)\r\n   {\r\n    return this.Set(v);\r\n   },\r\n   Update:function(f)\r\n   {\r\n    return _var.Update(function(t)\r\n    {\r\n     return update(t,f(get(t)));\r\n    });\r\n   },\r\n   UpdateMaybe:function(f)\r\n   {\r\n    return _var.UpdateMaybe(function(t)\r\n    {\r\n     var x;\r\n     x=f(get(t));\r\n     return x==null?null:{\r\n      $:1,\r\n      $0:update(t,x.$0)\r\n     };\r\n    });\r\n   },\r\n   get_View:function()\r\n   {\r\n    return view;\r\n   },\r\n   get_Id:function()\r\n   {\r\n    return id;\r\n   }\r\n  });\r\n  Var$2.New.call($1);\r\n  return $1;\r\n };\r\n Var.freshId=function()\r\n {\r\n  Var.set_counter(Var.counter()+1);\r\n  return\"varuid\"+Global.String(Var.counter());\r\n };\r\n Var.counter=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.counter;\r\n };\r\n Var.set_counter=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.counter=$1;\r\n };\r\n ListModel.MapLens=function(predO,f,m)\r\n {\r\n  function get(k,v)\r\n  {\r\n   return f(k,m.Lens(k));\r\n  }\r\n  function a(vms,pred)\r\n  {\r\n   return Arrays.filter(pred,vms);\r\n  }\r\n  return predO!=null&&predO.$==1?View$1.MapSeqCachedViewBy(m.key,get,(((Runtime.Curried3(View$1.Map2))(a))(m[\"var\"].get_View()))(predO.$0)):View$1.MapSeqCachedViewBy(m.key,get,m[\"var\"].get_View());\r\n };\r\n ListModel.refreshLM=function(lm,elems)\r\n {\r\n  var keys;\r\n  lm.AppendMany(elems);\r\n  keys=new FSharpSet.New(Seq$1.map(lm.key,elems));\r\n  Seq$1.iter(function(e)\r\n  {\r\n   if(!keys.Contains(lm.key(e)))\r\n    lm.RemoveByKey(lm.key(e));\r\n  },Seq$1.cache(lm));\r\n };\r\n ListModel.currentLens=function(def,curr,model)\r\n {\r\n  return ListModel[\"currentLensUpd'\"](def,curr,function(v)\r\n  {\r\n   model.UpdateBy(function()\r\n   {\r\n    return model.TryFindByKey(model.key(v))==null?null:{\r\n     $:1,\r\n     $0:v\r\n    };\r\n   },model.key(v));\r\n  },model);\r\n };\r\n ListModel[\"currentLensUpd'\"]=function(def,curr,upd,model)\r\n {\r\n  return new FromView.New(View$1.Map2(function(_mdl,kO)\r\n  {\r\n   var o;\r\n   o=kO==null?null:model.TryFindByKey(kO.$0);\r\n   return o==null?def:o.$0;\r\n  },model.v,curr),upd);\r\n };\r\n ListModel.currentLensUpd=function(def,curr,upd,model)\r\n {\r\n  var f;\r\n  function b(a)\r\n  {\r\n   return model.TryFindByKey(a);\r\n  }\r\n  function g(o)\r\n  {\r\n   return o==null?def:o.$0;\r\n  }\r\n  return Var.lensView((f=function(o)\r\n  {\r\n   return o==null?null:b(o.$0);\r\n  },function(x)\r\n  {\r\n   return g(f(x));\r\n  }),function(kO,v)\r\n  {\r\n   (Option.iter(upd(v)))(kO);\r\n   return kO;\r\n  },model.v,curr);\r\n };\r\n ListModel.lensDef=function(def,k,m)\r\n {\r\n  function get(o)\r\n  {\r\n   return o==null?def:o.$0;\r\n  }\r\n  return ListModel[\"lensIntoO'\"](m,get,function()\r\n  {\r\n   return Global.id;\r\n  },k,View$1.Map(get,m.TryFindByKeyAsView(k)));\r\n };\r\n ListModel.docLensMapViewO=function(def,mapView,f,m)\r\n {\r\n  function get(k,v)\r\n  {\r\n   return f(k,ListModel[\"lensIntoO'\"](m,function(o)\r\n   {\r\n    return o==null?def:o.$0;\r\n   },function()\r\n   {\r\n    return Global.id;\r\n   },k,v));\r\n  }\r\n  return Doc.ConvertSeqBy(m.key,function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return get($1,$2);\r\n   };\r\n  },View$1.Map(mapView,m.v));\r\n };\r\n ListModel.docLensMapView=function(mapView,f,m)\r\n {\r\n  function get(k,v)\r\n  {\r\n   return f(k,ListModel[\"lensInto'\"](m,Global.id,function()\r\n   {\r\n    return Global.id;\r\n   },k,v));\r\n  }\r\n  return Doc.ConvertSeqBy(m.key,function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return get($1,$2);\r\n   };\r\n  },View$1.Map(mapView,m.v));\r\n };\r\n ListModel[\"lensIntoO'\"]=function(m,get,update,key,view)\r\n {\r\n  var id,$1;\r\n  id=Var.freshId();\r\n  $1=new Var$2({\r\n   Get:function()\r\n   {\r\n    return get(m.TryFindByKey(key));\r\n   },\r\n   Set:function(v)\r\n   {\r\n    return m.UpdateBy(function(i)\r\n    {\r\n     return{\r\n      $:1,\r\n      $0:(update(i))(v)\r\n     };\r\n    },key);\r\n   },\r\n   Update:function(f)\r\n   {\r\n    return m.UpdateBy(function(i)\r\n    {\r\n     var x;\r\n     return{\r\n      $:1,\r\n      $0:(x=f(get({\r\n       $:1,\r\n       $0:i\r\n      })),(update(i))(x))\r\n     };\r\n    },key);\r\n   },\r\n   UpdateMaybe:function(f)\r\n   {\r\n    return m.UpdateBy(function(i)\r\n    {\r\n     var x,m$1;\r\n     x=f(get({\r\n      $:1,\r\n      $0:i\r\n     }));\r\n     m$1=update(i);\r\n     return x==null?null:{\r\n      $:1,\r\n      $0:m$1(x.$0)\r\n     };\r\n    },key);\r\n   },\r\n   SetFinal:function(v)\r\n   {\r\n    return this.Set(v);\r\n   },\r\n   get_View:function()\r\n   {\r\n    return view;\r\n   },\r\n   get_Id:function()\r\n   {\r\n    return id;\r\n   }\r\n  });\r\n  Var$2.New.call($1);\r\n  return $1;\r\n };\r\n ListModel[\"lensInto'\"]=function(m,get,update,key,view)\r\n {\r\n  var id,$1;\r\n  id=Var.freshId();\r\n  $1=new Var$2({\r\n   Get:function()\r\n   {\r\n    return get(m.FindByKey(key));\r\n   },\r\n   Set:function(v)\r\n   {\r\n    return m.UpdateBy(function(i)\r\n    {\r\n     return{\r\n      $:1,\r\n      $0:(update(i))(v)\r\n     };\r\n    },key);\r\n   },\r\n   Update:function(f)\r\n   {\r\n    return m.UpdateBy(function(i)\r\n    {\r\n     var x;\r\n     return{\r\n      $:1,\r\n      $0:(x=f(get(i)),(update(i))(x))\r\n     };\r\n    },key);\r\n   },\r\n   UpdateMaybe:function(f)\r\n   {\r\n    return m.UpdateBy(function(i)\r\n    {\r\n     var x,m$1;\r\n     x=f(get(i));\r\n     m$1=update(i);\r\n     return x==null?null:{\r\n      $:1,\r\n      $0:m$1(x.$0)\r\n     };\r\n    },key);\r\n   },\r\n   SetFinal:function(v)\r\n   {\r\n    return this.Set(v);\r\n   },\r\n   get_View:function()\r\n   {\r\n    return view;\r\n   },\r\n   get_Id:function()\r\n   {\r\n    return id;\r\n   }\r\n  });\r\n  Var$2.New.call($1);\r\n  return $1;\r\n };\r\n Pojo.newPojoOpt=function(propOs)\r\n {\r\n  function c(n,vO)\r\n  {\r\n   return vO==null?null:{\r\n    $:1,\r\n    $0:[n,vO.$0]\r\n   };\r\n  }\r\n  return Pojo.newPojo(Seq$1.choose(function($1)\r\n  {\r\n   return c($1[0],$1[1]);\r\n  },propOs));\r\n };\r\n Pojo.newPojo=function(props)\r\n {\r\n  var pojo,f;\r\n  function f$1(a,a$1)\r\n  {\r\n   return function(p)\r\n   {\r\n    return Pojo.addProp(a,a$1,p);\r\n   };\r\n  }\r\n  function g(v)\r\n  {\r\n  }\r\n  pojo={};\r\n  Seq$1.iter((f=function(b)\r\n  {\r\n   return(function($1)\r\n   {\r\n    return f$1($1[0],$1[1]);\r\n   }(b))(pojo);\r\n  },function(x)\r\n  {\r\n   return g(f(x));\r\n  }),props);\r\n  return pojo;\r\n };\r\n Pojo.addProp=function(p,p$1,pojo)\r\n {\r\n  pojo[p]=p$1;\r\n  return pojo;\r\n };\r\n Position.New=function(line,col)\r\n {\r\n  return{\r\n   line:line,\r\n   col:col\r\n  };\r\n };\r\n AnnotationType.Hint={\r\n  $:3\r\n };\r\n AnnotationType.Info={\r\n  $:2\r\n };\r\n AnnotationType.Warning={\r\n  $:1\r\n };\r\n AnnotationType.Error={\r\n  $:0\r\n };\r\n Annotation.New=function(startP,endP,severity,message)\r\n {\r\n  return{\r\n   startP:startP,\r\n   endP:endP,\r\n   severity:severity,\r\n   message:message\r\n  };\r\n };\r\n Completion.New=function(kind,label,detail,replace)\r\n {\r\n  return{\r\n   kind:kind,\r\n   label:label,\r\n   detail:detail,\r\n   replace:replace\r\n  };\r\n };\r\n GenEditorHook.New=function(generateDoc,getValue,setValue,setDisabled,showAnnotations,posFromIndex,indexFromPos,getWordAt,getSelectionText,getUri,setUri,hookOnChange)\r\n {\r\n  return{\r\n   generateDoc:generateDoc,\r\n   getValue:getValue,\r\n   setValue:setValue,\r\n   setDisabled:setDisabled,\r\n   showAnnotations:showAnnotations,\r\n   posFromIndex:posFromIndex,\r\n   indexFromPos:indexFromPos,\r\n   getWordAt:getWordAt,\r\n   getSelectionText:getSelectionText,\r\n   getUri:getUri,\r\n   setUri:setUri,\r\n   hookOnChange:hookOnChange\r\n  };\r\n };\r\n GenEditor$1.New=function(_var,disabled,annotations,onChange,onRender,autoCompletion,toolTip,declaration,editorO,editorHook)\r\n {\r\n  return{\r\n   \"var\":_var,\r\n   disabled:disabled,\r\n   annotations:annotations,\r\n   onChange:onChange,\r\n   onRender:onRender,\r\n   autoCompletion:autoCompletion,\r\n   toolTip:toolTip,\r\n   declaration:declaration,\r\n   editorO:editorO,\r\n   editorHook:editorHook\r\n  };\r\n };\r\n GenEditor.generateDoc=function(genE)\r\n {\r\n  var onChange,o,o$1;\r\n  onChange=(o=(o$1=genE.onChange,o$1==null?null:{\r\n   $:1,\r\n   $0:o$1.$0(genE)\r\n  }),o==null?Global.ignore:o.$0);\r\n  return(genE.editorHook.generateDoc(genE))(function(ed)\r\n  {\r\n   genE.editorO={\r\n    $:1,\r\n    $0:ed\r\n   };\r\n   GenEditor.bindVarEditor(genE.editorHook.hookOnChange,genE.editorHook.getValue,genE.editorHook.setValue,onChange,genE[\"var\"]);\r\n   View$1.Sink(genE.editorHook.showAnnotations,genE.annotations);\r\n   View$1.Sink(genE.editorHook.setDisabled,genE.disabled);\r\n   genE.onRender(genE);\r\n  });\r\n };\r\n GenEditor.bindVarEditor=function(setEvent,getVal,setVal,onChange,_var)\r\n {\r\n  var editorChanged,varChanged;\r\n  editorChanged=[0];\r\n  varChanged=[0];\r\n  setEvent(function()\r\n  {\r\n   var v;\r\n   v=getVal();\r\n   !Unchecked.Equals(_var.Get(),v)?(editorChanged[0]=editorChanged[0]+1,_var.Set(v),onChange(v)):void 0;\r\n  });\r\n  View$1.Sink(function()\r\n  {\r\n   if(editorChanged[0]>varChanged[0])\r\n    varChanged[0]=editorChanged[0];\r\n   else\r\n    if(!Unchecked.Equals(getVal(),_var.Get()))\r\n     setVal(_var.Get());\r\n  },_var.get_View());\r\n };\r\n GenEditor.newVarO=function(edh,v)\r\n {\r\n  var x;\r\n  x=GenEditor.newVar(edh,Var$1.Lens(v,function(o)\r\n  {\r\n   return o==null?\"\":o.$0;\r\n  },function(sO,s)\r\n  {\r\n   return sO==null?null:{\r\n    $:1,\r\n    $0:s\r\n   };\r\n  }));\r\n  return GenEditor.disabled(View$1.Map(function($1)\r\n  {\r\n   return $1==null;\r\n  },v.get_View()),x);\r\n };\r\n GenEditor.newText=function(edh,v)\r\n {\r\n  return GenEditor.newVar(edh,Var$1.Create$1(v));\r\n };\r\n GenEditor.newVar=function(edh,_var)\r\n {\r\n  return GenEditor$1.New(_var,View$1.Const(false),View$1.Const([]),null,Global.ignore,null,null,null,null,edh);\r\n };\r\n GenEditor[\"var\"]=function(genE)\r\n {\r\n  return genE[\"var\"];\r\n };\r\n GenEditor.disabled=function(dis,genE)\r\n {\r\n  return GenEditor$1.New(genE[\"var\"],dis,genE.annotations,genE.onChange,genE.onRender,genE.autoCompletion,genE.toolTip,genE.declaration,genE.editorO,genE.editorHook);\r\n };\r\n GenEditor.onRender=function(f,genE)\r\n {\r\n  return GenEditor$1.New(genE[\"var\"],genE.disabled,genE.annotations,genE.onChange,f,genE.autoCompletion,genE.toolTip,genE.declaration,genE.editorO,genE.editorHook);\r\n };\r\n GenEditor.onChange=function(f,genE)\r\n {\r\n  return GenEditor$1.New(genE[\"var\"],genE.disabled,genE.annotations,f,genE.onRender,genE.autoCompletion,genE.toolTip,genE.declaration,genE.editorO,genE.editorHook);\r\n };\r\n GenEditor.setVar=function(v,genE)\r\n {\r\n  return GenEditor$1.New(v,genE.disabled,genE.annotations,genE.onChange,genE.onRender,genE.autoCompletion,genE.toolTip,genE.declaration,genE.editorO,genE.editorHook);\r\n };\r\n Serializer.serLMdField=function(name,lmd,s,s$1)\r\n {\r\n  var serS;\r\n  function deserializer(rc,b)\r\n  {\r\n   lmd(rc).Set(serS[1](b));\r\n   return rc;\r\n  }\r\n  serS=Serializer.serSeq(s,s$1);\r\n  return[name,function(rc)\r\n  {\r\n   var x;\r\n   x=(lmd(rc))[\"var\"].Get();\r\n   return serS[0](x);\r\n  },function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return deserializer($1,$2);\r\n   };\r\n  }];\r\n };\r\n Serializer.serVarField=function(name,_var,s,s$1)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return a.Get();\r\n  }\r\n  return[name,(f=function(x)\r\n  {\r\n   return g(_var(x));\r\n  },function(x)\r\n  {\r\n   return s(f(x));\r\n  }),function(rc)\r\n  {\r\n   return function(o)\r\n   {\r\n    Var$1.Set(_var(rc),s$1(o));\r\n    return rc;\r\n   };\r\n  }];\r\n };\r\n Serializer.serMap=function(s,s$1,s$2,s$3)\r\n {\r\n  var serKVPs,t,f,g,f$1;\r\n  function m(kvp)\r\n  {\r\n   return[kvp.K,kvp.V];\r\n  }\r\n  function g$1(a)\r\n  {\r\n   return new FSharpMap.New(a);\r\n  }\r\n  serKVPs=(t=Serializer.serDup(s,s$1,s$2,s$3),Serializer.serSeq(t[0],t[1]));\r\n  return[(f=function(s$4)\r\n  {\r\n   return Seq$1.map(m,s$4);\r\n  },(g=serKVPs[0],function(x)\r\n  {\r\n   return g(f(x));\r\n  })),(f$1=serKVPs[1],function(x)\r\n  {\r\n   return g$1(f$1(x));\r\n  })];\r\n };\r\n Serializer.serDup=function(s,s$1,s$2,s$3)\r\n {\r\n  var serFst,serSnd,g;\r\n  function d(a)\r\n  {\r\n   return[serFst[1](null),serSnd[1](null)];\r\n  }\r\n  function f(os)\r\n  {\r\n   return[serFst[1](Arrays.get(os,0)),serSnd[1](Arrays.get(os,1))];\r\n  }\r\n  serFst=[s,s$1];\r\n  serSnd=[s$2,s$3];\r\n  return[function(t)\r\n  {\r\n   return(((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"[\"+Utils.toSafe($2)+\", \"+Utils.toSafe($3)+\"]\");\r\n   }))(Global.id))(serFst[0](t[0])))(serSnd[0](t[1]));\r\n  },(g=function(v)\r\n  {\r\n   return Serializer.ifUndefF(d,f,v);\r\n  },function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  })];\r\n };\r\n Serializer.serOpt=function(s,s$1)\r\n {\r\n  var ser,f,m,g,f$1,f$2;\r\n  function g$1(o)\r\n  {\r\n   return o==null?\"null\":o.$0;\r\n  }\r\n  function d(a)\r\n  {\r\n   return null;\r\n  }\r\n  function g$2(a)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a\r\n   };\r\n  }\r\n  ser=[s,s$1];\r\n  return[(f=(m=ser[0],function(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:m(o.$0)\r\n   };\r\n  }),function(x)\r\n  {\r\n   return g$1(f(x));\r\n  }),(g=(f$1=(f$2=ser[1],function(x)\r\n  {\r\n   return g$2(f$2(x));\r\n  }),function(v)\r\n  {\r\n   return Serializer.ifUndefF(d,f$1,v);\r\n  }),function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  })];\r\n };\r\n Serializer.serSet=function(s,s$1)\r\n {\r\n  var ser,f,m,f$1,g,f$2,m$1;\r\n  function d(a)\r\n  {\r\n   return[];\r\n  }\r\n  function g$1(a)\r\n  {\r\n   return new FSharpSet.New(a);\r\n  }\r\n  ser=[s,s$1];\r\n  return[(f=(m=ser[0],function(s$2)\r\n  {\r\n   return new FSharpSet.New$1(BalancedTree.OfSeq(Seq$1.map(m,s$2)));\r\n  }),function(x)\r\n  {\r\n   return Serializer.sprintA(f(x));\r\n  }),(f$1=(g=(f$2=(m$1=ser[1],function(s$2)\r\n  {\r\n   return Seq$1.map(m$1,s$2);\r\n  }),function(v)\r\n  {\r\n   return Serializer.ifUndefF(d,f$2,v);\r\n  }),function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  }),function(x)\r\n  {\r\n   return g$1(f$1(x));\r\n  })];\r\n };\r\n Serializer.serLst=function(s,s$1)\r\n {\r\n  var ser,f,m,f$1,g,f$2,m$1;\r\n  function d(a)\r\n  {\r\n   return[];\r\n  }\r\n  ser=[s,s$1];\r\n  return[(f=(m=ser[0],function(l)\r\n  {\r\n   return List.map(m,l);\r\n  }),function(x)\r\n  {\r\n   return Serializer.sprintA(f(x));\r\n  }),(f$1=(g=(f$2=(m$1=ser[1],function(s$2)\r\n  {\r\n   return Seq$1.map(m$1,s$2);\r\n  }),function(v)\r\n  {\r\n   return Serializer.ifUndefF(d,f$2,v);\r\n  }),function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  }),function(x)\r\n  {\r\n   return List.ofSeq(f$1(x));\r\n  })];\r\n };\r\n Serializer.serArr=function(s,s$1)\r\n {\r\n  var ser,f,m,f$1,g,f$2,m$1;\r\n  function d(a)\r\n  {\r\n   return[];\r\n  }\r\n  ser=[s,s$1];\r\n  return[(f=(m=ser[0],function(a)\r\n  {\r\n   return Arrays.map(m,a);\r\n  }),function(x)\r\n  {\r\n   return Serializer.sprintA(f(x));\r\n  }),(f$1=(g=(f$2=(m$1=ser[1],function(s$2)\r\n  {\r\n   return Seq$1.map(m$1,s$2);\r\n  }),function(v)\r\n  {\r\n   return Serializer.ifUndefF(d,f$2,v);\r\n  }),function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  }),function(x)\r\n  {\r\n   return Arrays.ofSeq(f$1(x));\r\n  })];\r\n };\r\n Serializer.serSeq=function(s,s$1)\r\n {\r\n  var ser,f,m,g,f$1,m$1;\r\n  function d(a)\r\n  {\r\n   return[];\r\n  }\r\n  ser=[s,s$1];\r\n  return[(f=(m=ser[0],function(s$2)\r\n  {\r\n   return Seq$1.map(m,s$2);\r\n  }),function(x)\r\n  {\r\n   return Serializer.sprintA(f(x));\r\n  }),(g=(f$1=(m$1=ser[1],function(s$2)\r\n  {\r\n   return Seq$1.map(m$1,s$2);\r\n  }),function(v)\r\n  {\r\n   return Serializer.ifUndefF(d,f$1,v);\r\n  }),function(x)\r\n  {\r\n   return g(Global.id(x));\r\n  })];\r\n };\r\n Serializer.serFieldO=function(name,get,set,s,s$1)\r\n {\r\n  function g(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:s(o.$0)\r\n   };\r\n  }\r\n  return[name,function(x)\r\n  {\r\n   return g(get(x));\r\n  },function(rc)\r\n  {\r\n   return function(o)\r\n   {\r\n    return set(!o?null:{\r\n     $:1,\r\n     $0:s$1(o)\r\n    },rc);\r\n   };\r\n  }];\r\n };\r\n Serializer.serField=function(name,get,set,s,s$1)\r\n {\r\n  var f;\r\n  function g(a)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a\r\n   };\r\n  }\r\n  return[name,(f=function(x)\r\n  {\r\n   return s(get(x));\r\n  },function(x)\r\n  {\r\n   return g(f(x));\r\n  }),function(rc)\r\n  {\r\n   return function(o)\r\n   {\r\n    return set(s$1(o),rc);\r\n   };\r\n  }];\r\n };\r\n Serializer.serDate=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serDate;\r\n };\r\n Serializer.serString=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serString;\r\n };\r\n Serializer.serBool=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serBool;\r\n };\r\n Serializer.serInt=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serInt;\r\n };\r\n Serializer.serFloat=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serFloat;\r\n };\r\n Serializer.sprintA=function(v)\r\n {\r\n  var x;\r\n  x=Strings.concat(\", \",v);\r\n  return(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"[\"+Utils.toSafe($2)+\"]\");\r\n   };\r\n  }(Global.id))(x);\r\n };\r\n Serializer.deserGuid=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.deserGuid;\r\n };\r\n Serializer.Exists=function(field,o)\r\n {\r\n  return!o[field]?null:{\r\n   $:1,\r\n   $0:o[field]\r\n  };\r\n };\r\n Serializer.ifUndefF=function(def,f,v)\r\n {\r\n  return!v?def(v):f(v);\r\n };\r\n Serializer.ifUndef=function(def,v)\r\n {\r\n  return!v?def:v;\r\n };\r\n REGEX.Identifier=function(a)\r\n {\r\n  var $1,a$1,t;\r\n  return(a$1=LibraryJS.REGEX$1(\"^[$a-zA-Z_][0-9a-zA-Z_\\\\.\\\\-$]*$\",\"\",a),a$1!=null&&a$1.$==1&&((t=a$1.$0,!Unchecked.Equals(t,null)&&t.length===1)&&($1=Arrays.get(a$1.$0,0),true)))?{\r\n   $:1,\r\n   $0:$1\r\n  }:null;\r\n };\r\n REGEX.getEndWord=function(line,ch)\r\n {\r\n  var a,t;\r\n  a=LibraryJS.REGEX$1(\"^([a-zA-Z_]\\\\w*)\",\"g\",line.substring(ch));\r\n  return a!=null&&a.$==1?(t=a.$0,!Unchecked.Equals(t,null)&&t.length===1)?Arrays.get(a.$0,0):\"\":\"\";\r\n };\r\n REGEX.getStartWord=function(line,ch)\r\n {\r\n  var a,t;\r\n  a=LibraryJS.REGEX$1(\"([a-zA-Z_]\\\\w*)$\",\"g\",Strings.Substring(line,0,ch));\r\n  return a!=null&&a.$==1?(t=a.$0,!Unchecked.Equals(t,null)&&t.length===1)?Arrays.get(a.$0,0):\"\":\"\";\r\n };\r\n Hoverable$1=Hoverable.Hoverable=Runtime.Class({\r\n  Content:function(e)\r\n  {\r\n   return e.on(\"mouseenter\",function()\r\n   {\r\n    return DomUtility.AddClass(e.elt,\"hovering\");\r\n   }).on(\"mouseleave\",function()\r\n   {\r\n    return DomUtility.RemoveClass(e.elt,\"hovering\");\r\n   });\r\n  },\r\n  Content$1:function(ds)\r\n  {\r\n   return Doc.Element(\"div\",this.get_Attributes(),ds);\r\n  },\r\n  get_Attributes:function()\r\n  {\r\n   var $this,view;\r\n   $this=this;\r\n   return List.ofArray([(view=View$1.Const(\"hovering\"),AttrModule.DynamicPred(\"class\",this.hover.get_View(),view)),AttrProxy.HandlerImpl(\"mouseenter\",function()\r\n   {\r\n    return function()\r\n    {\r\n     return $this.hover.Set(true);\r\n    };\r\n   }),AttrProxy.HandlerImpl(\"mouseleave\",function()\r\n   {\r\n    return function()\r\n    {\r\n     return $this.hover.Set(false);\r\n    };\r\n   })]);\r\n  }\r\n },null,Hoverable$1);\r\n Hoverable$1.get_Demo=function()\r\n {\r\n  return Hoverable$1.New$1().Content(Doc.Element(\"div\",[AttrProxy.Create(\"style\",\"flex-flow: column;\")],[Doc.TextNode(\"Hover over me!\")]));\r\n };\r\n Hoverable$1.Content$3203$81=Runtime.Curried3(function(e,$1,$2)\r\n {\r\n  return DomUtility.RemoveClass(e.elt,\"hovering\");\r\n });\r\n Hoverable$1.get_Attributes$3199$69=Runtime.Curried3(function(_this,$1,$2)\r\n {\r\n  return _this.hover.Set(false);\r\n });\r\n Hoverable$1.get_Attributes$3198$69=Runtime.Curried3(function(_this,$1,$2)\r\n {\r\n  return _this.hover.Set(true);\r\n });\r\n Hoverable$1.New$1=function()\r\n {\r\n  return Hoverable$1.New(Var$1.Create$1(false));\r\n };\r\n Hoverable$1.New=function(hover)\r\n {\r\n  return new Hoverable$1({\r\n   hover:hover\r\n  });\r\n };\r\n Hoverable.hoverable=function(e)\r\n {\r\n  return Hoverable$1.New$1().Content(e);\r\n };\r\n ResizeObserver.addResizeObserver=function(f,el)\r\n {\r\n  var r,ro,changed,b;\r\n  try\r\n  {\r\n   r=!(!Global.ResizeObserver);\r\n  }\r\n  catch(e)\r\n  {\r\n   r=false;\r\n  }\r\n  if(r)\r\n   {\r\n    ro=new Global.ResizeObserver(f);\r\n    ResizeObserver.set_observers(new List.T({\r\n     $:1,\r\n     $0:ro,\r\n     $1:ResizeObserver.observers()\r\n    }));\r\n    ro.observe(el);\r\n   }\r\n  else\r\n   {\r\n    changed=ResizeObserver.dimsChanged(el);\r\n    Concurrency.Start((b=null,Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.While(function()\r\n     {\r\n      return el.isConnected;\r\n     },Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Bind(Concurrency.Sleep(110),function()\r\n      {\r\n       return changed()?(f(),Concurrency.Zero()):Concurrency.Zero();\r\n      });\r\n     }));\r\n    })),null);\r\n   }\r\n };\r\n ResizeObserver.dimsChanged=function(el)\r\n {\r\n  var dims;\r\n  dims=[el.getBoundingClientRect()];\r\n  return function()\r\n  {\r\n   var ndims;\r\n   ndims=el.getBoundingClientRect();\r\n   return Unchecked.Equals(ResizeObserver.domRect2Tuple(dims[0]),ResizeObserver.domRect2Tuple(ndims))?false:(dims[0]=ndims,true);\r\n  };\r\n };\r\n ResizeObserver.domRect2Tuple=function(r)\r\n {\r\n  return[r.top,r.left,r.width,r.height];\r\n };\r\n ResizeObserver.observers=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.observers;\r\n };\r\n ResizeObserver.set_observers=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.observers=$1;\r\n };\r\n WcTabStripT=WcTabStrip.WcTabStripT=Runtime.Class({\r\n  connectedCallback:function()\r\n  {\r\n   var $this,el,shadowRoot,elsh;\r\n   function addTab()\r\n   {\r\n    var a,top,tabs;\r\n    top=!el.hasAttribute(\"bottom\");\r\n    tabs=List.ofSeq(Seq$1.delay(function()\r\n    {\r\n     return Seq$1.collect(function(i)\r\n     {\r\n      var node;\r\n      node=el.childNodes[i-1];\r\n      return Unchecked.Equals(node.nodeType,Node$1.ELEMENT_NODE)?[[node.hasAttribute(\"tabname\")?node.getAttribute(\"tabname\"):(function($1)\r\n      {\r\n       return function($2)\r\n       {\r\n        return $1(\"Tab \"+Global.String($2));\r\n       };\r\n      }(Global.id))(i),node]]:[];\r\n     },Operators$7.range(1,el.childNodes.length));\r\n    }));\r\n    while(elsh.childNodes.length>0)\r\n     elsh.removeChild(elsh.lastChild);\r\n    a=WcTabStrip.tabStrip($this.selected,top,true,tabs,Doc.Element(\"slot\",List.T.Empty,List.T.Empty));\r\n    Templates.LoadLocalTemplates(\"\");\r\n    Doc.Run(elsh,a);\r\n   }\r\n   $this=this;\r\n   !this.added?(el=this,shadowRoot=el.attachShadow({\r\n    mode:\"open\"\r\n   }),elsh=self.document.createElement(\"div\"),shadowRoot.appendChild(elsh),addTab(),el.addEventListener(\"DOMSubtreeModified\",Library.delayed(50,addTab)),this.added=true):void 0;\r\n  }\r\n },Obj,WcTabStripT);\r\n WcTabStripT.Constructor=function()\r\n {\r\n  var _this,r;\r\n  _this=(r=Reflect.construct(self.HTMLElement,[],this.__proto__.constructor),r);\r\n  self.FsRoot.LibraryJS.WebComponent.WcTabStrip.WcTabStripT.New.call(_this);\r\n  return _this;\r\n };\r\n WcTabStripT.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n  this.added=false;\r\n  this.selected=Var$1.Create$1(1);\r\n  (function($1)\r\n  {\r\n   return $1(\"WcTabStripT initializer\");\r\n  }(function(s)\r\n  {\r\n   console.log(s);\r\n  }));\r\n },WcTabStripT);\r\n WcTabStrip.init=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.init;\r\n };\r\n WcTabStrip.tabStrip$3347$64=function(i,selected)\r\n {\r\n  return function()\r\n  {\r\n   return function()\r\n   {\r\n    return selected.Set(i+1);\r\n   };\r\n  };\r\n };\r\n WcTabStrip.tabStrip=function(selected,top,horizontal,tabs,content)\r\n {\r\n  var strip;\r\n  strip=Doc.Element(\"div\",[AttrProxy.Create(\"class\",(((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"tab-strip \"+Utils.toSafe($2)+\" \"+Utils.toSafe($3));\r\n  }))(Global.id))(top?\"top\":\"bottom\"))(horizontal?\"horizontal\":\"vertical\"))],List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.collect(function(m)\r\n   {\r\n    var i;\r\n    i=m[0];\r\n    return[Hoverable$1.New$1().Content(Doc.Element(\"div\",[AttrModule.Dynamic(\"class\",View$1.Map(function(sel)\r\n    {\r\n     return\"tab\"+(sel===i+1?\" selected\":\"\");\r\n    },selected.get_View())),AttrProxy.Create(\"draggable\",\"true\"),AttrProxy.HandlerImpl(\"click\",function()\r\n    {\r\n     return function()\r\n     {\r\n      return selected.Set(i+1);\r\n     };\r\n    })],[Doc.TextNode(m[1][0])]))];\r\n   },Seq$1.indexed(tabs));\r\n  })));\r\n  return Doc.Element(\"div\",[AttrProxy.Create(\"class\",\"tab-panel\")],List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append(top?[strip]:[],Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append([Doc.Element(\"div\",[AttrProxy.Create(\"class\",\"tab-content\")],[content])],Seq$1.delay(function()\r\n    {\r\n     return Seq$1.append(!top?[strip]:[],Seq$1.delay(function()\r\n     {\r\n      return Seq$1.append([Doc.Element(\"style\",List.T.Empty,List.ofArray([Doc.TextNode(WcTabStrip.css())]))],Seq$1.delay(function()\r\n      {\r\n       return[Doc.Element(\"style\",List.T.Empty,List.ofArray([Doc.TextView(View$1.Map(function($1)\r\n       {\r\n        return function($2)\r\n        {\r\n         return $1(\"\\r\\n                                              ::slotted(*              ) { display: none }\\r\\n                                              ::slotted(*:nth-child(\"+Global.String($2)+\")) { display: grid }\\r\\n                                           \");\r\n        };\r\n       }(Global.id),selected.get_View()))]))];\r\n      }));\r\n     }));\r\n    }));\r\n   }));\r\n  })));\r\n };\r\n WcTabStrip.css=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.css;\r\n };\r\n WcSplitterT=WcSplitter.WcSplitterT=Runtime.Class({\r\n  connectedCallback:function()\r\n  {\r\n   var el,shadowRoot,elsh,minV,maxV,value,first,vertical,size,padding,gap,dragging,startP,start,domElem,a;\r\n   function sizeCalc(sh)\r\n   {\r\n    var p,pt,pb,r;\r\n    p=vertical?[\"padding-left\",\"padding-right\",\"grid-column-gap\"]:[\"padding-top\",\"padding-bottom\",\"grid-row-gap\"];\r\n    pt=Global.parseFloat(\"0\"+Global.jQuery(sh.parentElement.parentElement).css(p[0]));\r\n    pb=Global.parseFloat(\"0\"+Global.jQuery(sh.parentElement.parentElement).css(p[1]));\r\n    gap.Set(Global.parseFloat(\"0\"+Global.jQuery(sh.parentElement.parentElement).css(p[2])));\r\n    padding[0]=pt+pb;\r\n    r=el.getBoundingClientRect();\r\n    return vertical?first?[r.width,r.height]:[-r.width,r.height]:first?[r.height,r.width]:[-r.height,r.width];\r\n   }\r\n   function mouseCoord(ev)\r\n   {\r\n    return vertical?ev.clientX:ev.clientY;\r\n   }\r\n   function drag(ev)\r\n   {\r\n    var v,b;\r\n    v=(mouseCoord(ev)-start[0])*100/size[0][0]+startP[0];\r\n    value.Set((b=Unchecked.Compare(minV,v)===1?minV:v,Unchecked.Compare(maxV,b)===-1?maxV:b));\r\n   }\r\n   function finishDragging()\r\n   {\r\n    if(dragging[0])\r\n     {\r\n      dragging[0]=false;\r\n      self.removeEventListener(\"mousemove\",drag,false);\r\n      self.removeEventListener(\"mouseup\",finishDragging,false);\r\n     }\r\n   }\r\n   function startDragging(ev)\r\n   {\r\n    var o,o$1;\r\n    if(!dragging[0])\r\n     {\r\n      dragging[0]=true;\r\n      startP[0]=value.Get();\r\n      start[0]=mouseCoord(ev);\r\n      size[0]=(o=(o$1=domElem[0],o$1==null?null:{\r\n       $:1,\r\n       $0:sizeCalc(o$1.$0)\r\n      }),o==null?[100,500]:o.$0);\r\n      self.addEventListener(\"mousemove\",drag,false);\r\n      self.addEventListener(\"mouseup\",finishDragging,false);\r\n      ev.preventDefault();\r\n     }\r\n   }\r\n   function partSizes(sz,gap$1,pad,spl)\r\n   {\r\n    return[(sz-gap$1-pad)*spl/100,(sz-gap$1-pad)*(100-spl)/100];\r\n   }\r\n   function styleSections(p1,p2)\r\n   {\r\n    return(((((Runtime.Curried(function($1,$2,$3,$4,$5)\r\n    {\r\n     return $1(\" \"+$2.toFixed(2)+\"px \"+$3.toFixed(2)+\"px ; \"+Utils.toSafe($4)+\" : \"+$5.toFixed(2)+\"px; \");\r\n    },5))(Global.id))(p1))(p2))(vertical?\"height\":\"width\"))(size[0][1]);\r\n   }\r\n   function recalc()\r\n   {\r\n    var x;\r\n    x=domElem[0];\r\n    (Option.iter(function(sh)\r\n    {\r\n     size[0]=sizeCalc(sh);\r\n    }))(x);\r\n    value.Set(value.Get());\r\n   }\r\n   if(!this.added)\r\n    {\r\n     el=this;\r\n     shadowRoot=el.attachShadow({\r\n      mode:\"open\"\r\n     });\r\n     elsh=self.document.createElement(\"div\");\r\n     minV=el.hasAttribute(\"min\")?Global.parseFloat(el.getAttribute(\"min\")):4;\r\n     maxV=el.hasAttribute(\"max\")?Global.parseFloat(el.getAttribute(\"max\")):96;\r\n     value=Var$1.Create$1(el.hasAttribute(\"value\")?Global.parseFloat(el.getAttribute(\"value\")):50);\r\n     first=!el.hasAttribute(\"second\");\r\n     vertical=el.hasAttribute(\"vertical\");\r\n     size=[[0,0]];\r\n     padding=[0];\r\n     gap=Var$1.Create$1(0);\r\n     dragging=[false];\r\n     startP=[0];\r\n     start=[0];\r\n     domElem=[null];\r\n     a=(((((vertical?WcSplitter.layoutVertical():WcSplitter.layoutHorizontal())(View$1.Map(function(spl)\r\n     {\r\n      var x;\r\n      x=partSizes(size[0][0],gap.Get(),padding[0],spl);\r\n      return styleSections.apply(null,x);\r\n     },value.get_View())))(function()\r\n     {\r\n      ResizeObserver.addResizeObserver(recalc,el);\r\n      recalc();\r\n     }))(function(sp)\r\n     {\r\n      domElem[0]={\r\n       $:1,\r\n       $0:sp\r\n      };\r\n      recalc();\r\n     }))(function(me)\r\n     {\r\n      startDragging(me);\r\n     }))(View$1.Map(function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(Utils.prettyPrint($2)+\"px\");\r\n      };\r\n     }(Global.id),gap.get_View()));\r\n     Templates.LoadLocalTemplates(\"\");\r\n     Doc.Run(elsh,a);\r\n     shadowRoot.appendChild(elsh.firstChild);\r\n     this.added=true;\r\n    }\r\n  }\r\n },Obj,WcSplitterT);\r\n WcSplitterT.Constructor=function()\r\n {\r\n  var _this,r;\r\n  _this=(r=Reflect.construct(self.HTMLElement,[],this.__proto__.constructor),r);\r\n  self.FsRoot.LibraryJS.WebComponent.WcSplitter.WcSplitterT.New.call(_this);\r\n  return _this;\r\n };\r\n WcSplitterT.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n  this.added=false;\r\n  (function($1)\r\n  {\r\n   return $1(\"WcSplitterT initializer\");\r\n  }(function(s)\r\n  {\r\n   console.log(s);\r\n  }));\r\n },WcSplitterT);\r\n WcSplitter.init=function(layoutH,layoutV)\r\n {\r\n  var o;\r\n  o=new WcSplitterT.New();\r\n  WcSplitter.set_layoutHorizontal(layoutH);\r\n  WcSplitter.set_layoutVertical(layoutV);\r\n  WebComponent.defineWebComponent(\"wcomp-splitter\",WcSplitterT.Constructor,self.FsRoot.LibraryJS.WebComponent.WcSplitter.WcSplitterT.New);\r\n };\r\n WcSplitter.layoutVertical=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.layoutVertical;\r\n };\r\n WcSplitter.set_layoutVertical=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.layoutVertical=$1;\r\n };\r\n WcSplitter.layoutHorizontal=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.layoutHorizontal;\r\n };\r\n WcSplitter.set_layoutHorizontal=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.layoutHorizontal=$1;\r\n };\r\n WebComponent.defineWebComponent=function(_nm,_o,_c)\r\n {\r\n  try\r\n  {\r\n   console.log(\"defineWebComponent: \"+_nm);\r\n   Object.setPrototypeOf(_c.prototype,self.HTMLElement.prototype);\r\n   Object.setPrototypeOf(_c,self.HTMLElement);\r\n   Object.setPrototypeOf(_o.prototype,_c.prototype);\r\n   self.customElements.define(_nm,_o);\r\n  }\r\n  catch(m)\r\n  {\r\n   (function($1)\r\n   {\r\n    return $1(\"Failed to define WebComponent. Not supported.\");\r\n   }(function(s)\r\n   {\r\n    console.log(s);\r\n   }));\r\n  }\r\n };\r\n Position$1.New=function(column,lineNumber)\r\n {\r\n  return{\r\n   column:column,\r\n   lineNumber:lineNumber\r\n  };\r\n };\r\n Range.New=function(startColumn,endColumn,startLineNumber,endLineNumber)\r\n {\r\n  return{\r\n   startColumn:startColumn,\r\n   endColumn:endColumn,\r\n   startLineNumber:startLineNumber,\r\n   endLineNumber:endLineNumber\r\n  };\r\n };\r\n Uri.New=function(authority,fragment,fsPath,path,query,scheme)\r\n {\r\n  return{\r\n   authority:authority,\r\n   fragment:fragment,\r\n   fsPath:fsPath,\r\n   path:path,\r\n   query:query,\r\n   scheme:scheme\r\n  };\r\n };\r\n Location.New=function(range,uri)\r\n {\r\n  return{\r\n   range:range,\r\n   uri:uri\r\n  };\r\n };\r\n FindMatch.New=function(matches,range)\r\n {\r\n  return{\r\n   matches:matches,\r\n   range:range\r\n  };\r\n };\r\n WordAtPosition.New=function(endColumn,startColumn,word)\r\n {\r\n  return{\r\n   endColumn:endColumn,\r\n   startColumn:startColumn,\r\n   word:word\r\n  };\r\n };\r\n Model.New=function(uri)\r\n {\r\n  return{\r\n   uri:uri\r\n  };\r\n };\r\n MarkDownString.New=function(value,isTrusted)\r\n {\r\n  return{\r\n   value:value,\r\n   isTrusted:isTrusted\r\n  };\r\n };\r\n MarkerData.New=function(startColumn,endColumn,startLineNumber,endLineNumber,severity,message)\r\n {\r\n  return{\r\n   startColumn:startColumn,\r\n   endColumn:endColumn,\r\n   startLineNumber:startLineNumber,\r\n   endLineNumber:endLineNumber,\r\n   severity:severity,\r\n   message:message\r\n  };\r\n };\r\n CompletionItem.New=function(kind,label,detail)\r\n {\r\n  return{\r\n   kind:kind,\r\n   label:label,\r\n   detail:detail\r\n  };\r\n };\r\n Hover.New=function(contents,range)\r\n {\r\n  return{\r\n   contents:contents,\r\n   range:range\r\n  };\r\n };\r\n Editor=Monaco.Editor=Runtime.Class({},Obj,Editor);\r\n Editor.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },Editor);\r\n MonacoConfig.New=function(_var,onChange,onRender,editorO,disabled,options,overrides)\r\n {\r\n  return{\r\n   \"var\":_var,\r\n   onChange:onChange,\r\n   onRender:onRender,\r\n   editorO:editorO,\r\n   disabled:disabled,\r\n   options:options,\r\n   overrides:overrides\r\n  };\r\n };\r\n Monaco.newVarO=function(v)\r\n {\r\n  var x;\r\n  x=Monaco.newVar(Var$1.Lens(v,function(o)\r\n  {\r\n   return o==null?\"\":o.$0;\r\n  },function(sO,s)\r\n  {\r\n   return sO==null?null:{\r\n    $:1,\r\n    $0:s\r\n   };\r\n  }));\r\n  return Monaco.disabled(View$1.Map(function($1)\r\n  {\r\n   return $1==null;\r\n  },v.get_View()),x);\r\n };\r\n Monaco.newText=function(v)\r\n {\r\n  return Monaco.newVar(Var$1.Create$1(v));\r\n };\r\n Monaco[\"var\"]=function(monc)\r\n {\r\n  return monc[\"var\"];\r\n };\r\n Monaco.disabled=function(dis,monc)\r\n {\r\n  return MonacoConfig.New(monc[\"var\"],monc.onChange,monc.onRender,monc.editorO,dis,monc.options,monc.overrides);\r\n };\r\n Monaco.onRender=function(f,monc)\r\n {\r\n  return MonacoConfig.New(monc[\"var\"],monc.onChange,{\r\n   $:1,\r\n   $0:f\r\n  },monc.editorO,monc.disabled,monc.options,monc.overrides);\r\n };\r\n Monaco.onChange=function(f,monc)\r\n {\r\n  return MonacoConfig.New(monc[\"var\"],f,monc.onRender,monc.editorO,monc.disabled,monc.options,monc.overrides);\r\n };\r\n Monaco.setVar=function(v,monc)\r\n {\r\n  return MonacoConfig.New(v,monc.onChange,monc.onRender,monc.editorO,monc.disabled,monc.options,monc.overrides);\r\n };\r\n Monaco.render$3716$48=function(monc)\r\n {\r\n  return function(elchild)\r\n  {\r\n   var editor,_elt;\r\n   editor=(_elt=elchild.parentElement,self.monaco.editor.create(_elt,monc.options,monc.overrides));\r\n   ResizeObserver.addResizeObserver(function()\r\n   {\r\n    editor.layout();\r\n   },elchild.parentElement);\r\n   elchild.parentNode.removeChild(elchild);\r\n   monc.editorO={\r\n    $:1,\r\n    $0:editor\r\n   };\r\n   (Option.iter(function(onrender)\r\n   {\r\n    onrender(editor);\r\n   }))(monc.onRender);\r\n   GenEditor.bindVarEditor(function(a)\r\n   {\r\n    editor.onDidChangeModelContent(a);\r\n   },function()\r\n   {\r\n    return editor.getValue();\r\n   },function(a)\r\n   {\r\n    editor.setValue(a);\r\n   },monc.onChange,monc[\"var\"]);\r\n  };\r\n };\r\n Monaco.render=function(monc)\r\n {\r\n  var b;\r\n  return Doc.Async((b=null,Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Monaco.loader(),function()\r\n   {\r\n    return Concurrency.Return(Doc.Element(\"div\",[AttrProxy.OnAfterRenderImpl(function(elchild)\r\n    {\r\n     var editor,_elt;\r\n     editor=(_elt=elchild.parentElement,self.monaco.editor.create(_elt,monc.options,monc.overrides));\r\n     ResizeObserver.addResizeObserver(function()\r\n     {\r\n      editor.layout();\r\n     },elchild.parentElement);\r\n     elchild.parentNode.removeChild(elchild);\r\n     monc.editorO={\r\n      $:1,\r\n      $0:editor\r\n     };\r\n     (Option.iter(function(onrender)\r\n     {\r\n      onrender(editor);\r\n     }))(monc.onRender);\r\n     GenEditor.bindVarEditor(function(a)\r\n     {\r\n      editor.onDidChangeModelContent(a);\r\n     },function()\r\n     {\r\n      return editor.getValue();\r\n     },function(a)\r\n     {\r\n      editor.setValue(a);\r\n     },monc.onChange,monc[\"var\"]);\r\n    })],[]));\r\n   });\r\n  })));\r\n };\r\n Monaco.loader=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.loader;\r\n };\r\n Monaco.newVar=function(_var)\r\n {\r\n  return MonacoConfig.New(_var,Global.ignore,null,null,View$1.Const(false),null,null);\r\n };\r\n MonacoRT.New=function(editorO,onChange,options,overrides)\r\n {\r\n  return{\r\n   editorO:editorO,\r\n   onChange:onChange,\r\n   options:options,\r\n   overrides:overrides\r\n  };\r\n };\r\n CompletionItemProvider=MonacoGenAdapter.CompletionItemProvider=Runtime.Class({\r\n  resolveCompletionItem:function(item,token)\r\n  {\r\n   return CompletionItem.New(item.kind,item.label,\"more details\");\r\n  },\r\n  provideCompletionItems:function(model,pos,token,context)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   return PromiseM.ofAsyncResultM((b=AsyncResultMAutoOpen.asyncResultM(),b.Run(b.Delay(function()\r\n   {\r\n    return AsyncResultMAutoOpen[\"AsyncResultMBuilder.Bind\"](b,$this.autoComplete(Position.New(pos.lineNumber,pos.column)),function(a)\r\n    {\r\n     return b.Return(Arrays.map(function(comp)\r\n     {\r\n      return CompletionItem.New(MonacoGenAdapter.convertGlyphChar(comp.kind),comp.label,comp.detail);\r\n     },a));\r\n    });\r\n   }))));\r\n  }\r\n },Obj,CompletionItemProvider);\r\n CompletionItemProvider.New=Runtime.Ctor(function(autoComplete)\r\n {\r\n  Obj.New.call(this);\r\n  this.autoComplete=autoComplete;\r\n },CompletionItemProvider);\r\n HoverProvider=MonacoGenAdapter.HoverProvider=Runtime.Class({\r\n  provideHover:function(model,pos,token)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   return PromiseM.ofAsyncResultM((b=AsyncResultMAutoOpen.asyncResultM(),b.Run(b.Delay(function()\r\n   {\r\n    return AsyncResultMAutoOpen[\"AsyncResultMBuilder.Bind\"](b,$this.toolTip(Position.New(pos.lineNumber,pos.column)),function(a)\r\n    {\r\n     return a!=null&&a.$==1?b.Return(Hover.New([MarkDownString.New(a.$0,true)],null)):b.Return(null);\r\n    });\r\n   }))));\r\n  }\r\n },Obj,HoverProvider);\r\n HoverProvider.New=Runtime.Ctor(function(toolTip)\r\n {\r\n  Obj.New.call(this);\r\n  this.toolTip=toolTip;\r\n },HoverProvider);\r\n DefinitionProvider=MonacoGenAdapter.DefinitionProvider=Runtime.Class({\r\n  provideDefinition:function(model,pos,token)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   return PromiseM.ofAsyncResultM((b=AsyncResultMAutoOpen.asyncResultM(),b.Run(b.Delay(function()\r\n   {\r\n    return AsyncResultMAutoOpen[\"AsyncResultMBuilder.Bind\"](b,$this.declaration(Position.New(pos.lineNumber,pos.column)),function(a)\r\n    {\r\n     var pos$1;\r\n     return a!=null&&a.$==1?(pos$1=a.$0[0],b.Return(Location.New(Range.New(pos$1.col,pos$1.col,pos$1.line,pos$1.line),self.monaco.Uri.parse(a.$0[1])))):b.Return(null);\r\n    });\r\n   }))));\r\n  }\r\n },Obj,DefinitionProvider);\r\n DefinitionProvider.New=Runtime.Ctor(function(declaration)\r\n {\r\n  Obj.New.call(this);\r\n  this.declaration=declaration;\r\n },DefinitionProvider);\r\n MonacoGenAdapter.newVar=function(options,overrides,v)\r\n {\r\n  return GenEditor.newVar(MonacoGenAdapter.newHook(MonacoGenAdapter.newRT(options,overrides)),v);\r\n };\r\n MonacoGenAdapter.newRT=function(options,overrides)\r\n {\r\n  return MonacoRT.New(null,Global.ignore,options,overrides);\r\n };\r\n MonacoGenAdapter.newHook=function(monRT)\r\n {\r\n  function g(g$1,o)\r\n  {\r\n   return MonacoGenAdapter.generateDoc(monRT,g$1,o);\r\n  }\r\n  return GenEditorHook.New(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return g($1,$2);\r\n   };\r\n  },function()\r\n  {\r\n   return MonacoGenAdapter.getValue(monRT);\r\n  },function(t)\r\n  {\r\n   MonacoGenAdapter.setValue(monRT,t);\r\n  },Global.ignore,function(a)\r\n  {\r\n   MonacoGenAdapter.showAnnotations(monRT,a);\r\n  },function(i)\r\n  {\r\n   return MonacoGenAdapter.posFromIndex(monRT,i);\r\n  },function(p)\r\n  {\r\n   return MonacoGenAdapter.indexFromPos(monRT,p);\r\n  },function(p)\r\n  {\r\n   return MonacoGenAdapter.getWordAt(monRT,p);\r\n  },function()\r\n  {\r\n   return MonacoGenAdapter.getSelect(monRT);\r\n  },function()\r\n  {\r\n   return MonacoGenAdapter.getUri(monRT);\r\n  },function(u)\r\n  {\r\n   MonacoGenAdapter.setUri(monRT,u);\r\n  },function(f)\r\n  {\r\n   monRT.onChange=f;\r\n  });\r\n };\r\n MonacoGenAdapter.showAnnotations=function(monRT,ans)\r\n {\r\n  MonacoGenAdapter.iterEditor(monRT,function(ed)\r\n  {\r\n   var ms,_m;\r\n   ms=Arrays.ofSeq(Seq$1.map(function(an)\r\n   {\r\n    var m;\r\n    return MarkerData.New(an.startP.col,an.endP.col,an.startP.line,an.endP.line,(m=an.severity,m.$==0?8:m.$==1?4:m.$==3?1:2),an.message);\r\n   },ans));\r\n   _m=ed.getModel();\r\n   self.monaco.editor.setModelMarkers(_m,\"annotations\",ms);\r\n  });\r\n };\r\n MonacoGenAdapter.getSelect=function(monRT)\r\n {\r\n  var o;\r\n  o=MonacoGenAdapter.mapEditor(monRT,function(ed)\r\n  {\r\n   var x;\r\n   x=ed.getSelection();\r\n   return ed.getModel().getValueInRange(x);\r\n  });\r\n  return o==null?\"\":o.$0;\r\n };\r\n MonacoGenAdapter.getWordAt=function(monRT,pos)\r\n {\r\n  return MonacoGenAdapter.bindEditor(monRT,function(ed)\r\n  {\r\n   var word;\r\n   word=ed.getModel().getWordAtPosition(Position$1.New(pos.col,pos.line));\r\n   return!word?null:{\r\n    $:1,\r\n    $0:[word.word,Position.New(pos.line,word.startColumn)]\r\n   };\r\n  });\r\n };\r\n MonacoGenAdapter.setValue=function(monRT,txt)\r\n {\r\n  MonacoGenAdapter.iterEditor(monRT,function(ed)\r\n  {\r\n   ed.setValue(txt);\r\n  });\r\n };\r\n MonacoGenAdapter.getValue=function(monRT)\r\n {\r\n  var o;\r\n  o=MonacoGenAdapter.mapEditor(monRT,function(ed)\r\n  {\r\n   return ed.getValue();\r\n  });\r\n  return o==null?\"\":o.$0;\r\n };\r\n MonacoGenAdapter.setUri=function(monRT,uri)\r\n {\r\n  MonacoGenAdapter.iterEditor(monRT,function(ed)\r\n  {\r\n   ed.getModel().uri=self.monaco.Uri.parse(uri);\r\n  });\r\n };\r\n MonacoGenAdapter.getUri=function(monRT)\r\n {\r\n  var o;\r\n  o=MonacoGenAdapter.mapEditor(monRT,function(ed)\r\n  {\r\n   return Global.String(ed.getModel().uri);\r\n  });\r\n  return o==null?\"\":o.$0;\r\n };\r\n MonacoGenAdapter.generateDoc$3858$48=function(monRT,onRender,genE)\r\n {\r\n  return function(elchild)\r\n  {\r\n   var editor,_elt;\r\n   editor=(_elt=elchild.parentElement,self.monaco.editor.create(_elt,monRT.options,monRT.overrides));\r\n   ResizeObserver.addResizeObserver(function()\r\n   {\r\n    editor.layout();\r\n   },elchild.parentElement);\r\n   elchild.parentNode.removeChild(elchild);\r\n   monRT.editorO={\r\n    $:1,\r\n    $0:editor\r\n   };\r\n   onRender(editor);\r\n   editor.onDidChangeModelContent(monRT.onChange);\r\n   (Option.iter(function(f)\r\n   {\r\n    var _p;\r\n    _p=new HoverProvider.New(f(genE));\r\n    self.monaco.languages.registerHoverProvider(\"fsharp\",_p);\r\n   }))(genE.toolTip);\r\n   (Option.iter(function(f)\r\n   {\r\n    var _p;\r\n    _p=new DefinitionProvider.New(f(genE));\r\n    self.monaco.languages.registerDefinitionProvider(\"fsharp\",_p);\r\n   }))(genE.declaration);\r\n   (Option.iter(function(f)\r\n   {\r\n    var _p;\r\n    _p=new CompletionItemProvider.New(f(genE));\r\n    self.monaco.languages.registerCompletionItemProvider(\"fsharp\",_p);\r\n   }))(genE.autoCompletion);\r\n  };\r\n };\r\n MonacoGenAdapter.generateDoc=function(monRT,genE,onRender)\r\n {\r\n  var b;\r\n  return Doc.Async((b=null,Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Monaco.loader(),function()\r\n   {\r\n    return Concurrency.Return(Doc.Element(\"div\",[AttrProxy.OnAfterRenderImpl(function(elchild)\r\n    {\r\n     var editor,_elt;\r\n     editor=(_elt=elchild.parentElement,self.monaco.editor.create(_elt,monRT.options,monRT.overrides));\r\n     ResizeObserver.addResizeObserver(function()\r\n     {\r\n      editor.layout();\r\n     },elchild.parentElement);\r\n     elchild.parentNode.removeChild(elchild);\r\n     monRT.editorO={\r\n      $:1,\r\n      $0:editor\r\n     };\r\n     onRender(editor);\r\n     editor.onDidChangeModelContent(monRT.onChange);\r\n     (Option.iter(function(f)\r\n     {\r\n      var _p;\r\n      _p=new HoverProvider.New(f(genE));\r\n      self.monaco.languages.registerHoverProvider(\"fsharp\",_p);\r\n     }))(genE.toolTip);\r\n     (Option.iter(function(f)\r\n     {\r\n      var _p;\r\n      _p=new DefinitionProvider.New(f(genE));\r\n      self.monaco.languages.registerDefinitionProvider(\"fsharp\",_p);\r\n     }))(genE.declaration);\r\n     (Option.iter(function(f)\r\n     {\r\n      var _p;\r\n      _p=new CompletionItemProvider.New(f(genE));\r\n      self.monaco.languages.registerCompletionItemProvider(\"fsharp\",_p);\r\n     }))(genE.autoCompletion);\r\n    })],[]));\r\n   });\r\n  })));\r\n };\r\n MonacoGenAdapter.convertGlyphChar=function(a)\r\n {\r\n  return a===\"C\"?6:a===\"E\"?12:a===\"S\"?11:a===\"I\"?7:a===\"N\"?8:a===\"M\"?1:a===\"P\"?9:a===\"F\"?4:a===\"T\"?6:a===\"K\"?13:0;\r\n };\r\n MonacoGenAdapter.posFromIndex=function(monRT,i)\r\n {\r\n  var o;\r\n  o=MonacoGenAdapter.mapEditor(monRT,function(ed)\r\n  {\r\n   return MonacoGenAdapter.posEd2Gen(ed.getModel().getPositionAt(i));\r\n  });\r\n  return o==null?Position.New(1,1):o.$0;\r\n };\r\n MonacoGenAdapter.indexFromPos=function(monRT,p)\r\n {\r\n  var o;\r\n  o=MonacoGenAdapter.mapEditor(monRT,function(ed)\r\n  {\r\n   return ed.getModel().getOffsetAt(MonacoGenAdapter.posGen2Ed(p));\r\n  });\r\n  return o==null?-1:o.$0;\r\n };\r\n MonacoGenAdapter.posEd2Gen=function(p)\r\n {\r\n  return Position.New(p.lineNumber,p.column);\r\n };\r\n MonacoGenAdapter.posGen2Ed=function(p)\r\n {\r\n  return Position$1.New(p.col,p.line);\r\n };\r\n MonacoGenAdapter.bindEditor=function(monRT,f)\r\n {\r\n  var m;\r\n  m=monRT.editorO;\r\n  return m!=null&&m.$==1?f(m.$0):null;\r\n };\r\n MonacoGenAdapter.mapEditor=function(monRT,f)\r\n {\r\n  var m;\r\n  m=monRT.editorO;\r\n  return m!=null&&m.$==1?{\r\n   $:1,\r\n   $0:f(m.$0)\r\n  }:null;\r\n };\r\n MonacoGenAdapter.iterEditor=function(monRT,f)\r\n {\r\n  var m;\r\n  m=monRT.editorO;\r\n  m!=null&&m.$==1?f(m.$0):void 0;\r\n };\r\n AppFrameworkTemplate.html=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.html;\r\n };\r\n PlgElemName=AppFramework.PlgElemName=Runtime.Class({\r\n  get_Id:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,PlgElemName);\r\n PlugInName=AppFramework.PlugInName=Runtime.Class({\r\n  get_Id:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,PlugInName);\r\n PlugInVar.New=function(varName,varVar)\r\n {\r\n  return{\r\n   varName:varName,\r\n   varVar:varVar\r\n  };\r\n };\r\n PlugInView.New=function(viwName,viwView)\r\n {\r\n  return{\r\n   viwName:viwName,\r\n   viwView:viwView\r\n  };\r\n };\r\n PlugInDoc.New=function(docName,docDoc)\r\n {\r\n  return{\r\n   docName:docName,\r\n   docDoc:docDoc\r\n  };\r\n };\r\n PlugInAction.New=function(actName,actFunction,actEnabled)\r\n {\r\n  return{\r\n   actName:actName,\r\n   actFunction:actFunction,\r\n   actEnabled:actEnabled\r\n  };\r\n };\r\n PlugInQuery.New=function(qryName,qryFunction)\r\n {\r\n  return{\r\n   qryName:qryName,\r\n   qryFunction:qryFunction\r\n  };\r\n };\r\n PlugIn.New=function(plgName,plgVars,plgViews,plgDocs,plgActions,plgQueries)\r\n {\r\n  return{\r\n   plgName:plgName,\r\n   plgVars:plgVars,\r\n   plgViews:plgViews,\r\n   plgDocs:plgDocs,\r\n   plgActions:plgActions,\r\n   plgQueries:plgQueries\r\n  };\r\n };\r\n PlugInBuilder=AppFramework.PlugInBuilder=Runtime.Class({\r\n  Merge:function(plg,prefix,p2)\r\n  {\r\n   plg.plgVars.AppendMany(Seq$1.map(function(v)\r\n   {\r\n    return PlugInVar.New(new PlgElemName({\r\n     $:0,\r\n     $0:prefix+v.varName.get_Id()\r\n    }),v.varVar);\r\n   },p2.plgVars));\r\n   plg.plgViews.AppendMany(Seq$1.map(function(w)\r\n   {\r\n    return PlugInView.New(new PlgElemName({\r\n     $:0,\r\n     $0:prefix+w.viwName.get_Id()\r\n    }),w.viwView);\r\n   },p2.plgViews));\r\n   plg.plgDocs.AppendMany(Seq$1.map(function(d)\r\n   {\r\n    return PlugInDoc.New(new PlgElemName({\r\n     $:0,\r\n     $0:prefix+d.docName.get_Id()\r\n    }),d.docDoc);\r\n   },p2.plgDocs));\r\n   plg.plgActions.AppendMany(Seq$1.map(function(a)\r\n   {\r\n    return PlugInAction.New(new PlgElemName({\r\n     $:0,\r\n     $0:prefix+a.actName.get_Id()\r\n    }),a.actFunction,a.actEnabled);\r\n   },p2.plgActions));\r\n   plg.plgQueries.AppendMany(Seq$1.map(function(q)\r\n   {\r\n    return PlugInQuery.New(new PlgElemName({\r\n     $:0,\r\n     $0:prefix+q.qryName.get_Id()\r\n    }),q.qryFunction);\r\n   },p2.plgQueries));\r\n   return plg;\r\n  },\r\n  AddViw:function(plg,name,viw)\r\n  {\r\n   plg.plgViews.Append(AppFramework.newViw(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),viw));\r\n   return plg;\r\n  },\r\n  AddActO:function(plg,name,actO)\r\n  {\r\n   actO==null?void 0:plg.plgActions.Append(AppFramework.newAct(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),actO.$0));\r\n   return plg;\r\n  },\r\n  AddAct2:function(plg,name,act,p1,p2)\r\n  {\r\n   plg.plgActions.Append(AppFramework.newActF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:2,\r\n    $0:act,\r\n    $1:p1,\r\n    $2:p2\r\n   }));\r\n   return plg;\r\n  },\r\n  AddAct1:function(plg,name,act,p1)\r\n  {\r\n   plg.plgActions.Append(AppFramework.newActF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:1,\r\n    $0:act,\r\n    $1:p1\r\n   }));\r\n   return plg;\r\n  },\r\n  AddAct:function(plg,name,act)\r\n  {\r\n   plg.plgActions.Append(AppFramework.newAct(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),act));\r\n   return plg;\r\n  },\r\n  AddQry:function(plg,name,qry)\r\n  {\r\n   plg.plgQueries.Append(AppFramework.newQry(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),qry));\r\n   return plg;\r\n  },\r\n  AddDoc5:function(plg,name,doc,a,b,c,d,e)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDocF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:6,\r\n    $0:doc,\r\n    $1:a,\r\n    $2:b,\r\n    $3:c,\r\n    $4:d,\r\n    $5:e\r\n   }));\r\n   return plg;\r\n  },\r\n  AddDoc4:function(plg,name,doc,a,b,c,d)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDocF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:5,\r\n    $0:doc,\r\n    $1:a,\r\n    $2:b,\r\n    $3:c,\r\n    $4:d\r\n   }));\r\n   return plg;\r\n  },\r\n  AddDoc3:function(plg,name,doc,a,b,c)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDocF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:4,\r\n    $0:doc,\r\n    $1:a,\r\n    $2:b,\r\n    $3:c\r\n   }));\r\n   return plg;\r\n  },\r\n  AddDoc2:function(plg,name,doc,p1,p2)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDocF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:3,\r\n    $0:doc,\r\n    $1:p1,\r\n    $2:p2\r\n   }));\r\n   return plg;\r\n  },\r\n  AddDoc1:function(plg,name,doc,p1)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDocF(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),{\r\n    $:2,\r\n    $0:doc,\r\n    $1:p1\r\n   }));\r\n   return plg;\r\n  },\r\n  AddDoc0:function(plg,name,doc)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDoc0(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),doc));\r\n   return plg;\r\n  },\r\n  AddDoc:function(plg,name,doc)\r\n  {\r\n   plg.plgDocs.Append(AppFramework.newDoc(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),doc));\r\n   return plg;\r\n  },\r\n  AddVar:function(plg,name,_var)\r\n  {\r\n   plg.plgVars.Append(AppFramework.newVar(new PlgElemName({\r\n    $:0,\r\n    $0:name\r\n   }),_var));\r\n   return plg;\r\n  },\r\n  Name:function(plg,name)\r\n  {\r\n   return PlugIn.New(new PlugInName({\r\n    $:0,\r\n    $0:name\r\n   }),plg.plgVars,plg.plgViews,plg.plgDocs,plg.plgActions,plg.plgQueries);\r\n  },\r\n  For:function(coll,func)\r\n  {\r\n   var ie;\r\n   ie=Enumerator.Get(coll);\r\n   while(ie.MoveNext())\r\n    func(ie.Current());\r\n  },\r\n  Yield:function()\r\n  {\r\n   return this.Zero();\r\n  },\r\n  Zero:function()\r\n  {\r\n   var i;\r\n   i=AppFramework.defaultPlugIn();\r\n   return PlugIn.New(new PlugInName({\r\n    $:0,\r\n    $0:\"Main\"\r\n   }),i.plgVars,i.plgViews,i.plgDocs,i.plgActions,i.plgQueries);\r\n  }\r\n },Obj,PlugInBuilder);\r\n PlugInBuilder.New=Runtime.Ctor(function()\r\n {\r\n  Obj.New.call(this);\r\n },PlugInBuilder);\r\n Fun.New=function(f,p)\r\n {\r\n  return{\r\n   f:f,\r\n   p:p\r\n  };\r\n };\r\n P.New=function(r)\r\n {\r\n  return{\r\n   r:r\r\n  };\r\n };\r\n Val.textAtt=function(a)\r\n {\r\n  var $1;\r\n  $1=Operators$7.FailWith;\r\n  return $1(\"textAtt not implemented\");\r\n };\r\n Val.textDoc=function(a)\r\n {\r\n  return a.$==0?Doc.TextView(a.$0):Doc.TextNode(a.$0);\r\n };\r\n Val.addAtt=function(a,atts)\r\n {\r\n  return atts.$==0?function($1)\r\n  {\r\n   return $1(\"addAtt for VView not implemented\");\r\n  }(Operators$7.FailWith):{\r\n   $:1,\r\n   $0:Seq$1.append(atts.$0,[a])\r\n  };\r\n };\r\n Val.addDoc=function(d,docs)\r\n {\r\n  return docs.$==0?{\r\n   $:1,\r\n   $0:[Doc.BindView(Doc.Concat,docs.$0),d]\r\n  }:{\r\n   $:1,\r\n   $0:Seq$1.append(docs.$0,[d])\r\n  };\r\n };\r\n Val.toView=function(a)\r\n {\r\n  return a.$==0?a.$0:View$1.Const(a.$0);\r\n };\r\n Val.sequenceListApp=function(list)\r\n {\r\n  return Val.traverseListApp(Global.id,list);\r\n };\r\n Val.traverseListApp=function(f,list)\r\n {\r\n  function cons(head,tail)\r\n  {\r\n   return new List.T({\r\n    $:1,\r\n    $0:head,\r\n    $1:tail\r\n   });\r\n  }\r\n  return List.foldBack(function(head,tail)\r\n  {\r\n   return((Val.op_LessMultiplyGreater())(((Val.op_LessMultiplyGreater())(Val.rtn(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return cons($1,$2);\r\n    };\r\n   })))(f(head))))(tail);\r\n  },list,Val.rtn(List.T.Empty));\r\n };\r\n Val.op_LessMultiplyGreater=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.op_LessMultiplyGreater;\r\n };\r\n Val.apply=function(fv,vv)\r\n {\r\n  return fv.$==0?vv.$==1?{\r\n   $:0,\r\n   $0:View$1.Apply(fv.$0,View$1.Const(vv.$0))\r\n  }:{\r\n   $:0,\r\n   $0:View$1.Apply(fv.$0,vv.$0)\r\n  }:vv.$==0?{\r\n   $:0,\r\n   $0:View$1.Apply(View$1.Const(fv.$0),vv.$0)\r\n  }:{\r\n   $:1,\r\n   $0:fv.$0(vv.$0)\r\n  };\r\n };\r\n Val.rtn=function(a)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:a\r\n  };\r\n };\r\n Val.map=function(f,a)\r\n {\r\n  return a.$==0?{\r\n   $:0,\r\n   $0:View$1.Map(f,a.$0)\r\n  }:{\r\n   $:1,\r\n   $0:f(a.$0)\r\n  };\r\n };\r\n AAttr.AEmpty={\r\n  $:3\r\n };\r\n Extract0.extractTextD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractTextD;\r\n };\r\n Extract0.extractAtsD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractAtsD;\r\n };\r\n Extract0.getTextValD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getTextValD;\r\n };\r\n Extract0.getTextValFromSeqD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getTextValFromSeqD;\r\n };\r\n Extract0.extractDocD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractDocD;\r\n };\r\n Extract0.getDocFromTextTypesD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getDocFromTextTypesD;\r\n };\r\n Extract0.getTextActViewFromReferenceD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getTextActViewFromReferenceD;\r\n };\r\n Extract0.getDocFromReferenceD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getDocFromReferenceD;\r\n };\r\n Extract0.getTextData=function(txt)\r\n {\r\n  var o,o$1,$1;\r\n  o=(o$1=String.delimitedO(\"@{\",\"}\",txt),o$1==null?null:{\r\n   $:1,\r\n   $0:($1=o$1.$0,Extract0.getOneTextData($1[0],$1[1],$1[2]))\r\n  });\r\n  return o==null?List.ofArray([{\r\n   $:0,\r\n   $0:txt\r\n  }]):o.$0;\r\n };\r\n Extract0.getOneTextData=function(bef,name,aft)\r\n {\r\n  return(bef===\"\"?Global.id:function(ls)\r\n  {\r\n   return new List.T({\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:bef\r\n    },\r\n    $1:ls\r\n   });\r\n  })(new List.T({\r\n   $:1,\r\n   $0:{\r\n    $:1,\r\n    $0:name\r\n   },\r\n   $1:aft===\"\"?List.T.Empty:Extract0.getTextData(aft)\r\n  }));\r\n };\r\n Extract0.getTextActViewFromReference=function(ref)\r\n {\r\n  return View$1.Const({\r\n   $:0,\r\n   $0:(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"getTextActViewFromReference not implemented: @{\"+Utils.toSafe($2)+\"}\");\r\n    };\r\n   }(Global.id))(ref)\r\n  });\r\n };\r\n Extract0.getDocFromReference=function(ref)\r\n {\r\n  return Doc.TextNode((function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"getDocFromReference not implemented: @{\"+Utils.toSafe($2)+\"}\");\r\n   };\r\n  }(Global.id))(ref));\r\n };\r\n ListModelData=AppFramework.ListModelData=Runtime.Class({\r\n  get_CurrentV:function()\r\n  {\r\n   var $this;\r\n   $this=this;\r\n   return new FromView.New(this.get_CurrentW(),function(v)\r\n   {\r\n    var m,k;\r\n    m=$this.selV.Get();\r\n    m==null?void 0:(k=m.$0,View$1.Get(function(elems)\r\n    {\r\n     if(elems.ContainsKey(k))\r\n      elems.Append(v);\r\n    },$this.elemsW));\r\n   });\r\n  },\r\n  get_CurrentW:function()\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=View$1.get_Do();\r\n   return View$1.Bind(function(a)\r\n   {\r\n    return View$1.Bind(function(a$1)\r\n    {\r\n     return a$1==null?View$1.Const($this.def):View$1.Bind(function(a$2)\r\n     {\r\n      return a$2==null?View$1.Const($this.def):View$1.Const(a$2.$0);\r\n     },a.TryFindByKeyAsView(a$1.$0));\r\n    },$this.selV.get_View());\r\n   },this.elemsW);\r\n  },\r\n  PlugIn:function(ofStrO,toStr)\r\n  {\r\n   var b,f;\r\n   function g(v)\r\n   {\r\n   }\r\n   b=AppFramework.plugin();\r\n   return b.AddAct(b.AddAct(b.AddVar(b.AddDoc0(b.Yield(),\"list\",this.doc),\"sel\",AppFramework.lensStrO(AppFramework.mapVarO(ofStrO,toStr,this.selV))),\"add\",(f=this.add,function(x)\r\n   {\r\n    return g(f(x));\r\n   })),\"del\",this.delCur);\r\n  }\r\n },null,ListModelData);\r\n ListModelData.New=function(elemsW,doc,selV,add,delCur,def)\r\n {\r\n  return new ListModelData({\r\n   elemsW:elemsW,\r\n   doc:doc,\r\n   selV:selV,\r\n   add:add,\r\n   delCur:delCur,\r\n   def:def\r\n  });\r\n };\r\n AppFramework.mapVarO=function(ofBO,toB,sel)\r\n {\r\n  return new FromView.New(View$1.Map(function($1)\r\n  {\r\n   return $1==null?null:{\r\n    $:1,\r\n    $0:toB($1.$0)\r\n   };\r\n  },sel.get_View()),function(a)\r\n  {\r\n   var x;\r\n   function f(a$1)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a$1\r\n    };\r\n   }\r\n   function g(a$1)\r\n   {\r\n    sel.Set(a$1);\r\n   }\r\n   if(a!=null&&a.$==1)\r\n    {\r\n     x=ofBO(a.$0);\r\n     (Option.iter(function(x$1)\r\n     {\r\n      return g(f(x$1));\r\n     }))(x);\r\n    }\r\n   else\r\n    sel.Set(null);\r\n  });\r\n };\r\n AppFramework.lensStrO=function(sel)\r\n {\r\n  return new FromView.New(View$1.Map(function($1)\r\n  {\r\n   return $1!=null&&$1.$==1?$1.$0:\"\";\r\n  },sel.get_View()),function(s)\r\n  {\r\n   if(s===\"\")\r\n    sel.Set(null);\r\n   else\r\n    sel.Set({\r\n     $:1,\r\n     $0:s\r\n    });\r\n  });\r\n };\r\n AppFramework.concatMainDocs=function(plugins)\r\n {\r\n  return Doc.Concat(Seq$1.choose(function(a)\r\n  {\r\n   var a$1;\r\n   a$1=AppFramework.Lazy(a.docDoc);\r\n   return a$1.$==0?{\r\n    $:1,\r\n    $0:a$1.$0\r\n   }:a$1.$==1?{\r\n    $:1,\r\n    $0:a$1.$0()\r\n   }:null;\r\n  },Seq$1.choose(function(plg)\r\n  {\r\n   return Seq$1.tryHead(plg.plgDocs);\r\n  },plugins)));\r\n };\r\n AppFramework.op_Dereference=function(v)\r\n {\r\n  return P.New((Operators$2.rtn())({\r\n   $:1,\r\n   $0:v\r\n  }));\r\n };\r\n AppFramework.getMainDoc=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getMainDoc;\r\n };\r\n AppFramework.splitterPerc=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.splitterPerc;\r\n };\r\n AppFramework.addPlugIn=function(p)\r\n {\r\n  p.plgViews.Append(AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"PlugInName\"\r\n  }),View$1.Const(p.plgName.get_Id())));\r\n  AppFramework.plugIns().Append(p);\r\n };\r\n AppFramework.select=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.select;\r\n };\r\n AppFramework.delayAction=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.delayAction;\r\n };\r\n AppFramework.callAction=function(actN,p1,p2)\r\n {\r\n  (((function(a)\r\n  {\r\n   return(AppFramework.callAction0())(a);\r\n  }(actN))(p1))(p2));\r\n };\r\n AppFramework.callAction0=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.callAction0;\r\n };\r\n AppFramework.trigActChange=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.trigActChange;\r\n };\r\n AppFramework.trigAct=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.trigAct;\r\n };\r\n AppFramework.dragSplitter=function(varN,eventD)\r\n {\r\n  (AppFramework.dragSplitter0())([varN,eventD]);\r\n };\r\n AppFramework.dragSplitter0=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.dragSplitter0;\r\n };\r\n AppFramework.draggingEvent=function(first,value,ev)\r\n {\r\n  var el,vertical,startP,o,x,start,gap,size;\r\n  function getSize(el$1)\r\n  {\r\n   return vertical?first?el$1.getBoundingClientRect().width:-el$1.getBoundingClientRect().width:first?el$1.getBoundingClientRect().height:-el$1.getBoundingClientRect().height;\r\n  }\r\n  function mouseCoord(ev$1)\r\n  {\r\n   return vertical?ev$1.clientX:ev$1.clientY;\r\n  }\r\n  function drag(ev$1)\r\n  {\r\n   var v,e,e$1,a,a$1;\r\n   v=String.left(5,Global.String((e=(e$1=(mouseCoord(ev$1)-start)*100/(size-gap)+startP,(a=0,Unchecked.Compare(a,e$1)===1?a:e$1)),(a$1=100,Unchecked.Compare(a$1,e)===-1?a$1:e))));\r\n   value.Get()!==v?value.Set(v):void 0;\r\n  }\r\n  function finishDragging()\r\n  {\r\n   self.removeEventListener(\"mousemove\",drag,false);\r\n   self.removeEventListener(\"mouseup\",finishDragging,false);\r\n  }\r\n  el=ev.toElement;\r\n  vertical=el.parentElement.hasAttribute(\"vertical\");\r\n  startP=(o=(x=value.Get(),(ParseO.parseDoubleO())(x)),o==null?0:o.$0);\r\n  start=mouseCoord(ev);\r\n  gap=getSize(el);\r\n  size=getSize(el.parentElement);\r\n  self.addEventListener(\"mousemove\",drag,false);\r\n  self.addEventListener(\"mouseup\",finishDragging,false);\r\n  ev.preventDefault();\r\n };\r\n AppFramework.getValDirect=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getValDirect;\r\n };\r\n AppFramework.setVarDirectD=function(varN,value)\r\n {\r\n  (Library.delayed(100,function(v)\r\n  {\r\n   AppFramework.setVarDirect(varN,v);\r\n  }))(value);\r\n };\r\n AppFramework.setVarDirect=function(varN,value)\r\n {\r\n  (AppFramework.setVarDirect0())([varN,value]);\r\n };\r\n AppFramework.setVarDirect0=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.setVarDirect0;\r\n };\r\n AppFramework.setVar=function(varN,value)\r\n {\r\n  (AppFramework.setVar0())([varN,value]);\r\n };\r\n AppFramework.setVar0=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.setVar0;\r\n };\r\n AppFramework.docReference=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.docReference;\r\n };\r\n AppFramework.Lazy=function(l)\r\n {\r\n  return l.f();\r\n };\r\n AppFramework.htmlDoc=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.htmlDoc;\r\n };\r\n AppFramework.textArea=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.textArea;\r\n };\r\n AppFramework.input=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.input;\r\n };\r\n AppFramework.inputLabel=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.inputLabel;\r\n };\r\n AppFramework.inputFile$5090$67=Runtime.Curried3(function(act,el,ev)\r\n {\r\n  return AppFramework.callFunction(el,ev,act.actFunction);\r\n });\r\n AppFramework.inputFile$5089$67=Runtime.Curried3(function($1,el,$2)\r\n {\r\n  el.value=\"\";\r\n });\r\n AppFramework.inputFile=function(attrs,labelName,actName)\r\n {\r\n  var o,o$1,t,act;\r\n  o=(o$1=(t=(AppFramework.splitName(AppFramework.defPlugInName()))(actName),AppFramework.tryGetAct(t[0],t[1])),o$1==null?null:{\r\n   $:1,\r\n   $0:(act=o$1.$0,Doc.Element(\"div\",AppFramework.getAttrs(AppFramework.defPlugInName(),attrs),[Doc.Element(\"div\",[AttrProxy.Create(\"class\",\"input-group\")],[Doc.Element(\"span\",[AttrProxy.Create(\"class\",\"input-group-btn\")],[Doc.Element(\"label\",[AttrProxy.Create(\"class\",\"btn\")],[Doc.TextNode(labelName),Doc.Element(\"input\",[AttrProxy.Create(\"class\",\"form-control\"),AttrProxy.Create(\"type\",\"file\"),AttrModule.Style(\"display\",\"none\"),AttrProxy.HandlerImpl(\"click\",function(el)\r\n   {\r\n    return function()\r\n    {\r\n     el.value=\"\";\r\n    };\r\n   }),AttrProxy.HandlerImpl(\"change\",function(el)\r\n   {\r\n    return function(ev)\r\n    {\r\n     return AppFramework.callFunction(el,ev,act.actFunction);\r\n    };\r\n   })],[])])])])]))\r\n  });\r\n  return o==null?AppFramework.errDoc((function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"Action not found \"+Utils.toSafe($2));\r\n   };\r\n  }(Global.id))(actName)):o.$0;\r\n };\r\n AppFramework.docWithVar=function(f,_var)\r\n {\r\n  var g,t;\r\n  function f$1(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:f(o.$0)\r\n   };\r\n  }\r\n  function d()\r\n  {\r\n   return AppFramework.errDoc((function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"Var not found \"+Utils.toSafe($2));\r\n    };\r\n   }(Global.id))(_var));\r\n  }\r\n  return Doc.BindView((g=function(o)\r\n  {\r\n   return o==null?d():o.$0;\r\n  },function(x)\r\n  {\r\n   return g(f$1(x));\r\n  }),(t=AppFramework.getParmRef(_var),AppFramework.tryGetVoVW(t[0],t[1])));\r\n };\r\n AppFramework.depWithExtracts=function(f)\r\n {\r\n  var b;\r\n  return AppFramework.runDef((b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(AppFramework.extractAtsD(),function(a)\r\n   {\r\n    return b.Bind(AppFramework.extractDocD(),function(a$1)\r\n    {\r\n     return b.Bind(AppFramework.extractTextD(),function(a$2)\r\n     {\r\n      return b.Return(f(a,a$1,a$2));\r\n     });\r\n    });\r\n   });\r\n  })));\r\n };\r\n AppFramework.getParmRef=function(_var)\r\n {\r\n  var x,o,o$1,$1,b;\r\n  x=(o=(o$1=String.delimitedO(\"@{\",\"}\",_var),o$1==null?null:{\r\n   $:1,\r\n   $0:($1=o$1.$0,($1[0],b=$1[1],$1[2],b))\r\n  }),o==null?_var:o.$0);\r\n  return(AppFramework.splitName(AppFramework.defPlugInName()))(x);\r\n };\r\n AppFramework.runDef=function(d)\r\n {\r\n  return AppFramework.run(AppFramework.defPlugInName(),d);\r\n };\r\n AppFramework.defPlugInName=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defPlugInName;\r\n };\r\n AppFramework.extractAttD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractAttD;\r\n };\r\n AppFramework.extractAtsD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractAtsD$1;\r\n };\r\n AppFramework.extractDocD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractDocD$1;\r\n };\r\n AppFramework.extractTextD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.extractTextD$1;\r\n };\r\n AppFramework.run=function(pin,d)\r\n {\r\n  var x,b;\r\n  x=(b=Operators$2.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(AppFramework.getDocwD(),function(a)\r\n   {\r\n    return b.Bind(AppFramework.getTextActViewD(),function(a$1)\r\n    {\r\n     return b.Bind(AppFramework.currentPlugInNameD(),function(a$2)\r\n     {\r\n      return b.Return(Depend.resolver(List.ofArray([[\"getDocFromReference\",a],[\"getTextActViewFromReference\",a$1],[\"currentPlugInName\",a$2]]),d));\r\n     });\r\n    });\r\n   });\r\n  }));\r\n  return Depend.resolver(List.ofArray([[\"currentPlugInName\",pin]]),x);\r\n };\r\n AppFramework.errDocf=function(fmt)\r\n {\r\n  return fmt(AppFramework.errDoc);\r\n };\r\n AppFramework.errDoc=function(txt)\r\n {\r\n  return Doc.Element(\"div\",[],[Doc.TextNode(txt)]);\r\n };\r\n AppFramework.getTextActViewD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getTextActViewD;\r\n };\r\n AppFramework.getDocD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getDocD;\r\n };\r\n AppFramework.getDocwD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getDocwD;\r\n };\r\n AppFramework.currentPlugInNameD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPlugInNameD;\r\n };\r\n AppFramework.currentPlugInNameDef=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPlugInNameDef;\r\n };\r\n AppFramework.valToAttr=function(atn,a)\r\n {\r\n  return a.$==0?AttrModule.Dynamic(atn,a.$0):AttrProxy.Create(atn,a.$0);\r\n };\r\n AppFramework.valToStyle=function(atn,a)\r\n {\r\n  return a.$==0?AttrModule.DynamicStyle(atn,a.$0):AttrModule.Style(atn,a.$0);\r\n };\r\n AppFramework.choiceToString=function(a)\r\n {\r\n  return a.$==1?(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"@{\"+Utils.prettyPrint($2)+\"}\");\r\n   };\r\n  }(Global.id))(a.$0):a.$0;\r\n };\r\n AppFramework.makeAViewDoc0=Global.id;\r\n AppFramework.makeAViewDocL=function(f)\r\n {\r\n  return Lazy.Create(function()\r\n  {\r\n   return AppFramework.makeAViewDoc(f);\r\n  });\r\n };\r\n AppFramework.makeAViewDoc=function(f)\r\n {\r\n  return Doc.BindView(function()\r\n  {\r\n   return f();\r\n  },AppFramework.baseView());\r\n };\r\n AppFramework.baseView=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.baseView;\r\n };\r\n AppFramework.mainX=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.mainX;\r\n };\r\n AppFramework.a11V=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.a11V;\r\n };\r\n AppFramework.add1=function(a)\r\n {\r\n  return a+1;\r\n };\r\n AppFramework.unwrapBindWrap=function(f,pv)\r\n {\r\n  return P.New(Operators$2.op_BarGreaterGreater(pv.r,f));\r\n };\r\n AppFramework.bindWrap=function(f,pv)\r\n {\r\n  return P.New(Operators$2.op_GreaterGreaterEquals(pv,function(v)\r\n  {\r\n   return f(v).r;\r\n  }));\r\n };\r\n AppFramework.getAttrs=function(lytNm,attrs)\r\n {\r\n  return List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append(Seq$1.choose(function(a)\r\n   {\r\n    var $1,value,value$1,name;\r\n    function s(el,a$1)\r\n    {\r\n     var act;\r\n     if(a$1.$==1)\r\n      {\r\n       act=a$1.$0;\r\n       try\r\n       {\r\n        return el.addEventListener(Strings.Trim(name),function(ev)\r\n        {\r\n         return AppFramework.callFunction(el,ev,act.actFunction);\r\n        },false);\r\n       }\r\n       catch(e)\r\n       {\r\n        return(function($2)\r\n        {\r\n         return function($3)\r\n         {\r\n          return $2(Utils.prettyPrint($3));\r\n         };\r\n        }(function(s$1)\r\n        {\r\n         console.log(s$1);\r\n        }))(e);\r\n       }\r\n      }\r\n     else\r\n      try\r\n      {\r\n       return el.setAttribute(Strings.Trim(name),Strings.Trim(a$1.$0));\r\n      }\r\n      catch(e$1)\r\n      {\r\n       return(function($2)\r\n       {\r\n        return function($3)\r\n        {\r\n         return $2(Utils.prettyPrint($3));\r\n        };\r\n       }(function(s$1)\r\n       {\r\n        console.log(s$1);\r\n       }))(e$1);\r\n      }\r\n    }\r\n    return!Unchecked.Equals(a,null)&&a.length===2&&(value=Arrays.get(a,1),Strings.Trim(Arrays.get(a,0))!==\"\"&&Strings.Trim(value)!==\"\")?(value$1=Arrays.get(a,1),(name=Arrays.get(a,0),{\r\n     $:1,\r\n     $0:AttrModule.DynamicCustom(function($2)\r\n     {\r\n      return function($3)\r\n      {\r\n       return s($2,$3);\r\n      };\r\n     },AppFramework.getTextData(lytNm,Strings.Trim(value$1)))\r\n    })):null;\r\n   },Seq$1.map(function(s)\r\n   {\r\n    return String.splitByChar(\"=\",s);\r\n   },String.splitByChar(\";\",attrs))),Seq$1.delay(function()\r\n   {\r\n    return Seq$1.choose(function(a)\r\n    {\r\n     var $1,value,value$1,name,x;\r\n     return!Unchecked.Equals(a,null)&&a.length===2&&(value=Arrays.get(a,1),Strings.Trim(Arrays.get(a,0))!==\"\"&&Strings.Trim(value)!==\"\")?(value$1=Arrays.get(a,1),(name=Arrays.get(a,0),{\r\n      $:1,\r\n      $0:(x=View$1.Map(function(a$1)\r\n      {\r\n       return a$1.$==1?(function($2)\r\n       {\r\n        return function($3)\r\n        {\r\n         return $2(\"@{\"+Utils.toSafe($3)+\"}\");\r\n        };\r\n       }(Global.id))(a$1.$0.actName.get_Id()):Strings.Trim(a$1.$0);\r\n      },AppFramework.getTextData(lytNm,Strings.Trim(value$1))),AttrModule.DynamicStyle(Strings.Trim(name),x))\r\n     })):null;\r\n    },Seq$1.map(function(s)\r\n    {\r\n     return String.splitByChar(\":\",s);\r\n    },String.splitByChar(\";\",attrs)));\r\n   }));\r\n  }));\r\n };\r\n AppFramework.getTextData=function(lytNm,txt)\r\n {\r\n  var o,o$1,$1,bef;\r\n  o=(o$1=String.delimitedO(\"@{\",\"}\",txt),o$1==null?null:{\r\n   $:1,\r\n   $0:($1=o$1.$0,(bef=$1[0],AppFramework.getOneTextData(lytNm,$1[1],bef,$1[2])))\r\n  });\r\n  return o==null?View$1.Const({\r\n   $:0,\r\n   $0:txt\r\n  }):o.$0;\r\n };\r\n AppFramework.getOneTextData=function(lytNm,name,bef,aft)\r\n {\r\n  var p,plg,n;\r\n  p=(AppFramework.splitName(lytNm))(name);\r\n  plg=p[0];\r\n  n=p[1];\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a==null?View$1.Bind(function(a$1)\r\n   {\r\n    var txt;\r\n    return a$1==null?View$1.Const({\r\n     $:0,\r\n     $0:((((Runtime.Curried(function($1,$2,$3,$4)\r\n     {\r\n      return $1(Utils.toSafe($2)+\" @{Missing \"+Utils.toSafe($3)+\"}\"+Utils.toSafe($4));\r\n     },4))(Global.id))(bef))(name))(aft)\r\n    }):(txt=a$1.$0,View$1.Bind(function(a$2)\r\n    {\r\n     return a$2.$==1?View$1.Const({\r\n      $:0,\r\n      $0:(function($1)\r\n      {\r\n       return function($2)\r\n       {\r\n        return $1(\"Unexpected Action @{\"+Utils.toSafe($2)+\"}\");\r\n       };\r\n      }(Global.id))(a$2.$0.actName.get_Id())\r\n     }):View$1.Const({\r\n      $:0,\r\n      $0:bef+txt+a$2.$0\r\n     });\r\n    },AppFramework.getTextData(lytNm,aft)));\r\n   },AppFramework.tryGetWoWW(plg,n)):View$1.Const({\r\n    $:1,\r\n    $0:a.$0\r\n   });\r\n  },AppFramework.tryGetActW(plg,n));\r\n };\r\n AppFramework.tryGetWoW=function(plgName,viwName)\r\n {\r\n  var o,o$1,o$2;\r\n  o=(o$1=AppFramework.tryGetViw(plgName,viwName),o$1==null?null:{\r\n   $:1,\r\n   $0:{\r\n    $:1,\r\n    $0:o$1.$0.viwView\r\n   }\r\n  });\r\n  return o==null?(o$2=AppFramework.tryGetVar(plgName,viwName),o$2==null?null:{\r\n   $:1,\r\n   $0:o$2.$0.varVar.get_View()\r\n  }):o.$0;\r\n };\r\n AppFramework.tryGetVoV=function(plgName,varName)\r\n {\r\n  var o,o$1,o$2;\r\n  o=(o$1=AppFramework.tryGetVar(plgName,varName),o$1==null?null:{\r\n   $:1,\r\n   $0:{\r\n    $:1,\r\n    $0:o$1.$0.varVar\r\n   }\r\n  });\r\n  return o==null?(o$2=AppFramework.tryGetViw(plgName,varName),o$2==null?null:{\r\n   $:1,\r\n   $0:new FromView.New(o$2.$0.viwView,Global.ignore)\r\n  }):o.$0;\r\n };\r\n AppFramework.tryGetDoc=function(plgName,docName)\r\n {\r\n  var o;\r\n  o=AppFramework.tryGetPlugIn(plgName);\r\n  return o==null?null:o.$0.plgDocs.TryFindByKey(docName);\r\n };\r\n AppFramework.tryGetQry=function(plgName,qryName)\r\n {\r\n  var o;\r\n  o=AppFramework.tryGetPlugIn(plgName);\r\n  return o==null?null:o.$0.plgQueries.TryFindByKey(qryName);\r\n };\r\n AppFramework.tryGetAct=function(plgName,actName)\r\n {\r\n  var o;\r\n  o=AppFramework.tryGetPlugIn(plgName);\r\n  return o==null?null:o.$0.plgActions.TryFindByKey(actName);\r\n };\r\n AppFramework.tryGetViw=function(plgName,viwName)\r\n {\r\n  var o;\r\n  o=AppFramework.tryGetPlugIn(plgName);\r\n  return o==null?null:o.$0.plgViews.TryFindByKey(viwName);\r\n };\r\n AppFramework.tryGetVar=function(plgName,varName)\r\n {\r\n  var o;\r\n  o=AppFramework.tryGetPlugIn(plgName);\r\n  return o==null?null:o.$0.plgVars.TryFindByKey(varName);\r\n };\r\n AppFramework.tryGetPlugIn=function(plgName)\r\n {\r\n  return AppFramework.plugIns().TryFindByKey(plgName);\r\n };\r\n AppFramework.tryGetWoWW=function(plgName,viwName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a==null?View$1.Bind(function(a$1)\r\n   {\r\n    return a$1==null?View$1.Const(null):View$1.Map(function(a$2)\r\n    {\r\n     return{\r\n      $:1,\r\n      $0:a$2\r\n     };\r\n    },a$1.$0.varVar.get_View());\r\n   },AppFramework.tryGetVarW(plgName,viwName)):View$1.Map(function(a$1)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a$1\r\n    };\r\n   },a.$0.viwView);\r\n  },AppFramework.tryGetViwW(plgName,viwName));\r\n };\r\n AppFramework.tryGetVoVW=function(plgName,varName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a==null?View$1.Map(function(a$1)\r\n   {\r\n    return a$1==null?null:{\r\n     $:1,\r\n     $0:new FromView.New(a$1.$0.viwView,Global.ignore)\r\n    };\r\n   },AppFramework.tryGetViwW(plgName,varName)):View$1.Const({\r\n    $:1,\r\n    $0:a.$0.varVar\r\n   });\r\n  },AppFramework.tryGetVarW(plgName,varName));\r\n };\r\n AppFramework.tryGetDocW=function(plgName,docName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a!=null&&a.$==1?a.$0.plgDocs.TryFindByKeyAsView(docName):View$1.Const(null);\r\n  },AppFramework.tryGetPlugInW(plgName));\r\n };\r\n AppFramework.tryGetQryW=function(plgName,qryName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a!=null&&a.$==1?a.$0.plgQueries.TryFindByKeyAsView(qryName):View$1.Const(null);\r\n  },AppFramework.tryGetPlugInW(plgName));\r\n };\r\n AppFramework.tryGetActW=function(plgName,actName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a!=null&&a.$==1?a.$0.plgActions.TryFindByKeyAsView(actName):View$1.Const(null);\r\n  },AppFramework.tryGetPlugInW(plgName));\r\n };\r\n AppFramework.tryGetViwW=function(plgName,viwName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a!=null&&a.$==1?a.$0.plgViews.TryFindByKeyAsView(viwName):View$1.Const(null);\r\n  },AppFramework.tryGetPlugInW(plgName));\r\n };\r\n AppFramework.tryGetVarW=function(plgName,varName)\r\n {\r\n  return View$1.Bind(function(a)\r\n  {\r\n   return a!=null&&a.$==1?a.$0.plgVars.TryFindByKeyAsView(varName):View$1.Const(null);\r\n  },AppFramework.tryGetPlugInW(plgName));\r\n };\r\n AppFramework.tryGetPlugInW=function(plgName)\r\n {\r\n  return AppFramework.plugIns().TryFindByKeyAsView(plgName);\r\n };\r\n AppFramework.plugin=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.plugin;\r\n };\r\n AppFramework.newDocF=function(name,docF)\r\n {\r\n  return PlugInDoc.New(name,Lazy.Create(function()\r\n  {\r\n   return docF;\r\n  }));\r\n };\r\n AppFramework.newDocL=function(name,docL)\r\n {\r\n  return PlugInDoc.New(name,docL);\r\n };\r\n AppFramework.newActF=function(name,fncF)\r\n {\r\n  return PlugInAction.New(name,fncF,View$1.Const(true));\r\n };\r\n AppFramework.newAct=function(name,fnc)\r\n {\r\n  return PlugInAction.New(name,{\r\n   $:0,\r\n   $0:fnc\r\n  },View$1.Const(true));\r\n };\r\n AppFramework.newQry=function(name,qry)\r\n {\r\n  return PlugInQuery.New(name,qry);\r\n };\r\n AppFramework.newDoc0=function(name,f)\r\n {\r\n  return PlugInDoc.New(name,Lazy.Create(function()\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:f\r\n   };\r\n  }));\r\n };\r\n AppFramework.newDoc=function(name,doc)\r\n {\r\n  return PlugInDoc.New(name,Lazy.Create(function()\r\n  {\r\n   return{\r\n    $:0,\r\n    $0:doc.f()\r\n   };\r\n  }));\r\n };\r\n AppFramework.newViw=function(name,viw)\r\n {\r\n  return PlugInView.New(name,viw);\r\n };\r\n AppFramework.newVar=function(name,_var)\r\n {\r\n  return PlugInVar.New(name,_var);\r\n };\r\n AppFramework.vertical$4568$39=function(mouseDown)\r\n {\r\n  return function(te)\r\n  {\r\n   mouseDown(te.Event);\r\n  };\r\n };\r\n AppFramework.vertical$4567$39=Global.id;\r\n AppFramework.vertical$4566$39=Global.id;\r\n AppFramework.vertical=function(partSizes,afterRender,afterRenderSp,mouseDown,gap)\r\n {\r\n  var b,t,p,i;\r\n  return(b=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"partsizes\",\r\n   $1:partSizes\r\n  }).WithHole({\r\n   $:7,\r\n   $0:\"afterrender\",\r\n   $1:afterRender\r\n  }).WithHole({\r\n   $:7,\r\n   $0:\"afterrendersp\",\r\n   $1:afterRenderSp\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"mousedown\",function()\r\n  {\r\n   return t.i;\r\n  },function(te)\r\n  {\r\n   mouseDown(te.Event);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"gap\",\r\n   $1:gap\r\n  }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.wcompsplitterver(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n AppFramework.horizontal$4560$39=function(mouseDown)\r\n {\r\n  return function(te)\r\n  {\r\n   mouseDown(te.Event);\r\n  };\r\n };\r\n AppFramework.horizontal$4559$39=Global.id;\r\n AppFramework.horizontal$4558$39=Global.id;\r\n AppFramework.horizontal=function(partSizes,afterRender,afterRenderSp,mouseDown,gap)\r\n {\r\n  var b,t,p,i;\r\n  return(b=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"partsizes\",\r\n   $1:partSizes\r\n  }).WithHole({\r\n   $:7,\r\n   $0:\"afterrender\",\r\n   $1:afterRender\r\n  }).WithHole({\r\n   $:7,\r\n   $0:\"afterrendersp\",\r\n   $1:afterRenderSp\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"mousedown\",function()\r\n  {\r\n   return t.i;\r\n  },function(te)\r\n  {\r\n   mouseDown(te.Event);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"gap\",\r\n   $1:gap\r\n  }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.wcompsplitterhor(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n AppFramework.mainDoc$4549$42=function()\r\n {\r\n  return function()\r\n  {\r\n   AppFramework.mainDocV().Set(\"AppFramework.AppFwkClient\");\r\n  };\r\n };\r\n AppFramework.mainDoc=function()\r\n {\r\n  var b,M,t,M$1,p,i;\r\n  return(b=(M=AppFramework.getMainClientDoc(),(t=(M$1=AppFramework.mainDocV().get_View(),ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"maindoc\",\r\n   $1:M$1\r\n  })),t.WithHole(Handler$1.EventQ2(t.k,\"goclient\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   AppFramework.mainDocV().Set(\"AppFramework.AppFwkClient\");\r\n  }))).WithHole({\r\n   $:0,\r\n   $0:\"mainclient\",\r\n   $1:M\r\n  })),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.appframework(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n AppFramework.getMainClientDoc=function()\r\n {\r\n  var x;\r\n  return Doc.EmbedView((x=AppFramework.plugIns().v,View$1.Map2(function(mainDoc,plgs)\r\n  {\r\n   var x$1,v;\r\n   x$1=Seq$1.tryPick(function(plg)\r\n   {\r\n    var o;\r\n    o=Seq$1.tryFind(function(doc)\r\n    {\r\n     return plg.plgName.get_Id()===mainDoc||plg.plgName.get_Id()+\".\"+doc.docName.get_Id()===mainDoc;\r\n    },plg.plgDocs);\r\n    return o==null?null:{\r\n     $:1,\r\n     $0:AppFramework.getActualDoc(o.$0)\r\n    };\r\n   },plgs);\r\n   v=AppFramework.AppFwkClient().f();\r\n   return x$1==null?v:x$1.$0;\r\n  },AppFramework.mainDocV().get_View(),x)));\r\n };\r\n AppFramework.getActualDoc=function(doc)\r\n {\r\n  var m;\r\n  m=doc.docDoc.f();\r\n  return m.$==0?m.$0:m.$==1?m.$0():Doc.Element(\"div\",[],[Doc.TextNode((function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"Doc with parameters not allowed here: \"+GeneratedPrintf.p($2));\r\n   };\r\n  }(Global.id))(doc))]);\r\n };\r\n AppFramework.AppFwkClient=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.AppFwkClient;\r\n };\r\n AppFramework.renderQueries$4512$39=function(qry)\r\n {\r\n  return function()\r\n  {\r\n   Global.alert(qry.qryFunction(null));\r\n  };\r\n };\r\n AppFramework.renderQueries=function()\r\n {\r\n  function a(plg,qry)\r\n  {\r\n   return[plg.plgName,qry.qryName];\r\n  }\r\n  function a$1(plg,qry)\r\n  {\r\n   var b,t,N,p,i;\r\n   return(b=(t=(N=qry.qryName.get_Id(),ProviderBuilder.Make().WithHole({\r\n    $:1,\r\n    $0:\"name\",\r\n    $1:N\r\n   })),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n   {\r\n    return t.i;\r\n   },function()\r\n   {\r\n    Global.alert(qry.qryFunction(null));\r\n   }))),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b.i=i,i)))).get_Doc();\r\n  }\r\n  return Doc.ConvertBy(function($1)\r\n  {\r\n   return a($1[0],$1[1]);\r\n  },function($1)\r\n  {\r\n   return a$1($1[0],$1[1]);\r\n  },View$1.Map(function(plg)\r\n  {\r\n   return Seq$1.map(function(v)\r\n   {\r\n    return[plg,v];\r\n   },plg.plgQueries);\r\n  },AppFramework.currentPlugInW()));\r\n };\r\n AppFramework.renderActions$4501$39=function(act)\r\n {\r\n  return function(ev)\r\n  {\r\n   AppFramework.callFunction(null,ev,act.actFunction);\r\n  };\r\n };\r\n AppFramework.renderActions=function()\r\n {\r\n  function a(plg,act)\r\n  {\r\n   return[plg.plgName,act.actName];\r\n  }\r\n  function a$1(plg,act)\r\n  {\r\n   var parms,m,x,x$1,b,A,t,N,p,i;\r\n   parms=(m=act.actFunction,m.$==1?(x=Strings.concat(\", \",List.ofArray([m.$1])),(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n    };\r\n   }(Global.id))(x)):m.$==2?(x$1=Strings.concat(\", \",List.ofArray([m.$1,m.$2])),(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n    };\r\n   }(Global.id))(x$1)):\"\");\r\n   return(b=(A=AttrModule.DynamicPred(\"disabled\",View$1.Map(function($1)\r\n   {\r\n    return!$1;\r\n   },act.actEnabled),View$1.Const(\"\")),(t=(N=act.actName.get_Id()+parms,ProviderBuilder.Make().WithHole({\r\n    $:1,\r\n    $0:\"name\",\r\n    $1:N\r\n   })),t.WithHole(Handler$1.EventQ2(t.k,\"click\",function()\r\n   {\r\n    return t.i;\r\n   },function(ev)\r\n   {\r\n    AppFramework.callFunction(null,ev,act.actFunction);\r\n   }))).WithHole({\r\n    $:3,\r\n    $0:\"attrs\",\r\n    $1:A\r\n   })),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.action(p[0])),(b.i=i,i)))).get_Doc();\r\n  }\r\n  return Doc.ConvertBy(function($1)\r\n  {\r\n   return a($1[0],$1[1]);\r\n  },function($1)\r\n  {\r\n   return a$1($1[0],$1[1]);\r\n  },View$1.Map(function(plg)\r\n  {\r\n   return Seq$1.map(function(v)\r\n   {\r\n    return[plg,v];\r\n   },plg.plgActions);\r\n  },AppFramework.currentPlugInW()));\r\n };\r\n AppFramework.callFunction=function(p1,p2,actF)\r\n {\r\n  if(actF.$==1)\r\n   actF.$0(p2);\r\n  else\r\n   if(actF.$==2)\r\n    (actF.$0(p1))(p2);\r\n   else\r\n    actF.$0();\r\n };\r\n AppFramework.renderDocs$4481$39=function(doc)\r\n {\r\n  return function()\r\n  {\r\n   View$1.Get(function(plg)\r\n   {\r\n    var a;\r\n    a=plg.plgName.get_Id()+\".\"+doc.docName.get_Id();\r\n    AppFramework.mainDocV().Set(a);\r\n   },AppFramework.currentPlugInW());\r\n  };\r\n };\r\n AppFramework.renderDocs=function()\r\n {\r\n  function a(plg,doc)\r\n  {\r\n   return[plg.plgName,doc.docName];\r\n  }\r\n  function a$1(plg,doc)\r\n  {\r\n   var b,t,N,p,i;\r\n   return(b=(t=(N=doc.docName.get_Id()+AppFramework.docParms(doc),ProviderBuilder.Make().WithHole({\r\n    $:1,\r\n    $0:\"name\",\r\n    $1:N\r\n   })),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n   {\r\n    return t.i;\r\n   },function()\r\n   {\r\n    View$1.Get(function(plg$1)\r\n    {\r\n     var a$2;\r\n     a$2=plg$1.plgName.get_Id()+\".\"+doc.docName.get_Id();\r\n     AppFramework.mainDocV().Set(a$2);\r\n    },AppFramework.currentPlugInW());\r\n   }))),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b.i=i,i)))).get_Doc();\r\n  }\r\n  return Doc.ConvertBy(function($1)\r\n  {\r\n   return a($1[0],$1[1]);\r\n  },function($1)\r\n  {\r\n   return a$1($1[0],$1[1]);\r\n  },View$1.Bind(function(plg)\r\n  {\r\n   function m(v)\r\n   {\r\n    return[plg,v];\r\n   }\r\n   return View$1.Map(function(s)\r\n   {\r\n    return Seq$1.map(m,s);\r\n   },plg.plgDocs.v);\r\n  },AppFramework.currentPlugInW()));\r\n };\r\n AppFramework.docParms=function(doc)\r\n {\r\n  var m,x,x$1,x$2,x$3,x$4;\r\n  m=doc.docDoc.f();\r\n  return m.$==1?\"()\":m.$==2?(x=Strings.concat(\", \",List.ofArray([m.$1])),(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n   };\r\n  }(Global.id))(x)):m.$==3?(x$1=Strings.concat(\", \",List.ofArray([m.$1,m.$2])),(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n   };\r\n  }(Global.id))(x$1)):m.$==4?(x$2=Strings.concat(\", \",List.ofArray([m.$1,m.$2,m.$3])),(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n   };\r\n  }(Global.id))(x$2)):m.$==5?(x$3=Strings.concat(\", \",List.ofArray([m.$1,m.$2,m.$3,m.$4])),(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n   };\r\n  }(Global.id))(x$3)):m.$==6?(x$4=Strings.concat(\", \",List.ofArray([m.$1,m.$2,m.$3,m.$4,m.$5])),(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n   };\r\n  }(Global.id))(x$4)):\"\";\r\n };\r\n AppFramework.renderViews=function()\r\n {\r\n  function a(plg,viw)\r\n  {\r\n   return[plg.plgName,viw.viwName];\r\n  }\r\n  function a$1(plg,viw)\r\n  {\r\n   var b,N,p,i;\r\n   return(b=(N=viw.viwName.get_Id(),ProviderBuilder.Make().WithHole({\r\n    $:1,\r\n    $0:\"name\",\r\n    $1:N\r\n   })).WithHole({\r\n    $:2,\r\n    $0:\"value\",\r\n    $1:viw.viwView\r\n   }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.namevalue(p[0])),(b.i=i,i)))).get_Doc();\r\n  }\r\n  return Doc.ConvertBy(function($1)\r\n  {\r\n   return a($1[0],$1[1]);\r\n  },function($1)\r\n  {\r\n   return a$1($1[0],$1[1]);\r\n  },View$1.Map(function(plg)\r\n  {\r\n   return Seq$1.map(function(v)\r\n   {\r\n    return[plg,v];\r\n   },plg.plgViews);\r\n  },AppFramework.currentPlugInW()));\r\n };\r\n AppFramework.renderVars=function()\r\n {\r\n  function a(plg,_var)\r\n  {\r\n   return[plg.plgName,_var.varName];\r\n  }\r\n  function a$1(plg,_var)\r\n  {\r\n   var b,N,p,i;\r\n   return(b=(N=_var.varName.get_Id(),ProviderBuilder.Make().WithHole({\r\n    $:1,\r\n    $0:\"name\",\r\n    $1:N\r\n   })).WithHole({\r\n    $:8,\r\n    $0:\"value\",\r\n    $1:_var.varVar\r\n   }),(p=Handler$1.CompleteHoles(b.k,b.h,[[\"value\",0]]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.namevalueinput(p[0])),(b.i=i,i)))).get_Doc();\r\n  }\r\n  return Doc.ConvertBy(function($1)\r\n  {\r\n   return a($1[0],$1[1]);\r\n  },function($1)\r\n  {\r\n   return a$1($1[0],$1[1]);\r\n  },View$1.Map(function(plg)\r\n  {\r\n   return Seq$1.map(function(v)\r\n   {\r\n    return[plg,v];\r\n   },plg.plgVars);\r\n  },AppFramework.currentPlugInW()));\r\n };\r\n AppFramework.renderPlugIns$4440$35=function(name)\r\n {\r\n  return function()\r\n  {\r\n   AppFramework.selectionPlugInO().Set({\r\n    $:1,\r\n    $0:name\r\n   });\r\n  };\r\n };\r\n AppFramework.renderPlugIns=function()\r\n {\r\n  return Doc.Flatten(AppFramework.plugIns().MapLens(function($1)\r\n  {\r\n   var b,t,N,p,i;\r\n   return(b=(t=(N=$1.get_Id(),ProviderBuilder.Make().WithHole({\r\n    $:1,\r\n    $0:\"name\",\r\n    $1:N\r\n   })),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n   {\r\n    return t.i;\r\n   },function()\r\n   {\r\n    AppFramework.selectionPlugInO().Set({\r\n     $:1,\r\n     $0:$1\r\n    });\r\n   }))).WithHole({\r\n    $:2,\r\n    $0:\"selected\",\r\n    $1:View$1.Map(function($2)\r\n    {\r\n     return Unchecked.Equals($2,{\r\n      $:1,\r\n      $0:$1\r\n     })?\"selected\":\"\";\r\n    },AppFramework.selectionPlugInO().get_View())\r\n   }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b.i=i,i)))).get_Doc();\r\n  }));\r\n };\r\n AppFramework.currentPlugInV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPlugInV;\r\n };\r\n AppFramework.currentPlugInW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPlugInW;\r\n };\r\n AppFramework.selectionPlugInO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.selectionPlugInO;\r\n };\r\n AppFramework.splitName=function(lytNm)\r\n {\r\n  function f(s)\r\n  {\r\n   return String.splitByChar(\".\",s);\r\n  }\r\n  function g(a)\r\n  {\r\n   return Arrays.length(a)===1?[lytNm,new PlgElemName({\r\n    $:0,\r\n    $0:Strings.Trim(Arrays.get(a,0))\r\n   })]:[new PlugInName({\r\n    $:0,\r\n    $0:Strings.Trim(Arrays.get(a,0))\r\n   }),new PlgElemName({\r\n    $:0,\r\n    $0:Strings.Trim(Arrays.get(a,1))\r\n   })];\r\n  }\r\n  return function(x)\r\n  {\r\n   return g(f(x));\r\n  };\r\n };\r\n AppFramework.defaultPlugIn=function()\r\n {\r\n  return PlugIn.New(new PlugInName({\r\n   $:0,\r\n   $0:\"\"\r\n  }),new ListModel$1.New$1(function(_var)\r\n  {\r\n   return _var.varName;\r\n  }),new ListModel$1.New$1(function(viw)\r\n  {\r\n   return viw.viwName;\r\n  }),new ListModel$1.New$1(function(doc)\r\n  {\r\n   return doc.docName;\r\n  }),new ListModel$1.New$1(function(act)\r\n  {\r\n   return act.actName;\r\n  }),new ListModel$1.New$1(function(qry)\r\n  {\r\n   return qry.qryName;\r\n  }));\r\n };\r\n AppFramework.TemplateFileName=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.TemplateFileName;\r\n };\r\n AppFramework.mainDocV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.mainDocV;\r\n };\r\n AppFramework.plugIns=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.plugIns;\r\n };\r\n LM.addElements=function(li,elems)\r\n {\r\n  View$1.Get(function(elements)\r\n  {\r\n   elements.AppendMany(elems);\r\n  },li.elemsW);\r\n };\r\n LM.getDoc=function(keyF,def,newF,predWO,elUI)\r\n {\r\n  return LM.getDocFor(ListModel$1.Create(keyF,List.T.Empty),def,newF,predWO,elUI);\r\n };\r\n LM.getDocFor=function(elements,def,newF,predWO,elUI)\r\n {\r\n  return LM.getDocForW(View$1.Const(elements),elements.key,def,newF,predWO,elUI);\r\n };\r\n LM.getDocForW=function(elementsW,keyF,def,newF,predWO,elUI)\r\n {\r\n  var selected0,selectedV,b,result,elUIF,listW;\r\n  function _delete(k,u)\r\n  {\r\n   selectedV.Set(null);\r\n   return View$1.Get(function(elements)\r\n   {\r\n    elements.RemoveByKey(k);\r\n   },elementsW);\r\n  }\r\n  selected0=Var$1.Create$1(null);\r\n  selectedV=new FromView.New((b=View$1.get_Do(),View$1.Bind(function(a)\r\n  {\r\n   return View$1.Bind(function(a$1)\r\n   {\r\n    var sel;\r\n    return a$1!=null&&a$1.$==1?(sel=a$1.$0,View$1.Bind(function(a$2)\r\n    {\r\n     return!a$2?View$1.Const(null):View$1.Const({\r\n      $:1,\r\n      $0:sel\r\n     });\r\n    },a.ContainsKeyAsView(sel))):View$1.Const(null);\r\n   },selected0.get_View());\r\n  },elementsW)),function(v)\r\n  {\r\n   View$1.Get(function(elements)\r\n   {\r\n    var v$1,$1;\r\n    v$1=v!=null&&v.$==1&&(elements.ContainsKey(v.$0)&&($1=v.$0,true))?{\r\n     $:1,\r\n     $0:$1\r\n    }:null;\r\n    !Unchecked.Equals(selected0.Get(),v$1)?selected0.Set(v$1):void 0;\r\n   },elementsW);\r\n  });\r\n  result=ListModelData.New(elementsW,Doc.get_Empty,selectedV,function()\r\n  {\r\n   var n;\r\n   n=newF();\r\n   View$1.Get(function(elements)\r\n   {\r\n    elements.Append(n);\r\n    selectedV.Set({\r\n     $:1,\r\n     $0:keyF(n)\r\n    });\r\n   },elementsW);\r\n   return n;\r\n  },function()\r\n  {\r\n   var x;\r\n   x=selectedV.Get();\r\n   (Option.iter(function(k)\r\n   {\r\n    _delete(k,null);\r\n   }))(x);\r\n  },def);\r\n  elUIF=elUI(result);\r\n  listW=View$1.Bind(function(elems)\r\n  {\r\n   return ListModel.MapLens(predWO,function(k,v)\r\n   {\r\n    return(elUIF(View$1.Const({\r\n     $:1,\r\n     $0:k\r\n    })))(v);\r\n   },elems);\r\n  },elementsW);\r\n  return ListModelData.New(result.elemsW,function()\r\n  {\r\n   return Doc.Convert(Global.id,listW);\r\n  },result.selV,result.add,result.delCur,result.def);\r\n };\r\n StartAppFramework.startWith=function(html)\r\n {\r\n  var x;\r\n  x=StartAppFramework.startWithHtmlD();\r\n  (Depend.resolver(List.ofArray([[\"AppFrameworkTemplate.html\",AppFrameworkTemplate.html()+html]]),x))();\r\n };\r\n StartAppFramework.startWithHtmlD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.startWithHtmlD;\r\n };\r\n StartAppFramework.htmlD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.htmlD;\r\n };\r\n AppFrameworkUI.failCreate=function(s,u)\r\n {\r\n  return(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"Create \"+Utils.toSafe($2)+\" not implemented\");\r\n   };\r\n  }(Operators$7.FailWith))(s);\r\n };\r\n AppFrameworkUI.defAct=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defAct;\r\n };\r\n AppFrameworkUI.defViw=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defViw;\r\n };\r\n AppFrameworkUI.defVar=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defVar;\r\n };\r\n AppFrameworkUI.defDoc=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defDoc;\r\n };\r\n AppFrameworkUI.defPlg=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defPlg;\r\n };\r\n AppFrameworkUI.showDoc$5637$35=function(k,lmd)\r\n {\r\n  return function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  };\r\n };\r\n AppFrameworkUI.showDoc=function(lmd,k,docV)\r\n {\r\n  var b,t,p,i;\r\n  return(b=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"name\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return $1.docName.get_Id()+AppFramework.docParms($2);\r\n   },docV.get_View(),docV.get_View())\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"selected\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return Unchecked.Equals($1,$2)?\"selected\":\"\";\r\n   },lmd.selV.get_View(),k)\r\n  }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n AppFrameworkUI.showAct$5630$35=function(k,lmd)\r\n {\r\n  return function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  };\r\n };\r\n AppFrameworkUI.showAct=function(lmd,k,actV)\r\n {\r\n  var b,t,p,i;\r\n  function parms(act)\r\n  {\r\n   var m,x,x$1;\r\n   m=act.actFunction;\r\n   return m.$==1?(x=Strings.concat(\", \",List.ofArray([m.$1])),(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n    };\r\n   }(Global.id))(x)):m.$==2?(x$1=Strings.concat(\", \",List.ofArray([m.$1,m.$2])),(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"(\"+Utils.toSafe($2)+\")\");\r\n    };\r\n   }(Global.id))(x$1)):\"\";\r\n  }\r\n  return(b=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"name\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return $1.actName.get_Id()+parms($2);\r\n   },actV.get_View(),actV.get_View())\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"selected\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return Unchecked.Equals($1,$2)?\"selected\":\"\";\r\n   },lmd.selV.get_View(),k)\r\n  }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n AppFrameworkUI.showView$5618$35=function(k,lmd)\r\n {\r\n  return function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  };\r\n };\r\n AppFrameworkUI.showView=function(lmd,k,viwV)\r\n {\r\n  var nameW,b,b$1,t,p,i;\r\n  nameW=(b=View$1.get_Do(),View$1.Bind(function(a)\r\n  {\r\n   return View$1.Bind(function(a$1)\r\n   {\r\n    return View$1.Const(a.viwName.get_Id()+\" = \"+a$1);\r\n   },a.viwView);\r\n  },viwV.get_View()));\r\n  return(b$1=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"name\",\r\n   $1:nameW\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"selected\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return Unchecked.Equals($1,$2)?\"selected\":\"\";\r\n   },lmd.selV.get_View(),k)\r\n  }),(p=Handler$1.CompleteHoles(b$1.k,b$1.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b$1.i=i,i)))).get_Doc();\r\n };\r\n AppFrameworkUI.showVar$5606$35=function(k,lmd)\r\n {\r\n  return function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  };\r\n };\r\n AppFrameworkUI.showVar=function(lmd,k,varV)\r\n {\r\n  var nameW,b,b$1,t,p,i;\r\n  nameW=(b=View$1.get_Do(),View$1.Bind(function(a)\r\n  {\r\n   return View$1.Bind(function(a$1)\r\n   {\r\n    return View$1.Const(a.varName.get_Id()+\" = \"+a$1);\r\n   },a.varVar.get_View());\r\n  },varV.get_View()));\r\n  return(b$1=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"name\",\r\n   $1:nameW\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"selected\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return Unchecked.Equals($1,$2)?\"selected\":\"\";\r\n   },lmd.selV.get_View(),k)\r\n  }),(p=Handler$1.CompleteHoles(b$1.k,b$1.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b$1.i=i,i)))).get_Doc();\r\n };\r\n AppFrameworkUI.showPlugIn$5594$35=function(k,lmd)\r\n {\r\n  return function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  };\r\n };\r\n AppFrameworkUI.showPlugIn=function(lmd,k,plgV)\r\n {\r\n  var b,t,p,i;\r\n  return(b=(t=ProviderBuilder.Make().WithHole({\r\n   $:2,\r\n   $0:\"name\",\r\n   $1:View$1.Map(function($1)\r\n   {\r\n    return $1.plgName.get_Id();\r\n   },plgV.get_View())\r\n  }),t.WithHole(Handler$1.EventQ2(t.k,\"select\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   var o;\r\n   View$1.Get((o=lmd.selV,function(a)\r\n   {\r\n    o.Set(a);\r\n   }),k);\r\n  }))).WithHole({\r\n   $:2,\r\n   $0:\"selected\",\r\n   $1:View$1.Map2(function($1,$2)\r\n   {\r\n    return Unchecked.Equals($1,$2)?\"selected\":\"\";\r\n   },lmd.selV.get_View(),k)\r\n  }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.tile(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n LayoutEngine.New=function(lytName,lytDefinition)\r\n {\r\n  return{\r\n   lytName:lytName,\r\n   lytDefinition:lytDefinition\r\n  };\r\n };\r\n Measures=LayoutEngineModule.Measures=Runtime.Class({\r\n  toString:function()\r\n  {\r\n   return this.$==1?((((Runtime.Curried(function($1,$2,$3,$4)\r\n   {\r\n    return $1(Global.String($2)+\"-\"+Global.String($3)+\"-\"+Global.String($4));\r\n   },4))(Global.id))(Operators$7.toInt(this.$0)))(Operators$7.toInt(this.$1)))(Operators$7.toInt(this.$2)):Global.String(Operators$7.toInt(this.$1?this.$0:-this.$0));\r\n  }\r\n },null,Measures);\r\n RefType.RPlg={\r\n  $:4\r\n };\r\n RefType.RAct={\r\n  $:3\r\n };\r\n RefType.RViw={\r\n  $:2\r\n };\r\n RefType.RVar={\r\n  $:1\r\n };\r\n RefType.RDoc={\r\n  $:0\r\n };\r\n TemplateDef.New=function(tmpName,vars,views,docs,actions,attrs)\r\n {\r\n  return{\r\n   tmpName:tmpName,\r\n   vars:vars,\r\n   views:views,\r\n   docs:docs,\r\n   actions:actions,\r\n   attrs:attrs\r\n  };\r\n };\r\n Syntax.createEntryO2=function(lytNm,refs)\r\n {\r\n  function addR(nm,en)\r\n  {\r\n   return refs.ContainsKey(nm)?((Result.errorf(Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"Already exists \"+Utils.toSafe($2)+\" : \"+FSharpStation_GeneratedPrintf.p$3($3)+\" \");\r\n   })))(nm))(en):(refs.Add(nm,en),{\r\n    $:0,\r\n    $0:null\r\n   });\r\n  }\r\n  function ok(nm,en)\r\n  {\r\n   return Result$1.Map(function()\r\n   {\r\n    return[nm,en];\r\n   },addR(nm,en));\r\n  }\r\n  function ko(msg,line)\r\n  {\r\n   return Result$1.Bind(function()\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:msg\r\n    };\r\n   },addR(Seq$1.head(Strings.SplitChars(line,[\" \",\"\\u0009\"],1)),{\r\n    $:0,\r\n    $0:{\r\n     $:6,\r\n     $0:{\r\n      $:0,\r\n      $0:\"div\",\r\n      $1:{\r\n       $:0,\r\n       $0:List.T.Empty\r\n      },\r\n      $2:List.ofArray([{\r\n       $:0,\r\n       $0:List.ofArray([{\r\n        $:0,\r\n        $0:msg\r\n       }])\r\n      }])\r\n     }\r\n    }\r\n   }));\r\n  }\r\n  function getRef(nm)\r\n  {\r\n   try\r\n   {\r\n    return refs.get_Item(nm);\r\n   }\r\n   catch(e)\r\n   {\r\n    return(function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(\"Could not find reference to \"+Utils.toSafe($2));\r\n     };\r\n    }(Operators$7.FailWith))(nm);\r\n   }\r\n  }\r\n  function getType(rf)\r\n  {\r\n   var entry,nm,ly,$1,a,m,pg,nmm;\r\n   if(rf.$==1)\r\n    {\r\n     nm=rf.$1;\r\n     ly=rf.$0;\r\n     try\r\n     {\r\n      a=getRef(ly);\r\n      if(a.$==6)\r\n       try\r\n       {\r\n        $1=a.$0.$0.get_Item(nm);\r\n       }\r\n       catch(e)\r\n       {\r\n        $1=(((Runtime.Curried3(function($2,$3,$4)\r\n        {\r\n         return $2(\"Could not find reference to \"+Utils.toSafe($3)+\".\"+Utils.toSafe($4));\r\n        }))(Operators$7.FailWith))(ly))(nm);\r\n       }\r\n      else\r\n       $1=(function($2)\r\n       {\r\n        return function($3)\r\n        {\r\n         return $2(\"PlugIn not registered: \"+FSharpStation_GeneratedPrintf.p$1($3));\r\n        };\r\n       }(Operators$7.FailWith))(rf);\r\n      return[$1,null];\r\n     }\r\n     catch(e$1)\r\n     {\r\n      m=AppFramework.tryGetPlugIn(new PlugInName({\r\n       $:0,\r\n       $0:ly\r\n      }));\r\n      return m!=null&&m.$==1?(pg=m.$0,nmm=new PlgElemName({\r\n       $:0,\r\n       $0:nm\r\n      }),[pg.plgDocs.ContainsKey(nmm)?RefType.RDoc:pg.plgActions.ContainsKey(nmm)?RefType.RAct:pg.plgVars.ContainsKey(nmm)?RefType.RVar:pg.plgViews.ContainsKey(nmm)?RefType.RViw:(((Runtime.Curried3(function($2,$3,$4)\r\n      {\r\n       return $2(\"Could not find reference to \"+Utils.toSafe($3)+\".\"+Utils.toSafe($4));\r\n      }))(Operators$7.FailWith))(ly))(nm),null]):Operators$7.FailWith(e$1.message);\r\n     }\r\n    }\r\n   else\r\n    {\r\n     entry=getRef(rf.$0);\r\n     return[entry.$==1?RefType.RAct:entry.$==2?RefType.RAct:entry.$==3?RefType.RVar:entry.$==4?RefType.RViw:entry.$==5?RefType.RViw:entry.$==7?RefType.RPlg:entry.$==6?(function($2)\r\n     {\r\n      return function($3)\r\n      {\r\n       return $2(\"PlugIn should not be referenced by itself: \"+FSharpStation_GeneratedPrintf.p$1($3));\r\n      };\r\n     }(Operators$7.FailWith))(rf):RefType.RDoc,{\r\n      $:1,\r\n      $0:entry\r\n     }];\r\n    }\r\n  }\r\n  return function(line)\r\n  {\r\n   var $1,a;\r\n   try\r\n   {\r\n    $1=(a=Syntax.createEntryO(getType,lytNm,line),a==null?ko((function($2)\r\n    {\r\n     return function($3)\r\n     {\r\n      return $2(\"Line not matched!: \"+Utils.toSafe($3));\r\n     };\r\n    }(Global.id))(line),line):ok(a.$0.$0,a.$0.$1));\r\n   }\r\n   catch(e)\r\n   {\r\n    $1=ko(e.message,line);\r\n   }\r\n   return{\r\n    $:1,\r\n    $0:$1\r\n   };\r\n  };\r\n };\r\n Syntax.createEntryO=function(getType,lytNm,line)\r\n {\r\n  var m,$1,a,a$1,$2,a$2,a$3,$3,a$4,a$5,$4,a$6,a$7,$5,a$8,a$9,$6,a$10,a$11,a$12,a$13,$7,a$14,a$15,a$16,a$17,$8,a$18,a$19,a$20,a$21,$9,a$22,a$23,a$24,$10,a$25,a$26,a$27,$11,a$28,a$29,$12,a$30,$13,a$31,a$32,a$33,$14,a$34,a$35,$15,a$36,a$37,$16,a$38,a$39,$17,a$40,a$41,$18,a$42,a$43,a$44,$19,a$45,a$46,a$47,a$48,a$49,a$50,a$51,a$52,a$53,a$54,a$55,$20,a$56,a$57,a$58,a$59;\r\n  function Rt(a$60)\r\n  {\r\n   var a$61,itr;\r\n   a$61=Syntax.R(a$60);\r\n   return a$61!=null&&a$61.$==1?(itr=a$61.$0,{\r\n    $:1,\r\n    $0:[getType(itr),itr]\r\n   }):null;\r\n  }\r\n  function DocRf(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return(a$61=Rt(a$60),a$61!=null&&a$61.$==1&&(a$61.$0[0][0].$==0&&($21=a$61.$0[1],true)))?{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:$21\r\n    }\r\n   }:null;\r\n  }\r\n  function VarRf(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return(a$61=Rt(a$60),a$61!=null&&a$61.$==1&&(a$61.$0[0][0].$==1&&($21=a$61.$0[1],true)))?{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:$21\r\n    }\r\n   }:null;\r\n  }\r\n  function ViwRf(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return(a$61=Rt(a$60),a$61!=null&&a$61.$==1&&(a$61.$0[0][0].$==2&&($21=a$61.$0[1],true)))?{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:$21\r\n    }\r\n   }:null;\r\n  }\r\n  function ActRf(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return(a$61=Rt(a$60),a$61!=null&&a$61.$==1&&(a$61.$0[0][0].$==3&&($21=a$61.$0[1],true)))?{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:$21\r\n    }\r\n   }:null;\r\n  }\r\n  function PlgRf(a$60)\r\n  {\r\n   var $21,a$61,$22;\r\n   return(a$61=Rt(a$60),a$61!=null&&a$61.$==1&&(a$61.$0[0][0].$==4&&(($22=a$61.$0[0][1],$22!=null&&$22.$==1)&&(a$61.$0[0][1].$0.$==7&&($21=[a$61.$0[0][1].$0.$0,a$61.$0[1]],true)))))?{\r\n    $:1,\r\n    $0:$21[0]\r\n   }:null;\r\n  }\r\n  function Name(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return(a$61=Syntax.R(a$60),a$61!=null&&a$61.$==1&&(a$61.$0.$==0&&($21=a$61.$0.$0,true)))?{\r\n    $:1,\r\n    $0:$21\r\n   }:null;\r\n  }\r\n  function NamU(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return(a$61=Name(a$60),a$61!=null&&a$61.$==1&&(Strings.StartsWith(a$61.$0,\"_\")&&($21=a$61.$0,true)))?{\r\n    $:1,\r\n    $0:$21\r\n   }:null;\r\n  }\r\n  function Tr(a$60)\r\n  {\r\n   var a$61,a$62,a$63;\r\n   a$61=VarRf(a$60);\r\n   return a$61!=null&&a$61.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:1,\r\n     $0:a$61.$0\r\n    }\r\n   }:(a$62=ViwRf(a$60),a$62!=null&&a$62.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:a$62.$0\r\n    }\r\n   }:(a$63=ActRf(a$60),a$63!=null&&a$63.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:3,\r\n     $0:a$63.$0\r\n    }\r\n   }:null));\r\n  }\r\n  function Indi(txt)\r\n  {\r\n   var m$1;\r\n   m$1=String.delimitedO(\"@{\",\"}\",txt);\r\n   return m$1!=null&&m$1.$==1?{\r\n    $:1,\r\n    $0:[m$1.$0[0],{\r\n     $:1,\r\n     $0:m$1.$0[1]\r\n    },m$1.$0[2]]\r\n   }:null;\r\n  }\r\n  function Tx(txt)\r\n  {\r\n   var $21,a$60,a$61,aft,bef,tl,a$62,$22;\r\n   return(a$60=Indi(txt),a$60!=null&&a$60.$==1&&(a$61=Tr(a$60.$0[1]),a$61!=null&&a$61.$==1&&($21=[a$60.$0[2],a$60.$0[0],a$61.$0],true)))?(aft=$21[0],(bef=$21[1],(tl=bef===\"\"?List.ofArray([$21[2]]):List.ofArray([{\r\n    $:0,\r\n    $0:bef\r\n   },$21[2]]),aft===\"\"?{\r\n    $:1,\r\n    $0:tl\r\n   }:(a$62=Tx(aft),a$62!=null&&a$62.$==1?{\r\n    $:1,\r\n    $0:List.append(tl,a$62.$0)\r\n   }:null)))):($22=Indi(txt),$22!=null&&$22.$==1)?null:{\r\n    $:1,\r\n    $0:List.ofArray([{\r\n     $:0,\r\n     $0:txt\r\n    }])\r\n   };\r\n  }\r\n  function ActI(txt)\r\n  {\r\n   var $21,a$60,a$61;\r\n   return(a$60=Indi(txt),a$60!=null&&a$60.$==1&&(a$61=ActRf(a$60.$0[1]),a$61!=null&&a$61.$==1&&(Strings.Trim(a$60.$0[0])===\"\"&&Strings.Trim(a$60.$0[2])===\"\"&&($21=[a$60.$0[2],a$61.$0,a$60.$0[0]],true))))?{\r\n    $:1,\r\n    $0:$21[1]\r\n   }:null;\r\n  }\r\n  function QTx(a$60)\r\n  {\r\n   var $21,a$61;\r\n   return a$60.$==0&&(a$61=Tx(a$60.$0),a$61!=null&&a$61.$==1&&($21=a$61.$0,true))?{\r\n    $:1,\r\n    $0:$21\r\n   }:null;\r\n  }\r\n  function At(a$60)\r\n  {\r\n   return a$60.$==0?{\r\n    $:1,\r\n    $0:Arrays.ofSeq(Seq$1.choose(function(a$61)\r\n    {\r\n     var m$1,$21,a$62,$22,a$63,m$2,$23,a$64;\r\n     m$1=(LayoutEngineModule.splitInTwo(\"=\"))(a$61);\r\n     return!Unchecked.Equals(m$1,null)&&m$1.length===2&&(a$62=ActI(Arrays.get(m$1,1)),a$62!=null&&a$62.$==1&&($21=[a$62.$0,Arrays.get(m$1,0)],true))?{\r\n      $:1,\r\n      $0:{\r\n       $:2,\r\n       $0:Strings.Trim($21[1]),\r\n       $1:$21[0]\r\n      }\r\n     }:!Unchecked.Equals(m$1,null)&&m$1.length===2&&(a$63=Tx(Arrays.get(m$1,1)),a$63!=null&&a$63.$==1&&($22=[Arrays.get(m$1,0),a$63.$0],true))?{\r\n      $:1,\r\n      $0:{\r\n       $:1,\r\n       $0:Strings.Trim($22[0]),\r\n       $1:$22[1]\r\n      }\r\n     }:(m$2=(LayoutEngineModule.splitInTwo(\":\"))(a$61),!Unchecked.Equals(m$2,null)&&m$2.length===2&&(a$64=Tx(Arrays.get(m$2,1)),a$64!=null&&a$64.$==1&&($23=[Arrays.get(m$2,0),a$64.$0],true))?{\r\n      $:1,\r\n      $0:{\r\n       $:0,\r\n       $0:Strings.Trim($23[0]),\r\n       $1:$23[1]\r\n      }\r\n     }:(function($24)\r\n     {\r\n      return function($25)\r\n      {\r\n       return $24(\"Attributes should be like: \\\"name=val\\\" or \\\"name:val\\\" and separated by ';' : \"+Utils.toSafe($25));\r\n      };\r\n     }(Operators$7.FailWith))(a$61));\r\n    },(LayoutEngineModule.splitSemiColon())(a$60.$0)))\r\n   }:null;\r\n  }\r\n  function Pr(a$60)\r\n  {\r\n   var a$61,a$62,a$63,a$64,a$65;\r\n   a$61=QTx(a$60);\r\n   return a$61!=null&&a$61.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:a$61.$0\r\n    }\r\n   }:(a$62=DocRf(a$60),a$62!=null&&a$62.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:1,\r\n     $0:a$62.$0\r\n    }\r\n   }:(a$63=VarRf(a$60),a$63!=null&&a$63.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:a$63.$0\r\n    }\r\n   }:(a$64=ViwRf(a$60),a$64!=null&&a$64.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:3,\r\n     $0:a$64.$0\r\n    }\r\n   }:(a$65=ActRf(a$60),a$65!=null&&a$65.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:4,\r\n     $0:a$65.$0\r\n    }\r\n   }:null))));\r\n  }\r\n  function Prs(a$60)\r\n  {\r\n   var $21,a$61,a$62;\r\n   switch(a$60.$==1?(a$61=Pr(a$60.$0),a$61!=null&&a$61.$==1?(a$62=Prs(a$60.$1),a$62!=null&&a$62.$==1?($21=[a$61.$0,a$62.$0],1):2):2):0)\r\n   {\r\n    case 0:\r\n     return{\r\n      $:1,\r\n      $0:List.T.Empty\r\n     };\r\n    case 1:\r\n     return{\r\n      $:1,\r\n      $0:new List.T({\r\n       $:1,\r\n       $0:$21[0],\r\n       $1:$21[1]\r\n      })\r\n     };\r\n    case 2:\r\n     return null;\r\n   }\r\n  }\r\n  function ActRfs(a$60)\r\n  {\r\n   var $21,a$61,a$62;\r\n   switch(a$60.$==1?(a$61=ActRf(a$60.$0),a$61!=null&&a$61.$==1?(a$62=ActRfs(a$60.$1),a$62!=null&&a$62.$==1?($21=[a$61.$0,a$62.$0],1):2):2):0)\r\n   {\r\n    case 0:\r\n     return{\r\n      $:1,\r\n      $0:List.T.Empty\r\n     };\r\n    case 1:\r\n     return{\r\n      $:1,\r\n      $0:new List.T({\r\n       $:1,\r\n       $0:$21[0],\r\n       $1:$21[1]\r\n      })\r\n     };\r\n    case 2:\r\n     return null;\r\n   }\r\n  }\r\n  function Nd(a$60)\r\n  {\r\n   var a$61,a$62,a$63,a$64;\r\n   a$61=QTx(a$60);\r\n   return a$61!=null&&a$61.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:a$61.$0\r\n    }\r\n   }:(a$62=DocRf(a$60),a$62!=null&&a$62.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:1,\r\n     $0:a$62.$0\r\n    }\r\n   }:(a$63=VarRf(a$60),a$63!=null&&a$63.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:a$63.$0\r\n    }\r\n   }:(a$64=ViwRf(a$60),a$64!=null&&a$64.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:3,\r\n     $0:a$64.$0\r\n    }\r\n   }:null)));\r\n  }\r\n  function Nds(a$60)\r\n  {\r\n   var $21,a$61,a$62;\r\n   switch(a$60.$==1?(a$61=Nd(a$60.$0),a$61!=null&&a$61.$==1?(a$62=Nds(a$60.$1),a$62!=null&&a$62.$==1?($21=[a$61.$0,a$62.$0],1):2):2):0)\r\n   {\r\n    case 0:\r\n     return{\r\n      $:1,\r\n      $0:List.T.Empty\r\n     };\r\n    case 1:\r\n     return{\r\n      $:1,\r\n      $0:new List.T({\r\n       $:1,\r\n       $0:$21[0],\r\n       $1:$21[1]\r\n      })\r\n     };\r\n    case 2:\r\n     return null;\r\n   }\r\n  }\r\n  function Pgs(a$60)\r\n  {\r\n   var $21,a$61,a$62;\r\n   switch(a$60.$==1?(a$61=PlgRf(a$60.$0),a$61!=null&&a$61.$==1?(a$62=Pgs(a$60.$1),a$62!=null&&a$62.$==1?($21=[a$61.$0,a$62.$0],1):2):2):0)\r\n   {\r\n    case 0:\r\n     return{\r\n      $:1,\r\n      $0:List.T.Empty\r\n     };\r\n    case 1:\r\n     return{\r\n      $:1,\r\n      $0:new List.T({\r\n       $:1,\r\n       $0:$21[0],\r\n       $1:$21[1]\r\n      })\r\n     };\r\n    case 2:\r\n     return null;\r\n   }\r\n  }\r\n  m=LayoutEngineModule.splitTokens(line);\r\n  return m.$==1&&(a=Name(m.$0),a!=null&&a.$==1&&(m.$1.$==1&&(LayoutEngineModule.PlugIn(m.$1.$0).$==0&&(a$1=Pgs(m.$1.$1),a$1!=null&&a$1.$==1&&($1=[a$1.$0,a.$0],true)))))?Syntax.entryPlg($1[1],{\r\n   $:0,\r\n   $0:new FSharpMap.New($1[0])\r\n  }):m.$==1&&(a$2=NamU(m.$0),a$2!=null&&a$2.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==1&&(m.$1.$1.$==1&&(a$3=Name(m.$1.$1.$0),a$3!=null&&a$3.$==1&&(m.$1.$1.$1.$==0&&($2=[a$2.$0,a$3.$0],true)))))))?Syntax.entryRef($2[0],$2[1],RefType.RDoc):m.$==1&&(a$4=NamU(m.$0),a$4!=null&&a$4.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==0&&(m.$1.$1.$==1&&(a$5=Name(m.$1.$1.$0),a$5!=null&&a$5.$==1&&(m.$1.$1.$1.$==0&&($3=[a$4.$0,a$5.$0],true)))))))?Syntax.entryRef($3[0],$3[1],RefType.RVar):m.$==1&&(a$6=NamU(m.$0),a$6!=null&&a$6.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==2&&(m.$1.$1.$==1&&(a$7=Name(m.$1.$1.$0),a$7!=null&&a$7.$==1&&(m.$1.$1.$1.$==0&&($4=[a$6.$0,a$7.$0],true)))))))?Syntax.entryRef($4[0],$4[1],RefType.RViw):m.$==1&&(a$8=NamU(m.$0),a$8!=null&&a$8.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==5&&(m.$1.$1.$==1&&(a$9=Name(m.$1.$1.$0),a$9!=null&&a$9.$==1&&(m.$1.$1.$1.$==0&&($5=[a$8.$0,a$9.$0],true)))))))?Syntax.entryRef($5[0],$5[1],RefType.RAct):m.$==1&&(a$10=Name(m.$0),a$10!=null&&a$10.$==1&&(m.$1.$==1&&(LayoutEngineModule.Vertical(m.$1.$0).$==0&&(m.$1.$1.$==1&&(a$11=LayoutEngineModule.Measures$1(m.$1.$1.$0),a$11!=null&&a$11.$==1&&(m.$1.$1.$1.$==1&&(a$12=DocRf(m.$1.$1.$1.$0),a$12!=null&&a$12.$==1&&(m.$1.$1.$1.$1.$==1&&(a$13=DocRf(m.$1.$1.$1.$1.$0),a$13!=null&&a$13.$==1&&(m.$1.$1.$1.$1.$1.$==0&&($6=[a$12.$0,a$11.$0,a$10.$0,a$13.$0],true)))))))))))?Syntax.entryDoc($6[2],{\r\n   $:0,\r\n   $0:{\r\n    $:0,\r\n    $0:true,\r\n    $1:$6[1],\r\n    $2:$6[0],\r\n    $3:$6[3]\r\n   }\r\n  }):m.$==1&&(a$14=Name(m.$0),a$14!=null&&a$14.$==1&&(m.$1.$==1&&(LayoutEngineModule.Vertical(m.$1.$0).$==1&&(m.$1.$1.$==1&&(a$15=LayoutEngineModule.Measures$1(m.$1.$1.$0),a$15!=null&&a$15.$==1&&(m.$1.$1.$1.$==1&&(a$16=DocRf(m.$1.$1.$1.$0),a$16!=null&&a$16.$==1&&(m.$1.$1.$1.$1.$==1&&(a$17=DocRf(m.$1.$1.$1.$1.$0),a$17!=null&&a$17.$==1&&(m.$1.$1.$1.$1.$1.$==0&&($7=[a$16.$0,a$15.$0,a$14.$0,a$17.$0],true)))))))))))?Syntax.entryDoc($7[2],{\r\n   $:0,\r\n   $0:{\r\n    $:0,\r\n    $0:false,\r\n    $1:$7[1],\r\n    $2:$7[0],\r\n    $3:$7[3]\r\n   }\r\n  }):m.$==1&&(a$18=Name(m.$0),a$18!=null&&a$18.$==1&&(m.$1.$==1&&(LayoutEngineModule.PlugIn(m.$1.$0).$==1&&(m.$1.$1.$==1&&(a$19=ActRf(m.$1.$1.$0),a$19!=null&&a$19.$==1&&(m.$1.$1.$1.$==1&&(a$20=At(m.$1.$1.$1.$0),a$20!=null&&a$20.$==1&&(m.$1.$1.$1.$1.$==1&&(a$21=QTx(m.$1.$1.$1.$1.$0),a$21!=null&&a$21.$==1&&(m.$1.$1.$1.$1.$1.$==0&&($8=[a$19.$0,a$20.$0,a$18.$0,a$21.$0],true)))))))))))?Syntax.entryDoc($8[2],{\r\n   $:1,\r\n   $0:{\r\n    $:0,\r\n    $0:$8[0],\r\n    $1:$8[1],\r\n    $2:$8[3]\r\n   }\r\n  }):m.$==1&&(a$22=Name(m.$0),a$22!=null&&a$22.$==1&&(m.$1.$==1&&(LayoutEngineModule.PlugIn(m.$1.$0).$==2&&(m.$1.$1.$==1&&(a$23=VarRf(m.$1.$1.$0),a$23!=null&&a$23.$==1&&(m.$1.$1.$1.$==1&&(a$24=At(m.$1.$1.$1.$0),a$24!=null&&a$24.$==1&&(m.$1.$1.$1.$1.$==0&&($9=[a$24.$0,a$22.$0,a$23.$0],true)))))))))?Syntax.entryDoc($9[1],{\r\n   $:2,\r\n   $0:{\r\n    $:0,\r\n    $0:$9[2],\r\n    $1:$9[0]\r\n   }\r\n  }):m.$==1&&(a$25=Name(m.$0),a$25!=null&&a$25.$==1&&(m.$1.$==1&&(LayoutEngineModule.PlugIn(m.$1.$0).$==3&&(m.$1.$1.$==1&&(a$26=VarRf(m.$1.$1.$0),a$26!=null&&a$26.$==1&&(m.$1.$1.$1.$==1&&(a$27=At(m.$1.$1.$1.$0),a$27!=null&&a$27.$==1&&(m.$1.$1.$1.$1.$==0&&($10=[a$27.$0,a$25.$0,a$26.$0],true)))))))))?Syntax.entryDoc($10[1],{\r\n   $:3,\r\n   $0:{\r\n    $:0,\r\n    $0:$10[2],\r\n    $1:$10[0]\r\n   }\r\n  }):m.$==1&&(a$28=Name(m.$0),a$28!=null&&a$28.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==0&&(m.$1.$1.$==1&&(a$29=(a$30=QTx(m.$1.$1.$0),a$30!=null&&a$30.$==1&&(a$30.$0.$==1&&(a$30.$0.$0.$==0&&(a$30.$0.$1.$==0&&($12=a$30.$0.$0.$0,true)))))?{\r\n   $:1,\r\n   $0:$12\r\n  }:null,a$29!=null&&a$29.$==1&&(m.$1.$1.$1.$==0&&($11=[a$28.$0,a$29.$0],true)))))))?Syntax.entryVar($11[0],{\r\n   $:0,\r\n   $0:Strings.Trim($11[1])\r\n  }):m.$==1&&(a$31=Name(m.$0),a$31!=null&&a$31.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==1&&(m.$1.$1.$==1&&(a$32=DocRf(m.$1.$1.$0),a$32!=null&&a$32.$==1&&(a$33=Prs(m.$1.$1.$1),a$33!=null&&a$33.$==1&&($13=[a$32.$0,a$31.$0,a$33.$0],true)))))))?Syntax.entryDoc($13[1],{\r\n   $:4,\r\n   $0:{\r\n    $:0,\r\n    $0:$13[0],\r\n    $1:$13[2]\r\n   }\r\n  }):m.$==1&&(a$34=Name(m.$0),a$34!=null&&a$34.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==2&&(a$35=Prs(m.$1.$1),a$35!=null&&a$35.$==1&&($14=[a$34.$0,a$35.$0],true)))))?Syntax.entryView($14[0],{\r\n   $:0,\r\n   $0:$14[1]\r\n  }):m.$==1&&(a$36=Name(m.$0),a$36!=null&&a$36.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==3&&(a$37=Prs(m.$1.$1),a$37!=null&&a$37.$==1&&($15=[a$36.$0,a$37.$0],true)))))?Syntax.entryVJS($15[0],{\r\n   $:0,\r\n   $0:$15[1]\r\n  }):m.$==1&&(a$38=Name(m.$0),a$38!=null&&a$38.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==4&&(a$39=Nds(m.$1.$1),a$39!=null&&a$39.$==1&&($16=[a$38.$0,a$39.$0],true)))))?Syntax.entryDoc($16[0],{\r\n   $:5,\r\n   $0:{\r\n    $:0,\r\n    $0:$16[1]\r\n   }\r\n  }):m.$==1&&(a$40=Name(m.$0),a$40!=null&&a$40.$==1&&(m.$1.$==1&&(LayoutEngineModule.PlugIn(m.$1.$0).$==5&&(a$41=ActRfs(m.$1.$1),a$41!=null&&a$41.$==1&&($17=[a$41.$0,a$40.$0],true)))))?Syntax.entryActs($17[1],{\r\n   $:0,\r\n   $0:$17[0]\r\n  }):m.$==1&&(a$42=Name(m.$0),a$42!=null&&a$42.$==1&&(m.$1.$==1&&(LayoutEngineModule.Var(m.$1.$0).$==5&&(m.$1.$1.$==1&&(a$43=ActRf(m.$1.$1.$0),a$43!=null&&a$43.$==1&&(a$44=Prs(m.$1.$1.$1),a$44!=null&&a$44.$==1&&($18=[a$43.$0,a$42.$0,a$44.$0],true)))))))?Syntax.entryAct($18[1],{\r\n   $:0,\r\n   $0:$18[0],\r\n   $1:$18[2]\r\n  }):m.$==1&&(a$45=Name(m.$0),a$45!=null&&a$45.$==1&&(m.$1.$==1&&(LayoutEngineModule.Vertical(m.$1.$0).$==4&&(m.$1.$1.$==1&&(a$46=Name(m.$1.$1.$0),a$46!=null&&a$46.$==1&&(m.$1.$1.$1.$==1&&(a$47=Pr(m.$1.$1.$1.$0),a$47!=null&&a$47.$==1&&(m.$1.$1.$1.$1.$==1&&(a$48=(a$49=m.$1.$1.$1.$1.$0,a$49.$==0?{\r\n   $:1,\r\n   $0:Arrays.ofSeq(Seq$1.choose(function(a$60)\r\n   {\r\n    var m$1,$21,a$61,a$62;\r\n    m$1=Arrays.map(LayoutEngineModule.splitTokens,(LayoutEngineModule.splitInTwo(\":\"))(a$60));\r\n    return!Unchecked.Equals(m$1,null)&&m$1.length===2&&(Arrays.get(m$1,0).$==1&&(a$61=Name(Arrays.get(m$1,0).$0),a$61!=null&&a$61.$==1&&(Arrays.get(m$1,0).$1.$==0&&(Arrays.get(m$1,1).$==1&&(a$62=Pr(Arrays.get(m$1,1).$0),a$62!=null&&a$62.$==1&&(Arrays.get(m$1,1).$1.$==0&&($21=[a$61.$0,a$62.$0],true)))))))?{\r\n     $:1,\r\n     $0:[$21[0],$21[1]]\r\n    }:(function($22)\r\n    {\r\n     return function($23)\r\n     {\r\n      return $22(\"Expecting Views \\\"name:view\\\" separated by ';' : \"+Utils.toSafe($23));\r\n     };\r\n    }(Operators$7.FailWith))(a$60);\r\n   },(LayoutEngineModule.splitSemiColon())(a$49.$0)))\r\n  }:null),a$48!=null&&a$48.$==1&&(m.$1.$1.$1.$1.$1.$==1&&(a$50=(a$51=m.$1.$1.$1.$1.$1.$0,a$51.$==0?{\r\n   $:1,\r\n   $0:Arrays.ofSeq(Seq$1.choose(function(a$60)\r\n   {\r\n    var m$1,$21,a$61,a$62;\r\n    m$1=Arrays.map(function(a$63)\r\n    {\r\n     return{\r\n      $:1,\r\n      $0:a$63\r\n     };\r\n    },(LayoutEngineModule.splitInTwo(\":\"))(a$60));\r\n    return!Unchecked.Equals(m$1,null)&&m$1.length===2&&(a$61=Name(Arrays.get(m$1,0)),a$61!=null&&a$61.$==1&&(a$62=DocRf(Arrays.get(m$1,1)),a$62!=null&&a$62.$==1&&($21=[a$61.$0,a$62.$0],true)))?{\r\n     $:1,\r\n     $0:[$21[0],$21[1]]\r\n    }:(function($22)\r\n    {\r\n     return function($23)\r\n     {\r\n      return $22(\"Expecting Docs \\\"name:doc\\\" separated by ';' : \"+Utils.toSafe($23));\r\n     };\r\n    }(Operators$7.FailWith))(a$60);\r\n   },(LayoutEngineModule.splitSemiColon())(a$51.$0)))\r\n  }:null),a$50!=null&&a$50.$==1&&(m.$1.$1.$1.$1.$1.$1.$==1&&(a$52=(a$53=m.$1.$1.$1.$1.$1.$1.$0,a$53.$==0?{\r\n   $:1,\r\n   $0:Arrays.ofSeq(Seq$1.choose(function(a$60)\r\n   {\r\n    var m$1,$21,a$61,a$62;\r\n    m$1=Arrays.map(function(a$63)\r\n    {\r\n     return{\r\n      $:1,\r\n      $0:a$63\r\n     };\r\n    },(LayoutEngineModule.splitInTwo(\":\"))(a$60));\r\n    return!Unchecked.Equals(m$1,null)&&m$1.length===2&&(a$61=Name(Arrays.get(m$1,0)),a$61!=null&&a$61.$==1&&(a$62=VarRf(Arrays.get(m$1,1)),a$62!=null&&a$62.$==1&&($21=[a$61.$0,a$62.$0],true)))?{\r\n     $:1,\r\n     $0:[$21[0],$21[1]]\r\n    }:(function($22)\r\n    {\r\n     return function($23)\r\n     {\r\n      return $22(\"Expecting Vars \\\"name:var\\\" separated by ';' : \"+Utils.toSafe($23));\r\n     };\r\n    }(Operators$7.FailWith))(a$60);\r\n   },(LayoutEngineModule.splitSemiColon())(a$53.$0)))\r\n  }:null),a$52!=null&&a$52.$==1&&(m.$1.$1.$1.$1.$1.$1.$1.$==1&&(a$54=(a$55=m.$1.$1.$1.$1.$1.$1.$1.$0,a$55.$==0?{\r\n   $:1,\r\n   $0:Arrays.ofSeq(Seq$1.choose(function(a$60)\r\n   {\r\n    var m$1,$21,a$61,a$62;\r\n    m$1=Arrays.map(LayoutEngineModule.splitTokens,(LayoutEngineModule.splitInTwo(\":\"))(a$60));\r\n    return!Unchecked.Equals(m$1,null)&&m$1.length===2&&(Arrays.get(m$1,0).$==1&&(a$61=Name(Arrays.get(m$1,0).$0),a$61!=null&&a$61.$==1&&(Arrays.get(m$1,0).$1.$==0&&(Arrays.get(m$1,1).$==1&&(a$62=ActRf(Arrays.get(m$1,1).$0),a$62!=null&&a$62.$==1&&(Arrays.get(m$1,1).$1.$==0&&($21=[a$61.$0,a$62.$0],true)))))))?{\r\n     $:1,\r\n     $0:[$21[0],$21[1]]\r\n    }:(function($22)\r\n    {\r\n     return function($23)\r\n     {\r\n      return $22(\"Expecting Actions \\\"name:action\\\" separated by ';' : \"+Utils.toSafe($23));\r\n     };\r\n    }(Operators$7.FailWith))(a$60);\r\n   },(LayoutEngineModule.splitSemiColon())(a$55.$0)))\r\n  }:null),a$54!=null&&a$54.$==1&&(m.$1.$1.$1.$1.$1.$1.$1.$1.$==0&&($19=[a$54.$0,a$47.$0,a$50.$0,a$45.$0,a$46.$0,a$52.$0,a$48.$0],true)))))))))))))))))?Syntax.entryDoc($19[3],{\r\n   $:7,\r\n   $0:Syntax.templateDef($19[4],$19[1],$19[5],$19[6],$19[2],$19[0])\r\n  }):m.$==1&&(a$56=Name(m.$0),a$56!=null&&a$56.$==1&&(m.$1.$==1&&(a$57=LayoutEngineModule.Vertical(m.$1.$0),a$57.$==5&&(m.$1.$1.$==1&&(a$58=Pr(m.$1.$1.$0),a$58!=null&&a$58.$==1&&(a$59=Nds(m.$1.$1.$1),a$59!=null&&a$59.$==1&&($20=[a$58.$0,a$57.$0,a$56.$0,a$59.$0],true)))))))?Syntax.entryDoc($20[2],{\r\n   $:6,\r\n   $0:{\r\n    $:0,\r\n    $0:$20[1],\r\n    $1:$20[0],\r\n    $2:$20[3]\r\n   }\r\n  }):null;\r\n };\r\n Syntax.R=function(a)\r\n {\r\n  var a$1,m,n;\r\n  a$1=LayoutEngineModule.Identifier(a);\r\n  return a$1!=null&&a$1.$==1?(m=Strings.SplitChars(a$1.$0,[\".\"],0),!Unchecked.Equals(m,null)&&m.length===1?{\r\n   $:1,\r\n   $0:{\r\n    $:0,\r\n    $0:Arrays.get(m,0)\r\n   }\r\n  }:!Unchecked.Equals(m,null)&&m.length===2?(n=Arrays.get(m,1),{\r\n   $:1,\r\n   $0:{\r\n    $:1,\r\n    $0:Arrays.get(m,0),\r\n    $1:n\r\n   }\r\n  }):null):null;\r\n };\r\n Syntax.entryRef=function(n,e,e$1)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:7,\r\n    $0:[e,e$1]\r\n   })\r\n  };\r\n };\r\n Syntax.entryPlg=function(n,p)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:6,\r\n    $0:p\r\n   })\r\n  };\r\n };\r\n Syntax.entryVar=function(n,v)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:3,\r\n    $0:v\r\n   })\r\n  };\r\n };\r\n Syntax.entryVJS=function(n,w)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:5,\r\n    $0:w\r\n   })\r\n  };\r\n };\r\n Syntax.entryView=function(n,w)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:4,\r\n    $0:w\r\n   })\r\n  };\r\n };\r\n Syntax.entryActs=function(n,a)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:2,\r\n    $0:a\r\n   })\r\n  };\r\n };\r\n Syntax.entryAct=function(n,a)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:1,\r\n    $0:a\r\n   })\r\n  };\r\n };\r\n Syntax.entryDoc=function(n,d)\r\n {\r\n  return{\r\n   $:1,\r\n   $0:Syntax.entryDef(n,{\r\n    $:0,\r\n    $0:d\r\n   })\r\n  };\r\n };\r\n Syntax.entryDef=function(n,e)\r\n {\r\n  return{\r\n   $:0,\r\n   $0:n,\r\n   $1:e\r\n  };\r\n };\r\n Syntax.templateDef=function(nm,ats,vs,ws,ds,acs)\r\n {\r\n  return TemplateDef.New(nm,vs,ws,ds,acs,ats);\r\n };\r\n Layout.createLayoutDefinitions=function(nameBase,node)\r\n {\r\n  var dir,meas,p,name1,def1,p$1,name2,def2,t,t$1;\r\n  return node.$==1?(dir=node.$0.$0,(meas=node.$0.$1,(p=Layout.createLayoutDefinitions(nameBase+\"_1\",node.$0.$2),(name1=p[0],(def1=p[1],(p$1=Layout.createLayoutDefinitions(nameBase+\"_2\",node.$0.$3),(name2=p$1[0],(def2=p$1[1],[nameBase,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append([Strings.concat(\" \",List.ofArray([nameBase,dir?\"vertical\":\"horizontal\",Global.String(meas),name1,name2]))],Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(def1,Seq$1.delay(function()\r\n    {\r\n     return def2;\r\n    }));\r\n   }));\r\n  }))])))))))):(t=node.$0,!Unchecked.Equals(t,null)&&t.length===0)?[\"___\",[]]:(t$1=node.$0,!Unchecked.Equals(t$1,null)&&t$1.length===1)?[Arrays.get(node.$0,0),[]]:[nameBase,[nameBase+\" div \\\"\\\" \"+Strings.concat(\" \",node.$0)]];\r\n };\r\n Layout.extractNodes=function(lyt)\r\n {\r\n  var m,m$1;\r\n  function checkSplitter(dir,m$2,one,two)\r\n  {\r\n   var $1,$2,$3,t,t$1,t$2;\r\n   $1=Layout.extractNodes(one);\r\n   $2=Layout.extractNodes(two);\r\n   return($1.$==0?(t=$1.$0,!Unchecked.Equals(t,null)&&t.length===0)?($3=$2,true):$2.$==0?(t$1=$2.$0,!Unchecked.Equals(t$1,null)&&t$1.length===0)?($3=$1,true):($3=[$1,$2],false):($3=[$1,$2],false):$2.$==0?(t$2=$2.$0,!Unchecked.Equals(t$2,null)&&t$2.length===0)?($3=$1,true):($3=[$1,$2],false):($3=[$1,$2],false))?$3:{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:dir,\r\n     $1:m$2,\r\n     $2:$3[0],\r\n     $3:$3[1]\r\n    }\r\n   };\r\n  }\r\n  m=Layout.horizontalSplit(lyt);\r\n  return m!=null&&m.$==1?checkSplitter(false,m.$0[2],m.$0[0],m.$0[1]):(m$1=Layout.verticalSplit(lyt),m$1!=null&&m$1.$==1?checkSplitter(true,m$1.$0[2],m$1.$0[0],m$1.$0[1]):{\r\n   $:0,\r\n   $0:Layout.cleanSpaces(lyt)\r\n  });\r\n };\r\n Layout.cleanSpaces=function(lyt)\r\n {\r\n  return Arrays.filter(function(a)\r\n  {\r\n   var $1;\r\n   return!($1=(ParseO.Int())(a),$1!=null&&$1.$==1);\r\n  },Strings.SplitStrings(Strings.concat(\" \",lyt),[\" \"],1));\r\n };\r\n Layout.verticalSplit=function(lyt)\r\n {\r\n  var lines,o,o$1,o$2,i,$1,l,r,x,v;\r\n  function c(i$1,l$1)\r\n  {\r\n   var $2,a,t;\r\n   return(a=LibraryJS.REGEX$1(\"^ *\\\\|+ *$\",\"\",l$1),a!=null&&a.$==1&&(t=a.$0,!Unchecked.Equals(t,null)&&t.length===1))?{\r\n    $:1,\r\n    $0:[i$1,l$1.indexOf(\"|\")]\r\n   }:null;\r\n  }\r\n  function g(y)\r\n  {\r\n   return Unchecked.Equals(null,y);\r\n  }\r\n  function g$1(y)\r\n  {\r\n   return Unchecked.Equals(null,y);\r\n  }\r\n  lines=Layout.transpose(lyt);\r\n  o=(o$1=(o$2=Seq$1.tryHead(Seq$1.sortBy(function(t)\r\n  {\r\n   return t[1];\r\n  },Seq$1.choose(function($2)\r\n  {\r\n   return c($2[0],$2[1]);\r\n  },Seq$1.indexed(lines)))),o$2==null?null:{\r\n   $:1,\r\n   $0:o$2.$0[0]\r\n  }),o$1==null?null:{\r\n   $:1,\r\n   $0:(i=o$1.$0,[Layout.transpose(Slice.array(lines,null,{\r\n    $:1,\r\n    $0:i-1\r\n   })),Layout.transpose(Slice.array(lines,{\r\n    $:1,\r\n    $0:i+1\r\n   },null))])\r\n  });\r\n  return o==null?null:{\r\n   $:1,\r\n   $0:($1=o.$0,(l=$1[0],(r=$1[1],[Arrays.filter(function(x$1)\r\n   {\r\n    return g(Layout.extractMeasuresO(x$1));\r\n   },l),Arrays.filter(function(x$1)\r\n   {\r\n    return g$1(Layout.extractMeasuresO(x$1));\r\n   },r),(x=Seq$1.tryHead(Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(Seq$1.choose(Layout.extractMeasuresO,l),Seq$1.delay(function()\r\n    {\r\n     return Seq$1.map(function(a)\r\n     {\r\n      return a.$==0?a.$1?new Measures({\r\n       $:0,\r\n       $0:a.$0,\r\n       $1:false\r\n      }):a:a;\r\n     },Seq$1.choose(Layout.extractMeasuresO,r));\r\n    }));\r\n   })),(v=new Measures({\r\n    $:1,\r\n    $0:5,\r\n    $1:50,\r\n    $2:95\r\n   }),x==null?v:x.$0))])))\r\n  };\r\n };\r\n Layout.transpose=function(lines)\r\n {\r\n  var max;\r\n  max=Seq$1.max(Seq$1.map(function(l)\r\n  {\r\n   return l.length;\r\n  },lines));\r\n  return Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.map(function(i)\r\n   {\r\n    return Arrays.ofSeq(Seq$1.delay(function()\r\n    {\r\n     return Seq$1.map(function(l)\r\n     {\r\n      return l.length>i?l[i]:\" \";\r\n     },lines);\r\n    })).join(\"\");\r\n   },Operators$7.range(0,max-1));\r\n  }));\r\n };\r\n Layout.horizontalSplit=function(lines)\r\n {\r\n  var o,o$1,$1,i,ms;\r\n  function c(i$1,l)\r\n  {\r\n   var a,x,o$2,v;\r\n   a=LibraryJS.REGEX$1(\"^ *--+([ ^v0-9]*)-* *$\",\"\",l);\r\n   return a!=null&&a.$==1?{\r\n    $:1,\r\n    $0:[[i$1,(x=(o$2=Seq$1.tryItem(1,a.$0),o$2==null?null:Layout.extractMeasuresO(Strings.Replace(Strings.Replace(o$2.$0,\"^\",\"\"),\"v\",\"-\"))),(v=new Measures({\r\n     $:1,\r\n     $0:5,\r\n     $1:50,\r\n     $2:95\r\n    }),x==null?v:x.$0))],l.indexOf(\"-\")]\r\n   }:null;\r\n  }\r\n  o=(o$1=Seq$1.tryHead(Seq$1.sortBy(function(t)\r\n  {\r\n   return t[1];\r\n  },Seq$1.choose(function($2)\r\n  {\r\n   return c($2[0],$2[1]);\r\n  },Seq$1.indexed(lines)))),o$1==null?null:{\r\n   $:1,\r\n   $0:o$1.$0[0]\r\n  });\r\n  return o==null?null:{\r\n   $:1,\r\n   $0:($1=o.$0,(i=$1[0],(ms=$1[1],[Slice.array(lines,null,{\r\n    $:1,\r\n    $0:i-1\r\n   }),Slice.array(lines,{\r\n    $:1,\r\n    $0:i+1\r\n   },null),ms])))\r\n  };\r\n };\r\n Layout.extractMeasuresO=function(m)\r\n {\r\n  var m$1,$1,a,$2,a$1,a$2,a$3;\r\n  m$1=Strings.SplitChars(m,[\" \"],1);\r\n  return!Unchecked.Equals(m$1,null)&&m$1.length===1&&(a=(ParseO.Int())(Arrays.get(m$1,0)),a!=null&&a.$==1&&($1=a.$0,true))?{\r\n   $:1,\r\n   $0:new Measures({\r\n    $:0,\r\n    $0:Math.abs($1),\r\n    $1:$1>=0\r\n   })\r\n  }:!Unchecked.Equals(m$1,null)&&m$1.length===3&&(a$1=(ParseO.Int())(Arrays.get(m$1,0)),a$1!=null&&a$1.$==1&&(a$2=(ParseO.Int())(Arrays.get(m$1,1)),a$2!=null&&a$2.$==1&&(a$3=(ParseO.Int())(Arrays.get(m$1,2)),a$3!=null&&a$3.$==1&&($2=[a$3.$0,a$1.$0,a$2.$0],true))))?{\r\n   $:1,\r\n   $0:new Measures({\r\n    $:1,\r\n    $0:$2[1],\r\n    $1:$2[2],\r\n    $2:$2[0]\r\n   })\r\n  }:null;\r\n };\r\n LayoutEngineModule.newLyt=function(name,lyt)\r\n {\r\n  return LayoutEngine.New(name,Var$1.Create$1(lyt));\r\n };\r\n LayoutEngineModule.refreshEntries=function(lytN,entries)\r\n {\r\n  var plg,m,plg$1,i;\r\n  plg=(m=AppFramework.tryGetPlugIn(lytN),m==null?(plg$1=(i=AppFramework.defaultPlugIn(),PlugIn.New(lytN,i.plgVars,i.plgViews,i.plgDocs,i.plgActions,i.plgQueries)),(AppFramework.addPlugIn(plg$1),plg$1)):m.$0);\r\n  ListModel.refreshLM(plg.plgVars,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return LayoutEngineModule.getVarEntries(entries);\r\n  })));\r\n  ListModel.refreshLM(plg.plgViews,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return LayoutEngineModule.getViewEntries(entries);\r\n  })));\r\n  ListModel.refreshLM(plg.plgActions,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return LayoutEngineModule.getActionEntries(entries);\r\n  })));\r\n  ListModel.refreshLM(plg.plgQueries,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return LayoutEngineModule.getQueryEntries(entries);\r\n  })));\r\n  ListModel.refreshLM(plg.plgDocs,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return LayoutEngineModule.getDocEntries(entries);\r\n  })));\r\n };\r\n LayoutEngineModule.none=function(x)\r\n {\r\n  return Doc.Element(\"span\",[],[]);\r\n };\r\n LayoutEngineModule.getQueryEntries=function(entries)\r\n {\r\n  function f(t)\r\n  {\r\n   return t[1];\r\n  }\r\n  return Seq$1.map(function(x)\r\n  {\r\n   return Seq$1.last(f(x));\r\n  },Seq$1.groupBy(function(v)\r\n  {\r\n   return v.qryName;\r\n  },Seq$1.choose(function(a)\r\n  {\r\n   return a.$==4?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },entries)));\r\n };\r\n LayoutEngineModule.getActionEntries=function(entries)\r\n {\r\n  function f(t)\r\n  {\r\n   return t[1];\r\n  }\r\n  return Seq$1.map(function(x)\r\n  {\r\n   return Seq$1.last(f(x));\r\n  },Seq$1.groupBy(function(v)\r\n  {\r\n   return v.actName;\r\n  },Seq$1.choose(function(a)\r\n  {\r\n   return a.$==3?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },entries)));\r\n };\r\n LayoutEngineModule.getViewEntries=function(entries)\r\n {\r\n  function f(t)\r\n  {\r\n   return t[1];\r\n  }\r\n  return Seq$1.map(function(x)\r\n  {\r\n   return Seq$1.last(f(x));\r\n  },Seq$1.groupBy(function(v)\r\n  {\r\n   return v.viwName;\r\n  },Seq$1.choose(function(a)\r\n  {\r\n   return a.$==1?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },entries)));\r\n };\r\n LayoutEngineModule.getVarEntries=function(entries)\r\n {\r\n  function f(t)\r\n  {\r\n   return t[1];\r\n  }\r\n  return Seq$1.map(function(x)\r\n  {\r\n   return Seq$1.last(f(x));\r\n  },Seq$1.groupBy(function(v)\r\n  {\r\n   return v.varName;\r\n  },Seq$1.choose(function(a)\r\n  {\r\n   return a.$==0?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },entries)));\r\n };\r\n LayoutEngineModule.getDocEntries=function(entries)\r\n {\r\n  function f(t)\r\n  {\r\n   return t[1];\r\n  }\r\n  return Seq$1.map(function(x)\r\n  {\r\n   return Seq$1.last(f(x));\r\n  },Seq$1.groupBy(function(d)\r\n  {\r\n   return d.docName;\r\n  },Seq$1.choose(function(a)\r\n  {\r\n   return a.$==2?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },entries)));\r\n };\r\n LayoutEngineModule.getText=function(lytNm,txtName)\r\n {\r\n  var a,id,p,plg,nm,o,o$1,o$2,o$3;\r\n  a=LayoutEngineModule.Identifier(txtName);\r\n  return a!=null&&a.$==1?(id=a.$0,(p=(AppFramework.splitName(lytNm))(id),(plg=p[0],(nm=p[1],(o=(o$1=AppFramework.tryGetViw(plg,nm),o$1==null?null:{\r\n   $:1,\r\n   $0:Doc.TextView(o$1.$0.viwView)\r\n  }),o==null?(o$2=(o$3=AppFramework.tryGetVar(plg,nm),o$3==null?null:{\r\n   $:1,\r\n   $0:Doc.TextView(o$3.$0.varVar.get_View())\r\n  }),o$2==null?Doc.TextNode(id):o$2.$0):o.$0))))):Doc.TextNode(LayoutEngineModule.S(txtName));\r\n };\r\n LayoutEngineModule.parseEntries=function(lytNm,txt)\r\n {\r\n  var localRefs,x;\r\n  localRefs=new Dictionary.New$5();\r\n  x=(((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"PlugInName View \\\"\"+Utils.toSafe($2)+\"\\\"\\n\"+Utils.toSafe($3));\r\n  }))(Global.id))(lytNm.get_Id()))(txt);\r\n  return LayoutEngineModule.processText(Syntax.createEntryO2(lytNm,localRefs),x);\r\n };\r\n LayoutEngineModule.processText=function(f,txt)\r\n {\r\n  return LayoutEngineModule.processLines(f,Strings.SplitChars(txt,[\"\\n\",\"\\r\"],1));\r\n };\r\n LayoutEngineModule.processLines=function(f,ls)\r\n {\r\n  function processLinesR(ls$1)\r\n  {\r\n   var m,l,m$1,$1,a,p,p$1,rest,docs,p$2,names,ls$2;\r\n   m=Seq$1.tryHead(ls$1);\r\n   return m!=null&&m.$==1?(l=m.$0,(m$1=LayoutEngineModule.splitTokens(l),m$1.$==1&&(a=LayoutEngineModule.Identifier(m$1.$0),a!=null&&a.$==1&&(m$1.$1.$==1&&(LayoutEngineModule.Vertical(m$1.$1.$0).$==2&&(m$1.$1.$1.$==0&&($1=a.$0,true)))))?(p=LayoutEngineModule.getExtraLines(function(l$1)\r\n   {\r\n    return Strings.StartsWith(Strings.Trim(l$1),\"|\");\r\n   },ls$1),processLinesR((Layout.createLayoutDefinitions($1,Layout.extractNodes(p[0])))[1].concat(p[1]))):m$1.$==0?processLinesR(Slice.array(ls$1,{\r\n    $:1,\r\n    $0:1\r\n   },null)):(p$1=LayoutEngineModule.getExtraLines(function(l$1)\r\n   {\r\n    return Strings.StartsWith(Strings.Trim(l$1),\":\");\r\n   },ls$1),(rest=p$1[1],(docs=p$1[0],Arrays.length(docs)>0?(p$2=LayoutEngineModule.createLines(Seq$1.nth(0,Strings.SplitChars(l,[\" \"],1)),1,[],[],1,docs),(names=p$2[0],(ls$2=p$2[1],processLinesR(Arrays.ofSeq(Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(ls$2,Seq$1.delay(function()\r\n    {\r\n     return Seq$1.append([l+\" \"+Strings.concat(\" \",names)],Seq$1.delay(function()\r\n     {\r\n      return rest;\r\n     }));\r\n    }));\r\n   })))))):Arrays.ofSeq(Seq$1.delay(function()\r\n   {\r\n    var m$2;\r\n    return Seq$1.append((m$2=f(l),m$2!=null&&m$2.$==1?[m$2.$0]:[]),Seq$1.delay(function()\r\n    {\r\n     return processLinesR(rest);\r\n    }));\r\n   }))))))):[];\r\n  }\r\n  return processLinesR(ls);\r\n };\r\n LayoutEngineModule.createLines=function(baseName,n,names,lines,i,ls)\r\n {\r\n  var prefix,prefix2,m,a,l,p,name,p$1,childrenLines,childNames;\r\n  prefix=Strings.replicate(n,\":\");\r\n  prefix2=\":\"+prefix;\r\n  m=Seq$1.tryHead(ls);\r\n  return m!=null&&m.$==1?(a=String.StartsWith(prefix,Strings.Trim(m.$0)),a!=null&&a.$==1?(l=a.$0,(p=LayoutEngineModule.getExtraLines(function(l$1)\r\n  {\r\n   return Strings.StartsWith(Strings.Trim(l$1),prefix2);\r\n  },ls),(name=(((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"_\"+Utils.toSafe($2)+\"_\"+Global.String($3));\r\n  }))(Global.id))(baseName))(i),(p$1=LayoutEngineModule.createLines(name,n+1,[],[],1,p[0]),(childrenLines=p$1[1],(childNames=p$1[0],LayoutEngineModule.createLines(baseName,n,Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append(names,Seq$1.delay(function()\r\n   {\r\n    return[name];\r\n   }));\r\n  })),Arrays.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append(lines,Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(childrenLines,Seq$1.delay(function()\r\n    {\r\n     return[name+\" \"+l+\" \"+Strings.concat(\" \",childNames)];\r\n    }));\r\n   }));\r\n  })),i+1,p[1]))))))):[names,lines]):[names,lines];\r\n };\r\n LayoutEngineModule.getExtraLines=function(pred,ls)\r\n {\r\n  var i,x,o,v,a;\r\n  i=(x=(o=Seq$1.tryFindIndex(function(l)\r\n  {\r\n   return(LayoutEngineModule.notEmpty())(l)&&!pred(l);\r\n  },Seq$1.skip(1,ls)),o==null?null:{\r\n   $:1,\r\n   $0:1+o.$0\r\n  }),(v=Arrays.length(ls),x==null?v:x.$0));\r\n  return[(a=Slice.array(ls,{\r\n   $:1,\r\n   $0:1\r\n  },{\r\n   $:1,\r\n   $0:i-1\r\n  }),Arrays.filter(LayoutEngineModule.notEmpty(),a)),Slice.array(ls,{\r\n   $:1,\r\n   $0:i\r\n  },null)];\r\n };\r\n LayoutEngineModule.notEmpty=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.notEmpty;\r\n };\r\n LayoutEngineModule.emptyLine=function(l)\r\n {\r\n  var lt;\r\n  lt=Strings.Trim(l);\r\n  return lt===\"\"||Strings.StartsWith(lt,\"//\");\r\n };\r\n LayoutEngineModule.splitTokens=function(line)\r\n {\r\n  return LayoutEngineModule.doubleQuote(List.ofSeq(Seq$1.collect(Global.id,Seq$1.mapi(function(i,s)\r\n  {\r\n   var t;\r\n   return i%2===1?[{\r\n    $:0,\r\n    $0:s\r\n   }]:s===\"\"?[{\r\n    $:0,\r\n    $0:\"\\\"\"\r\n   }]:(t=Strings.Trim(s),t===\"\"?[]:Arrays.map(function(a)\r\n   {\r\n    return{\r\n     $:1,\r\n     $0:a\r\n    };\r\n   },Strings.SplitChars(t,[\" \"],1)));\r\n  },String.splitByChar(\"\\\"\",Unchecked.Equals(Seq$1.tryHead(line),{\r\n   $:1,\r\n   $0:\"\\\"\"\r\n  })?\" \"+line:line)))));\r\n };\r\n LayoutEngineModule.doubleQuote=function(a)\r\n {\r\n  var $1,$2,$3;\r\n  switch(a.$==1?a.$0.$==1?Strings.StartsWith(a.$0.$0,\"//\")?($1=a.$0.$0,1):2:2:0)\r\n  {\r\n   case 0:\r\n    return List.T.Empty;\r\n   case 1:\r\n    return List.T.Empty;\r\n   case 2:\r\n    switch(a.$==1?a.$0.$==0?a.$1.$==1?a.$1.$0.$==0?a.$1.$0.$0===\"\\\"\"?a.$1.$1.$==0?($3=a.$0.$0,1):a.$1.$1.$0.$==0?($3=[a.$1.$1.$1,a.$0.$0,a.$1.$1.$0.$0],0):($3=[a.$0,a.$1],2):($3=[a.$0,a.$1],2):($3=[a.$0,a.$1],2):($3=[a.$0,a.$1],2):($3=[a.$0,a.$1],2):3)\r\n    {\r\n     case 0:\r\n      $2=LayoutEngineModule.doubleQuote(new List.T({\r\n       $:1,\r\n       $0:{\r\n        $:0,\r\n        $0:$3[1]+\"\\\"\"+$3[2]\r\n       },\r\n       $1:$3[0]\r\n      }));\r\n      break;\r\n     case 1:\r\n      $2=List.ofArray([{\r\n       $:0,\r\n       $0:$3\r\n      }]);\r\n      break;\r\n     case 2:\r\n      $2=new List.T({\r\n       $:1,\r\n       $0:$3[0],\r\n       $1:LayoutEngineModule.doubleQuote($3[1])\r\n      });\r\n      break;\r\n     case 3:\r\n      throw new MatchFailureException.New(\"D:\\\\Abe\\\\CIPHERWorkspace\\\\FSharpStation\\\\projects\\\\FSharpStation\\\\src\\\\FSharpStation.fs\",5792,38);\r\n    }\r\n    return $2;\r\n  }\r\n };\r\n LayoutEngineModule.variableSplitter=function(vertical,min,value,max,doc1,doc2)\r\n {\r\n  return Doc.Element(\"wcomp-splitter\",List.ofSeq(Seq$1.delay(function()\r\n  {\r\n   return Seq$1.append(vertical?[AttrProxy.Create(\"vertical\",\"\")]:[],Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append([AttrProxy.Create(\"min\",Global.String(min))],Seq$1.delay(function()\r\n    {\r\n     return Seq$1.append([AttrProxy.Create(\"value\",Global.String(value))],Seq$1.delay(function()\r\n     {\r\n      return[AttrProxy.Create(\"max\",Global.String(max))];\r\n     }));\r\n    }));\r\n   }));\r\n  })),List.ofArray([doc1,doc2]));\r\n };\r\n LayoutEngineModule.fixedSplitter=function(vertical,pixel,first,doc1,doc2)\r\n {\r\n  var sizes,b,p,i,b$1,p$1,i$1;\r\n  sizes=(((first?Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1($2.toFixed(6)+\"px calc(100% - \"+$3.toFixed(6)+\"px)\");\r\n  }):Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"calc(100% - \"+$2.toFixed(6)+\"px) \"+$3.toFixed(6)+\"px\");\r\n  }))(Global.id))(pixel))(pixel);\r\n  return vertical?(b=ProviderBuilder.Make().WithHole({\r\n   $:1,\r\n   $0:\"partsizes\",\r\n   $1:sizes\r\n  }).WithHole({\r\n   $:0,\r\n   $0:\"first\",\r\n   $1:doc1\r\n  }).WithHole({\r\n   $:0,\r\n   $0:\"second\",\r\n   $1:doc2\r\n  }),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.fixedsplitterver(p[0])),(b.i=i,i)))).get_Doc():(b$1=ProviderBuilder.Make().WithHole({\r\n   $:1,\r\n   $0:\"partsizes\",\r\n   $1:sizes\r\n  }).WithHole({\r\n   $:0,\r\n   $0:\"first\",\r\n   $1:doc1\r\n  }).WithHole({\r\n   $:0,\r\n   $0:\"second\",\r\n   $1:doc2\r\n  }),(p$1=Handler$1.CompleteHoles(b$1.k,b$1.h,[]),(i$1=new TemplateInstance.New(p$1[1],FSharpStation_Templates.fixedsplitterhor(p$1[0])),(b$1.i=i$1,i$1)))).get_Doc();\r\n };\r\n LayoutEngineModule.Measures$1=function(a)\r\n {\r\n  var a$1,$1,a$2,$2,a$3,$3,a$4,a$5,a$6;\r\n  return a.$==1?(a$1=String.splitByChar(\"-\",a.$0),!Unchecked.Equals(a$1,null)&&a$1.length===1&&(a$2=(ParseO.Double())(Arrays.get(a$1,0)),a$2!=null&&a$2.$==1&&($1=a$2.$0,true))?{\r\n   $:1,\r\n   $0:new Measures({\r\n    $:0,\r\n    $0:$1,\r\n    $1:true\r\n   })\r\n  }:!Unchecked.Equals(a$1,null)&&a$1.length===2&&(Arrays.get(a$1,0)===\"\"&&(a$3=(ParseO.Double())(Arrays.get(a$1,1)),a$3!=null&&a$3.$==1&&($2=a$3.$0,true)))?{\r\n   $:1,\r\n   $0:new Measures({\r\n    $:0,\r\n    $0:$2,\r\n    $1:false\r\n   })\r\n  }:!Unchecked.Equals(a$1,null)&&a$1.length===3&&(a$4=(ParseO.Double())(Arrays.get(a$1,0)),a$4!=null&&a$4.$==1&&(a$5=(ParseO.Double())(Arrays.get(a$1,1)),a$5!=null&&a$5.$==1&&(a$6=(ParseO.Double())(Arrays.get(a$1,2)),a$6!=null&&a$6.$==1&&($3=[a$6.$0,a$4.$0,a$5.$0],true))))?{\r\n   $:1,\r\n   $0:new Measures({\r\n    $:1,\r\n    $0:$3[1],\r\n    $1:$3[2],\r\n    $2:$3[0]\r\n   })\r\n  }:null):null;\r\n };\r\n LayoutEngineModule.splitInTwo=function(ch)\r\n {\r\n  var f;\r\n  f=LayoutEngineModule.splitChar(ch);\r\n  return function(x)\r\n  {\r\n   return Arrays.ofSeq(f(x));\r\n  };\r\n };\r\n LayoutEngineModule.splitSemiColon=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.splitSemiColon;\r\n };\r\n LayoutEngineModule.splitChar=function(ch)\r\n {\r\n  function f(s)\r\n  {\r\n   return String.splitByChar(ch,s);\r\n  }\r\n  function g(s)\r\n  {\r\n   return Seq$1.map(String.trim,s);\r\n  }\r\n  return function(x)\r\n  {\r\n   return g(f(x));\r\n  };\r\n };\r\n LayoutEngineModule.Var=function(a)\r\n {\r\n  var $1,$2,$3,$4,$5,$6;\r\n  return a.$==1&&(a.$0===\"Var\"&&($1=a.$0,true))?{\r\n   $:0,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"Doc\"&&($2=a.$0,true))?{\r\n   $:1,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"View\"&&($3=a.$0,true))?{\r\n   $:2,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"ViewJS\"&&($4=a.$0,true))?{\r\n   $:3,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"Docs\"&&($5=a.$0,true))?{\r\n   $:4,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"Action\"&&($6=a.$0,true))?{\r\n   $:5,\r\n   $0:null\r\n  }:{\r\n   $:6,\r\n   $0:null\r\n  };\r\n };\r\n LayoutEngineModule.PlugIn=function(a)\r\n {\r\n  var $1,$2,$3,$4,$5,$6;\r\n  return a.$==1&&(a.$0===\"PlugIn\"&&($1=a.$0,true))?{\r\n   $:0,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"Button\"&&($2=a.$0,true))?{\r\n   $:1,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"input\"&&($3=a.$0,true))?{\r\n   $:2,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"textarea\"&&($4=a.$0,true))?{\r\n   $:3,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"select\"&&($5=a.$0,true))?{\r\n   $:4,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"Actions\"&&($6=a.$0,true))?{\r\n   $:5,\r\n   $0:null\r\n  }:{\r\n   $:6,\r\n   $0:null\r\n  };\r\n };\r\n LayoutEngineModule.Vertical=function(a)\r\n {\r\n  var $1,$2,$3,$4,$5,a$1;\r\n  return a.$==1&&(a.$0===\"vertical\"&&($1=a.$0,true))?{\r\n   $:0,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"horizontal\"&&($2=a.$0,true))?{\r\n   $:1,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"layout\"&&($3=a.$0,true))?{\r\n   $:2,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"grid\"&&($4=a.$0,true))?{\r\n   $:3,\r\n   $0:null\r\n  }:a.$==1&&(a.$0===\"template\"&&($5=a.$0,true))?{\r\n   $:4,\r\n   $0:null\r\n  }:(a$1=LayoutEngineModule.Identifier(a),a$1!=null&&a$1.$==1?{\r\n   $:5,\r\n   $0:a$1.$0\r\n  }:{\r\n   $:6,\r\n   $0:null\r\n  });\r\n };\r\n LayoutEngineModule.I=function(a)\r\n {\r\n  var a$1;\r\n  a$1=LayoutEngineModule.Identifier(a);\r\n  return a$1!=null&&a$1.$==1?{\r\n   $:1,\r\n   $0:a$1.$0\r\n  }:null;\r\n };\r\n LayoutEngineModule.Identifier=function(a)\r\n {\r\n  var $1,a$1,t;\r\n  return a.$==1&&(a$1=LibraryJS.REGEX$1(\"^[$a-zA-Z_][0-9a-zA-Z_\\\\.\\\\-$]*$\",\"\",a.$0),a$1!=null&&a$1.$==1&&((t=a$1.$0,!Unchecked.Equals(t,null)&&t.length===1)&&($1=Arrays.get(a$1.$0,0),true)))?{\r\n   $:1,\r\n   $0:$1\r\n  }:null;\r\n };\r\n LayoutEngineModule.S=function(a)\r\n {\r\n  return a.$==1?a.$0:a.$0;\r\n };\r\n P$1.run=function(pin,p)\r\n {\r\n  return AppFramework.run(pin,p.r);\r\n };\r\n NewLY.addNewLayoutAct=function(name,layout)\r\n {\r\n  var x;\r\n  NewLY.addLayout(!Unchecked.Equals(name,null)?name:\"Lyt_\"+Strings.Replace(Global.String(Guid.NewGuid()),\"-\",\"\"),(x=!Unchecked.Equals(layout,null)&&!Unchecked.Equals(name,null)?layout:\"\\r\\n                                        perc  Var \\\"50\\\"\\r\\n                                        perc2 Var \\\"50\\\"\\r\\n                                        gap  Var \\\"5px\\\"\\r\\n            \\r\\n                                        Ask1 div \\\"background:lightblue; height:100%\\\"\\r\\n                                        : Doc AF.InputLabel \\\"placeholder=Type percentage here...\\\" \\\"Percentage (%):\\\" perc\\r\\n            \\r\\n                                        Ask2a div \\\"background:pink; height:100%\\\"\\r\\n                                        : Doc AF.InputLabel \\\"placeholder=Type percentage here...\\\" \\\"Percentage (%):\\\" perc2\\r\\n            \\r\\n                                        Ask2b div \\\"background:lightgreen; height:100%\\\"\\r\\n                                        : Doc AF.InputLabel \\\"placeholder=Type gap here...\\\" \\\"Gap:\\\" gap\\r\\n            \\r\\n                                        dragSplitter  Action AF.DragSplitter \\\"@{PlugInName}.perc\\\"\\r\\n                                        dragSplitter2 Action AF.DragSplitter \\\"@{PlugInName}.perc2\\\"\\r\\n            \\r\\n                                        Ask2 template HSplitter1 \\\"height:100%\\\" \\\"gap:gap\\\" \\\"doc1: Ask2a; doc2:Ask2b\\\" \\\"perc:perc2\\\" \\\"MouseDown:dragSplitter2\\\"\\r\\n            \\r\\n                                        main div \\\"\\\"\\r\\n                                        :    template VSplitter1  \\\"height:100%\\\" \\\"gap:gap\\\" \\\"doc1: Ask1 ; doc2:Ask2 \\\" \\\"perc:perc \\\" \\\"MouseDown:dragSplitter \\\"\\r\\n            \\r\\n                                        split horizontal 0-50-100 AppFramework.AppFwkClient main\\r\\n                                    \",(String.unindentStr())(x)));\r\n };\r\n NewLY.addLayout=function(name,content)\r\n {\r\n  NewLY.addNewLayout(LayoutEngineModule.newLyt(new PlugInName({\r\n   $:0,\r\n   $0:name\r\n  }),content));\r\n };\r\n NewLY.addNewLayout=function(lyt)\r\n {\r\n  var parseW,l,errorsW,f,defsW,f$1,g,entries,g$1,l$1;\r\n  function c(a)\r\n  {\r\n   return a.$==1?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  }\r\n  function g$2(s)\r\n  {\r\n   return Strings.concat(\"\\n\",s);\r\n  }\r\n  function c$1(a)\r\n  {\r\n   return a.$==0?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  }\r\n  function f$2(s)\r\n  {\r\n   return Seq$1.append(entries,s);\r\n  }\r\n  parseW=View$1.Map((l=lyt.lytName,function(t)\r\n  {\r\n   return LayoutEngineModule.parseEntries(l,t);\r\n  }),lyt.lytDefinition.get_View());\r\n  errorsW=View$1.Map((f=function(s)\r\n  {\r\n   return Seq$1.choose(c,s);\r\n  },function(x)\r\n  {\r\n   return g$2(f(x));\r\n  }),parseW);\r\n  defsW=View$1.Map((f$1=function(s)\r\n  {\r\n   return Seq$1.choose(c$1,s);\r\n  },(g=NewLY.generateEntries(lyt.lytName),function(x)\r\n  {\r\n   return g(f$1(x));\r\n  })),parseW);\r\n  entries=List.ofArray([{\r\n   $:0,\r\n   $0:AppFramework.newVar(new PlgElemName({\r\n    $:0,\r\n    $0:\"Layout\"\r\n   }),lyt.lytDefinition)\r\n  },{\r\n   $:1,\r\n   $0:AppFramework.newViw(new PlgElemName({\r\n    $:0,\r\n    $0:\"ParseMsgs\"\r\n   }),errorsW)\r\n  }]);\r\n  View$1.Sink((g$1=(l$1=lyt.lytName,function(e)\r\n  {\r\n   LayoutEngineModule.refreshEntries(l$1,e);\r\n  }),function(x)\r\n  {\r\n   return g$1(f$2(x));\r\n  }),defsW);\r\n };\r\n NewLY.generateEntries=function(lytN)\r\n {\r\n  function c($1,$2)\r\n  {\r\n   var x,x$1,x$2,x$3,x$4,x$5,x$6,x$7,x$8,x$9,x$10,x$11,x$12;\r\n   return $2.$==0?$2.$0.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x=(NewLY.defButtonM())([lytN,$1,$2.$0.$0.$0,$2.$0.$0.$1,$2.$0.$0.$2]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x))\r\n    }\r\n   }:$2.$0.$==2?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$1=(NewLY.defInputM())([lytN,$1,$2.$0.$0.$0,$2.$0.$0.$1]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$1))\r\n    }\r\n   }:$2.$0.$==3?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$2=(NewLY.defTextAreaM())([lytN,$1,$2.$0.$0.$0,$2.$0.$0.$1]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$2))\r\n    }\r\n   }:$2.$0.$==5?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$3=(NewLY.defConcatM())([lytN,$1,$2.$0.$0.$0]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$3))\r\n    }\r\n   }:$2.$0.$==6?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$4=(NewLY.defElementM())([lytN,$1,$2.$0.$0.$0,$2.$0.$0.$1,$2.$0.$0.$2]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$4))\r\n    }\r\n   }:$2.$0.$==4?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$5=(NewLY.defDocFM())([lytN,$1,$2.$0.$0.$0,$2.$0.$0.$1]),AppFramework.newDocL(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$5))\r\n    }\r\n   }:$2.$0.$==7?{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$6=(NewLY.defTemplateM())([lytN,$1,$2.$0.$0]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$6))\r\n    }\r\n   }:{\r\n    $:1,\r\n    $0:{\r\n     $:2,\r\n     $0:(x$7=(NewLY.defSplitterM())([lytN,$1,$2.$0.$0.$0,$2.$0.$0.$1,$2.$0.$0.$2,$2.$0.$0.$3]),AppFramework.newDoc0(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$7))\r\n    }\r\n   }:$2.$==1?{\r\n    $:1,\r\n    $0:{\r\n     $:3,\r\n     $0:(x$8=(NewLY.defActionM())([lytN,$1,$2.$0.$0,$2.$0.$1]),AppFramework.newActF(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$8))\r\n    }\r\n   }:$2.$==2?{\r\n    $:1,\r\n    $0:{\r\n     $:3,\r\n     $0:(x$9=(NewLY.defActionsM())([lytN,$1,$2.$0.$0]),AppFramework.newActF(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$9))\r\n    }\r\n   }:$2.$==4?{\r\n    $:1,\r\n    $0:{\r\n     $:1,\r\n     $0:(x$10=(NewLY.defViewM())([lytN,$1,$2.$0.$0]),AppFramework.newViw(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$10))\r\n    }\r\n   }:$2.$==5?{\r\n    $:1,\r\n    $0:{\r\n     $:1,\r\n     $0:(x$11=(NewLY.defViewJSM())([lytN,$1,$2.$0.$0]),AppFramework.newViw(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$11))\r\n    }\r\n   }:$2.$==7?null:$2.$==6?null:{\r\n    $:1,\r\n    $0:{\r\n     $:0,\r\n     $0:(x$12=NewLY.defVarM(lytN,$1,$2.$0.$0),AppFramework.newVar(new PlgElemName({\r\n      $:0,\r\n      $0:$1\r\n     }),x$12))\r\n    }\r\n   };\r\n  }\r\n  return function(s)\r\n  {\r\n   return Seq$1.choose(function($1)\r\n   {\r\n    return c($1[0],$1[1]);\r\n   },s);\r\n  };\r\n };\r\n NewLY.defTemplateM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defTemplateM;\r\n };\r\n NewLY.defSplitterM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defSplitterM;\r\n };\r\n NewLY.defViewJSM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defViewJSM;\r\n };\r\n NewLY.defViewM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defViewM;\r\n };\r\n NewLY.defConcatM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defConcatM;\r\n };\r\n NewLY.defElementM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defElementM;\r\n };\r\n NewLY.defTextAreaM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defTextAreaM;\r\n };\r\n NewLY.defInputM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defInputM;\r\n };\r\n NewLY.defButtonM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defButtonM;\r\n };\r\n NewLY.defActionsM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defActionsM;\r\n };\r\n NewLY.defActionM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defActionM;\r\n };\r\n NewLY.defDocFM=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defDocFM;\r\n };\r\n NewLY.defVarM=function(l,n,i)\r\n {\r\n  var v;\r\n  v=(NewLY.defVarM0())([l,n,NewLY.initVal()]);\r\n  v.Get()===NewLY.initVal()?v.Set(i):void 0;\r\n  return v;\r\n };\r\n NewLY.defVarM0=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defVarM0;\r\n };\r\n NewLY.initVal=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.initVal;\r\n };\r\n NewLY.defTemplate=function(lytN,n,tmpDef)\r\n {\r\n  var b;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.nodeRefToDocD(),function(a)\r\n   {\r\n    return b.Bind(NewLY.varRefToVarD(),function(a$1)\r\n    {\r\n     return b.Bind(AppFramework.extractTextD(),function(a$2)\r\n     {\r\n      return b.Bind(AppFramework.extractAtsD(),function(a$3)\r\n      {\r\n       return b.Bind(NewLY.actRefToActD(),function(a$4)\r\n       {\r\n        return b.Bind(NewLY.getParam2D(),function(a$5)\r\n        {\r\n         return b.Return(AppFramework.makeAViewDoc0(function()\r\n         {\r\n          var attrs,x,s;\r\n          function eventAct(act,el,ev)\r\n          {\r\n           return AppFramework.callFunction(el,ev,act.actFunction);\r\n          }\r\n          try\r\n          {\r\n           attrs=a$3(a$5(tmpDef.attrs));\r\n           Templates.LoadLocalTemplates(\"local\");\r\n           x=(Seq$1.isEmpty(attrs)?Global.id:(s=[{\r\n            $:3,\r\n            $0:\"attrs\",\r\n            $1:AttrProxy.Concat(attrs)\r\n           }],function(s$1)\r\n           {\r\n            return Seq$1.append(s,s$1);\r\n           }))(Seq$1.delay(function()\r\n           {\r\n            function m(nm,vr)\r\n            {\r\n             return{\r\n              $:8,\r\n              $0:nm.toLowerCase(),\r\n              $1:a$1(vr)\r\n             };\r\n            }\r\n            return Seq$1.append(Seq$1.map(function($1)\r\n            {\r\n             return m($1[0],$1[1]);\r\n            },tmpDef.vars),Seq$1.delay(function()\r\n            {\r\n             function m$1(nm,wr)\r\n             {\r\n              return{\r\n               $:2,\r\n               $0:nm.toLowerCase(),\r\n               $1:a$2(a$5(wr))\r\n              };\r\n             }\r\n             return Seq$1.append(Seq$1.map(function($1)\r\n             {\r\n              return m$1($1[0],$1[1]);\r\n             },tmpDef.views),Seq$1.delay(function()\r\n             {\r\n              function m$2(nm,nr)\r\n              {\r\n               return{\r\n                $:0,\r\n                $0:nm.toLowerCase(),\r\n                $1:a({\r\n                 $:1,\r\n                 $0:nr\r\n                })\r\n               };\r\n              }\r\n              return Seq$1.append(Seq$1.map(function($1)\r\n              {\r\n               return m$2($1[0],$1[1]);\r\n              },tmpDef.docs),Seq$1.delay(function()\r\n              {\r\n               function m$3(nm,ar)\r\n               {\r\n                var $1;\r\n                return{\r\n                 $:4,\r\n                 $0:nm.toLowerCase(),\r\n                 $1:($1=a$4(ar),(Runtime.Curried3(eventAct))($1))\r\n                };\r\n               }\r\n               return Seq$1.map(function($1)\r\n               {\r\n                return m$3($1[0],$1[1]);\r\n               },tmpDef.actions);\r\n              }));\r\n             }));\r\n            }));\r\n           }));\r\n           return Templates.NamedTemplate(\"local\",{\r\n            $:1,\r\n            $0:tmpDef.tmpName.toLowerCase()\r\n           },x);\r\n          }\r\n          catch(e)\r\n          {\r\n           return Doc.TextNode(e.message);\r\n          }\r\n         }));\r\n        });\r\n       });\r\n      });\r\n     });\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defSplitter=function(lytN,n,v,m,a,a$1)\r\n {\r\n  var l,r,b;\r\n  l=a.$0;\r\n  r=a$1.$0;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(Extract0.getDocFromTextTypesD(),function(a$2)\r\n   {\r\n    return b.Return(function()\r\n    {\r\n     function getDoc(d)\r\n     {\r\n      return AppFramework.makeAViewDoc(function()\r\n      {\r\n       return a$2(List.ofArray([NewLY.itemRefToTextType(d)]));\r\n      });\r\n     }\r\n     return m.$==1?LayoutEngineModule.variableSplitter(v,m.$0,m.$1,m.$2,getDoc(l),getDoc(r)):LayoutEngineModule.fixedSplitter(v,m.$0,m.$1,getDoc(l),getDoc(r));\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defButton=function(lytN,n,ac,attrs,tx)\r\n {\r\n  return AppFramework.makeAViewDoc0(function()\r\n  {\r\n   return AppFramework.errDocf(function($1)\r\n   {\r\n    return $1(\"Button deprecated use button \\\"click=@{Action}\\\"\");\r\n   });\r\n  });\r\n };\r\n NewLY.defDocF=function(lytN,n,a,ds)\r\n {\r\n  var dc,b;\r\n  dc=a.$0;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.currentPlugInNameD(),function(a$1)\r\n   {\r\n    return b.Bind(NewLY.getParam2D(),function(a$2)\r\n    {\r\n     var p,x,lyt,elem;\r\n     function passParm($1,$2)\r\n     {\r\n      var a$3,f1;\r\n      return $1.$==0?$2.$==0?$1:{\r\n       $:0,\r\n       $0:$1.$0\r\n      }:$1.$==2?$2.$==1?(a$3=$2.$0,(f1=$1.$0,{\r\n       $:1,\r\n       $0:function()\r\n       {\r\n        return f1(a$2(a$3));\r\n       }\r\n      })):$1:$1.$==3?$2.$==1?passParm({\r\n       $:2,\r\n       $0:$1.$0(a$2($2.$0)),\r\n       $1:$1.$2\r\n      },$2.$1):$1:$1.$==4?$2.$==1?passParm({\r\n       $:3,\r\n       $0:$1.$0(a$2($2.$0)),\r\n       $1:$1.$2,\r\n       $2:$1.$3\r\n      },$2.$1):$1:$1.$==5?$2.$==1?passParm({\r\n       $:4,\r\n       $0:$1.$0(a$2($2.$0)),\r\n       $1:$1.$2,\r\n       $2:$1.$3,\r\n       $3:$1.$4\r\n      },$2.$1):$1:$1.$==6?$2.$==1?passParm({\r\n       $:5,\r\n       $0:$1.$0(a$2($2.$0)),\r\n       $1:$1.$2,\r\n       $2:$1.$3,\r\n       $3:$1.$4,\r\n       $4:$1.$5\r\n      },$2.$1):$1:{\r\n       $:0,\r\n       $0:$1.$0()\r\n      };\r\n     }\r\n     p=(x=NewLY.itemRefToString(dc),(AppFramework.splitName(a$1))(x));\r\n     lyt=p[0];\r\n     elem=p[1];\r\n     return b.Return(Lazy.Create(function()\r\n     {\r\n      var o,o$1;\r\n      o=(o$1=AppFramework.tryGetDoc(lyt,elem),o$1==null?null:{\r\n       $:1,\r\n       $0:passParm(o$1.$0.docDoc.f(),ds)\r\n      });\r\n      return o==null?{\r\n       $:0,\r\n       $0:AppFramework.errDoc((function($1)\r\n       {\r\n        return function($2)\r\n        {\r\n         return $1(\"Missing doc: \"+FSharpStation_GeneratedPrintf.p$1($2));\r\n        };\r\n       }(Global.id))(dc))\r\n      }:o.$0;\r\n     }));\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defConcat=function(lytN,n,docs)\r\n {\r\n  var b;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.nodeRefToDocD(),function(a)\r\n   {\r\n    return b.Return(AppFramework.makeAViewDoc0(function()\r\n    {\r\n     return Doc.Concat(Seq$1.map(a,docs));\r\n    }));\r\n   });\r\n  })));\r\n };\r\n NewLY.defElement=function(lytN,n,elem,attrs,docs)\r\n {\r\n  var b;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.nodeRefToDocD(),function(a)\r\n   {\r\n    return b.Bind(AppFramework.extractAtsD(),function(a$1)\r\n    {\r\n     return b.Bind(NewLY.getParam2D(),function(a$2)\r\n     {\r\n      return b.Return(AppFramework.makeAViewDoc0(function()\r\n      {\r\n       try\r\n       {\r\n        return Doc.Element(elem,a$1(a$2(attrs)),Seq$1.map(a,docs));\r\n       }\r\n       catch(e)\r\n       {\r\n        return Doc.TextNode(e.message);\r\n       }\r\n      }));\r\n     });\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defTextArea=function(lytN,n,v,attrs)\r\n {\r\n  return AppFramework.makeAViewDoc0(function()\r\n  {\r\n   return AppFramework.errDocf(function($1)\r\n   {\r\n    return $1(\"TextArea deprecated use AF.TextArea\");\r\n   });\r\n  });\r\n };\r\n NewLY.defInput=function(lytN,n,v,attrs)\r\n {\r\n  return AppFramework.makeAViewDoc0(function()\r\n  {\r\n   return AppFramework.errDocf(function($1)\r\n   {\r\n    return $1(\"input deprecated use AF.Input\");\r\n   });\r\n  });\r\n };\r\n NewLY.defViewJS=function(lytN,n,ps)\r\n {\r\n  var b;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.currentPlugInNameD(),function()\r\n   {\r\n    return b.Bind(NewLY.getParamD(),function(a)\r\n    {\r\n     return b.Return(View$1.Bind(function()\r\n     {\r\n      try\r\n      {\r\n       return View$1.Map(function(ar)\r\n       {\r\n        try\r\n        {\r\n         return!Unchecked.Equals(ar,null)&&ar.length===0?\"No JS function specified\":!Unchecked.Equals(ar,null)&&ar.length===1?Global.String(Global[\"eval\"](Arrays.get(ar,0))):Global.String(Global[\"eval\"](Arrays.get(ar,0)).apply(null,Slice.array(ar,{\r\n          $:1,\r\n          $0:1\r\n         },null)));\r\n        }\r\n        catch(e)\r\n        {\r\n         return e.message;\r\n        }\r\n       },View$1.Map(Arrays.ofSeq,View.traverseSeq(a,ps)));\r\n      }\r\n      catch(e)\r\n      {\r\n       return View$1.Const(e.message);\r\n      }\r\n     },AppFramework.baseView()));\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defView=function(lytN,n,ps)\r\n {\r\n  var b;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.currentPlugInNameD(),function()\r\n   {\r\n    return b.Bind(NewLY.getParam2D(),function(a)\r\n    {\r\n     return b.Bind(AppFramework.extractTextD(),function(a$1)\r\n     {\r\n      return b.Return(View$1.Bind(function()\r\n      {\r\n       function g(s)\r\n       {\r\n        return Strings.concat(\"\",s);\r\n       }\r\n       return View$1.Map(function(x)\r\n       {\r\n        return g(Arrays.ofSeq(x));\r\n       },View.traverseSeq(function(x)\r\n       {\r\n        return a$1(a(x));\r\n       },ps));\r\n      },AppFramework.baseView()));\r\n     });\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defActions=function(lytN,n,acs)\r\n {\r\n  var b;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.currentPlugInNameD(),function(a)\r\n   {\r\n    return b.Bind(NewLY.getParamTextD(),function()\r\n    {\r\n     return b.Return({\r\n      $:0,\r\n      $0:function()\r\n      {\r\n       Seq$1.iter(function(a$1)\r\n       {\r\n        var r,o,o$1,t;\r\n        r=NewLY.itemRefToString(a$1.$0);\r\n        AppFramework.callFunction(null,null,(o=(o$1=(t=(AppFramework.splitName(a))(r),AppFramework.tryGetAct(t[0],t[1])),o$1==null?null:{\r\n         $:1,\r\n         $0:o$1.$0.actFunction\r\n        }),o==null?{\r\n         $:0,\r\n         $0:function()\r\n         {\r\n          ((function($1)\r\n          {\r\n           return function($2)\r\n           {\r\n            return $1(\"Action Not Found \"+Utils.toSafe($2));\r\n           };\r\n          }(function(s)\r\n          {\r\n           console.log(s);\r\n          }))(r));\r\n         }\r\n        }:o.$0));\r\n       },acs);\r\n      }\r\n     });\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defAction=function(lytN,n,a,ps)\r\n {\r\n  var ac,b;\r\n  ac=a.$0;\r\n  return AppFramework.run(lytN,(b=Depend.depend(),b.Delay(function()\r\n  {\r\n   return b.Bind(NewLY.currentPlugInNameD(),function(a$1)\r\n   {\r\n    return b.Bind(NewLY.getParamTextD(),function(a$2)\r\n    {\r\n     var o,t,$1,$2,r,o$1,act,$3,f,t1,f$1,t1$1,t2,f$2,t1$2;\r\n     r=NewLY.itemRefToString(ac);\r\n     o$1=(t=(AppFramework.splitName(a$1))(r),AppFramework.tryGetAct(t[0],t[1]));\r\n     if(o$1==null)\r\n      o=null;\r\n     else\r\n      {\r\n       act=o$1.$0;\r\n       if(ps.$===0)\r\n        $1=act.actFunction;\r\n       else\r\n        {\r\n         $3=act.actFunction;\r\n         switch($3.$==1?ps.$==1?ps.$1.$==0?($2=[$3.$0,ps.$0],0):3:3:$3.$==2?ps.$==1?ps.$1.$==0?($2=[$3.$0,$3.$2,ps.$0],2):ps.$1.$1.$==0?($2=[$3.$0,ps.$0,ps.$1.$0],1):3:3:3)\r\n         {\r\n          case 0:\r\n           $1=(f=$2[0],(t1=$2[1],{\r\n            $:0,\r\n            $0:function()\r\n            {\r\n             (a$2(t1))(f);\r\n            }\r\n           }));\r\n           break;\r\n          case 1:\r\n           $1=(f$1=$2[0],(t1$1=$2[1],(t2=$2[2],{\r\n            $:0,\r\n            $0:function()\r\n            {\r\n             (a$2(t1$1))(function(p1)\r\n             {\r\n              (a$2(t2))(f$1(p1));\r\n             });\r\n            }\r\n           })));\r\n           break;\r\n          case 2:\r\n           $1=(f$2=$2[0],(t1$2=$2[2],{\r\n            $:1,\r\n            $0:function(p2)\r\n            {\r\n             (a$2(t1$2))(function(p1)\r\n             {\r\n              (f$2(p1))(p2);\r\n             });\r\n            },\r\n            $1:$2[1]\r\n           }));\r\n           break;\r\n          case 3:\r\n           $1={\r\n            $:0,\r\n            $0:function()\r\n            {\r\n             ((((Runtime.Curried(function($4,$5,$6,$7)\r\n             {\r\n              return $4(\"Parameters do not coincide for Action \"+Utils.toSafe($5)+\" \"+Utils.printList(function($8)\r\n              {\r\n               return FSharpStation_GeneratedPrintf.p$17($8);\r\n              },$6)+\" \"+GeneratedPrintf.p$2($7));\r\n             },4))(function(s)\r\n             {\r\n              console.log(s);\r\n             }))(r))(ps))(act);\r\n            }\r\n           };\r\n           break;\r\n         }\r\n        }\r\n       o={\r\n        $:1,\r\n        $0:$1\r\n       };\r\n      }\r\n     return b.Return(o==null?{\r\n      $:0,\r\n      $0:function()\r\n      {\r\n       ((function($4)\r\n       {\r\n        return function($5)\r\n        {\r\n         return $4(\"Action Not Found \"+Utils.toSafe($5));\r\n        };\r\n       }(function(s)\r\n       {\r\n        console.log(s);\r\n       }))(r));\r\n      }\r\n     }:o.$0);\r\n    });\r\n   });\r\n  })));\r\n };\r\n NewLY.defVar=function(lytN,n,v)\r\n {\r\n  return Var$1.Create$1(v);\r\n };\r\n NewLY.getParamTextD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getParamTextD;\r\n };\r\n NewLY.getParam2D=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getParam2D;\r\n };\r\n NewLY.itemRefToAbsolute=function(lyt)\r\n {\r\n  function f(a)\r\n  {\r\n   return a.$==1?[a.$0,a.$1]:[lyt,a.$0];\r\n  }\r\n  function g(a,b)\r\n  {\r\n   return(((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(Utils.toSafe($2)+\".\"+Utils.toSafe($3));\r\n   }))(Global.id))(a))(b);\r\n  }\r\n  return function(x)\r\n  {\r\n   return g.apply(null,f(x));\r\n  };\r\n };\r\n NewLY.getParamD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getParamD;\r\n };\r\n NewLY.actRefToActD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.actRefToActD;\r\n };\r\n NewLY.varRefToVarD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.varRefToVarD;\r\n };\r\n NewLY.nodeRefToDocD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.nodeRefToDocD;\r\n };\r\n NewLY.ActRVs=function(a)\r\n {\r\n  return List.ofArray([{\r\n   $:1,\r\n   $0:{\r\n    $:0,\r\n    $0:a.$0\r\n   }\r\n  }]);\r\n };\r\n NewLY.textValToTextType=function(a)\r\n {\r\n  var $1;\r\n  return(a.$==3?($1=a.$0.$0,false):a.$==4?($1=a.$0.$0,false):a.$==1?($1=a.$0.$0,false):a.$==2?($1=a.$0.$0,false):true)?{\r\n   $:0,\r\n   $0:a.$0\r\n  }:NewLY.itemRefToTextType($1);\r\n };\r\n NewLY.itemRefToString=function(a)\r\n {\r\n  return a.$==1?(((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(Utils.toSafe($2)+\".\"+Utils.toSafe($3));\r\n  }))(Global.id))(a.$0))(a.$1):a.$0;\r\n };\r\n NewLY.itemRefToTextType=function(a)\r\n {\r\n  return a.$==1?{\r\n   $:1,\r\n   $0:(((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(Utils.toSafe($2)+\".\"+Utils.toSafe($3));\r\n   }))(Global.id))(a.$0))(a.$1)\r\n  }:{\r\n   $:1,\r\n   $0:a.$0\r\n  };\r\n };\r\n NewLY.currentPlugInNameD=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPlugInNameD$1;\r\n };\r\n NewLY.currentPlugInNameDef=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPlugInNameDef$1;\r\n };\r\n NewLY.pb=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.pb;\r\n };\r\n NewLY.pa=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.pa;\r\n };\r\n NewLY.aV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.aV;\r\n };\r\n NewLY.concat=function(a,b)\r\n {\r\n  return(((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"Concat(\"+Global.String($2)+\", \"+$3.toFixed(6)+\")\");\r\n  }))(Global.id))(a))(b);\r\n };\r\n LibraryJS.rexEmail=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rexEmail;\r\n };\r\n LibraryJS.rexGuid=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rexGuid;\r\n };\r\n LibraryJS.REGEX$1=function(expr,opt,value)\r\n {\r\n  var m;\r\n  return value===null?null:(m=(new Global.String(value)).match(new Global.RegExp(expr,opt)),Unchecked.Equals(m,null)?null:!Unchecked.Equals(m,null)&&m.length===0?null:{\r\n   $:1,\r\n   $0:m\r\n  });\r\n };\r\n FsiAgent.extractConfig=function(workDir,a)\r\n {\r\n  var fsCode,x;\r\n  fsCode=a.$0;\r\n  return{\r\n   $:0,\r\n   $0:FsCodeModule.getSourceDir(workDir,String.splitByChar(\"\\n\",fsCode)),\r\n   $1:(x=new FSharpSet.New(String.splitByChar(\" \",FsCodeModule.extractDefines({\r\n    $:0,\r\n    $0:fsCode\r\n   }))),new FSharpSet.New$1(BalancedTree.OfSeq(Seq$1.append(new FSharpSet.New(List.ofArray([\" --nologo\",\"--quiet \"])),x))))\r\n  };\r\n };\r\n Address=WebSockets.Address=Runtime.Class({\r\n  get_txt:function()\r\n  {\r\n   return this.$0;\r\n  }\r\n },null,Address);\r\n BrokerRequest.BRGetProcessId={\r\n  $:1\r\n };\r\n BrokerRequest.BRGetConnections={\r\n  $:0\r\n };\r\n MessageType.MsgRequestForEcho={\r\n  $:5\r\n };\r\n MessageType.MsgRequestForId={\r\n  $:4\r\n };\r\n MessageType.MsgFromBroker={\r\n  $:3\r\n };\r\n MessageType.MsgReply={\r\n  $:2\r\n };\r\n MessageType.MsgRequest={\r\n  $:1\r\n };\r\n MessageType.MsgInformation={\r\n  $:0\r\n };\r\n BrokerMessage.BMReceiverCantReply={\r\n  $:4\r\n };\r\n BrokerMessage.BMOnlyBrokerShouldUse={\r\n  $:1\r\n };\r\n BrokerMessage.BMOk={\r\n  $:0\r\n };\r\n Replier.Receiver={\r\n  $:2\r\n };\r\n Replier.Broker={\r\n  $:1\r\n };\r\n Replier.NoReply={\r\n  $:0\r\n };\r\n MessageGeneric.New=function(from,destination,msgType,subtype,id,payload,replier)\r\n {\r\n  return{\r\n   from:from,\r\n   destination:destination,\r\n   msgType:msgType,\r\n   subtype:subtype,\r\n   id:id,\r\n   payload:payload,\r\n   replier:replier\r\n  };\r\n };\r\n ClientTypeFSharp.FSharp={\r\n  $:0\r\n };\r\n ClientTypeFSStation.FSStation={\r\n  $:0\r\n };\r\n ClientTypeJScript.JScript={\r\n  $:0\r\n };\r\n Handler=ReplyHandler.Handler=Runtime.Class({\r\n  Cancel:function(key,cnl)\r\n  {\r\n   var o;\r\n   o=this.waitingAgent;\r\n   o.mailbox.AddLast({\r\n    $:3,\r\n    $0:key,\r\n    $1:cnl\r\n   });\r\n   o.resume();\r\n  },\r\n  Raise:function(key,exn)\r\n  {\r\n   var o;\r\n   o=this.waitingAgent;\r\n   o.mailbox.AddLast({\r\n    $:2,\r\n    $0:key,\r\n    $1:exn\r\n   });\r\n   o.resume();\r\n  },\r\n  Reply:function(key,msg)\r\n  {\r\n   var o;\r\n   o=this.waitingAgent;\r\n   o.mailbox.AddLast({\r\n    $:1,\r\n    $0:key,\r\n    $1:msg\r\n   });\r\n   o.resume();\r\n  },\r\n  Add:function(key,fns)\r\n  {\r\n   var o;\r\n   o=this.waitingAgent;\r\n   o.mailbox.AddLast({\r\n    $:0,\r\n    $0:key,\r\n    $1:fns\r\n   });\r\n   o.resume();\r\n  }\r\n },Obj,Handler);\r\n Handler.New=Runtime.Ctor(function(defProc)\r\n {\r\n  Obj.New.call(this);\r\n  this.waitingAgent=Mailbox.fold(Mailbox.defHandler,function($1,$2)\r\n  {\r\n   var msg,exn,cnl;\r\n   function exec(key,f,def)\r\n   {\r\n    var o,o$1;\r\n    o=(o$1=Map.TryFind(key,$1),o$1==null?null:{\r\n     $:1,\r\n     $0:f(o$1.$0)\r\n    });\r\n    o==null?def():void 0;\r\n    return $1.Remove(key);\r\n   }\r\n   return $2.$==1?(msg=$2.$1,exec($2.$0,function(t)\r\n   {\r\n    t[0](msg);\r\n   },function()\r\n   {\r\n    defProc(msg);\r\n   })):$2.$==2?(exn=$2.$1,exec($2.$0,function(t)\r\n   {\r\n    t[1](exn);\r\n   },Global.ignore)):$2.$==3?(cnl=$2.$1,exec($2.$0,function(t)\r\n   {\r\n    t[2](cnl);\r\n   },Global.ignore)):$1.Add($2.$0,$2.$1);\r\n  },new FSharpMap.New([]));\r\n },Handler);\r\n WSMessagingClient=WebSockets.WSMessagingClient=Runtime.Class({\r\n  sendMsg:function(msg)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return msg.replier.$===0?b.Bind$1($this.sendAndForget(msg),function()\r\n    {\r\n     return b.Return(\"\");\r\n    }):b.ReturnFrom$1($this.sendGetReply(msg));\r\n   }));\r\n  },\r\n  getProcessId:function()\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    var dst,p;\r\n    return b.Bind$1($this.sendGetReply((dst=WebSockets.MessageBrokerAddress(),(p=JSON.stringify((FSharpStation_JsonEncoder.j$9())(BrokerRequest.BRGetProcessId)),MessageGeneric.New(new Address({\r\n     $:0,\r\n     $0:\"\"\r\n    }),dst,MessageType.MsgRequest,\"\",Guid.NewGuid(),p,Replier.NoReply)))),function(a)\r\n    {\r\n     var m;\r\n     m=(FSharpStation_JsonDecoder.j$7())(JSON.parse(a));\r\n     return m.$==1?b.Return(m.$0):b.ReturnFrom({\r\n      $:1,\r\n      $0:new ResultMessage({\r\n       $:4,\r\n       $0:{\r\n        $:6,\r\n        $0:(function($1)\r\n        {\r\n         return function($2)\r\n         {\r\n          return $1(FSharpStation_GeneratedPrintf.p$33($2));\r\n         };\r\n        }(Global.id))(m)\r\n       }\r\n      })\r\n     });\r\n    });\r\n   }));\r\n  },\r\n  getListeners:function()\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    var dst,p;\r\n    return b.Bind$1($this.sendGetReply((dst=WebSockets.MessageBrokerAddress(),(p=JSON.stringify((FSharpStation_JsonEncoder.j$9())(BrokerRequest.BRGetConnections)),MessageGeneric.New(new Address({\r\n     $:0,\r\n     $0:\"\"\r\n    }),dst,MessageType.MsgRequest,\"\",Guid.NewGuid(),p,Replier.NoReply)))),function(a)\r\n    {\r\n     var m;\r\n     m=(FSharpStation_JsonDecoder.j$7())(JSON.parse(a));\r\n     return m.$==0?b.Return(m.$0):b.ReturnFrom({\r\n      $:1,\r\n      $0:new ResultMessage({\r\n       $:4,\r\n       $0:{\r\n        $:6,\r\n        $0:(function($1)\r\n        {\r\n         return function($2)\r\n         {\r\n          return $1(FSharpStation_GeneratedPrintf.p$33($2));\r\n         };\r\n        }(Global.id))(m)\r\n       }\r\n      })\r\n     });\r\n    });\r\n   }));\r\n  },\r\n  sendGetReply:function(msg)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind$1($this.sendAndReply(Replier.Receiver,msg),function(a)\r\n    {\r\n     var m;\r\n     return b.Bind((m=a.msgType,m.$==2?{\r\n      $:0,\r\n      $0:a.payload\r\n     }:m.$==3?{\r\n      $:1,\r\n      $0:new ResultMessage({\r\n       $:4,\r\n       $0:(FSharpStation_JsonDecoder.j$8())(JSON.parse(a.payload))\r\n      })\r\n     }:{\r\n      $:1,\r\n      $0:new ResultMessage({\r\n       $:4,\r\n       $0:{\r\n        $:5,\r\n        $0:a.msgType\r\n       }\r\n      })\r\n     }),function(a$1)\r\n     {\r\n      return b.Return(a$1);\r\n     });\r\n    });\r\n   }));\r\n  },\r\n  sendAndVerify:function(msg)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind$1($this.sendAndReply(Replier.Broker,msg),function(a)\r\n    {\r\n     var bm;\r\n     return b.Bind(a.msgType.$==3?(bm=(FSharpStation_JsonDecoder.j$8())(JSON.parse(a.payload)),bm.$===0?{\r\n      $:0,\r\n      $0:null\r\n     }:{\r\n      $:1,\r\n      $0:new ResultMessage({\r\n       $:4,\r\n       $0:bm\r\n      })\r\n     }):{\r\n      $:1,\r\n      $0:new ResultMessage({\r\n       $:4,\r\n       $0:{\r\n        $:5,\r\n        $0:a.msgType\r\n       }\r\n      })\r\n     },function()\r\n     {\r\n      return b.Return();\r\n     });\r\n    });\r\n   }));\r\n  },\r\n  sendAndReply:function(rpl,msg)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind$1($this.getServer(),function(a)\r\n    {\r\n     return Extensions[\"AsyncResultBuilder.ReturnFrom\"](b,Concurrency.FromContinuations(function($1,$2,$3)\r\n     {\r\n      var b$1;\r\n      $this.waiting.Add(msg.id,[$1,$2,$3]);\r\n      $this.postR(a,rpl,msg);\r\n      return $this.wsTimeout>0?Concurrency.Start((b$1=null,Concurrency.Delay(function()\r\n      {\r\n       return Concurrency.Bind(Concurrency.Sleep($this.wsTimeout),function()\r\n       {\r\n        $this.waiting.Raise(msg.id,new TimeoutException.New$1((((Runtime.Curried3(function($4,$5,$6)\r\n        {\r\n         return $4(\"Did not receive reply in \"+Global.String($5)+\" seconds for Message: \"+GeneratedPrintf.p$3($6));\r\n        }))(Global.id))($this.wsTimeout/1000>>0))(msg)));\r\n        return Concurrency.Zero();\r\n       });\r\n      })),null):null;\r\n     }));\r\n    });\r\n   }));\r\n  },\r\n  sendAndForget:function(msg)\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   b=Monads.asyncResult();\r\n   return b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind$1($this.getServer(),function(a)\r\n    {\r\n     $this.postR(a,Replier.NoReply,msg);\r\n     return b.Zero();\r\n    });\r\n   }));\r\n  },\r\n  postR:function(server,rpl,msg)\r\n  {\r\n   try\r\n   {\r\n    server.FsRoot_Library2_WebSockets_IServer$Post(WebSockets.replier(rpl,WebSockets.from(this.clientAddress,msg)));\r\n   }\r\n   catch(e)\r\n   {\r\n    this.serverO=null;\r\n    throw e;\r\n   }\r\n  },\r\n  getServer:function()\r\n  {\r\n   return this.checkServer.PostAndAsyncReply(function(reply)\r\n   {\r\n    return[reply,null];\r\n   },null);\r\n  },\r\n  connectToWebSocketServer:function()\r\n  {\r\n   var $this,b;\r\n   $this=this;\r\n   (function($1)\r\n   {\r\n    return $1(\"in connectToWebSocketServer\");\r\n   }(function(s)\r\n   {\r\n    console.log(s);\r\n   }));\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind((($this.connectStateful($this.wsEndPoint))($this.clientId))(function(server)\r\n    {\r\n     var b$1;\r\n     b$1=null;\r\n     return Concurrency.Delay(function()\r\n     {\r\n      return Concurrency.Return([0,function(state)\r\n      {\r\n       return function(wsmsg)\r\n       {\r\n        var b$2;\r\n        b$2=null;\r\n        return Concurrency.Delay(function()\r\n        {\r\n         return Concurrency.Combine(Concurrency.TryWith(Concurrency.Delay(function()\r\n         {\r\n          return wsmsg.$==2?((function($1)\r\n          {\r\n           return function($2)\r\n           {\r\n            return $1(\"WebSocket \"+Utils.toSafe($2)+\" connection open.\");\r\n           };\r\n          }(function(s)\r\n          {\r\n           console.log(s);\r\n          }))($this.clientId),$this.serverO={\r\n           $:1,\r\n           $0:server\r\n          },Concurrency.Zero()):wsmsg.$==3?((function($1)\r\n          {\r\n           return function($2)\r\n           {\r\n            return $1(\"WebSocket \"+Utils.toSafe($2)+\" connection closed.\");\r\n           };\r\n          }(function(s)\r\n          {\r\n           console.log(s);\r\n          }))($this.clientId),$this.close(),Concurrency.Zero()):wsmsg.$==1?((function($1)\r\n          {\r\n           return function($2)\r\n           {\r\n            return $1(\"WebSocket \"+Utils.toSafe($2)+\" connection error!\");\r\n           };\r\n          }(function(s)\r\n          {\r\n           console.log(s);\r\n          }))($this.clientId),Concurrency.Zero()):($this.processMessage(wsmsg.$0),Concurrency.Zero());\r\n         }),function(a)\r\n         {\r\n          (((Runtime.Curried3(function($1,$2,$3)\r\n          {\r\n           return $1(\"msg: \"+FSharpStation_GeneratedPrintf.p$37($2)+\" \\nexn:\"+Utils.prettyPrint($3));\r\n          }))(function(s)\r\n          {\r\n           console.log(s);\r\n          }))(wsmsg))(a);\r\n          return Concurrency.Zero();\r\n         }),Concurrency.Delay(function()\r\n         {\r\n          return Concurrency.Return(state);\r\n         }));\r\n        });\r\n       };\r\n      }]);\r\n     });\r\n    }),function()\r\n    {\r\n     (function($1)\r\n     {\r\n      return $1(\"connectToWebSocketServer with server\");\r\n     }(function(s)\r\n     {\r\n      console.log(s);\r\n     }));\r\n     return Concurrency.Zero();\r\n    });\r\n   });\r\n  },\r\n  processMessage:function(msg)\r\n  {\r\n   var $1,$this,m,m$1,f,x;\r\n   $this=this;\r\n   m=msg.msgType;\r\n   function g(m$2)\r\n   {\r\n    $this.reply(m$2);\r\n   }\r\n   function g$1(v)\r\n   {\r\n    return Concurrency.Return(v);\r\n   }\r\n   switch(m.$==2?0:m.$==0?1:m.$==1?2:m.$==5?3:m.$==4?4:0)\r\n   {\r\n    case 0:\r\n     this.processReply(msg);\r\n     break;\r\n    case 1:\r\n     (((Runtime.Curried3(function($2,$3,$4)\r\n     {\r\n      return $2(\"Information from '\"+Utils.toSafe($3)+\"': \"+Utils.toSafe($4));\r\n     }))(function(s)\r\n     {\r\n      console.log(s);\r\n     }))(msg.from.get_txt()))(((Provider.Id())())(JSON.parse(msg.payload)));\r\n     break;\r\n    case 2:\r\n     m$1=this.payloadProcessorO;\r\n     m$1!=null&&m$1.$==1?Concurrency.Start(Concurrency.Bind($this.mapPayloadWrap(m$1.$0,msg),(f=function(x$1)\r\n     {\r\n      return g(WebSockets.makeReply(x$1));\r\n     },function(x$1)\r\n     {\r\n      return g$1(f(x$1));\r\n     })),null):msg.replier.$===2?null:null;\r\n     break;\r\n    case 3:\r\n     $this.reply(WebSockets.msgType(MessageType.MsgInformation,WebSockets.mapPayload(Global.id,msg)));\r\n     break;\r\n    case 4:\r\n     $this.reply(WebSockets.msgType(MessageType.MsgInformation,(x=WebSockets.makeReply(msg),MessageGeneric.New(x.from,x.destination,x.msgType,x.subtype,x.id,JSON.stringify(((Provider.Id())())(this.clientId)),x.replier))));\r\n     break;\r\n   }\r\n  },\r\n  mapPayloadWrap:function(fW,msg)\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(fW(msg.payload),function(a)\r\n    {\r\n     return Concurrency.Return(WebSockets.mapPayload(function()\r\n     {\r\n      return a;\r\n     },msg));\r\n    });\r\n   });\r\n  },\r\n  processReply:function(msg)\r\n  {\r\n   this.waiting.Reply(msg.id,msg);\r\n  },\r\n  close:function()\r\n  {\r\n   var $this,x;\r\n   $this=this;\r\n   x=this.serverO;\r\n   (Option.iter(function(server)\r\n   {\r\n    server.FsRoot_Library2_WebSockets_IServer$Close();\r\n    $this.serverO=null;\r\n   }))(x);\r\n  },\r\n  reply:function(msg)\r\n  {\r\n   var $this,x;\r\n   $this=this;\r\n   x=this.serverO;\r\n   (Option.iter(function(server)\r\n   {\r\n    server.FsRoot_Library2_WebSockets_IServer$Post(WebSockets.destination(msg.from,WebSockets.from($this.clientAddress,msg)));\r\n   }))(x);\r\n  },\r\n  set_Out:function(fout)\r\n  {\r\n   this.out=fout;\r\n  },\r\n  SendMsg:function(msg)\r\n  {\r\n   return this.sendMsg(msg);\r\n  },\r\n  get_ClientId:function()\r\n  {\r\n   return this.clientId;\r\n  },\r\n  get_EndPoint:function()\r\n  {\r\n   return this.wsEndPoint;\r\n  },\r\n  get_MBProcessId:function()\r\n  {\r\n   return this.getProcessId();\r\n  },\r\n  get_MBListeners:function()\r\n  {\r\n   return this.getListeners();\r\n  },\r\n  Dispose:function()\r\n  {\r\n   this.close();\r\n  }\r\n },Obj,WSMessagingClient);\r\n WSMessagingClient.New=Runtime.Ctor(function(clientId,timeout,endPoint)\r\n {\r\n  WSMessagingClient.New$1.call(this,Runtime.Curried3(function(u,c,f)\r\n  {\r\n   function f$1(v)\r\n   {\r\n   }\r\n   function g(v)\r\n   {\r\n    return Concurrency.Return(v);\r\n   }\r\n   return Concurrency.Bind(WithEncoding.ConnectStateful(function(a)\r\n   {\r\n    return JSON.stringify((FSharpStation_JsonEncoder.j())(a));\r\n   },function(a)\r\n   {\r\n    return(FSharpStation_JsonDecoder.j())(JSON.parse(a));\r\n   },Endpoint.CreateRemote((((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"ws://\"+Utils.toSafe($2)+\"?ClientId=\"+Utils.toSafe($3));\r\n   }))(Global.id))(u))(c),{\r\n    $:1,\r\n    $0:WebSocket.JsonEncoding.Readable\r\n   }),function(serverP)\r\n   {\r\n    var $1;\r\n    return f(($1={\r\n     FsRoot_Library2_WebSockets_IServer$Post:function(v)\r\n     {\r\n      return serverP.Post(v);\r\n     },\r\n     FsRoot_Library2_WebSockets_IServer$Close:function()\r\n     {\r\n      return serverP.get_Connection().close(1000);\r\n     }\r\n    },(Obj.New.call($1),$1)));\r\n   }),function(x)\r\n   {\r\n    return g(f$1(x));\r\n   });\r\n  }),clientId,timeout,endPoint);\r\n },WSMessagingClient);\r\n WSMessagingClient.New$1=Runtime.Ctor(function(connectStateful,clientId,timeout,endPoint)\r\n {\r\n  var $this,d;\r\n  $this=this;\r\n  Obj.New.call(this);\r\n  this.connectStateful=connectStateful;\r\n  this.clientId=clientId;\r\n  this.wsEndPoint=(d=WebSockets.extractEndPoint()+\"/ws\",endPoint==null?d:endPoint.$0);\r\n  this.clientAddress=new Address({\r\n   $:0,\r\n   $0:this.clientId\r\n  });\r\n  this.wsTimeout=timeout==null?60000:timeout.$0;\r\n  this.out=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(Utils.toSafe($2));\r\n   };\r\n  }(function(s)\r\n  {\r\n   console.log(s);\r\n  });\r\n  this.serverO=null;\r\n  this.payloadProcessorO=null;\r\n  this.waiting=new Handler.New(function(msg)\r\n  {\r\n   (((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"Reply from '\"+Utils.toSafe($2)+\"': \"+Utils.toSafe($3));\r\n   }))(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(msg.from.get_txt()))(msg.payload);\r\n  });\r\n  this.checkServer=Mailbox.callA(function(v)\r\n  {\r\n   Library.print(v);\r\n  },function()\r\n  {\r\n   var b;\r\n   b=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Combine($this.serverO==null?(function($1)\r\n    {\r\n     return $1(\"getServer Connecting\");\r\n    }(function(s)\r\n    {\r\n     console.log(s);\r\n    }),Concurrency.Bind($this.connectToWebSocketServer(),function()\r\n    {\r\n     return Concurrency.Bind(Concurrency.Sleep(200),function()\r\n     {\r\n      return Concurrency.Return(null);\r\n     });\r\n    })):Concurrency.Zero(),Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.Return(Result.ofOption(function()\r\n     {\r\n      return new ResultMessage({\r\n       $:1,\r\n       $0:\"could not connect to Server\"\r\n      });\r\n     },$this.serverO));\r\n    }));\r\n   });\r\n  });\r\n },WSMessagingClient);\r\n WebSockets.extractEndPoint=function()\r\n {\r\n  return Arrays.get(Strings.SplitChars(location.href.substring(location.href.indexOf(\"//\")+2),[\"/\"],0),0);\r\n };\r\n WebSockets.makeReply=function(msg)\r\n {\r\n  return WebSockets.replier(Replier.NoReply,WebSockets.msgType(MessageType.MsgReply,msg));\r\n };\r\n WebSockets.mapPayload=function(f,msg)\r\n {\r\n  return MessageGeneric.New(msg.from,msg.destination,msg.msgType,msg.subtype,msg.id,f(msg.payload),msg.replier);\r\n };\r\n WebSockets.msgId=function(id,msg)\r\n {\r\n  return MessageGeneric.New(msg.from,msg.destination,msg.msgType,msg.subtype,id,msg.payload,msg.replier);\r\n };\r\n WebSockets.replier=function(rpl,msg)\r\n {\r\n  return MessageGeneric.New(msg.from,msg.destination,msg.msgType,msg.subtype,msg.id,msg.payload,rpl);\r\n };\r\n WebSockets.subtype=function(sub,msg)\r\n {\r\n  return MessageGeneric.New(msg.from,msg.destination,msg.msgType,sub,msg.id,msg.payload,msg.replier);\r\n };\r\n WebSockets.msgType=function(typ,msg)\r\n {\r\n  return MessageGeneric.New(msg.from,msg.destination,typ,msg.subtype,msg.id,msg.payload,msg.replier);\r\n };\r\n WebSockets.destination=function(dst,msg)\r\n {\r\n  return MessageGeneric.New(msg.from,dst,msg.msgType,msg.subtype,msg.id,msg.payload,msg.replier);\r\n };\r\n WebSockets.from=function(frm,msg)\r\n {\r\n  return MessageGeneric.New(frm,msg.destination,msg.msgType,msg.subtype,msg.id,msg.payload,msg.replier);\r\n };\r\n WebSockets.MessageBrokerAddress=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.MessageBrokerAddress;\r\n };\r\n WebSockets.MessageBrokerId=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.MessageBrokerId;\r\n };\r\n FSMessage.MsgGetUrl={\r\n  $:5\r\n };\r\n FSMessage.MsgGetId={\r\n  $:0\r\n };\r\n ResponseError.New=function(Code,Message)\r\n {\r\n  return{\r\n   Code:Code,\r\n   Message:Message\r\n  };\r\n };\r\n Location$1.New=function(File,Line,Column)\r\n {\r\n  return{\r\n   File:File,\r\n   Line:Line,\r\n   Column:Column\r\n  };\r\n };\r\n CompletionResponse.New=function(Name,ReplacementText,Glyph,GlyphChar)\r\n {\r\n  return{\r\n   Name:Name,\r\n   ReplacementText:ReplacementText,\r\n   Glyph:Glyph,\r\n   GlyphChar:GlyphChar\r\n  };\r\n };\r\n OverloadDescription.New=function(Signature,Comment,Footer)\r\n {\r\n  return{\r\n   Signature:Signature,\r\n   Comment:Comment,\r\n   Footer:Footer\r\n  };\r\n };\r\n OverloadParameter.New=function(Name,CanonicalTypeTextForSorting,Display,Description)\r\n {\r\n  return{\r\n   Name:Name,\r\n   CanonicalTypeTextForSorting:CanonicalTypeTextForSorting,\r\n   Display:Display,\r\n   Description:Description\r\n  };\r\n };\r\n Overload.New=function(Tip,TypeText,Parameters,IsStaticArguments)\r\n {\r\n  return{\r\n   Tip:Tip,\r\n   TypeText:TypeText,\r\n   Parameters:Parameters,\r\n   IsStaticArguments:IsStaticArguments\r\n  };\r\n };\r\n Parameter.New=function(Name,Type)\r\n {\r\n  return{\r\n   Name:Name,\r\n   Type:Type\r\n  };\r\n };\r\n SignatureData.New=function(OutputType,Parameters)\r\n {\r\n  return{\r\n   OutputType:OutputType,\r\n   Parameters:Parameters\r\n  };\r\n };\r\n MethodResponse.New=function(Name,CurrentParameter,Overloads)\r\n {\r\n  return{\r\n   Name:Name,\r\n   CurrentParameter:CurrentParameter,\r\n   Overloads:Overloads\r\n  };\r\n };\r\n SymbolUseRange.New=function(FileName,StartLine,StartColumn,EndLine,EndColumn,IsFromDefinition,IsFromAttribute,IsFromComputationExpression,IsFromDispatchSlotImplementation,IsFromPattern,IsFromType)\r\n {\r\n  return{\r\n   FileName:FileName,\r\n   StartLine:StartLine,\r\n   StartColumn:StartColumn,\r\n   EndLine:EndLine,\r\n   EndColumn:EndColumn,\r\n   IsFromDefinition:IsFromDefinition,\r\n   IsFromAttribute:IsFromAttribute,\r\n   IsFromComputationExpression:IsFromComputationExpression,\r\n   IsFromDispatchSlotImplementation:IsFromDispatchSlotImplementation,\r\n   IsFromPattern:IsFromPattern,\r\n   IsFromType:IsFromType\r\n  };\r\n };\r\n SymbolUseResponse.New=function(Name,Uses)\r\n {\r\n  return{\r\n   Name:Name,\r\n   Uses:Uses\r\n  };\r\n };\r\n HelpTextResponse.New=function(Name,Overloads)\r\n {\r\n  return{\r\n   Name:Name,\r\n   Overloads:Overloads\r\n  };\r\n };\r\n CompilerLocationResponse.New=function(Fsc,Fsi,MSBuild)\r\n {\r\n  return{\r\n   Fsc:Fsc,\r\n   Fsi:Fsi,\r\n   MSBuild:MSBuild\r\n  };\r\n };\r\n FSharpErrorInfo.New=function(FileName,StartLine,EndLine,StartColumn,EndColumn,Severity,Message,Subcategory)\r\n {\r\n  return{\r\n   FileName:FileName,\r\n   StartLine:StartLine,\r\n   EndLine:EndLine,\r\n   StartColumn:StartColumn,\r\n   EndColumn:EndColumn,\r\n   Severity:Severity,\r\n   Message:Message,\r\n   Subcategory:Subcategory\r\n  };\r\n };\r\n ErrorResponse.New=function(File,Errors)\r\n {\r\n  return{\r\n   File:File,\r\n   Errors:Errors\r\n  };\r\n };\r\n Colorization.New=function(Kind)\r\n {\r\n  return{\r\n   Kind:Kind\r\n  };\r\n };\r\n Declaration.New=function(UniqueName,Name,Glyph,GlyphChar,IsTopLevel,File,EnclosingEntity,IsAbstract)\r\n {\r\n  return{\r\n   UniqueName:UniqueName,\r\n   Name:Name,\r\n   Glyph:Glyph,\r\n   GlyphChar:GlyphChar,\r\n   IsTopLevel:IsTopLevel,\r\n   File:File,\r\n   EnclosingEntity:EnclosingEntity,\r\n   IsAbstract:IsAbstract\r\n  };\r\n };\r\n DeclarationResponse.New=function(Declaration$1,Nested)\r\n {\r\n  return{\r\n   Declaration:Declaration$1,\r\n   Nested:Nested\r\n  };\r\n };\r\n OpenNamespace.New=function(Namespace,Name,Type,Line,Column,MultipleNames)\r\n {\r\n  return{\r\n   Namespace:Namespace,\r\n   Name:Name,\r\n   Type:Type,\r\n   Line:Line,\r\n   Column:Column,\r\n   MultipleNames:MultipleNames\r\n  };\r\n };\r\n QualifySymbol.New=function(Name,Qualifier)\r\n {\r\n  return{\r\n   Name:Name,\r\n   Qualifier:Qualifier\r\n  };\r\n };\r\n ResolveNamespaceResponse.New=function(Opens,Qualifies,Word)\r\n {\r\n  return{\r\n   Opens:Opens,\r\n   Qualifies:Qualifies,\r\n   Word:Word\r\n  };\r\n };\r\n UnionCaseResponse.New=function(Text)\r\n {\r\n  return{\r\n   Text:Text\r\n  };\r\n };\r\n ParseRequest.New=function(FileName,IsAsync,Lines,Version)\r\n {\r\n  return{\r\n   FileName:FileName,\r\n   IsAsync:IsAsync,\r\n   Lines:Lines,\r\n   Version:Version\r\n  };\r\n };\r\n DeclarationsRequest.New=function(FileName,Lines,Version)\r\n {\r\n  return{\r\n   FileName:FileName,\r\n   Lines:Lines,\r\n   Version:Version\r\n  };\r\n };\r\n CompletionRequest.New=function(FileName,SourceLine,Line,Column,Filter,IncludeKeywords)\r\n {\r\n  return{\r\n   FileName:FileName,\r\n   SourceLine:SourceLine,\r\n   Line:Line,\r\n   Column:Column,\r\n   Filter:Filter,\r\n   IncludeKeywords:IncludeKeywords\r\n  };\r\n };\r\n PositionRequest.New=function(FileName,Line,Column,Filter)\r\n {\r\n  return{\r\n   FileName:FileName,\r\n   Line:Line,\r\n   Column:Column,\r\n   Filter:Filter\r\n  };\r\n };\r\n ProjectRequest.New=function(FileName)\r\n {\r\n  return{\r\n   FileName:FileName\r\n  };\r\n };\r\n LintRequest.New=function(FileName)\r\n {\r\n  return{\r\n   FileName:FileName\r\n  };\r\n };\r\n HelptextRequest.New=function(Symbol)\r\n {\r\n  return{\r\n   Symbol:Symbol\r\n  };\r\n };\r\n WorkspacePeekRequest.New=function(Directory,Deep,ExcludedDirs)\r\n {\r\n  return{\r\n   Directory:Directory,\r\n   Deep:Deep,\r\n   ExcludedDirs:ExcludedDirs\r\n  };\r\n };\r\n Calls.symbolUseProject=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"symboluseproject\",function(a)\r\n  {\r\n   return a.$==4?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.symbolUse=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"symboluse\",function(a)\r\n  {\r\n   return a.$==4?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.helpText=function(symbol)\r\n {\r\n  return Calls.FSAutocompleteCall(\"helptext\",function(a)\r\n  {\r\n   return a.$==2?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:6,\r\n   $0:HelptextRequest.New(symbol)\r\n  });\r\n };\r\n Calls.declarations=function(file,code,ver)\r\n {\r\n  return Calls.FSAutocompleteCall(\"declarations\",function(a)\r\n  {\r\n   return a.$==10?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:1,\r\n   $0:DeclarationsRequest.New(file,code,ver)\r\n  });\r\n };\r\n Calls.findDeclaration=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"finddeclaration\",function(a)\r\n  {\r\n   return a.$==9?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.findTypeDecl=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"findtypedeclaration\",function(a)\r\n  {\r\n   return a.$==9?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.completion=function(tx,kw,file,ln,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"completion\",function(a)\r\n  {\r\n   return a.$==3?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:2,\r\n   $0:CompletionRequest.New(file,tx,ln,col,filter,kw)\r\n  });\r\n };\r\n Calls.signatureData=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"signatureData\",function(a)\r\n  {\r\n   return a.$==13?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.signature=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"signature\",function(a)\r\n  {\r\n   return a.$==12?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.toolTip=function(file,lin,col,filter)\r\n {\r\n  return Calls.FSAutocompleteCall(\"tooltip\",function(a)\r\n  {\r\n   return a.$==11?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:3,\r\n   $0:PositionRequest.New(file,lin,col,filter)\r\n  });\r\n };\r\n Calls.parseCode=function(file,code,asy,ver)\r\n {\r\n  return Calls.FSAutocompleteCall(\"parse\",function(a)\r\n  {\r\n   return a.$==7?{\r\n    $:1,\r\n    $0:a.$0\r\n   }:null;\r\n  },{\r\n   $:0,\r\n   $0:ParseRequest.New(file,asy,code,ver)\r\n  });\r\n };\r\n Calls.FSAutocompleteCall=function(cmd,f,req)\r\n {\r\n  var b;\r\n  b=Monads.asyncResult();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind$1((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FsAutoComplete.FSAutocompleteCall0:-1842881046\",[cmd,req]),function(a)\r\n   {\r\n    var p,others;\r\n    function g(o)\r\n    {\r\n     return o!=null;\r\n    }\r\n    p=Arrays.partition(function(x)\r\n    {\r\n     return g(f(x));\r\n    },a);\r\n    others=p[1];\r\n    return b.Bind(Result.ofOption(function()\r\n    {\r\n     return new ResultMessage({\r\n      $:4,\r\n      $0:others\r\n     });\r\n    },Seq$1.tryHead(Seq$1.choose(f,p[0]))),function(a$1)\r\n    {\r\n     return b.Return([a$1,others]);\r\n    });\r\n   });\r\n  }));\r\n };\r\n FStation.appendMsgs=function(msg)\r\n {\r\n  FStation.appendText(FStation.outputMsgs(),msg);\r\n };\r\n FStation.appendText=function(_var,msg)\r\n {\r\n  var $1;\r\n  _var.Set(($1=_var.Get(),$1===\"\"?msg:msg===\"\"?$1:$1+\"\\n\"+msg));\r\n };\r\n FStation.outputMsgs=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.outputMsgs;\r\n };\r\n FStation.annotationsV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.annotationsV;\r\n };\r\n FStation.srcDir=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.srcDir;\r\n };\r\n FStation.set_srcDir=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.srcDir=$1;\r\n };\r\n FStation.rootDir=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rootDir;\r\n };\r\n FStation.set_rootDir=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.rootDir=$1;\r\n };\r\n FStation.id=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.id;\r\n };\r\n Snippets.setProperty=function(snp,prop,v)\r\n {\r\n  function f(t)\r\n  {\r\n   return t[0];\r\n  }\r\n  function g(y)\r\n  {\r\n   return prop!==y;\r\n  }\r\n  if(Seq$1.contains([prop,v],snp.snpProperties))\r\n   ;\r\n  else\r\n   {\r\n    Snippets.setSnippet(Snippet.New(snp.snpId,snp.snpName,snp.snpContent,snp.snpParentIdO,snp.snpPredIds,Arrays.ofSeq(Seq$1.append(Seq$1.filter(function(x)\r\n    {\r\n     return g(f(x));\r\n    },snp.snpProperties),List.ofArray([[prop,v]]))),snp.snpModified));\r\n   }\r\n };\r\n Snippets.toggleCollapse=function(snpId)\r\n {\r\n  var a;\r\n  a=((Snippets.collapsedV().Get().Contains(snpId)?function(v)\r\n  {\r\n   return function(s)\r\n   {\r\n    return s.Remove(v);\r\n   };\r\n  }:function(v)\r\n  {\r\n   return function(s)\r\n   {\r\n    return s.Add(v);\r\n   };\r\n  })(snpId))(Snippets.collapsedV().Get());\r\n  Snippets.collapsedV().Set(a);\r\n };\r\n Snippets.newSnippet=function()\r\n {\r\n  var snp;\r\n  snp=SnippetModule.New(\"\",\"\",null);\r\n  Snippets.iterReader(Operators$3.op_BarGreaterGreater(Snippets.addSnippetRm(snp),function()\r\n  {\r\n   Snippets.currentSnippetIdOV().Set({\r\n    $:1,\r\n    $0:snp.snpId\r\n   });\r\n  }));\r\n };\r\n Snippets.addSnippetRm=function(snp)\r\n {\r\n  var hier,x,o;\r\n  Snippets.snippets().Append(snp);\r\n  hier=(x=Snippets.hierarchy().Get(),Seq$1.append([Snippets.treenode(snp.snpId)],x));\r\n  return Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(FusionM.insertO((o=Snippets.currentSnippetIdOV().Get(),o==null?null:{\r\n   $:1,\r\n   $0:SnippetModule.snippetORm(o.$0)\r\n  })),function(o$1)\r\n  {\r\n   return o$1==null?null:Global.id(o$1.$0);\r\n  }),function(a)\r\n  {\r\n   return a!=null&&a.$==1?TreeReader.moveToSibling2(true,snp.snpId,a.$0.snpId,hier):Operators$3.rtn(hier);\r\n  }),Arrays.ofSeq),function(a)\r\n  {\r\n   Snippets.hierarchy().Set(a);\r\n  });\r\n };\r\n Snippets.setSnippetsGen=function(snps,coll)\r\n {\r\n  function m(snp)\r\n  {\r\n   return Snippets.treenode(snp.snpId);\r\n  }\r\n  Snippets.collapsedV().Set(coll);\r\n  Snippets.snippets().Set(snps);\r\n  Snippets.updateGeneration();\r\n  Snippets.iterReader(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(FusionM.sequenceSeq(Seq$1.map(function(snp)\r\n  {\r\n   return Operators$3.op_BarGreaterGreater(SnippetModule.parentORm(snp),function(a)\r\n   {\r\n    return a==null?{\r\n     $:1,\r\n     $0:snp\r\n    }:null;\r\n   });\r\n  },snps)),function(s)\r\n  {\r\n   return Seq$1.choose(Global.id,s);\r\n  }),function(s)\r\n  {\r\n   return Seq$1.map(m,s);\r\n  }),Arrays.ofSeq),function(a)\r\n  {\r\n   Snippets.hierarchy().Set(a);\r\n  }));\r\n };\r\n Snippets.updateGeneration=function()\r\n {\r\n  var b;\r\n  Snippets.iterReader((b=FusionM.fusion(),b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(SnippetModule.maxGenerationRm(),function(a)\r\n   {\r\n    Snippets.generation().Set(a);\r\n    return b.Zero();\r\n   });\r\n  }))));\r\n };\r\n Snippets.moveNode=function(fnid,tnid)\r\n {\r\n  Snippets.iterReader(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(TreeReader.moveToSibling2(false,fnid,tnid,Snippets.hierarchy().Get()),Arrays.ofSeq),function(a)\r\n  {\r\n   Snippets.hierarchy().Set(a);\r\n  }));\r\n };\r\n Snippets.indentOut=function()\r\n {\r\n  var x;\r\n  x=Snippets.currentSnippetIdOV().Get();\r\n  (Option.iter(function(snpId)\r\n  {\r\n   var x$1;\r\n   Snippets.iterReader(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater((x$1=Snippets.hierarchy().Get(),TreeReader.outdentNode(Snippets.treenode(snpId),x$1)),Arrays.ofSeq),function(a)\r\n   {\r\n    Snippets.hierarchy().Set(a);\r\n   }));\r\n  }))(x);\r\n };\r\n Snippets.indentIn=function()\r\n {\r\n  var x;\r\n  x=Snippets.currentSnippetIdOV().Get();\r\n  (Option.iter(function(snpId)\r\n  {\r\n   var x$1;\r\n   Snippets.iterReader(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater((x$1=Snippets.hierarchy().Get(),TreeReader.indentNode(Snippets.treenode(snpId),x$1)),Arrays.ofSeq),function(a)\r\n   {\r\n    Snippets.hierarchy().Set(a);\r\n   }));\r\n  }))(x);\r\n };\r\n Snippets.deleteCurrentSnippet=function()\r\n {\r\n  var x;\r\n  x=Snippets.currentSnippetIdOV().Get();\r\n  (Option.iter(function(snpId)\r\n  {\r\n   var x$1;\r\n   Snippets.iterReader(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater((x$1=Snippets.hierarchy().Get(),TreeReader.removeNodeOutdentChildren(Snippets.treenode(snpId),x$1)),Arrays.ofSeq),function(a)\r\n   {\r\n    Snippets.hierarchy().Set(a);\r\n   }),function()\r\n   {\r\n    Snippets.snippets().RemoveByKey(snpId);\r\n   }));\r\n  }))(x);\r\n };\r\n Snippets.expandClassW=function(snpId)\r\n {\r\n  var x;\r\n  x=Snippets.snippets().v;\r\n  return View$1.Map2(function()\r\n  {\r\n   return Snippets.runReader(Snippets.handleError,Snippets.expandClassRm(snpId));\r\n  },Snippets.collapsedV().get_View(),x);\r\n };\r\n Snippets.expandClassRm=function(snpId)\r\n {\r\n  return Operators$3.op_GreaterGreaterEquals(SnippetModule.childrenRm(snpId),function(chs)\r\n  {\r\n   return Seq$1.isEmpty(chs)?Operators$3.rtn(\"\"):Operators$3.op_BarGreaterGreater(Snippets.treenode(snpId).isExpandedRm(),function(exp)\r\n   {\r\n    return exp?\"expanded\":\"collapsed\";\r\n   });\r\n  });\r\n };\r\n Snippets.togglePredecessor=function(predId)\r\n {\r\n  var preds,x;\r\n  preds=Var$1.Lens(Snippets.currentSnippetV(),function($1)\r\n  {\r\n   return $1.snpPredIds;\r\n  },function($1,$2)\r\n  {\r\n   return Snippet.New($1.snpId,$1.snpName,$1.snpContent,$1.snpParentIdO,$2,$1.snpProperties,$1.snpModified);\r\n  });\r\n  preds.Set((x=preds.Get(),((preds.Get().Contains(predId)?function(v)\r\n  {\r\n   return function(s)\r\n   {\r\n    return s.Remove(v);\r\n   };\r\n  }:function(v)\r\n  {\r\n   return function(s)\r\n   {\r\n    return s.Add(v);\r\n   };\r\n  })(predId))(x)));\r\n  Snippets.clearPredsCache();\r\n };\r\n Snippets.isIncludedPredecessorW=function(snpId)\r\n {\r\n  return View$1.Map(function(snp)\r\n  {\r\n   return Snippets.runReader(function()\r\n   {\r\n    return false;\r\n   },Operators$3.op_BarGreaterGreater(SnippetModule.uniquePredsRm(snp),function(s)\r\n   {\r\n    return Seq$1.contains(snpId,s);\r\n   }));\r\n  },Snippets.codeSnippetW());\r\n };\r\n Snippets.isIndirectPredecessorW=function(snpId)\r\n {\r\n  return View$1.Map(function(snp)\r\n  {\r\n   return Snippets.runReader(function()\r\n   {\r\n    return false;\r\n   },Operators$3.op_BarGreaterGreater(SnippetModule.uniquePredsRm(snp),function(s)\r\n   {\r\n    return Seq$1.contains(snpId,s);\r\n   }));\r\n  },Snippets.currentSnippetW());\r\n };\r\n Snippets.treenode=function(snpId)\r\n {\r\n  return Node.New(function()\r\n  {\r\n   return snpId;\r\n  },function()\r\n  {\r\n   return Operators$3.rtn(!Snippets.collapsedV().Get().Contains(snpId));\r\n  },function()\r\n  {\r\n   return Operators$3.rtn(true);\r\n  },function()\r\n  {\r\n   function m(snp)\r\n   {\r\n    return Snippets.treenode(snp.snpId);\r\n   }\r\n   return Operators$3.op_BarGreaterGreater(SnippetModule.childrenRm(snpId),function(s)\r\n   {\r\n    return Seq$1.map(m,s);\r\n   });\r\n  },function()\r\n  {\r\n   return SnippetModule.pathRm(snpId);\r\n  },function()\r\n  {\r\n   function b(x)\r\n   {\r\n    return x.snpParentIdO;\r\n   }\r\n   return Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(SnippetModule.snippetORm(snpId),function(o)\r\n   {\r\n    return o==null?null:b(o.$0);\r\n   }),function(o)\r\n   {\r\n    return o==null?null:{\r\n     $:1,\r\n     $0:Snippets.treenode(o.$0)\r\n    };\r\n   });\r\n  },function(ch)\r\n  {\r\n   return Operators$3.op_BarGreaterGreater(Snippets.setChildrenRm(snpId,ch),function()\r\n   {\r\n    return Snippets.treenode(snpId);\r\n   });\r\n  });\r\n };\r\n Snippets.setChildrenRm=function(snpId,ch)\r\n {\r\n  var b;\r\n  b=FusionM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var chIds,p,others,descendants,index,a;\r\n   chIds=Arrays.map(function(s)\r\n   {\r\n    return s.id();\r\n   },ch);\r\n   Seq$1.iter(function(s)\r\n   {\r\n    Snippets.setSnippet(s);\r\n   },Seq$1.map(function(s)\r\n   {\r\n    return Snippet.New(s.snpId,s.snpName,s.snpContent,{\r\n     $:1,\r\n     $0:snpId\r\n    },s.snpPredIds,s.snpProperties,s.snpModified);\r\n   },Seq$1.filter(function(s)\r\n   {\r\n    return!Unchecked.Equals(s.snpParentIdO,{\r\n     $:1,\r\n     $0:snpId\r\n    })&&Arrays.contains(s.snpId,chIds);\r\n   },Snippets.snippets())));\r\n   Seq$1.iter(function(s)\r\n   {\r\n    Snippets.setSnippet(s);\r\n   },Seq$1.map(function(s)\r\n   {\r\n    return Snippet.New(s.snpId,s.snpName,s.snpContent,null,s.snpPredIds,s.snpProperties,s.snpModified);\r\n   },Seq$1.filter(function(s)\r\n   {\r\n    return Unchecked.Equals(s.snpParentIdO,{\r\n     $:1,\r\n     $0:snpId\r\n    })&&!Arrays.contains(s.snpId,chIds);\r\n   },Snippets.snippets())));\r\n   Snippets.clearPredsCache();\r\n   p=Arrays.partition(function(s)\r\n   {\r\n    return Snippets.isDescendantOf(snpId,s.snpId);\r\n   },Arrays.ofSeq((Snippets.snippets())[\"var\"].Get()));\r\n   others=p[1];\r\n   descendants=p[0];\r\n   index=Arrays.findIndex(function(s)\r\n   {\r\n    return Unchecked.Equals(s.snpId,snpId);\r\n   },others);\r\n   a=Arrays.ofSeq(Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(Slice.array(others,{\r\n     $:1,\r\n     $0:0\r\n    },{\r\n     $:1,\r\n     $0:index\r\n    }),Seq$1.delay(function()\r\n    {\r\n     return Seq$1.append(Seq$1.collect(function(chid)\r\n     {\r\n      return Seq$1.append([Seq$1.find(function(s)\r\n      {\r\n       return Unchecked.Equals(s.snpId,chid);\r\n      },descendants)],Seq$1.delay(function()\r\n      {\r\n       return Seq$1.filter(function(s)\r\n       {\r\n        return Snippets.isDescendantOf(chid,s.snpId);\r\n       },descendants);\r\n      }));\r\n     },chIds),Seq$1.delay(function()\r\n     {\r\n      return Slice.array(others,{\r\n       $:1,\r\n       $0:index+1\r\n      },null);\r\n     }));\r\n    }));\r\n   }));\r\n   Snippets.snippets().Set(a);\r\n   return b.Zero();\r\n  }));\r\n };\r\n Snippets.currentLayoutJSDW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentLayoutJSDW;\r\n };\r\n Snippets.currentLayoutDW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentLayoutDW;\r\n };\r\n Snippets.currentPathW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentPathW;\r\n };\r\n Snippets.SaveAsClassW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.SaveAsClassW;\r\n };\r\n Snippets.hasChangedW=function(snp)\r\n {\r\n  return View$1.Map(function($1)\r\n  {\r\n   return $1<snp.snpModified;\r\n  },Snippets.generation().get_View());\r\n };\r\n Snippets.codeStartsW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.codeStartsW;\r\n };\r\n Snippets.FsCodeW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.FsCodeW;\r\n };\r\n Snippets.codeAndStartsW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.codeAndStartsW;\r\n };\r\n Snippets.getHierarchyW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getHierarchyW;\r\n };\r\n Snippets.findSnippetV=function(snpId)\r\n {\r\n  return new FromView.New(Snippets.findSnippetW(snpId),function(s)\r\n  {\r\n   Snippets.setSnippet(s);\r\n  });\r\n };\r\n Snippets.findSnippetW=function(snpId)\r\n {\r\n  return View$1.Map(function(o)\r\n  {\r\n   var v;\r\n   v=SnippetModule.defaultSnippet();\r\n   return o==null?v:o.$0;\r\n  },Snippets.snippets().TryFindByKeyAsView(snpId));\r\n };\r\n Snippets.codeSnippetClassW=function(snpId)\r\n {\r\n  return View$1.Map(function($1)\r\n  {\r\n   return Unchecked.Equals({\r\n    $:1,\r\n    $0:snpId\r\n   },$1)?\"codeSnippet\":\"\";\r\n  },Snippets.codeSnippetIdOV().get_View());\r\n };\r\n Snippets.selectedClassW=function(snpId)\r\n {\r\n  return View$1.Map(function($1)\r\n  {\r\n   return Unchecked.Equals({\r\n    $:1,\r\n    $0:snpId\r\n   },$1)?\"selected\":\"\";\r\n  },Snippets.currentSnippetIdOV().get_View());\r\n };\r\n Snippets.currentSnippetV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentSnippetV;\r\n };\r\n Snippets.codeSnippetW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.codeSnippetW;\r\n };\r\n Snippets.currentSnippetW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentSnippetW;\r\n };\r\n Snippets.CurrentSnippetIdW=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.CurrentSnippetIdW;\r\n };\r\n Snippets.isDescendantOf=function(ancId,snpId)\r\n {\r\n  var o,o$1,prnId;\r\n  return Unchecked.Equals(snpId,ancId)?false:(o=(o$1=(Snippets.getParentIdO())(snpId),o$1==null?null:{\r\n   $:1,\r\n   $0:(prnId=o$1.$0,Unchecked.Equals(prnId,ancId)||Snippets.isDescendantOf(ancId,prnId))\r\n  }),o==null?false:o.$0);\r\n };\r\n Snippets.getParentIdO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.getParentIdO;\r\n };\r\n Snippets.getParentIdONotMemo=function(snpId)\r\n {\r\n  var o;\r\n  o=Snippets.snippets().TryFindByKey(snpId);\r\n  return o==null?null:o.$0.snpParentIdO;\r\n };\r\n Snippets.getSnippetsGen=function()\r\n {\r\n  return[(Snippets.snippets())[\"var\"].Get(),Snippets.generation().Get(),Snippets.collapsedV().Get()];\r\n };\r\n Snippets.setSnippet=function(snp)\r\n {\r\n  if(!Unchecked.Equals(snp.snpId.get_Id(),\"00000000-0000-0000-0000-000000000000\"))\r\n   Snippets.snippets().Append(Snippet.New(snp.snpId,snp.snpName,snp.snpContent,snp.snpParentIdO,snp.snpPredIds,snp.snpProperties,Date.now()));\r\n };\r\n Snippets.setCurrentSnippetIdO=function(snpIdO)\r\n {\r\n  (Option.iter(function(s)\r\n  {\r\n   Snippets.expandParents(s);\r\n  }))(snpIdO);\r\n  Snippets.currentSnippetIdOV().Set(snpIdO);\r\n };\r\n Snippets.expandParents=function(snpId)\r\n {\r\n  Snippets.iterReader(Operators$3.op_BarGreaterGreater(SnippetModule.pathRm(snpId),function(path)\r\n  {\r\n   var a;\r\n   a=FSharpSet.op_Subtraction(Snippets.collapsedV().Get(),new FSharpSet.New(path));\r\n   Snippets.collapsedV().Set(a);\r\n  }));\r\n };\r\n Snippets.runReader=function(handle,rm)\r\n {\r\n  return Result.defaultWith(handle,Snippets.runReaderResult(rm));\r\n };\r\n Snippets.runReaderResult=function(rm)\r\n {\r\n  return Result$1.Map(function(t)\r\n  {\r\n   return t[0];\r\n  },FusionM.runReader(Snippets.snippetsColl(),rm));\r\n };\r\n Snippets.iterReader=function(rm)\r\n {\r\n  FusionM.iterReader(function(e)\r\n  {\r\n   Snippets.handleError(e);\r\n  },Global.ignore,Snippets.snippetsColl(),rm);\r\n };\r\n Snippets.handleError=function(er)\r\n {\r\n  throw new Global.Error(Global.String(er));\r\n };\r\n Snippets.snippetsColl=function()\r\n {\r\n  return SnippetCollection.New(Snippets.generation().Get(),Seq$1.delay(function()\r\n  {\r\n   return(Snippets.snippets())[\"var\"].Get();\r\n  }),function(a)\r\n  {\r\n   return Snippets.snippets().TryFindByKey(a);\r\n  },Snippets.predsCache,Snippets.reducCache,Snippets.prepCode);\r\n };\r\n Snippets.prepCode=function(snp)\r\n {\r\n  return Snippets.prepAnyCode(snp.snpContent);\r\n };\r\n Snippets.prepAnyCode=function(cod)\r\n {\r\n  return Strings.Replace(Strings.Replace(Strings.Replace(cod,\"##\"+\"FSHARPSTATION_ID\"+\"##\",FStation.id()),\"##\"+\"FSHARPSTATION_ENDPOINT\"+\"##\",self.location.href),\"##\"+\"FSHOME\"+\"##\",FStation.rootDir());\r\n };\r\n Snippets.clearPredsCache=function()\r\n {\r\n  (Snippets.clearPreds())();\r\n  (Snippets.clearReduc())();\r\n  (Snippets.clearParent())();\r\n };\r\n Snippets.clearParent=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.clearParent;\r\n };\r\n Snippets.parentCache=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.parentCache;\r\n };\r\n Snippets.clearReduc=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.clearReduc;\r\n };\r\n Snippets.reducCache=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.reducCache;\r\n };\r\n Snippets.clearPreds=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.clearPreds;\r\n };\r\n Snippets.predsCache=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.predsCache;\r\n };\r\n Snippets.collapsedV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.collapsedV;\r\n };\r\n Snippets.codeSnippetIdOV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.codeSnippetIdOV;\r\n };\r\n Snippets.currentSnippetIdOV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.currentSnippetIdOV;\r\n };\r\n Snippets.generation=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.generation;\r\n };\r\n Snippets.hierarchy=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.hierarchy;\r\n };\r\n Snippets.snippets=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.snippets;\r\n };\r\n DragInfo.DragNone={\r\n  $:0\r\n };\r\n DragDrop.getDragNIdO=function(tnId)\r\n {\r\n  var $1;\r\n  return DragDrop.drag().$==1&&(!Unchecked.Equals(DragDrop.drag().$0,tnId)&&($1=DragDrop.drag().$0,true))?{\r\n   $:1,\r\n   $0:$1\r\n  }:null;\r\n };\r\n DragDrop.setDragNode=function(tnid)\r\n {\r\n  DragDrop.set_drag({\r\n   $:1,\r\n   $0:tnid\r\n  });\r\n };\r\n DragDrop.setDragNone=function()\r\n {\r\n  DragDrop.set_drag(DragInfo.DragNone);\r\n };\r\n DragDrop.drag=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.drag;\r\n };\r\n DragDrop.set_drag=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.drag=$1;\r\n };\r\n Templating.TemplatesFileName=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.TemplatesFileName;\r\n };\r\n Templating.rootdir=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rootdir;\r\n };\r\n RenderSnippets.render=function()\r\n {\r\n  var b,S,p,i;\r\n  return(b=(S=RenderSnippets.snippets(),ProviderBuilder.Make().WithHole({\r\n   $:0,\r\n   $0:\"snippets\",\r\n   $1:S\r\n  })),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.snippetlist(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n RenderSnippets.snippets$8781$40=function(snpId)\r\n {\r\n  return function(ev)\r\n  {\r\n   var x;\r\n   ev.Event.preventDefault();\r\n   x=DragDrop.getDragNIdO(snpId);\r\n   (Option.iter(function(fr)\r\n   {\r\n    Snippets.moveNode(fr,snpId);\r\n   }))(x);\r\n  };\r\n };\r\n RenderSnippets.snippets$8780$40=function(snpId)\r\n {\r\n  return function(ev)\r\n  {\r\n   if(DragDrop.getDragNIdO(snpId)!=null)\r\n    ev.Event.preventDefault();\r\n  };\r\n };\r\n RenderSnippets.snippets$8779$40=function(snpId)\r\n {\r\n  return function(ev)\r\n  {\r\n   DragDrop.setDragNode(snpId);\r\n   ev.Event.stopPropagation();\r\n  };\r\n };\r\n RenderSnippets.snippets$8778$40=function(snpId)\r\n {\r\n  return function()\r\n  {\r\n   Snippets.toggleCollapse(snpId);\r\n  };\r\n };\r\n RenderSnippets.snippets$8777$40=function(snpId)\r\n {\r\n  return function()\r\n  {\r\n   Snippets.togglePredecessor(snpId);\r\n  };\r\n };\r\n RenderSnippets.snippets$8776$40=function(snpId)\r\n {\r\n  var s;\r\n  s=View$1.Map(function(y)\r\n  {\r\n   return\"\"!==y;\r\n  },Snippets.selectedClassW(snpId));\r\n  return function(e)\r\n  {\r\n   return RenderSnippets.scrollIntoView(s,e);\r\n  };\r\n };\r\n RenderSnippets.snippets$8775$40=function(snpId)\r\n {\r\n  return function()\r\n  {\r\n   Snippets.setCurrentSnippetIdO({\r\n    $:1,\r\n    $0:snpId\r\n   });\r\n  };\r\n };\r\n RenderSnippets.snippets=function()\r\n {\r\n  function a(snpId,l)\r\n  {\r\n   var nameW,b,predW,errorW,x,f,s,c,b$1,t,t$1,t$2,t$3,t$4,A,s$1,t$5,P$2,p,i;\r\n   function g(a$1)\r\n   {\r\n    return a$1?\"ErrorMsg\":\"\";\r\n   }\r\n   nameW=(b=View$1.get_Do(),View$1.Bind(function(a$1)\r\n   {\r\n    return View$1.Bind(function(a$2)\r\n    {\r\n     return View$1.Const((a$2?\"*\":\"\")+SnippetModule.snippetName(a$1.snpName,a$1.snpContent));\r\n    },Snippets.hasChangedW(a$1));\r\n   },Snippets.findSnippetW(snpId)));\r\n   predW=View$1.Apply(View$1.Map2(function($1,$2)\r\n   {\r\n    return function($3)\r\n    {\r\n     return $1.snpPredIds.Contains(snpId)?\"direct-predecessor\":$2?\"indirect-predecessor\":$3?\"included-predecessor\":\"\";\r\n    };\r\n   },Snippets.currentSnippetV().get_View(),Snippets.isIndirectPredecessorW(snpId)),Snippets.isIncludedPredecessorW(snpId));\r\n   errorW=(x=FStation.annotationsV().get_View(),View$1.Map((f=(s=(c=snpId.get_Id(),Global.String(c)),function(w)\r\n   {\r\n    return String.contains(s,w);\r\n   }),function(x$1)\r\n   {\r\n    return g(f(x$1));\r\n   }),x));\r\n   return(b$1=(t=(t$1=(t$2=(t$3=(t$4=(A=(s$1=View$1.Map(function(y)\r\n   {\r\n    return\"\"!==y;\r\n   },Snippets.selectedClassW(snpId)),function(e)\r\n   {\r\n    return RenderSnippets.scrollIntoView(s$1,e);\r\n   }),(t$5=(P$2=Snippets.expandClassW(snpId),ProviderBuilder.Make().WithHole({\r\n    $:2,\r\n    $0:\"name\",\r\n    $1:nameW\r\n   }).WithHole({\r\n    $:1,\r\n    $0:\"indent\",\r\n    $1:Global.String(l)\r\n   }).WithHole({\r\n    $:2,\r\n    $0:\"parent\",\r\n    $1:P$2\r\n   })).WithHole({\r\n    $:2,\r\n    $0:\"predecessor\",\r\n    $1:predW\r\n   }).WithHole({\r\n    $:2,\r\n    $0:\"selected\",\r\n    $1:View$1.Map2(function($1,$2)\r\n    {\r\n     return Strings.concat(\" \",List.ofArray([$1,$2]));\r\n    },Snippets.selectedClassW(snpId),Snippets.codeSnippetClassW(snpId))\r\n   }).WithHole({\r\n    $:2,\r\n    $0:\"errormsg\",\r\n    $1:errorW\r\n   }),t$5.WithHole(Handler$1.EventQ2(t$5.k,\"select\",function()\r\n   {\r\n    return t$5.i;\r\n   },function()\r\n   {\r\n    Snippets.setCurrentSnippetIdO({\r\n     $:1,\r\n     $0:snpId\r\n    });\r\n   }))).WithHole({\r\n    $:7,\r\n    $0:\"afterrender\",\r\n    $1:A\r\n   })),t$4.WithHole(Handler$1.EventQ2(t$4.k,\"togglepred\",function()\r\n   {\r\n    return t$4.i;\r\n   },function()\r\n   {\r\n    Snippets.togglePredecessor(snpId);\r\n   }))),t$3.WithHole(Handler$1.EventQ2(t$3.k,\"togglecollapse\",function()\r\n   {\r\n    return t$3.i;\r\n   },function()\r\n   {\r\n    Snippets.toggleCollapse(snpId);\r\n   }))),t$2.WithHole(Handler$1.EventQ2(t$2.k,\"drag\",function()\r\n   {\r\n    return t$2.i;\r\n   },function(ev)\r\n   {\r\n    DragDrop.setDragNode(snpId);\r\n    ev.Event.stopPropagation();\r\n   }))),t$1.WithHole(Handler$1.EventQ2(t$1.k,\"dragover\",function()\r\n   {\r\n    return t$1.i;\r\n   },function(ev)\r\n   {\r\n    if(DragDrop.getDragNIdO(snpId)!=null)\r\n     ev.Event.preventDefault();\r\n   }))),t.WithHole(Handler$1.EventQ2(t.k,\"drop\",function()\r\n   {\r\n    return t.i;\r\n   },function(ev)\r\n   {\r\n    var x$1;\r\n    ev.Event.preventDefault();\r\n    x$1=DragDrop.getDragNIdO(snpId);\r\n    (Option.iter(function(fr)\r\n    {\r\n     Snippets.moveNode(fr,snpId);\r\n    }))(x$1);\r\n   }))),(p=Handler$1.CompleteHoles(b$1.k,b$1.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.snippet(p[0])),(b$1.i=i,i)))).get_Doc();\r\n  }\r\n  return Doc.Convert(function($1)\r\n  {\r\n   return a($1[0],$1[1]);\r\n  },Snippets.getHierarchyW());\r\n };\r\n RenderSnippets.scrollIntoView=function(selW,e)\r\n {\r\n  View$1.Sink(function(s)\r\n  {\r\n   if(s)\r\n    try\r\n    {\r\n     e.scrollIntoViewIfNeeded();\r\n    }\r\n    catch(e$1)\r\n    {\r\n     ((function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(Utils.prettyPrint($2));\r\n      };\r\n     }(function(s$1)\r\n     {\r\n      console.log(s$1);\r\n     }))(e$1));\r\n    }\r\n  },selW);\r\n };\r\n RenderProperties.render$8820$34=function()\r\n {\r\n  return function()\r\n  {\r\n   RenderProperties.addProperty();\r\n  };\r\n };\r\n RenderProperties.render=function()\r\n {\r\n  var b,t,P$2,p,i;\r\n  return(b=(t=(P$2=RenderProperties.properties(),ProviderBuilder.Make().WithHole({\r\n   $:0,\r\n   $0:\"properties\",\r\n   $1:P$2\r\n  })),t.WithHole(Handler$1.EventQ2(t.k,\"addproperty\",function()\r\n  {\r\n   return t.i;\r\n  },function()\r\n  {\r\n   RenderProperties.addProperty();\r\n  }))),(p=Handler$1.CompleteHoles(b.k,b.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.propertytable(p[0])),(b.i=i,i)))).get_Doc();\r\n };\r\n RenderProperties.properties$8813$33=function(i)\r\n {\r\n  return function()\r\n  {\r\n   RenderProperties.remProperty(i);\r\n  };\r\n };\r\n RenderProperties.properties=function()\r\n {\r\n  var propsV;\r\n  function setName(i,newName)\r\n  {\r\n   Arrays.set(propsV.Get(),i,[newName,(Arrays.get(propsV.Get(),i))[1]]);\r\n   return propsV.Set(propsV.Get());\r\n  }\r\n  function setValue(i,newVal)\r\n  {\r\n   return(Arrays.get(propsV.Get(),i))[1].length>1000?null:(Arrays.set(propsV.Get(),i,[(Arrays.get(propsV.Get(),i))[0],newVal]),propsV.Set(propsV.Get()));\r\n  }\r\n  propsV=Var$1.Lens(Snippets.currentSnippetV(),function($1)\r\n  {\r\n   return $1.snpProperties;\r\n  },function($1,$2)\r\n  {\r\n   return Snippet.New($1.snpId,$1.snpName,$1.snpContent,$1.snpParentIdO,$1.snpPredIds,$2,$1.snpModified);\r\n  });\r\n  return Doc.Convert(function(i)\r\n  {\r\n   var nameV,valueV,b,t,p,i$1;\r\n   nameV=new FromView.New(View$1.Map(function($1)\r\n   {\r\n    return(Arrays.get($1,i))[0];\r\n   },propsV.get_View()),function($1)\r\n   {\r\n    return setName(i,$1);\r\n   });\r\n   valueV=new FromView.New(View$1.Map(function($1)\r\n   {\r\n    var v;\r\n    v=(Arrays.get($1,i))[1];\r\n    return v.length>1000?(((Runtime.Curried3(function($2,$3,$4)\r\n    {\r\n     return $2(Utils.toSafe($3)+\"...<\"+Global.String($4)+\" chars>\");\r\n    }))(Global.id))(Slice.string(v,{\r\n     $:1,\r\n     $0:0\r\n    },{\r\n     $:1,\r\n     $0:100\r\n    })))(v.length):v;\r\n   },propsV.get_View()),function($1)\r\n   {\r\n    return setValue(i,$1);\r\n   });\r\n   return(b=(t=ProviderBuilder.Make().WithHole({\r\n    $:8,\r\n    $0:\"name\",\r\n    $1:nameV\r\n   }).WithHole({\r\n    $:8,\r\n    $0:\"value\",\r\n    $1:valueV\r\n   }),t.WithHole(Handler$1.EventQ2(t.k,\"remove\",function()\r\n   {\r\n    return t.i;\r\n   },function()\r\n   {\r\n    RenderProperties.remProperty(i);\r\n   }))),(p=Handler$1.CompleteHoles(b.k,b.h,[[\"name\",0],[\"value\",0]]),(i$1=new TemplateInstance.New(p[1],FSharpStation_Templates.property(p[0])),(b.i=i$1,i$1)))).get_Doc();\r\n  },View$1.Map(function($1)\r\n  {\r\n   return Arrays.ofSeq(Operators$7.range(0,Arrays.length($1)-1));\r\n  },propsV.get_View()));\r\n };\r\n RenderProperties.remProperty=function(i)\r\n {\r\n  var i$1;\r\n  Snippets.currentSnippetV().Set((i$1=Snippets.currentSnippetV().Get(),Snippet.New(i$1.snpId,i$1.snpName,i$1.snpContent,i$1.snpParentIdO,i$1.snpPredIds,Slice.array(Snippets.currentSnippetV().Get().snpProperties,{\r\n   $:1,\r\n   $0:0\r\n  },{\r\n   $:1,\r\n   $0:i-1\r\n  }).concat(Slice.array(Snippets.currentSnippetV().Get().snpProperties,{\r\n   $:1,\r\n   $0:i+1\r\n  },null)),i$1.snpModified)));\r\n };\r\n RenderProperties.addProperty=function()\r\n {\r\n  var i;\r\n  Snippets.currentSnippetV().Set((i=Snippets.currentSnippetV().Get(),Snippet.New(i.snpId,i.snpName,i.snpContent,i.snpParentIdO,i.snpPredIds,Snippets.currentSnippetV().Get().snpProperties.concat([[\"\",\"\"]]),i.snpModified)));\r\n };\r\n HoverProvider$1=Monaco$1.HoverProvider=Runtime.Class({\r\n  provideHover:function(model,pos,token)\r\n  {\r\n   var b;\r\n   return Promise.ofAsyncResult((b=Monads.asyncResult(),b.Run(b.Delay(function()\r\n   {\r\n    var p;\r\n    p=Monaco$1.getIndentAndFirst();\r\n    return b.Bind$1(Calls.toolTip(Monaco$1.fileName(),pos.lineNumber+p[1],pos.column+p[0],\"\"),function(a)\r\n    {\r\n     return Extensions[\"AsyncResultBuilder.Bind\"](b,Monaco$1.overDescriptions(a[0]),function(a$1)\r\n     {\r\n      return b.Return(Hover.New(Arrays.ofSeq(Seq$1.map(function(d)\r\n      {\r\n       return MarkDownString.New((Library.print(d),d),true);\r\n      },a$1)),null));\r\n     });\r\n    });\r\n   }))));\r\n  }\r\n },Obj,HoverProvider$1);\r\n HoverProvider$1.New=Runtime.Ctor(function(ed)\r\n {\r\n  Obj.New.call(this);\r\n },HoverProvider$1);\r\n CompletionItemProvider$1=Monaco$1.CompletionItemProvider=Runtime.Class({\r\n  resolveCompletionItem:function(item,token)\r\n  {\r\n   var b;\r\n   function f(a)\r\n   {\r\n    return a.$==1?Operators$7.FailWith((function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(FSharpStation_GeneratedPrintf.p$38($2));\r\n     };\r\n    }(Global.id))(a.$0)):a.$0;\r\n   }\r\n   function g(v)\r\n   {\r\n    return Concurrency.Return(v);\r\n   }\r\n   return Promise$1.OfAsync(Concurrency.Bind((b=Monads.asyncResult(),b.Run(b.Delay(function()\r\n   {\r\n    return b.Bind$1(Calls.helpText(item.label),function(a)\r\n    {\r\n     return b.Return(CompletionItem.New(item.kind,item.label,Strings.concat(\"\\n\",Seq$1.collect(function(d)\r\n     {\r\n      return List.ofSeq(Seq$1.delay(function()\r\n      {\r\n       return Seq$1.append(!(!d.Signature)?[d.Signature]:[],Seq$1.delay(function()\r\n       {\r\n        return Seq$1.append(!(!d.Comment)?[d.Comment]:[],Seq$1.delay(function()\r\n        {\r\n         return!(!d.Footer)?[d.Footer]:[];\r\n        }));\r\n       }));\r\n      }));\r\n     },Seq$1.collect(Global.id,a[0].Overloads)))));\r\n    });\r\n   }))),function(x)\r\n   {\r\n    return g(f(x));\r\n   }));\r\n  },\r\n  provideCompletionItems:function(model,pos,token,context)\r\n  {\r\n   var b;\r\n   function f(a)\r\n   {\r\n    return a.$==1?Operators$7.FailWith((function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(FSharpStation_GeneratedPrintf.p$38($2));\r\n     };\r\n    }(Global.id))(a.$0)):a.$0;\r\n   }\r\n   function g(v)\r\n   {\r\n    return Concurrency.Return(v);\r\n   }\r\n   return Promise$1.OfAsync(Concurrency.Bind((b=Monads.asyncResult(),b.Run(b.Delay(function()\r\n   {\r\n    var p,indent;\r\n    p=Monaco$1.getIndentAndFirst();\r\n    indent=p[0];\r\n    return b.Bind$1(Calls.completion(Strings.replicate(indent,\" \")+model.getLineContent(pos.lineNumber),true,Monaco$1.fileName(),pos.lineNumber+p[1],pos.column+indent,\"Contains\"),function(a)\r\n    {\r\n     return b.Return(Arrays.map(function(comp)\r\n     {\r\n      return CompletionItem.New(Monaco$1.convertGlyphChar(comp.GlyphChar),comp.Name,\"\");\r\n     },a[0]));\r\n    });\r\n   }))),function(x)\r\n   {\r\n    return g(f(x));\r\n   }));\r\n  }\r\n },Obj,CompletionItemProvider$1);\r\n CompletionItemProvider$1.New=Runtime.Ctor(function(ed)\r\n {\r\n  Obj.New.call(this);\r\n },CompletionItemProvider$1);\r\n DefinitionProvider$1=Monaco$1.DefinitionProvider=Runtime.Class({\r\n  provideDefinition:function(model,pos,token)\r\n  {\r\n   var b;\r\n   function f(a)\r\n   {\r\n    return a.$==1?Operators$7.FailWith((function($1)\r\n    {\r\n     return function($2)\r\n     {\r\n      return $1(FSharpStation_GeneratedPrintf.p$38($2));\r\n     };\r\n    }(Global.id))(a.$0)):a.$0;\r\n   }\r\n   function g(v)\r\n   {\r\n    return Concurrency.Return(v);\r\n   }\r\n   return Promise$1.OfAsync(Concurrency.Bind((b=Monads.asyncResult(),b.Run(b.Delay(function()\r\n   {\r\n    var p;\r\n    p=Monaco$1.getIndentAndFirst();\r\n    return b.Bind$1(Calls.findDeclaration(Monaco$1.fileName(),pos.lineNumber+p[1],pos.column+p[0],\"\"),function(a)\r\n    {\r\n     var decl,p$1,snpId,indent2,first2,uri,a$1,c;\r\n     decl=a[0];\r\n     p$1=Monaco$1.getSnipIdIndentAndFirst(decl.Line);\r\n     snpId=p$1[0];\r\n     indent2=p$1[1];\r\n     first2=p$1[2];\r\n     uri=(a$1=\"snpId:\"+(c=snpId.get_Id(),Global.String(c)),self.monaco.Uri.parse(a$1));\r\n     Monaco$1.getSnippetModel(snpId);\r\n     return b.Return(Location.New(Range.New(decl.Column-indent2,decl.Column-indent2,decl.Line-first2,decl.Line-first2),uri));\r\n    });\r\n   }))),function(x)\r\n   {\r\n    return g(f(x));\r\n   }));\r\n  }\r\n },Obj,DefinitionProvider$1);\r\n DefinitionProvider$1.New=Runtime.Ctor(function(ed)\r\n {\r\n  Obj.New.call(this);\r\n },DefinitionProvider$1);\r\n MonacoOptions.New=function(fontSize,lineHeight)\r\n {\r\n  return{\r\n   fontSize:fontSize,\r\n   lineHeight:lineHeight\r\n  };\r\n };\r\n ITextModelService.New=function(setEditor,createModelReference)\r\n {\r\n  return{\r\n   setEditor:setEditor,\r\n   createModelReference:createModelReference\r\n  };\r\n };\r\n Monaco$1.getSelection=function()\r\n {\r\n  var m,o,ed,x;\r\n  m=(o=Monaco$1.editorConfigO(),o==null?null:o.$0.editorO);\r\n  return m!=null&&m.$==1?(ed=m.$0,(x=ed.getSelection(),ed.getModel().getValueInRange(x))):\"\";\r\n };\r\n Monaco$1[\"goto\"]=function(codeId,line,col)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   var m,o;\r\n   m=(o=Monaco$1.editorConfigO(),o==null?null:o.$0.editorO);\r\n   return m!=null&&m.$==1?Concurrency.Bind(Monaco$1.gotoEditor(m.$0,codeId,line,col),function()\r\n   {\r\n    return Concurrency.Return(null);\r\n   }):Concurrency.Zero();\r\n  });\r\n };\r\n Monaco$1.editorDoc=function()\r\n {\r\n  var b;\r\n  return Doc.Async((b=null,Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Monaco.loader(),function()\r\n   {\r\n    return Concurrency.Bind(Monaco$1.monacoNew(Var$1.Lens(Snippets.currentSnippetV(),function($1)\r\n    {\r\n     return $1.snpContent;\r\n    },function($1,$2)\r\n    {\r\n     return Snippet.New($1.snpId,$1.snpName,$2,$1.snpParentIdO,$1.snpPredIds,$1.snpProperties,$1.snpModified);\r\n    }),{\r\n     $:1,\r\n     $0:View$1.Map2(Monaco$1.transformAnnotations,Snippets.currentSnippetW(),FStation.annotationsV().get_View())\r\n    },null,null),function(a)\r\n    {\r\n     Monaco$1.set_editorConfigO({\r\n      $:1,\r\n      $0:a\r\n     });\r\n     return Concurrency.Return(Monaco.render(a));\r\n    });\r\n   });\r\n  })));\r\n };\r\n Monaco$1.editorConfigO=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.editorConfigO;\r\n };\r\n Monaco$1.set_editorConfigO=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.editorConfigO=$1;\r\n };\r\n Monaco$1.parse=function(code,starts)\r\n {\r\n  var b;\r\n  AsyncResult.iterA(function(v)\r\n  {\r\n   Library.print(v);\r\n  },function()\r\n  {\r\n   Library.print();\r\n  },(b=Monads.asyncResult(),b.Run(b.Delay(function()\r\n  {\r\n   var a,lines;\r\n   a=\"Parsing...\\n\"+String.skipFirstLine(FStation.annotationsV().Get());\r\n   FStation.annotationsV().Set(a);\r\n   Monaco$1.startsV().Set(starts);\r\n   lines=String.splitByChar(\"\\n\",code);\r\n   Monaco$1.set_fileName(FsCodeModule.getSourceDir(FStation.srcDir(),lines)+\"/\"+FStation.id()+\".fsx\");\r\n   return b.Bind$1(Calls.parseCode(Monaco$1.fileName(),lines,true,0),function(a$1)\r\n   {\r\n    var a$2;\r\n    a$2=Strings.concat(\"\\n\",Seq$1.append(List.ofArray([\"Parsed!\"]),Seq$1.map(function(v)\r\n    {\r\n     var p,x,indent,first,c;\r\n     function p$1(a$3,a$4)\r\n     {\r\n      return v.StartLine>a$4[1]&&v.StartLine<=a$4[2];\r\n     }\r\n     p=(x=Seq$1.tryFind(function($1)\r\n     {\r\n      return p$1($1[0],$1[1]);\r\n     },starts),(Monaco$1.defaultStart())(x));\r\n     indent=p[1][0];\r\n     first=p[1][1];\r\n     return((((((((((Runtime.Curried(function($1,$2,$3,$4,$5,$6,$7,$8,$9,$10)\r\n     {\r\n      return $1(Utils.toSafe($2)+\" (\"+Global.String($3)+\", \"+Global.String($4)+\") - (\"+Global.String($5)+\", \"+Global.String($6)+\") \"+Utils.toSafe($7)+\"(\"+Utils.toSafe($8)+\") \\\"\"+Utils.toSafe($9)+\": \"+Utils.toSafe($10)+\"\\\".\");\r\n     },10))(Global.id))(v.Severity===\"Error\"?\"Err\":\"Warn\"))(v.StartLine-first))(v.StartColumn-indent))(v.EndLine-first))(v.EndColumn-indent))(p[0][1]))((c=p[0][0].get_Id(),Global.String(c))))(v.Subcategory))(v.Message);\r\n    },a$1[0].Errors)));\r\n    FStation.annotationsV().Set(a$2);\r\n    Seq$1.iter(function(v)\r\n    {\r\n     Library.print(v);\r\n    },a$1[1]);\r\n    return b.Zero();\r\n   });\r\n  }))));\r\n };\r\n Monaco$1.monacoNew=function(_var,annotationsWO,showToolTipO,getHintsO)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   var $1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12,$13,$14,$15,r,config,m,n;\r\n   config=Monaco.newVar(_var);\r\n   $9=config.editorO;\r\n   $10=Pojo.newPojo([[\"fontSize\",12],[\"lineHeight\",14]]);\r\n   m=Global.require(\"vs/editor/standalone/browser/standaloneServices\");\r\n   n=new m.StaticServices.codeEditorService._factory();\r\n   n.openCodeEditor=Monaco$1.openCodeEditor;\r\n   r=n;\r\n   $15=[\"codeEditorService\",r];\r\n   $13=[$15,[\"textModelResolverService\",Monaco$1.textModelResolverService()]];\r\n   $11=Pojo.newPojo($13);\r\n   $5=MonacoConfig.New(config[\"var\"],config.onChange,config.onRender,$9,config.disabled,$10,$11);\r\n   $3=Monaco.onRender(function(ed)\r\n   {\r\n    var _m,hp,cp,dp;\r\n    function x(a$1,a$2,a$3)\r\n    {\r\n     return hp.provideHover(a$1,a$2,a$3);\r\n    }\r\n    function x$1(a$1,a$2,a$3,a$4)\r\n    {\r\n     return cp.provideCompletionItems(a$1,a$2,a$3,a$4);\r\n    }\r\n    function x$2(a$1,a$2)\r\n    {\r\n     return cp.resolveCompletionItem(a$1,a$2);\r\n    }\r\n    function x$3(a$1,a$2,a$3)\r\n    {\r\n     return dp.provideDefinition(a$1,a$2,a$3);\r\n    }\r\n    function a(ms)\r\n    {\r\n     var _m$1;\r\n     _m$1=ed.getModel();\r\n     self.monaco.editor.setModelMarkers(_m$1,\"annotations\",ms);\r\n    }\r\n    _m=ed.getModel();\r\n    self.monaco.editor.setModelLanguage(_m,\"fsharp\");\r\n    self.monaco.editor.setTheme(\"vs\");\r\n    hp=new HoverProvider$1.New(ed);\r\n    cp=new CompletionItemProvider$1.New(ed);\r\n    dp=new DefinitionProvider$1.New(ed);\r\n    Library.print(function($16)\r\n    {\r\n     return x($16[0],$16[1],$16[2]);\r\n    });\r\n    Library.print(function($16)\r\n    {\r\n     return x$1($16[0],$16[1],$16[2],$16[3]);\r\n    });\r\n    Library.print(function($16)\r\n    {\r\n     return x$2($16[0],$16[1]);\r\n    });\r\n    Library.print(function($16)\r\n    {\r\n     return x$3($16[0],$16[1],$16[2]);\r\n    });\r\n    self.monaco.languages.registerHoverProvider(\"fsharp\",hp);\r\n    self.monaco.languages.registerCompletionItemProvider(\"fsharp\",cp);\r\n    self.monaco.languages.registerDefinitionProvider(\"fsharp\",dp);\r\n    (Option.iter(function(a$1)\r\n    {\r\n     View$1.Sink(a,a$1);\r\n    }))(annotationsWO);\r\n   },$5);\r\n   return Concurrency.Return($3);\r\n  });\r\n };\r\n Monaco$1.textModelResolverService=function()\r\n {\r\n  var editorO;\r\n  editorO=null;\r\n  return ITextModelService.New(function(e)\r\n  {\r\n   editorO={\r\n    $:1,\r\n    $0:e\r\n   };\r\n  },function(uri)\r\n  {\r\n   var b;\r\n   return Promise$1.OfAsync((b=null,Concurrency.Delay(function()\r\n   {\r\n    var $1,r,_v,m;\r\n    _v=Monaco$1.getSnippetModel(uri);\r\n    m=self.require(\"vs/base/common/lifecycle\");\r\n    r=new m.ImmortalReference(_v);\r\n    return Concurrency.Return(r);\r\n   })));\r\n  });\r\n };\r\n Monaco$1.openCodeEditor=function(input,ed,sideBySide)\r\n {\r\n  var b;\r\n  return Promise$1.OfAsync((b=null,Concurrency.Delay(function()\r\n  {\r\n   var m,a;\r\n   m=input.resource.path;\r\n   a=(ParseO.Guid())(m);\r\n   return a!=null&&a.$==1?Concurrency.Bind(Monaco$1.gotoEditor(ed,new SnippetId({\r\n    $:0,\r\n    $0:a.$0\r\n   }),input.options.selection.startLineNumber,input.options.selection.startColumn),function()\r\n   {\r\n    return Concurrency.Return(ed);\r\n   }):Concurrency.Return(null);\r\n  })));\r\n };\r\n Monaco$1.gotoEditor=function(ed,codeId,line,col)\r\n {\r\n  var b;\r\n  b=null;\r\n  return Concurrency.Delay(function()\r\n  {\r\n   Snippets.setCurrentSnippetIdO({\r\n    $:1,\r\n    $0:codeId\r\n   });\r\n   return Concurrency.Bind(Concurrency.Sleep(200),function()\r\n   {\r\n    ed.focus();\r\n    ed.setPosition(Position$1.New(col,line));\r\n    ed.revealPositionInCenter(Position$1.New(col,line));\r\n    return Concurrency.Zero();\r\n   });\r\n  });\r\n };\r\n Monaco$1.transformAnnotations=function(snp,msgs)\r\n {\r\n  var rex,a;\r\n  function c(ty,fl,fc,tl,tc,guid,msg)\r\n  {\r\n   var o;\r\n   return!Unchecked.Equals((o=(ParseO.parseGuidO())(guid),o==null?null:{\r\n    $:1,\r\n    $0:new SnippetId({\r\n     $:0,\r\n     $0:o.$0\r\n    })\r\n   }),{\r\n    $:1,\r\n    $0:snp.snpId\r\n   })?null:{\r\n    $:1,\r\n    $0:MarkerData.New(fc,tc,fl,tl,ty===\"Err\"?8:ty===\"Warn\"?4:ty===\"Hint\"?1:2,msg)\r\n   };\r\n  }\r\n  rex=\"(Err|Warn|Info|Hint) \\\\((\\\\d+)\\\\,\\\\s*(\\\\d+)\\\\) - \\\\((\\\\d+)\\\\,\\\\s*(\\\\d+)\\\\).*\\\\(\"+LibraryJS.rexGuid()+\"\\\\) \\\"([^\\\"]+?)\\\"\\\\.\";\r\n  return Arrays.choose(function($1)\r\n  {\r\n   return c($1[0],$1[1],$1[2],$1[3],$1[4],$1[5],$1[6]);\r\n  },Arrays.choose(function(v)\r\n  {\r\n   var $1,a$1,t;\r\n   return(a$1=LibraryJS.REGEX$1(rex,\"\",v),a$1!=null&&a$1.$==1&&((t=a$1.$0,!Unchecked.Equals(t,null)&&t.length===8)&&($1=[Arrays.get(a$1.$0,3),Arrays.get(a$1.$0,2),Arrays.get(a$1.$0,6),Arrays.get(a$1.$0,7),Arrays.get(a$1.$0,5),Arrays.get(a$1.$0,4),Arrays.get(a$1.$0,1)],true)))?{\r\n    $:1,\r\n    $0:[$1[6],Operators$7.toInt(Global.Number($1[1])),Operators$7.toInt(Global.Number($1[0])),Operators$7.toInt(Global.Number($1[5])),Operators$7.toInt(Global.Number($1[4])),$1[2],$1[3]]\r\n   }:null;\r\n  },(a=LibraryJS.REGEX$1(rex,\"g\",msgs),a!=null&&a.$==1?a.$0:[])));\r\n };\r\n Monaco$1.convertGlyphChar=function(a)\r\n {\r\n  return a===\"C\"?6:a===\"E\"?12:a===\"S\"?11:a===\"I\"?7:a===\"N\"?8:a===\"M\"?1:a===\"P\"?9:a===\"F\"?4:a===\"T\"?6:a===\"K\"?13:0;\r\n };\r\n Monaco$1.fileName=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.fileName;\r\n };\r\n Monaco$1.set_fileName=function($1)\r\n {\r\n  SC$1.$cctor();\r\n  SC$1.fileName=$1;\r\n };\r\n Monaco$1.overDescriptions=function(descs)\r\n {\r\n  return Async.sequenceSeq(Seq$1.collect(function(d)\r\n  {\r\n   return List.ofSeq(Seq$1.delay(function()\r\n   {\r\n    return Seq$1.append(!(!d.Signature)?[Concurrency.Return(\"```\\n\"+d.Signature+\"\\n```\")]:[],Seq$1.delay(function()\r\n    {\r\n     function g(v)\r\n     {\r\n      return Concurrency.Return(v);\r\n     }\r\n     return Seq$1.append(!(!d.Comment)?[Concurrency.Bind((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.FSharpStation+Markdown.createCommentBlock:-1840423385\",[d.Comment]),function(x)\r\n     {\r\n      return g(Monaco$1.fixMarkDown(x));\r\n     })]:[],Seq$1.delay(function()\r\n     {\r\n      return!(!d.Footer)?[Concurrency.Return(Monaco$1.fixMarkDown(d.Footer))]:[];\r\n     }));\r\n    }));\r\n   }));\r\n  },Seq$1.collect(Global.id,descs)));\r\n };\r\n Monaco$1.fixMarkDown=function(v)\r\n {\r\n  return Strings.concat(\"\\n\\n\",Seq$1.map(function(l)\r\n  {\r\n   var i;\r\n   i=Seq$1.length(Seq$1.takeWhile(function(y)\r\n   {\r\n    return\" \"===y;\r\n   },l));\r\n   return Strings.replicate(i,\"&nbsp;\")+Slice.string(l,{\r\n    $:1,\r\n    $0:i\r\n   },null);\r\n  },Seq$1.map(function(l)\r\n  {\r\n   return Strings.Replace(l,\"\\u0009\",\"- \");\r\n  },String.splitByChar(\"\\n\",v))));\r\n };\r\n Monaco$1.getSnippetModel=function(sid)\r\n {\r\n  var x,_s,c;\r\n  x=(_s=\"snpId:\"+(c=sid.get_Id(),Global.String(c)),self.monaco.Uri.parse(_s));\r\n  return Monaco$1.getModelUri(Snippets.runReader(function(x$1)\r\n  {\r\n   return Operators$7.FailWith(Global.String(x$1));\r\n  },SnippetModule.snippetRm(sid)).snpContent,x);\r\n };\r\n Monaco$1.getModelUri=function(txt,uri)\r\n {\r\n  var model,o,model$1;\r\n  model=(o=(model$1=self.monaco.editor.getModel(uri),!model$1?null:{\r\n   $:1,\r\n   $0:model$1\r\n  }),o==null?self.monaco.editor.createModel(\"\",\"fsharp\",uri):o.$0);\r\n  model.getValue()!==txt?model.setValue(txt):void 0;\r\n  return model;\r\n };\r\n Monaco$1.getSnipIdIndentAndFirst=function(line)\r\n {\r\n  var p,x;\r\n  function p$1(a,a$1)\r\n  {\r\n   return line>=a$1[1]&&line<=a$1[2];\r\n  }\r\n  p=(x=Seq$1.tryFind(function($1)\r\n  {\r\n   return p$1($1[0],$1[1]);\r\n  },Monaco$1.startsV().Get()),(Monaco$1.defaultStart())(x));\r\n  return[p[0][0],p[1][0],p[1][1]];\r\n };\r\n Monaco$1.getIndentAndFirst=function()\r\n {\r\n  var currId,p,x,f;\r\n  function f$1(t)\r\n  {\r\n   return t[0];\r\n  }\r\n  function g(t)\r\n  {\r\n   return t[0];\r\n  }\r\n  function g$1(y)\r\n  {\r\n   return Unchecked.Equals(currId,y);\r\n  }\r\n  currId=Snippets.currentSnippetV().Get().snpId;\r\n  p=(x=Seq$1.tryFind((f=function(x$1)\r\n  {\r\n   return g(f$1(x$1));\r\n  },function(x$1)\r\n  {\r\n   return g$1(f(x$1));\r\n  }),Monaco$1.startsV().Get()),(Monaco$1.defaultStart())(x));\r\n  return[p[1][0],p[1][1]];\r\n };\r\n Monaco$1.defaultStart=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.defaultStart;\r\n };\r\n Monaco$1.startsV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.startsV;\r\n };\r\n JumpTo.jumpToRef=function(e)\r\n {\r\n  var v,s;\r\n  function c(line,from,to_)\r\n  {\r\n   return s>=from&&s<to_?{\r\n    $:1,\r\n    $0:line\r\n   }:null;\r\n  }\r\n  v=e.value;\r\n  s=e.selectionStart;\r\n  JumpTo.jumpToLine(Seq$1.pick(function($1)\r\n  {\r\n   return c($1[0],$1[1],$1[2]);\r\n  },(Seq$1.mapFold(function(total,line)\r\n  {\r\n   return[[line,total,total+line.length+1],total+line.length+1];\r\n  },0,Strings.SplitChars(v,[\"\\n\"],0)))[0]));\r\n };\r\n JumpTo.jumpToLine=function(a)\r\n {\r\n  var a$1,t,col,guid,line;\r\n  a$1=LibraryJS.REGEX$1(JumpTo.rexGuid(),\"\",a);\r\n  a$1!=null&&a$1.$==1?(t=a$1.$0,!Unchecked.Equals(t,null)&&t.length===6)?(col=Arrays.get(a$1.$0,2),guid=Arrays.get(a$1.$0,5),line=Arrays.get(a$1.$0,1),Concurrency.Start(Monaco$1[\"goto\"](new SnippetId({\r\n   $:0,\r\n   $0:guid\r\n  }),Operators$7.toInt(Global.Number(line)),Operators$7.toInt(Global.Number(col))),null)):void 0:void 0;\r\n };\r\n JumpTo.rexGuid=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.rexGuid$1;\r\n };\r\n CustomAction.setScrollToBottom=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.setScrollToBottom;\r\n };\r\n CustomAction.scrollToBottom=function(el)\r\n {\r\n  var b;\r\n  Concurrency.Start((b=null,Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Concurrency.Sleep(100),function()\r\n   {\r\n    el.scrollTop=el.scrollHeight;\r\n    return Concurrency.Zero();\r\n   });\r\n  })),null);\r\n };\r\n CustomAction.setCurrentProperty=function(p,v)\r\n {\r\n  Snippets.setProperty(Snippets.currentSnippetV().Get(),p,v);\r\n };\r\n CustomAction.getCurrentProperty=function(p)\r\n {\r\n  var x;\r\n  return AsyncResult.absorbO(function()\r\n  {\r\n   return(ResultMessageHelpers.errorMsgf(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"Property \"+Utils.toSafe($2)+\" not found\");\r\n    };\r\n   }))(p);\r\n  },AsyncResult.map(function(t)\r\n  {\r\n   return t[0];\r\n  },(x=CustomAction.propO(Snippets.currentSnippetV().Get(),p),FusionAsyncM.runReader(Snippets.snippetsColl(),x))));\r\n };\r\n CustomAction.buttonClick=function(e)\r\n {\r\n  CustomAction.actionClick(Strings.Trim(e.textContent));\r\n };\r\n CustomAction.actionClick=function(name)\r\n {\r\n  var x;\r\n  x=CustomAction.actionClickRm(name);\r\n  FusionAsyncM.iterReaderA(function(v)\r\n  {\r\n   Library.print(v);\r\n  },function(v)\r\n  {\r\n   Library.print(v);\r\n  },Snippets.snippetsColl(),x);\r\n };\r\n CustomAction.actionSnp=function(path,name)\r\n {\r\n  var x;\r\n  x=CustomAction.actionSnpRm(path,name);\r\n  FusionAsyncM.iterReaderA(function(v)\r\n  {\r\n   Library.print(v);\r\n  },function(v)\r\n  {\r\n   Library.print(v);\r\n  },Snippets.snippetsColl(),x);\r\n };\r\n CustomAction.actionSnpRm=function(snpPath,name)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm({\r\n    $:1,\r\n    $0:Strings.SplitChars(snpPath,[\"/\"],0)\r\n   })),function(a)\r\n   {\r\n    var snp;\r\n    function f(v)\r\n    {\r\n     return CustomAction.fetchValue(name,v);\r\n    }\r\n    return a!=null&&a.$==1?(snp=a.$0,b.Bind(Operators$4.op_BarGreaterGreater(CustomAction.getCode(snp,name),function(c)\r\n    {\r\n     return CustomAction.translateString(f,c);\r\n    }),function(a$1)\r\n    {\r\n     return b.Bind(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FSharpStationClient.setAddress:-574353144\",[new Address({\r\n      $:0,\r\n      $0:FStation.id()\r\n     })])),function()\r\n     {\r\n      return b.Bind(Operators$4.op_BarGreaterGreater(FusionAsyncM.ofFusionM(SnippetModule.fastCodeRm({\r\n       $:1,\r\n       $0:snp.snpId\r\n      },{\r\n       $:1,\r\n       $0:snp.snpId\r\n      })),function(t)\r\n      {\r\n       return t[0];\r\n      }),function(a$2)\r\n      {\r\n       return b.Bind(FusionAsyncM.ofFusionM(SnippetModule.predsGenerationRm(snp)),function(a$3)\r\n       {\r\n        return b.ReturnFrom(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FsiAgent.evalCodeWithPresence:854633647\",[FStation.srcDir(),(function($1)\r\n        {\r\n         return function($2)\r\n         {\r\n          return $1(FSharpStation_GeneratedPrintf.p$2($2));\r\n         };\r\n        }(Global.id))(snp.snpId),(new Date(a$3)).toLocaleString(),{\r\n         $:0,\r\n         $0:a$2\r\n        },{\r\n         $:0,\r\n         $0:a$1\r\n        }])));\r\n       });\r\n      });\r\n     });\r\n    })):b.ReturnFrom(FusionAsyncM.ofResultRM({\r\n     $:1,\r\n     $0:new ResultMessage({\r\n      $:1,\r\n      $0:(function($1)\r\n      {\r\n       return function($2)\r\n       {\r\n        return $1(\"Snippet \"+Utils.toSafe($2)+\" not found\");\r\n       };\r\n      }(Global.id))(snpPath)\r\n     })\r\n    }));\r\n   });\r\n  }));\r\n };\r\n CustomAction.setSnippetContent=function(snpPath,content)\r\n {\r\n  var x,b;\r\n  x=(b=FusionAsyncM.fusion(),b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm({\r\n    $:1,\r\n    $0:Strings.SplitChars(snpPath,[\"/\"],0)\r\n   })),function(a)\r\n   {\r\n    var snp;\r\n    return a!=null&&a.$==1?(snp=a.$0,(Snippets.setSnippet(Snippet.New(snp.snpId,snp.snpName,content,snp.snpParentIdO,snp.snpPredIds,snp.snpProperties,snp.snpModified)),b.Zero())):b.ReturnFrom(FusionAsyncM.ofResultRM({\r\n     $:1,\r\n     $0:new ResultMessage({\r\n      $:1,\r\n      $0:(function($1)\r\n      {\r\n       return function($2)\r\n       {\r\n        return $1(\"Snippet \"+Utils.toSafe($2)+\" not found\");\r\n       };\r\n      }(Global.id))(snpPath)\r\n     })\r\n    }));\r\n   });\r\n  })));\r\n  FusionAsyncM.iterReaderA(function(v)\r\n  {\r\n   Library.print(v);\r\n  },function()\r\n  {\r\n   Library.print();\r\n  },Snippets.snippetsColl(),x);\r\n };\r\n CustomAction.actionClickRm=function(name)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var a;\r\n   a=(function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"Action \"+Utils.toSafe($2)+\" ...\");\r\n    };\r\n   }(Global.id))(name);\r\n   FStation.outputMsgs().Set(a);\r\n   return b.Bind(CustomAction.getBaseSnippet(),function(a$1)\r\n   {\r\n    function f(v)\r\n    {\r\n     return CustomAction.fetchValue(name,v);\r\n    }\r\n    return b.Bind(Operators$4.op_BarGreaterGreater(CustomAction.getCode(a$1,name),function(c)\r\n    {\r\n     return CustomAction.translateString(f,c);\r\n    }),function(a$2)\r\n    {\r\n     return b.Bind(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FSharpStationClient.setAddress:-574353144\",[new Address({\r\n      $:0,\r\n      $0:FStation.id()\r\n     })])),function()\r\n     {\r\n      return b.Bind(Operators$4.op_BarGreaterGreater(FusionAsyncM.ofFusionM(SnippetModule.fastCodeRm({\r\n       $:1,\r\n       $0:a$1.snpId\r\n      },{\r\n       $:1,\r\n       $0:a$1.snpId\r\n      })),function(t)\r\n      {\r\n       return t[0];\r\n      }),function(a$3)\r\n      {\r\n       return b.Bind(FusionAsyncM.ofFusionM(SnippetModule.predsGenerationRm(a$1)),function(a$4)\r\n       {\r\n        return b.ReturnFrom(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FsiAgent.evalCodeWithPresence:854633647\",[FStation.srcDir(),(function($1)\r\n        {\r\n         return function($2)\r\n         {\r\n          return $1(FSharpStation_GeneratedPrintf.p$2($2));\r\n         };\r\n        }(Global.id))(a$1.snpId),(new Date(a$4)).toLocaleString(),{\r\n         $:0,\r\n         $0:a$3\r\n        },{\r\n         $:0,\r\n         $0:a$2\r\n        }])));\r\n       });\r\n      });\r\n     });\r\n    });\r\n   });\r\n  }));\r\n };\r\n CustomAction.fetchValue=function(button,v)\r\n {\r\n  var o,o$1,t;\r\n  return v===\"button\"?button:(o=(o$1=(t=(AppFramework.splitName(new PlugInName({\r\n   $:0,\r\n   $0:\"Snp_\"+Strings.Replace(Global.String(Snippets.currentSnippetV().Get().snpId.get_Id()),\"-\",\"\")\r\n  })))(v),AppFramework.tryGetWoW(t[0],t[1])),o$1==null?null:View$1.TryGet(o$1.$0)),o==null?(function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"$[not found:\"+Utils.toSafe($2)+\"]\");\r\n   };\r\n  }(Global.id))(v):o.$0);\r\n };\r\n CustomAction.getCode=function(snp,name)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var b$1;\r\n   return b.Bind((b$1=FusionAsyncM.fusion(),b$1.Run(b$1.Delay(function()\r\n   {\r\n    return b$1.Bind(CustomAction.propO(snp,name),function(a)\r\n    {\r\n     return a==null?Strings.StartsWith(name,\":\")?b$1.Return(Slice.string(name,{\r\n      $:1,\r\n      $0:1\r\n     },null)):b$1.Bind(CustomAction.propO(snp,\"action-template\"),function(a$1)\r\n     {\r\n      return b$1.Return(a$1==null?\"${button}() |> printfn \\\"%A\\\"\":a$1.$0);\r\n     }):b$1.Return(a.$0);\r\n    });\r\n   }))),function(a)\r\n   {\r\n    return b.Bind(CustomAction.codeModule(snp,a),function(a$1)\r\n    {\r\n     return b.Return(Snippets.prepAnyCode(a$1));\r\n    });\r\n   });\r\n  }));\r\n };\r\n CustomAction.codeModule=function(snp,code)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(CustomAction.propO(snp,\"Open\"),function(a)\r\n   {\r\n    var x;\r\n    return a!=null&&a.$==1?b.Return((x=(String.indentStr(4))(a.$0+\"\\n\"+code),(((Runtime.Curried3(function($1,$2,$3)\r\n    {\r\n     return $1(\"module Call\"+Utils.toSafe($2)+\" =\\n\"+Utils.toSafe($3));\r\n    }))(Global.id))(Global.String(Date.now())))(x))):b.Return(code);\r\n   });\r\n  }));\r\n };\r\n CustomAction.getBaseSnippet=function()\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var snp;\r\n   snp=Snippets.currentSnippetV().Get();\r\n   return b.Bind(CustomAction.propO(snp,\"BaseSnippet\"),function(a)\r\n   {\r\n    return b.ReturnFrom(Operators$4.op_BarGreaterGreater(Operators$4.op_BarGreaterGreater(FusionAsyncM.insertO(a==null?null:{\r\n     $:1,\r\n     $0:FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm({\r\n      $:1,\r\n      $0:Strings.SplitChars(a.$0,[\"/\"],0)\r\n     }))\r\n    }),function(o)\r\n    {\r\n     return o==null?null:o.$0;\r\n    }),function(o)\r\n    {\r\n     return o==null?snp:o.$0;\r\n    }));\r\n   });\r\n  }));\r\n };\r\n CustomAction.translateString=function(f,code)\r\n {\r\n  function translate(acc,s)\r\n  {\r\n   var a;\r\n   a=String.delimitedO(\"${\",\"}\",s);\r\n   return a!=null&&a.$==1?translate(acc+a.$0[0],f(a.$0[1])+a.$0[2]):acc+s;\r\n  }\r\n  return translate(\"\",code);\r\n };\r\n CustomAction.propO=function(snp,p)\r\n {\r\n  function m($1,$2)\r\n  {\r\n   return $2[0];\r\n  }\r\n  return Operators$4.op_BarGreaterGreater(FusionAsyncM.ofFusionM(SnippetModule.propertyHierORm(p,snp)),function(o)\r\n  {\r\n   var $1;\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:($1=o.$0,m($1[0],$1[1]))\r\n   };\r\n  });\r\n };\r\n Model$1.New=function(snippets,modified,collapsed)\r\n {\r\n  return{\r\n   snippets:snippets,\r\n   modified:modified,\r\n   collapsed:collapsed\r\n  };\r\n };\r\n Serializer$1.serModel=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serModel;\r\n };\r\n Serializer$1.getModel=function(snippets,gen,coll)\r\n {\r\n  return Model$1.New(Arrays.ofSeq(snippets),gen,coll);\r\n };\r\n Serializer$1.serSnippet=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serSnippet;\r\n };\r\n Serializer$1.serSnippetId=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serSnippetId;\r\n };\r\n LoadSave.saveAs=function()\r\n {\r\n  var name,m,x,t;\r\n  name=(m=Seq$1.last(Strings.SplitChars(LoadSave.fileName().Get(),[\"/\",\"\\\\\"],0)),m===\"\"?\"noname.snippets\":m);\r\n  Global.saveAs(new Global.Blob([(x=(t=Snippets.getSnippetsGen(),Serializer$1.getModel(t[0],t[1],t[2])),(Serializer$1.serModel())[0](x))],{\r\n   type:\"text/plain;charset=utf-8\"\r\n  }),name);\r\n  Snippets.updateGeneration();\r\n };\r\n LoadSave.loadTextFile=function(element)\r\n {\r\n  var files,reader;\r\n  if(LoadSave.canLoad())\r\n   {\r\n    files=element.files;\r\n    files.length>0?(reader=new Global.FileReader(),reader.onload=function(e)\r\n    {\r\n     return LoadSave.parseText(e.target.result);\r\n    },LoadSave.fileName().Set(files.item(0).name),reader.readAsText(files.item(0))):void 0;\r\n   }\r\n };\r\n LoadSave.parseText=function(txt)\r\n {\r\n  var mdl,x;\r\n  try\r\n  {\r\n   mdl=(x=JSON.parse(txt),(Serializer$1.serModel())[1](x));\r\n   Snippets.setSnippetsGen(mdl.snippets,mdl.collapsed);\r\n  }\r\n  catch(e)\r\n  {\r\n   Global.alert(Global.String(e));\r\n   ((function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Utils.prettyPrint($2));\r\n    };\r\n   }(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(e));\r\n  }\r\n };\r\n LoadSave.canLoad=function()\r\n {\r\n  return Unchecked.Equals(View$1.TryGet(Snippets.SaveAsClassW()),{\r\n   $:1,\r\n   $0:\"\"\r\n  })||Global.confirm(\"Changes have not been saved, do you really want to load?\");\r\n };\r\n LoadSave.fileName=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.fileName$1;\r\n };\r\n Importer.importFile=function(element)\r\n {\r\n  var files,reader;\r\n  if(LoadSave.canLoad())\r\n   {\r\n    files=element.files;\r\n    files.length>0?(reader=new Global.FileReader(),reader.onload=function(e)\r\n    {\r\n     return Importer.parseText(e.target.result);\r\n    },reader.readAsText(files.item(0))):void 0;\r\n   }\r\n };\r\n Importer.parseText=function(txt)\r\n {\r\n  var x;\r\n  try\r\n  {\r\n   Snippets.setSnippetsGen((x=JSON.parse(txt),(Importer.serSnippets())[1](x)),new FSharpSet.New$1(null));\r\n  }\r\n  catch(e)\r\n  {\r\n   Global.alert(Global.String(e));\r\n   ((function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(Utils.prettyPrint($2));\r\n    };\r\n   }(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(e));\r\n  }\r\n };\r\n Importer.serSnippets=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serSnippets;\r\n };\r\n Importer.serSnippet2=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serSnippet2;\r\n };\r\n Importer.serSnippetId2=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.serSnippetId2;\r\n };\r\n EndPoint.NoSnippet={\r\n  $:2\r\n };\r\n MainProgram.mainProgram=function()\r\n {\r\n  var l,m,v,prior,v$1,prior$1,b,M,p;\r\n  AppFramework.addPlugIn(PlugIn.New(new PlugInName({\r\n   $:0,\r\n   $0:\"FSharpStation\"\r\n  }),ListModel$1.Create(function(v$2)\r\n  {\r\n   return v$2.varName;\r\n  },[AppFramework.newVar(new PlgElemName({\r\n   $:0,\r\n   $0:\"fileName\"\r\n  }),LoadSave.fileName()),AppFramework.newVar(new PlgElemName({\r\n   $:0,\r\n   $0:\"SnippetName\"\r\n  }),MainProgram.snippetNameV()),AppFramework.newVar(new PlgElemName({\r\n   $:0,\r\n   $0:\"Content\"\r\n  }),MainProgram.contentV()),AppFramework.newVar(new PlgElemName({\r\n   $:0,\r\n   $0:\"Output\"\r\n  }),FStation.outputMsgs()),AppFramework.newVar(new PlgElemName({\r\n   $:0,\r\n   $0:\"Parser\"\r\n  }),FStation.annotationsV())]),ListModel$1.Create(function(w)\r\n  {\r\n   return w.viwName;\r\n  },[AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"FsCode\"\r\n  }),Snippets.FsCodeW()),AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"SaveNeeded\"\r\n  }),Snippets.SaveAsClassW()),AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"CurrentPath\"\r\n  }),Snippets.currentPathW()),AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"FStationId\"\r\n  }),View$1.Const(FStation.id())),AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"CurrentSid\"\r\n  }),View$1.Map(function(sid)\r\n  {\r\n   return Global.String(sid.get_Id());\r\n  },Snippets.CurrentSnippetIdW()))]),ListModel$1.Create(function(w)\r\n  {\r\n   return w.docName;\r\n  },[AppFramework.newDoc(new PlgElemName({\r\n   $:0,\r\n   $0:\"mainDoc\"\r\n  }),Lazy.Create(MainProgram.mainDoc)),AppFramework.newDoc(new PlgElemName({\r\n   $:0,\r\n   $0:\"editor\"\r\n  }),Lazy.Create(function()\r\n  {\r\n   return Doc.Element(\"div\",[],[Monaco$1.editorDoc()]);\r\n  })),AppFramework.newDoc(new PlgElemName({\r\n   $:0,\r\n   $0:\"Snippets\"\r\n  }),Lazy.Create(RenderSnippets.render)),AppFramework.newDoc(new PlgElemName({\r\n   $:0,\r\n   $0:\"Properties\"\r\n  }),Lazy.Create(RenderProperties.render)),AppFramework.newDoc(new PlgElemName({\r\n   $:0,\r\n   $0:\"ButtonsRight\"\r\n  }),Lazy.Create(MainProgram.buttonsRight))]),ListModel$1.Create(function(w)\r\n  {\r\n   return w.actName;\r\n  },[AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"AddSnippet\"\r\n  }),function()\r\n  {\r\n   Snippets.newSnippet();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"RemoveSnippet\"\r\n  }),function()\r\n  {\r\n   MainProgram.deleteSnippet();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"IndentIn\"\r\n  }),function()\r\n  {\r\n   Snippets.indentIn();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"IndentOut\"\r\n  }),function()\r\n  {\r\n   Snippets.indentOut();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"AddProperty\"\r\n  }),function()\r\n  {\r\n   RenderProperties.addProperty();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"SaveAs\"\r\n  }),function()\r\n  {\r\n   LoadSave.saveAs();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"RunFS\"\r\n  }),function()\r\n  {\r\n   MainProgram.runFsCode();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"SelectionToFsi\"\r\n  }),function()\r\n  {\r\n   MainProgram.selectionToFsi();\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"AbortFsi\"\r\n  }),function()\r\n  {\r\n   (new AjaxRemotingProvider.New()).Send(\"FSharpStation:FsRoot.Library2+FsiAgent.abortFsiExe:6\",[]);\r\n  }),AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"DisposeFsi\"\r\n  }),function()\r\n  {\r\n   (new AjaxRemotingProvider.New()).Send(\"FSharpStation:FsRoot.Library2+FsiAgent.disposeFsiExe:6\",[]);\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"LoadFile\"\r\n  }),{\r\n   $:1,\r\n   $0:function(o)\r\n   {\r\n    LoadSave.loadTextFile(o);\r\n   },\r\n   $1:\"FileElement\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"Import\"\r\n  }),{\r\n   $:1,\r\n   $0:function(o)\r\n   {\r\n    Importer.importFile(o);\r\n   },\r\n   $1:\"FileElement\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"JumpTo\"\r\n  }),{\r\n   $:1,\r\n   $0:function(o)\r\n   {\r\n    JumpTo.jumpToRef(o);\r\n   },\r\n   $1:\"textarea\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"ButtonClick\"\r\n  }),{\r\n   $:1,\r\n   $0:function(o)\r\n   {\r\n    CustomAction.buttonClick(o);\r\n   },\r\n   $1:\"button\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"ActionClick\"\r\n  }),{\r\n   $:1,\r\n   $0:function(o)\r\n   {\r\n    CustomAction.actionClick(o);\r\n   },\r\n   $1:\"name\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"SetScrollToBottom\"\r\n  }),{\r\n   $:1,\r\n   $0:function(o)\r\n   {\r\n    (CustomAction.setScrollToBottom())(o);\r\n   },\r\n   $1:\"textarea\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"ActionSnp\"\r\n  }),{\r\n   $:2,\r\n   $0:function(o1)\r\n   {\r\n    return function(o2)\r\n    {\r\n     return CustomAction.actionSnp(o1,o2);\r\n    };\r\n   },\r\n   $1:\"snpPath\",\r\n   $2:\"name\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"setCurrentProperty\"\r\n  }),{\r\n   $:2,\r\n   $0:function(o1)\r\n   {\r\n    return function(o2)\r\n    {\r\n     return CustomAction.setCurrentProperty(o1,o2);\r\n    };\r\n   },\r\n   $1:\"name\",\r\n   $2:\"value\"\r\n  }),AppFramework.newActF(new PlgElemName({\r\n   $:0,\r\n   $0:\"setSnippetContent\"\r\n  }),{\r\n   $:2,\r\n   $0:function(o1)\r\n   {\r\n    return function(o2)\r\n    {\r\n     return CustomAction.setSnippetContent(o1,o2);\r\n    };\r\n   },\r\n   $1:\"path\",\r\n   $2:\"value\"\r\n  })]),ListModel$1.Create(function(w)\r\n  {\r\n   return w.qryName;\r\n  },[AppFramework.newQry(new PlgElemName({\r\n   $:0,\r\n   $0:\"PropertyRA\"\r\n  }),CustomAction.getCurrentProperty)])));\r\n  NewLY.addNewLayout((l=(m=self.document.getElementById(\"GlobalLayout\"),Unchecked.Equals(m,null)?\"\\n                    menuEditor       horizontal  65       menuLogo                  editorMessages\\n                    double           horizontal  0-50-100 AppFramework.AppFwkClient menuEditor\\n                    menuLogo         vertical    350      logo                      menu\\n                    logo             span       \\\"margin:0; color:gray; font-size: 55px; font-weight:530\\\" \\\"F# Station\\\"\\n                    editorMessages   horizontal 10-83-100 editorButtons             messages\\n                    messages         vertical   0-50-100  messagesLeft              messagesRight\\n                    editorButtons    vertical -120 snippetsSnippet buttons\\n                    buttons div      \\\"overflow: hidden; display: grid; grid-template-columns: 100%; grid-template-rows: repeat(15, calc(100% / 15)); bxackground-color: #eee; box-sizing: border-box; padding : 5px; grid-gap: 5px; margin-right: 21px\\\" btnSaveAs none x btnAddSnippet btnDeleteSnippet btnIndentIn btnIndentOut none x btnRunFS btnInputFsi btnAbortFsi\\n                    snippetsSnippet  vertical   0-20-100  snippets                  editorProperties\\n                    snippets         horizontal 20        \\\"${FSharpStation.CurrentPath}\\\" FSharpStation.Snippets\\n                    editorProperties vertical   0-100-100 snippet                   properties\\n                    properties       div        \\\"\\\"        FSharpStation.Properties\\n                    snippet          horizontal 35        Name                      FSharpStation.editor\\n                    menu             span  \\\"\\\" btnLoad btnImport\\n        \\n                    btnSaveAs        button FSharpStation.SaveAs         \\\"class=btn ${FSharpStation.SaveNeeded}\\\" \\\"Save as...    \\\"\\n                    btnAddSnippet    button FSharpStation.AddSnippet     \\\"\\\"                  \\\"Add Snippet   \\\"\\n                    btnDeleteSnippet button FSharpStation.RemoveSnippet  \\\"\\\"                  \\\"Delete Snippet\\\"\\n                    btnIndentIn      button FSharpStation.IndentIn       \\\"\\\"                  \\\"Indent In  >> \\\"\\n                    btnIndentOut     button FSharpStation.IndentOut      \\\"\\\"                  \\\"Indent Out << \\\"\\n                    btnRunFS         button FSharpStation.RunFS          \\\"\\\"                  \\\"Run F#        \\\"\\n                    btnInputFsi      button FSharpStation.selectionToFsi   \\\"\\\"                  \\\"selection |> Fsi\\\"\\n                    btnAbortFsi      button FSharpStation.AbortFsi       \\\"\\\"                  \\\"Abort Fsi     \\\"\\n        \\n                    messagesLeft     wcomp-tabstrip                      \\\"\\\"                  Output FsCode\\n                    messagesRight    wcomp-tabstrip                      \\\"\\\"                  Parser\\n        \\n                    Output           textarea  FSharpStation.Output      \\\"tabname=Output ; placeholder=Output messages ; spellcheck=false\\\" \\n                    FsCode           textarea  FSharpStation.FsCode      \\\"tabname=F# Code; placeholder=F# Code         ; spellcheck=false\\\" \\n                    Parser           textarea  FSharpStation.Parser      \\\"tabname=Parser ; placeholder=Parser messages; dblclick=${FSharpStation.JumpTo} ; spellcheck=false\\\" \\n                    Name             Doc       InputLabel                \\\"\\\"     \\\"Name:\\\"        FSharpStation.SnippetName\\n                    btnLoad          Doc       InputFile                 \\\"\\\"     \\\"Load File...\\\" FSharpStation.LoadFile  FileName\\n                    btnImport        Doc       InputFile                 \\\"\\\"     \\\"Import...\\\"    FSharpStation.Import    \\\"\\\"\\n                    FileName         div                                 \\\"class=form-control\\\"  FSharpStation.fileName\\n                  \":m.textContent),LayoutEngineModule.newLyt(MainProgram.FStationLyt(),l)));\r\n  View$1.Sink(function(lytO)\r\n  {\r\n   (Option.iter(function(t)\r\n   {\r\n    try\r\n    {\r\n     self[\"eval\"].apply(self,[\"CIPHERSpaceLoadFilesDoAfter(function(){IntelliFactory.Runtime.Start()})\"]);\r\n     self[\"eval\"].apply(self,[t[1]]);\r\n    }\r\n    catch(e)\r\n    {\r\n     Library.print(e);\r\n    }\r\n   }))(lytO);\r\n  },(v=Snippets.currentLayoutJSDW(),(prior=[Var$1.Create$1(null)],(View$1.Sink(function(v$2)\r\n  {\r\n   if(!Unchecked.Equals(prior[0].Get(),v$2))\r\n    prior[0].Set(v$2);\r\n  },v),prior[0].get_View()))));\r\n  View$1.Sink(function(lytO)\r\n  {\r\n   var a,x,$1,name,txt,v$2;\r\n   a=(x=lytO==null?null:($1=lytO.$0,(name=$1[0],(txt=$1[1],(NewLY.addNewLayout(LayoutEngineModule.newLyt(new PlugInName({\r\n    $:0,\r\n    $0:name\r\n   }),txt)),txt===\"\"?null:{\r\n    $:1,\r\n    $0:name\r\n   })))),(v$2=MainProgram.FStationLyt().get_Id(),x==null?v$2:x.$0));\r\n   AppFramework.mainDocV().Set(a);\r\n  },(v$1=Snippets.currentLayoutDW(),(prior$1=[Var$1.Create$1(null)],(View$1.Sink(function(v$2)\r\n  {\r\n   if(!Unchecked.Equals(prior$1[0].Get(),v$2))\r\n    prior$1[0].Set(v$2);\r\n  },v$1),prior$1[0].get_View()))));\r\n  View$1.Sink(function(v$2)\r\n  {\r\n   var b$1;\r\n   Concurrency.Start((b$1=null,Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(Concurrency.Sleep(500),function()\r\n    {\r\n     self.document.title=v$2;\r\n     return Concurrency.Zero();\r\n    });\r\n   })),null);\r\n  },Snippets.currentPathW());\r\n  b=(M=AppFramework.getMainDoc().f(),ProviderBuilder.Make().WithHole({\r\n   $:0,\r\n   $0:\"maincontent\",\r\n   $1:M\r\n  }));\r\n  p=Handler$1.CompleteHoles(b.k,b.h,[]);\r\n  b.i=new TemplateInstance.New(p[1],Templates.RunFullDocTemplate(p[0]));\r\n };\r\n MainProgram.contentV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.contentV;\r\n };\r\n MainProgram.snippetNameV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.snippetNameV;\r\n };\r\n MainProgram.mainDoc$9584$78=Global.id;\r\n MainProgram.mainDoc$9575$39=function()\r\n {\r\n  return function(ev)\r\n  {\r\n   JumpTo.jumpToRef(ev.Target);\r\n  };\r\n };\r\n MainProgram.mainDoc$9574$39=function()\r\n {\r\n  return function(ev)\r\n  {\r\n   ev.Target.value=\"\";\r\n  };\r\n };\r\n MainProgram.mainDoc$9573$39=function()\r\n {\r\n  return function(ev)\r\n  {\r\n   Importer.importFile(ev.Target);\r\n  };\r\n };\r\n MainProgram.mainDoc$9572$39=function()\r\n {\r\n  return function(ev)\r\n  {\r\n   ev.Target.value=\"\";\r\n  };\r\n };\r\n MainProgram.mainDoc$9571$39=function()\r\n {\r\n  return function(ev)\r\n  {\r\n   LoadSave.loadTextFile(ev.Target);\r\n  };\r\n };\r\n MainProgram.mainDoc=function()\r\n {\r\n  var tmp,t,t$1,t$2,t$3,t$4,p,i;\r\n  tmp=MainProgram.hookDoc(\"FSharpStation\",\"ButtonsRight\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:0,\r\n    $0:\"buttonsright\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookDoc(\"FSharpStation\",\"Properties\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:0,\r\n    $0:\"properties\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookDoc(\"FSharpStation\",\"Snippets\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:0,\r\n    $0:\"snippets\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookDoc(\"FSharpStation\",\"editor\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:0,\r\n    $0:\"codeeditor\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookAct(\"FSharpStation\",\"SaveAs\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole(Handler$1.EventQ2(tmp$1.k,\"saveas\",function()\r\n   {\r\n    return tmp$1.i;\r\n   },a));\r\n  },MainProgram.hookViw(\"FSharpStation\",\"SaveNeeded\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:2,\r\n    $0:\"saveasclass\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookViw(\"FSharpStation\",\"FSCode\",function(tmp$1,vw)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:8,\r\n    $0:\"fscode\",\r\n    $1:new FromView.New(vw,Global.ignore)\r\n   });\r\n  },MainProgram.hookVar(\"FSharpStation\",\"Parser\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:8,\r\n    $0:\"parser\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookVar(\"FSharpStation\",\"Output\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:8,\r\n    $0:\"output\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookVar(\"FSharpStation\",\"SnippetName\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:8,\r\n    $0:\"name\",\r\n    $1:a\r\n   });\r\n  },MainProgram.hookVar(\"FSharpStation\",\"fileName\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole({\r\n    $:8,\r\n    $0:\"filename\",\r\n    $1:a\r\n   });\r\n  },(t=(t$1=(t$2=(t$3=(t$4=ProviderBuilder.Make(),t$4.WithHole(Handler$1.EventQ2(t$4.k,\"loadfilechanged\",function()\r\n  {\r\n   return t$4.i;\r\n  },function(ev)\r\n  {\r\n   LoadSave.loadTextFile(ev.Target);\r\n  }))),t$3.WithHole(Handler$1.EventQ2(t$3.k,\"loadfileclear\",function()\r\n  {\r\n   return t$3.i;\r\n  },function(ev)\r\n  {\r\n   ev.Target.value=\"\";\r\n  }))),t$2.WithHole(Handler$1.EventQ2(t$2.k,\"importfilechanged\",function()\r\n  {\r\n   return t$2.i;\r\n  },function(ev)\r\n  {\r\n   Importer.importFile(ev.Target);\r\n  }))),t$1.WithHole(Handler$1.EventQ2(t$1.k,\"importfileclear\",function()\r\n  {\r\n   return t$1.i;\r\n  },function(ev)\r\n  {\r\n   ev.Target.value=\"\";\r\n  }))),t.WithHole(Handler$1.EventQ2(t.k,\"jumpref\",function()\r\n  {\r\n   return t.i;\r\n  },function(ev)\r\n  {\r\n   JumpTo.jumpToRef(ev.Target);\r\n  }))))))))))))));\r\n  return(p=Handler$1.CompleteHoles(tmp.k,tmp.h,[[\"filename\",0],[\"name\",0],[\"output\",0],[\"fscode\",0],[\"parser\",0]]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.layout(p[0])),(tmp.i=i,i))).get_Doc();\r\n };\r\n MainProgram.buttonsRight$9557$74=Global.id;\r\n MainProgram.buttonsRight$9556$74=Global.id;\r\n MainProgram.buttonsRight$9555$74=Global.id;\r\n MainProgram.buttonsRight$9554$74=Global.id;\r\n MainProgram.buttonsRight$9553$74=Global.id;\r\n MainProgram.buttonsRight=function()\r\n {\r\n  var tmp,p,i;\r\n  tmp=MainProgram.hookAct(\"FSharpStation\",\"RunFS\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole(Handler$1.EventQ2(tmp$1.k,\"runfs\",function()\r\n   {\r\n    return tmp$1.i;\r\n   },a));\r\n  },MainProgram.hookAct(\"FSharpStation\",\"IndentOut\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole(Handler$1.EventQ2(tmp$1.k,\"indentout\",function()\r\n   {\r\n    return tmp$1.i;\r\n   },a));\r\n  },MainProgram.hookAct(\"FSharpStation\",\"IndentIn\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole(Handler$1.EventQ2(tmp$1.k,\"indentin\",function()\r\n   {\r\n    return tmp$1.i;\r\n   },a));\r\n  },MainProgram.hookAct(\"FSharpStation\",\"RemoveSnippet\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole(Handler$1.EventQ2(tmp$1.k,\"removesnippet\",function()\r\n   {\r\n    return tmp$1.i;\r\n   },a));\r\n  },MainProgram.hookAct(\"FSharpStation\",\"AddSnippet\",function(tmp$1,a)\r\n  {\r\n   return tmp$1.WithHole(Handler$1.EventQ2(tmp$1.k,\"addsnippet\",function()\r\n   {\r\n    return tmp$1.i;\r\n   },a));\r\n  },ProviderBuilder.Make())))));\r\n  return(p=Handler$1.CompleteHoles(tmp.k,tmp.h,[]),(i=new TemplateInstance.New(p[1],FSharpStation_Templates.buttonsright(p[0])),(tmp.i=i,i))).get_Doc();\r\n };\r\n MainProgram.hookDoc=function(plug,name,func,obj)\r\n {\r\n  var o,o$1,doc;\r\n  o=(o$1=AppFramework.tryGetDoc(new PlugInName({\r\n   $:0,\r\n   $0:plug\r\n  }),new PlgElemName({\r\n   $:0,\r\n   $0:name\r\n  })),o$1==null?null:{\r\n   $:1,\r\n   $0:(doc=o$1.$0,((((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"Doc    \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" hooked\");\r\n   }))(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(plug))(name),func(obj,Doc.EmbedView(View$1.Map(function()\r\n   {\r\n    return AppFramework.getActualDoc(doc);\r\n   },AppFramework.mainDocV().get_View())))))\r\n  });\r\n  return o==null?((((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"Doc    \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" not found\");\r\n  }))(function(s)\r\n  {\r\n   console.log(s);\r\n  }))(plug))(name),obj):o.$0;\r\n };\r\n MainProgram.hookAct=function(plug,name,func,obj)\r\n {\r\n  var o,o$1,act;\r\n  o=(o$1=AppFramework.tryGetAct(new PlugInName({\r\n   $:0,\r\n   $0:plug\r\n  }),new PlgElemName({\r\n   $:0,\r\n   $0:name\r\n  })),o$1==null?null:{\r\n   $:1,\r\n   $0:(act=o$1.$0,((((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"Action \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" hooked\");\r\n   }))(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(plug))(name),func(obj,function()\r\n   {\r\n    AppFramework.callFunction(null,null,act.actFunction);\r\n   })))\r\n  });\r\n  return o==null?((((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"Action \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" not found\");\r\n  }))(function(s)\r\n  {\r\n   console.log(s);\r\n  }))(plug))(name),obj):o.$0;\r\n };\r\n MainProgram.hookViw=function(plug,name,func,obj)\r\n {\r\n  var o,o$1;\r\n  o=(o$1=AppFramework.tryGetViw(new PlugInName({\r\n   $:0,\r\n   $0:plug\r\n  }),new PlgElemName({\r\n   $:0,\r\n   $0:name\r\n  })),o$1==null?null:{\r\n   $:1,\r\n   $0:((((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"View   \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" hooked\");\r\n   }))(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(plug))(name),func(obj,o$1.$0.viwView))\r\n  });\r\n  return o==null?((((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"View   \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" not found\");\r\n  }))(function(s)\r\n  {\r\n   console.log(s);\r\n  }))(plug))(name),obj):o.$0;\r\n };\r\n MainProgram.hookVar=function(plug,name,func,obj)\r\n {\r\n  var o,o$1;\r\n  o=(o$1=AppFramework.tryGetVar(new PlugInName({\r\n   $:0,\r\n   $0:plug\r\n  }),new PlgElemName({\r\n   $:0,\r\n   $0:name\r\n  })),o$1==null?null:{\r\n   $:1,\r\n   $0:((((Runtime.Curried3(function($1,$2,$3)\r\n   {\r\n    return $1(\"Var    \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" hooked\");\r\n   }))(function(s)\r\n   {\r\n    console.log(s);\r\n   }))(plug))(name),func(obj,o$1.$0.varVar))\r\n  });\r\n  return o==null?((((Runtime.Curried3(function($1,$2,$3)\r\n  {\r\n   return $1(\"Var    \"+Utils.toSafe($2)+\".\"+Utils.toSafe($3)+\" not found\");\r\n  }))(function(s)\r\n  {\r\n   console.log(s);\r\n  }))(plug))(name),obj):o.$0;\r\n };\r\n MainProgram.FStationLyt=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.FStationLyt;\r\n };\r\n MainProgram.deleteSnippet=function()\r\n {\r\n  var snp;\r\n  snp=Snippets.currentSnippetV().Get();\r\n  !Unchecked.Equals(snp.snpId,SnippetId.get_Empty())&&Global.confirm((function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"Do you want to delete \"+Utils.toSafe($2)+\"?\");\r\n   };\r\n  }(Global.id))(SnippetModule.snippetName(snp.snpName,snp.snpContent)))?Snippets.deleteCurrentSnippet():void 0;\r\n };\r\n MainProgram.selectionToFsi=function()\r\n {\r\n  var x,b,f;\r\n  function g(v)\r\n  {\r\n   FStation.appendMsgs(Strings.Replace(v,\"xXxYyYyhH\",\"Done!\"));\r\n  }\r\n  x=(b=FusionAsyncM.fusion(),b.Run(b.Delay(function()\r\n  {\r\n   return b.Bind(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FSharpStationClient.setAddress:-574353144\",[new Address({\r\n    $:0,\r\n    $0:FStation.id()\r\n   })])),function()\r\n   {\r\n    var s;\r\n    return b.Bind((s=Monaco$1.getSelection(),FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FsiAgent.sendFsiInput:-1181784350\",[s+\";;\"]))),function()\r\n    {\r\n     return b.Return();\r\n    });\r\n   });\r\n  })));\r\n  FusionAsyncM.iterResultA((f=function($1)\r\n  {\r\n   return function($2)\r\n   {\r\n    return $1(\"Error:\\n\"+FSharpStation_GeneratedPrintf.p$30($2));\r\n   };\r\n  }(Global.id),function(x$1)\r\n  {\r\n   return g(f(x$1));\r\n  }),Global.ignore,x);\r\n };\r\n MainProgram.runFsCode=function()\r\n {\r\n  var x;\r\n  function out(v)\r\n  {\r\n   FStation.appendMsgs(Strings.Replace(v,\"xXxYyYyhH\",\"Done!\"));\r\n  }\r\n  x=View$1.TryGet(Snippets.FsCodeW());\r\n  (Option.iter(function(code)\r\n  {\r\n   var x$1,b,f;\r\n   x$1=(b=FusionAsyncM.fusion(),b.Run(b.Delay(function()\r\n   {\r\n    FStation.outputMsgs().Set(\"Running F#...\");\r\n    return b.Bind(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FSharpStationClient.setAddress:-574353144\",[new Address({\r\n     $:0,\r\n     $0:FStation.id()\r\n    })])),function()\r\n    {\r\n     return b.ReturnFrom(FusionAsyncM.ofAsync((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.Library2+FsiAgent.evalCode:-623788033\",[FStation.srcDir(),{\r\n      $:0,\r\n      $0:code\r\n     }])));\r\n    });\r\n   })));\r\n   FusionAsyncM.iterResultA((f=function($1)\r\n   {\r\n    return function($2)\r\n    {\r\n     return $1(\"Error:\\n\"+FSharpStation_GeneratedPrintf.p$30($2));\r\n    };\r\n   }(Global.id),function(x$2)\r\n   {\r\n    return out(f(x$2));\r\n   }),Global.ignore,x$1);\r\n  }))(x);\r\n };\r\n MainProgram.endPointV=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.endPointV;\r\n };\r\n Messaging.processMessage=function(msg)\r\n {\r\n  var x,b;\r\n  return AsyncResult.map(function(t)\r\n  {\r\n   return t[0];\r\n  },(x=(b=FusionAsyncM.fusion(),b.Run(b.Delay(function()\r\n  {\r\n   var $1,t,t$1,t$2,t$3,$2,$3,$4,a,path,prop,v;\r\n   function m(snp)\r\n   {\r\n    Snippets.setProperty(snp,prop,v);\r\n    return\"Ok\";\r\n   }\r\n   switch(msg.$==1?($1=msg.$0,1):msg.$==2?($1=msg.$0,2):msg.$==8?($1=msg.$0,3):msg.$==3?($1=msg.$0,4):msg.$==4?(t=msg.$0,!Unchecked.Equals(t,null)&&t.length===2?Arrays.get(msg.$0,0)===\"AddOutput\"?($1=Arrays.get(msg.$0,1),5):Arrays.get(msg.$0,0)===\"ExecJS\"?($1=Arrays.get(msg.$0,1),6):($1=[Arrays.get(msg.$0,0),Arrays.get(msg.$0,1)],9):(t$1=msg.$0,!Unchecked.Equals(t$1,null)&&t$1.length===4?Arrays.get(msg.$0,0)===\"SetProperty\"?($1=[Arrays.get(msg.$0,1),Arrays.get(msg.$0,2),Arrays.get(msg.$0,3)],7):14:(t$2=msg.$0,!Unchecked.Equals(t$2,null)&&t$2.length===1?($1=Arrays.get(msg.$0,0),8):(t$3=msg.$0,!Unchecked.Equals(t$3,null)&&t$3.length===3?($1=[Arrays.get(msg.$0,0),Arrays.get(msg.$0,1),Arrays.get(msg.$0,2)],10):14)))):msg.$==6?($1=msg.$0,11):msg.$==7?($1=[msg.$1,msg.$0],12):msg.$==5?13:0)\r\n   {\r\n    case 0:\r\n     return b.Return({\r\n      $:0,\r\n      $0:FStation.id()\r\n     });\r\n    case 1:\r\n     return b.Bind(FusionAsyncM.traverseSeq(function(x$1)\r\n     {\r\n      return FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm(x$1));\r\n     },$1),function(a$1)\r\n     {\r\n      return b.Return({\r\n       $:1,\r\n       $0:Arrays.ofSeq(Seq$1.choose(Global.id,a$1))\r\n      });\r\n     });\r\n    case 2:\r\n     Snippets.clearPredsCache();\r\n     return b.Bind(FusionAsyncM.absorbO(function()\r\n     {\r\n      return new ResultMessage({\r\n       $:1,\r\n       $0:(function($5)\r\n       {\r\n        return function($6)\r\n        {\r\n         return $5(\"Snippet not found \"+FSharpStation_GeneratedPrintf.p$31($6));\r\n        };\r\n       }(Global.id))($1)\r\n      });\r\n     },FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm($1))),function(a$1)\r\n     {\r\n      return b.ReturnFrom(Operators$4.op_BarGreaterGreater(Operators$4.op_BarGreaterGreater(FusionAsyncM.ofFusionM(SnippetModule.fastCodeRm({\r\n       $:1,\r\n       $0:a$1.snpId\r\n      },{\r\n       $:1,\r\n       $0:a$1.snpId\r\n      })),function(t$4)\r\n      {\r\n       return t$4[0];\r\n      }),function(a$2)\r\n      {\r\n       return{\r\n        $:0,\r\n        $0:a$2\r\n       };\r\n      }));\r\n     });\r\n    case 3:\r\n     return b.Bind(FusionAsyncM.absorbO(function()\r\n     {\r\n      return new ResultMessage({\r\n       $:1,\r\n       $0:(function($5)\r\n       {\r\n        return function($6)\r\n        {\r\n         return $5(\"Snippet not found \"+FSharpStation_GeneratedPrintf.p$31($6));\r\n        };\r\n       }(Global.id))($1)\r\n      });\r\n     },FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm($1))),function(a$1)\r\n     {\r\n      return b.Bind(FusionAsyncM.ofFusionM(SnippetModule.predsLRm(a$1.snpId)),function(a$2)\r\n      {\r\n       return b.Bind(FusionAsyncM.traverseSeq(function(x$1)\r\n       {\r\n        return FusionAsyncM.ofFusionM(SnippetModule.snippetORm(x$1));\r\n       },a$2),function(a$3)\r\n       {\r\n        function m$1(s)\r\n        {\r\n         return s.snpModified;\r\n        }\r\n        return b.Return({\r\n         $:2,\r\n         $0:Seq$1.max(Seq$1.choose(function(o)\r\n         {\r\n          return o==null?null:{\r\n           $:1,\r\n           $0:m$1(o.$0)\r\n          };\r\n         },a$3))\r\n        });\r\n       });\r\n      });\r\n     });\r\n    case 4:\r\n     return b.Bind(FusionAsyncM.absorbO(function()\r\n     {\r\n      return new ResultMessage({\r\n       $:1,\r\n       $0:(function($5)\r\n       {\r\n        return function($6)\r\n        {\r\n         return $5(\"Snippet not found \"+FSharpStation_GeneratedPrintf.p$31($6));\r\n        };\r\n       }(Global.id))($1)\r\n      });\r\n     },FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm($1))),function(a$1)\r\n     {\r\n      return b.Bind(FusionAsyncM.ofFusionM(SnippetModule.predsLRm(a$1.snpId)),function(a$2)\r\n      {\r\n       return b.Bind(FusionAsyncM.traverseSeq(function(x$1)\r\n       {\r\n        return FusionAsyncM.ofFusionM(SnippetModule.snippetORm(x$1));\r\n       },a$2),function(a$3)\r\n       {\r\n        return b.Return({\r\n         $:1,\r\n         $0:Arrays.ofSeq(Seq$1.choose(Global.id,a$3))\r\n        });\r\n       });\r\n      });\r\n     });\r\n    case 5:\r\n     FStation.appendMsgs($1);\r\n     return b.Return({\r\n      $:0,\r\n      $0:\"Ok\"\r\n     });\r\n    case 6:\r\n     try\r\n     {\r\n      $4={\r\n       $:0,\r\n       $0:(a=self[\"eval\"].apply(self,[$1]),Unchecked.Equals(a,null)?\"\":(function($5)\r\n       {\r\n        return function($6)\r\n        {\r\n         return $5(Utils.prettyPrint($6));\r\n        };\r\n       }(Global.id))(a))\r\n      };\r\n     }\r\n     catch(e)\r\n     {\r\n      $4={\r\n       $:1,\r\n       $0:new ResultMessage({\r\n        $:5,\r\n        $0:e.message,\r\n        $1:e.stack\r\n       })\r\n      };\r\n     }\r\n     $3=FusionAsyncM.ofResultRM($4);\r\n     return b.Bind($3,function(a$1)\r\n     {\r\n      return b.Return({\r\n       $:0,\r\n       $0:a$1\r\n      });\r\n     });\r\n    case 7:\r\n     path=$1[0];\r\n     prop=$1[1];\r\n     v=$1[2];\r\n     return b.Bind(FusionAsyncM.absorbO(function()\r\n     {\r\n      return new ResultMessage({\r\n       $:1,\r\n       $0:(function($5)\r\n       {\r\n        return function($6)\r\n        {\r\n         return $5(\"Snippet not found: \"+Utils.toSafe($6));\r\n        };\r\n       }(Global.id))(path)\r\n      });\r\n     },Operators$4.op_BarGreaterGreater(FusionAsyncM.ofFusionM(SnippetModule.snippetFromRefORm({\r\n      $:1,\r\n      $0:Strings.SplitChars(path,[\"/\"],0)\r\n     })),function(o)\r\n     {\r\n      return o==null?null:{\r\n       $:1,\r\n       $0:m(o.$0)\r\n      };\r\n     })),function(a$1)\r\n     {\r\n      return b.Return({\r\n       $:0,\r\n       $0:a$1\r\n      });\r\n     });\r\n    case 8:\r\n     return b.ReturnFrom(Messaging.actionCall($1,null,null));\r\n    case 9:\r\n     return b.ReturnFrom(Messaging.actionCall($1[0],$1[1],null));\r\n    case 10:\r\n     return b.ReturnFrom(Messaging.actionCall($1[0],$1[1],$1[2]));\r\n    case 11:\r\n     return b.ReturnFrom(Messaging.getValue($1));\r\n    case 12:\r\n     return b.ReturnFrom(Messaging.setValue($1[1],$1[0]));\r\n    case 13:\r\n     return b.Return({\r\n      $:0,\r\n      $0:self.document.baseURI\r\n     });\r\n    case 14:\r\n     return b.Return(Hole.Hole[(function($5)\r\n     {\r\n      return function($6)\r\n      {\r\n       return $5(\"TODO message: \"+FSharpStation_GeneratedPrintf.p$32($6));\r\n      };\r\n     }(Global.id))(msg)]);\r\n   }\r\n  }))),FusionAsyncM.runReader(Snippets.snippetsColl(),x)));\r\n };\r\n Messaging.setValue=function(vname,v)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var m,t;\r\n   m=(t=(AppFramework.splitName(MainProgram.FStationLyt()))(vname),AppFramework.tryGetVar(t[0],t[1]));\r\n   return m!=null&&m.$==1?(m.$0.varVar.Set(v),b.Return({\r\n    $:0,\r\n    $0:\"Ok\"\r\n   })):b.ReturnFrom(FusionAsyncM.ofResultRM({\r\n    $:1,\r\n    $0:new ResultMessage({\r\n     $:1,\r\n     $0:(function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(\"Var \"+Utils.toSafe($2)+\" not found\");\r\n      };\r\n     }(Global.id))(vname)\r\n    })\r\n   }));\r\n  }));\r\n };\r\n Messaging.getValue=function(vname)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var m,t;\r\n   m=(t=(AppFramework.splitName(MainProgram.FStationLyt()))(vname),AppFramework.tryGetWoW(t[0],t[1]));\r\n   return m!=null&&m.$==1?b.Bind(FusionAsyncM.ofAsync(View$1.GetAsync(m.$0)),function(a)\r\n   {\r\n    return b.Return({\r\n     $:0,\r\n     $0:a\r\n    });\r\n   }):b.ReturnFrom(FusionAsyncM.ofResultRM({\r\n    $:1,\r\n    $0:new ResultMessage({\r\n     $:1,\r\n     $0:(function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(\"Var or View \"+Utils.toSafe($2)+\" not found\");\r\n      };\r\n     }(Global.id))(vname)\r\n    })\r\n   }));\r\n  }));\r\n };\r\n Messaging.actionCall=function(actN,p1,p2)\r\n {\r\n  var b;\r\n  b=FusionAsyncM.fusion();\r\n  return b.Run(b.Delay(function()\r\n  {\r\n   var m,t;\r\n   m=(t=(AppFramework.splitName(MainProgram.FStationLyt()))(actN),AppFramework.tryGetAct(t[0],t[1]));\r\n   return m!=null&&m.$==1?(AppFramework.callFunction(p1,p2,m.$0.actFunction),b.Return({\r\n    $:0,\r\n    $0:\"Ok\"\r\n   })):b.ReturnFrom(FusionAsyncM.ofResultRM({\r\n    $:1,\r\n    $0:new ResultMessage({\r\n     $:1,\r\n     $0:(function($1)\r\n     {\r\n      return function($2)\r\n      {\r\n       return $1(\"Action \"+Utils.toSafe($2)+\" not found\");\r\n      };\r\n     }(Global.id))(actN)\r\n    })\r\n   }));\r\n  }));\r\n };\r\n Messaging.wsStationClient=function()\r\n {\r\n  SC$1.$cctor();\r\n  return SC$1.wsStationClient;\r\n };\r\n Server.content$9852$54=function()\r\n {\r\n  MainProgram.mainProgram();\r\n  return Doc.TextNode(\"Initialized\");\r\n };\r\n SC$1.$cctor=function()\r\n {\r\n  var f,g$3,f$3,b,b$1,b$2,b$3,b$4,b$5,b$6,b$7,b$8,b$9,b$10,b$11,b$12,pluginsList,plgVarsList,plgViewsList,plgActsList,plgDocsList,b$13,f$19,g$15,name,enterName,pf,p$1,pf$1,p$2,sayHello,sayHello_0,c,vf,a,vf$1,c$1,vf$2,main0,pc,pf$2,p$3,p$4,main1,pc$1,vf$3,p$5,main,c$2,c$3,c$4,c$5,c$6,c$7,c$8,c$9,c$10,vf$4,main2,appFwk,c$11,vf$5,c$12,vf$6,pc$2,vf$7,p$6,b$14,b$15,b$16,b$17,b$18,b$19,p$7,cache,getOrAdd,p$8,cache$1,getOrAdd$2,p$9,cache$2,getOrAdd$4,p$10,cache$3,getOrAdd$6,p$11,cache$4,getOrAdd$8,p$12,cache$5,getOrAdd$10,p$13,cache$6,getOrAdd$12,p$14,cache$7,getOrAdd$14,p$15,cache$8,getOrAdd$16,p$16,cache$9,getOrAdd$18,p$17,cache$10,getOrAdd$20,p$18,cache$11,getOrAdd$22,p$19,cache$12,getOrAdd$24,x,b$20,cache$13,$1,cache$14,$2,cache$15,$3,g$17,v,prior,f$20,f$21,f$22,f$23,x$1,$4,$5,v$1,elO,s,sQ,x$2,t,t$1,t$2,t$3,t$4,t$5,t$6,t$7,t$8,x$3,t$9,t$10,i,x$4,t$11,t$12,t$13,t$14,t$15,t$16,i$1,x$5,t$17,t$18,t$19,t$20,t$21,t$22,t$23,i$2,t$24,g$20,g$21,x$6,b$21;\r\n  SC$1.$cctor=Global.ignore;\r\n  SC$1.rtn=function(v$2)\r\n  {\r\n   return[v$2];\r\n  };\r\n  SC$1.state=new CEBuilder.New();\r\n  SC$1.result=new Builder.New();\r\n  SC$1.result$1=Result.result();\r\n  SC$1.resultP=new BuilderP.New();\r\n  SC$1.depend=new DependBuilder.New();\r\n  SC$1.rtn$1=Depend.rtn;\r\n  SC$1.depend$1=Depend.depend();\r\n  SC$1.fusion=new Builder$2.New();\r\n  SC$1.fusion$1=new Builder$4.New();\r\n  SC$1.resultM=new Builder$5.New();\r\n  SC$1.asyncResult=new AsyncResultBuilder.New();\r\n  SC$1.asyncResultP=new AsyncResultBuilderP.New();\r\n  SC$1.asyncResultM=new AsyncResultMBuilder.New();\r\n  function g(s$1)\r\n  {\r\n   return Strings.concat(\"\\n\",s$1);\r\n  }\r\n  SC$1.unindentStr=function(x$7)\r\n  {\r\n   return g(String.unindent(x$7));\r\n  };\r\n  function f$1(s$1)\r\n  {\r\n   return String.splitByChar(\"\\n\",s$1);\r\n  }\r\n  function g$1(s$1)\r\n  {\r\n   var a$5,b$22;\r\n   return Slice.array(s$1,{\r\n    $:1,\r\n    $0:0\r\n   },{\r\n    $:1,\r\n    $0:(a$5=0,(b$22=Arrays.length(s$1)-2,Unchecked.Compare(a$5,b$22)===1?a$5:b$22))\r\n   });\r\n  }\r\n  function g$2(s$1)\r\n  {\r\n   return Strings.concat(\"\\n\",s$1);\r\n  }\r\n  SC$1.skipLastLine=(f=function(x$7)\r\n  {\r\n   return g$1(f$1(x$7));\r\n  },function(x$7)\r\n  {\r\n   return g$2(f(x$7));\r\n  });\r\n  function f$2(s$1)\r\n  {\r\n   return s$1+\"T00:00:00\";\r\n  }\r\n  SC$1.parseDateO2=(g$3=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o,m$4;\r\n   o=0;\r\n   return[(m$4=DateUtil.TryParse(a$5),m$4!=null&&m$4.$==1&&(o=m$4.$0,true)),o];\r\n  }),function(x$7)\r\n  {\r\n   return g$3(f$2(x$7));\r\n  });\r\n  SC$1.parseDateO=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o,m$4;\r\n   o=0;\r\n   return[(m$4=DateUtil.TryParse(a$5),m$4!=null&&m$4.$==1&&(o=m$4.$0,true)),o];\r\n  });\r\n  SC$1.parseIntO=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o;\r\n   o=0;\r\n   return[Numeric.TryParseInt32(a$5,{\r\n    get:function()\r\n    {\r\n     return o;\r\n    },\r\n    set:function(v$2)\r\n    {\r\n     o=v$2;\r\n    }\r\n   }),o];\r\n  });\r\n  SC$1.parseInt64O=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o;\r\n   o=0;\r\n   return[Numeric.TryParseInt64(a$5,{\r\n    get:function()\r\n    {\r\n     return o;\r\n    },\r\n    set:function(v$2)\r\n    {\r\n     o=v$2;\r\n    }\r\n   }),o];\r\n  });\r\n  SC$1.parseSingleO=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o,$6;\r\n   o=0;\r\n   return[($6=Global.Number(a$5),Global.isNaN($6)?false:(o=$6,true)),o];\r\n  });\r\n  SC$1.parseDoubleO=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o,$6;\r\n   o=0;\r\n   return[($6=Global.Number(a$5),Global.isNaN($6)?false:(o=$6,true)),o];\r\n  });\r\n  SC$1.parseGuidO=ParseO.tryParseWith(function(a$5)\r\n  {\r\n   var o;\r\n   o=null;\r\n   return[Guid.TryParse(a$5,{\r\n    get:function()\r\n    {\r\n     return o;\r\n    },\r\n    set:function(v$2)\r\n    {\r\n     o=v$2;\r\n    }\r\n   }),o];\r\n  });\r\n  SC$1[\"|Date|_|\"]=ParseO.parseDateO();\r\n  SC$1[\"|Int|_|\"]=ParseO.parseIntO();\r\n  SC$1[\"|Int64|_|\"]=ParseO.parseInt64O();\r\n  SC$1[\"|Single|_|\"]=ParseO.parseSingleO();\r\n  SC$1[\"|Double|_|\"]=ParseO.parseDoubleO();\r\n  SC$1[\"|Guid|_|\"]=ParseO.parseGuidO();\r\n  SC$1.defaultSnippet=Snippet.New(new SnippetId({\r\n   $:0,\r\n   $0:\"00000000-0000-0000-0000-000000000000\"\r\n  }),\"\",\"\",null,new FSharpSet.New$1(null),[],(new Date(0)).getTime());\r\n  SC$1.tieFighter=\"|\"+\"-\"+\"|\";\r\n  SC$1.counter=1;\r\n  SC$1.deserGuid=function(v$2)\r\n  {\r\n   return Serializer.ifUndef(\"00000000-0000-0000-0000-000000000000\",v$2);\r\n  };\r\n  function g$4(v$2)\r\n  {\r\n   return Serializer.ifUndef(0,v$2);\r\n  }\r\n  SC$1.serFloat=[function(v$2)\r\n  {\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(Utils.prettyPrint($7));\r\n    };\r\n   }(Global.id))(v$2);\r\n  },function(x$7)\r\n  {\r\n   return g$4(Global.id(x$7));\r\n  }];\r\n  function g$5(v$2)\r\n  {\r\n   return Serializer.ifUndef(0,v$2);\r\n  }\r\n  SC$1.serInt=[function(v$2)\r\n  {\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(Utils.prettyPrint($7));\r\n    };\r\n   }(Global.id))(v$2);\r\n  },function(x$7)\r\n  {\r\n   return g$5(Global.id(x$7));\r\n  }];\r\n  function g$6(v$2)\r\n  {\r\n   return Serializer.ifUndef(false,v$2);\r\n  }\r\n  SC$1.serBool=[function(v$2)\r\n  {\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(Utils.prettyPrint($7));\r\n    };\r\n   }(Global.id))(v$2);\r\n  },function(x$7)\r\n  {\r\n   return g$6(Global.id(x$7));\r\n  }];\r\n  function g$7(v$2)\r\n  {\r\n   return Serializer.ifUndef(\"\",v$2);\r\n  }\r\n  SC$1.serString=[function(a$5)\r\n  {\r\n   return JSON.stringify(((Provider.Id())())(a$5));\r\n  },function(x$7)\r\n  {\r\n   return g$7(Global.id(x$7));\r\n  }];\r\n  function g$8(v$2)\r\n  {\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(Utils.prettyPrint($7));\r\n    };\r\n   }(Global.id))(v$2);\r\n  }\r\n  function g$9(v$2)\r\n  {\r\n   return Serializer.ifUndef(0,v$2);\r\n  }\r\n  SC$1.serDate=[function(x$7)\r\n  {\r\n   return g$8(Global.id(x$7));\r\n  },(f$3=function(x$7)\r\n  {\r\n   return g$9(Global.id(x$7));\r\n  },function(x$7)\r\n  {\r\n   var l;\r\n   l=f$3(x$7);\r\n   return l;\r\n  })];\r\n  SC$1.rexGuid=\"([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})\";\r\n  SC$1.rexEmail=\"(([^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\\\.,;:\\\\s@\\\"]+)*)|(\\\".+\\\"))@[*[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+]*\";\r\n  SC$1.observers=List.T.Empty;\r\n  SC$1.css=\"\\r\\n                .tab-panel {\\r\\n                 overflow  : hidden   ;\\r\\n                 display   : flex     ;\\r\\n                 flex-flow : column   ;\\r\\n                 background: lightgray;\\r\\n                 height    : 100%    ;\\r\\n                 width     : 100%    ;\\r\\n                }\\r\\n                .tab-content {\\r\\n                 flex      : 1 1     ;\\r\\n                 overflow  : auto    ;\\r\\n                 position  : relative;\\r\\n                }\\r\\n                .tab-children {\\r\\n                 height    : 100%    ;\\r\\n                 width     : 100%    ;\\r\\n                 position  : absolute;\\r\\n                 display   : grid    ;\\r\\n                }\\r\\n                .tab-strip {\\r\\n                 padding   : 0pt     ;\\r\\n                 flex      : 0 0     ;\\r\\n                }\\r\\n                .tab {\\r\\n                 border     : 0.2pt solid transparent;\\r\\n                 padding    : 0pt 4pt;\\r\\n                 display    : inline-block;\\r\\n                 font-family: sans-serif;\\r\\n                 font-weight: 200;\\r\\n                 font-size  : small;\\r\\n                 color      : #666;\\r\\n                 cursor     : pointer;\\r\\n                }\\r\\n                .top>.tab {\\r\\n                 border-radius: 2pt 2pt 0pt 0pt;\\r\\n                 border-bottom-width: 0pt;\\r\\n                 vertical-align: bottom;\\r\\n                }\\r\\n                .bottom>.tab {\\r\\n                 border-top-width: 0pt;\\r\\n                 border-radius: 0pt 0pt 2pt 2pt;\\r\\n                 vertical-align: top;\\r\\n                }\\r\\n                .horizontal>.tab:not(:first-child) {\\r\\n                 border-left-width: 0pt;\\r\\n                }\\r\\n                .tab.hovering {\\r\\n                 background: red;\\r\\n                }\\r\\n                .tab.selected {\\r\\n                 background: white;\\r\\n                 border-left-width: 0.2pt;\\r\\n                 color: black;\\r\\n                 font-weight: 500;\\r\\n                 border-color: black;\\r\\n                }\\r\\n                .horizontal>.tab.selected {\\r\\n                 border-left-width: 0.2pt;\\r\\n                }\\r\\n                ::slotted(*              ) { \\r\\n                 width : 100%;\\r\\n                 height: 100%;\\r\\n                }\\r\\n                        \";\r\n  SC$1.init=Lazy.Create(function()\r\n  {\r\n   var o;\r\n   o=new WcTabStripT.New();\r\n   WebComponent.defineWebComponent(\"wcomp-tabstrip\",WcTabStripT.Constructor,self.FsRoot.LibraryJS.WebComponent.WcTabStrip.WcTabStripT.New);\r\n  });\r\n  SC$1.layoutHorizontal=Runtime.Curried(function($6,$7,$8,$9,$10)\r\n  {\r\n   return Doc.get_Empty();\r\n  },5);\r\n  SC$1.layoutVertical=Runtime.Curried(function($6,$7,$8,$9,$10)\r\n  {\r\n   return Doc.get_Empty();\r\n  },5);\r\n  SC$1.loader=(b=null,Concurrency.Delay(function()\r\n  {\r\n   self.require.config({\r\n    paths:{\r\n     vs:\"/EPFileX/monaco/package/min/vs\"\r\n    }\r\n   });\r\n   return Concurrency.Bind(Concurrency.FromContinuations(function(success,failed)\r\n   {\r\n    return self.require([\"vs/editor/editor.main\"],success,failed);\r\n   }),function()\r\n   {\r\n    return Concurrency.Return(null);\r\n   });\r\n  }));\r\n  SC$1.html=\"\\r\\n            <div style=\\\"display:none\\\" >\\r\\n                <div links>\\r\\n                    <link  href=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\\\" type=\\\"text/css\\\" rel=\\\"stylesheet\\\">\\r\\n                    <script src=\\\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\\\"   type=\\\"text/javascript\\\"></script>\\r\\n                </div>\\r\\n                <div ws-template=\\\"AppFramework\\\" style=\\\"height: calc(100vh - 4px); width: calc(100vw - 4px) \\\" class=\\\"relative\\\" >\\r\\n                    <div ws-hole=\\\"MainClient\\\"></div>\\r\\n                    <div class=\\\"AppFrameworkGo\\\"><button ws-onclick=\\\"GoClient\\\">${MainDoc}</button></div>\\r\\n                </div>\\r\\n                <div ws-template=\\\"VSplitter1\\\" class=\\\"versplitter\\\" ws-attr=\\\"Attrs\\\" vertical>\\r\\n                    <div style=\\\"min-width :Calc((100% - ${gap}) *        ${perc}  / 100);max-width :Calc((100% - ${gap}) *        ${perc}  / 100)\\\">${doc1}</div>\\r\\n                    <div style=\\\"min-width :             ${gap}\\\" ws-onmousedown=\\\"MouseDown\\\" ></div>\\r\\n                    <div style=\\\"min-width :Calc((100% - ${gap}) * (100 - ${perc}) / 100);max-width :Calc((100% - ${gap}) * (100 - ${perc}) / 100)\\\">${doc2}</div>\\r\\n                </div>\\r\\n                <div ws-template=\\\"HSplitter1\\\" class=\\\"horsplitter\\\" ws-attr=\\\"Attrs\\\">\\r\\n                    <div style=\\\"min-height:Calc((100% - ${gap}) *        ${perc}  / 100);max-height:Calc((100% - ${gap}) *        ${perc}  / 100)\\\">${doc1}</div>\\r\\n                    <div style=\\\"min-height:             ${gap}\\\" ws-onmousedown=\\\"MouseDown\\\" ></div>\\r\\n                    <div style=\\\"min-height:Calc((100% - ${gap}) * (100 - ${perc}) / 100);max-height:Calc((100% - ${gap}) * (100 - ${perc}) / 100)\\\">${doc2}</div>\\r\\n                </div>\\r\\n                <style>\\r\\n                    .horsplitter                    { display: flex; flex-direction:column              } \\r\\n                    .horsplitter > div:nth-child(2) { background: #eef; cursor: row-resize; z-index:400 }\\r\\n                    .horsplitter > div              { overflow: hidden                                  }\\r\\n                    .versplitter                    { display: flex; flex-direction:row                 } \\r\\n                    .versplitter > div:nth-child(2) { background: #eef; cursor: col-resize; z-index:400 }\\r\\n                    .versplitter > div              { overflow: hidden                                  }\\r\\n                </style>\\r\\n                <style>\\r\\n                    .AppFrameworkGo {\\r\\n                        max-width: 2px;\\r\\n                        max-height: 2px;\\r\\n                        z-index: 4000;\\r\\n                        overflow: hidden;\\r\\n                        position: fixed;\\r\\n                        top: 0px;\\r\\n                        left: 0px;\\r\\n                    }\\r\\n                </style>\\r\\n                <div ws-template=\\\"FixedSplitterVer\\\" \\r\\n                    style=\\\"display: grid; \\r\\n                           grid-gap: 0px; \\r\\n                           box-sizing: border-box; \\r\\n                           height: 100%;\\r\\n                           width : 100%;\\r\\n                           grid-template-areas: 'one two'; \\r\\n                           grid-template-rows   :100%; \\r\\n                           overflow: hidden; \\r\\n                           grid-template-columns: ${PartSizes}\\\"  >\\r\\n                   <div ws-hole=\\\"First\\\"  style=\\\"grid-area: one; \\\" class=\\\"relative\\\" ></div>\\r\\n                   <div ws-hole=\\\"Second\\\" style=\\\"grid-area: two; \\\" class=\\\"relative\\\" ></div>\\r\\n                </div>               \\r\\n                <div ws-template=\\\"FixedSplitterHor\\\" \\r\\n               style=\\\"display: grid; \\r\\n                      grid-gap: 0px; \\r\\n                      box-sizing: border-box; \\r\\n                      height: 100%;\\r\\n                      width : 100%;\\r\\n                      grid-template-areas: 'one' 'two'; \\r\\n                      grid-template-columns:100%; \\r\\n                      overflow: hidden; \\r\\n                      grid-template-rows   : ${PartSizes}\\\"  >\\r\\n              <div ws-hole=\\\"First\\\"  style=\\\"grid-area: one; \\\" class=\\\"relative\\\" ></div>\\r\\n              <div ws-hole=\\\"Second\\\" style=\\\"grid-area: two; \\\" class=\\\"relative\\\" ></div>\\r\\n                </div>               \\r\\n                <div ws-template=\\\"WCompSplitterHor\\\" \\r\\n                     ws-onafterrender=\\\"AfterRender\\\"\\r\\n                     style=\\\"display: grid;\\r\\n                            grid-gap: 5px; \\r\\n                            box-sizing: border-box; \\r\\n                            grid-template-areas: 'one' 'two'; \\r\\n                            grid-template-columns:100%; \\r\\n                            overflow: hidden; \\r\\n                            grid-template-rows   : ${PartSizes}\\\" \\r\\n                     >\\r\\n                     <slot></slot>\\r\\n                    <slot name=\\\"splitter\\\">  <div style=\\\"grid-row:2; grid-column:1 / 1 ; cursor: row-resize; z-index: 3; background-color: #eef ; height: ${Gap}; margin-top :-${Gap}\\\" ws-onmousedown=\\\"MouseDown\\\" ws-onafterrender=\\\"AfterRenderSp\\\" ></div> </slot>\\r\\n                    <style>\\r\\n                        ::slotted(*) {\\r\\n                            display: grid;\\r\\n                            height : 100%;\\r\\n                            width  : 100%;\\r\\n                            overflow: hidden;\\r\\n                        }\\r\\n                        ::slotted(*:nth-child(2)) {\\r\\n                            grid-area: two;\\r\\n                        }\\r\\n                        ::slotted(*[slot=\\\"splitter\\\"]) {\\r\\n                            grid-row:2; grid-column:1 / 1 ; \\r\\n                            cursor: row-resize; \\r\\n                            z-index: 3; \\r\\n                            background-color: #eef ; \\r\\n                            height: ${Gap}; \\r\\n                            margin-top :-${Gap}\\r\\n                        }\\r\\n                    </style>\\r\\n                </div>        \\r\\n                <div ws-template=\\\"WCompSplitterVer\\\" \\r\\n                     ws-onafterrender=\\\"AfterRender\\\"\\r\\n                     style=\\\"display: grid; \\r\\n                            grid-gap: 5px; \\r\\n                            box-sizing: border-box; \\r\\n                            grid-template-areas: 'one two'; \\r\\n                            grid-template-rows   :100%; \\r\\n                            overflow: hidden; \\r\\n                            grid-template-columns: ${PartSizes}\\\"  >\\r\\n                    <slot></slot>\\r\\n                    <slot name=\\\"splitter\\\"> <div style=\\\"grid-column:2; grid-row:1 / 1 ; cursor: col-resize; z-index: 3; background-color: #eef ; width: ${Gap}; margin-left :-${Gap}\\\" ws-onmousedown=\\\"MouseDown\\\" ws-onafterrender=\\\"AfterRenderSp\\\" ></div> </slot>\\r\\n                    <style>\\r\\n                        ::slotted(*) {\\r\\n                            display: grid;\\r\\n                            height : 100%;\\r\\n                            width  : 100%;\\r\\n                            overflow: hidden;\\r\\n                        }\\r\\n                        ::slotted(*:nth-child(2)) {\\r\\n                            grid-area: two;\\r\\n                        }\\r\\n                        ::slotted(*[slot=\\\"splitter\\\"]) {\\r\\n                            grid-column:2; grid-row:1 / 1\\r\\n                            cursor: column-resize; \\r\\n                            z-index: 3; \\r\\n                            background-color: #eef ; \\r\\n                            width: ${Gap}; \\r\\n                            margin-left:-${Gap}\\r\\n                        }\\r\\n                    </style>\\r\\n                </div>\\r\\n                <div ws-template=\\\"AppFwkClient\\\" >\\r\\n                    <ws-FixedSplitterHor>\\r\\n                        <PartSizes>55px calc(100% - 55px)</PartSizes>\\r\\n                        <First>\\r\\n                            <span style=\\\"display: grid;\\r\\n                                  grid-template-columns: 30% 20% 20% 10%;\\r\\n                                  grid-gap: 25px;\\r\\n                                \\\">\\r\\n                                <div class=\\\"mainTitle\\\">AppFramework</div>\\r\\n                            </span>\\r\\n                        </First>\\r\\n                        <Second>\\r\\n                                <ws-FixedSplitterVer>\\r\\n                                    <PartSizes>calc(100% - 2px) 2px</PartSizes>\\r\\n                                    <First>\\r\\n                                        <wcomp-splitter vertical value=\\\"18\\\" max=\\\"100\\\">\\r\\n                                            <div><div ws-hole=\\\"PlugIns\\\" style=\\\"overflow:auto\\\" >\\r\\n                                                <div ws-template=\\\"Tile\\\">\\r\\n                                                    <div draggable=\\\"true\\\" class=\\\"code-editor-list-tile ${Predecessor} ${Selected}\\\" \\r\\n                                                    ws-ondrag=\\\"Drag\\\"\\r\\n                                                    ws-ondragover=\\\"DragOver\\\"\\r\\n                                                    ws-ondrop=\\\"Drop\\\"\\r\\n                                                   >\\r\\n                                                   <span class=\\\"node ${Parent} ${ErrorMsg}\\\" title=\\\"expand\\\" ws-onclick=\\\"ToggleCollapse\\\"></span>\\r\\n                                                   <div  class=\\\"code-editor-list-text\\\" style=\\\"text-indent:${Indent}em; white-space: pre\\\" ws-onclick=\\\"Select\\\" ws-onafterrender=\\\"AfterRender\\\" >${Name}</div>\\r\\n                                                   <span class=\\\"predecessor\\\" title=\\\"toggle predecessor\\\" ws-onclick=\\\"TogglePred\\\">X</span>\\r\\n                                               </div>\\r\\n                                       \\r\\n                                                </div>\\r\\n                                            </div></div>\\r\\n                                            <wcomp-splitter vertical value=\\\"80\\\" min=\\\"30\\\" max=\\\"100\\\">\\r\\n                                                <ws-FixedSplitterHor>\\r\\n                                                    <PartSizes>32px calc(100% - 32px)</PartSizes>\\r\\n                                                    <First>\\r\\n                                                        <div>\\r\\n                                                            <div class=\\\"input-group\\\">\\r\\n                                                                <span class=\\\"input-group-addon\\\">${PlugInName}</span>\\r\\n                                                            </div>\\r\\n                                                        </div>\\r\\n                                                    </First>\\r\\n                                                    <Second>\\r\\n                                                        <div style=\\\"overflow:auto; display:flex; flex-direction:column\\\">\\r\\n                                                            <div>\\r\\n                                                                <h3>Vars:</h3>\\r\\n                                                                <table style=\\\"overflow:auto;width:100%\\\" class=\\\"table table-condensed table-striped\\\">\\r\\n                                                                    <thead>\\r\\n                                                                        <th style=\\\"width: 10%  \\\">Name</th>\\r\\n                                                                        <th style=\\\"width: 90% \\\">Value</th>\\r\\n                                                                    </thead>\\r\\n                                                                    <tbody ws-hole=\\\"Vars\\\">\\r\\n                                                                    <tr ws-template=\\\"NameValueInput\\\" >\\r\\n                                                                        <td >${Name}:</td>\\r\\n                                                                        <td>\\r\\n                                                                        <textarea placeholder=\\\"Value...\\\" ws-var=\\\"Value\\\" style=\\\"resize:vertical; width:100%\\\" spellcheck=\\\"false\\\"></textarea>\\r\\n                                                                        </td>\\r\\n                                                                    </tr>\\r\\n                                                                    </tbody>\\r\\n                                                                </table>\\r\\n                                                            </div>\\r\\n                                                            <div>\\r\\n                                                                <h3>Views:</h3>\\r\\n                                                                <table style=\\\"overflow:auto\\\" class=\\\"table table-condensed table-striped\\\" >\\r\\n                                                                    <thead>\\r\\n                                                                        <th style=\\\"width: 10%  \\\">Name</th>\\r\\n                                                                        <th style=\\\"width: 90% \\\">Value</th>\\r\\n                                                                    </thead>\\r\\n                                                                    <tbody ws-hole=\\\"Views\\\" >\\r\\n                                                                    <tr ws-template=\\\"NameValue\\\" class=\\\"\\\">\\r\\n                                                                        <td>${Name}:</td>\\r\\n                                                                        <td>${Value}</td>\\r\\n                                                                    </tr>\\r\\n                                                                    </tbody>\\r\\n                                                                </table>\\r\\n                                                            </div>\\r\\n                                                            <div>\\r\\n                                                                <h3>Docs:</h3>\\r\\n                                                                <div ws-hole=\\\"Docs\\\" style=\\\"overflow:auto\\\" ></div>\\r\\n                                                            </div>\\r\\n                                                            <div>\\r\\n                                                                <h3>Queries:</h3>\\r\\n                                                                <table style=\\\"overflow:auto\\\" >\\r\\n                                                                    <tbody ws-hole=\\\"Queries\\\" >\\r\\n                                                                    </tbody>\\r\\n                                                                </table>\\r\\n                                                            </div>\\r\\n                                                        </div>\\r\\n                                                    </Second>\\r\\n                                                </ws-FixedSplitterHor>\\r\\n                                        <div style=\\\"font-size:small; overflow: hidden; display: flex; flex-direction: column;\\\"  class=\\\"absolute\\\" ws-hole=\\\"Actions\\\" >\\r\\n                                            <button ws-template=\\\"Action\\\" style=\\\"font-size:small\\\" ws-onclick=\\\"Click\\\" class=\\\"btn\\\" type=\\\"button\\\" id=\\\"\\\" ws-attr=\\\"Attrs\\\" >${Name}</button>\\r\\n                                        </div>\\r\\n                                            </wcomp-splitter>\\r\\n                                        </wcomp-splitter>\\r\\n                                    </First>\\r\\n                                    <Second>\\r\\n                                                <wcomp-tabstrip >\\r\\n                                                    <div tabname=\\\"Properties\\\">\\r\\n                                                        <div>\\r\\n                                                            <table style=\\\"border-spacing:0px\\\">\\r\\n                                                                <thead>\\r\\n                                                                    <th style=\\\"width: 30%  \\\">Name</th>\\r\\n                                                                    <th style=\\\"width: 70% \\\">Value</th>\\r\\n                                                                </thead>\\r\\n                                                                <tbody ws-hole=\\\"Properties\\\" ws-children-template=\\\"Property\\\">\\r\\n                                                                    <tr ws-onclick=\\\"Select\\\" style=\\\"margin-bottom: 2px\\\" class=\\\"level  \\\">\\r\\n                                                                        <td class=\\\"level-item\\\">\\r\\n                                                                            <div>\\r\\n                                                                                <input ws-var=\\\"Name\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"\\\" placeholder=\\\"Property...\\\">\\r\\n                                                                            </div>\\r\\n                                                                        </td>\\r\\n                                                                        <td class=\\\"level-item\\\">\\r\\n                                                                            <div>\\r\\n                                                                                <textarea ws-var=\\\"Value\\\" class=\\\"form-control\\\" id=\\\"\\\" placeholder=\\\"Value...\\\"></textarea>\\r\\n                                                                            </div>\\r\\n                                                                        </td>\\r\\n                                                                        <td class=\\\"level-item\\\">\\r\\n                                                                            <div style=\\\" cursor: pointer \\\" title=\\\"remove\\\">\\r\\n                                                                                <button ws-onclick=\\\"Remove\\\" class=\\\"delete is-small\\\">x</button>\\r\\n                                                                            </div>\\r\\n                                                                        </td>\\r\\n                                                                    </tr>\\r\\n                                                                </tbody>\\r\\n                                                            </table>\\r\\n                                                            <button ws-onclick=\\\"AddProperty\\\" class=\\\"add is-small\\\">add ...</button>\\r\\n                                                        </div>\\r\\n                                                    </div>\\r\\n                                                </wcomp-tabstrip>\\r\\n                                    </Second>\\r\\n                                </ws-FixedSplitterVer>\\r\\n                        </Second>\\r\\n                    </ws-FixedSplitterHor>\\r\\n                </div>\\r\\n                <style style=\\\"display: none\\\">\\r\\n                        .Hidden     { display   : none         }\\r\\n                        table th,table td { padding:0 5px 0 5px; text-overflow: ellipsis }\\r\\n                        td input.form-control { \\r\\n                            padding    : 0px; \\r\\n                            font-family: monospace;\\r\\n                            font-size  :   small;\\r\\n                            margin-top :   0px;\\r\\n                            margin-left: -2px;\\r\\n                            width      : 100%\\r\\n                        }\\r\\n                        td select {\\r\\n                            font-size : smaller;\\r\\n                            max-width : 8ch;\\r\\n                        }\\r\\n                        textarea {\\r\\n                           resize : vertical;\\r\\n                        }\\r\\n                        .tab-content {\\r\\n                            overflow: hidden\\r\\n                        }\\r\\n                        .tab-children {\\r\\n                            position:relative;\\r\\n                        }\\r\\n                        .tab-children>div>* {\\r\\n                            position:absolute;\\r\\n                            height: 100%;\\r\\n                            width:  100%;\\r\\n                            display: grid;\\r\\n                        }\\r\\n                        .relative {\\r\\n                            position:relative;\\r\\n                        }\\r\\n                        .relative>* {\\r\\n                            position:absolute;\\r\\n                            height: 100%;\\r\\n                            width:  100%;\\r\\n                            display: grid;\\r\\n                        }\\r\\n                        table.table-striped    tbody tr:nth-child(even) { background: #EEE  }\\r\\n                        table.table-striped    tbody tr:nth-child(odd ) { background: #FFF  }\\r\\n                        table.table-striped    tbody input              { background: transparent; border: none}\\r\\n                        table.table-striped    tbody select             { background: transparent; border: none}\\r\\n                        table.table-nonstriped tbody tr:nth-child(even) { background: inherit }\\r\\n                        table.table-nonstriped tbody tr:nth-child(odd ) { background: inherit }\\r\\n                        table.table            tbody tr.hover           { border    : solid thin transparent; } \\r\\n                        table.table            tbody tr.hover:hover     { border    : solid thin blue     ; } \\r\\n                        table.table            tbody th:hover           { background: gray; cursor: pointer }\\r\\n                        table.table            tbody tr.hover:hover>td  { border-top: solid thin blue     ; \\r\\n                                                                   border-bottom: solid thin blue     ; } \\r\\n                        table.table            tbody tr.selected { background   : #b9eeff             ; }\\r\\n                        table.table            tbody tr.formula.selected { background: #20f7f7             ; }\\r\\n                        thead { color: gray }\\r\\n                        h3 { \\r\\n                            color: gray;\\r\\n                            line-height: 1em;\\r\\n                        }\\r\\n                        button       { border: solid thin transparent ; border-radius: 3px; }\\r\\n                        button:hover { border: solid thin blue }\\r\\n                        .indenter { position  : absolute; \\r\\n                                    top:0px; bottom:0px; left:0px; \\r\\n                                    background: white; color:white;\\r\\n                                    border-right: gray thin dotted;\\r\\n                                    }\\r\\n                        body {\\r\\n                            color      : #333;\\r\\n                            font-size  : small;\\r\\n                            font-family: monospace;\\r\\n                            line-height: 1.2;\\r\\n                        }\\r\\n                        .mainTitle {  \\r\\n                            font-size: 48px;\\r\\n                            font-weight: 500;\\r\\n                            color: gray;\\r\\n                            margin-top: -12px;\\r\\n                        }\\r\\n                        .CodeMirror {\\r\\n                            height: 100%;\\r\\n                        }\\r\\n                        \\r\\n                      \\r\\n                        body { margin: 0px }     \\r\\n                             \\r\\n                        div textarea {\\r\\n                            font-family     : monospace;\\r\\n                        }\\r\\n                        .code-editor-list-tile {\\r\\n                            white-space     : nowrap; \\r\\n                            border-style    : solid none none;\\r\\n                            border-color    : white;\\r\\n                            border-width    : 1px;\\r\\n                            background-color: #D8D8D8;\\r\\n                            display         : flex;\\r\\n                        }\\r\\n                        .code-editor-list-text{\\r\\n                            padding         : 1px 10px 1px 5px;\\r\\n                            overflow        : hidden;\\r\\n                            text-overflow   : ellipsis;\\r\\n                            white-space     : nowrap;\\r\\n                            flex            : 1;\\r\\n                        }\\r\\n                        \\r\\n                        .code-editor-list-tile span.node.ErrorMsg {\\r\\n                            background-color: red\\r\\n                        }\\r\\n                        .code-editor-list-tile span.node.expanded::before {\\r\\n                            content: \\\"-\\\"\\r\\n                        }\\r\\n                        .code-editor-list-tile span.node.collapsed::before {\\r\\n                            content: \\\"+\\\"\\r\\n                        }\\r\\n                        .code-editor-list-tile.direct-predecessor {\\r\\n                            font-weight     : bold;\\r\\n                            color           : blue;\\r\\n                        }\\r\\n                        .code-editor-list-tile.indirect-predecessor {\\r\\n                            color           : blue;\\r\\n                        }\\r\\n                        .code-editor-list-tile.included-predecessor {\\r\\n                            color           : chocolate;\\r\\n                        }\\r\\n                        .code-editor-list-tile.selected {\\r\\n                            background-color: #77F;\\r\\n                            color           : white;\\r\\n                        }\\r\\n                        .code-editor-list-tile.codeSnippet {\\r\\n                            text-decoration: underline\\r\\n                        }\\r\\n                        .code-editor-list-tile:hover {\\r\\n                            background      : lightgray;\\r\\n                        }\\r\\n                        .code-editor-list-tile.selected:hover {\\r\\n                            background      : blue;\\r\\n                        }\\r\\n                        .code-editor-list-tile>.predecessor {\\r\\n                            font-weight     : bold;\\r\\n                            border-style    : inset;\\r\\n                            border-width    : 1px;\\r\\n                            text-align      : center;\\r\\n                            color           : transparent;\\r\\n                        }\\r\\n                        .code-editor-list-tile.direct-predecessor>.predecessor {\\r\\n                            color           : blue;\\r\\n                        }\\r\\n                        \\r\\n                        .CodeMirror { height: 100%; }\\r\\n                        \\r\\n                        .node {\\r\\n                            background-color: white; \\r\\n                            width           : 2ch; \\r\\n                            color           : #A03; \\r\\n                            font-weight     : bold; \\r\\n                            text-align      : center;\\r\\n                            font-family     : arial;\\r\\n                        }\\r\\n                        .Warning { text-decoration: underline lightblue } \\r\\n                        .Error   { text-decoration: underline red       } \\r\\n                        \\r\\n                    </style>\\r\\n            </div>\\r\\n            \";\r\n  SC$1.plugIns=new ListModel$1.New$1(function(plg)\r\n  {\r\n   return plg.plgName;\r\n  });\r\n  SC$1.mainDocV=Var$1.Create$1(\"AppFramework.AppFwkClient\");\r\n  SC$1.TemplateFileName=\"D:\\\\Abe\\\\CIPHERWorkspace\\\\FSharpStation\\\\projects\\\\LayoutEngine\\\\website\\\\AppFramework.html\";\r\n  SC$1.selectionPlugInO=Var$1.Create$1({\r\n   $:1,\r\n   $0:new PlugInName({\r\n    $:0,\r\n    $0:\"AppFramework\"\r\n   })\r\n  });\r\n  SC$1.currentPlugInW=View$1.Map(function(o)\r\n  {\r\n   return o==null?AppFramework.defaultPlugIn():o.$0;\r\n  },View$1.Bind(function(a$5)\r\n  {\r\n   return a$5==null?View$1.Const({\r\n    $:1,\r\n    $0:AppFramework.defaultPlugIn()\r\n   }):AppFramework.plugIns().TryFindByKeyAsView(a$5.$0);\r\n  },AppFramework.selectionPlugInO().get_View()));\r\n  SC$1.currentPlugInV=new FromView.New(AppFramework.currentPlugInW(),function(a$5)\r\n  {\r\n   AppFramework.plugIns().Append(a$5);\r\n  });\r\n  SC$1.AppFwkClient=Lazy.Create(function()\r\n  {\r\n   var b$22,Q,A,D,V,V$1,P$2,p$20,i$3;\r\n   return(b$22=(Q=AppFramework.renderQueries(),(A=AppFramework.renderActions(),(D=AppFramework.renderDocs(),(V=AppFramework.renderViews(),(V$1=AppFramework.renderVars(),(P$2=AppFramework.renderPlugIns(),ProviderBuilder.Make().WithHole({\r\n    $:0,\r\n    $0:\"plugins\",\r\n    $1:P$2\r\n   })).WithHole({\r\n    $:2,\r\n    $0:\"pluginname\",\r\n    $1:View$1.Map(function($6)\r\n    {\r\n     return $6.plgName.get_Id();\r\n    },AppFramework.currentPlugInW())\r\n   }).WithHole({\r\n    $:0,\r\n    $0:\"vars\",\r\n    $1:V$1\r\n   })).WithHole({\r\n    $:0,\r\n    $0:\"views\",\r\n    $1:V\r\n   })).WithHole({\r\n    $:0,\r\n    $0:\"docs\",\r\n    $1:D\r\n   })).WithHole({\r\n    $:0,\r\n    $0:\"actions\",\r\n    $1:A\r\n   })).WithHole({\r\n    $:0,\r\n    $0:\"queries\",\r\n    $1:Q\r\n   })),(p$20=Handler$1.CompleteHoles(b$22.k,b$22.h,[]),(i$3=new TemplateInstance.New(p$20[1],FSharpStation_Templates.appfwkclient(p$20[0])),(b$22.i=i$3,i$3)))).get_Doc();\r\n  });\r\n  SC$1.plugin=new PlugInBuilder.New();\r\n  SC$1.a11V=Var$1.Create$1(11);\r\n  SC$1.mainX={\r\n   $:0,\r\n   $0:AppFramework.a11V().get_View()\r\n  };\r\n  SC$1.baseView=AppFramework.mainDocV().get_View();\r\n  SC$1.op_LessMultiplyGreater=function(f$26)\r\n  {\r\n   return function(v$2)\r\n   {\r\n    return Val.apply(f$26,v$2);\r\n   };\r\n  };\r\n  SC$1.getDocFromReferenceD=Depend.dependByName(\"getDocFromReference\",Extract0.getDocFromReference,Global.id);\r\n  SC$1.getTextActViewFromReferenceD=Depend.dependByName(\"getTextActViewFromReference\",Extract0.getTextActViewFromReference,Global.id);\r\n  SC$1.getDocFromTextTypesD=(b$1=Depend.depend(),b$1.Delay(function()\r\n  {\r\n   return b$1.Bind(Extract0.getDocFromReferenceD(),function(a$5)\r\n   {\r\n    var f$26;\r\n    function m$4(a$6)\r\n    {\r\n     return a$6.$==1?a$5(a$6.$0):Doc.TextNode(a$6.$0);\r\n    }\r\n    return b$1.Return((f$26=function(l)\r\n    {\r\n     return List.map(m$4,l);\r\n    },function(x$7)\r\n    {\r\n     return Doc.Concat(f$26(x$7));\r\n    }));\r\n   });\r\n  }));\r\n  SC$1.extractDocD=(b$2=Depend.depend(),b$2.Delay(function()\r\n  {\r\n   return b$2.Bind(Extract0.getDocFromTextTypesD(),function(a$5)\r\n   {\r\n    return b$2.Return(function(x$7)\r\n    {\r\n     return a$5(Extract0.getTextData(x$7));\r\n    });\r\n   });\r\n  }));\r\n  SC$1.getTextValFromSeqD=(b$3=Depend.depend(),b$3.Delay(function()\r\n  {\r\n   return b$3.Bind(Extract0.getTextActViewFromReferenceD(),function(a$5)\r\n   {\r\n    var f$26,g$22,f$27;\r\n    function f$28(a$6)\r\n    {\r\n     var r;\r\n     return a$6.$==1?(r=a$6.$0,{\r\n      $:0,\r\n      $0:View$1.Map(function(a$7)\r\n      {\r\n       return a$7.$==1?(function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"@{\"+Utils.toSafe($7)+\"}\");\r\n        };\r\n       }(Global.id))(r):a$7.$0;\r\n      },a$5(r))\r\n     }):{\r\n      $:1,\r\n      $0:a$6.$0\r\n     };\r\n    }\r\n    return b$3.Return((f$26=function(l)\r\n    {\r\n     return Val.traverseListApp(f$28,l);\r\n    },(g$22=(f$27={\r\n     $:1,\r\n     $0:function(s$1)\r\n     {\r\n      return Strings.concat(\"\",s$1);\r\n     }\r\n    },function(v$2)\r\n    {\r\n     return Val.apply(f$27,v$2);\r\n    }),function(x$7)\r\n    {\r\n     return g$22(f$26(x$7));\r\n    })));\r\n   });\r\n  }));\r\n  SC$1.getTextValD=Operators$2.op_GreaterMultiplyGreater(Extract0.getTextData,Extract0.getTextValFromSeqD());\r\n  SC$1.extractAtsD=(b$4=Depend.depend(),b$4.Delay(function()\r\n  {\r\n   return b$4.Bind(Extract0.getTextValD(),function(a$5)\r\n   {\r\n    return b$4.Bind(Extract0.getTextActViewFromReferenceD(),function(a$6)\r\n    {\r\n     return b$4.Return(function(txt)\r\n     {\r\n      var a$7,m$4;\r\n      function parseAttr(t$25)\r\n      {\r\n       var m$5,sty,m$6,atv,atn,m$7,$6;\r\n       m$5=Strings.SplitChars(t$25,[\":\"],0);\r\n       return!Unchecked.Equals(m$5,null)&&m$5.length===2?(sty=Arrays.get(m$5,1),{\r\n        $:0,\r\n        $0:Arrays.get(m$5,0),\r\n        $1:sty\r\n       }):(m$6=Arrays.map(Strings.Trim,Strings.SplitChars(t$25,[\"=\"],0)),!Unchecked.Equals(m$6,null)&&m$6.length===2?(atv=Arrays.get(m$6,1),(atn=Arrays.get(m$6,0),(m$7=Extract0.getTextData(atv),m$7.$==1&&(m$7.$0.$==1&&(m$7.$1.$==0&&($6=m$7.$0.$0,true)))?{\r\n        $:2,\r\n        $0:atn,\r\n        $1:$6\r\n       }:{\r\n        $:1,\r\n        $0:atn,\r\n        $1:atv\r\n       }))):!Unchecked.Equals(m$6,null)&&m$6.length===1?{\r\n        $:1,\r\n        $0:Arrays.get(m$6,0),\r\n        $1:\"\"\r\n       }:AAttr.AEmpty);\r\n      }\r\n      function splitAttrs(txt$1)\r\n      {\r\n       return Seq$1.filter(function(y)\r\n       {\r\n        return\"\"!==y;\r\n       },Seq$1.map(Strings.Trim,Strings.SplitChars(txt$1,[\";\"],0)));\r\n      }\r\n      function addedListeners(el)\r\n      {\r\n       var v$2;\r\n       v$2=el.addedListeners;\r\n       return!v$2?[]:v$2;\r\n      }\r\n      function setCustomAttr(atn,el,a$8)\r\n      {\r\n       var act,p$20,same,i$3,$6;\r\n       function listener(ev)\r\n       {\r\n        AppFramework.callFunction(el,ev,act.actFunction);\r\n       }\r\n       function f$26(t$25)\r\n       {\r\n        return t$25[0];\r\n       }\r\n       function g$23(y)\r\n       {\r\n        return atn===y;\r\n       }\r\n       if(a$8.$==1)\r\n        {\r\n         act=a$8.$0;\r\n         p$20=Arrays.partition(function(x$7)\r\n         {\r\n          return g$23(f$26(x$7));\r\n         },addedListeners(el));\r\n         same=p$20[0];\r\n         for(i$3=0,$6=same.length-1;i$3<=$6;i$3++)(function()\r\n         {\r\n          return el.removeEventListener(atn,(Arrays.get(same,i$3))[1]);\r\n         }());\r\n         el.addEventListener(atn,listener,false);\r\n         el.addedListeners=p$20[1].concat([[atn,listener]]);\r\n         return;\r\n        }\r\n       else\r\n        try\r\n        {\r\n         return el.setAttribute(atn,Strings.Trim(a$8.$0));\r\n        }\r\n        catch(e)\r\n        {\r\n         return(function($7)\r\n         {\r\n          return function($8)\r\n          {\r\n           return $7(Utils.prettyPrint($8));\r\n          };\r\n         }(function(s$2)\r\n         {\r\n          console.log(s$2);\r\n         }))(e);\r\n        }\r\n      }\r\n      function viewAttr(atn)\r\n      {\r\n       function s$2($6,$7)\r\n       {\r\n        return setCustomAttr(atn,$6,$7);\r\n       }\r\n       return function(v$2)\r\n       {\r\n        return AttrModule.DynamicCustom(function($6)\r\n        {\r\n         return function($7)\r\n         {\r\n          return s$2($6,$7);\r\n         };\r\n        },v$2);\r\n       };\r\n      }\r\n      function constAttr(a$8)\r\n      {\r\n       var x$7;\r\n       return a$8.$==1?AppFramework.valToAttr(a$8.$0,a$5(a$8.$1)):a$8.$==2?(x$7=a$6(a$8.$1),(viewAttr(a$8.$0))(x$7)):a$8.$==3?Attrs.EmptyAttr():AppFramework.valToStyle(a$8.$0,a$5(a$8.$1));\r\n      }\r\n      function s$1(el,sq)\r\n      {\r\n       var f$26,styles,atts,attsNow,names,i$3,e,nm,i$4,e$1,f$27,a$8,i$5,$6,f$28,i$6,e$2;\r\n       function m$5(t$25)\r\n       {\r\n        return t$25[0];\r\n       }\r\n       function g$23(a$9)\r\n       {\r\n        return new FSharpSet.New(a$9);\r\n       }\r\n       styles=Seq$1.choose(function(a$9)\r\n       {\r\n        return a$9.$==0?{\r\n         $:1,\r\n         $0:a$9.$0+\":\"+a$9.$1\r\n        }:null;\r\n       },sq);\r\n       atts=Arrays.ofSeq(Seq$1.delay(function()\r\n       {\r\n        return Seq$1.append(!Seq$1.isEmpty(styles)?[[\"style\",Strings.concat(\";\",styles)]]:[],Seq$1.delay(function()\r\n        {\r\n         return Seq$1.choose(function(a$9)\r\n         {\r\n          return a$9.$==1?{\r\n           $:1,\r\n           $0:[a$9.$0,a$9.$1]\r\n          }:a$9.$==2?{\r\n           $:1,\r\n           $0:[a$9.$0,a$9.$1]\r\n          }:a$9.$==3?null:null;\r\n         },sq);\r\n        }));\r\n       }));\r\n       attsNow=List.ofSeq(Seq$1.delay(function()\r\n       {\r\n        return Seq$1.map(function(i$7)\r\n        {\r\n         return[el.attributes.item(i$7).name,el.attributes.item(i$7).value];\r\n        },List.ofSeq(Operators$7.range(0,el.attributes.length-1)));\r\n       }));\r\n       names=(f$26=function(s$2)\r\n       {\r\n        return Seq$1.map(m$5,s$2);\r\n       },function(x$7)\r\n       {\r\n        return g$23(f$26(x$7));\r\n       });\r\n       i$3=FSharpSet.op_Subtraction(names(attsNow),names(atts));\r\n       e=Enumerator.Get(i$3);\r\n       try\r\n       {\r\n        while(e.MoveNext())\r\n         {\r\n          nm=e.Current();\r\n          try\r\n          {\r\n           el.attributes.removeNamedItem(nm);\r\n          }\r\n          catch(e$3)\r\n          {\r\n           ((function($7)\r\n           {\r\n            return function($8)\r\n            {\r\n             return $7(Utils.prettyPrint($8));\r\n            };\r\n           }(function(s$2)\r\n           {\r\n            console.log(s$2);\r\n           }))(e$3));\r\n          }\r\n         }\r\n       }\r\n       finally\r\n       {\r\n        if(typeof e==\"object\"&&\"Dispose\"in e)\r\n         e.Dispose();\r\n       }\r\n       i$4=FSharpSet.op_Subtraction(new FSharpSet.New(atts),new FSharpSet.New(attsNow));\r\n       e$1=Enumerator.Get(i$4);\r\n       try\r\n       {\r\n        while(e$1.MoveNext())\r\n         {\r\n          f$27=e$1.Current();\r\n          try\r\n          {\r\n           el.setAttribute(f$27[0],f$27[1]);\r\n          }\r\n          catch(e$4)\r\n          {\r\n           ((function($7)\r\n           {\r\n            return function($8)\r\n            {\r\n             return $7(Utils.prettyPrint($8));\r\n            };\r\n           }(function(s$2)\r\n           {\r\n            console.log(s$2);\r\n           }))(e$4));\r\n          }\r\n         }\r\n       }\r\n       finally\r\n       {\r\n        if(typeof e$1==\"object\"&&\"Dispose\"in e$1)\r\n         e$1.Dispose();\r\n       }\r\n       a$8=addedListeners(el);\r\n       for(i$5=0,$6=a$8.length-1;i$5<=$6;i$5++){\r\n        f$28=Arrays.get(a$8,i$5);\r\n        try\r\n        {\r\n         el.removeEventListener(f$28[0],f$28[1]);\r\n        }\r\n        catch(e$5)\r\n        {\r\n         ((function($7)\r\n         {\r\n          return function($8)\r\n          {\r\n           return $7(Utils.prettyPrint($8));\r\n          };\r\n         }(function(s$2)\r\n         {\r\n          console.log(s$2);\r\n         }))(e$5));\r\n        }\r\n       }\r\n       i$6=Seq$1.choose(function(a$9)\r\n       {\r\n        return a$9.$==2?{\r\n         $:1,\r\n         $0:[a$9.$0,a$9.$1]\r\n        }:null;\r\n       },sq);\r\n       e$2=Enumerator.Get(i$6);\r\n       try\r\n       {\r\n        while(e$2.MoveNext())\r\n         (function()\r\n         {\r\n          var f$29,$7;\r\n          f$29=e$2.Current();\r\n          return View$1.Get(($7=f$29[0],function($8)\r\n          {\r\n           return setCustomAttr($7,el,$8);\r\n          }),a$6(f$29[1]));\r\n         }());\r\n        return;\r\n       }\r\n       finally\r\n       {\r\n        if(typeof e$2==\"object\"&&\"Dispose\"in e$2)\r\n         e$2.Dispose();\r\n       }\r\n      }\r\n      function g$22(s$2)\r\n      {\r\n       return Seq$1.map(parseAttr,s$2);\r\n      }\r\n      a$7=Arrays.ofSeq(splitAttrs(txt));\r\n      return!Unchecked.Equals(a$7,null)&&a$7.length===1?[(m$4=a$5(Arrays.get(a$7,0)),m$4.$==0?AttrModule.DynamicCustom(function($6)\r\n      {\r\n       return function($7)\r\n       {\r\n        return s$1($6,$7);\r\n       };\r\n      },View$1.Map(function(x$7)\r\n      {\r\n       return g$22(splitAttrs(x$7));\r\n      },m$4.$0)):constAttr(parseAttr(m$4.$0)))]:Seq$1.map(function(x$7)\r\n      {\r\n       return constAttr(parseAttr(x$7));\r\n      },a$7);\r\n     });\r\n    });\r\n   });\r\n  }));\r\n  SC$1.extractTextD=(b$5=Depend.depend(),b$5.Delay(function()\r\n  {\r\n   return b$5.Bind(Extract0.getTextValD(),function(a$5)\r\n   {\r\n    return b$5.Return(function(x$7)\r\n    {\r\n     return Val.toView(a$5(x$7));\r\n    });\r\n   });\r\n  }));\r\n  SC$1.currentPlugInNameDef=new PlugInName({\r\n   $:0,\r\n   $0:\"NewLYx\"\r\n  });\r\n  SC$1.currentPlugInNameD=Depend.dependByName(\"currentPlugInName\",AppFramework.currentPlugInNameDef(),Global.id);\r\n  SC$1.getDocwD=(b$6=Depend.depend(),b$6.Delay(function()\r\n  {\r\n   return b$6.Bind(AppFramework.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$6.Return(function(r)\r\n    {\r\n     var p$20,pName,oName;\r\n     p$20=(AppFramework.splitName(a$5))(r);\r\n     pName=p$20[0];\r\n     oName=p$20[1];\r\n     return Doc.BindView(function(docO)\r\n     {\r\n      var o;\r\n      function d()\r\n      {\r\n       return(function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"Reference not found @{\"+Utils.toSafe($7)+\"}\");\r\n        };\r\n       }(Global.id))(r);\r\n      }\r\n      o=docO==null?null:{\r\n       $:1,\r\n       $0:AppFramework.getActualDoc(docO.$0)\r\n      };\r\n      return o==null?Doc.TextView(View$1.Map(function(o$1)\r\n      {\r\n       return o$1==null?d():o$1.$0;\r\n      },AppFramework.tryGetWoWW(pName,oName))):o.$0;\r\n     },AppFramework.tryGetDocW(pName,oName));\r\n    });\r\n   });\r\n  }));\r\n  SC$1.getDocD=(b$7=Depend.depend(),b$7.Delay(function()\r\n  {\r\n   return b$7.Bind(AppFramework.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$7.Return(function(r)\r\n    {\r\n     var p$20,pName,oName,o,o$1,o$2;\r\n     p$20=(AppFramework.splitName(a$5))(r);\r\n     pName=p$20[0];\r\n     oName=p$20[1];\r\n     o=(o$1=AppFramework.tryGetDoc(pName,oName),o$1==null?null:{\r\n      $:1,\r\n      $0:AppFramework.getActualDoc(o$1.$0)\r\n     });\r\n     return o==null?Doc.TextView((o$2=AppFramework.tryGetWoW(pName,oName),o$2==null?View$1.Const((function($6)\r\n     {\r\n      return function($7)\r\n      {\r\n       return $6(\"Reference not found @{\"+Utils.toSafe($7)+\"}\");\r\n      };\r\n     }(Global.id))(r)):o$2.$0)):o.$0;\r\n    });\r\n   });\r\n  }));\r\n  SC$1.getTextActViewD=(b$8=Depend.depend(),b$8.Delay(function()\r\n  {\r\n   return b$8.Bind(AppFramework.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$8.Return(function(r)\r\n    {\r\n     var p$20,pName,oName;\r\n     p$20=(AppFramework.splitName(a$5))(r);\r\n     pName=p$20[0];\r\n     oName=p$20[1];\r\n     return View$1.Bind(function(a$6)\r\n     {\r\n      function d()\r\n      {\r\n       return(function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"Text Reference not found @{\"+Utils.toSafe($7)+\"}\");\r\n        };\r\n       }(Global.id))(r);\r\n      }\r\n      return a$6==null?View$1.Map(function(a$7)\r\n      {\r\n       return{\r\n        $:0,\r\n        $0:a$7\r\n       };\r\n      },View$1.Map(function(o)\r\n      {\r\n       return o==null?d():o.$0;\r\n      },AppFramework.tryGetWoWW(pName,oName))):View$1.Const({\r\n       $:1,\r\n       $0:a$6.$0\r\n      });\r\n     },AppFramework.tryGetActW(pName,oName));\r\n    });\r\n   });\r\n  }));\r\n  SC$1.extractTextD$1=Extract0.extractTextD();\r\n  SC$1.extractDocD$1=Extract0.extractDocD();\r\n  SC$1.extractAtsD$1=Extract0.extractAtsD();\r\n  SC$1.extractAttD=(b$9=Operators$2.depend(),b$9.Delay(function()\r\n  {\r\n   return b$9.Bind(AppFramework.extractAtsD(),function(a$5)\r\n   {\r\n    return b$9.Return(function(p$20)\r\n    {\r\n     return AttrProxy.Concat(a$5(p$20));\r\n    });\r\n   });\r\n  }));\r\n  SC$1.defPlugInName=new PlugInName({\r\n   $:0,\r\n   $0:\"AppFramework\"\r\n  });\r\n  function f$4(extractAts,extractDoc)\r\n  {\r\n   return function(attrs)\r\n   {\r\n    return function(labelName)\r\n    {\r\n     function f$26(_var)\r\n     {\r\n      return Doc.Element(\"div\",extractAts(attrs),[Doc.Element(\"div\",[AttrProxy.Create(\"class\",\"input-group\")],[Doc.Element(\"span\",[AttrProxy.Create(\"class\",\"input-group-addon\")],[extractDoc(labelName)]),Doc.Input([AttrProxy.Create(\"class\",\"form-control\")],_var)])]);\r\n     }\r\n     return function(v$2)\r\n     {\r\n      return AppFramework.docWithVar(f$26,v$2);\r\n     };\r\n    };\r\n   };\r\n  }\r\n  SC$1.inputLabel=AppFramework.depWithExtracts(function($6,$7,$8)\r\n  {\r\n   return f$4.apply(null,[$6,$7,$8]);\r\n  });\r\n  function f$5(extractAts,attrs)\r\n  {\r\n   var f$26,a$5;\r\n   f$26=(a$5=extractAts(attrs),function(a$6)\r\n   {\r\n    return Doc.Input(a$5,a$6);\r\n   });\r\n   return function(v$2)\r\n   {\r\n    return AppFramework.docWithVar(f$26,v$2);\r\n   };\r\n  }\r\n  SC$1.input=AppFramework.depWithExtracts(function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return f$5($6,$7);\r\n   };\r\n  });\r\n  function f$6(extractAts,attrs)\r\n  {\r\n   var f$26,a$5;\r\n   f$26=(a$5=extractAts(attrs),function(a$6)\r\n   {\r\n    return Doc.InputArea(a$5,a$6);\r\n   });\r\n   return function(v$2)\r\n   {\r\n    return AppFramework.docWithVar(f$26,v$2);\r\n   };\r\n  }\r\n  SC$1.textArea=AppFramework.depWithExtracts(function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return f$6($6,$7);\r\n   };\r\n  });\r\n  SC$1.htmlDoc=AppFramework.depWithExtracts(function($6,$7,extractText)\r\n  {\r\n   return function(html)\r\n   {\r\n    return Doc.BindView(Doc.Verbatim,extractText(html));\r\n   };\r\n  });\r\n  SC$1.docReference=AppFramework.depWithExtracts(function($6,$7,extractText)\r\n  {\r\n   return function(docName)\r\n   {\r\n    var x$7;\r\n    function f$26(a$5,a$6)\r\n    {\r\n     return function(f$27)\r\n     {\r\n      return(f$27(a$5))(a$6);\r\n     };\r\n    }\r\n    return Doc.BindView(function(a$5)\r\n    {\r\n     var a$6;\r\n     return a$5==null?(AppFramework.errDocf(function($8)\r\n     {\r\n      return function($9)\r\n      {\r\n       return $8(\"Doc not found: \"+Utils.toSafe($9));\r\n      };\r\n     }))(docName):(a$6=AppFramework.Lazy(a$5.$0.docDoc),a$6.$==0?a$6.$0:a$6.$==1?a$6.$0():(AppFramework.errDocf(function($8)\r\n     {\r\n      return function($9)\r\n      {\r\n       return $8(\"Doc parameters not resolved: \"+GeneratedPrintf.p($9));\r\n      };\r\n     }))(a$5.$0));\r\n    },View$1.Bind(function(b$22)\r\n    {\r\n     return(function($8)\r\n     {\r\n      return f$26($8[0],$8[1]);\r\n     }(b$22))(function($8)\r\n     {\r\n      return function($9)\r\n      {\r\n       return AppFramework.tryGetDocW($8,$9);\r\n      };\r\n     });\r\n    },(x$7=extractText(docName),View$1.Map(AppFramework.splitName(AppFramework.defPlugInName()),x$7))));\r\n   };\r\n  });\r\n  SC$1.setVar0=AppFramework.depWithExtracts(function($6,$7,extractText)\r\n  {\r\n   return function(t$25)\r\n   {\r\n    var value,x$7,t$26;\r\n    value=t$25[1];\r\n    x$7=(t$26=AppFramework.getParmRef(t$25[0]),AppFramework.tryGetVoV(t$26[0],t$26[1]));\r\n    (Option.iter(function(_var)\r\n    {\r\n     View$1.Get(function(a$5)\r\n     {\r\n      _var.Set(a$5);\r\n     },extractText(value));\r\n    }))(x$7);\r\n   };\r\n  });\r\n  function f$7(t$25,t$26)\r\n  {\r\n   var text,x$7,t$27;\r\n   text=t$26[1];\r\n   x$7=(t$27=AppFramework.getParmRef(t$26[0]),AppFramework.tryGetVoV(t$27[0],t$27[1]));\r\n   (Option.iter(function(_var)\r\n   {\r\n    _var.Set(text);\r\n   }))(x$7);\r\n  }\r\n  SC$1.setVarDirect0=AppFramework.depWithExtracts(function($6,$7,$8)\r\n  {\r\n   var $9;\r\n   $9=[$6,$7,$8];\r\n   return function($10)\r\n   {\r\n    return f$7($9,$10);\r\n   };\r\n  });\r\n  function f$8(t$25,varN)\r\n  {\r\n   var o,o$1,t$26;\r\n   o=(o$1=(t$26=AppFramework.getParmRef(varN),AppFramework.tryGetWoW(t$26[0],t$26[1])),o$1==null?null:View$1.TryGet(o$1.$0));\r\n   return o==null?null:o.$0;\r\n  }\r\n  SC$1.getValDirect=AppFramework.depWithExtracts(function($6,$7,$8)\r\n  {\r\n   var $9;\r\n   $9=[$6,$7,$8];\r\n   return function($10)\r\n   {\r\n    return f$8($9,$10);\r\n   };\r\n  });\r\n  function f$9(t$25,t$26)\r\n  {\r\n   var eventD,x$7,t$27;\r\n   eventD=t$26[1];\r\n   x$7=(t$27=AppFramework.getParmRef(t$26[0]),AppFramework.tryGetVoV(t$27[0],t$27[1]));\r\n   (Option.iter(function(_var)\r\n   {\r\n    AppFramework.draggingEvent(true,_var,eventD);\r\n   }))(x$7);\r\n  }\r\n  SC$1.dragSplitter0=AppFramework.depWithExtracts(function($6,$7,$8)\r\n  {\r\n   var $9;\r\n   $9=[$6,$7,$8];\r\n   return function($10)\r\n   {\r\n    return f$9($9,$10);\r\n   };\r\n  });\r\n  SC$1.trigAct=AppFramework.depWithExtracts(function($6,$7,extractText)\r\n  {\r\n   return function(trigger)\r\n   {\r\n    return function(actN)\r\n    {\r\n     function f$26(a$5)\r\n     {\r\n      var x$7,t$25;\r\n      if(a$5===null)\r\n       ;\r\n      else\r\n       {\r\n        x$7=(t$25=AppFramework.getParmRef(actN),AppFramework.tryGetAct(t$25[0],t$25[1]));\r\n        (Option.iter(function(a$6)\r\n        {\r\n         AppFramework.callFunction(null,null,a$6.actFunction);\r\n        }))(x$7);\r\n       }\r\n     }\r\n     function g$22()\r\n     {\r\n      return Doc.Element(\"div\",[],[]);\r\n     }\r\n     return Doc.BindView(function(x$7)\r\n     {\r\n      return g$22(f$26(x$7));\r\n     },extractText(trigger));\r\n    };\r\n   };\r\n  });\r\n  SC$1.trigActChange=AppFramework.depWithExtracts(function($6,$7,extractText)\r\n  {\r\n   return function(trigger)\r\n   {\r\n    return function(actN)\r\n    {\r\n     var v$2,prior$1;\r\n     function f$26(a$5)\r\n     {\r\n      var x$7,t$25;\r\n      if(a$5===null)\r\n       ;\r\n      else\r\n       {\r\n        x$7=(t$25=AppFramework.getParmRef(actN),AppFramework.tryGetAct(t$25[0],t$25[1]));\r\n        (Option.iter(function(a$6)\r\n        {\r\n         AppFramework.callFunction(null,null,a$6.actFunction);\r\n        }))(x$7);\r\n       }\r\n     }\r\n     function g$22()\r\n     {\r\n      return\"\";\r\n     }\r\n     return Doc.TextView(View$1.Map(function(x$7)\r\n     {\r\n      return g$22(f$26(x$7));\r\n     },(v$2=extractText(trigger),(prior$1=[Var$1.Create$1(null)],(View$1.Sink(function(v$3)\r\n     {\r\n      if(!Unchecked.Equals(prior$1[0].Get(),v$3))\r\n       prior$1[0].Set(v$3);\r\n     },v$2),prior$1[0].get_View())))));\r\n    };\r\n   };\r\n  });\r\n  function f$10(t$25,actN,p1,p2)\r\n  {\r\n   var x$7,t$26;\r\n   x$7=(t$26=AppFramework.getParmRef(actN),AppFramework.tryGetAct(t$26[0],t$26[1]));\r\n   return(Option.iter(function(a$5)\r\n   {\r\n    AppFramework.callFunction(p1,p2,a$5.actFunction);\r\n   }))(x$7);\r\n  }\r\n  SC$1.callAction0=AppFramework.depWithExtracts(function($6,$7,$8)\r\n  {\r\n   var $9;\r\n   $9=[$6,$7,$8];\r\n   return Runtime.Curried(f$10,3,[$9]);\r\n  });\r\n  SC$1.delayAction=AppFramework.depWithExtracts(function($6,$7,extractText)\r\n  {\r\n   return function(delay)\r\n   {\r\n    return function(actN)\r\n    {\r\n     var x$7,t$25;\r\n     x$7=(t$25=AppFramework.getParmRef(actN),AppFramework.tryGetAct(t$25[0],t$25[1]));\r\n     return(Option.iter(function(a$5)\r\n     {\r\n      var b$22;\r\n      Concurrency.Start((b$22=null,Concurrency.Delay(function()\r\n      {\r\n       return Concurrency.Bind(View$1.GetAsync(extractText(delay)),function(a$6)\r\n       {\r\n        var o;\r\n        return Concurrency.Bind(Concurrency.Sleep((o=(ParseO.parseIntO())(a$6),o==null?100:o.$0)),function()\r\n        {\r\n         AppFramework.callFunction(null,null,a$5.actFunction);\r\n         return Concurrency.Zero();\r\n        });\r\n       });\r\n      })),null);\r\n     }))(x$7);\r\n    };\r\n   };\r\n  });\r\n  SC$1.select=AppFramework.depWithExtracts(function(extractAts,$6,extractText)\r\n  {\r\n   return Runtime.Curried3(function(attrs,none,vals)\r\n   {\r\n    function f$26(_var)\r\n    {\r\n     var valsW,varO;\r\n     valsW=View$1.Map(function($7)\r\n     {\r\n      return List.ofSeq(Strings.SplitChars($7,[\";\"],0));\r\n     },extractText(vals));\r\n     varO=new FromView.New(View$1.Map2(function($7,$8)\r\n     {\r\n      return Seq$1.contains(Strings.Trim($7),$8)?{\r\n       $:1,\r\n       $0:Strings.Trim($7)\r\n      }:null;\r\n     },_var.get_View(),valsW),function(a$5)\r\n     {\r\n      var s$1;\r\n      if(a$5!=null&&a$5.$==1)\r\n       {\r\n        s$1=a$5.$0;\r\n        View$1.Get(function(vs)\r\n        {\r\n         if(Seq$1.contains(s$1,vs))\r\n          _var.Set(s$1);\r\n        },valsW);\r\n       }\r\n      else\r\n       _var.Set(\"\");\r\n     });\r\n     return Doc.SelectDynOptional(extractAts(attrs),none,Global.id,valsW,varO);\r\n    }\r\n    return function(v$2)\r\n    {\r\n     return AppFramework.docWithVar(f$26,v$2);\r\n    };\r\n   });\r\n  });\r\n  function f$11(extractAts,template,attrs,doc1,doc2)\r\n  {\r\n   function f$26(_var)\r\n   {\r\n    return Doc.Element(\"div\",extractAts(attrs),[(AppFramework.docReference())(doc1),(AppFramework.docReference())(doc2)]);\r\n   }\r\n   return function(v$2)\r\n   {\r\n    return AppFramework.docWithVar(f$26,v$2);\r\n   };\r\n  }\r\n  SC$1.splitterPerc=AppFramework.depWithExtracts(Runtime.Curried(f$11,5));\r\n  function f$12(t$25)\r\n  {\r\n   return t$25[0];\r\n  }\r\n  function f$13(t$25)\r\n  {\r\n   return t$25[1];\r\n  }\r\n  AppFramework.addPlugIn((b$10=AppFramework.plugin(),b$10.AddAct(b$10.AddDoc(b$10.AddVar(b$10.Name(b$10.Yield(),\"AppFramework\"),\"mainDocV\",AppFramework.mainDocV()),\"AppFwkClient\",AppFramework.AppFwkClient()),\"Hello\",function()\r\n  {\r\n   self.alert(\"Hello!\");\r\n  })));\r\n  AppFramework.addPlugIn((b$11=AppFramework.plugin(),b$11.AddViw(b$11.AddViw(b$11.AddViw(b$11.AddViw(b$11.AddViw(b$11.AddViw(b$11.AddQry(b$11.AddAct2(b$11.AddAct(b$11.AddAct2(b$11.AddAct2(b$11.AddAct2(b$11.AddAct2(b$11.AddDoc5(b$11.AddDoc3(b$11.AddDoc3(b$11.AddDoc4(b$11.AddDoc2(b$11.AddDoc2(b$11.AddDoc2(b$11.AddDoc2(b$11.AddDoc1(b$11.AddDoc1(b$11.Name(b$11.Yield(),\"AF\"),\"DocReference\",AppFramework.docReference(),\"DocName\"),\"HtmlDoc\",AppFramework.htmlDoc(),\"Html\"),\"TrigAction\",AppFramework.trigAct(),\"Trigger\",\"Action\"),\"TrigChange\",AppFramework.trigActChange(),\"Trigger\",\"Action\"),\"Input\",AppFramework.input(),\"Attrs\",\"Var\"),\"TextArea\",AppFramework.textArea(),\"Attrs\",\"Var\"),\"Select\",AppFramework.select(),\"Attrs\",\"None\",\"Vals\",\"Var\"),\"InputFile\",Runtime.Curried3(AppFramework.inputFile),\"Attrs\",\"Label\",\"Action\"),\"InputLabel\",AppFramework.inputLabel(),\"Attrs\",\"Label\",\"Var\"),\"SplitterPerc\",AppFramework.splitterPerc(),\"Template\",\"Attrs\",\"doc1\",\"doc2\",\"Var\"),\"SetVar\",function(v$2)\r\n  {\r\n   return function(v$3)\r\n   {\r\n    return AppFramework.setVar(v$2,v$3);\r\n   };\r\n  },\"Var\",\"Value\"),\"SetVarDirect\",function(v$2)\r\n  {\r\n   return function(v$3)\r\n   {\r\n    return AppFramework.setVarDirect(v$2,v$3);\r\n   };\r\n  },\"Var\",\"from\"),\"SetVarDirectD\",function(v$2)\r\n  {\r\n   return function(v$3)\r\n   {\r\n    return AppFramework.setVarDirectD(v$2,v$3);\r\n   };\r\n  },\"Var\",\"from\"),\"DelayAction\",AppFramework.delayAction(),\"delay\",\"Äction\"),\"Hello\",function()\r\n  {\r\n   self.alert(\"Hello!\");\r\n  }),\"DragSplitter\",function(v$2)\r\n  {\r\n   return function(e)\r\n   {\r\n    return AppFramework.dragSplitter(v$2,e);\r\n   };\r\n  },\"Var\",\"dragEvent\"),\"getDocNames\",function()\r\n  {\r\n   return Arrays.ofSeq(Seq$1.collect(function(plg)\r\n   {\r\n    return Seq$1.map(function(doc)\r\n    {\r\n     return plg.plgName.get_Id()+\".\"+doc.docName.get_Id();\r\n    },plg.plgDocs);\r\n   },(AppFramework.plugIns())[\"var\"].Get()));\r\n  }),\"MouseX\",View$1.Map(function(x$7)\r\n  {\r\n   return Global.String(f$12(x$7));\r\n  },Mouse.get_Position())),\"MouseY\",View$1.Map(function(x$7)\r\n  {\r\n   return Global.String(f$13(x$7));\r\n  },Mouse.get_Position())),\"MouseLeft\",View$1.Map(function(a$5)\r\n  {\r\n   return a$5?\"1\":\"0\";\r\n  },Mouse.get_LeftPressed())),\"MouseRight\",View$1.Map(function(a$5)\r\n  {\r\n   return a$5?\"1\":\"0\";\r\n  },Mouse.get_RightPressed())),\"MouseMiddle\",View$1.Map(function(a$5)\r\n  {\r\n   return a$5?\"1\":\"0\";\r\n  },Mouse.get_MiddlePressed())),\"Keyboard\",View$1.Map(function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return $6(Utils.printList(Utils.prettyPrint,$7));\r\n   };\r\n  }(Global.id),Keyboard.get_KeysPressed()))));\r\n  SC$1.getMainDoc=Lazy.Create(function()\r\n  {\r\n   WcSplitter.init(Runtime.Curried(AppFramework.horizontal,5),Runtime.Curried(AppFramework.vertical,5));\r\n   WcTabStrip.init().f();\r\n   return AppFramework.mainDoc();\r\n  });\r\n  SC$1.htmlD=Depend.dependByName(\"AppFrameworkTemplate.html\",AppFrameworkTemplate.html(),Global.id);\r\n  SC$1.startWithHtmlD=(b$12=Depend.depend(),b$12.Delay(function()\r\n  {\r\n   return b$12.Bind(StartAppFramework.htmlD(),function(a$5)\r\n   {\r\n    return b$12.Return(function()\r\n    {\r\n     var d,x$7,a$6;\r\n     d=self.document.createElement(\"div\");\r\n     self.document.body.appendChild(d);\r\n     d.outerHTML=a$5;\r\n     x$7=AppFramework.getMainDoc().f();\r\n     a$6=self.document.body;\r\n     Templates.LoadLocalTemplates(\"\");\r\n     Doc.RunAppend(a$6,x$7);\r\n    });\r\n   });\r\n  }));\r\n  SC$1.defPlg=AppFramework.defaultPlugIn();\r\n  SC$1.defDoc=AppFramework.newDoc(new PlgElemName({\r\n   $:0,\r\n   $0:\"_\"\r\n  }),Lazy.Create(Doc.get_Empty));\r\n  SC$1.defVar=AppFramework.newVar(new PlgElemName({\r\n   $:0,\r\n   $0:\"_\"\r\n  }),Var$1.Create$1(\"\"));\r\n  SC$1.defViw=AppFramework.newViw(new PlgElemName({\r\n   $:0,\r\n   $0:\"_\"\r\n  }),View$1.Const(\"\"));\r\n  SC$1.defAct=AppFramework.newAct(new PlgElemName({\r\n   $:0,\r\n   $0:\"_\"\r\n  }),Global.ignore);\r\n  function f$14(a$5)\r\n  {\r\n   return new PlugInName({\r\n    $:0,\r\n    $0:a$5\r\n   });\r\n  }\r\n  function g$10(a$5)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a$5\r\n   };\r\n  }\r\n  function f$15(a$5)\r\n  {\r\n   return new PlgElemName({\r\n    $:0,\r\n    $0:a$5\r\n   });\r\n  }\r\n  function g$11(a$5)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a$5\r\n   };\r\n  }\r\n  function f$16(a$5)\r\n  {\r\n   return new PlgElemName({\r\n    $:0,\r\n    $0:a$5\r\n   });\r\n  }\r\n  function g$12(a$5)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a$5\r\n   };\r\n  }\r\n  function f$17(a$5)\r\n  {\r\n   return new PlgElemName({\r\n    $:0,\r\n    $0:a$5\r\n   });\r\n  }\r\n  function g$13(a$5)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a$5\r\n   };\r\n  }\r\n  function f$18(a$5)\r\n  {\r\n   return new PlgElemName({\r\n    $:0,\r\n    $0:a$5\r\n   });\r\n  }\r\n  function g$14(a$5)\r\n  {\r\n   return{\r\n    $:1,\r\n    $0:a$5\r\n   };\r\n  }\r\n  pluginsList=LM.getDocFor(AppFramework.plugIns(),AppFrameworkUI.defPlg(),function()\r\n  {\r\n   return AppFrameworkUI.failCreate(\"plugin\",void 0);\r\n  },null,Runtime.Curried3(AppFrameworkUI.showPlugIn));\r\n  plgVarsList=LM.getDocForW(View$1.Map(function($6)\r\n  {\r\n   return $6.plgVars;\r\n  },pluginsList.get_CurrentW()),function(plgVar)\r\n  {\r\n   return plgVar.varName;\r\n  },AppFrameworkUI.defVar(),function()\r\n  {\r\n   return AppFrameworkUI.failCreate(\"Var\",void 0);\r\n  },null,Runtime.Curried3(AppFrameworkUI.showVar));\r\n  plgViewsList=LM.getDocForW(View$1.Map(function($6)\r\n  {\r\n   return $6.plgViews;\r\n  },pluginsList.get_CurrentW()),function(plgViw)\r\n  {\r\n   return plgViw.viwName;\r\n  },AppFrameworkUI.defViw(),function()\r\n  {\r\n   return AppFrameworkUI.failCreate(\"View\",void 0);\r\n  },null,Runtime.Curried3(AppFrameworkUI.showView));\r\n  plgActsList=LM.getDocForW(View$1.Map(function($6)\r\n  {\r\n   return $6.plgActions;\r\n  },pluginsList.get_CurrentW()),function(plgAct)\r\n  {\r\n   return plgAct.actName;\r\n  },AppFrameworkUI.defAct(),function()\r\n  {\r\n   return AppFrameworkUI.failCreate(\"Action\",void 0);\r\n  },null,Runtime.Curried3(AppFrameworkUI.showAct));\r\n  plgDocsList=LM.getDocForW(View$1.Map(function($6)\r\n  {\r\n   return $6.plgDocs;\r\n  },pluginsList.get_CurrentW()),function(plgDoc)\r\n  {\r\n   return plgDoc.docName;\r\n  },AppFrameworkUI.defDoc(),function()\r\n  {\r\n   return AppFrameworkUI.failCreate(\"Doc\",void 0);\r\n  },null,Runtime.Curried3(AppFrameworkUI.showDoc));\r\n  AppFramework.addPlugIn((b$13=AppFramework.plugin(),b$13.Merge(b$13.Merge(b$13.Merge(b$13.Merge(b$13.Merge(b$13.Name(b$13.Yield(),\"AppFrmkUI\"),\"plugIns_\",pluginsList.PlugIn(function(x$7)\r\n  {\r\n   return g$10(f$14(x$7));\r\n  },function(n)\r\n  {\r\n   return n.get_Id();\r\n  })),\"plgVars_\",plgVarsList.PlugIn(function(x$7)\r\n  {\r\n   return g$11(f$15(x$7));\r\n  },function(n)\r\n  {\r\n   return n.get_Id();\r\n  })),\"plgViews_\",plgViewsList.PlugIn(function(x$7)\r\n  {\r\n   return g$12(f$16(x$7));\r\n  },function(n)\r\n  {\r\n   return n.get_Id();\r\n  })),\"plgActs_\",plgActsList.PlugIn(function(x$7)\r\n  {\r\n   return g$13(f$17(x$7));\r\n  },function(n)\r\n  {\r\n   return n.get_Id();\r\n  })),\"plgDocs_\",plgDocsList.PlugIn(function(x$7)\r\n  {\r\n   return g$14(f$18(x$7));\r\n  },function(n)\r\n  {\r\n   return n.get_Id();\r\n  }))));\r\n  function p(y)\r\n  {\r\n   return\"\"!==y;\r\n  }\r\n  SC$1.splitSemiColon=(f$19=LayoutEngineModule.splitChar(\";\"),(g$15=function(s$1)\r\n  {\r\n   return Seq$1.filter(p,s$1);\r\n  },function(x$7)\r\n  {\r\n   return g$15(f$19(x$7));\r\n  }));\r\n  function g$16(v$2)\r\n  {\r\n   return!v$2;\r\n  }\r\n  SC$1.notEmpty=function(x$7)\r\n  {\r\n   return g$16(LayoutEngineModule.emptyLine(x$7));\r\n  };\r\n  SC$1.aV=Var$1.Create$1(4);\r\n  SC$1.pa=NewLY.aV().get_View();\r\n  SC$1.pb=6.2;\r\n  SC$1.currentPlugInNameDef$1=new PlugInName({\r\n   $:0,\r\n   $0:\"NewLYx\"\r\n  });\r\n  SC$1.currentPlugInNameD$1=Depend.dependByName(\"currentPlugInName\",NewLY.currentPlugInNameDef(),Global.id);\r\n  name=Var$1.Create$1(\"World\");\r\n  enterName=(pf=AppFramework.op_Dereference(function(n)\r\n  {\r\n   return n===Slice.string(\"World\",{\r\n    $:1,\r\n    $0:0\r\n   },{\r\n    $:1,\r\n    $0:n.length-1\r\n   })||n.length<=1?\"<---- Please enter your name\":\"\";\r\n  }),(p$1={\r\n   $:0,\r\n   $0:name.get_View()\r\n  },P.New(Operators$2.op_BarGreaterGreater(pf.r,function(f$26)\r\n  {\r\n   return Fun.New(f$26,p$1);\r\n  }))));\r\n  pf$1=AppFramework.op_Dereference(function()\r\n  {\r\n   var n;\r\n   n=new Date(Date.now());\r\n   return n.getFullYear()+\"-\"+(\"0\"+(n.getMonth()+1)).slice(-2)+\"-\"+(\"0\"+n.getDate()).slice(-2)+\" \"+(\"0\"+n.getHours()).slice(-2)+\":\"+(\"0\"+n.getMinutes()).slice(-2)+\":\"+(\"0\"+n.getSeconds()).slice(-2)+\":\"+(\"00\"+n.getMilliseconds()).slice(-3);\r\n  });\r\n  p$2={\r\n   $:0,\r\n   $0:name.get_View()\r\n  };\r\n  Operators$2.op_BarGreaterGreater(pf$1.r,function(f$26)\r\n  {\r\n   return Fun.New(f$26,p$2);\r\n  });\r\n  sayHello=(sayHello_0=(c=(vf=AppFramework.op_Dereference(Doc.Concat),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:[extractDoc(\"Hello @{name}!\")]\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },AppFramework.extractDocD())),AppFramework.bindWrap(function(aF)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(Val.textDoc(aF.f.$==0?aF.p.$==1?{\r\n     $:0,\r\n     $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n    }:{\r\n     $:0,\r\n     $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n    }:aF.p.$==0?{\r\n     $:0,\r\n     $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n    }:{\r\n     $:1,\r\n     $0:aF.f.$0(aF.p.$0)\r\n    }),c$13.p));\r\n   },c);\r\n  },enterName.r)),(a=(vf$1=AppFramework.op_Dereference(Doc.Concat),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:[extractDoc(\"How are you?\")]\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$1.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },AppFramework.extractDocD())),(c$1=(vf$2=AppFramework.op_Dereference(Doc.Concat),AppFramework.bindWrap(function(aF)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:[AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    })]\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$2.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },sayHello_0.r)),AppFramework.bindWrap(function(aF)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    }),c$13.p));\r\n   },c$1);\r\n  },a.r))));\r\n  Var$1.Lens(NewLY.aV(),Global.String,function(a$5,v$2)\r\n  {\r\n   return Operators$7.toInt(Global.Number(v$2));\r\n  });\r\n  main0=(pc=(pf$2=AppFramework.op_Dereference(function(a$5)\r\n  {\r\n   return function(b$22)\r\n   {\r\n    return NewLY.concat(a$5,b$22);\r\n   };\r\n  }),(p$3={\r\n   $:0,\r\n   $0:NewLY.aV().get_View()\r\n  },P.New(Operators$2.op_BarGreaterGreater(pf$2.r,function(f$26)\r\n  {\r\n   return Fun.New(f$26,p$3);\r\n  })))),(p$4={\r\n   $:1,\r\n   $0:3.2\r\n  },P.New(Operators$2.op_BarGreaterGreater(pc.r,function(c$13)\r\n  {\r\n   return Fun.New(c$13.f.$==0?c$13.p.$==1?{\r\n    $:0,\r\n    $0:View$1.Apply(c$13.f.$0,View$1.Const(c$13.p.$0))\r\n   }:{\r\n    $:0,\r\n    $0:View$1.Apply(c$13.f.$0,c$13.p.$0)\r\n   }:c$13.p.$==0?{\r\n    $:0,\r\n    $0:View$1.Apply(View$1.Const(c$13.f.$0),c$13.p.$0)\r\n   }:{\r\n    $:1,\r\n    $0:c$13.f.$0(c$13.p.$0)\r\n   },p$4);\r\n  }))));\r\n  main1=(pc$1=(vf$3=AppFramework.op_Dereference((Runtime.Curried3(function($6,$7,$8)\r\n  {\r\n   return $6(\"result = \"+Utils.toSafe($7)+\" \"+Utils.toSafe($8));\r\n  }))(Global.id)),AppFramework.bindWrap(function(aF)\r\n  {\r\n   var p$20;\r\n   p$20=aF.f.$==0?aF.p.$==1?{\r\n    $:0,\r\n    $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n   }:{\r\n    $:0,\r\n    $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n   }:aF.p.$==0?{\r\n    $:0,\r\n    $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n   }:{\r\n    $:1,\r\n    $0:aF.f.$0(aF.p.$0)\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$3.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },main0.r)),(p$5={\r\n   $:1,\r\n   $0:\"main0\"\r\n  },P.New(Operators$2.op_BarGreaterGreater(pc$1.r,function(c$13)\r\n  {\r\n   return Fun.New(c$13.f.$==0?c$13.p.$==1?{\r\n    $:0,\r\n    $0:View$1.Apply(c$13.f.$0,View$1.Const(c$13.p.$0))\r\n   }:{\r\n    $:0,\r\n    $0:View$1.Apply(c$13.f.$0,c$13.p.$0)\r\n   }:c$13.p.$==0?{\r\n    $:0,\r\n    $0:View$1.Apply(View$1.Const(c$13.f.$0),c$13.p.$0)\r\n   }:{\r\n    $:1,\r\n    $0:c$13.f.$0(c$13.p.$0)\r\n   },p$5);\r\n  }))));\r\n  main=(c$2=(c$3=(c$4=(c$5=(c$6=(c$7=(c$8=(c$9=(c$10=(vf$4=AppFramework.op_Dereference((Runtime.Curried3(Doc.Element))(\"h3\")),AppFramework.bindWrap(function(extractAts)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:extractAts(\"color:@{name}; background:red; click=@{AppFramework.Hello}\")\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$4.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },AppFramework.extractAtsD())),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:[extractDoc(\"MAIN:\")]\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(c$10.r,function(c$13)\r\n   {\r\n    return Fun.New(c$13.f.$==0?c$13.p.$==1?{\r\n     $:0,\r\n     $0:View$1.Apply(c$13.f.$0,View$1.Const(c$13.p.$0))\r\n    }:{\r\n     $:0,\r\n     $0:View$1.Apply(c$13.f.$0,c$13.p.$0)\r\n    }:c$13.p.$==0?{\r\n     $:0,\r\n     $0:View$1.Apply(View$1.Const(c$13.f.$0),c$13.p.$0)\r\n    }:{\r\n     $:1,\r\n     $0:c$13.f.$0(c$13.p.$0)\r\n    },p$20);\r\n   }));\r\n  },AppFramework.extractDocD())),AppFramework.bindWrap(function(aF)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(Val.textDoc(aF.f.$==0?aF.p.$==1?{\r\n     $:0,\r\n     $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n    }:{\r\n     $:0,\r\n     $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n    }:aF.p.$==0?{\r\n     $:0,\r\n     $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n    }:{\r\n     $:1,\r\n     $0:aF.f.$0(aF.p.$0)\r\n    }),c$13.p));\r\n   },c$9);\r\n  },main1.r)),AppFramework.bindWrap(function(aF)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(Val.textDoc(aF.f.$==0?aF.p.$==1?{\r\n     $:0,\r\n     $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n    }:{\r\n     $:0,\r\n     $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n    }:aF.p.$==0?{\r\n     $:0,\r\n     $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n    }:{\r\n     $:1,\r\n     $0:aF.f.$0(aF.p.$0)\r\n    }),c$13.p));\r\n   },c$8);\r\n  },main1.r)),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(extractDoc(\":\"),c$13.p));\r\n   },c$7);\r\n  },AppFramework.extractDocD())),AppFramework.bindWrap(function(aF)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    }),c$13.p));\r\n   },c$6);\r\n  },sayHello.r)),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(extractDoc(\":\"),c$13.p));\r\n   },c$5);\r\n  },AppFramework.extractDocD())),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(extractDoc(\" Más >> \"),c$13.p));\r\n   },c$4);\r\n  },AppFramework.extractDocD())),AppFramework.bindWrap(function(aF)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    }),c$13.p));\r\n   },c$3);\r\n  },sayHello.r)),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   return AppFramework.unwrapBindWrap(function(c$13)\r\n   {\r\n    return Fun.New(c$13.f,Val.addDoc(extractDoc(\" <<\"),c$13.p));\r\n   },c$2);\r\n  },AppFramework.extractDocD()));\r\n  main2=AppFramework.makeAViewDoc(function()\r\n  {\r\n   return Doc.Element(\"h4\",[AttrModule.Dynamic(\"style\",View$1.Map(function($6)\r\n   {\r\n    return\"color:\"+$6;\r\n   },name.get_View()))],[Doc.TextNode(\"MAIN2:\"),Doc.TextView(name.get_View())]);\r\n  });\r\n  appFwk=(c$11=(vf$5=AppFramework.op_Dereference((Runtime.Curried3(Doc.Element))(\"div\")),AppFramework.bindWrap(function(extractAts)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:extractAts(\"color:@{name}\")\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$5.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },AppFramework.extractAtsD())),AppFramework.bindWrap(function(extractDoc)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:[extractDoc(\"@{AppFramework.AppFwkClient}\")]\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(c$11.r,function(c$13)\r\n   {\r\n    return Fun.New(c$13.f.$==0?c$13.p.$==1?{\r\n     $:0,\r\n     $0:View$1.Apply(c$13.f.$0,View$1.Const(c$13.p.$0))\r\n    }:{\r\n     $:0,\r\n     $0:View$1.Apply(c$13.f.$0,c$13.p.$0)\r\n    }:c$13.p.$==0?{\r\n     $:0,\r\n     $0:View$1.Apply(View$1.Const(c$13.f.$0),c$13.p.$0)\r\n    }:{\r\n     $:1,\r\n     $0:c$13.f.$0(c$13.p.$0)\r\n    },p$20);\r\n   }));\r\n  },AppFramework.extractDocD()));\r\n  c$12=(vf$6=AppFramework.op_Dereference(Runtime.Curried(LayoutEngineModule.variableSplitter,2,[false,0,50,100])),AppFramework.bindWrap(function(aF)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    })\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$6.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },appFwk.r));\r\n  AppFramework.bindWrap(function(aF)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    })\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(c$12.r,function(c$13)\r\n   {\r\n    return Fun.New(c$13.f.$==0?c$13.p.$==1?{\r\n     $:0,\r\n     $0:View$1.Apply(c$13.f.$0,View$1.Const(c$13.p.$0))\r\n    }:{\r\n     $:0,\r\n     $0:View$1.Apply(c$13.f.$0,c$13.p.$0)\r\n    }:c$13.p.$==0?{\r\n     $:0,\r\n     $0:View$1.Apply(View$1.Const(c$13.f.$0),c$13.p.$0)\r\n    }:{\r\n     $:1,\r\n     $0:c$13.f.$0(c$13.p.$0)\r\n    },p$20);\r\n   }));\r\n  },main.r);\r\n  pc$2=(vf$7=AppFramework.op_Dereference(Runtime.Curried(LayoutEngineModule.variableSplitter,2,[false,0,50,100])),AppFramework.bindWrap(function(aF)\r\n  {\r\n   var p$20;\r\n   p$20={\r\n    $:1,\r\n    $0:AppFramework.makeAViewDoc(function()\r\n    {\r\n     var m$4;\r\n     m$4=aF.f.$==0?aF.p.$==1?{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,View$1.Const(aF.p.$0))\r\n     }:{\r\n      $:0,\r\n      $0:View$1.Apply(aF.f.$0,aF.p.$0)\r\n     }:aF.p.$==0?{\r\n      $:0,\r\n      $0:View$1.Apply(View$1.Const(aF.f.$0),aF.p.$0)\r\n     }:{\r\n      $:1,\r\n      $0:aF.f.$0(aF.p.$0)\r\n     };\r\n     return m$4.$==0?Doc.BindView(Global.id,m$4.$0):m$4.$0;\r\n    })\r\n   };\r\n   return P.New(Operators$2.op_BarGreaterGreater(vf$7.r,function(f$26)\r\n   {\r\n    return Fun.New(f$26,p$20);\r\n   }));\r\n  },appFwk.r));\r\n  p$6={\r\n   $:1,\r\n   $0:main2\r\n  };\r\n  Operators$2.op_BarGreaterGreater(pc$2.r,function(c$13)\r\n  {\r\n   return Fun.New(c$13.f.$==0?c$13.p.$==1?{\r\n    $:0,\r\n    $0:View$1.Apply(c$13.f.$0,View$1.Const(c$13.p.$0))\r\n   }:{\r\n    $:0,\r\n    $0:View$1.Apply(c$13.f.$0,c$13.p.$0)\r\n   }:c$13.p.$==0?{\r\n    $:0,\r\n    $0:View$1.Apply(View$1.Const(c$13.f.$0),c$13.p.$0)\r\n   }:{\r\n    $:1,\r\n    $0:c$13.f.$0(c$13.p.$0)\r\n   },p$6);\r\n  });\r\n  SC$1.nodeRefToDocD=(b$14=Depend.depend(),b$14.Delay(function()\r\n  {\r\n   return b$14.Bind(Extract0.getDocFromTextTypesD(),function(a$5)\r\n   {\r\n    function f$26(a$6)\r\n    {\r\n     var $6;\r\n     return(a$6.$==1?($6=a$6.$0.$0,false):a$6.$==2?($6=a$6.$0.$0,false):a$6.$==3?($6=a$6.$0.$0,false):true)?List.map(NewLY.textValToTextType,a$6.$0):List.ofArray([NewLY.itemRefToTextType($6)]);\r\n    }\r\n    return b$14.Return(function(x$7)\r\n    {\r\n     return a$5(f$26(x$7));\r\n    });\r\n   });\r\n  }));\r\n  SC$1.varRefToVarD=(b$15=Depend.depend(),b$15.Delay(function()\r\n  {\r\n   return b$15.Bind(NewLY.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$15.Return(function(a$6)\r\n    {\r\n     var r,o,o$1,t$25;\r\n     r=NewLY.itemRefToString(a$6.$0);\r\n     o=(o$1=(t$25=(AppFramework.splitName(a$5))(r),AppFramework.tryGetVar(t$25[0],t$25[1])),o$1==null?null:{\r\n      $:1,\r\n      $0:o$1.$0.varVar\r\n     });\r\n     return o==null?new FromView.New(View$1.Const((function($6)\r\n     {\r\n      return function($7)\r\n      {\r\n       return $6(\"Could not find var \"+Utils.toSafe($7));\r\n      };\r\n     }(Global.id))(r)),Global.ignore):o.$0;\r\n    });\r\n   });\r\n  }));\r\n  SC$1.actRefToActD=(b$16=Depend.depend(),b$16.Delay(function()\r\n  {\r\n   return b$16.Bind(NewLY.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$16.Return(function(a$6)\r\n    {\r\n     var r,o,t$25;\r\n     r=NewLY.itemRefToString(a$6.$0);\r\n     o=(t$25=(AppFramework.splitName(a$5))(r),AppFramework.tryGetAct(t$25[0],t$25[1]));\r\n     return o==null?AppFramework.newAct(new PlgElemName({\r\n      $:0,\r\n      $0:r\r\n     }),function()\r\n     {\r\n      ((function($6)\r\n      {\r\n       return function($7)\r\n       {\r\n        return $6(\"Could not find action \"+Utils.toSafe($7));\r\n       };\r\n      }(function(s$1)\r\n      {\r\n       console.log(s$1);\r\n      }))(r));\r\n     }):o.$0;\r\n    });\r\n   });\r\n  }));\r\n  SC$1.getParamD=(b$17=Depend.depend(),b$17.Delay(function()\r\n  {\r\n   return b$17.Bind(NewLY.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$17.Bind(Extract0.getTextValFromSeqD(),function(a$6)\r\n    {\r\n     return b$17.Return(function(p$20)\r\n     {\r\n      var refToSplit,g$22,r,f$26,m$4,g$23,t$25,r$1,f$27,m$5,g$24,g$25,t$26,r$2,f$28,m$6,g$26,g$27,t$27,r$3,f$29,m$7,g$28,t$28;\r\n      function f$30(d$4)\r\n      {\r\n       return d$4.docDoc;\r\n      }\r\n      function d()\r\n      {\r\n       return(function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"missing ref Doc \"+FSharpStation_GeneratedPrintf.p$1($7));\r\n        };\r\n       }(Global.id))(r);\r\n      }\r\n      function f$31(v$2)\r\n      {\r\n       return v$2.varVar.get_View();\r\n      }\r\n      function d$1()\r\n      {\r\n       return View$1.Const((function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"missing ref Var \"+FSharpStation_GeneratedPrintf.p$1($7));\r\n        };\r\n       }(Global.id))(r$1));\r\n      }\r\n      function f$32(v$2)\r\n      {\r\n       return v$2.viwView;\r\n      }\r\n      function d$2()\r\n      {\r\n       return View$1.Const((function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"missing ref View \"+FSharpStation_GeneratedPrintf.p$1($7));\r\n        };\r\n       }(Global.id))(r$2));\r\n      }\r\n      function f$33(v$2)\r\n      {\r\n       return v$2.actFunction;\r\n      }\r\n      function d$3()\r\n      {\r\n       return(function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"missing ref Action \"+FSharpStation_GeneratedPrintf.p$1($7));\r\n        };\r\n       }(Global.id))(r$3);\r\n      }\r\n      refToSplit=(g$22=AppFramework.splitName(a$5),function(x$7)\r\n      {\r\n       return g$22(NewLY.itemRefToString(x$7));\r\n      });\r\n      return p$20.$==1?(r=p$20.$0.$0,View$1.Map((f$26=(m$4=function(x$7)\r\n      {\r\n       var v$2;\r\n       v$2=f$30(x$7);\r\n       return v$2;\r\n      },function(o)\r\n      {\r\n       return o==null?null:{\r\n        $:1,\r\n        $0:m$4(o.$0)\r\n       };\r\n      }),(g$23=function(o)\r\n      {\r\n       return o==null?d():o.$0;\r\n      },function(x$7)\r\n      {\r\n       return g$23(f$26(x$7));\r\n      })),(t$25=refToSplit(r),AppFramework.tryGetDocW(t$25[0],t$25[1])))):p$20.$==2?(r$1=p$20.$0.$0,View$1.Bind((f$27=(m$5=(g$24=function(a$7)\r\n      {\r\n       return View$1.Map(Global.id,a$7);\r\n      },function(x$7)\r\n      {\r\n       return g$24(f$31(x$7));\r\n      }),function(o)\r\n      {\r\n       return o==null?null:{\r\n        $:1,\r\n        $0:m$5(o.$0)\r\n       };\r\n      }),(g$25=function(o)\r\n      {\r\n       return o==null?d$1():o.$0;\r\n      },function(x$7)\r\n      {\r\n       return g$25(f$27(x$7));\r\n      })),(t$26=refToSplit(r$1),AppFramework.tryGetVarW(t$26[0],t$26[1])))):p$20.$==3?(r$2=p$20.$0.$0,View$1.Bind((f$28=(m$6=(g$26=function(a$7)\r\n      {\r\n       return View$1.Map(Global.id,a$7);\r\n      },function(x$7)\r\n      {\r\n       return g$26(f$32(x$7));\r\n      }),function(o)\r\n      {\r\n       return o==null?null:{\r\n        $:1,\r\n        $0:m$6(o.$0)\r\n       };\r\n      }),(g$27=function(o)\r\n      {\r\n       return o==null?d$2():o.$0;\r\n      },function(x$7)\r\n      {\r\n       return g$27(f$28(x$7));\r\n      })),(t$27=refToSplit(r$2),AppFramework.tryGetViwW(t$27[0],t$27[1])))):p$20.$==4?(r$3=p$20.$0.$0,View$1.Map((f$29=(m$7=function(x$7)\r\n      {\r\n       var v$2;\r\n       v$2=f$33(x$7);\r\n       return v$2;\r\n      },function(o)\r\n      {\r\n       return o==null?null:{\r\n        $:1,\r\n        $0:m$7(o.$0)\r\n       };\r\n      }),(g$28=function(o)\r\n      {\r\n       return o==null?d$3():o.$0;\r\n      },function(x$7)\r\n      {\r\n       return g$28(f$29(x$7));\r\n      })),(t$28=refToSplit(r$3),AppFramework.tryGetActW(t$28[0],t$28[1])))):View$1.Map(Global.id,Val.toView(a$6(List.map(NewLY.textValToTextType,p$20.$0))));\r\n     });\r\n    });\r\n   });\r\n  }));\r\n  SC$1.getParam2D=(b$18=Depend.depend(),b$18.Delay(function()\r\n  {\r\n   return b$18.Bind(NewLY.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$18.Bind(Extract0.getTextValFromSeqD(),function()\r\n    {\r\n     return b$18.Return(function(p$20)\r\n     {\r\n      var toAbs,f$26,g$22,$6;\r\n      toAbs=(f$26=NewLY.itemRefToAbsolute(a$5.get_Id()),(g$22=function($7)\r\n      {\r\n       return function($8)\r\n       {\r\n        return $7(\"@{\"+Utils.toSafe($8)+\"}\");\r\n       };\r\n      }(Global.id),function(x$7)\r\n      {\r\n       return g$22(f$26(x$7));\r\n      }));\r\n      return(p$20.$==3?($6=p$20.$0.$0,false):p$20.$==1?($6=p$20.$0.$0,false):p$20.$==2?($6=p$20.$0.$0,false):p$20.$==4?($6=p$20.$0.$0,false):true)?Strings.concat(\"\",Seq$1.map(function(a$6)\r\n      {\r\n       var $7;\r\n       return(a$6.$==1?($7=a$6.$0.$0,false):a$6.$==3?($7=a$6.$0.$0,false):a$6.$==4?($7=a$6.$0.$0,false):a$6.$==2?($7=a$6.$0.$0,false):true)?a$6.$0:toAbs($7);\r\n      },p$20.$0)):toAbs($6);\r\n     });\r\n    });\r\n   });\r\n  }));\r\n  SC$1.getParamTextD=(b$19=Depend.depend(),b$19.Delay(function()\r\n  {\r\n   return b$19.Bind(NewLY.currentPlugInNameD(),function(a$5)\r\n   {\r\n    return b$19.Bind(Extract0.getTextValFromSeqD(),function(a$6)\r\n    {\r\n     return b$19.Return(function(p$20)\r\n     {\r\n      return function(f$26)\r\n      {\r\n       var refToSplit,g$22,x$7,t$25,f$27,x$8,t$26,g$23,a$7,x$9,t$27,g$24,a$8,x$10,t$28,f$28;\r\n       function f$29(d)\r\n       {\r\n        return d.docDoc;\r\n       }\r\n       function f$30(v$2)\r\n       {\r\n        return v$2.varVar.get_View();\r\n       }\r\n       function f$31(v$2)\r\n       {\r\n        return v$2.viwView;\r\n       }\r\n       function f$32(v$2)\r\n       {\r\n        return v$2.actFunction;\r\n       }\r\n       refToSplit=(g$22=AppFramework.splitName(a$5),function(x$11)\r\n       {\r\n        return g$22(NewLY.itemRefToString(x$11));\r\n       });\r\n       return p$20.$==1?(x$7=(t$25=refToSplit(p$20.$0.$0),AppFramework.tryGetDoc(t$25[0],t$25[1])),(Option.iter((f$27=function(x$11)\r\n       {\r\n        var v$2;\r\n        v$2=f$29(x$11);\r\n        return v$2;\r\n       },function(x$11)\r\n       {\r\n        return f$26(f$27(x$11));\r\n       })))(x$7)):p$20.$==2?(x$8=(t$26=refToSplit(p$20.$0.$0),AppFramework.tryGetVar(t$26[0],t$26[1])),(Option.iter((g$23=(a$7=function(x$11)\r\n       {\r\n        return f$26(Global.id(x$11));\r\n       },function(a$9)\r\n       {\r\n        View$1.Get(a$7,a$9);\r\n       }),function(x$11)\r\n       {\r\n        return g$23(f$30(x$11));\r\n       })))(x$8)):p$20.$==3?(x$9=(t$27=refToSplit(p$20.$0.$0),AppFramework.tryGetViw(t$27[0],t$27[1])),(Option.iter((g$24=(a$8=function(x$11)\r\n       {\r\n        return f$26(Global.id(x$11));\r\n       },function(a$9)\r\n       {\r\n        View$1.Get(a$8,a$9);\r\n       }),function(x$11)\r\n       {\r\n        return g$24(f$31(x$11));\r\n       })))(x$9)):p$20.$==4?(x$10=(t$28=refToSplit(p$20.$0.$0),AppFramework.tryGetAct(t$28[0],t$28[1])),(Option.iter((f$28=function(x$11)\r\n       {\r\n        var v$2;\r\n        v$2=f$32(x$11);\r\n        return v$2;\r\n       },function(x$11)\r\n       {\r\n        return f$26(f$28(x$11));\r\n       })))(x$10)):View$1.Get(function(x$11)\r\n       {\r\n        return f$26(Global.id(x$11));\r\n       },Val.toView(a$6(List.map(NewLY.textValToTextType,p$20.$0))));\r\n      };\r\n     });\r\n    });\r\n   });\r\n  }));\r\n  SC$1.initVal=\"-<InitValue>-\";\r\n  function checkO(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store(v$2,res)\r\n  {\r\n   cache.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$1(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO(p$20);\r\n   return o==null?store(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defVarM0=(p$7=(cache=new Dictionary.New$5(),[[checkO,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$1($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache.Clear();\r\n  }]),(getOrAdd=p$7[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd(p$20))(function($6)\r\n   {\r\n    return NewLY.defVar($6[0],$6[1],$6[2]);\r\n   });\r\n  },p$7[1]]))[0];\r\n  function checkO$1(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$1.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$1(v$2,res)\r\n  {\r\n   cache$1.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$3(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$1(p$20);\r\n   return o==null?store$1(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defDocFM=(p$8=(cache$1=new Dictionary.New$5(),[[checkO$1,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$3($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$1.Clear();\r\n  }]),(getOrAdd$2=p$8[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$2(p$20))(function($6)\r\n   {\r\n    return NewLY.defDocF($6[0],$6[1],$6[2],$6[3]);\r\n   });\r\n  },p$8[1]]))[0];\r\n  function checkO$2(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$2.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$2(v$2,res)\r\n  {\r\n   cache$2.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$5(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$2(p$20);\r\n   return o==null?store$2(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defActionM=(p$9=(cache$2=new Dictionary.New$5(),[[checkO$2,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$5($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$2.Clear();\r\n  }]),(getOrAdd$4=p$9[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$4(p$20))(function($6)\r\n   {\r\n    return NewLY.defAction($6[0],$6[1],$6[2],$6[3]);\r\n   });\r\n  },p$9[1]]))[0];\r\n  function checkO$3(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$3.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$3(v$2,res)\r\n  {\r\n   cache$3.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$7(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$3(p$20);\r\n   return o==null?store$3(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defActionsM=(p$10=(cache$3=new Dictionary.New$5(),[[checkO$3,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$7($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$3.Clear();\r\n  }]),(getOrAdd$6=p$10[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$6(p$20))(function($6)\r\n   {\r\n    return NewLY.defActions($6[0],$6[1],$6[2]);\r\n   });\r\n  },p$10[1]]))[0];\r\n  function checkO$4(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$4.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$4(v$2,res)\r\n  {\r\n   cache$4.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$9(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$4(p$20);\r\n   return o==null?store$4(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defButtonM=(p$11=(cache$4=new Dictionary.New$5(),[[checkO$4,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$9($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$4.Clear();\r\n  }]),(getOrAdd$8=p$11[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$8(p$20))(function($6)\r\n   {\r\n    return NewLY.defButton($6[0],$6[1],$6[2],$6[3],$6[4]);\r\n   });\r\n  },p$11[1]]))[0];\r\n  function checkO$5(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$5.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$5(v$2,res)\r\n  {\r\n   cache$5.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$11(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$5(p$20);\r\n   return o==null?store$5(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defInputM=(p$12=(cache$5=new Dictionary.New$5(),[[checkO$5,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$11($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$5.Clear();\r\n  }]),(getOrAdd$10=p$12[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$10(p$20))(function($6)\r\n   {\r\n    return NewLY.defInput($6[0],$6[1],$6[2],$6[3]);\r\n   });\r\n  },p$12[1]]))[0];\r\n  function checkO$6(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$6.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$6(v$2,res)\r\n  {\r\n   cache$6.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$13(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$6(p$20);\r\n   return o==null?store$6(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defTextAreaM=(p$13=(cache$6=new Dictionary.New$5(),[[checkO$6,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$13($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$6.Clear();\r\n  }]),(getOrAdd$12=p$13[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$12(p$20))(function($6)\r\n   {\r\n    return NewLY.defTextArea($6[0],$6[1],$6[2],$6[3]);\r\n   });\r\n  },p$13[1]]))[0];\r\n  function checkO$7(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$7.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$7(v$2,res)\r\n  {\r\n   cache$7.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$15(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$7(p$20);\r\n   return o==null?store$7(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defElementM=(p$14=(cache$7=new Dictionary.New$5(),[[checkO$7,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$15($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$7.Clear();\r\n  }]),(getOrAdd$14=p$14[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$14(p$20))(function($6)\r\n   {\r\n    return NewLY.defElement($6[0],$6[1],$6[2],$6[3],$6[4]);\r\n   });\r\n  },p$14[1]]))[0];\r\n  function checkO$8(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$8.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$8(v$2,res)\r\n  {\r\n   cache$8.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$17(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$8(p$20);\r\n   return o==null?store$8(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defConcatM=(p$15=(cache$8=new Dictionary.New$5(),[[checkO$8,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$17($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$8.Clear();\r\n  }]),(getOrAdd$16=p$15[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$16(p$20))(function($6)\r\n   {\r\n    return NewLY.defConcat($6[0],$6[1],$6[2]);\r\n   });\r\n  },p$15[1]]))[0];\r\n  function checkO$9(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$9.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$9(v$2,res)\r\n  {\r\n   cache$9.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$19(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$9(p$20);\r\n   return o==null?store$9(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defViewM=(p$16=(cache$9=new Dictionary.New$5(),[[checkO$9,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$19($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$9.Clear();\r\n  }]),(getOrAdd$18=p$16[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$18(p$20))(function($6)\r\n   {\r\n    return NewLY.defView($6[0],$6[1],$6[2]);\r\n   });\r\n  },p$16[1]]))[0];\r\n  function checkO$10(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$10.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$10(v$2,res)\r\n  {\r\n   cache$10.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$21(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$10(p$20);\r\n   return o==null?store$10(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defViewJSM=(p$17=(cache$10=new Dictionary.New$5(),[[checkO$10,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$21($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$10.Clear();\r\n  }]),(getOrAdd$20=p$17[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$20(p$20))(function($6)\r\n   {\r\n    return NewLY.defViewJS($6[0],$6[1],$6[2]);\r\n   });\r\n  },p$17[1]]))[0];\r\n  function checkO$11(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$11.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$11(v$2,res)\r\n  {\r\n   cache$11.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$23(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$11(p$20);\r\n   return o==null?store$11(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defSplitterM=(p$18=(cache$11=new Dictionary.New$5(),[[checkO$11,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$23($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$11.Clear();\r\n  }]),(getOrAdd$22=p$18[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$22(p$20))(function($6)\r\n   {\r\n    return NewLY.defSplitter($6[0],$6[1],$6[2],$6[3],$6[4],$6[5]);\r\n   });\r\n  },p$18[1]]))[0];\r\n  function checkO$12(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$12.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$12(v$2,res)\r\n  {\r\n   cache$12.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$25(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$12(p$20);\r\n   return o==null?store$12(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  SC$1.defTemplateM=(p$19=(cache$12=new Dictionary.New$5(),[[checkO$12,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$25($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$12.Clear();\r\n  }]),(getOrAdd$24=p$19[0][1],[function(p$20)\r\n  {\r\n   return(getOrAdd$24(p$20))(function($6)\r\n   {\r\n    return NewLY.defTemplate($6[0],$6[1],$6[2]);\r\n   });\r\n  },p$19[1]]))[0];\r\n  x=AppFramework.tryGetPlugIn(AppFramework.defPlugInName());\r\n  (Option.iter(function(plg)\r\n  {\r\n   plg.plgActions.Append(AppFramework.newActF(new PlgElemName({\r\n    $:0,\r\n    $0:\"AddLayout\"\r\n   }),{\r\n    $:2,\r\n    $0:function(n)\r\n    {\r\n     return function(l)\r\n     {\r\n      return NewLY.addNewLayoutAct(n,l);\r\n     };\r\n    },\r\n    $1:\"[Name]\",\r\n    $2:\"[Layout]\"\r\n   }));\r\n  }))(x);\r\n  SC$1.MessageBrokerId=\"<MessageBroker>\";\r\n  SC$1.MessageBrokerAddress=new Address({\r\n   $:0,\r\n   $0:WebSockets.MessageBrokerId()\r\n  });\r\n  SC$1.id=\"FSharpStation\"+Global.String(Date.now());\r\n  SC$1.rootDir=\".\";\r\n  SC$1.srcDir=\".\";\r\n  Concurrency.Start((b$20=null,Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind((new AjaxRemotingProvider.New()).Async(\"FSharpStation:FsRoot.FSharpStation+FStation.getRootDirs:-589054433\",[]),function(a$5)\r\n   {\r\n    FStation.set_rootDir(a$5[1]);\r\n    FStation.set_srcDir(a$5[2]);\r\n    (((Runtime.Curried3(function($6,$7,$8)\r\n    {\r\n     return $6(\"fileName = \"+Utils.toSafe($7)+\"\\\\\"+Utils.toSafe($8)+\".fsx\");\r\n    }))(function(s$1)\r\n    {\r\n     console.log(s$1);\r\n    }))(FStation.srcDir()))(FStation.id());\r\n    return Concurrency.Zero();\r\n   });\r\n  })),null);\r\n  SC$1.annotationsV=Var$1.Create$1(\"\");\r\n  SC$1.outputMsgs=Var$1.Create$1(\"\");\r\n  SC$1.snippets=new ListModel$1.New$1(function(s$1)\r\n  {\r\n   return s$1.snpId;\r\n  });\r\n  SC$1.hierarchy=Var$1.Create$1([]);\r\n  SC$1.generation=Var$1.Create$1(-8640000000000000);\r\n  SC$1.currentSnippetIdOV=Var$1.Create$1(null);\r\n  SC$1.codeSnippetIdOV=Var$1.Create$1(null);\r\n  SC$1.collapsedV=Var$1.Create$1(new FSharpSet.New$1(null));\r\n  function checkO$13(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$13.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$13(v$2,res)\r\n  {\r\n   cache$13.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$26(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$13(p$20);\r\n   return o==null?store$13(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  $1=(cache$13=new Dictionary.New$5(),[[checkO$13,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$26($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$13.Clear();\r\n  }]);\r\n  SC$1.predsCache=$1[0];\r\n  SC$1.clearPreds=$1[1];\r\n  function checkO$14(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$14.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$14(v$2,res)\r\n  {\r\n   cache$14.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$27(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$14(p$20);\r\n   return o==null?store$14(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  $2=(cache$14=new Dictionary.New$5(),[[checkO$14,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$27($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$14.Clear();\r\n  }]);\r\n  SC$1.reducCache=$2[0];\r\n  SC$1.clearReduc=$2[1];\r\n  function checkO$15(v$2)\r\n  {\r\n   var res;\r\n   res=null;\r\n   return cache$15.TryGetValue(v$2,{\r\n    get:function()\r\n    {\r\n     return res;\r\n    },\r\n    set:function(v$3)\r\n    {\r\n     res=v$3;\r\n    }\r\n   })?{\r\n    $:1,\r\n    $0:res\r\n   }:null;\r\n  }\r\n  function store$15(v$2,res)\r\n  {\r\n   cache$15.set_Item(v$2,res);\r\n   return res;\r\n  }\r\n  function getOrAdd$28(p$20,f$26)\r\n  {\r\n   var o;\r\n   o=checkO$15(p$20);\r\n   return o==null?store$15(p$20,f$26(p$20)):o.$0;\r\n  }\r\n  $3=(cache$15=new Dictionary.New$5(),[[checkO$15,function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return getOrAdd$28($6,$7);\r\n   };\r\n  }],function()\r\n  {\r\n   cache$15.Clear();\r\n  }]);\r\n  SC$1.parentCache=$3[0];\r\n  SC$1.clearParent=$3[1];\r\n  SC$1.getParentIdO=(g$17=(Snippets.parentCache())[1],function(p$20)\r\n  {\r\n   return(g$17(p$20))(Snippets.getParentIdONotMemo);\r\n  });\r\n  View$1.Sink(function(a$5)\r\n  {\r\n   var curId,m$4;\r\n   if(a$5!=null&&a$5.$==1)\r\n    {\r\n     curId=a$5.$0;\r\n     m$4=Snippets.codeSnippetIdOV().Get();\r\n     m$4!=null&&m$4.$==1?(Snippets.iterReader(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(Operators$3.op_GreaterGreaterEquals(Operators$3.op_BarGreaterGreater(SnippetModule.snippetORm(m$4.$0),function(o)\r\n     {\r\n      return o==null?null:{\r\n       $:1,\r\n       $0:SnippetModule.uniquePredsRm(o.$0)\r\n      };\r\n     }),FusionM.insertO),Option$1.toList),function(l)\r\n     {\r\n      return List.collect(Global.id,l);\r\n     }),function(s$1)\r\n     {\r\n      return List.contains(curId,s$1);\r\n     }),function(a$6)\r\n     {\r\n      if(a$6)\r\n       ;\r\n      else\r\n       Snippets.codeSnippetIdOV().Set({\r\n        $:1,\r\n        $0:curId\r\n       });\r\n     })),Snippets.clearPredsCache()):Snippets.codeSnippetIdOV().Set({\r\n      $:1,\r\n      $0:curId\r\n     });\r\n    }\r\n  },Snippets.currentSnippetIdOV().get_View());\r\n  function m(n)\r\n  {\r\n   return n.id();\r\n  }\r\n  View$1.Sink(function(ids)\r\n  {\r\n   var a$5;\r\n   Snippets.clearPredsCache();\r\n   a$5=Arrays.ofSeq(Seq$1.delay(function()\r\n   {\r\n    return Seq$1.collect(function(sid)\r\n    {\r\n     return Seq$1.append([Snippets.snippets().FindByKey(sid)],Seq$1.delay(function()\r\n     {\r\n      return Seq$1.filter(function(snp)\r\n      {\r\n       return Snippets.isDescendantOf(sid,snp.snpId);\r\n      },(Snippets.snippets())[\"var\"].Get());\r\n     }));\r\n    },ids);\r\n   }));\r\n   Snippets.snippets().Set(a$5);\r\n  },(v=View$1.Map(function(a$5)\r\n  {\r\n   return Arrays.map(m,a$5);\r\n  },Snippets.hierarchy().get_View()),(prior=[Var$1.Create$1(null)],(View$1.Sink(function(v$2)\r\n  {\r\n   if(!Unchecked.Equals(prior[0].Get(),v$2))\r\n    prior[0].Set(v$2);\r\n  },v),prior[0].get_View()))));\r\n  SC$1.CurrentSnippetIdW=View$1.Map(function(sidO)\r\n  {\r\n   var v$2;\r\n   v$2=SnippetModule.defaultSnippet().snpId;\r\n   return sidO==null?v$2:sidO.$0;\r\n  },Snippets.currentSnippetIdOV().get_View());\r\n  function g$18(o)\r\n  {\r\n   var v$2;\r\n   v$2=SnippetModule.defaultSnippet();\r\n   return o==null?v$2:o.$0;\r\n  }\r\n  function m$1(a$5)\r\n  {\r\n   return Snippets.snippets().TryFindByKeyAsView(a$5);\r\n  }\r\n  SC$1.currentSnippetW=View$1.Map((f$20=function(o)\r\n  {\r\n   return o==null?null:Global.id(o.$0);\r\n  },function(x$7)\r\n  {\r\n   return g$18(f$20(x$7));\r\n  }),View$1.Bind((f$21=function(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:m$1(o.$0)\r\n   };\r\n  },function(x$7)\r\n  {\r\n   return View.insertWO(f$21(x$7));\r\n  }),Snippets.currentSnippetIdOV().get_View()));\r\n  function g$19(o)\r\n  {\r\n   var v$2;\r\n   v$2=SnippetModule.defaultSnippet();\r\n   return o==null?v$2:o.$0;\r\n  }\r\n  function m$2(a$5)\r\n  {\r\n   return Snippets.snippets().TryFindByKeyAsView(a$5);\r\n  }\r\n  SC$1.codeSnippetW=View$1.Map((f$22=function(o)\r\n  {\r\n   return o==null?null:Global.id(o.$0);\r\n  },function(x$7)\r\n  {\r\n   return g$19(f$22(x$7));\r\n  }),View$1.Bind((f$23=function(o)\r\n  {\r\n   return o==null?null:{\r\n    $:1,\r\n    $0:m$2(o.$0)\r\n   };\r\n  },function(x$7)\r\n  {\r\n   return View.insertWO(f$23(x$7));\r\n  }),Snippets.codeSnippetIdOV().get_View()));\r\n  SC$1.currentSnippetV=new FromView.New(Snippets.currentSnippetW(),function(s$1)\r\n  {\r\n   Snippets.setSnippet(s$1);\r\n  });\r\n  function m$3(tn,l)\r\n  {\r\n   return[tn.id(),l];\r\n  }\r\n  function a$1(a$5)\r\n  {\r\n   function f$26(n)\r\n   {\r\n    return TreeReader.listNodes(0,n);\r\n   }\r\n   function g$22(r)\r\n   {\r\n    return Snippets.runReader(Snippets.handleError,r);\r\n   }\r\n   return function(x$7)\r\n   {\r\n    return g$22(f$26(x$7));\r\n   };\r\n  }\r\n  SC$1.getHierarchyW=View$1.Map(Arrays.ofSeq,View$1.Map(function(s$1)\r\n  {\r\n   return Seq$1.map(function($6)\r\n   {\r\n    return m$3($6[0],$6[1]);\r\n   },s$1);\r\n  },(x$1=Snippets.hierarchy().get_View(),View$1.Map2(function($6,$7)\r\n  {\r\n   return(a$1($6))($7);\r\n  },Snippets.collapsedV().get_View(),x$1))));\r\n  function a$2(a$5,a$6)\r\n  {\r\n   var b$22;\r\n   b$22=null;\r\n   return Concurrency.Delay(function()\r\n   {\r\n    return Concurrency.Bind(Concurrency.Sleep(350),function()\r\n    {\r\n     return Concurrency.Return(Snippets.runReader(Snippets.handleError,SnippetModule.fastCodeRm(Snippets.currentSnippetIdOV().Get(),Snippets.codeSnippetIdOV().Get())));\r\n    });\r\n   });\r\n  }\r\n  SC$1.codeAndStartsW=($4=Snippets.codeSnippetW(),($5=Snippets.snippets().v,(((Runtime.Curried3(View$1.MapAsync2))(a$2))($4))($5)));\r\n  SC$1.FsCodeW=View$1.Map(function(t$25)\r\n  {\r\n   return t$25[0];\r\n  },Snippets.codeAndStartsW());\r\n  SC$1.codeStartsW=View$1.Map(function(t$25)\r\n  {\r\n   return t$25[1];\r\n  },Snippets.codeAndStartsW());\r\n  SC$1.SaveAsClassW=View$1.Map2(function(snps,gen)\r\n  {\r\n   return Seq$1.exists(function(snp)\r\n   {\r\n    return snp.snpModified>gen;\r\n   },snps)?\"btn-primary\":\"\";\r\n  },Snippets.snippets().v,Snippets.generation().get_View());\r\n  SC$1.currentPathW=View$1.Map(function(snp)\r\n  {\r\n   var b$22;\r\n   return Snippets.runReader(function()\r\n   {\r\n    return\"\";\r\n   },(b$22=FusionM.fusion(),b$22.Run(b$22.Delay(function()\r\n   {\r\n    return b$22.Bind(SnippetModule.pathRm(snp.snpId),function(a$5)\r\n    {\r\n     return b$22.Bind(FusionM.traverseSeq(SnippetModule.snippetNameRm,new List.T({\r\n      $:1,\r\n      $0:snp.snpId,\r\n      $1:a$5\r\n     })),function(a$6)\r\n     {\r\n      return b$22.Return(Strings.concat(\"/\",Seq$1.rev(a$6)));\r\n     });\r\n    });\r\n   }))));\r\n  },Snippets.currentSnippetW());\r\n  SC$1.currentLayoutDW=View$1.Map(function(snp)\r\n  {\r\n   var b$22;\r\n   return Snippets.runReader(function()\r\n   {\r\n    return null;\r\n   },(b$22=FusionM.fusion(),b$22.Run(b$22.Delay(function()\r\n   {\r\n    function m$4(snB,a$5)\r\n    {\r\n     var p$20,ls,ats,ss;\r\n     p$20=(ls=Strings.SplitChars(Strings.Trim(a$5[0]),[\"\\n\"],0),Strings.StartsWith(Arrays.get(ls,0),\"\\\"\")?[Slice.array(ls,{\r\n      $:1,\r\n      $0:1\r\n     },null),Arrays.get(ls,0)]:[ls,\"\\\"\\\"\"]);\r\n     ats=p$20[1];\r\n     ss=Seq$1.mapi(function(i$3,btn)\r\n     {\r\n      var x$7;\r\n      x$7=Strings.StartsWith(btn,\":\")?Slice.string(btn,{\r\n       $:1,\r\n       $0:1\r\n      },null):(function($6)\r\n      {\r\n       return function($7)\r\n       {\r\n        return $6(\"button \\\"click=@{FSharpStation.ButtonClick}\\\" \"+Utils.prettyPrint($7));\r\n       };\r\n      }(Global.id))(btn);\r\n      return(((Runtime.Curried3(function($6,$7,$8)\r\n      {\r\n       return $6(\"btn\"+Global.String($7)+\" \"+Utils.toSafe($8));\r\n      }))(Global.id))(i$3))(x$7);\r\n     },Seq$1.filter(function(s$1)\r\n     {\r\n      return Strings.Trim(s$1)!==\"\";\r\n     },p$20[0]));\r\n     return[\"Snp_\"+Strings.Replace(Global.String(snB.snpId.get_Id()),\"-\",\"\"),Strings.concat(\"\\n\",List.ofSeq(Seq$1.delay(function()\r\n     {\r\n      return Seq$1.append(ss,Seq$1.delay(function()\r\n      {\r\n       var x$7,x$8;\r\n       return Seq$1.append([(x$7=Strings.concat(\" \",(x$8=List.ofSeq(Operators$7.range(0,Seq$1.length(ss)-1)),Seq$1.map(function($6)\r\n       {\r\n        return function($7)\r\n        {\r\n         return $6(\"btn\"+Global.String($7));\r\n        };\r\n       }(Global.id),x$8))),(((Runtime.Curried3(function($6,$7,$8)\r\n       {\r\n        return $6(\"buttons div \"+Utils.toSafe($7)+\" \"+Utils.toSafe($8)+\" \");\r\n       }))(Global.id))(ats))(x$7))],Seq$1.delay(function()\r\n       {\r\n        return[\"editorButtons vertical 0-85-100 FStationLyt.menuEditor buttons\"];\r\n       }));\r\n      }));\r\n     })))];\r\n    }\r\n    return b$22.Bind(Operators$3.op_BarGreaterGreater(SnippetModule.propertyHierORm(\"Buttons\",snp),function(o)\r\n    {\r\n     var $6;\r\n     return o==null?null:{\r\n      $:1,\r\n      $0:($6=o.$0,m$4($6[0],$6[1]))\r\n     };\r\n    }),function(a$5)\r\n    {\r\n     function m$5(snL,a$6)\r\n     {\r\n      var txL,o,$6;\r\n      txL=a$6[0];\r\n      return[\"Snp_\"+Strings.Replace(Global.String(snL.snpId.get_Id()),\"-\",\"\"),(o=a$5==null?null:{\r\n       $:1,\r\n       $0:($6=a$5.$0,($6[0],Strings.concat(\"\\n\",List.ofArray([txL,$6[1]]))))\r\n      },o==null?txL:o.$0)];\r\n     }\r\n     function f$26()\r\n     {\r\n      return a$5;\r\n     }\r\n     return b$22.ReturnFrom(Operators$3.op_BarGreaterGreater(Operators$3.op_BarGreaterGreater(SnippetModule.propertyHierORm(\"Layout\",snp),function(o)\r\n     {\r\n      var $6;\r\n      return o==null?null:{\r\n       $:1,\r\n       $0:($6=o.$0,m$5($6[0],$6[1]))\r\n      };\r\n     }),function(o)\r\n     {\r\n      return Option.bindNone(f$26,o);\r\n     }));\r\n    });\r\n   }))));\r\n  },Snippets.currentSnippetW());\r\n  SC$1.currentLayoutJSDW=View$1.Map(function(snp)\r\n  {\r\n   function m$4(snL,a$5)\r\n   {\r\n    return[snL.snpId,a$5[0]];\r\n   }\r\n   return Snippets.runReader(function()\r\n   {\r\n    return null;\r\n   },Operators$3.op_BarGreaterGreater(SnippetModule.propertyHierORm(\"LayoutJS\",snp),function(o)\r\n   {\r\n    var $6;\r\n    return o==null?null:{\r\n     $:1,\r\n     $0:($6=o.$0,m$4($6[0],$6[1]))\r\n    };\r\n   }));\r\n  },Snippets.currentSnippetW());\r\n  SC$1.drag=DragInfo.DragNone;\r\n  SC$1.rootdir=\"..\\\\website\";\r\n  SC$1.TemplatesFileName=\"..\\\\website\"+\"\\\\Templates.html\";\r\n  ((function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return $6(Utils.toSafe($7));\r\n   };\r\n  }(function(s$1)\r\n  {\r\n   console.log(s$1);\r\n  }))(\"..\\\\website\\\\Templates.html\"));\r\n  SC$1.startsV=Var$1.Create$1([]);\r\n  SC$1.defaultStart=(v$1=[[SnippetId.get_Empty(),\"\"],[0,1,0]],function(o)\r\n  {\r\n   return o==null?v$1:o.$0;\r\n  });\r\n  SC$1.fileName=\"none.fsx\";\r\n  SC$1.editorConfigO=null;\r\n  View$1.Sink(function(sid)\r\n  {\r\n   var x$7,o;\r\n   try\r\n   {\r\n    x$7=(o=Monaco$1.editorConfigO(),o==null?null:o.$0.editorO);\r\n    (Option.iter(function(editor)\r\n    {\r\n     editor.setModel(Monaco$1.getSnippetModel(sid));\r\n     FStation.annotationsV().Set(FStation.annotationsV().Get());\r\n    }))(x$7);\r\n   }\r\n   catch(m$4)\r\n   {\r\n    null;\r\n   }\r\n  },Snippets.CurrentSnippetIdW());\r\n  SC$1.rexGuid$1=\"\\\\((\\\\d+)\\\\,\\\\s*(\\\\d+)\\\\) - \\\\((\\\\d+)\\\\,\\\\s*(\\\\d+)\\\\).*([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})\";\r\n  SC$1.setScrollToBottom=(elO=null,View$1.Sink(function()\r\n  {\r\n   (Option.iter(function(e)\r\n   {\r\n    CustomAction.scrollToBottom(e);\r\n   }))(elO);\r\n  },FStation.outputMsgs().get_View()),function(el)\r\n  {\r\n   elO={\r\n    $:1,\r\n    $0:el\r\n   };\r\n   (function($6)\r\n   {\r\n    return $6(\"setScrollToBottom\");\r\n   }(function(s$1)\r\n   {\r\n    console.log(s$1);\r\n   }));\r\n  });\r\n  function get(a$5)\r\n  {\r\n   return a$5.$0;\r\n  }\r\n  function set(a$5)\r\n  {\r\n   return new SnippetId({\r\n    $:0,\r\n    $0:a$5\r\n   });\r\n  }\r\n  SC$1.serSnippetId=(s=Arrays.head(Strings.SplitChars((function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return $6(FSharpStation_GeneratedPrintf.p$2($7));\r\n   };\r\n  }(Global.id))(set(\"00000000-0000-0000-0000-000000000000\")),[\" \"],0)),(sQ=(function($6)\r\n  {\r\n   return function($7)\r\n   {\r\n    return $6(Utils.prettyPrint($7));\r\n   };\r\n  }(Global.id))(s),[function(id)\r\n  {\r\n   var x$7;\r\n   x$7=get(id);\r\n   return(((Runtime.Curried3(function($6,$7,$8)\r\n   {\r\n    return $6(\"{\"+Strings.PadLeft(Utils.toSafe($7),10)+\" :\"+Utils.prettyPrint($8)+\"}\");\r\n   }))(Global.id))(sQ))(x$7);\r\n  },function(x$7)\r\n  {\r\n   var x$8;\r\n   return set((x$8=x$7[s],(Serializer.deserGuid())(x$8)));\r\n  }]));\r\n  SC$1.serSnippet=(x$2=[(t=Serializer$1.serSnippetId(),Serializer.serField(\"snpId\",function(s$1)\r\n  {\r\n   return s$1.snpId;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(v$2,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t[0],t[1])),(t$1=Serializer.serString(),Serializer.serField(\"snpName\",function(s$1)\r\n  {\r\n   return s$1.snpName;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,v$2,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$1[0],t$1[1])),(t$2=Serializer.serString(),Serializer.serField(\"snpContent\",function(s$1)\r\n  {\r\n   return s$1.snpContent;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,v$2,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$2[0],t$2[1])),(t$3=(t$4=Serializer$1.serSnippetId(),Serializer.serOpt(t$4[0],t$4[1])),Serializer.serField(\"snpParentIdO\",function(s$1)\r\n  {\r\n   return s$1.snpParentIdO;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,v$2,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$3[0],t$3[1])),(t$5=(t$6=Serializer$1.serSnippetId(),Serializer.serSet(t$6[0],t$6[1])),Serializer.serField(\"snpPredIds\",function(s$1)\r\n  {\r\n   return s$1.snpPredIds;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,v$2,s$1.snpProperties,s$1.snpModified);\r\n  },t$5[0],t$5[1])),(t$7=(t$8=(x$3=Serializer.serString(),Serializer.serDup((Serializer.serString())[0],(Serializer.serString())[1],x$3[0],x$3[1])),Serializer.serArr(t$8[0],t$8[1])),Serializer.serField(\"snpProperties\",function(s$1)\r\n  {\r\n   return s$1.snpProperties;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,v$2,s$1.snpModified);\r\n  },t$7[0],t$7[1])),(t$9=Serializer.serInt(),Serializer.serFieldO(\"snpGeneration\",function()\r\n  {\r\n   return null;\r\n  },function(vO,s$1)\r\n  {\r\n   return vO!=null&&vO.$==1?Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,(new Date(0)).getTime()+vO.$0*3600000):s$1;\r\n  },t$9[0],t$9[1])),(t$10=Serializer.serDate(),Serializer.serField(\"snpModified\",function(s$1)\r\n  {\r\n   return s$1.snpModified;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,v$2);\r\n  },t$10[0],t$10[1]))],(i=SnippetModule.New(\"\",\"\",null),[function(dim)\r\n  {\r\n   var x$7;\r\n   function c$13(n,ser,_deser)\r\n   {\r\n    var x$8,m$4;\r\n    x$8=ser(dim);\r\n    m$4=((Runtime.Curried3(function($6,$7,$8)\r\n    {\r\n     return $6(Utils.prettyPrint($7)+\": \"+Utils.toSafe($8));\r\n    }))(Global.id))(n);\r\n    return x$8==null?null:{\r\n     $:1,\r\n     $0:m$4(x$8.$0)\r\n    };\r\n   }\r\n   x$7=Strings.concat(\", \",Seq$1.choose(function($6)\r\n   {\r\n    return c$13($6[0],$6[1],$6[2]);\r\n   },x$2));\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(\"{\"+Utils.toSafe($7)+\"}\");\r\n    };\r\n   }(Global.id))(x$7);\r\n  },function(o)\r\n  {\r\n   return!o?i:Seq$1.fold(function(dim,t$25)\r\n   {\r\n    return(t$25[2](dim))(o[t$25[0]]);\r\n   },i,x$2);\r\n  }]));\r\n  SC$1.serModel=(x$4=[(t$11=(t$12=Serializer$1.serSnippet(),Serializer.serArr(t$12[0],t$12[1])),Serializer.serField(\"snippets\",function(m$4)\r\n  {\r\n   return m$4.snippets;\r\n  },function(v$2,m$4)\r\n  {\r\n   return Model$1.New(v$2,m$4.modified,m$4.collapsed);\r\n  },t$11[0],t$11[1])),(t$13=Serializer.serInt(),Serializer.serFieldO(\"generation\",function()\r\n  {\r\n   return null;\r\n  },function(vO,m$4)\r\n  {\r\n   return vO!=null&&vO.$==1?Model$1.New(m$4.snippets,(new Date(0)).getTime()+vO.$0*3600000,m$4.collapsed):m$4;\r\n  },t$13[0],t$13[1])),(t$14=Serializer.serDate(),Serializer.serField(\"modified\",function(m$4)\r\n  {\r\n   return m$4.modified;\r\n  },function(v$2,m$4)\r\n  {\r\n   return Model$1.New(m$4.snippets,v$2,m$4.collapsed);\r\n  },t$14[0],t$14[1])),(t$15=(t$16=Serializer$1.serSnippetId(),Serializer.serSet(t$16[0],t$16[1])),Serializer.serField(\"collapsed\",function(m$4)\r\n  {\r\n   return m$4.collapsed;\r\n  },function(v$2,m$4)\r\n  {\r\n   return Model$1.New(m$4.snippets,m$4.modified,v$2);\r\n  },t$15[0],t$15[1]))],(i$1=Model$1.New([],(new Date(0)).getTime(),new FSharpSet.New$1(null)),[function(dim)\r\n  {\r\n   var x$7;\r\n   function c$13(n,ser,_deser)\r\n   {\r\n    var x$8,m$4;\r\n    x$8=ser(dim);\r\n    m$4=((Runtime.Curried3(function($6,$7,$8)\r\n    {\r\n     return $6(Utils.prettyPrint($7)+\": \"+Utils.toSafe($8));\r\n    }))(Global.id))(n);\r\n    return x$8==null?null:{\r\n     $:1,\r\n     $0:m$4(x$8.$0)\r\n    };\r\n   }\r\n   x$7=Strings.concat(\", \",Seq$1.choose(function($6)\r\n   {\r\n    return c$13($6[0],$6[1],$6[2]);\r\n   },x$4));\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(\"{\"+Utils.toSafe($7)+\"}\");\r\n    };\r\n   }(Global.id))(x$7);\r\n  },function(o)\r\n  {\r\n   return!o?i$1:Seq$1.fold(function(dim,t$25)\r\n   {\r\n    return(t$25[2](dim))(o[t$25[0]]);\r\n   },i$1,x$4);\r\n  }]));\r\n  SC$1.fileName$1=Var$1.Create$1(\"\");\r\n  SC$1.serSnippetId2=[function(v$2)\r\n  {\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(Utils.prettyPrint($7));\r\n    };\r\n   }(Global.id))(v$2);\r\n  },function(x$7)\r\n  {\r\n   var x$8;\r\n   return new SnippetId({\r\n    $:0,\r\n    $0:(x$8=x$7.Item,(Serializer.deserGuid())(x$8))\r\n   });\r\n  }];\r\n  SC$1.serSnippet2=(x$5=[(t$17=Importer.serSnippetId2(),Serializer.serField(\"id\",function(s$1)\r\n  {\r\n   return s$1.snpId;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(Unchecked.Equals(v$2,SnippetId.get_Empty())?new SnippetId({\r\n    $:0,\r\n    $0:Guid.NewGuid()\r\n   }):v$2,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$17[0],t$17[1])),(t$18=Serializer.serString(),Serializer.serField(\"name\",function(s$1)\r\n  {\r\n   return s$1.snpName;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,v$2,s$1.snpContent,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$18[0],t$18[1])),(t$19=Serializer.serString(),Serializer.serField(\"content\",function(s$1)\r\n  {\r\n   return s$1.snpContent;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,v$2,s$1.snpParentIdO,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$19[0],t$19[1])),(t$20=(t$21=Importer.serSnippetId2(),Serializer.serOpt(t$21[0],t$21[1])),Serializer.serField(\"parent\",function(s$1)\r\n  {\r\n   return s$1.snpParentIdO;\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,Unchecked.Equals(v$2,{\r\n    $:1,\r\n    $0:SnippetId.get_Empty()\r\n   })?null:v$2,s$1.snpPredIds,s$1.snpProperties,s$1.snpModified);\r\n  },t$20[0],t$20[1])),(t$22=(t$23=Importer.serSnippetId2(),Serializer.serArr(t$23[0],t$23[1])),Serializer.serField(\"predecessors\",function(s$1)\r\n  {\r\n   return Arrays.ofSeq(s$1.snpPredIds);\r\n  },function(v$2,s$1)\r\n  {\r\n   return Snippet.New(s$1.snpId,s$1.snpName,s$1.snpContent,s$1.snpParentIdO,new FSharpSet.New(v$2),s$1.snpProperties,s$1.snpModified);\r\n  },t$22[0],t$22[1]))],(i$2=SnippetModule.New(\"\",\"\",null),[function(dim)\r\n  {\r\n   var x$7;\r\n   function c$13(n,ser,_deser)\r\n   {\r\n    var x$8,m$4;\r\n    x$8=ser(dim);\r\n    m$4=((Runtime.Curried3(function($6,$7,$8)\r\n    {\r\n     return $6(Utils.prettyPrint($7)+\": \"+Utils.toSafe($8));\r\n    }))(Global.id))(n);\r\n    return x$8==null?null:{\r\n     $:1,\r\n     $0:m$4(x$8.$0)\r\n    };\r\n   }\r\n   x$7=Strings.concat(\", \",Seq$1.choose(function($6)\r\n   {\r\n    return c$13($6[0],$6[1],$6[2]);\r\n   },x$5));\r\n   return(function($6)\r\n   {\r\n    return function($7)\r\n    {\r\n     return $6(\"{\"+Utils.toSafe($7)+\"}\");\r\n    };\r\n   }(Global.id))(x$7);\r\n  },function(o)\r\n  {\r\n   return!o?i$2:Seq$1.fold(function(dim,t$25)\r\n   {\r\n    return(t$25[2](dim))(o[t$25[0]]);\r\n   },i$2,x$5);\r\n  }]));\r\n  SC$1.serSnippets=(t$24=Importer.serSnippet2(),Serializer.serArr(t$24[0],t$24[1]));\r\n  SC$1.endPointV=Router.InstallHash(EndPoint.NoSnippet,FSharpStation_Router.r());\r\n  function f$24(a$5)\r\n  {\r\n   var pth;\r\n   return a$5.$==0?View.rtn({\r\n    $:1,\r\n    $0:new SnippetId({\r\n     $:0,\r\n     $0:a$5.$0\r\n    })\r\n   }):a$5.$==1?(pth=a$5.$0,View$1.Map(function(p$20)\r\n   {\r\n    function m$4(s$1)\r\n    {\r\n     return s$1.snpId;\r\n    }\r\n    return p$20===Strings.concat(\"/\",pth)?Snippets.currentSnippetIdOV().Get():Snippets.runReader(Snippets.handleError,FusionM.map(function(o)\r\n    {\r\n     return o==null?null:{\r\n      $:1,\r\n      $0:m$4(o.$0)\r\n     };\r\n    },SnippetModule.snippetFromPathORm(pth)));\r\n   },Snippets.currentPathW())):View.rtn(null);\r\n  }\r\n  function a$3(sidO)\r\n  {\r\n   if(!Unchecked.Equals(Snippets.currentSnippetIdOV().Get(),sidO))\r\n    Snippets.setCurrentSnippetIdO(sidO);\r\n  }\r\n  function f$25(a$5)\r\n  {\r\n   var guid;\r\n   return a$5!=null&&a$5.$==1?(guid=a$5.$0.$0,View$1.Map(function(p$20)\r\n   {\r\n    return Unchecked.Equals({\r\n     $:1,\r\n     $0:Strings.SplitChars(p$20,[\"/\"],0)\r\n    },MainProgram.endPointV().Get())?MainProgram.endPointV().Get():{\r\n     $:0,\r\n     $0:guid\r\n    };\r\n   },Snippets.currentPathW())):View.rtn(EndPoint.NoSnippet);\r\n  }\r\n  function a$4(ep)\r\n  {\r\n   if(!Unchecked.Equals(MainProgram.endPointV().Get(),ep))\r\n    MainProgram.endPointV().Set(ep);\r\n  }\r\n  View$1.Sink((g$20=function(a$5)\r\n  {\r\n   View$1.Get(a$3,a$5);\r\n  },function(x$7)\r\n  {\r\n   return g$20(f$24(x$7));\r\n  }),MainProgram.endPointV().get_View());\r\n  View$1.Sink((g$21=function(a$5)\r\n  {\r\n   View$1.Get(a$4,a$5);\r\n  },function(x$7)\r\n  {\r\n   return g$21(f$25(x$7));\r\n  }),Snippets.currentSnippetIdOV().get_View());\r\n  SC$1.FStationLyt=new PlugInName({\r\n   $:0,\r\n   $0:\"FStationLyt\"\r\n  });\r\n  x$6=Snippets.codeAndStartsW();\r\n  View$1.Sink(Library.delayed(300,function(t$25)\r\n  {\r\n   Monaco$1.parse(t$25[0],t$25[1]);\r\n  }),x$6);\r\n  View$1.Sink(function(m$4)\r\n  {\r\n   self.onbeforeunload=m$4!==\"\"?function(e)\r\n   {\r\n    e.returnValue=\"Changes you made may not be saved.\";\r\n   }:null;\r\n  },Snippets.SaveAsClassW());\r\n  SC$1.snippetNameV=Var$1.Lens(Snippets.currentSnippetV(),function($6)\r\n  {\r\n   return $6.snpName;\r\n  },function($6,$7)\r\n  {\r\n   return Snippet.New($6.snpId,$7,$6.snpContent,$6.snpParentIdO,$6.snpPredIds,$6.snpProperties,$6.snpModified);\r\n  });\r\n  SC$1.contentV=Var$1.Lens(Snippets.currentSnippetV(),function($6)\r\n  {\r\n   return $6.snpContent;\r\n  },function($6,$7)\r\n  {\r\n   return Snippet.New($6.snpId,$6.snpName,$7,$6.snpParentIdO,$6.snpPredIds,$6.snpProperties,$6.snpModified);\r\n  });\r\n  SC$1.wsStationClient=new WSMessagingClient.New(FStation.id(),null,null);\r\n  Concurrency.Start((b$21=null,Concurrency.Delay(function()\r\n  {\r\n   return Concurrency.Bind(Concurrency.Sleep(1000),function()\r\n   {\r\n    return Concurrency.While(function()\r\n    {\r\n     return true;\r\n    },Concurrency.Delay(function()\r\n    {\r\n     return Concurrency.TryWith(Concurrency.Delay(function()\r\n     {\r\n      var _this,f$26,g$22,f$27,dst,p$20;\r\n      function f$28(a$5)\r\n      {\r\n       return(FSharpStation_JsonDecoder.j$4())(JSON.parse(a$5));\r\n      }\r\n      function f$29(a$5)\r\n      {\r\n       return JSON.stringify((FSharpStation_JsonEncoder.j$4())(a$5));\r\n      }\r\n      function g$23(v$2)\r\n      {\r\n       return Concurrency.Return(v$2);\r\n      }\r\n      function g$24(m$4)\r\n      {\r\n       Operators$7.FailWith(m$4);\r\n      }\r\n      _this=Messaging.wsStationClient();\r\n      _this.payloadProcessorO={\r\n       $:1,\r\n       $0:(f$26=function(x$7)\r\n       {\r\n        return Messaging.processMessage(f$28(x$7));\r\n       },(g$22=(f$27=function(x$7)\r\n       {\r\n        return g$23(f$29(x$7));\r\n       },function(v$2)\r\n       {\r\n        return Concurrency.Bind(v$2,f$27);\r\n       }),function(x$7)\r\n       {\r\n        return g$22(f$26(x$7));\r\n       }))\r\n      };\r\n      AsyncResult.iterA(function(x$7)\r\n      {\r\n       return g$24(Global.String(x$7));\r\n      },Global.ignore,_this.sendAndForget(WebSockets.msgType(MessageType.MsgInformation,(dst=WebSockets.MessageBrokerAddress(),(p$20=JSON.stringify(((Provider.Id())())(\"Registering Processor\")),MessageGeneric.New(new Address({\r\n       $:0,\r\n       $0:\"\"\r\n      }),dst,MessageType.MsgRequest,\"\",Guid.NewGuid(),p$20,Replier.NoReply))))));\r\n      return Concurrency.Bind(Concurrency.Sleep(60000),function()\r\n      {\r\n       return Concurrency.Return(null);\r\n      });\r\n     }),function(a$5)\r\n     {\r\n      ((function($6)\r\n      {\r\n       return function($7)\r\n       {\r\n        return $6(Utils.toSafe($7));\r\n       };\r\n      }(function(s$1)\r\n      {\r\n       console.log(s$1);\r\n      }))(a$5.message));\r\n      return Concurrency.Bind(Concurrency.Sleep(1000),function()\r\n      {\r\n       return Concurrency.Return(null);\r\n      });\r\n     });\r\n    }));\r\n   });\r\n  })),null);\r\n };\r\n FSharpStation_JsonEncoder.j$4=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$4?FSharpStation_JsonEncoder._v$4:FSharpStation_JsonEncoder._v$4=(Provider.EncodeUnion(void 0,\"$\",[[0,[[\"$0\",\"ResultValue\",FSharpStation_JsonEncoder.j$6,0]]],[1,[[\"$0\",\"ErrorValue\",FSharpStation_JsonEncoder.j$5,0]]]]))();\r\n };\r\n FSharpStation_JsonEncoder.j$6=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$6?FSharpStation_JsonEncoder._v$6:FSharpStation_JsonEncoder._v$6=(Provider.EncodeUnion(void 0,\"$\",[[0,[[\"$0\",\"Item\",Provider.Id(),0]]],[1,[[\"$0\",\"Item\",Provider.EncodeArray(FSharpStation_JsonEncoder.j$7),0]]],[2,[[\"$0\",\"Item\",Provider.EncodeDateTime(),0]]]]))();\r\n };\r\n FSharpStation_JsonEncoder.j$7=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$7?FSharpStation_JsonEncoder._v$7:FSharpStation_JsonEncoder._v$7=(Provider.EncodeRecord(void 0,[[\"snpId\",FSharpStation_JsonEncoder.j$8,0],[\"snpName\",Provider.Id(),0],[\"snpContent\",Provider.Id(),0],[\"snpParentIdO\",FSharpStation_JsonEncoder.j$8,1],[\"snpPredIds\",Provider.EncodeSet(FSharpStation_JsonEncoder.j$8),0],[\"snpProperties\",Provider.EncodeArray(Provider.EncodeTuple([Provider.Id(),Provider.Id()])),0],[\"snpModified\",Provider.EncodeDateTime(),0]]))();\r\n };\r\n FSharpStation_JsonEncoder.j$8=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$8?FSharpStation_JsonEncoder._v$8:FSharpStation_JsonEncoder._v$8=(Provider.EncodeUnion(SnippetId,\"$\",[[0,[[\"$0\",\"Item\",Provider.Id(),0]]]]))();\r\n };\r\n FSharpStation_Templates.appfwkclient=function(h)\r\n {\r\n  FSharpStation_Templates.fixedsplitterhor();\r\n  FSharpStation_Templates.fixedsplitterver();\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"appfwkclient\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_GeneratedPrintf.p=function($1)\r\n {\r\n  return\"PlgElemName \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_Templates.fixedsplitterhor=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"fixedsplitterhor\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_GeneratedPrintf.p$2=function($1)\r\n {\r\n  return\"SnippetId \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_Router.r=function()\r\n {\r\n  return RouterOperators.JSUnion(void 0,[[null,[[null,[\"Snippet\"]]],[RouterOperators.rGuid()]],[null,[[null,[\"Path\"]]],[RouterOperators.rWildcardArray(RouterOperators.rString())]],[null,[[null,[]]],[]]]);\r\n };\r\n GeneratedPrintf.p=function($1)\r\n {\r\n  return\"{\"+(\"docName = \"+FSharpStation_GeneratedPrintf.p($1.docName))+\"; \"+(\"docDoc = \"+Utils.prettyPrint($1.docDoc))+\"}\";\r\n };\r\n FSharpStation_JsonDecoder.j$5=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$5?FSharpStation_JsonDecoder._v$5:FSharpStation_JsonDecoder._v$5=(Provider.DecodeUnion(void 0,\"$\",[[0,[[\"$0\",\"Item\",FSharpStation_JsonDecoder.j$6,0]]],[1,[[\"$0\",\"Item\",Provider.DecodeArray(Provider.Id()),0]]]]))();\r\n };\r\n FSharpStation_JsonDecoder.j$6=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$6?FSharpStation_JsonDecoder._v$6:FSharpStation_JsonDecoder._v$6=(Provider.DecodeUnion(SnippetId,\"$\",[[0,[[\"$0\",\"Item\",Provider.Id(),0]]]]))();\r\n };\r\n FSharpStation_JsonDecoder.j$4=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$4?FSharpStation_JsonDecoder._v$4:FSharpStation_JsonDecoder._v$4=(Provider.DecodeUnion(void 0,\"$\",[[0,[]],[1,[[\"$0\",\"Item\",Provider.DecodeArray(FSharpStation_JsonDecoder.j$5),0]]],[2,[[\"$0\",\"Item\",FSharpStation_JsonDecoder.j$5,0]]],[3,[[\"$0\",\"Item\",FSharpStation_JsonDecoder.j$5,0]]],[4,[[\"$0\",\"Item\",Provider.DecodeArray(Provider.Id()),0]]],[5,[]],[6,[[\"$0\",\"Item\",Provider.Id(),0]]],[7,[[\"$0\",\"Item1\",Provider.Id(),0],[\"$1\",\"Item2\",Provider.Id(),0]]],[8,[[\"$0\",\"Item\",FSharpStation_JsonDecoder.j$5,0]]]]))();\r\n };\r\n FSharpStation_GeneratedPrintf.p$1=function($1)\r\n {\r\n  return $1.$==1?\"FullRef (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.prettyPrint($1.$1)+\")\":\"LocalRef \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_JsonEncoder.j$5=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$5?FSharpStation_JsonEncoder._v$5:FSharpStation_JsonEncoder._v$5=(Provider.EncodeUnion(ResultMessage,\"$\",[[0,[]],[1,[[\"$0\",\"Item\",Provider.Id(),0]]],[2,[[\"$0\",\"Item\",Provider.Id(),0]]],[3,[[\"$0\",\"Item\",Provider.Id(),0]]],[4,[[\"$0\",\"Item\",Provider.Id(),0]]],[5,[[\"$0\",\"Item1\",Provider.Id(),0],[\"$1\",\"Item2\",Provider.Id(),0]]],[6,[[\"$0\",\"Item\",Provider.EncodeArray(FSharpStation_JsonEncoder.j$5),0]]]]))();\r\n };\r\n FSharpStation_Templates.fixedsplitterver=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"fixedsplitterver\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.wcompsplitterver=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"wcompsplitterver\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.wcompsplitterhor=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"wcompsplitterhor\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.appframework=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"appframework\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.tile=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"tile\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.action=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"action\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.namevalue=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"namevalue\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.namevalueinput=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"appframework\");\r\n  return h?Templates.NamedTemplate(\"appframework\",{\r\n   $:1,\r\n   $0:\"namevalueinput\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_GeneratedPrintf.p$3=function($1)\r\n {\r\n  return $1.$==7?\"EnPlgRef \"+(\"(\"+Utils.prettyPrint($1.$0[0])+\", \"+FSharpStation_GeneratedPrintf.p$27($1.$0[1])+\")\"):$1.$==6?\"EnPlgDef \"+FSharpStation_GeneratedPrintf.p$26($1.$0):$1.$==5?\"EnVJSDef \"+FSharpStation_GeneratedPrintf.p$25($1.$0):$1.$==4?\"EnViwDef \"+FSharpStation_GeneratedPrintf.p$24($1.$0):$1.$==3?\"EnVarDef \"+FSharpStation_GeneratedPrintf.p$23($1.$0):$1.$==2?\"EnActDefs \"+FSharpStation_GeneratedPrintf.p$22($1.$0):$1.$==1?\"EnActDef \"+FSharpStation_GeneratedPrintf.p$21($1.$0):\"EnDocDef \"+FSharpStation_GeneratedPrintf.p$4($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$27=function($1)\r\n {\r\n  return $1.$==4?\"RPlg\":$1.$==3?\"RAct\":$1.$==2?\"RViw\":$1.$==1?\"RVar\":\"RDoc\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$26=function($1)\r\n {\r\n  return\"PlgDef \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$25=function($1)\r\n {\r\n  return\"VJSDef \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$17($2);\r\n  },$1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$24=function($1)\r\n {\r\n  return\"ViwDef \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$17($2);\r\n  },$1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$23=function($1)\r\n {\r\n  return\"VarDef \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$22=function($1)\r\n {\r\n  return\"ActDefs \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$9($2);\r\n  },$1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$21=function($1)\r\n {\r\n  return\"ActDef (\"+FSharpStation_GeneratedPrintf.p$9($1.$0)+\", \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$17($2);\r\n  },$1.$1)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$4=function($1)\r\n {\r\n  return $1.$==7?\"DcTemplate \"+GeneratedPrintf.p$1($1.$0):$1.$==6?\"DcElement \"+FSharpStation_GeneratedPrintf.p$20($1.$0):$1.$==5?\"DcConcat \"+FSharpStation_GeneratedPrintf.p$18($1.$0):$1.$==4?\"DcDocF \"+FSharpStation_GeneratedPrintf.p$16($1.$0):$1.$==3?\"DcTextArea \"+FSharpStation_GeneratedPrintf.p$15($1.$0):$1.$==2?\"DcInput \"+FSharpStation_GeneratedPrintf.p$14($1.$0):$1.$==1?\"DcButton \"+FSharpStation_GeneratedPrintf.p$8($1.$0):\"DcSplitter \"+FSharpStation_GeneratedPrintf.p$5($1.$0);\r\n };\r\n GeneratedPrintf.p$1=function($1)\r\n {\r\n  return\"{\"+(\"tmpName = \"+Utils.prettyPrint($1.tmpName))+\"; \"+(\"vars = \"+Utils.printArray(function($2)\r\n  {\r\n   return\"(\"+Utils.prettyPrint($2[0])+\", \"+FSharpStation_GeneratedPrintf.p$12($2[1])+\")\";\r\n  },$1.vars))+\"; \"+(\"views = \"+Utils.printArray(function($2)\r\n  {\r\n   return\"(\"+Utils.prettyPrint($2[0])+\", \"+FSharpStation_GeneratedPrintf.p$17($2[1])+\")\";\r\n  },$1.views))+\"; \"+(\"docs = \"+Utils.printArray(function($2)\r\n  {\r\n   return\"(\"+Utils.prettyPrint($2[0])+\", \"+FSharpStation_GeneratedPrintf.p$7($2[1])+\")\";\r\n  },$1.docs))+\"; \"+(\"actions = \"+Utils.printArray(function($2)\r\n  {\r\n   return\"(\"+Utils.prettyPrint($2[0])+\", \"+FSharpStation_GeneratedPrintf.p$9($2[1])+\")\";\r\n  },$1.actions))+\"; \"+(\"attrs = \"+FSharpStation_GeneratedPrintf.p$17($1.attrs))+\"}\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$20=function($1)\r\n {\r\n  return\"ElementDef (\"+Utils.prettyPrint($1.$0)+\", \"+FSharpStation_GeneratedPrintf.p$17($1.$1)+\", \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$19($2);\r\n  },$1.$2)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$18=function($1)\r\n {\r\n  return\"ConcatDef \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$19($2);\r\n  },$1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$19=function($1)\r\n {\r\n  return $1.$==3?\"NdViwRef \"+FSharpStation_GeneratedPrintf.p$13($1.$0):$1.$==2?\"NdVarRef \"+FSharpStation_GeneratedPrintf.p$12($1.$0):$1.$==1?\"NdDocRef \"+FSharpStation_GeneratedPrintf.p$7($1.$0):\"NdTextValL \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$11($2);\r\n  },$1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$16=function($1)\r\n {\r\n  return\"DocFDef (\"+FSharpStation_GeneratedPrintf.p$7($1.$0)+\", \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$17($2);\r\n  },$1.$1)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$17=function($1)\r\n {\r\n  return $1.$==4?\"PrActRef \"+FSharpStation_GeneratedPrintf.p$9($1.$0):$1.$==3?\"PrViwRef \"+FSharpStation_GeneratedPrintf.p$13($1.$0):$1.$==2?\"PrVarRef \"+FSharpStation_GeneratedPrintf.p$12($1.$0):$1.$==1?\"PrDocRef \"+FSharpStation_GeneratedPrintf.p$7($1.$0):\"PrTextValL \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$11($2);\r\n  },$1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$15=function($1)\r\n {\r\n  return\"TextAreaDef (\"+FSharpStation_GeneratedPrintf.p$12($1.$0)+\", \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$10($2);\r\n  },$1.$1)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$14=function($1)\r\n {\r\n  return\"InputDef (\"+FSharpStation_GeneratedPrintf.p$12($1.$0)+\", \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$10($2);\r\n  },$1.$1)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$8=function($1)\r\n {\r\n  return\"ButtonDef (\"+FSharpStation_GeneratedPrintf.p$9($1.$0)+\", \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$10($2);\r\n  },$1.$1)+\", \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$11($2);\r\n  },$1.$2)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$10=function($1)\r\n {\r\n  return $1.$==2?\"AtAct (\"+Utils.prettyPrint($1.$0)+\", \"+FSharpStation_GeneratedPrintf.p$9($1.$1)+\")\":$1.$==1?\"AtAttr (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$11($2);\r\n  },$1.$1)+\")\":\"AtStyle (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.printList(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$11($2);\r\n  },$1.$1)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$11=function($1)\r\n {\r\n  return $1.$==4?\"TvDocRef \"+FSharpStation_GeneratedPrintf.p$7($1.$0):$1.$==3?\"TvActRef \"+FSharpStation_GeneratedPrintf.p$9($1.$0):$1.$==2?\"TvViwRef \"+FSharpStation_GeneratedPrintf.p$13($1.$0):$1.$==1?\"TvVarRef \"+FSharpStation_GeneratedPrintf.p$12($1.$0):\"TvConst \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$13=function($1)\r\n {\r\n  return\"ViwRef \"+FSharpStation_GeneratedPrintf.p$1($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$12=function($1)\r\n {\r\n  return\"VarRef \"+FSharpStation_GeneratedPrintf.p$1($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$9=function($1)\r\n {\r\n  return\"ActRef \"+FSharpStation_GeneratedPrintf.p$1($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$5=function($1)\r\n {\r\n  return\"SplitterDef (\"+Utils.prettyPrint($1.$0)+\", \"+FSharpStation_GeneratedPrintf.p$6($1.$1)+\", \"+FSharpStation_GeneratedPrintf.p$7($1.$2)+\", \"+FSharpStation_GeneratedPrintf.p$7($1.$3)+\")\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$7=function($1)\r\n {\r\n  return\"DocRef \"+FSharpStation_GeneratedPrintf.p$1($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$6=function($1)\r\n {\r\n  return $1.$==1?\"Variable (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.prettyPrint($1.$1)+\", \"+Utils.prettyPrint($1.$2)+\")\":\"Fixed (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.prettyPrint($1.$1)+\")\";\r\n };\r\n GeneratedPrintf.p$2=function($1)\r\n {\r\n  return\"{\"+(\"actName = \"+FSharpStation_GeneratedPrintf.p($1.actName))+\"; \"+(\"actFunction = \"+FSharpStation_GeneratedPrintf.p$28($1.actFunction))+\"; \"+(\"actEnabled = \"+FSharpStation_GeneratedPrintf.p$29($1.actEnabled))+\"}\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$29=function($1)\r\n {\r\n  return\"View <fun>\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$28=function($1)\r\n {\r\n  return $1.$==2?\"FunAct2 (<fun>, \"+Utils.prettyPrint($1.$1)+\", \"+Utils.prettyPrint($1.$2)+\")\":$1.$==1?\"FunAct1 (<fun>, \"+Utils.prettyPrint($1.$1)+\")\":\"FunAct0 <fun>\";\r\n };\r\n FSharpStation_Templates.snippetlist=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"snippetlist\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.snippet=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"snippet\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.propertytable=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"propertytable\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.property=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"property\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.layout=function(h)\r\n {\r\n  FSharpStation_Templates.fixedsplitterhor$1();\r\n  FSharpStation_Templates.fixedsplitterver$1();\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"layout\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.fixedsplitterver$1=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"fixedsplitterver\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.fixedsplitterhor$1=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"fixedsplitterhor\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_Templates.buttonsright=function(h)\r\n {\r\n  Templates.LoadLocalTemplates(\"templates\");\r\n  return h?Templates.NamedTemplate(\"templates\",{\r\n   $:1,\r\n   $0:\"buttonsright\"\r\n  },h):void 0;\r\n };\r\n FSharpStation_GeneratedPrintf.p$30=function($1)\r\n {\r\n  return $1.$==6?\"RMessages \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$30($2);\r\n  },$1.$0):$1.$==5?\"ExceptMsg (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.prettyPrint($1.$1)+\")\":$1.$==4?\"Message \"+Utils.prettyPrint($1.$0):$1.$==3?\"Info \"+Utils.prettyPrint($1.$0):$1.$==2?\"Warning \"+Utils.prettyPrint($1.$0):$1.$==1?\"ErrorMsg \"+Utils.prettyPrint($1.$0):\"NoMsg\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$32=function($1)\r\n {\r\n  return $1.$==8?\"MsgGetModified \"+FSharpStation_GeneratedPrintf.p$31($1.$0):$1.$==7?\"MsgSetValue (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.prettyPrint($1.$1)+\")\":$1.$==6?\"MsgGetValue \"+Utils.prettyPrint($1.$0):$1.$==5?\"MsgGetUrl\":$1.$==4?\"MsgAction \"+Utils.printArray(Utils.prettyPrint,$1.$0):$1.$==3?\"MsgGetPredecessors \"+FSharpStation_GeneratedPrintf.p$31($1.$0):$1.$==2?\"MsgGetCode \"+FSharpStation_GeneratedPrintf.p$31($1.$0):$1.$==1?\"MsgGetSnippets \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$31($2);\r\n  },$1.$0):\"MsgGetId\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$31=function($1)\r\n {\r\n  return $1.$==1?\"RefSnippetPath \"+Utils.printArray(Utils.prettyPrint,$1.$0):\"RefSnippetId \"+FSharpStation_GeneratedPrintf.p$2($1.$0);\r\n };\r\n FSharpStation_JsonEncoder.j$9=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$9?FSharpStation_JsonEncoder._v$9:FSharpStation_JsonEncoder._v$9=(Provider.EncodeUnion(void 0,\"type\",[[\"BRGetConnections\",[]],[\"BRGetProcessId\",[]]]))();\r\n };\r\n FSharpStation_GeneratedPrintf.p$33=function($1)\r\n {\r\n  return $1.$==2?\"BRString \"+Utils.prettyPrint($1.$0):$1.$==1?\"BRPid \"+Utils.prettyPrint($1.$0):\"BRConnections \"+Utils.printArray(Utils.prettyPrint,$1.$0);\r\n };\r\n FSharpStation_JsonDecoder.j$7=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$7?FSharpStation_JsonDecoder._v$7:FSharpStation_JsonDecoder._v$7=(Provider.DecodeUnion(void 0,\"type\",[[\"BRConnections\",[[\"$0\",\"Item\",Provider.DecodeArray(Provider.Id()),0]]],[\"BRPid\",[[\"$0\",\"Item\",Provider.Id(),0]]],[\"BRString\",[[\"$0\",\"Item\",Provider.Id(),0]]]]))();\r\n };\r\n FSharpStation_JsonDecoder.j$8=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$8?FSharpStation_JsonDecoder._v$8:FSharpStation_JsonDecoder._v$8=(Provider.DecodeUnion(void 0,\"type\",[[\"BMOk\",[]],[\"BMOnlyBrokerShouldUse\",[]],[\"BMDestinationNotFound\",[[\"$0\",\"Item\",FSharpStation_JsonDecoder.j$1,0]]],[\"BMWebSocketError\",[[\"$0\",\"Item\",Provider.Id(),0]]],[\"BMReceiverCantReply\",[]],[\"BMUnexpectedMsgType\",[[\"$0\",\"Item\",FSharpStation_JsonDecoder.j$2,0]]],[\"BMUnexpectedResponse\",[[\"$0\",\"Item\",Provider.Id(),0]]]]))();\r\n };\r\n FSharpStation_GeneratedPrintf.p$36=function($1)\r\n {\r\n  return $1.$==2?\"Receiver\":$1.$==1?\"Broker\":\"NoReply\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$35=function($1)\r\n {\r\n  return $1.$==5?\"MsgRequestForEcho\":$1.$==4?\"MsgRequestForId\":$1.$==3?\"MsgFromBroker\":$1.$==2?\"MsgReply\":$1.$==1?\"MsgRequest\":\"MsgInformation\";\r\n };\r\n GeneratedPrintf.p$3=function($1)\r\n {\r\n  return\"{\"+(\"from = \"+FSharpStation_GeneratedPrintf.p$34($1.from))+\"; \"+(\"destination = \"+FSharpStation_GeneratedPrintf.p$34($1.destination))+\"; \"+(\"msgType = \"+FSharpStation_GeneratedPrintf.p$35($1.msgType))+\"; \"+(\"subtype = \"+Utils.prettyPrint($1.subtype))+\"; \"+(\"id = \"+Utils.prettyPrint($1.id))+\"; \"+(\"payload = \"+Utils.prettyPrint($1.payload))+\"; \"+(\"replier = \"+FSharpStation_GeneratedPrintf.p$36($1.replier))+\"}\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$34=function($1)\r\n {\r\n  return\"Address \"+Utils.prettyPrint($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$37=function($1)\r\n {\r\n  return $1.$==3?\"Close\":$1.$==2?\"Open\":$1.$==1?\"Error\":\"Message \"+GeneratedPrintf.p$3($1.$0);\r\n };\r\n FSharpStation_GeneratedPrintf.p$38=function($1)\r\n {\r\n  return $1.$==6?\"RMessages \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$38($2);\r\n  },$1.$0):$1.$==5?\"ExceptMsg (\"+Utils.prettyPrint($1.$0)+\", \"+Utils.prettyPrint($1.$1)+\")\":$1.$==4?\"Message \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$39($2);\r\n  },$1.$0):$1.$==3?\"Info \"+Utils.prettyPrint($1.$0):$1.$==2?\"Warning \"+Utils.prettyPrint($1.$0):$1.$==1?\"ErrorMsg \"+Utils.prettyPrint($1.$0):\"NoMsg\";\r\n };\r\n FSharpStation_GeneratedPrintf.p$39=function($1)\r\n {\r\n  return $1.$==17?\"KMultiple \"+Utils.printArray(function($2)\r\n  {\r\n   return FSharpStation_GeneratedPrintf.p$39($2);\r\n  },$1.$0):$1.$==16?\"KUnionCase \"+GeneratedPrintf.p$25($1.$0):$1.$==15?\"KNamespaces \"+GeneratedPrintf.p$22($1.$0):$1.$==14?\"KCompilerLocation \"+GeneratedPrintf.p$21($1.$0):$1.$==13?\"KSignatureData \"+GeneratedPrintf.p$19($1.$0):$1.$==12?\"KTypeSig \"+Utils.prettyPrint($1.$0):$1.$==11?\"KToolTip \"+Utils.printArray(function($2)\r\n  {\r\n   return Utils.printArray(function($3)\r\n   {\r\n    return GeneratedPrintf.p$6($3);\r\n   },$2);\r\n  },$1.$0):$1.$==10?\"KDeclarations \"+Utils.printArray(function($2)\r\n  {\r\n   return GeneratedPrintf.p$17($2);\r\n  },$1.$0):$1.$==9?\"KFindDecl \"+GeneratedPrintf.p$16($1.$0):$1.$==8?\"KColorizations \"+Utils.printList(function($2)\r\n  {\r\n   return GeneratedPrintf.p$15($2);\r\n  },$1.$0):$1.$==7?\"KErrors \"+GeneratedPrintf.p$13($1.$0):$1.$==6?\"KMethod \"+GeneratedPrintf.p$10($1.$0):$1.$==5?\"KHelp \"+Utils.prettyPrint($1.$0):$1.$==4?\"KSymbolUse \"+GeneratedPrintf.p$8($1.$0):$1.$==3?\"KCompletion \"+Utils.printArray(function($2)\r\n  {\r\n   return GeneratedPrintf.p$7($2);\r\n  },$1.$0):$1.$==2?\"KHelpText \"+GeneratedPrintf.p$5($1.$0):$1.$==1?\"KError \"+GeneratedPrintf.p$4($1.$0):\"KInfo \"+Utils.prettyPrint($1.$0);\r\n };\r\n GeneratedPrintf.p$25=function($1)\r\n {\r\n  return\"{\"+(\"Text = \"+Utils.prettyPrint($1.Text))+\"}\";\r\n };\r\n GeneratedPrintf.p$24=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"Qualifier = \"+Utils.prettyPrint($1.Qualifier))+\"}\";\r\n };\r\n GeneratedPrintf.p$23=function($1)\r\n {\r\n  return\"{\"+(\"Namespace = \"+Utils.prettyPrint($1.Namespace))+\"; \"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"Type = \"+Utils.prettyPrint($1.Type))+\"; \"+(\"Line = \"+Utils.prettyPrint($1.Line))+\"; \"+(\"Column = \"+Utils.prettyPrint($1.Column))+\"; \"+(\"MultipleNames = \"+Utils.prettyPrint($1.MultipleNames))+\"}\";\r\n };\r\n GeneratedPrintf.p$21=function($1)\r\n {\r\n  return\"{\"+(\"Fsc = \"+Utils.prettyPrint($1.Fsc))+\"; \"+(\"Fsi = \"+Utils.prettyPrint($1.Fsi))+\"; \"+(\"MSBuild = \"+Utils.prettyPrint($1.MSBuild))+\"}\";\r\n };\r\n GeneratedPrintf.p$19=function($1)\r\n {\r\n  return\"{\"+(\"OutputType = \"+Utils.prettyPrint($1.OutputType))+\"; \"+(\"Parameters = \"+Utils.printList(function($2)\r\n  {\r\n   return Utils.printList(function($3)\r\n   {\r\n    return GeneratedPrintf.p$20($3);\r\n   },$2);\r\n  },$1.Parameters))+\"}\";\r\n };\r\n GeneratedPrintf.p$22=function($1)\r\n {\r\n  return\"{\"+(\"Opens = \"+Utils.printArray(function($2)\r\n  {\r\n   return GeneratedPrintf.p$23($2);\r\n  },$1.Opens))+\"; \"+(\"Qualifies = \"+Utils.printArray(function($2)\r\n  {\r\n   return GeneratedPrintf.p$24($2);\r\n  },$1.Qualifies))+\"; \"+(\"Word = \"+Utils.prettyPrint($1.Word))+\"}\";\r\n };\r\n GeneratedPrintf.p$20=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"Type = \"+Utils.prettyPrint($1.Type))+\"}\";\r\n };\r\n GeneratedPrintf.p$17=function($1)\r\n {\r\n  return\"{\"+(\"Declaration = \"+GeneratedPrintf.p$18($1.Declaration))+\"; \"+(\"Nested = \"+Utils.printArray(function($2)\r\n  {\r\n   return GeneratedPrintf.p$18($2);\r\n  },$1.Nested))+\"}\";\r\n };\r\n GeneratedPrintf.p$16=function($1)\r\n {\r\n  return\"{\"+(\"File = \"+Utils.prettyPrint($1.File))+\"; \"+(\"Line = \"+Utils.prettyPrint($1.Line))+\"; \"+(\"Column = \"+Utils.prettyPrint($1.Column))+\"}\";\r\n };\r\n GeneratedPrintf.p$18=function($1)\r\n {\r\n  return\"{\"+(\"UniqueName = \"+Utils.prettyPrint($1.UniqueName))+\"; \"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"Glyph = \"+Utils.prettyPrint($1.Glyph))+\"; \"+(\"GlyphChar = \"+Utils.prettyPrint($1.GlyphChar))+\"; \"+(\"IsTopLevel = \"+Utils.prettyPrint($1.IsTopLevel))+\"; \"+(\"File = \"+Utils.prettyPrint($1.File))+\"; \"+(\"EnclosingEntity = \"+Utils.prettyPrint($1.EnclosingEntity))+\"; \"+(\"IsAbstract = \"+Utils.prettyPrint($1.IsAbstract))+\"}\";\r\n };\r\n GeneratedPrintf.p$15=function($1)\r\n {\r\n  return\"{\"+(\"Kind = \"+Utils.prettyPrint($1.Kind))+\"}\";\r\n };\r\n GeneratedPrintf.p$13=function($1)\r\n {\r\n  return\"{\"+(\"File = \"+Utils.prettyPrint($1.File))+\"; \"+(\"Errors = \"+Utils.printArray(function($2)\r\n  {\r\n   return GeneratedPrintf.p$14($2);\r\n  },$1.Errors))+\"}\";\r\n };\r\n GeneratedPrintf.p$14=function($1)\r\n {\r\n  return\"{\"+(\"FileName = \"+Utils.prettyPrint($1.FileName))+\"; \"+(\"StartLine = \"+Utils.prettyPrint($1.StartLine))+\"; \"+(\"EndLine = \"+Utils.prettyPrint($1.EndLine))+\"; \"+(\"StartColumn = \"+Utils.prettyPrint($1.StartColumn))+\"; \"+(\"EndColumn = \"+Utils.prettyPrint($1.EndColumn))+\"; \"+(\"Severity = \"+Utils.prettyPrint($1.Severity))+\"; \"+(\"Message = \"+Utils.prettyPrint($1.Message))+\"; \"+(\"Subcategory = \"+Utils.prettyPrint($1.Subcategory))+\"}\";\r\n };\r\n GeneratedPrintf.p$10=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"CurrentParameter = \"+Utils.prettyPrint($1.CurrentParameter))+\"; \"+(\"Overloads = \"+Utils.printList(function($2)\r\n  {\r\n   return GeneratedPrintf.p$11($2);\r\n  },$1.Overloads))+\"}\";\r\n };\r\n GeneratedPrintf.p$11=function($1)\r\n {\r\n  return\"{\"+(\"Tip = \"+Utils.printList(function($2)\r\n  {\r\n   return Utils.printList(function($3)\r\n   {\r\n    return GeneratedPrintf.p$6($3);\r\n   },$2);\r\n  },$1.Tip))+\"; \"+(\"TypeText = \"+Utils.prettyPrint($1.TypeText))+\"; \"+(\"Parameters = \"+Utils.printList(function($2)\r\n  {\r\n   return GeneratedPrintf.p$12($2);\r\n  },$1.Parameters))+\"; \"+(\"IsStaticArguments = \"+Utils.prettyPrint($1.IsStaticArguments))+\"}\";\r\n };\r\n GeneratedPrintf.p$12=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"CanonicalTypeTextForSorting = \"+Utils.prettyPrint($1.CanonicalTypeTextForSorting))+\"; \"+(\"Display = \"+Utils.prettyPrint($1.Display))+\"; \"+(\"Description = \"+Utils.prettyPrint($1.Description))+\"}\";\r\n };\r\n GeneratedPrintf.p$8=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"Uses = \"+Utils.printList(function($2)\r\n  {\r\n   return GeneratedPrintf.p$9($2);\r\n  },$1.Uses))+\"}\";\r\n };\r\n GeneratedPrintf.p$9=function($1)\r\n {\r\n  return\"{\"+(\"FileName = \"+Utils.prettyPrint($1.FileName))+\"; \"+(\"StartLine = \"+Utils.prettyPrint($1.StartLine))+\"; \"+(\"StartColumn = \"+Utils.prettyPrint($1.StartColumn))+\"; \"+(\"EndLine = \"+Utils.prettyPrint($1.EndLine))+\"; \"+(\"EndColumn = \"+Utils.prettyPrint($1.EndColumn))+\"; \"+(\"IsFromDefinition = \"+Utils.prettyPrint($1.IsFromDefinition))+\"; \"+(\"IsFromAttribute = \"+Utils.prettyPrint($1.IsFromAttribute))+\"; \"+(\"IsFromComputationExpression = \"+Utils.prettyPrint($1.IsFromComputationExpression))+\"; \"+(\"IsFromDispatchSlotImplementation = \"+Utils.prettyPrint($1.IsFromDispatchSlotImplementation))+\"; \"+(\"IsFromPattern = \"+Utils.prettyPrint($1.IsFromPattern))+\"; \"+(\"IsFromType = \"+Utils.prettyPrint($1.IsFromType))+\"}\";\r\n };\r\n GeneratedPrintf.p$7=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"ReplacementText = \"+Utils.prettyPrint($1.ReplacementText))+\"; \"+(\"Glyph = \"+Utils.prettyPrint($1.Glyph))+\"; \"+(\"GlyphChar = \"+Utils.prettyPrint($1.GlyphChar))+\"}\";\r\n };\r\n GeneratedPrintf.p$5=function($1)\r\n {\r\n  return\"{\"+(\"Name = \"+Utils.prettyPrint($1.Name))+\"; \"+(\"Overloads = \"+Utils.printList(function($2)\r\n  {\r\n   return Utils.printList(function($3)\r\n   {\r\n    return GeneratedPrintf.p$6($3);\r\n   },$2);\r\n  },$1.Overloads))+\"}\";\r\n };\r\n GeneratedPrintf.p$6=function($1)\r\n {\r\n  return\"{\"+(\"Signature = \"+Utils.prettyPrint($1.Signature))+\"; \"+(\"Comment = \"+Utils.prettyPrint($1.Comment))+\"; \"+(\"Footer = \"+Utils.prettyPrint($1.Footer))+\"}\";\r\n };\r\n GeneratedPrintf.p$4=function($1)\r\n {\r\n  return\"{\"+(\"Code = \"+Utils.prettyPrint($1.Code))+\"; \"+(\"Message = \"+Utils.prettyPrint($1.Message))+\"}\";\r\n };\r\n FSharpStation_JsonEncoder.j$1=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$1?FSharpStation_JsonEncoder._v$1:FSharpStation_JsonEncoder._v$1=(Provider.EncodeUnion(Address,\"$\",[[0,[[\"$0\",\"address\",Provider.Id(),0]]]]))();\r\n };\r\n FSharpStation_JsonEncoder.j$2=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$2?FSharpStation_JsonEncoder._v$2:FSharpStation_JsonEncoder._v$2=(Provider.EncodeUnion(void 0,\"type\",[[\"MsgInformation\",[]],[\"MsgRequest\",[]],[\"MsgReply\",[]],[\"MsgFromBroker\",[]],[\"MsgRequestForId\",[]],[\"MsgRequestForEcho\",[]]]))();\r\n };\r\n FSharpStation_JsonEncoder.j$3=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v$3?FSharpStation_JsonEncoder._v$3:FSharpStation_JsonEncoder._v$3=(Provider.EncodeUnion(void 0,\"type\",[[\"NoReply\",[]],[\"Broker\",[]],[\"Receiver\",[]]]))();\r\n };\r\n FSharpStation_JsonEncoder.j=function()\r\n {\r\n  return FSharpStation_JsonEncoder._v?FSharpStation_JsonEncoder._v:FSharpStation_JsonEncoder._v=(Provider.EncodeRecord(void 0,[[\"from\",FSharpStation_JsonEncoder.j$1,0],[\"destination\",FSharpStation_JsonEncoder.j$1,0],[\"msgType\",FSharpStation_JsonEncoder.j$2,0],[\"subtype\",Provider.Id(),0],[\"id\",Provider.Id(),0],[\"payload\",Provider.Id(),0],[\"replier\",FSharpStation_JsonEncoder.j$3,0]]))();\r\n };\r\n FSharpStation_JsonDecoder.j$1=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$1?FSharpStation_JsonDecoder._v$1:FSharpStation_JsonDecoder._v$1=(Provider.DecodeUnion(Address,\"$\",[[0,[[\"$0\",\"address\",Provider.Id(),0]]]]))();\r\n };\r\n FSharpStation_JsonDecoder.j$2=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$2?FSharpStation_JsonDecoder._v$2:FSharpStation_JsonDecoder._v$2=(Provider.DecodeUnion(void 0,\"type\",[[\"MsgInformation\",[]],[\"MsgRequest\",[]],[\"MsgReply\",[]],[\"MsgFromBroker\",[]],[\"MsgRequestForId\",[]],[\"MsgRequestForEcho\",[]]]))();\r\n };\r\n FSharpStation_JsonDecoder.j$3=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v$3?FSharpStation_JsonDecoder._v$3:FSharpStation_JsonDecoder._v$3=(Provider.DecodeUnion(void 0,\"type\",[[\"NoReply\",[]],[\"Broker\",[]],[\"Receiver\",[]]]))();\r\n };\r\n FSharpStation_JsonDecoder.j=function()\r\n {\r\n  return FSharpStation_JsonDecoder._v?FSharpStation_JsonDecoder._v:FSharpStation_JsonDecoder._v=(Provider.DecodeRecord(void 0,[[\"from\",FSharpStation_JsonDecoder.j$1,0],[\"destination\",FSharpStation_JsonDecoder.j$1,0],[\"msgType\",FSharpStation_JsonDecoder.j$2,0],[\"subtype\",Provider.Id(),0],[\"id\",Provider.Id(),0],[\"payload\",Provider.Id(),0],[\"replier\",FSharpStation_JsonDecoder.j$3,0]]))();\r\n };\r\n}());\r\n"
    }
  ]
}